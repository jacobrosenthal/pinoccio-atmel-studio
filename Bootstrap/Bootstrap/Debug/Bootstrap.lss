
Bootstrap.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00002204  00800200  00017380  00017414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00017380  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000016fd  00802404  00802404  00019618  2**0
                  ALLOC
  3 .comment      0000006d  00000000  00000000  00019618  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000026a8  00000000  00000000  00019685  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0006a469  00000000  00000000  0001bd2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000dc27  00000000  00000000  00086196  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00018ea3  00000000  00000000  00093dbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000089d8  00000000  00000000  000acc60  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000d319  00000000  00000000  000b5638  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00029d66  00000000  00000000  000c2951  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00002d90  00000000  00000000  000ec6b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ab 0b 	jmp	0x1756	; 0x1756 <__dtors_end>
       4:	0c 94 44 12 	jmp	0x2488	; 0x2488 <__vector_1>
       8:	0c 94 75 12 	jmp	0x24ea	; 0x24ea <__vector_2>
       c:	0c 94 a6 12 	jmp	0x254c	; 0x254c <__vector_3>
      10:	0c 94 d7 12 	jmp	0x25ae	; 0x25ae <__vector_4>
      14:	0c 94 08 13 	jmp	0x2610	; 0x2610 <__vector_5>
      18:	0c 94 39 13 	jmp	0x2672	; 0x2672 <__vector_6>
      1c:	0c 94 6a 13 	jmp	0x26d4	; 0x26d4 <__vector_7>
      20:	0c 94 9b 13 	jmp	0x2736	; 0x2736 <__vector_8>
      24:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__bad_interrupt>
      28:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__bad_interrupt>
      2c:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__bad_interrupt>
      30:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__bad_interrupt>
      34:	0c 94 e5 11 	jmp	0x23ca	; 0x23ca <__vector_13>
      38:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__bad_interrupt>
      3c:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__bad_interrupt>
      40:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__bad_interrupt>
      44:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__bad_interrupt>
      48:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__bad_interrupt>
      4c:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__bad_interrupt>
      50:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__bad_interrupt>
      54:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__bad_interrupt>
      58:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__bad_interrupt>
      5c:	0c 94 cc 13 	jmp	0x2798	; 0x2798 <__vector_23>
      60:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__bad_interrupt>
      64:	0c 94 2f 0d 	jmp	0x1a5e	; 0x1a5e <__vector_25>
      68:	0c 94 65 0d 	jmp	0x1aca	; 0x1aca <__vector_26>
      6c:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__bad_interrupt>
      70:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__bad_interrupt>
      74:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__bad_interrupt>
      78:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__bad_interrupt>
      7c:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__bad_interrupt>
      80:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__bad_interrupt>
      84:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__bad_interrupt>
      88:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__bad_interrupt>
      8c:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__bad_interrupt>
      90:	0c 94 da 0d 	jmp	0x1bb4	; 0x1bb4 <__vector_36>
      94:	0c 94 10 0e 	jmp	0x1c20	; 0x1c20 <__vector_37>
      98:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__bad_interrupt>
      9c:	0c 94 bd 1a 	jmp	0x357a	; 0x357a <__vector_39>
      a0:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__bad_interrupt>
      a4:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__bad_interrupt>
      a8:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__bad_interrupt>
      ac:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__bad_interrupt>
      b0:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__bad_interrupt>
      b4:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__bad_interrupt>
      b8:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__bad_interrupt>
      bc:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__bad_interrupt>
      c0:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__bad_interrupt>
      c4:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__bad_interrupt>
      c8:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__bad_interrupt>
      cc:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__bad_interrupt>
      d0:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__bad_interrupt>
      d4:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__bad_interrupt>
      d8:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__bad_interrupt>
      dc:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__bad_interrupt>
      e0:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__bad_interrupt>
      e4:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__bad_interrupt>
      e8:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__bad_interrupt>
      ec:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__bad_interrupt>
      f0:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__bad_interrupt>
      f4:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__bad_interrupt>
      f8:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__bad_interrupt>
      fc:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__bad_interrupt>
     100:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__bad_interrupt>
     104:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__bad_interrupt>
     108:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__bad_interrupt>
     10c:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__bad_interrupt>
     110:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__bad_interrupt>
     114:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__bad_interrupt>
     118:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__bad_interrupt>
     11c:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__bad_interrupt>
     120:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__bad_interrupt>
     124:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__bad_interrupt>
     128:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__bad_interrupt>
     12c:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__bad_interrupt>
     130:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__bad_interrupt>
     134:	27 15       	cp	r18, r7
     136:	2c 15       	cp	r18, r12
     138:	31 15       	cp	r19, r1
     13a:	3b 15       	cp	r19, r11
     13c:	b2 15       	cp	r27, r2
     13e:	45 15       	cp	r20, r5
     140:	4d 15       	cp	r20, r13
     142:	55 15       	cp	r21, r5
     144:	5f 15       	cp	r21, r15
     146:	69 15       	cp	r22, r9
     148:	73 15       	cp	r23, r3
     14a:	80 15       	cp	r24, r0
     14c:	8a 15       	cp	r24, r10
     14e:	b2 15       	cp	r27, r2
     150:	94 15       	cp	r25, r4
     152:	9e 15       	cp	r25, r14
     154:	a8 15       	cp	r26, r8
     156:	d7 15       	cp	r29, r7
     158:	db 15       	cp	r29, r11
     15a:	cb 15       	cp	r28, r11
     15c:	d1 15       	cp	r29, r1
     15e:	20 16       	cp	r2, r16
     160:	df 15       	cp	r29, r15
     162:	e5 15       	cp	r30, r5
     164:	eb 15       	cp	r30, r11
     166:	f1 15       	cp	r31, r1
     168:	f7 15       	cp	r31, r7
     16a:	fd 15       	cp	r31, r13
     16c:	03 16       	cp	r0, r19
     16e:	09 16       	cp	r0, r25
     170:	20 16       	cp	r2, r16
     172:	0f 16       	cp	r0, r31
     174:	15 16       	cp	r1, r21
     176:	1b 16       	cp	r1, r27
     178:	c3 1b       	sub	r28, r19
     17a:	c6 1b       	sub	r28, r22
     17c:	c6 1b       	sub	r28, r22
     17e:	c6 1b       	sub	r28, r22
     180:	c6 1b       	sub	r28, r22
     182:	c6 1b       	sub	r28, r22
     184:	c6 1b       	sub	r28, r22
     186:	c6 1b       	sub	r28, r22
     188:	dd 1a       	sub	r13, r29
     18a:	c6 1b       	sub	r28, r22
     18c:	c6 1b       	sub	r28, r22
     18e:	c6 1b       	sub	r28, r22
     190:	c6 1b       	sub	r28, r22
     192:	c6 1b       	sub	r28, r22
     194:	c6 1b       	sub	r28, r22
     196:	c6 1b       	sub	r28, r22
     198:	dd 1a       	sub	r13, r29
     19a:	c6 1b       	sub	r28, r22
     19c:	c6 1b       	sub	r28, r22
     19e:	c6 1b       	sub	r28, r22
     1a0:	c6 1b       	sub	r28, r22
     1a2:	c6 1b       	sub	r28, r22
     1a4:	c6 1b       	sub	r28, r22
     1a6:	c6 1b       	sub	r28, r22
     1a8:	e5 1a       	sub	r14, r21
     1aa:	c6 1b       	sub	r28, r22
     1ac:	c6 1b       	sub	r28, r22
     1ae:	c6 1b       	sub	r28, r22
     1b0:	c6 1b       	sub	r28, r22
     1b2:	c6 1b       	sub	r28, r22
     1b4:	c6 1b       	sub	r28, r22
     1b6:	c6 1b       	sub	r28, r22
     1b8:	0a 1b       	sub	r16, r26
     1ba:	c6 1b       	sub	r28, r22
     1bc:	c6 1b       	sub	r28, r22
     1be:	c6 1b       	sub	r28, r22
     1c0:	c6 1b       	sub	r28, r22
     1c2:	c6 1b       	sub	r28, r22
     1c4:	c6 1b       	sub	r28, r22
     1c6:	c6 1b       	sub	r28, r22
     1c8:	e5 1a       	sub	r14, r21
     1ca:	c6 1b       	sub	r28, r22
     1cc:	c6 1b       	sub	r28, r22
     1ce:	c6 1b       	sub	r28, r22
     1d0:	c6 1b       	sub	r28, r22
     1d2:	c6 1b       	sub	r28, r22
     1d4:	c6 1b       	sub	r28, r22
     1d6:	c6 1b       	sub	r28, r22
     1d8:	0f 1b       	sub	r16, r31
     1da:	c6 1b       	sub	r28, r22
     1dc:	c6 1b       	sub	r28, r22
     1de:	c6 1b       	sub	r28, r22
     1e0:	c6 1b       	sub	r28, r22
     1e2:	c6 1b       	sub	r28, r22
     1e4:	c6 1b       	sub	r28, r22
     1e6:	c6 1b       	sub	r28, r22
     1e8:	14 1b       	sub	r17, r20
     1ea:	c6 1b       	sub	r28, r22
     1ec:	c6 1b       	sub	r28, r22
     1ee:	c6 1b       	sub	r28, r22
     1f0:	c6 1b       	sub	r28, r22
     1f2:	c6 1b       	sub	r28, r22
     1f4:	c6 1b       	sub	r28, r22
     1f6:	c6 1b       	sub	r28, r22
     1f8:	25 1b       	sub	r18, r21
     1fa:	c6 1b       	sub	r28, r22
     1fc:	c6 1b       	sub	r28, r22
     1fe:	c6 1b       	sub	r28, r22
     200:	c6 1b       	sub	r28, r22
     202:	c6 1b       	sub	r28, r22
     204:	c6 1b       	sub	r28, r22
     206:	c6 1b       	sub	r28, r22
     208:	4e 1b       	sub	r20, r30
     20a:	c6 1b       	sub	r28, r22
     20c:	c6 1b       	sub	r28, r22
     20e:	c6 1b       	sub	r28, r22
     210:	c6 1b       	sub	r28, r22
     212:	c6 1b       	sub	r28, r22
     214:	c6 1b       	sub	r28, r22
     216:	c6 1b       	sub	r28, r22
     218:	19 1b       	sub	r17, r25
     21a:	c6 1b       	sub	r28, r22
     21c:	c6 1b       	sub	r28, r22
     21e:	c6 1b       	sub	r28, r22
     220:	c6 1b       	sub	r28, r22
     222:	c6 1b       	sub	r28, r22
     224:	c6 1b       	sub	r28, r22
     226:	c6 1b       	sub	r28, r22
     228:	33 1b       	sub	r19, r19
     22a:	c6 1b       	sub	r28, r22
     22c:	c6 1b       	sub	r28, r22
     22e:	c6 1b       	sub	r28, r22
     230:	c6 1b       	sub	r28, r22
     232:	c6 1b       	sub	r28, r22
     234:	c6 1b       	sub	r28, r22
     236:	c6 1b       	sub	r28, r22
     238:	50 1b       	sub	r21, r16
     23a:	c6 1b       	sub	r28, r22
     23c:	c6 1b       	sub	r28, r22
     23e:	c6 1b       	sub	r28, r22
     240:	c6 1b       	sub	r28, r22
     242:	c6 1b       	sub	r28, r22
     244:	c6 1b       	sub	r28, r22
     246:	c6 1b       	sub	r28, r22
     248:	50 1b       	sub	r21, r16
     24a:	c6 1b       	sub	r28, r22
     24c:	c6 1b       	sub	r28, r22
     24e:	c6 1b       	sub	r28, r22
     250:	c6 1b       	sub	r28, r22
     252:	c6 1b       	sub	r28, r22
     254:	c6 1b       	sub	r28, r22
     256:	c6 1b       	sub	r28, r22
     258:	50 1b       	sub	r21, r16
     25a:	c6 1b       	sub	r28, r22
     25c:	c6 1b       	sub	r28, r22
     25e:	c6 1b       	sub	r28, r22
     260:	c6 1b       	sub	r28, r22
     262:	c6 1b       	sub	r28, r22
     264:	c6 1b       	sub	r28, r22
     266:	c6 1b       	sub	r28, r22
     268:	50 1b       	sub	r21, r16
     26a:	c6 1b       	sub	r28, r22
     26c:	c6 1b       	sub	r28, r22
     26e:	c6 1b       	sub	r28, r22
     270:	c6 1b       	sub	r28, r22
     272:	c6 1b       	sub	r28, r22
     274:	c6 1b       	sub	r28, r22
     276:	c6 1b       	sub	r28, r22
     278:	59 1b       	sub	r21, r25
     27a:	c6 1b       	sub	r28, r22
     27c:	c6 1b       	sub	r28, r22
     27e:	c6 1b       	sub	r28, r22
     280:	c6 1b       	sub	r28, r22
     282:	c6 1b       	sub	r28, r22
     284:	c6 1b       	sub	r28, r22
     286:	c6 1b       	sub	r28, r22
     288:	8a 1b       	sub	r24, r26
     28a:	c6 1b       	sub	r28, r22
     28c:	c6 1b       	sub	r28, r22
     28e:	c6 1b       	sub	r28, r22
     290:	c6 1b       	sub	r28, r22
     292:	c6 1b       	sub	r28, r22
     294:	c6 1b       	sub	r28, r22
     296:	c6 1b       	sub	r28, r22
     298:	59 1b       	sub	r21, r25
     29a:	c6 1b       	sub	r28, r22
     29c:	c6 1b       	sub	r28, r22
     29e:	c6 1b       	sub	r28, r22
     2a0:	c6 1b       	sub	r28, r22
     2a2:	c6 1b       	sub	r28, r22
     2a4:	c6 1b       	sub	r28, r22
     2a6:	c6 1b       	sub	r28, r22
     2a8:	8a 1b       	sub	r24, r26
     2aa:	c6 1b       	sub	r28, r22
     2ac:	c6 1b       	sub	r28, r22
     2ae:	c6 1b       	sub	r28, r22
     2b0:	c6 1b       	sub	r28, r22
     2b2:	c6 1b       	sub	r28, r22
     2b4:	c6 1b       	sub	r28, r22
     2b6:	c6 1b       	sub	r28, r22
     2b8:	71 1b       	sub	r23, r17
     2ba:	c6 1b       	sub	r28, r22
     2bc:	c6 1b       	sub	r28, r22
     2be:	c6 1b       	sub	r28, r22
     2c0:	c6 1b       	sub	r28, r22
     2c2:	c6 1b       	sub	r28, r22
     2c4:	c6 1b       	sub	r28, r22
     2c6:	c6 1b       	sub	r28, r22
     2c8:	8e 1b       	sub	r24, r30
     2ca:	c6 1b       	sub	r28, r22
     2cc:	c6 1b       	sub	r28, r22
     2ce:	c6 1b       	sub	r28, r22
     2d0:	c6 1b       	sub	r28, r22
     2d2:	c6 1b       	sub	r28, r22
     2d4:	c6 1b       	sub	r28, r22
     2d6:	c6 1b       	sub	r28, r22
     2d8:	8e 1b       	sub	r24, r30
     2da:	c6 1b       	sub	r28, r22
     2dc:	c6 1b       	sub	r28, r22
     2de:	c6 1b       	sub	r28, r22
     2e0:	c6 1b       	sub	r28, r22
     2e2:	c6 1b       	sub	r28, r22
     2e4:	c6 1b       	sub	r28, r22
     2e6:	c6 1b       	sub	r28, r22
     2e8:	a3 1b       	sub	r26, r19
     2ea:	c6 1b       	sub	r28, r22
     2ec:	c6 1b       	sub	r28, r22
     2ee:	c6 1b       	sub	r28, r22
     2f0:	c6 1b       	sub	r28, r22
     2f2:	c6 1b       	sub	r28, r22
     2f4:	c6 1b       	sub	r28, r22
     2f6:	c6 1b       	sub	r28, r22
     2f8:	bd 1b       	sub	r27, r29
     2fa:	c6 1b       	sub	r28, r22
     2fc:	c6 1b       	sub	r28, r22
     2fe:	c6 1b       	sub	r28, r22
     300:	c6 1b       	sub	r28, r22
     302:	c6 1b       	sub	r28, r22
     304:	c6 1b       	sub	r28, r22
     306:	c6 1b       	sub	r28, r22
     308:	bd 1b       	sub	r27, r29
     30a:	72 3a       	cpi	r23, 0xA2	; 162
     30c:	5f 3a       	cpi	r21, 0xAF	; 175
     30e:	5f 3a       	cpi	r21, 0xAF	; 175
     310:	5f 3a       	cpi	r21, 0xAF	; 175
     312:	63 3a       	cpi	r22, 0xA3	; 163
     314:	72 3a       	cpi	r23, 0xA2	; 162
     316:	5f 3a       	cpi	r21, 0xAF	; 175
     318:	6f 3a       	cpi	r22, 0xAF	; 175
     31a:	6f 3a       	cpi	r22, 0xAF	; 175
     31c:	6f 3a       	cpi	r22, 0xAF	; 175
     31e:	6f 3a       	cpi	r22, 0xAF	; 175
     320:	6f 3a       	cpi	r22, 0xAF	; 175
     322:	5f 3a       	cpi	r21, 0xAF	; 175
     324:	6f 3a       	cpi	r22, 0xAF	; 175
     326:	6f 3a       	cpi	r22, 0xAF	; 175
     328:	6f 3a       	cpi	r22, 0xAF	; 175
     32a:	64 3b       	cpi	r22, 0xB4	; 180
     32c:	6c 3b       	cpi	r22, 0xBC	; 188
     32e:	94 3b       	cpi	r25, 0xB4	; 180
     330:	94 3b       	cpi	r25, 0xB4	; 180
     332:	94 3b       	cpi	r25, 0xB4	; 180
     334:	94 3b       	cpi	r25, 0xB4	; 180
     336:	b8 3c       	cpi	r27, 0xC8	; 200
     338:	94 3b       	cpi	r25, 0xB4	; 180
     33a:	94 3b       	cpi	r25, 0xB4	; 180

0000033c <__trampolines_end>:
     33c:	02 00       	.word	0x0002	; ????

0000033d <digital_pin_to_timer_PGM>:
     33d:	00 00 01 08 09 0a 00 00 00 00 00 00 00 00 00 00     ................
     34d:	00 00 00 00 00 06 03 04 00 00 00 00 00 00 00 00     ................

0000035d <digital_pin_to_bit_mask_PGM>:
     35d:	01 02 80 08 10 20 04 40 20 01 04 08 02 04 08 01     ..... .@ .......
     36d:	02 10 80 40 80 10 20 40 01 02 04 08 10 20 40 80     ...@.. @..... @.

0000037d <digital_pin_to_port_PGM>:
     37d:	05 05 02 05 05 05 05 05 04 02 02 02 02 04 04 04     ................
     38d:	04 04 05 04 04 02 02 02 06 06 06 06 06 06 06 06     ................

0000039d <port_to_input_PGM>:
     39d:	00 00 00 00 23 00 00 00 29 00 2c 00 2f 00 32 00     ....#...).,./.2.
	...

000003b7 <port_to_output_PGM>:
     3b7:	00 00 00 00 25 00 00 00 2b 00 2e 00 31 00 34 00     ....%...+...1.4.
	...

000003d1 <port_to_mode_PGM>:
     3d1:	00 00 00 00 24 00 00 00 2a 00 2d 00 30 00 33 00     ....$...*.-.0.3.
	...

000003eb <_ZL11twocharsyms>:
     3eb:	86 87 88 89 8c 8d 93 85 8b 84 8a a6                 ............

000003f7 <_ZL13twochartokens>:
     3f7:	26 26 7c 7c 3d 3d 21 3d 2b 2b 2d 2d 3a 3d 3e 3d     &&||==!=++--:=>=
     407:	3e 3e 3c 3d 3c 3c 2f 2f 00                          >><=<<//.

00000410 <_ZL17reservedwordtypes>:
     410:	a1 99 a2 94 9b 8f 9c 9a 9d 97 9f 95 96 98 9e 90     ................

00000420 <_ZL9chartypes>:
     420:	34 44 44 44 40 04 40 44 44 44 44 44 44 44 44 44     4DDD@.@DDDDDDDDD
     430:	08 77 47 85 77 78 78 78 11 11 11 11 11 87 88 84     .wG.wxxx........
     440:	42 22 22 22 22 22 22 22 22 22 22 22 22 24 44 72     B""""""""""""$Dr
     450:	42 22 22 22 22 22 22 22 22 22 22 22 22 27 87 74     B""""""""""""'.t

00000460 <_ZL7strings>:
     460:	65 78 70 65 63 74 65 64 20 00 75 6e 65 78 70 65     expected .unexpe
     470:	63 74 65 64 20 00 6d 69 73 73 69 6e 67 20 00 73     cted .missing .s
     480:	74 72 69 6e 67 00 20 75 6e 64 65 72 66 6c 6f 77     tring. underflow
     490:	00 20 6f 76 65 72 66 6c 6f 77 00 5e 43 00 5e 42     . overflow.^C.^B
     4a0:	00 5e 55 00 65 78 70 00 6f 70 00 3a 78 62 79 2b     .^U.exp.op.:xby+
     4b0:	2d 2a 2f 00 65 6f 66 00 76 61 72 00 6e 75 6d 62     -*/.eof.var.numb
     4c0:	65 72 00 29 00 73 61 76 65 64 00 65 65 70 72 6f     er.).saved.eepro
     4d0:	6d 00 3a 3d 22 00 3e 20 00 63 68 61 72 00 73 74     m.:=".> .char.st
     4e0:	61 63 6b 00 73 74 61 72 74 75 70 00 69 64 00 70     ack.startup.id.p
     4f0:	72 6f 6d 70 74 00 0d 0a 46 75 6e 63 74 69 6f 6e     rompt...Function
     500:	73 3a 00 6f 6f 70 73 00 61 72 67 00 66 75 6e 63     s:.oops.arg.func
     510:	74 69 6f 6e 00 00                                   tion..

00000516 <_ZL13builtin_table>:
     516:	62 61 6e 6e 65 72 00 70 72 69 6e 74 20 22 62 69     banner.print "bi
     526:	74 6c 61 73 68 20 68 65 72 65 21 20 76 32 2e 30     tlash here! v2.0
     536:	20 28 63 29 20 32 30 31 33 20 42 69 6c 6c 20 52      (c) 2013 Bill R
     546:	6f 79 20 2d 74 79 70 65 20 48 45 4c 50 2d 22 2c     oy -type HELP-",
     556:	66 72 65 65 2c 22 62 79 74 65 73 20 66 72 65 65     free,"bytes free
     566:	22 00 00 00 00                                      "....

0000056b <_ZL14function_table>:
     56b:	9f 22 38 23 48 23 b2 23 c8 23 83 21 10 24 ee 23     ."8#H#.#.#.!.$.#
     57b:	2b 24 0e 23 a1 23 5a 23 6a 23 b9 2a 3f 28 7a 1c     +$.#.#Z#j#.*?(z.
     58b:	fd 2d 20 2e 7d 22 5d 24 f0 22 16 14 d2 22 8c 22     .- .}"]$."..."."
     59b:	7c 23 99 27 8e 23 10 22 b4 22 02 28                 |#.'.#.".".(

000005a7 <_ZL8helptext>:
     5a7:	68 74 74 70 3a 2f 2f 62 69 74 6c 61 73 68 2e 6e     http://bitlash.n
     5b7:	65 74 0d 0a 53 65 65 20 4c 49 43 45 4e 53 45 20     et..See LICENSE 
     5c7:	66 6f 72 20 6c 69 63 65 6e 73 65 0d 0a 50 69 6e     for license..Pin
     5d7:	73 3a 20 64 30 2d 32 32 2c 61 30 2d 32 32 20 20     s: d0-22,a0-22  
     5e7:	56 61 72 69 61 62 6c 65 73 3a 20 61 2d 7a 2c 20     Variables: a-z, 
     5f7:	33 32 20 62 69 74 20 6c 6f 6e 67 20 69 6e 74 65     32 bit long inte
     607:	67 65 72 73 0d 0a 4f 70 65 72 61 74 6f 72 73 3a     gers..Operators:
     617:	20 2b 20 2d 20 2a 20 2f 20 28 20 29 20 3c 20 3c      + - * / ( ) < <
     627:	3d 20 3e 20 3e 3d 20 3d 3d 20 21 3d 20 3c 3c 20     = > >= == != << 
     637:	3e 3e 20 21 20 5e 20 26 20 7c 20 2b 2b 20 2d 2d     >> ! ^ & | ++ --
     647:	20 3a 3d 0d 0a 43 6f 6d 6d 61 6e 64 73 3a 20 00      :=..Commands: .
	...

00000658 <reservedwords>:
     658:	61 72 67 00 62 6f 6f 74 00 65 6c 73 65 00 66 75     arg.boot.else.fu
     668:	6e 63 74 69 6f 6e 00 68 65 6c 70 00 69 66 00 6c     nction.help.if.l
     678:	73 00 70 65 65 70 00 70 72 69 6e 74 00 70 73 00     s.peep.print.ps.
     688:	72 65 74 75 72 6e 00 72 6d 00 72 75 6e 00 73 74     return.rm.run.st
     698:	6f 70 00 73 77 69 74 63 68 00 77 68 69 6c 65 00     op.switch.while.
	...

000006a9 <functiondict>:
     6a9:	61 62 73 00 61 72 00 61 77 00 62 61 75 64 00 62     abs.ar.aw.baud.b
     6b9:	63 00 62 65 65 70 00 62 72 00 62 73 00 62 77 00     c.beep.br.bs.bw.
     6c9:	63 6f 6e 73 74 72 61 69 6e 00 64 65 6c 61 79 00     constrain.delay.
     6d9:	64 72 00 64 77 00 65 72 00 65 77 00 66 72 65 65     dr.dw.er.ew.free
     6e9:	00 67 65 74 6b 65 79 00 67 65 74 6e 75 6d 00 69     .getkey.getnum.i
     6f9:	6e 62 00 69 73 73 74 72 00 6d 61 78 00 6d 69 6c     nb.isstr.max.mil
     709:	6c 69 73 00 6d 69 6e 00 6f 75 74 62 00 70 69 6e     lis.min.outb.pin
     719:	6d 6f 64 65 00 70 72 69 6e 74 66 00 70 75 6c 73     mode.printf.puls
     729:	65 69 6e 00 72 61 6e 64 6f 6d 00 73 69 67 6e 00     ein.random.sign.
     739:	73 6e 6f 6f 7a 65 00 00                             snooze..

00000741 <_ZZN4Pbbe12updateEepromEPNS_6EepromEjPKhhE3__c_0>:
     741:	43 61 6e 6e 6f 74 20 75 70 64 61 74 65 20 45 45     Cannot update EE
     751:	50 52 4f 4d 20 73 74 61 72 74 69 6e 67 20 70 61     PROM starting pa
     761:	73 74 20 74 68 65 20 65 6e 64 20 6f 66 20 74 68     st the end of th
     771:	65 20 45 45 50 52 4f 4d 00                          e EEPROM.

0000077a <_ZZN4Pbbe12updateEepromEPNS_6EepromEjPKhhE3__c>:
     77a:	43 61 6e 6e 6f 74 20 77 72 69 74 65 20 45 45 50     Cannot write EEP
     78a:	52 4f 4d 20 66 72 6f 6d 20 73 6b 65 74 63 68 20     ROM from sketch 
     79a:	77 69 74 68 20 6e 6f 6e 2d 7a 65 72 6f 20 6f 66     with non-zero of
     7aa:	66 73 65 74 00                                      fset.

000007af <_ZZN4Pbbe16parseDescriptorAEPKNS_6EepromEPNS_14DescriptorInfoEE3__c>:
     7af:	46 61 69 6c 65 64 20 74 6f 20 61 6c 6c 6f 63 61     Failed to alloca
     7bf:	74 65 20 6d 65 6d 6f 72 79 20 66 6f 72 20 70 61     te memory for pa
     7cf:	72 73 65 64 20 64 65 73 63 72 69 70 74 6f 72 00     rsed descriptor.

000007df <_ZL11uart_speeds>:
     7df:	00 00 00 00 2c 01 00 00 58 02 00 00 b0 04 00 00     ....,...X.......
     7ef:	60 09 00 00 c0 12 00 00 80 25 00 00 00 4b 00 00     `........%...K..
     7ff:	00 96 00 00 00 e1 00 00 00 c2 01 00                 ............

0000080b <_ZL10i2c_speeds>:
     80b:	64 00 90 01 e8 03 48 0d                             d.....H.

00000813 <_ZL20descriptor_type_info>:
	...
     81b:	00 00 00 01 01 00 00 00 00 00 00 00 00 00 05 00     ................
     82b:	04 00 00 00 00 00 00 00 00 02 01 04 64 61 74 61     ............data
     83b:	00 00 00 00 02 01 01 00 00 00 00 00 00 00 00 04     ................
     84b:	01 06 75 61 72 74 00 00 00 00 03 01 03 69 32 63     ..uart.......i2c
     85b:	00 00 00 00 00 03 01 02 73 70 69 00 00 00 00 00     ........spi.....

0000086b <_ZN4Pbbe17physical_pin_infoE>:
     86b:	ff 4e 43 00 00 00 ff 56 55 53 42 00 13 42 4b 50     .NC....VUSB..BKP
     87b:	4b 00 ff 52 53 54 00 00 0c 53 43 4b 00 00 0b 4d     K..RST...SCK...M
     88b:	49 53 4f 00 0a 4d 4f 53 49 00 09 53 53 00 00 00     ISO..MOSI..SS...
     89b:	00 52 58 30 00 00 01 54 58 30 00 00 02 44 32 00     .RX0...TX0...D2.
     8ab:	00 00 03 44 33 00 00 00 04 44 34 00 00 00 05 44     ...D3....D4....D
     8bb:	35 00 00 00 06 44 36 00 00 00 07 44 37 00 00 00     5....D6....D7...
     8cb:	08 44 38 00 00 00 ff 33 56 33 00 00 ff 47 4e 44     .D8....3V3...GND
     8db:	00 00 ff 56 42 41 54 00 0d 52 58 31 00 00 0e 54     ...VBAT..RX1...T
     8eb:	58 31 00 00 0f 53 43 4c 00 00 10 53 44 41 00 00     X1...SCL...SDA..
     8fb:	ff 52 45 46 00 00 18 41 30 00 00 00 19 41 31 00     .REF...A0....A1.
     90b:	00 00 1a 41 32 00 00 00 1b 41 33 00 00 00 1c 41     ...A2....A3....A
     91b:	34 00 00 00 1d 41 35 00 00 00 1e 41 36 00 00 00     4....A5....A6...
     92b:	1f 41 37 00 00 00                                   .A7...

00000931 <_ZZN9HalRgbLed12triggerEventEvE3__c_2>:
     931:	29 00                                               ).

00000933 <_ZZN9HalRgbLed12triggerEventEvE3__c_1>:
     933:	2c 00                                               ,.

00000935 <_ZZN9HalRgbLed12triggerEventEvE3__c_0>:
     935:	2c 00                                               ,.

00000937 <_ZZN9HalRgbLed12triggerEventEvE3__c>:
     937:	52 75 6e 6e 69 6e 67 3a 20 6c 65 64 45 76 65 6e     Running: ledEven
     947:	74 48 61 6e 64 6c 65 72 28 00                       tHandler(.

00000951 <_ZZN13PinoccioClass15getDataRatekbpsEvE3__c_3>:
     951:	75 6e 6b 6e 6f 77 6e 00                             unknown.

00000959 <_ZZN13PinoccioClass15getDataRatekbpsEvE3__c_2>:
     959:	32 20 4d 62 2f 73 00                                2 Mb/s.

00000960 <_ZZN13PinoccioClass15getDataRatekbpsEvE3__c_1>:
     960:	31 20 4d 62 2f 73 00                                1 Mb/s.

00000967 <_ZZN13PinoccioClass15getDataRatekbpsEvE3__c_0>:
     967:	35 30 30 20 6b 62 2f 73 00                          500 kb/s.

00000970 <_ZZN13PinoccioClass15getDataRatekbpsEvE3__c>:
     970:	32 35 30 20 6b 62 2f 73 00                          250 kb/s.

00000979 <_ZZN13PinoccioClass12getTxPowerDbEvE3__c_15>:
     979:	75 6e 6b 6e 6f 77 6e 00                             unknown.

00000981 <_ZZN13PinoccioClass12getTxPowerDbEvE3__c_14>:
     981:	2d 31 36 2e 35 20 64 42 6d 00                       -16.5 dBm.

0000098b <_ZZN13PinoccioClass12getTxPowerDbEvE3__c_13>:
     98b:	2d 31 31 2e 35 20 64 42 6d 00                       -11.5 dBm.

00000995 <_ZZN13PinoccioClass12getTxPowerDbEvE3__c_12>:
     995:	2d 38 2e 35 20 64 42 6d 00                          -8.5 dBm.

0000099e <_ZZN13PinoccioClass12getTxPowerDbEvE3__c_11>:
     99e:	2d 36 2e 35 20 64 42 6d 00                          -6.5 dBm.

000009a7 <_ZZN13PinoccioClass12getTxPowerDbEvE3__c_10>:
     9a7:	2d 34 2e 35 20 64 42 6d 00                          -4.5 dBm.

000009b0 <_ZZN13PinoccioClass12getTxPowerDbEvE3__c_9>:
     9b0:	2d 33 2e 35 20 64 42 6d 00                          -3.5 dBm.

000009b9 <_ZZN13PinoccioClass12getTxPowerDbEvE3__c_8>:
     9b9:	2d 32 2e 35 20 64 42 6d 00                          -2.5 dBm.

000009c2 <_ZZN13PinoccioClass12getTxPowerDbEvE3__c_7>:
     9c2:	2d 31 2e 35 20 64 42 6d 00                          -1.5 dBm.

000009cb <_ZZN13PinoccioClass12getTxPowerDbEvE3__c_6>:
     9cb:	2d 30 2e 35 20 64 42 6d 00                          -0.5 dBm.

000009d4 <_ZZN13PinoccioClass12getTxPowerDbEvE3__c_5>:
     9d4:	30 2e 35 20 64 42 6d 00                             0.5 dBm.

000009dc <_ZZN13PinoccioClass12getTxPowerDbEvE3__c_4>:
     9dc:	31 2e 32 20 64 42 6d 00                             1.2 dBm.

000009e4 <_ZZN13PinoccioClass12getTxPowerDbEvE3__c_3>:
     9e4:	31 2e 38 20 64 42 6d 00                             1.8 dBm.

000009ec <_ZZN13PinoccioClass12getTxPowerDbEvE3__c_2>:
     9ec:	32 2e 33 20 64 42 6d 00                             2.3 dBm.

000009f4 <_ZZN13PinoccioClass12getTxPowerDbEvE3__c_1>:
     9f4:	32 2e 38 20 64 42 6d 00                             2.8 dBm.

000009fc <_ZZN13PinoccioClass12getTxPowerDbEvE3__c_0>:
     9fc:	33 2e 33 20 64 42 6d 00                             3.3 dBm.

00000a04 <_ZZN13PinoccioClass12getTxPowerDbEvE3__c>:
     a04:	33 2e 35 20 64 42 6d 00                             3.5 dBm.

00000a0c <_ZZN13PinoccioClass17getLastResetCauseEvE3__c_4>:
     a0c:	55 6e 6b 6e 6f 77 6e 20 43 61 75 73 65 20 52 65     Unknown Cause Re
     a1c:	73 65 74 00                                         set.

00000a20 <_ZZN13PinoccioClass17getLastResetCauseEvE3__c_3>:
     a20:	4a 54 41 47 00                                      JTAG.

00000a25 <_ZZN13PinoccioClass17getLastResetCauseEvE3__c_2>:
     a25:	57 61 74 63 68 64 6f 67 00                          Watchdog.

00000a2e <_ZZN13PinoccioClass17getLastResetCauseEvE3__c_1>:
     a2e:	42 72 6f 77 6e 2d 6f 75 74 00                       Brown-out.

00000a38 <_ZZN13PinoccioClass17getLastResetCauseEvE3__c_0>:
     a38:	45 78 74 65 72 6e 61 6c 00                          External.

00000a41 <_ZZN13PinoccioClass17getLastResetCauseEvE3__c>:
     a41:	50 6f 77 65 72 2d 6f 6e 00                          Power-on.

00000a4a <_ZZL35scoutDigitalStateChangeTimerHandlerP11SYS_Timer_tE3__c_2>:
     a4a:	29 00                                               ).

00000a4c <_ZZL35scoutDigitalStateChangeTimerHandlerP11SYS_Timer_tE3__c_1>:
     a4c:	2c 00                                               ,.

00000a4e <_ZZL35scoutDigitalStateChangeTimerHandlerP11SYS_Timer_tE3__c_0>:
     a4e:	2c 00                                               ,.

00000a50 <_ZZL35scoutDigitalStateChangeTimerHandlerP11SYS_Timer_tE3__c>:
     a50:	52 75 6e 6e 69 6e 67 3a 20 64 69 67 69 74 61 6c     Running: digital
     a60:	50 69 6e 45 76 65 6e 74 48 61 6e 64 6c 65 72 28     PinEventHandler(
	...

00000a71 <_ZZL34scoutAnalogStateChangeTimerHandlerP11SYS_Timer_tE3__c_2>:
     a71:	29 00                                               ).

00000a73 <_ZZL34scoutAnalogStateChangeTimerHandlerP11SYS_Timer_tE3__c_1>:
     a73:	2c 00                                               ,.

00000a75 <_ZZL34scoutAnalogStateChangeTimerHandlerP11SYS_Timer_tE3__c_0>:
     a75:	2c 00                                               ,.

00000a77 <_ZZL34scoutAnalogStateChangeTimerHandlerP11SYS_Timer_tE3__c>:
     a77:	52 75 6e 6e 69 6e 67 3a 20 61 6e 61 6c 6f 67 50     Running: analogP
     a87:	69 6e 45 76 65 6e 74 48 61 6e 64 6c 65 72 28 00     inEventHandler(.

00000a97 <_ZZL38scoutPeripheralStateChangeTimerHandlerP11SYS_Timer_tE3__c_8>:
     a97:	29 00                                               ).

00000a99 <_ZZL38scoutPeripheralStateChangeTimerHandlerP11SYS_Timer_tE3__c_7>:
     a99:	52 75 6e 6e 69 6e 67 3a 20 74 65 6d 70 65 72 61     Running: tempera
     aa9:	74 75 72 65 45 76 65 6e 74 48 61 6e 64 6c 65 72     tureEventHandler
     ab9:	28 00                                               (.

00000abb <_ZZL38scoutPeripheralStateChangeTimerHandlerP11SYS_Timer_tE3__c_6>:
     abb:	29 00                                               ).

00000abd <_ZZL38scoutPeripheralStateChangeTimerHandlerP11SYS_Timer_tE3__c_5>:
     abd:	52 75 6e 6e 69 6e 67 3a 20 62 61 74 74 65 72 79     Running: battery
     acd:	41 6c 61 72 6d 54 72 69 67 67 65 72 65 64 45 76     AlarmTriggeredEv
     add:	65 6e 74 48 61 6e 64 6c 65 72 28 00                 entHandler(.

00000ae9 <_ZZL38scoutPeripheralStateChangeTimerHandlerP11SYS_Timer_tE3__c_4>:
     ae9:	29 00                                               ).

00000aeb <_ZZL38scoutPeripheralStateChangeTimerHandlerP11SYS_Timer_tE3__c_3>:
     aeb:	52 75 6e 6e 69 6e 67 3a 20 62 61 74 74 65 72 79     Running: battery
     afb:	43 68 61 72 67 69 6e 67 45 76 65 6e 74 48 61 6e     ChargingEventHan
     b0b:	64 6c 65 72 28 00                                   dler(.

00000b11 <_ZZL38scoutPeripheralStateChangeTimerHandlerP11SYS_Timer_tE3__c_2>:
     b11:	29 00                                               ).

00000b13 <_ZZL38scoutPeripheralStateChangeTimerHandlerP11SYS_Timer_tE3__c_1>:
     b13:	52 75 6e 6e 69 6e 67 3a 20 62 61 74 74 65 72 79     Running: battery
     b23:	56 6f 6c 74 61 67 65 45 76 65 6e 74 48 61 6e 64     VoltageEventHand
     b33:	6c 65 72 28 00                                      ler(.

00000b38 <_ZZL38scoutPeripheralStateChangeTimerHandlerP11SYS_Timer_tE3__c_0>:
     b38:	29 00                                               ).

00000b3a <_ZZL38scoutPeripheralStateChangeTimerHandlerP11SYS_Timer_tE3__c>:
     b3a:	52 75 6e 6e 69 6e 67 3a 20 62 61 74 74 65 72 79     Running: battery
     b4a:	50 65 72 63 65 6e 74 61 67 65 45 76 65 6e 74 48     PercentageEventH
     b5a:	61 6e 64 6c 65 72 28 00                             andler(.

00000b62 <_ZZ13leadHQConnectvE3__c>:
     b62:	73 65 72 76 65 72 20 75 6e 76 61 69 6c 61 62 6c     server unvailabl
     b72:	65 00                                               e.

00000b74 <_ZZL15announceConfirmP13NWK_DataReq_tE3__c>:
     b74:	4d 65 73 68 20 61 6e 6e 6f 75 6e 63 65 20 66 61     Mesh announce fa
     b84:	69 6c 65 64 3a 20 00                                iled: .

00000b8b <_ZZN20PinoccioScoutHandler8announceEjRK6StringE3__c_0>:
     b8b:	20 00                                                .

00000b8d <_ZZN20PinoccioScoutHandler8announceEjRK6StringE3__c>:
     b8d:	6d 65 73 68 20 61 6e 6e 6f 75 6e 63 69 6e 67 20     mesh announcing 
     b9d:	74 6f 20 00                                         to .

00000ba1 <_ZZL23leadCommandChunkConfirmP13NWK_DataReq_tE3__c_2>:
     ba1:	52 45 54 52 59 00                                   RETRY.

00000ba7 <_ZZL23leadCommandChunkConfirmP13NWK_DataReq_tE3__c_1>:
     ba7:	65 72 72 6f 72 3a 20 00                             error: .

00000baf <_ZZL23leadCommandChunkConfirmP13NWK_DataReq_tE3__c_0>:
     baf:	73 75 63 63 65 73 73 00                             success.

00000bb7 <_ZZL23leadCommandChunkConfirmP13NWK_DataReq_tE3__c>:
     bb7:	20 20 4d 65 73 73 61 67 65 20 63 6f 6e 66 69 72       Message confir
     bc7:	6d 61 74 69 6f 6e 20 2d 20 00                       mation - .

00000bd1 <_ZZL16leadCommandChunkvE3__c_0>:
     bd1:	2d 3e 63 68 75 6e 6b 00                             ->chunk.

00000bd9 <_ZZL16leadCommandChunkvE3__c>:
     bd9:	20 6c 65 6e 20 00                                    len .

00000bdf <_ZZL12leadIncomingPKcjPtE3__c_2>:
     bdf:	63 6f 6d 6d 61 6e 64 3a 20 00                       command: .

00000be9 <_ZZL12leadIncomingPKcjPtE3__c_1>:
     be9:	69 64 3a 20 00                                      id: .

00000bee <_ZZL12leadIncomingPKcjPtE3__c_0>:
     bee:	74 6f 3a 20 00                                      to: .

00000bf3 <_ZZL12leadIncomingPKcjPtE3__c>:
     bf3:	69 6e 76 61 6c 69 64 20 63 6f 6d 6d 61 6e 64 2c     invalid command,
     c03:	20 72 65 71 75 69 72 65 73 20 74 6f 2c 20 69 64      requires to, id
     c13:	2c 20 63 6f 6d 6d 61 6e 64 00                       , command.

00000c1d <_ZZL12leadHQHandlevE3__c_0>:
     c1d:	4a 53 4f 4e 20 70 61 72 73 65 20 66 61 69 6c 65     JSON parse faile
     c2d:	64 00                                               d.

00000c2f <_ZZL12leadHQHandlevE3__c>:
     c2f:	6c 6f 6f 6b 69 6e 67 20 66 6f 72 20 70 61 63 6b     looking for pack
     c3f:	65 74 20 69 6e 3a 20 00                             et in: .

00000c47 <_ZZL11leadAnswersP13NWK_DataInd_tE3__c_1>:
     c47:	3a 00                                               :.

00000c49 <_ZZL11leadAnswersP13NWK_DataInd_tE3__c_0>:
     c49:	52 65 63 65 69 76 65 64 20 61 6e 73 77 65 72 20     Received answer 
     c59:	66 72 6f 6d 20 53 63 6f 75 74 20 00                 from Scout .

00000c65 <_ZZL11leadAnswersP13NWK_DataInd_tE3__c>:
     c65:	4d 55 4c 54 49 43 41 53 54 20 6f 6e 20 77 72 6f     MULTICAST on wro
     c75:	6e 67 20 65 6e 64 70 6f 69 6e 74 00                 ng endpoint.

00000c81 <_ZZL23fieldAnswerChunkConfirmP13NWK_DataReq_tE3__c_2>:
     c81:	52 45 54 52 59 00                                   RETRY.

00000c87 <_ZZL23fieldAnswerChunkConfirmP13NWK_DataReq_tE3__c_1>:
     c87:	65 72 72 6f 72 3a 20 00                             error: .

00000c8f <_ZZL23fieldAnswerChunkConfirmP13NWK_DataReq_tE3__c_0>:
     c8f:	73 75 63 63 65 73 73 00                             success.

00000c97 <_ZZL23fieldAnswerChunkConfirmP13NWK_DataReq_tE3__c>:
     c97:	20 20 4d 65 73 73 61 67 65 20 63 6f 6e 66 69 72       Message confir
     ca7:	6d 61 74 69 6f 6e 20 2d 20 00                       mation - .

00000cb1 <_ZZL16fieldAnswerChunkvE3__c_0>:
     cb1:	2d 3e 63 68 75 6e 6b 00                             ->chunk.

00000cb9 <_ZZL16fieldAnswerChunkvE3__c>:
     cb9:	20 6c 65 6e 20 00                                    len .

00000cbf <_ZZL13fieldCommandsP13NWK_DataInd_tE3__c_6>:
     cbf:	67 6f 74 20 72 65 73 75 6c 74 20 00                 got result .

00000ccb <_ZZL13fieldCommandsP13NWK_DataInd_tE3__c_5>:
     ccb:	72 75 6e 6e 69 6e 67 20 63 6f 6d 6d 61 6e 64 20     running command 
	...

00000cdc <_ZZL13fieldCommandsP13NWK_DataInd_tE3__c_4>:
     cdc:	77 61 69 74 69 6e 67 20 66 6f 72 20 6d 6f 72 65     waiting for more
	...

00000ced <_ZZL13fieldCommandsP13NWK_DataInd_tE3__c_3>:
     ced:	63 61 6e 27 74 20 72 65 63 65 69 76 65 20 63 6f     can't receive co
     cfd:	6d 6d 61 6e 64 20 77 68 69 6c 65 20 73 65 6e 64     mmand while send
     d0d:	69 6e 67 20 61 6e 73 77 65 72 00                    ing answer.

00000d18 <_ZZL13fieldCommandsP13NWK_DataInd_tE3__c_2>:
     d18:	72 73 73 69 3a 20 00                                rssi: .

00000d1f <_ZZL13fieldCommandsP13NWK_DataInd_tE3__c_1>:
     d1f:	20 20 00                                              .

00000d22 <_ZZL13fieldCommandsP13NWK_DataInd_tE3__c_0>:
     d22:	6c 71 69 3a 20 00                                   lqi: .

00000d28 <_ZZL13fieldCommandsP13NWK_DataInd_tE3__c>:
     d28:	52 65 63 65 69 76 65 64 20 63 6f 6d 6d 61 6e 64     Received command
	...

00000d39 <_ZZL10leadSignalRK6StringE3__c_0>:
     d39:	53 69 67 6e 61 6c 6c 69 6e 67 20 48 51 3a 20 00     Signalling HQ: .

00000d49 <_ZZL10leadSignalRK6StringE3__c>:
     d49:	48 51 20 6f 66 66 6c 69 6e 65 2c 20 63 61 6e 27     HQ offline, can'
     d59:	74 20 73 69 67 6e 61 6c 00                          t signal.

00000d62 <_ZZL18fieldAnnouncementsP13NWK_DataInd_tE3__c>:
     d62:	6d 75 6c 74 69 63 61 73 74 20 69 6e 20 00           multicast in .

00000d70 <_ZZL14pinoccioBannervE3__c_8>:
     d70:	20 46 69 65 6c 64 20 53 63 6f 75 74 20 72 65 61      Field Scout rea
     d80:	64 79 00                                            dy.

00000d83 <_ZZL14pinoccioBannervE3__c_7>:
     d83:	20 4c 65 61 64 20 53 63 6f 75 74 20 72 65 61 64      Lead Scout read
     d93:	79 00                                               y.

00000d95 <_ZZL14pinoccioBannervE3__c_6>:
     d95:	29 00                                               ).

00000d97 <_ZZL14pinoccioBannervE3__c_5>:
     d97:	20 28 72 65 76 20 00                                 (rev .

00000d9e <_ZZL14pinoccioBannervE3__c_4>:
     d9e:	20 42 75 69 6c 64 20 00                              Build .

00000da6 <_ZZL14pinoccioBannervE3__c_3>:
     da6:	20 00                                                .

00000da8 <_ZZL14pinoccioBannervE3__c_2>:
     da8:	20 62 79 74 65 73 20 66 72 65 65 00                  bytes free.

00000db4 <_ZZL14pinoccioBannervE3__c_1>:
     db4:	20 00                                                .

00000db6 <_ZZL14pinoccioBannervE3__c_0>:
     db6:	20 28 53 68 65 6c 6c 20 62 61 73 65 64 20 6f 6e      (Shell based on
     dc6:	20 42 69 74 6c 61 73 68 20 76 32 2e 30 20 28 63      Bitlash v2.0 (c
     dd6:	29 20 32 30 31 34 20 42 69 6c 6c 20 52 6f 79 29     ) 2014 Bill Roy)
	...

00000de7 <_ZZL14pinoccioBannervE3__c>:
     de7:	48 65 6c 6c 6f 20 66 72 6f 6d 20 50 69 6e 6f 63     Hello from Pinoc
     df7:	63 69 6f 21 00                                      cio!.

00000dfc <_ZZL11sendConfirmP13NWK_DataReq_tE3__c_9>:
     dfc:	29 00                                               ).

00000dfe <_ZZL11sendConfirmP13NWK_DataReq_tE3__c_8>:
     dfe:	28 00                                               (.

00000e00 <_ZZL11sendConfirmP13NWK_DataReq_tE3__c_7>:
     e00:	75 6e 6b 6e 6f 77 6e 20 66 61 69 6c 75 72 65 3a     unknown failure:
     e10:	20 00                                                .

00000e12 <_ZZL11sendConfirmP13NWK_DataReq_tE3__c_6>:
     e12:	50 68 79 73 69 63 61 6c 20 63 68 61 6e 6e 65 6c     Physical channel
     e22:	20 61 63 63 65 73 73 20 66 61 69 6c 75 72 65 3a      access failure:
     e32:	20 00                                                .

00000e34 <_ZZL11sendConfirmP13NWK_DataReq_tE3__c_5>:
     e34:	4e 6f 20 72 6f 75 74 65 20 74 6f 20 64 65 73 74     No route to dest
     e44:	69 6e 61 74 69 6f 6e 3a 20 00                       ination: .

00000e4e <_ZZL11sendConfirmP13NWK_DataReq_tE3__c_4>:
     e4e:	4e 6f 20 61 63 6b 6e 6f 77 6c 65 64 67 65 6d 65     No acknowledgeme
     e5e:	6e 74 20 72 65 63 65 69 76 65 64 3a 20 00           nt received: .

00000e6c <_ZZL11sendConfirmP13NWK_DataReq_tE3__c_3>:
     e6c:	4f 75 74 20 6f 66 20 6d 65 6d 6f 72 79 3a 20 00     Out of memory: .

00000e7c <_ZZL11sendConfirmP13NWK_DataReq_tE3__c_2>:
     e7c:	45 72 72 6f 72 3a 20 00                             Error: .

00000e84 <_ZZL11sendConfirmP13NWK_DataReq_tE3__c_1>:
     e84:	29 00                                               ).

00000e86 <_ZZL11sendConfirmP13NWK_DataReq_tE3__c_0>:
     e86:	20 28 43 6f 6e 66 69 72 6d 65 64 20 77 69 74 68      (Confirmed with
     e96:	20 63 6f 6e 74 72 6f 6c 20 62 79 74 65 3a 20 00      control byte: .

00000ea6 <_ZZL11sendConfirmP13NWK_DataReq_tE3__c>:
     ea6:	2d 20 20 4d 65 73 73 61 67 65 20 73 75 63 63 65     -  Message succe
     eb6:	73 73 66 75 6c 6c 79 20 73 65 6e 74 20 74 6f 20     ssfully sent to 
     ec6:	53 63 6f 75 74 20 00                                Scout .

00000ecd <_ZZL11sendMessageiRK6StringE3__c_0>:
     ecd:	3a 20 00                                            : .

00000ed0 <_ZZL11sendMessageiRK6StringE3__c>:
     ed0:	53 65 6e 74 20 6d 65 73 73 61 67 65 20 74 6f 20     Sent message to 
     ee0:	53 63 6f 75 74 20 00                                Scout .

00000ee7 <_ZZL11meshRoutingvE3__c_7>:
     ee7:	20 20 20 20 20 7c 00                                     |.

00000eee <_ZZL11meshRoutingvE3__c_6>:
     eee:	20 20 20 20 20 7c 20 20 20 20 20 00                      |     .

00000efa <_ZZL11meshRoutingvE3__c_5>:
     efa:	20 20 20 20 20 20 7c 20 20 20 20 20 00                    |     .

00000f07 <_ZZL11meshRoutingvE3__c_4>:
     f07:	20 20 20 20 20 20 7c 20 20 20 20 20 20 00                 |      .

00000f15 <_ZZL11meshRoutingvE3__c_3>:
     f15:	20 20 20 20 20 20 7c 20 20 20 20 20 20 00                 |      .

00000f23 <_ZZL11meshRoutingvE3__c_2>:
     f23:	20 20 20 20 20 20 7c 20 20 20 20 20 20 00                 |      .

00000f31 <_ZZL11meshRoutingvE3__c_1>:
     f31:	20 20 20 20 20 20 7c 20 20 20 20 20 20 00                 |      .

00000f3f <_ZZL11meshRoutingvE3__c_0>:
     f3f:	7c 20 20 20 20 20 20 00                             |      .

00000f47 <_ZZL11meshRoutingvE3__c>:
     f47:	7c 20 20 20 20 46 69 78 65 64 20 20 20 20 7c 20     |    Fixed    | 
     f57:	20 4d 75 6c 74 69 63 61 73 74 20 20 7c 20 20 20      Multicast  |   
     f67:	20 53 63 6f 72 65 20 20 20 20 7c 20 20 20 20 44      Score    |    D
     f77:	73 74 41 64 64 20 20 20 7c 20 4e 65 78 74 48 6f     stAdd   | NextHo
     f87:	70 41 64 64 72 20 7c 20 20 20 20 52 61 6e 6b 20     pAddr |    Rank 
     f97:	20 20 20 20 7c 20 20 20 20 20 4c 51 49 20 20 20         |     LQI   
     fa7:	20 20 7c 00                                           |.

00000fab <_ZZL9allReportvE3__c>:
     fab:	72 75 6e 6e 69 6e 67 20 61 6c 6c 20 72 65 70 6f     running all repo
     fbb:	72 74 73 00                                         rts.

00000fbf <_ZZL12pinMakeInputvE3__c_0>:
     fbf:	43 61 6e 6e 6f 74 20 63 68 61 6e 67 65 20 6d 6f     Cannot change mo
     fcf:	64 65 20 6f 66 20 72 65 73 65 72 76 65 64 20 70     de of reserved p
     fdf:	69 6e 00                                            in.

00000fe2 <_ZZL12pinMakeInputvE3__c>:
     fe2:	49 6e 76 61 6c 69 64 20 70 69 6e 20 6e 75 6d 62     Invalid pin numb
     ff2:	65 72 00                                            er.

00000ff5 <_ZZL13pinMakeOutputvE3__c_0>:
     ff5:	43 61 6e 6e 6f 74 20 63 68 61 6e 67 65 20 6d 6f     Cannot change mo
    1005:	64 65 20 6f 66 20 72 65 73 65 72 76 65 64 20 70     de of reserved p
    1015:	69 6e 00                                            in.

00001018 <_ZZL13pinMakeOutputvE3__c>:
    1018:	49 6e 76 61 6c 69 64 20 70 69 6e 20 6e 75 6d 62     Invalid pin numb
    1028:	65 72 00                                            er.

0000102b <_ZZL10pinDisablevE3__c_0>:
    102b:	43 61 6e 6e 6f 74 20 63 68 61 6e 67 65 20 6d 6f     Cannot change mo
    103b:	64 65 20 6f 66 20 72 65 73 65 72 76 65 64 20 70     de of reserved p
    104b:	69 6e 00                                            in.

0000104e <_ZZL10pinDisablevE3__c>:
    104e:	49 6e 76 61 6c 69 64 20 70 69 6e 20 6e 75 6d 62     Invalid pin numb
    105e:	65 72 00                                            er.

00001061 <_ZZL10pinSetModevE3__c_0>:
    1061:	43 61 6e 6e 6f 74 20 63 68 61 6e 67 65 20 6d 6f     Cannot change mo
    1071:	64 65 20 6f 66 20 72 65 73 65 72 76 65 64 20 70     de of reserved p
    1081:	69 6e 00                                            in.

00001084 <_ZZL10pinSetModevE3__c>:
    1084:	49 6e 76 61 6c 69 64 20 70 69 6e 20 6e 75 6d 62     Invalid pin numb
    1094:	65 72 00                                            er.

00001097 <_ZZL7pinReadvE3__c>:
    1097:	49 6e 76 61 6c 69 64 20 70 69 6e 20 6e 75 6d 62     Invalid pin numb
    10a7:	65 72 00                                            er.

000010aa <_ZZL8pinWritevE3__c_0>:
    10aa:	49 6e 76 61 6c 69 64 20 70 69 6e 20 76 61 6c 75     Invalid pin valu
    10ba:	65 00                                               e.

000010bc <_ZZL8pinWritevE3__c>:
    10bc:	49 6e 76 61 6c 69 64 20 70 69 6e 20 6e 75 6d 62     Invalid pin numb
    10cc:	65 72 00                                            er.

000010cf <_ZZL7pinSavevE3__c_1>:
    10cf:	49 6e 76 61 6c 69 64 20 70 69 6e 20 6d 6f 64 65     Invalid pin mode
	...

000010e0 <_ZZL7pinSavevE3__c_0>:
    10e0:	43 61 6e 6e 6f 74 20 63 68 61 6e 67 65 20 6d 6f     Cannot change mo
    10f0:	64 65 20 6f 66 20 72 65 73 65 72 76 65 64 20 70     de of reserved p
    1100:	69 6e 00                                            in.

00001103 <_ZZL7pinSavevE3__c>:
    1103:	49 6e 76 61 6c 69 64 20 70 69 6e 20 6e 75 6d 62     Invalid pin numb
    1113:	65 72 00                                            er.

00001116 <_ZZL12backpackListvE3__c_3>:
    1116:	29 00                                               ).

00001118 <_ZZL12backpackListvE3__c_2>:
    1118:	20 28 00                                             (.

0000111b <_ZZL12backpackListvE3__c_1>:
    111b:	45 72 72 6f 72 20 70 61 72 73 69 6e 67 20 6e 61     Error parsing na
    112b:	6d 65 00                                            me.

0000112e <_ZZL12backpackListvE3__c_0>:
    112e:	3a 20 00                                            : .

00001131 <_ZZL12backpackListvE3__c>:
    1131:	4e 6f 20 62 61 63 6b 70 61 63 6b 73 20 66 6f 75     No backpacks fou
    1141:	6e 64 00                                            nd.

00001144 <_ZZL14backpackEepromvE3__c_0>:
    1144:	46 61 69 6c 65 64 20 74 6f 20 66 65 74 63 68 20     Failed to fetch 
    1154:	45 45 50 52 4f 4d 00                                EEPROM.

0000115b <_ZZL14backpackEepromvE3__c>:
    115b:	49 6e 76 61 6c 69 64 20 62 61 63 6b 70 61 63 6b     Invalid backpack
    116b:	20 6e 75 6d 62 65 72 00                              number.

00001173 <_ZZL20backpackUpdateEepromvE3__c_1>:
    1173:	46 61 69 6c 65 64 20 74 6f 20 77 72 69 74 65 20     Failed to write 
    1183:	45 45 50 52 4f 4d 00                                EEPROM.

0000118a <_ZZL20backpackUpdateEepromvE3__c_0>:
    118a:	46 61 69 6c 65 64 20 74 6f 20 75 70 64 61 74 65     Failed to update
    119a:	20 45 45 50 52 4f 4d 00                              EEPROM.

000011a2 <_ZZL20backpackUpdateEepromvE3__c>:
    11a2:	49 6e 76 61 6c 69 64 20 62 61 63 6b 70 61 63 6b     Invalid backpack
    11b2:	20 6e 75 6d 62 65 72 00                              number.

000011ba <_ZZL14backpackDetailvE3__c_13>:
    11ba:	20 62 79 74 65 73 00                                 bytes.

000011c1 <_ZZL14backpackDetailvE3__c_12>:
    11c1:	45 45 50 52 4f 4d 20 75 73 65 64 3a 20 00           EEPROM used: .

000011cf <_ZZL14backpackDetailvE3__c_11>:
    11cf:	20 62 79 74 65 73 00                                 bytes.

000011d6 <_ZZL14backpackDetailvE3__c_10>:
    11d6:	45 45 50 52 4f 4d 20 73 69 7a 65 3a 20 00           EEPROM size: .

000011e4 <_ZZL14backpackDetailvE3__c_9>:
    11e4:	2e 78 00                                            .x.

000011e7 <_ZZL14backpackDetailvE3__c_8>:
    11e7:	45 45 50 52 4f 4d 20 6c 61 79 6f 75 74 20 76 65     EEPROM layout ve
    11f7:	72 73 69 6f 6e 3a 20 00                             rsion: .

000011ff <_ZZL14backpackDetailvE3__c_7>:
    11ff:	42 61 63 6b 70 61 63 6b 20 42 75 73 20 66 69 72     Backpack Bus fir
    120f:	6d 77 61 72 65 20 76 65 72 73 69 6f 6e 3a 20 00     mware version: .

0000121f <_ZZL14backpackDetailvE3__c_6>:
    121f:	2e 78 00                                            .x.

00001222 <_ZZL14backpackDetailvE3__c_5>:
    1222:	42 61 63 6b 70 61 63 6b 20 42 75 73 20 50 72 6f     Backpack Bus Pro
    1232:	74 6f 63 6f 6c 20 76 65 72 73 69 6f 6e 3a 20 00     tocol version: .

00001242 <_ZZL14backpackDetailvE3__c_4>:
    1242:	53 65 72 69 61 6c 20 6e 75 6d 62 65 72 3a 20 30     Serial number: 0
    1252:	78 00                                               x.

00001254 <_ZZL14backpackDetailvE3__c_3>:
    1254:	2e 00                                               ..

00001256 <_ZZL14backpackDetailvE3__c_2>:
    1256:	42 6f 61 72 64 20 72 65 76 69 73 69 6f 6e 3a 20     Board revision: 
	...

00001267 <_ZZL14backpackDetailvE3__c_1>:
    1267:	4d 6f 64 65 6c 20 6e 75 6d 62 65 72 3a 20 30 78     Model number: 0x
	...

00001278 <_ZZL14backpackDetailvE3__c_0>:
    1278:	42 61 63 6b 70 61 63 6b 20 6e 61 6d 65 3a 20 00     Backpack name: .

00001288 <_ZZL14backpackDetailvE3__c>:
    1288:	49 6e 76 61 6c 69 64 20 62 61 63 6b 70 61 63 6b     Invalid backpack
    1298:	20 6e 75 6d 62 65 72 00                              number.

000012a0 <_ZZL17backpackResourcesvE3__c_25>:
    12a0:	2c 20 63 6f 6e 74 65 6e 74 20 3d 20 00              , content = .

000012ad <_ZZL17backpackResourcesvE3__c_24>:
    12ad:	3a 20 64 61 74 61 2c 20 6c 65 6e 67 74 68 20 3d     : data, length =
    12bd:	20 00                                                .

000012bf <_ZZL17backpackResourcesvE3__c_23>:
    12bf:	6b 62 70 73 00                                      kbps.

000012c4 <_ZZL17backpackResourcesvE3__c_22>:
    12c4:	2c 20 6d 61 78 20 73 70 65 65 64 20 3d 20 00        , max speed = .

000012d3 <_ZZL17backpackResourcesvE3__c_21>:
    12d3:	3a 20 69 32 63 2c 20 61 64 64 72 65 73 73 20 3d     : i2c, address =
    12e3:	20 00                                                .

000012e5 <_ZZL17backpackResourcesvE3__c_20>:
    12e5:	75 6e 6b 6e 6f 77 6e 00                             unknown.

000012ed <_ZZL17backpackResourcesvE3__c_19>:
    12ed:	75 41 00                                            uA.

000012f0 <_ZZL17backpackResourcesvE3__c_18>:
    12f0:	2c 20 6d 61 78 69 6d 75 6d 20 3d 20 00              , maximum = .

000012fd <_ZZL17backpackResourcesvE3__c_17>:
    12fd:	75 6e 6b 6e 6f 77 6e 00                             unknown.

00001305 <_ZZL17backpackResourcesvE3__c_16>:
    1305:	75 41 00                                            uA.

00001308 <_ZZL17backpackResourcesvE3__c_15>:
    1308:	2c 20 74 79 70 69 63 61 6c 20 3d 20 00              , typical = .

00001315 <_ZZL17backpackResourcesvE3__c_14>:
    1315:	75 6e 6b 6e 6f 77 6e 00                             unknown.

0000131d <_ZZL17backpackResourcesvE3__c_13>:
    131d:	75 41 00                                            uA.

00001320 <_ZZL17backpackResourcesvE3__c_12>:
    1320:	2c 20 6d 69 6e 69 6d 75 6d 20 3d 20 00              , minimum = .

0000132d <_ZZL17backpackResourcesvE3__c_11>:
    132d:	70 6f 77 65 72 3a 20 70 69 6e 20 3d 20 00           power: pin = .

0000133b <_ZZL17backpackResourcesvE3__c_10>:
    133b:	3a 20 67 70 69 6f 2c 20 70 69 6e 20 3d 20 00        : gpio, pin = .

0000134a <_ZZL17backpackResourcesvE3__c_9>:
    134a:	75 6e 6b 6e 6f 77 6e 00                             unknown.

00001352 <_ZZL17backpackResourcesvE3__c_8>:
    1352:	62 70 73 00                                         bps.

00001356 <_ZZL17backpackResourcesvE3__c_7>:
    1356:	2c 20 73 70 65 65 64 20 3d 20 00                    , speed = .

00001361 <_ZZL17backpackResourcesvE3__c_6>:
    1361:	2c 20 72 78 20 3d 20 00                             , rx = .

00001369 <_ZZL17backpackResourcesvE3__c_5>:
    1369:	3a 20 75 61 72 74 2c 20 74 78 20 3d 20 00           : uart, tx = .

00001377 <_ZZL17backpackResourcesvE3__c_4>:
    1377:	75 6e 6b 6e 6f 77 6e 00                             unknown.

0000137f <_ZZL17backpackResourcesvE3__c_3>:
    137f:	4d 68 7a 00                                         Mhz.

00001383 <_ZZL17backpackResourcesvE3__c_2>:
    1383:	2c 20 6d 61 78 20 73 70 65 65 64 20 3d 20 00        , max speed = .

00001392 <_ZZL17backpackResourcesvE3__c_1>:
    1392:	3a 20 73 70 69 2c 20 73 73 20 3d 20 00              : spi, ss = .

0000139f <_ZZL17backpackResourcesvE3__c_0>:
    139f:	46 61 69 6c 65 64 20 74 6f 20 66 65 74 63 68 20     Failed to fetch 
    13af:	6f 72 20 70 61 72 73 65 20 72 65 73 6f 75 72 63     or parse resourc
    13bf:	65 20 64 65 73 63 72 69 70 74 6f 72 73 00           e descriptors.

000013cd <_ZZL17backpackResourcesvE3__c>:
    13cd:	49 6e 76 61 6c 69 64 20 62 61 63 6b 70 61 63 6b     Invalid backpack
    13dd:	20 6e 75 6d 62 65 72 00                              number.

000013e5 <_ZZL9daisyWipevE3__c_2>:
    13e5:	45 72 72 6f 72 3a 20 57 69 2d 46 69 20 64 69 72     Error: Wi-Fi dir
    13f5:	65 63 74 20 63 6f 6d 6d 61 6e 64 20 66 61 69 6c     ect command fail
    1405:	65 64 00                                            ed.

00001408 <_ZZL9daisyWipevE3__c_1>:
    1408:	45 72 72 6f 72 3a 20 57 69 2d 46 69 20 64 69 72     Error: Wi-Fi dir
    1418:	65 63 74 20 63 6f 6d 6d 61 6e 64 20 66 61 69 6c     ect command fail
    1428:	65 64 00                                            ed.

0000142b <_ZZL9daisyWipevE3__c_0>:
    142b:	4f 6b 2c 20 74 65 72 6d 69 6e 61 74 69 6e 67 2e     Ok, terminating.
    143b:	20 47 6f 6f 64 62 79 65 20 44 61 76 65 2e 00         Goodbye Dave..

0000144a <_ZZL9daisyWipevE3__c>:
    144a:	46 61 63 74 6f 72 79 20 72 65 73 65 74 20 72 65     Factory reset re
    145a:	71 75 65 73 74 65 64 2e 20 53 65 6e 64 20 63 6f     quested. Send co
    146a:	6d 6d 61 6e 64 20 61 67 61 69 6e 20 74 6f 20 63     mmand again to c
    147a:	6f 6e 66 69 72 6d 2e 00                             onfirm..

00001482 <_ZZL8wifiListvE3__c>:
    1482:	45 72 72 6f 72 3a 20 53 63 61 6e 20 66 61 69 6c     Error: Scan fail
    1492:	65 64 00                                            ed.

00001495 <_ZZL10wifiConfigvE3__c>:
    1495:	45 72 72 6f 72 3a 20 73 61 76 69 6e 67 20 53 63     Error: saving Sc
    14a5:	6f 75 74 2e 77 69 66 69 2e 63 6f 6e 66 69 67 75     out.wifi.configu
    14b5:	72 61 74 69 6f 6e 20 64 61 74 61 20 66 61 69 6c     ration data fail
    14c5:	65 64 00                                            ed.

000014c8 <_ZZL8wifiDhcpvE3__c>:
    14c8:	45 72 72 6f 72 3a 20 73 61 76 69 6e 67 20 53 63     Error: saving Sc
    14d8:	6f 75 74 2e 77 69 66 69 2e 63 6f 6e 66 69 67 75     out.wifi.configu
    14e8:	72 61 74 69 6f 6e 20 64 61 74 61 20 66 61 69 6c     ration data fail
    14f8:	65 64 00                                            ed.

000014fb <_ZZL10wifiStaticvE3__c_3>:
    14fb:	45 72 72 6f 72 3a 20 73 61 76 69 6e 67 20 53 63     Error: saving Sc
    150b:	6f 75 74 2e 77 69 66 69 2e 63 6f 6e 66 69 67 75     out.wifi.configu
    151b:	72 61 74 69 6f 6e 20 64 61 74 61 20 66 61 69 6c     ration data fail
    152b:	65 64 00                                            ed.

0000152e <_ZZL10wifiStaticvE3__c_2>:
    152e:	45 72 72 6f 72 3a 20 49 6e 76 61 6c 69 64 20 64     Error: Invalid d
    153e:	6e 73 20 73 65 72 76 65 72 00                       ns server.

00001548 <_ZZL10wifiStaticvE3__c_1>:
    1548:	45 72 72 6f 72 3a 20 49 6e 76 61 6c 69 64 20 67     Error: Invalid g
    1558:	61 74 65 77 61 79 00                                ateway.

0000155f <_ZZL10wifiStaticvE3__c_0>:
    155f:	45 72 72 6f 72 3a 20 49 6e 76 61 6c 69 64 20 6e     Error: Invalid n
    156f:	65 74 6d 61 73 6b 00                                etmask.

00001576 <_ZZL10wifiStaticvE3__c>:
    1576:	45 72 72 6f 72 3a 20 49 6e 76 61 6c 69 64 20 49     Error: Invalid I
    1586:	50 20 61 64 64 72 65 73 73 00                       P address.

00001590 <_ZZL11wifiCommandvE3__c>:
    1590:	45 72 72 6f 72 3a 20 57 69 2d 46 69 20 64 69 72     Error: Wi-Fi dir
    15a0:	65 63 74 20 63 6f 6d 6d 61 6e 64 20 66 61 69 6c     ect command fail
    15b0:	65 64 00                                            ed.

000015b3 <_ZZL8wifiPingvE3__c>:
    15b3:	45 72 72 6f 72 3a 20 57 69 2d 46 69 20 70 69 6e     Error: Wi-Fi pin
    15c3:	67 20 63 6f 6d 6d 61 6e 64 20 66 61 69 6c 65 64     g command failed
	...

000015d4 <_ZZL13wifiDNSLookupvE3__c>:
    15d4:	45 72 72 6f 72 3a 20 57 69 2d 46 69 20 44 4e 53     Error: Wi-Fi DNS
    15e4:	20 6c 6f 6f 6b 75 70 20 63 6f 6d 6d 61 6e 64 20      lookup command 
    15f4:	66 61 69 6c 65 64 00                                failed.

000015fb <_ZZL11wifiGetTimevE3__c>:
    15fb:	45 72 72 6f 72 3a 20 57 69 2d 46 69 20 4e 54 50     Error: Wi-Fi NTP
    160b:	20 74 69 6d 65 20 6c 6f 6f 6b 75 70 20 63 6f 6d      time lookup com
    161b:	6d 61 6e 64 20 66 61 69 6c 65 64 00                 mand failed.

00001627 <_ZZL9wifiSleepvE3__c>:
    1627:	45 72 72 6f 72 3a 20 57 69 2d 46 69 20 73 6c 65     Error: Wi-Fi sle
    1637:	65 70 20 63 6f 6d 6d 61 6e 64 20 66 61 69 6c 65     ep command faile
    1647:	64 00                                               d.

00001649 <_ZZL10wifiWakeupvE3__c>:
    1649:	45 72 72 6f 72 3a 20 57 69 2d 46 69 20 77 61 6b     Error: Wi-Fi wak
    1659:	65 75 70 20 63 6f 6d 6d 61 6e 64 20 66 61 69 6c     eup command fail
    1669:	65 64 00                                            ed.

0000166c <_ZZL9wifiStatsvE3__c_0>:
    166c:	4e 75 6d 62 65 72 20 6f 66 20 63 6f 6e 6e 65 63     Number of connec
    167c:	74 69 6f 6e 73 20 74 6f 20 48 51 20 73 69 6e 63     tions to HQ sinc
    168c:	65 20 62 6f 6f 74 3a 20 00                          e boot: .

00001695 <_ZZL9wifiStatsvE3__c>:
    1695:	4e 75 6d 62 65 72 20 6f 66 20 63 6f 6e 6e 65 63     Number of connec
    16a5:	74 69 6f 6e 73 20 74 6f 20 41 50 20 73 69 6e 63     tions to AP sinc
    16b5:	65 20 62 6f 6f 74 3a 20 00                          e boot: .

000016be <_ZZL22digitalPinEventHandlerhaaE3__c_0>:
    16be:	6d 73 00                                            ms.

000016c1 <_ZZL22digitalPinEventHandlerhaaE3__c>:
    16c1:	44 69 67 69 74 61 6c 20 70 69 6e 20 65 76 65 6e     Digital pin even
    16d1:	74 20 68 61 6e 64 6c 65 72 20 74 6f 6f 6b 20 00     t handler took .

000016e1 <_ZZL21analogPinEventHandlerhiaE3__c_0>:
    16e1:	6d 73 00                                            ms.

000016e4 <_ZZL21analogPinEventHandlerhiaE3__c>:
    16e4:	41 6e 61 6c 6f 67 20 70 69 6e 20 65 76 65 6e 74     Analog pin event
    16f4:	20 68 61 6e 64 6c 65 72 20 74 6f 6f 6b 20 00         handler took .

00001703 <_ZZL14receiveMessageP13NWK_DataInd_tE3__c_2>:
    1703:	20 72 73 73 69 20 00                                 rssi .

0000170a <_ZZL14receiveMessageP13NWK_DataInd_tE3__c_1>:
    170a:	20 6c 71 69 20 00                                    lqi .

00001710 <_ZZL14receiveMessageP13NWK_DataInd_tE3__c_0>:
    1710:	20 66 72 6f 6d 20 00                                 from .

00001717 <_ZZL14receiveMessageP13NWK_DataInd_tE3__c>:
    1717:	52 65 63 65 69 76 65 64 20 6d 65 73 73 61 67 65     Received message
    1727:	20 6f 66 20 00                                       of .

0000172c <__ctors_start>:
    172c:	97 0d       	add	r25, r7
    172e:	42 0e       	add	r4, r18
    1730:	d9 0e       	add	r13, r25
    1732:	77 1c       	adc	r7, r7
    1734:	57 37       	cpi	r21, 0x77	; 119
    1736:	ce 41       	sbci	r28, 0x1E	; 30
    1738:	c5 47       	sbci	r28, 0x75	; 117
    173a:	3e 48       	sbci	r19, 0x8E	; 142
    173c:	49 48       	sbci	r20, 0x89	; 137
    173e:	54 48       	sbci	r21, 0x84	; 132
    1740:	96 62       	ori	r25, 0x26	; 38
    1742:	d0 64       	ori	r29, 0x40	; 64
    1744:	21 68       	ori	r18, 0x81	; 129
    1746:	64 6c       	ori	r22, 0xC4	; 196
    1748:	5f 75       	andi	r21, 0x5F	; 95
    174a:	27 7f       	andi	r18, 0xF7	; 247
    174c:	b5 aa       	std	Z+53, r11	; 0x35
    174e:	9b ad       	ldd	r25, Y+59	; 0x3b
    1750:	04 ae       	std	Z+60, r0	; 0x3c

00001752 <__ctors_end>:
    1752:	6c 75       	andi	r22, 0x5C	; 92
    1754:	59 7f       	andi	r21, 0xF9	; 249

00001756 <__dtors_end>:
    1756:	11 24       	eor	r1, r1
    1758:	1f be       	out	0x3f, r1	; 63
    175a:	cf ef       	ldi	r28, 0xFF	; 255
    175c:	d1 e8       	ldi	r29, 0x81	; 129
    175e:	de bf       	out	0x3e, r29	; 62
    1760:	cd bf       	out	0x3d, r28	; 61
    1762:	00 e0       	ldi	r16, 0x00	; 0
    1764:	0c bf       	out	0x3c, r16	; 60

00001766 <__do_copy_data>:
    1766:	14 e2       	ldi	r17, 0x24	; 36
    1768:	a0 e0       	ldi	r26, 0x00	; 0
    176a:	b2 e0       	ldi	r27, 0x02	; 2
    176c:	e0 e8       	ldi	r30, 0x80	; 128
    176e:	f3 e7       	ldi	r31, 0x73	; 115
    1770:	01 e0       	ldi	r16, 0x01	; 1
    1772:	0b bf       	out	0x3b, r16	; 59
    1774:	02 c0       	rjmp	.+4      	; 0x177a <__do_copy_data+0x14>
    1776:	07 90       	elpm	r0, Z+
    1778:	0d 92       	st	X+, r0
    177a:	a4 30       	cpi	r26, 0x04	; 4
    177c:	b1 07       	cpc	r27, r17
    177e:	d9 f7       	brne	.-10     	; 0x1776 <__do_copy_data+0x10>

00001780 <__do_clear_bss>:
    1780:	2b e3       	ldi	r18, 0x3B	; 59
    1782:	a4 e0       	ldi	r26, 0x04	; 4
    1784:	b4 e2       	ldi	r27, 0x24	; 36
    1786:	01 c0       	rjmp	.+2      	; 0x178a <.do_clear_bss_start>

00001788 <.do_clear_bss_loop>:
    1788:	1d 92       	st	X+, r1

0000178a <.do_clear_bss_start>:
    178a:	a1 30       	cpi	r26, 0x01	; 1
    178c:	b2 07       	cpc	r27, r18
    178e:	e1 f7       	brne	.-8      	; 0x1788 <.do_clear_bss_loop>

00001790 <__do_global_ctors>:
    1790:	17 e1       	ldi	r17, 0x17	; 23
    1792:	c2 e5       	ldi	r28, 0x52	; 82
    1794:	d7 e1       	ldi	r29, 0x17	; 23
    1796:	00 e0       	ldi	r16, 0x00	; 0
    1798:	06 c0       	rjmp	.+12     	; 0x17a6 <__do_global_ctors+0x16>
    179a:	22 97       	sbiw	r28, 0x02	; 2
    179c:	01 09       	sbc	r16, r1
    179e:	fe 01       	movw	r30, r28
    17a0:	0b bf       	out	0x3b, r16	; 59
    17a2:	0e 94 96 b2 	call	0x1652c	; 0x1652c <__tablejump_elpm__>
    17a6:	cc 32       	cpi	r28, 0x2C	; 44
    17a8:	d1 07       	cpc	r29, r17
    17aa:	80 e0       	ldi	r24, 0x00	; 0
    17ac:	08 07       	cpc	r16, r24
    17ae:	a9 f7       	brne	.-22     	; 0x179a <__do_global_ctors+0xa>
    17b0:	0f d3       	rcall	.+1566   	; 0x1dd0 <main>
    17b2:	0c 94 af b9 	jmp	0x1735e	; 0x1735e <__do_global_dtors>

000017b6 <__bad_interrupt>:
    17b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000017ba <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    17ba:	fc 01       	movw	r30, r24
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail) % SERIAL_BUFFER_SIZE;
    17bc:	81 8d       	ldd	r24, Z+25	; 0x19
    17be:	22 8d       	ldd	r18, Z+26	; 0x1a
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	80 5c       	subi	r24, 0xC0	; 192
    17c4:	9f 4f       	sbci	r25, 0xFF	; 255
    17c6:	82 1b       	sub	r24, r18
    17c8:	91 09       	sbc	r25, r1
}
    17ca:	8f 73       	andi	r24, 0x3F	; 63
    17cc:	99 27       	eor	r25, r25
    17ce:	08 95       	ret

000017d0 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    17d0:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    17d2:	91 8d       	ldd	r25, Z+25	; 0x19
    17d4:	82 8d       	ldd	r24, Z+26	; 0x1a
    17d6:	98 17       	cp	r25, r24
    17d8:	31 f0       	breq	.+12     	; 0x17e6 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    17da:	82 8d       	ldd	r24, Z+26	; 0x1a
    17dc:	e8 0f       	add	r30, r24
    17de:	f1 1d       	adc	r31, r1
    17e0:	85 8d       	ldd	r24, Z+29	; 0x1d
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    17e6:	8f ef       	ldi	r24, 0xFF	; 255
    17e8:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    17ea:	08 95       	ret

000017ec <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    17ec:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    17ee:	91 8d       	ldd	r25, Z+25	; 0x19
    17f0:	82 8d       	ldd	r24, Z+26	; 0x1a
    17f2:	98 17       	cp	r25, r24
    17f4:	61 f0       	breq	.+24     	; 0x180e <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    17f6:	82 8d       	ldd	r24, Z+26	; 0x1a
    17f8:	df 01       	movw	r26, r30
    17fa:	a8 0f       	add	r26, r24
    17fc:	b1 1d       	adc	r27, r1
    17fe:	5d 96       	adiw	r26, 0x1d	; 29
    1800:	8c 91       	ld	r24, X
    _rx_buffer_tail = (uint8_t)(_rx_buffer_tail + 1) % SERIAL_BUFFER_SIZE;
    1802:	92 8d       	ldd	r25, Z+26	; 0x1a
    1804:	9f 5f       	subi	r25, 0xFF	; 255
    1806:	9f 73       	andi	r25, 0x3F	; 63
    1808:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    180e:	8f ef       	ldi	r24, 0xFF	; 255
    1810:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (uint8_t)(_rx_buffer_tail + 1) % SERIAL_BUFFER_SIZE;
    return c;
  }
}
    1812:	08 95       	ret

00001814 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1814:	8e e8       	ldi	r24, 0x8E	; 142
    1816:	9d e0       	ldi	r25, 0x0D	; 13
    1818:	89 2b       	or	r24, r25
    181a:	39 f0       	breq	.+14     	; 0x182a <_Z14serialEventRunv+0x16>
    181c:	80 e0       	ldi	r24, 0x00	; 0
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	89 2b       	or	r24, r25
    1822:	19 f0       	breq	.+6      	; 0x182a <_Z14serialEventRunv+0x16>
    1824:	7b d1       	rcall	.+758    	; 0x1b1c <_Z17Serial0_availablev>
    1826:	81 11       	cpse	r24, r1
    1828:	0c c0       	rjmp	.+24     	; 0x1842 <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    182a:	89 e3       	ldi	r24, 0x39	; 57
    182c:	9e e0       	ldi	r25, 0x0E	; 14
    182e:	89 2b       	or	r24, r25
    1830:	69 f0       	breq	.+26     	; 0x184c <_Z14serialEventRunv+0x38>
    1832:	80 e0       	ldi	r24, 0x00	; 0
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	89 2b       	or	r24, r25
    1838:	49 f0       	breq	.+18     	; 0x184c <_Z14serialEventRunv+0x38>
    183a:	1b d2       	rcall	.+1078   	; 0x1c72 <_Z17Serial1_availablev>
    183c:	81 11       	cpse	r24, r1
    183e:	04 c0       	rjmp	.+8      	; 0x1848 <_Z14serialEventRunv+0x34>
    1840:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1842:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1846:	f1 cf       	rjmp	.-30     	; 0x182a <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    1848:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    184c:	08 95       	ret

0000184e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    184e:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1850:	84 8d       	ldd	r24, Z+28	; 0x1c
    1852:	df 01       	movw	r26, r30
    1854:	a8 0f       	add	r26, r24
    1856:	b1 1d       	adc	r27, r1
    1858:	a3 5a       	subi	r26, 0xA3	; 163
    185a:	bf 4f       	sbci	r27, 0xFF	; 255
    185c:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_BUFFER_SIZE;
    185e:	84 8d       	ldd	r24, Z+28	; 0x1c
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	01 96       	adiw	r24, 0x01	; 1
    1864:	8f 73       	andi	r24, 0x3F	; 63
    1866:	99 27       	eor	r25, r25
    1868:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    186a:	a6 89       	ldd	r26, Z+22	; 0x16
    186c:	b7 89       	ldd	r27, Z+23	; 0x17
    186e:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    1870:	a0 89       	ldd	r26, Z+16	; 0x10
    1872:	b1 89       	ldd	r27, Z+17	; 0x11
    1874:	8c 91       	ld	r24, X
    1876:	80 64       	ori	r24, 0x40	; 64
    1878:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    187a:	93 8d       	ldd	r25, Z+27	; 0x1b
    187c:	84 8d       	ldd	r24, Z+28	; 0x1c
    187e:	98 13       	cpse	r25, r24
    1880:	06 c0       	rjmp	.+12     	; 0x188e <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    1882:	02 88       	ldd	r0, Z+18	; 0x12
    1884:	f3 89       	ldd	r31, Z+19	; 0x13
    1886:	e0 2d       	mov	r30, r0
    1888:	80 81       	ld	r24, Z
    188a:	8f 7d       	andi	r24, 0xDF	; 223
    188c:	80 83       	st	Z, r24
    188e:	08 95       	ret

00001890 <_ZN14HardwareSerial5flushEv>:
    return c;
  }
}

void HardwareSerial::flush()
{
    1890:	cf 93       	push	r28
    1892:	df 93       	push	r29
    1894:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1896:	88 8d       	ldd	r24, Y+24	; 0x18
    1898:	88 23       	and	r24, r24
    189a:	c1 f0       	breq	.+48     	; 0x18cc <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    189c:	ea 89       	ldd	r30, Y+18	; 0x12
    189e:	fb 89       	ldd	r31, Y+19	; 0x13
    18a0:	80 81       	ld	r24, Z
    18a2:	85 fd       	sbrc	r24, 5
    18a4:	05 c0       	rjmp	.+10     	; 0x18b0 <_ZN14HardwareSerial5flushEv+0x20>
    18a6:	a8 89       	ldd	r26, Y+16	; 0x10
    18a8:	b9 89       	ldd	r27, Y+17	; 0x11
    18aa:	8c 91       	ld	r24, X
    18ac:	86 fd       	sbrc	r24, 6
    18ae:	0e c0       	rjmp	.+28     	; 0x18cc <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    18b0:	0f b6       	in	r0, 0x3f	; 63
    18b2:	07 fc       	sbrc	r0, 7
    18b4:	f5 cf       	rjmp	.-22     	; 0x18a0 <_ZN14HardwareSerial5flushEv+0x10>
    18b6:	80 81       	ld	r24, Z
    18b8:	85 ff       	sbrs	r24, 5
    18ba:	f2 cf       	rjmp	.-28     	; 0x18a0 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    18bc:	a8 89       	ldd	r26, Y+16	; 0x10
    18be:	b9 89       	ldd	r27, Y+17	; 0x11
    18c0:	8c 91       	ld	r24, X
    18c2:	85 ff       	sbrs	r24, 5
    18c4:	ed cf       	rjmp	.-38     	; 0x18a0 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    18c6:	ce 01       	movw	r24, r28
    18c8:	c2 df       	rcall	.-124    	; 0x184e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    18ca:	e8 cf       	rjmp	.-48     	; 0x189c <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    18cc:	df 91       	pop	r29
    18ce:	cf 91       	pop	r28
    18d0:	08 95       	ret

000018d2 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    18d2:	cf 92       	push	r12
    18d4:	df 92       	push	r13
    18d6:	ff 92       	push	r15
    18d8:	0f 93       	push	r16
    18da:	1f 93       	push	r17
    18dc:	cf 93       	push	r28
    18de:	df 93       	push	r29
    18e0:	1f 92       	push	r1
    18e2:	cd b7       	in	r28, 0x3d	; 61
    18e4:	de b7       	in	r29, 0x3e	; 62
    18e6:	6c 01       	movw	r12, r24
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    18e8:	dc 01       	movw	r26, r24
    18ea:	5b 96       	adiw	r26, 0x1b	; 27
    18ec:	9c 91       	ld	r25, X
    18ee:	5b 97       	sbiw	r26, 0x1b	; 27
    18f0:	5c 96       	adiw	r26, 0x1c	; 28
    18f2:	8c 91       	ld	r24, X
    18f4:	5c 97       	sbiw	r26, 0x1c	; 28
    18f6:	98 13       	cpse	r25, r24
    18f8:	07 c0       	rjmp	.+14     	; 0x1908 <_ZN14HardwareSerial5writeEh+0x36>
    18fa:	50 96       	adiw	r26, 0x10	; 16
    18fc:	ed 91       	ld	r30, X+
    18fe:	fc 91       	ld	r31, X
    1900:	51 97       	sbiw	r26, 0x11	; 17
    1902:	80 81       	ld	r24, Z
    1904:	85 fd       	sbrc	r24, 5
    1906:	31 c0       	rjmp	.+98     	; 0x196a <_ZN14HardwareSerial5writeEh+0x98>
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  uint8_t i = (_tx_buffer_head + 1) % SERIAL_BUFFER_SIZE;
    1908:	f6 01       	movw	r30, r12
    190a:	03 8d       	ldd	r16, Z+27	; 0x1b
    190c:	10 e0       	ldi	r17, 0x00	; 0
    190e:	0f 5f       	subi	r16, 0xFF	; 255
    1910:	1f 4f       	sbci	r17, 0xFF	; 255
    1912:	0f 73       	andi	r16, 0x3F	; 63
    1914:	11 27       	eor	r17, r17
    1916:	f0 2e       	mov	r15, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1918:	f6 01       	movw	r30, r12
    191a:	84 8d       	ldd	r24, Z+28	; 0x1c
    191c:	f8 12       	cpse	r15, r24
    191e:	10 c0       	rjmp	.+32     	; 0x1940 <_ZN14HardwareSerial5writeEh+0x6e>
    if (bit_is_clear(SREG, SREG_I)) {
    1920:	0f b6       	in	r0, 0x3f	; 63
    1922:	07 fc       	sbrc	r0, 7
    1924:	f9 cf       	rjmp	.-14     	; 0x1918 <_ZN14HardwareSerial5writeEh+0x46>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1926:	d6 01       	movw	r26, r12
    1928:	50 96       	adiw	r26, 0x10	; 16
    192a:	ed 91       	ld	r30, X+
    192c:	fc 91       	ld	r31, X
    192e:	51 97       	sbiw	r26, 0x11	; 17
    1930:	80 81       	ld	r24, Z
    1932:	85 ff       	sbrs	r24, 5
    1934:	f1 cf       	rjmp	.-30     	; 0x1918 <_ZN14HardwareSerial5writeEh+0x46>
	_tx_udr_empty_irq();
    1936:	c6 01       	movw	r24, r12
    1938:	69 83       	std	Y+1, r22	; 0x01
    193a:	89 df       	rcall	.-238    	; 0x184e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    193c:	69 81       	ldd	r22, Y+1	; 0x01
    193e:	ec cf       	rjmp	.-40     	; 0x1918 <_ZN14HardwareSerial5writeEh+0x46>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1940:	83 8d       	ldd	r24, Z+27	; 0x1b
    1942:	e8 0f       	add	r30, r24
    1944:	f1 1d       	adc	r31, r1
    1946:	e3 5a       	subi	r30, 0xA3	; 163
    1948:	ff 4f       	sbci	r31, 0xFF	; 255
    194a:	60 83       	st	Z, r22
  _tx_buffer_head = i;
    194c:	d6 01       	movw	r26, r12
    194e:	5b 96       	adiw	r26, 0x1b	; 27
    1950:	0c 93       	st	X, r16
    1952:	5b 97       	sbiw	r26, 0x1b	; 27
	
  sbi(*_ucsrb, UDRIE0);
    1954:	52 96       	adiw	r26, 0x12	; 18
    1956:	ed 91       	ld	r30, X+
    1958:	fc 91       	ld	r31, X
    195a:	53 97       	sbiw	r26, 0x13	; 19
    195c:	80 81       	ld	r24, Z
    195e:	80 62       	ori	r24, 0x20	; 32
    1960:	80 83       	st	Z, r24
  _written = true;
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	58 96       	adiw	r26, 0x18	; 24
    1966:	8c 93       	st	X, r24
    1968:	0d c0       	rjmp	.+26     	; 0x1984 <_ZN14HardwareSerial5writeEh+0xb2>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    196a:	d6 01       	movw	r26, r12
    196c:	56 96       	adiw	r26, 0x16	; 22
    196e:	ed 91       	ld	r30, X+
    1970:	fc 91       	ld	r31, X
    1972:	57 97       	sbiw	r26, 0x17	; 23
    1974:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    1976:	50 96       	adiw	r26, 0x10	; 16
    1978:	ed 91       	ld	r30, X+
    197a:	fc 91       	ld	r31, X
    197c:	51 97       	sbiw	r26, 0x11	; 17
    197e:	80 81       	ld	r24, Z
    1980:	80 64       	ori	r24, 0x40	; 64
    1982:	80 83       	st	Z, r24
	
  sbi(*_ucsrb, UDRIE0);
  _written = true;
  
  return 1;
}
    1984:	81 e0       	ldi	r24, 0x01	; 1
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	0f 90       	pop	r0
    198a:	df 91       	pop	r29
    198c:	cf 91       	pop	r28
    198e:	1f 91       	pop	r17
    1990:	0f 91       	pop	r16
    1992:	ff 90       	pop	r15
    1994:	df 90       	pop	r13
    1996:	cf 90       	pop	r12
    1998:	08 95       	ret

0000199a <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    199a:	bf 92       	push	r11
    199c:	cf 92       	push	r12
    199e:	df 92       	push	r13
    19a0:	ef 92       	push	r14
    19a2:	ff 92       	push	r15
    19a4:	cf 93       	push	r28
    19a6:	df 93       	push	r29
    19a8:	ec 01       	movw	r28, r24
    19aa:	6a 01       	movw	r12, r20
    19ac:	7b 01       	movw	r14, r22
    19ae:	b2 2e       	mov	r11, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    19b0:	e8 89       	ldd	r30, Y+16	; 0x10
    19b2:	f9 89       	ldd	r31, Y+17	; 0x11
    19b4:	82 e0       	ldi	r24, 0x02	; 2
    19b6:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    19b8:	41 15       	cp	r20, r1
    19ba:	81 ee       	ldi	r24, 0xE1	; 225
    19bc:	58 07       	cpc	r21, r24
    19be:	61 05       	cpc	r22, r1
    19c0:	71 05       	cpc	r23, r1
    19c2:	a1 f0       	breq	.+40     	; 0x19ec <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    19c4:	60 e0       	ldi	r22, 0x00	; 0
    19c6:	79 e0       	ldi	r23, 0x09	; 9
    19c8:	8d e3       	ldi	r24, 0x3D	; 61
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	a7 01       	movw	r20, r14
    19ce:	96 01       	movw	r18, r12
    19d0:	0e 94 48 b2 	call	0x16490	; 0x16490 <__udivmodsi4>
    19d4:	21 50       	subi	r18, 0x01	; 1
    19d6:	31 09       	sbc	r19, r1
    19d8:	41 09       	sbc	r20, r1
    19da:	51 09       	sbc	r21, r1
    19dc:	56 95       	lsr	r21
    19de:	47 95       	ror	r20
    19e0:	37 95       	ror	r19
    19e2:	27 95       	ror	r18
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    19e4:	21 15       	cp	r18, r1
    19e6:	80 e1       	ldi	r24, 0x10	; 16
    19e8:	38 07       	cpc	r19, r24
    19ea:	98 f0       	brcs	.+38     	; 0x1a12 <_ZN14HardwareSerial5beginEmh+0x78>
  {
    *_ucsra = 0;
    19ec:	e8 89       	ldd	r30, Y+16	; 0x10
    19ee:	f9 89       	ldd	r31, Y+17	; 0x11
    19f0:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    19f2:	60 e8       	ldi	r22, 0x80	; 128
    19f4:	74 e8       	ldi	r23, 0x84	; 132
    19f6:	8e e1       	ldi	r24, 0x1E	; 30
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	a7 01       	movw	r20, r14
    19fc:	96 01       	movw	r18, r12
    19fe:	0e 94 48 b2 	call	0x16490	; 0x16490 <__udivmodsi4>
    1a02:	21 50       	subi	r18, 0x01	; 1
    1a04:	31 09       	sbc	r19, r1
    1a06:	41 09       	sbc	r20, r1
    1a08:	51 09       	sbc	r21, r1
    1a0a:	56 95       	lsr	r21
    1a0c:	47 95       	ror	r20
    1a0e:	37 95       	ror	r19
    1a10:	27 95       	ror	r18
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1a12:	ec 85       	ldd	r30, Y+12	; 0x0c
    1a14:	fd 85       	ldd	r31, Y+13	; 0x0d
    1a16:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    1a18:	ee 85       	ldd	r30, Y+14	; 0x0e
    1a1a:	ff 85       	ldd	r31, Y+15	; 0x0f
    1a1c:	20 83       	st	Z, r18

  _written = false;
    1a1e:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1a20:	ec 89       	ldd	r30, Y+20	; 0x14
    1a22:	fd 89       	ldd	r31, Y+21	; 0x15
    1a24:	b0 82       	st	Z, r11
  
  sbi(*_ucsrb, RXEN0);
    1a26:	ea 89       	ldd	r30, Y+18	; 0x12
    1a28:	fb 89       	ldd	r31, Y+19	; 0x13
    1a2a:	80 81       	ld	r24, Z
    1a2c:	80 61       	ori	r24, 0x10	; 16
    1a2e:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1a30:	ea 89       	ldd	r30, Y+18	; 0x12
    1a32:	fb 89       	ldd	r31, Y+19	; 0x13
    1a34:	80 81       	ld	r24, Z
    1a36:	88 60       	ori	r24, 0x08	; 8
    1a38:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    1a3a:	ea 89       	ldd	r30, Y+18	; 0x12
    1a3c:	fb 89       	ldd	r31, Y+19	; 0x13
    1a3e:	80 81       	ld	r24, Z
    1a40:	80 68       	ori	r24, 0x80	; 128
    1a42:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1a44:	ea 89       	ldd	r30, Y+18	; 0x12
    1a46:	fb 89       	ldd	r31, Y+19	; 0x13
    1a48:	80 81       	ld	r24, Z
    1a4a:	8f 7d       	andi	r24, 0xDF	; 223
    1a4c:	80 83       	st	Z, r24
}
    1a4e:	df 91       	pop	r29
    1a50:	cf 91       	pop	r28
    1a52:	ff 90       	pop	r15
    1a54:	ef 90       	pop	r14
    1a56:	df 90       	pop	r13
    1a58:	cf 90       	pop	r12
    1a5a:	bf 90       	pop	r11
    1a5c:	08 95       	ret

00001a5e <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for the first UART"
#endif
  {
    1a5e:	1f 92       	push	r1
    1a60:	0f 92       	push	r0
    1a62:	0f b6       	in	r0, 0x3f	; 63
    1a64:	0f 92       	push	r0
    1a66:	11 24       	eor	r1, r1
    1a68:	0b b6       	in	r0, 0x3b	; 59
    1a6a:	0f 92       	push	r0
    1a6c:	2f 93       	push	r18
    1a6e:	8f 93       	push	r24
    1a70:	9f 93       	push	r25
    1a72:	ef 93       	push	r30
    1a74:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1a76:	e0 91 14 24 	lds	r30, 0x2414
    1a7a:	f0 91 15 24 	lds	r31, 0x2415
    1a7e:	80 81       	ld	r24, Z
    1a80:	e0 91 1a 24 	lds	r30, 0x241A
    1a84:	f0 91 1b 24 	lds	r31, 0x241B
    1a88:	82 fd       	sbrc	r24, 2
    1a8a:	12 c0       	rjmp	.+36     	; 0x1ab0 <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1a8c:	90 81       	ld	r25, Z
    uint8_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_BUFFER_SIZE;
    1a8e:	80 91 1d 24 	lds	r24, 0x241D
    1a92:	8f 5f       	subi	r24, 0xFF	; 255
    1a94:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1a96:	20 91 1e 24 	lds	r18, 0x241E
    1a9a:	82 17       	cp	r24, r18
    1a9c:	51 f0       	breq	.+20     	; 0x1ab2 <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    1a9e:	e0 91 1d 24 	lds	r30, 0x241D
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	ec 5f       	subi	r30, 0xFC	; 252
    1aa6:	fb 4d       	sbci	r31, 0xDB	; 219
    1aa8:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1aaa:	80 93 1d 24 	sts	0x241D, r24
    1aae:	01 c0       	rjmp	.+2      	; 0x1ab2 <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1ab0:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1ab2:	ff 91       	pop	r31
    1ab4:	ef 91       	pop	r30
    1ab6:	9f 91       	pop	r25
    1ab8:	8f 91       	pop	r24
    1aba:	2f 91       	pop	r18
    1abc:	0f 90       	pop	r0
    1abe:	0b be       	out	0x3b, r0	; 59
    1ac0:	0f 90       	pop	r0
    1ac2:	0f be       	out	0x3f, r0	; 63
    1ac4:	0f 90       	pop	r0
    1ac6:	1f 90       	pop	r1
    1ac8:	18 95       	reti

00001aca <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for the first UART"
#endif
{
    1aca:	1f 92       	push	r1
    1acc:	0f 92       	push	r0
    1ace:	0f b6       	in	r0, 0x3f	; 63
    1ad0:	0f 92       	push	r0
    1ad2:	11 24       	eor	r1, r1
    1ad4:	0b b6       	in	r0, 0x3b	; 59
    1ad6:	0f 92       	push	r0
    1ad8:	2f 93       	push	r18
    1ada:	3f 93       	push	r19
    1adc:	4f 93       	push	r20
    1ade:	5f 93       	push	r21
    1ae0:	6f 93       	push	r22
    1ae2:	7f 93       	push	r23
    1ae4:	8f 93       	push	r24
    1ae6:	9f 93       	push	r25
    1ae8:	af 93       	push	r26
    1aea:	bf 93       	push	r27
    1aec:	ef 93       	push	r30
    1aee:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1af0:	84 e0       	ldi	r24, 0x04	; 4
    1af2:	94 e2       	ldi	r25, 0x24	; 36
    1af4:	ac de       	rcall	.-680    	; 0x184e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1af6:	ff 91       	pop	r31
    1af8:	ef 91       	pop	r30
    1afa:	bf 91       	pop	r27
    1afc:	af 91       	pop	r26
    1afe:	9f 91       	pop	r25
    1b00:	8f 91       	pop	r24
    1b02:	7f 91       	pop	r23
    1b04:	6f 91       	pop	r22
    1b06:	5f 91       	pop	r21
    1b08:	4f 91       	pop	r20
    1b0a:	3f 91       	pop	r19
    1b0c:	2f 91       	pop	r18
    1b0e:	0f 90       	pop	r0
    1b10:	0b be       	out	0x3b, r0	; 59
    1b12:	0f 90       	pop	r0
    1b14:	0f be       	out	0x3f, r0	; 63
    1b16:	0f 90       	pop	r0
    1b18:	1f 90       	pop	r1
    1b1a:	18 95       	reti

00001b1c <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1b1c:	84 e0       	ldi	r24, 0x04	; 4
    1b1e:	94 e2       	ldi	r25, 0x24	; 36
    1b20:	4c de       	rcall	.-872    	; 0x17ba <_ZN14HardwareSerial9availableEv>
    1b22:	21 e0       	ldi	r18, 0x01	; 1
    1b24:	89 2b       	or	r24, r25
    1b26:	09 f4       	brne	.+2      	; 0x1b2a <_Z17Serial0_availablev+0xe>
    1b28:	20 e0       	ldi	r18, 0x00	; 0
}
    1b2a:	82 2f       	mov	r24, r18
    1b2c:	08 95       	ret

00001b2e <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1b2e:	10 92 07 24 	sts	0x2407, r1
    1b32:	10 92 06 24 	sts	0x2406, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    1b36:	88 ee       	ldi	r24, 0xE8	; 232
    1b38:	93 e0       	ldi	r25, 0x03	; 3
    1b3a:	a0 e0       	ldi	r26, 0x00	; 0
    1b3c:	b0 e0       	ldi	r27, 0x00	; 0
    1b3e:	80 93 08 24 	sts	0x2408, r24
    1b42:	90 93 09 24 	sts	0x2409, r25
    1b46:	a0 93 0a 24 	sts	0x240A, r26
    1b4a:	b0 93 0b 24 	sts	0x240B, r27
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1b4e:	84 e5       	ldi	r24, 0x54	; 84
    1b50:	9c e0       	ldi	r25, 0x0C	; 12
    1b52:	90 93 05 24 	sts	0x2405, r25
    1b56:	80 93 04 24 	sts	0x2404, r24
    1b5a:	85 ec       	ldi	r24, 0xC5	; 197
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	90 93 11 24 	sts	0x2411, r25
    1b62:	80 93 10 24 	sts	0x2410, r24
    1b66:	84 ec       	ldi	r24, 0xC4	; 196
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	90 93 13 24 	sts	0x2413, r25
    1b6e:	80 93 12 24 	sts	0x2412, r24
    1b72:	80 ec       	ldi	r24, 0xC0	; 192
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	90 93 15 24 	sts	0x2415, r25
    1b7a:	80 93 14 24 	sts	0x2414, r24
    1b7e:	81 ec       	ldi	r24, 0xC1	; 193
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	90 93 17 24 	sts	0x2417, r25
    1b86:	80 93 16 24 	sts	0x2416, r24
    1b8a:	82 ec       	ldi	r24, 0xC2	; 194
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	90 93 19 24 	sts	0x2419, r25
    1b92:	80 93 18 24 	sts	0x2418, r24
    1b96:	86 ec       	ldi	r24, 0xC6	; 198
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	90 93 1b 24 	sts	0x241B, r25
    1b9e:	80 93 1a 24 	sts	0x241A, r24
    1ba2:	10 92 1d 24 	sts	0x241D, r1
    1ba6:	10 92 1e 24 	sts	0x241E, r1
    1baa:	10 92 1f 24 	sts	0x241F, r1
    1bae:	10 92 20 24 	sts	0x2420, r1
    1bb2:	08 95       	ret

00001bb4 <__vector_36>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for the first UART"
#endif
  {
    1bb4:	1f 92       	push	r1
    1bb6:	0f 92       	push	r0
    1bb8:	0f b6       	in	r0, 0x3f	; 63
    1bba:	0f 92       	push	r0
    1bbc:	11 24       	eor	r1, r1
    1bbe:	0b b6       	in	r0, 0x3b	; 59
    1bc0:	0f 92       	push	r0
    1bc2:	2f 93       	push	r18
    1bc4:	8f 93       	push	r24
    1bc6:	9f 93       	push	r25
    1bc8:	ef 93       	push	r30
    1bca:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1bcc:	e0 91 b1 24 	lds	r30, 0x24B1
    1bd0:	f0 91 b2 24 	lds	r31, 0x24B2
    1bd4:	80 81       	ld	r24, Z
    1bd6:	e0 91 b7 24 	lds	r30, 0x24B7
    1bda:	f0 91 b8 24 	lds	r31, 0x24B8
    1bde:	82 fd       	sbrc	r24, 2
    1be0:	12 c0       	rjmp	.+36     	; 0x1c06 <__vector_36+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1be2:	90 81       	ld	r25, Z
    uint8_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_BUFFER_SIZE;
    1be4:	80 91 ba 24 	lds	r24, 0x24BA
    1be8:	8f 5f       	subi	r24, 0xFF	; 255
    1bea:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1bec:	20 91 bb 24 	lds	r18, 0x24BB
    1bf0:	82 17       	cp	r24, r18
    1bf2:	51 f0       	breq	.+20     	; 0x1c08 <__vector_36+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    1bf4:	e0 91 ba 24 	lds	r30, 0x24BA
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	ef 55       	subi	r30, 0x5F	; 95
    1bfc:	fb 4d       	sbci	r31, 0xDB	; 219
    1bfe:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1c00:	80 93 ba 24 	sts	0x24BA, r24
    1c04:	01 c0       	rjmp	.+2      	; 0x1c08 <__vector_36+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1c06:	80 81       	ld	r24, Z
    Serial1._rx_complete_irq();
  }
    1c08:	ff 91       	pop	r31
    1c0a:	ef 91       	pop	r30
    1c0c:	9f 91       	pop	r25
    1c0e:	8f 91       	pop	r24
    1c10:	2f 91       	pop	r18
    1c12:	0f 90       	pop	r0
    1c14:	0b be       	out	0x3b, r0	; 59
    1c16:	0f 90       	pop	r0
    1c18:	0f be       	out	0x3f, r0	; 63
    1c1a:	0f 90       	pop	r0
    1c1c:	1f 90       	pop	r1
    1c1e:	18 95       	reti

00001c20 <__vector_37>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for the first UART"
#endif
{
    1c20:	1f 92       	push	r1
    1c22:	0f 92       	push	r0
    1c24:	0f b6       	in	r0, 0x3f	; 63
    1c26:	0f 92       	push	r0
    1c28:	11 24       	eor	r1, r1
    1c2a:	0b b6       	in	r0, 0x3b	; 59
    1c2c:	0f 92       	push	r0
    1c2e:	2f 93       	push	r18
    1c30:	3f 93       	push	r19
    1c32:	4f 93       	push	r20
    1c34:	5f 93       	push	r21
    1c36:	6f 93       	push	r22
    1c38:	7f 93       	push	r23
    1c3a:	8f 93       	push	r24
    1c3c:	9f 93       	push	r25
    1c3e:	af 93       	push	r26
    1c40:	bf 93       	push	r27
    1c42:	ef 93       	push	r30
    1c44:	ff 93       	push	r31
  Serial1._tx_udr_empty_irq();
    1c46:	81 ea       	ldi	r24, 0xA1	; 161
    1c48:	94 e2       	ldi	r25, 0x24	; 36
    1c4a:	01 de       	rcall	.-1022   	; 0x184e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1c4c:	ff 91       	pop	r31
    1c4e:	ef 91       	pop	r30
    1c50:	bf 91       	pop	r27
    1c52:	af 91       	pop	r26
    1c54:	9f 91       	pop	r25
    1c56:	8f 91       	pop	r24
    1c58:	7f 91       	pop	r23
    1c5a:	6f 91       	pop	r22
    1c5c:	5f 91       	pop	r21
    1c5e:	4f 91       	pop	r20
    1c60:	3f 91       	pop	r19
    1c62:	2f 91       	pop	r18
    1c64:	0f 90       	pop	r0
    1c66:	0b be       	out	0x3b, r0	; 59
    1c68:	0f 90       	pop	r0
    1c6a:	0f be       	out	0x3f, r0	; 63
    1c6c:	0f 90       	pop	r0
    1c6e:	1f 90       	pop	r1
    1c70:	18 95       	reti

00001c72 <_Z17Serial1_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
    1c72:	81 ea       	ldi	r24, 0xA1	; 161
    1c74:	94 e2       	ldi	r25, 0x24	; 36
    1c76:	a1 dd       	rcall	.-1214   	; 0x17ba <_ZN14HardwareSerial9availableEv>
    1c78:	21 e0       	ldi	r18, 0x01	; 1
    1c7a:	89 2b       	or	r24, r25
    1c7c:	09 f4       	brne	.+2      	; 0x1c80 <_Z17Serial1_availablev+0xe>
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
}
    1c80:	82 2f       	mov	r24, r18
    1c82:	08 95       	ret

00001c84 <_GLOBAL__sub_I___vector_36>:
    1c84:	10 92 a4 24 	sts	0x24A4, r1
    1c88:	10 92 a3 24 	sts	0x24A3, r1
    1c8c:	88 ee       	ldi	r24, 0xE8	; 232
    1c8e:	93 e0       	ldi	r25, 0x03	; 3
    1c90:	a0 e0       	ldi	r26, 0x00	; 0
    1c92:	b0 e0       	ldi	r27, 0x00	; 0
    1c94:	80 93 a5 24 	sts	0x24A5, r24
    1c98:	90 93 a6 24 	sts	0x24A6, r25
    1c9c:	a0 93 a7 24 	sts	0x24A7, r26
    1ca0:	b0 93 a8 24 	sts	0x24A8, r27
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1ca4:	84 e5       	ldi	r24, 0x54	; 84
    1ca6:	9c e0       	ldi	r25, 0x0C	; 12
    1ca8:	90 93 a2 24 	sts	0x24A2, r25
    1cac:	80 93 a1 24 	sts	0x24A1, r24
    1cb0:	8d ec       	ldi	r24, 0xCD	; 205
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	90 93 ae 24 	sts	0x24AE, r25
    1cb8:	80 93 ad 24 	sts	0x24AD, r24
    1cbc:	8c ec       	ldi	r24, 0xCC	; 204
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	90 93 b0 24 	sts	0x24B0, r25
    1cc4:	80 93 af 24 	sts	0x24AF, r24
    1cc8:	88 ec       	ldi	r24, 0xC8	; 200
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	90 93 b2 24 	sts	0x24B2, r25
    1cd0:	80 93 b1 24 	sts	0x24B1, r24
    1cd4:	89 ec       	ldi	r24, 0xC9	; 201
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	90 93 b4 24 	sts	0x24B4, r25
    1cdc:	80 93 b3 24 	sts	0x24B3, r24
    1ce0:	8a ec       	ldi	r24, 0xCA	; 202
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	90 93 b6 24 	sts	0x24B6, r25
    1ce8:	80 93 b5 24 	sts	0x24B5, r24
    1cec:	8e ec       	ldi	r24, 0xCE	; 206
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	90 93 b8 24 	sts	0x24B8, r25
    1cf4:	80 93 b7 24 	sts	0x24B7, r24
    1cf8:	10 92 ba 24 	sts	0x24BA, r1
    1cfc:	10 92 bb 24 	sts	0x24BB, r1
    1d00:	10 92 bc 24 	sts	0x24BC, r1
    1d04:	10 92 bd 24 	sts	0x24BD, r1
    1d08:	08 95       	ret

00001d0a <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    1d0a:	08 95       	ret

00001d0c <_ZNK9IPAddress7printToER5Print>:
}

bool IPAddress::operator==(const uint8_t* addr) const
{
    return memcmp(addr, _address, sizeof(_address)) == 0;
}
    1d0c:	af 92       	push	r10
    1d0e:	bf 92       	push	r11
    1d10:	cf 92       	push	r12
    1d12:	df 92       	push	r13
    1d14:	ef 92       	push	r14
    1d16:	ff 92       	push	r15
    1d18:	0f 93       	push	r16
    1d1a:	1f 93       	push	r17
    1d1c:	cf 93       	push	r28
    1d1e:	df 93       	push	r29
    1d20:	6c 01       	movw	r12, r24
    1d22:	7b 01       	movw	r14, r22
    1d24:	c0 e0       	ldi	r28, 0x00	; 0
    1d26:	d0 e0       	ldi	r29, 0x00	; 0
    1d28:	00 e0       	ldi	r16, 0x00	; 0
    1d2a:	10 e0       	ldi	r17, 0x00	; 0
    1d2c:	f6 01       	movw	r30, r12
    1d2e:	ec 0f       	add	r30, r28
    1d30:	fd 1f       	adc	r31, r29
    1d32:	4a e0       	ldi	r20, 0x0A	; 10
    1d34:	50 e0       	ldi	r21, 0x00	; 0
    1d36:	62 81       	ldd	r22, Z+2	; 0x02
    1d38:	c7 01       	movw	r24, r14
    1d3a:	d8 d1       	rcall	.+944    	; 0x20ec <_ZN5Print5printEhi>
    1d3c:	5c 01       	movw	r10, r24
    1d3e:	6e e2       	ldi	r22, 0x2E	; 46
    1d40:	c7 01       	movw	r24, r14
    1d42:	c3 d0       	rcall	.+390    	; 0x1eca <_ZN5Print5printEc>
    1d44:	8a 0d       	add	r24, r10
    1d46:	9b 1d       	adc	r25, r11
    1d48:	08 0f       	add	r16, r24
    1d4a:	19 1f       	adc	r17, r25
    1d4c:	21 96       	adiw	r28, 0x01	; 1
    1d4e:	c3 30       	cpi	r28, 0x03	; 3
    1d50:	d1 05       	cpc	r29, r1
    1d52:	61 f7       	brne	.-40     	; 0x1d2c <_ZNK9IPAddress7printToER5Print+0x20>
    1d54:	4a e0       	ldi	r20, 0x0A	; 10
    1d56:	50 e0       	ldi	r21, 0x00	; 0
    1d58:	f6 01       	movw	r30, r12
    1d5a:	65 81       	ldd	r22, Z+5	; 0x05
    1d5c:	c7 01       	movw	r24, r14
    1d5e:	c6 d1       	rcall	.+908    	; 0x20ec <_ZN5Print5printEhi>
    1d60:	80 0f       	add	r24, r16
    1d62:	91 1f       	adc	r25, r17
    1d64:	df 91       	pop	r29
    1d66:	cf 91       	pop	r28
    1d68:	1f 91       	pop	r17
    1d6a:	0f 91       	pop	r16
    1d6c:	ff 90       	pop	r15
    1d6e:	ef 90       	pop	r14
    1d70:	df 90       	pop	r13
    1d72:	cf 90       	pop	r12
    1d74:	bf 90       	pop	r11
    1d76:	af 90       	pop	r10
    1d78:	08 95       	ret

00001d7a <_ZN9IPAddressC1Ev>:
    1d7a:	24 e6       	ldi	r18, 0x64	; 100
    1d7c:	3c e0       	ldi	r19, 0x0C	; 12
    1d7e:	fc 01       	movw	r30, r24
    1d80:	31 83       	std	Z+1, r19	; 0x01
    1d82:	20 83       	st	Z, r18
    1d84:	12 82       	std	Z+2, r1	; 0x02
    1d86:	13 82       	std	Z+3, r1	; 0x03
    1d88:	14 82       	std	Z+4, r1	; 0x04
    1d8a:	15 82       	std	Z+5, r1	; 0x05
    1d8c:	08 95       	ret

00001d8e <_ZN9IPAddressC1Ehhhh>:
    1d8e:	0f 93       	push	r16
    1d90:	fc 01       	movw	r30, r24
    1d92:	84 e6       	ldi	r24, 0x64	; 100
    1d94:	9c e0       	ldi	r25, 0x0C	; 12
    1d96:	91 83       	std	Z+1, r25	; 0x01
    1d98:	80 83       	st	Z, r24
    1d9a:	62 83       	std	Z+2, r22	; 0x02
    1d9c:	43 83       	std	Z+3, r20	; 0x03
    1d9e:	24 83       	std	Z+4, r18	; 0x04
    1da0:	05 83       	std	Z+5, r16	; 0x05
    1da2:	0f 91       	pop	r16
    1da4:	08 95       	ret

00001da6 <_ZN9IPAddressaSEm>:
    1da6:	fc 01       	movw	r30, r24
    1da8:	42 83       	std	Z+2, r20	; 0x02
    1daa:	53 83       	std	Z+3, r21	; 0x03
    1dac:	64 83       	std	Z+4, r22	; 0x04
    1dae:	75 83       	std	Z+5, r23	; 0x05
    1db0:	08 95       	ret

00001db2 <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
IPAddress::IPAddress()
{
    memset(_address, 0, sizeof(_address));
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
    1db2:	84 e6       	ldi	r24, 0x64	; 100
    1db4:	9c e0       	ldi	r25, 0x0C	; 12
    1db6:	90 93 3f 25 	sts	0x253F, r25
    1dba:	80 93 3e 25 	sts	0x253E, r24
{
    _address[0] = first_octet;
    1dbe:	10 92 40 25 	sts	0x2540, r1
    _address[1] = second_octet;
    1dc2:	10 92 41 25 	sts	0x2541, r1
    _address[2] = third_octet;
    1dc6:	10 92 42 25 	sts	0x2542, r1
    _address[3] = fourth_octet;
    1dca:	10 92 43 25 	sts	0x2543, r1
    1dce:	08 95       	ret

00001dd0 <main>:

#include <Arduino.h>

int main(void)
{
	init();
    1dd0:	93 d5       	rcall	.+2854   	; 0x28f8 <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1dd2:	0e 94 d8 ad 	call	0x15bb0	; 0x15bb0 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1dd6:	ca e0       	ldi	r28, 0x0A	; 10
    1dd8:	dc e0       	ldi	r29, 0x0C	; 12
#endif
	
	setup();
    
	for (;;) {
		loop();
    1dda:	0e 94 00 ae 	call	0x15c00	; 0x15c00 <loop>
		if (serialEventRun) serialEventRun();
    1dde:	20 97       	sbiw	r28, 0x00	; 0
    1de0:	e1 f3       	breq	.-8      	; 0x1dda <main+0xa>
    1de2:	18 dd       	rcall	.-1488   	; 0x1814 <_Z14serialEventRunv>
    1de4:	fa cf       	rjmp	.-12     	; 0x1dda <main+0xa>

00001de6 <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    1de6:	cf 92       	push	r12
    1de8:	df 92       	push	r13
    1dea:	ef 92       	push	r14
    1dec:	ff 92       	push	r15
    1dee:	0f 93       	push	r16
    1df0:	1f 93       	push	r17
    1df2:	cf 93       	push	r28
    1df4:	df 93       	push	r29
    1df6:	6c 01       	movw	r12, r24
    1df8:	7a 01       	movw	r14, r20
    1dfa:	eb 01       	movw	r28, r22
    1dfc:	e6 0e       	add	r14, r22
    1dfe:	f7 1e       	adc	r15, r23
    1e00:	00 e0       	ldi	r16, 0x00	; 0
    1e02:	10 e0       	ldi	r17, 0x00	; 0
    1e04:	ce 15       	cp	r28, r14
    1e06:	df 05       	cpc	r29, r15
    1e08:	61 f0       	breq	.+24     	; 0x1e22 <_ZN5Print5writeEPKhj+0x3c>
    1e0a:	69 91       	ld	r22, Y+
    1e0c:	d6 01       	movw	r26, r12
    1e0e:	ed 91       	ld	r30, X+
    1e10:	fc 91       	ld	r31, X
    1e12:	01 90       	ld	r0, Z+
    1e14:	f0 81       	ld	r31, Z
    1e16:	e0 2d       	mov	r30, r0
    1e18:	c6 01       	movw	r24, r12
    1e1a:	19 95       	eicall
    1e1c:	08 0f       	add	r16, r24
    1e1e:	19 1f       	adc	r17, r25
    1e20:	f1 cf       	rjmp	.-30     	; 0x1e04 <_ZN5Print5writeEPKhj+0x1e>
    1e22:	c8 01       	movw	r24, r16
    1e24:	df 91       	pop	r29
    1e26:	cf 91       	pop	r28
    1e28:	1f 91       	pop	r17
    1e2a:	0f 91       	pop	r16
    1e2c:	ff 90       	pop	r15
    1e2e:	ef 90       	pop	r14
    1e30:	df 90       	pop	r13
    1e32:	cf 90       	pop	r12
    1e34:	08 95       	ret

00001e36 <_ZN5Print5writeEPKc>:
    1e36:	61 15       	cp	r22, r1
    1e38:	71 05       	cpc	r23, r1
    1e3a:	81 f0       	breq	.+32     	; 0x1e5c <_ZN5Print5writeEPKc+0x26>
    1e3c:	db 01       	movw	r26, r22
    1e3e:	0d 90       	ld	r0, X+
    1e40:	00 20       	and	r0, r0
    1e42:	e9 f7       	brne	.-6      	; 0x1e3e <_ZN5Print5writeEPKc+0x8>
    1e44:	ad 01       	movw	r20, r26
    1e46:	41 50       	subi	r20, 0x01	; 1
    1e48:	51 09       	sbc	r21, r1
    1e4a:	46 1b       	sub	r20, r22
    1e4c:	57 0b       	sbc	r21, r23
    1e4e:	dc 01       	movw	r26, r24
    1e50:	ed 91       	ld	r30, X+
    1e52:	fc 91       	ld	r31, X
    1e54:	02 80       	ldd	r0, Z+2	; 0x02
    1e56:	f3 81       	ldd	r31, Z+3	; 0x03
    1e58:	e0 2d       	mov	r30, r0
    1e5a:	19 94       	eijmp
    1e5c:	80 e0       	ldi	r24, 0x00	; 0
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	08 95       	ret

00001e62 <_ZN5Print5printEPK19__FlashStringHelper>:
    1e62:	ef 92       	push	r14
    1e64:	ff 92       	push	r15
    1e66:	0f 93       	push	r16
    1e68:	1f 93       	push	r17
    1e6a:	cf 93       	push	r28
    1e6c:	df 93       	push	r29
    1e6e:	8c 01       	movw	r16, r24
    1e70:	fb 01       	movw	r30, r22
    1e72:	c0 e0       	ldi	r28, 0x00	; 0
    1e74:	d0 e0       	ldi	r29, 0x00	; 0
    1e76:	64 91       	lpm	r22, Z
    1e78:	7f 01       	movw	r14, r30
    1e7a:	8f ef       	ldi	r24, 0xFF	; 255
    1e7c:	e8 1a       	sub	r14, r24
    1e7e:	f8 0a       	sbc	r15, r24
    1e80:	66 23       	and	r22, r22
    1e82:	61 f0       	breq	.+24     	; 0x1e9c <_ZN5Print5printEPK19__FlashStringHelper+0x3a>
    1e84:	d8 01       	movw	r26, r16
    1e86:	ed 91       	ld	r30, X+
    1e88:	fc 91       	ld	r31, X
    1e8a:	01 90       	ld	r0, Z+
    1e8c:	f0 81       	ld	r31, Z
    1e8e:	e0 2d       	mov	r30, r0
    1e90:	c8 01       	movw	r24, r16
    1e92:	19 95       	eicall
    1e94:	c8 0f       	add	r28, r24
    1e96:	d9 1f       	adc	r29, r25
    1e98:	f7 01       	movw	r30, r14
    1e9a:	ed cf       	rjmp	.-38     	; 0x1e76 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    1e9c:	ce 01       	movw	r24, r28
    1e9e:	df 91       	pop	r29
    1ea0:	cf 91       	pop	r28
    1ea2:	1f 91       	pop	r17
    1ea4:	0f 91       	pop	r16
    1ea6:	ff 90       	pop	r15
    1ea8:	ef 90       	pop	r14
    1eaa:	08 95       	ret

00001eac <_ZN5Print5printERK6String>:
    1eac:	dc 01       	movw	r26, r24
    1eae:	ed 91       	ld	r30, X+
    1eb0:	fc 91       	ld	r31, X
    1eb2:	db 01       	movw	r26, r22
    1eb4:	14 96       	adiw	r26, 0x04	; 4
    1eb6:	4d 91       	ld	r20, X+
    1eb8:	5c 91       	ld	r21, X
    1eba:	15 97       	sbiw	r26, 0x05	; 5
    1ebc:	6d 91       	ld	r22, X+
    1ebe:	7c 91       	ld	r23, X
    1ec0:	02 80       	ldd	r0, Z+2	; 0x02
    1ec2:	f3 81       	ldd	r31, Z+3	; 0x03
    1ec4:	e0 2d       	mov	r30, r0
    1ec6:	19 94       	eijmp

00001ec8 <_ZN5Print5printEPKc>:
    1ec8:	b6 cf       	rjmp	.-148    	; 0x1e36 <_ZN5Print5writeEPKc>

00001eca <_ZN5Print5printEc>:
    1eca:	dc 01       	movw	r26, r24
    1ecc:	ed 91       	ld	r30, X+
    1ece:	fc 91       	ld	r31, X
    1ed0:	01 90       	ld	r0, Z+
    1ed2:	f0 81       	ld	r31, Z
    1ed4:	e0 2d       	mov	r30, r0
    1ed6:	19 94       	eijmp

00001ed8 <_ZN5Print7printlnEv>:
    1ed8:	0f 93       	push	r16
    1eda:	1f 93       	push	r17
    1edc:	cf 93       	push	r28
    1ede:	df 93       	push	r29
    1ee0:	ec 01       	movw	r28, r24
    1ee2:	6d e0       	ldi	r22, 0x0D	; 13
    1ee4:	f2 df       	rcall	.-28     	; 0x1eca <_ZN5Print5printEc>
    1ee6:	8c 01       	movw	r16, r24
    1ee8:	6a e0       	ldi	r22, 0x0A	; 10
    1eea:	ce 01       	movw	r24, r28
    1eec:	ee df       	rcall	.-36     	; 0x1eca <_ZN5Print5printEc>
    1eee:	80 0f       	add	r24, r16
    1ef0:	91 1f       	adc	r25, r17
    1ef2:	df 91       	pop	r29
    1ef4:	cf 91       	pop	r28
    1ef6:	1f 91       	pop	r17
    1ef8:	0f 91       	pop	r16
    1efa:	08 95       	ret

00001efc <_ZN5Print7printlnEPK19__FlashStringHelper>:
    1efc:	0f 93       	push	r16
    1efe:	1f 93       	push	r17
    1f00:	cf 93       	push	r28
    1f02:	df 93       	push	r29
    1f04:	ec 01       	movw	r28, r24
    1f06:	ad df       	rcall	.-166    	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
    1f08:	8c 01       	movw	r16, r24
    1f0a:	ce 01       	movw	r24, r28
    1f0c:	e5 df       	rcall	.-54     	; 0x1ed8 <_ZN5Print7printlnEv>
    1f0e:	80 0f       	add	r24, r16
    1f10:	91 1f       	adc	r25, r17
    1f12:	df 91       	pop	r29
    1f14:	cf 91       	pop	r28
    1f16:	1f 91       	pop	r17
    1f18:	0f 91       	pop	r16
    1f1a:	08 95       	ret

00001f1c <_ZN5Print7printlnERK6String>:
    1f1c:	0f 93       	push	r16
    1f1e:	1f 93       	push	r17
    1f20:	cf 93       	push	r28
    1f22:	df 93       	push	r29
    1f24:	ec 01       	movw	r28, r24
    1f26:	c2 df       	rcall	.-124    	; 0x1eac <_ZN5Print5printERK6String>
    1f28:	8c 01       	movw	r16, r24
    1f2a:	ce 01       	movw	r24, r28
    1f2c:	d5 df       	rcall	.-86     	; 0x1ed8 <_ZN5Print7printlnEv>
    1f2e:	80 0f       	add	r24, r16
    1f30:	91 1f       	adc	r25, r17
    1f32:	df 91       	pop	r29
    1f34:	cf 91       	pop	r28
    1f36:	1f 91       	pop	r17
    1f38:	0f 91       	pop	r16
    1f3a:	08 95       	ret

00001f3c <_ZN5Print7printlnEPKc>:
    1f3c:	0f 93       	push	r16
    1f3e:	1f 93       	push	r17
    1f40:	cf 93       	push	r28
    1f42:	df 93       	push	r29
    1f44:	ec 01       	movw	r28, r24
    1f46:	77 df       	rcall	.-274    	; 0x1e36 <_ZN5Print5writeEPKc>
    1f48:	8c 01       	movw	r16, r24
    1f4a:	ce 01       	movw	r24, r28
    1f4c:	c5 df       	rcall	.-118    	; 0x1ed8 <_ZN5Print7printlnEv>
    1f4e:	80 0f       	add	r24, r16
    1f50:	91 1f       	adc	r25, r17
    1f52:	df 91       	pop	r29
    1f54:	cf 91       	pop	r28
    1f56:	1f 91       	pop	r17
    1f58:	0f 91       	pop	r16
    1f5a:	08 95       	ret

00001f5c <_ZN5Print11printNumberEmh>:
    1f5c:	8f 92       	push	r8
    1f5e:	9f 92       	push	r9
    1f60:	af 92       	push	r10
    1f62:	bf 92       	push	r11
    1f64:	cf 92       	push	r12
    1f66:	df 92       	push	r13
    1f68:	ef 92       	push	r14
    1f6a:	ff 92       	push	r15
    1f6c:	0f 93       	push	r16
    1f6e:	1f 93       	push	r17
    1f70:	cf 93       	push	r28
    1f72:	df 93       	push	r29
    1f74:	cd b7       	in	r28, 0x3d	; 61
    1f76:	de b7       	in	r29, 0x3e	; 62
    1f78:	a1 97       	sbiw	r28, 0x21	; 33
    1f7a:	0f b6       	in	r0, 0x3f	; 63
    1f7c:	f8 94       	cli
    1f7e:	de bf       	out	0x3e, r29	; 62
    1f80:	0f be       	out	0x3f, r0	; 63
    1f82:	cd bf       	out	0x3d, r28	; 61
    1f84:	7c 01       	movw	r14, r24
    1f86:	c4 2e       	mov	r12, r20
    1f88:	e5 2f       	mov	r30, r21
    1f8a:	cb 01       	movw	r24, r22
    1f8c:	d2 2e       	mov	r13, r18
    1f8e:	19 a2       	std	Y+33, r1	; 0x21
    1f90:	21 e0       	ldi	r18, 0x01	; 1
    1f92:	2d 15       	cp	r18, r13
    1f94:	10 f0       	brcs	.+4      	; 0x1f9a <_ZN5Print11printNumberEmh+0x3e>
    1f96:	2a e0       	ldi	r18, 0x0A	; 10
    1f98:	d2 2e       	mov	r13, r18
    1f9a:	8e 01       	movw	r16, r28
    1f9c:	0f 5d       	subi	r16, 0xDF	; 223
    1f9e:	1f 4f       	sbci	r17, 0xFF	; 255
    1fa0:	8d 2c       	mov	r8, r13
    1fa2:	91 2c       	mov	r9, r1
    1fa4:	a1 2c       	mov	r10, r1
    1fa6:	b1 2c       	mov	r11, r1
    1fa8:	6c 2d       	mov	r22, r12
    1faa:	7e 2f       	mov	r23, r30
    1fac:	a5 01       	movw	r20, r10
    1fae:	94 01       	movw	r18, r8
    1fb0:	0e 94 48 b2 	call	0x16490	; 0x16490 <__udivmodsi4>
    1fb4:	8c 2d       	mov	r24, r12
    1fb6:	d2 9e       	mul	r13, r18
    1fb8:	80 19       	sub	r24, r0
    1fba:	11 24       	eor	r1, r1
    1fbc:	01 50       	subi	r16, 0x01	; 1
    1fbe:	11 09       	sbc	r17, r1
    1fc0:	8a 30       	cpi	r24, 0x0A	; 10
    1fc2:	10 f4       	brcc	.+4      	; 0x1fc8 <_ZN5Print11printNumberEmh+0x6c>
    1fc4:	80 5d       	subi	r24, 0xD0	; 208
    1fc6:	01 c0       	rjmp	.+2      	; 0x1fca <_ZN5Print11printNumberEmh+0x6e>
    1fc8:	89 5c       	subi	r24, 0xC9	; 201
    1fca:	f8 01       	movw	r30, r16
    1fcc:	80 83       	st	Z, r24
    1fce:	21 15       	cp	r18, r1
    1fd0:	31 05       	cpc	r19, r1
    1fd2:	41 05       	cpc	r20, r1
    1fd4:	51 05       	cpc	r21, r1
    1fd6:	21 f0       	breq	.+8      	; 0x1fe0 <_ZN5Print11printNumberEmh+0x84>
    1fd8:	c2 2e       	mov	r12, r18
    1fda:	e3 2f       	mov	r30, r19
    1fdc:	ca 01       	movw	r24, r20
    1fde:	e4 cf       	rjmp	.-56     	; 0x1fa8 <_ZN5Print11printNumberEmh+0x4c>
    1fe0:	b8 01       	movw	r22, r16
    1fe2:	c7 01       	movw	r24, r14
    1fe4:	28 df       	rcall	.-432    	; 0x1e36 <_ZN5Print5writeEPKc>
    1fe6:	a1 96       	adiw	r28, 0x21	; 33
    1fe8:	0f b6       	in	r0, 0x3f	; 63
    1fea:	f8 94       	cli
    1fec:	de bf       	out	0x3e, r29	; 62
    1fee:	0f be       	out	0x3f, r0	; 63
    1ff0:	cd bf       	out	0x3d, r28	; 61
    1ff2:	df 91       	pop	r29
    1ff4:	cf 91       	pop	r28
    1ff6:	1f 91       	pop	r17
    1ff8:	0f 91       	pop	r16
    1ffa:	ff 90       	pop	r15
    1ffc:	ef 90       	pop	r14
    1ffe:	df 90       	pop	r13
    2000:	cf 90       	pop	r12
    2002:	bf 90       	pop	r11
    2004:	af 90       	pop	r10
    2006:	9f 90       	pop	r9
    2008:	8f 90       	pop	r8
    200a:	08 95       	ret

0000200c <_ZN5Print5printEli>:
    200c:	cf 92       	push	r12
    200e:	df 92       	push	r13
    2010:	ef 92       	push	r14
    2012:	ff 92       	push	r15
    2014:	0f 93       	push	r16
    2016:	1f 93       	push	r17
    2018:	cf 93       	push	r28
    201a:	df 93       	push	r29
    201c:	ec 01       	movw	r28, r24
    201e:	6a 01       	movw	r12, r20
    2020:	7b 01       	movw	r14, r22
    2022:	21 15       	cp	r18, r1
    2024:	31 05       	cpc	r19, r1
    2026:	79 f4       	brne	.+30     	; 0x2046 <_ZN5Print5printEli+0x3a>
    2028:	e8 81       	ld	r30, Y
    202a:	f9 81       	ldd	r31, Y+1	; 0x01
    202c:	01 90       	ld	r0, Z+
    202e:	f0 81       	ld	r31, Z
    2030:	e0 2d       	mov	r30, r0
    2032:	64 2f       	mov	r22, r20
    2034:	df 91       	pop	r29
    2036:	cf 91       	pop	r28
    2038:	1f 91       	pop	r17
    203a:	0f 91       	pop	r16
    203c:	ff 90       	pop	r15
    203e:	ef 90       	pop	r14
    2040:	df 90       	pop	r13
    2042:	cf 90       	pop	r12
    2044:	19 94       	eijmp
    2046:	2a 30       	cpi	r18, 0x0A	; 10
    2048:	31 05       	cpc	r19, r1
    204a:	d9 f4       	brne	.+54     	; 0x2082 <_ZN5Print5printEli+0x76>
    204c:	77 ff       	sbrs	r23, 7
    204e:	18 c0       	rjmp	.+48     	; 0x2080 <_ZN5Print5printEli+0x74>
    2050:	6d e2       	ldi	r22, 0x2D	; 45
    2052:	3b df       	rcall	.-394    	; 0x1eca <_ZN5Print5printEc>
    2054:	8c 01       	movw	r16, r24
    2056:	44 27       	eor	r20, r20
    2058:	55 27       	eor	r21, r21
    205a:	ba 01       	movw	r22, r20
    205c:	4c 19       	sub	r20, r12
    205e:	5d 09       	sbc	r21, r13
    2060:	6e 09       	sbc	r22, r14
    2062:	7f 09       	sbc	r23, r15
    2064:	2a e0       	ldi	r18, 0x0A	; 10
    2066:	ce 01       	movw	r24, r28
    2068:	79 df       	rcall	.-270    	; 0x1f5c <_ZN5Print11printNumberEmh>
    206a:	80 0f       	add	r24, r16
    206c:	91 1f       	adc	r25, r17
    206e:	df 91       	pop	r29
    2070:	cf 91       	pop	r28
    2072:	1f 91       	pop	r17
    2074:	0f 91       	pop	r16
    2076:	ff 90       	pop	r15
    2078:	ef 90       	pop	r14
    207a:	df 90       	pop	r13
    207c:	cf 90       	pop	r12
    207e:	08 95       	ret
    2080:	2a e0       	ldi	r18, 0x0A	; 10
    2082:	b7 01       	movw	r22, r14
    2084:	a6 01       	movw	r20, r12
    2086:	ce 01       	movw	r24, r28
    2088:	df 91       	pop	r29
    208a:	cf 91       	pop	r28
    208c:	1f 91       	pop	r17
    208e:	0f 91       	pop	r16
    2090:	ff 90       	pop	r15
    2092:	ef 90       	pop	r14
    2094:	df 90       	pop	r13
    2096:	cf 90       	pop	r12
    2098:	61 cf       	rjmp	.-318    	; 0x1f5c <_ZN5Print11printNumberEmh>

0000209a <_ZN5Print5printEii>:
    209a:	9a 01       	movw	r18, r20
    209c:	ab 01       	movw	r20, r22
    209e:	66 27       	eor	r22, r22
    20a0:	57 fd       	sbrc	r21, 7
    20a2:	60 95       	com	r22
    20a4:	76 2f       	mov	r23, r22
    20a6:	b2 cf       	rjmp	.-156    	; 0x200c <_ZN5Print5printEli>

000020a8 <_ZN5Print7printlnEii>:
    20a8:	0f 93       	push	r16
    20aa:	1f 93       	push	r17
    20ac:	cf 93       	push	r28
    20ae:	df 93       	push	r29
    20b0:	ec 01       	movw	r28, r24
    20b2:	9a 01       	movw	r18, r20
    20b4:	ab 01       	movw	r20, r22
    20b6:	66 27       	eor	r22, r22
    20b8:	57 fd       	sbrc	r21, 7
    20ba:	60 95       	com	r22
    20bc:	76 2f       	mov	r23, r22
    20be:	a6 df       	rcall	.-180    	; 0x200c <_ZN5Print5printEli>
    20c0:	8c 01       	movw	r16, r24
    20c2:	ce 01       	movw	r24, r28
    20c4:	09 df       	rcall	.-494    	; 0x1ed8 <_ZN5Print7printlnEv>
    20c6:	80 0f       	add	r24, r16
    20c8:	91 1f       	adc	r25, r17
    20ca:	df 91       	pop	r29
    20cc:	cf 91       	pop	r28
    20ce:	1f 91       	pop	r17
    20d0:	0f 91       	pop	r16
    20d2:	08 95       	ret

000020d4 <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    20d4:	21 15       	cp	r18, r1
    20d6:	31 05       	cpc	r19, r1
    20d8:	41 f4       	brne	.+16     	; 0x20ea <_ZN5Print5printEmi+0x16>
    20da:	dc 01       	movw	r26, r24
    20dc:	ed 91       	ld	r30, X+
    20de:	fc 91       	ld	r31, X
    20e0:	01 90       	ld	r0, Z+
    20e2:	f0 81       	ld	r31, Z
    20e4:	e0 2d       	mov	r30, r0
    20e6:	64 2f       	mov	r22, r20
    20e8:	19 94       	eijmp
  else return printNumber(n, base);
    20ea:	38 cf       	rjmp	.-400    	; 0x1f5c <_ZN5Print11printNumberEmh>

000020ec <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
    20ec:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
    20ee:	46 2f       	mov	r20, r22
    20f0:	50 e0       	ldi	r21, 0x00	; 0
    20f2:	60 e0       	ldi	r22, 0x00	; 0
    20f4:	70 e0       	ldi	r23, 0x00	; 0
    20f6:	ee cf       	rjmp	.-36     	; 0x20d4 <_ZN5Print5printEmi>

000020f8 <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
    20f8:	0f 93       	push	r16
    20fa:	1f 93       	push	r17
    20fc:	cf 93       	push	r28
    20fe:	df 93       	push	r29
    2100:	ec 01       	movw	r28, r24
    2102:	9a 01       	movw	r18, r20
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
    2104:	46 2f       	mov	r20, r22
    2106:	50 e0       	ldi	r21, 0x00	; 0
    2108:	60 e0       	ldi	r22, 0x00	; 0
    210a:	70 e0       	ldi	r23, 0x00	; 0
    210c:	e3 df       	rcall	.-58     	; 0x20d4 <_ZN5Print5printEmi>
    210e:	8c 01       	movw	r16, r24
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
    2110:	ce 01       	movw	r24, r28
    2112:	e2 de       	rcall	.-572    	; 0x1ed8 <_ZN5Print7printlnEv>
  return n;
}
    2114:	80 0f       	add	r24, r16
    2116:	91 1f       	adc	r25, r17
    2118:	df 91       	pop	r29
    211a:	cf 91       	pop	r28
    211c:	1f 91       	pop	r17
    211e:	0f 91       	pop	r16
    2120:	08 95       	ret

00002122 <_ZN5Print5printEji>:
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
    2122:	9a 01       	movw	r18, r20
  return print((unsigned long) n, base);
    2124:	ab 01       	movw	r20, r22
    2126:	60 e0       	ldi	r22, 0x00	; 0
    2128:	70 e0       	ldi	r23, 0x00	; 0
    212a:	d4 cf       	rjmp	.-88     	; 0x20d4 <_ZN5Print5printEmi>

0000212c <_ZN5Print7printlnEji>:
  n += println();
  return n;
}

size_t Print::println(unsigned int num, int base)
{
    212c:	0f 93       	push	r16
    212e:	1f 93       	push	r17
    2130:	cf 93       	push	r28
    2132:	df 93       	push	r29
    2134:	ec 01       	movw	r28, r24
    2136:	9a 01       	movw	r18, r20
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
    2138:	ab 01       	movw	r20, r22
    213a:	60 e0       	ldi	r22, 0x00	; 0
    213c:	70 e0       	ldi	r23, 0x00	; 0
    213e:	ca df       	rcall	.-108    	; 0x20d4 <_ZN5Print5printEmi>
    2140:	8c 01       	movw	r16, r24
}

size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
    2142:	ce 01       	movw	r24, r28
    2144:	c9 de       	rcall	.-622    	; 0x1ed8 <_ZN5Print7printlnEv>
  return n;
}
    2146:	80 0f       	add	r24, r16
    2148:	91 1f       	adc	r25, r17
    214a:	df 91       	pop	r29
    214c:	cf 91       	pop	r28
    214e:	1f 91       	pop	r17
    2150:	0f 91       	pop	r16
    2152:	08 95       	ret

00002154 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    2154:	0f 93       	push	r16
    2156:	1f 93       	push	r17
    2158:	cf 93       	push	r28
    215a:	df 93       	push	r29
    215c:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    215e:	ba df       	rcall	.-140    	; 0x20d4 <_ZN5Print5printEmi>
    2160:	8c 01       	movw	r16, r24
  n += println();
    2162:	ce 01       	movw	r24, r28
    2164:	b9 de       	rcall	.-654    	; 0x1ed8 <_ZN5Print7printlnEv>
  return n;
}
    2166:	80 0f       	add	r24, r16
    2168:	91 1f       	adc	r25, r17
    216a:	df 91       	pop	r29
    216c:	cf 91       	pop	r28
    216e:	1f 91       	pop	r17
    2170:	0f 91       	pop	r16
    2172:	08 95       	ret

00002174 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    2174:	4f 92       	push	r4
    2176:	5f 92       	push	r5
    2178:	6f 92       	push	r6
    217a:	7f 92       	push	r7
    217c:	8f 92       	push	r8
    217e:	9f 92       	push	r9
    2180:	af 92       	push	r10
    2182:	bf 92       	push	r11
    2184:	cf 92       	push	r12
    2186:	df 92       	push	r13
    2188:	ef 92       	push	r14
    218a:	ff 92       	push	r15
    218c:	0f 93       	push	r16
    218e:	1f 93       	push	r17
    2190:	cf 93       	push	r28
    2192:	df 93       	push	r29
    2194:	ec 01       	movw	r28, r24
    2196:	6a 01       	movw	r12, r20
    2198:	7b 01       	movw	r14, r22
    219a:	b2 2e       	mov	r11, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    219c:	9a 01       	movw	r18, r20
    219e:	ab 01       	movw	r20, r22
    21a0:	c7 01       	movw	r24, r14
    21a2:	b6 01       	movw	r22, r12
    21a4:	0e 94 2a b0 	call	0x16054	; 0x16054 <__unordsf2>
    21a8:	88 23       	and	r24, r24
    21aa:	19 f0       	breq	.+6      	; 0x21b2 <_ZN5Print10printFloatEdh+0x3e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    21ac:	66 e6       	ldi	r22, 0x66	; 102
    21ae:	7c e0       	ldi	r23, 0x0C	; 12
    21b0:	27 c0       	rjmp	.+78     	; 0x2200 <_ZN5Print10printFloatEdh+0x8c>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    21b2:	26 01       	movw	r4, r12
    21b4:	37 01       	movw	r6, r14
    21b6:	e8 94       	clt
    21b8:	77 f8       	bld	r7, 7
    21ba:	2f ef       	ldi	r18, 0xFF	; 255
    21bc:	3f ef       	ldi	r19, 0xFF	; 255
    21be:	4f e7       	ldi	r20, 0x7F	; 127
    21c0:	5f e7       	ldi	r21, 0x7F	; 127
    21c2:	c3 01       	movw	r24, r6
    21c4:	b2 01       	movw	r22, r4
    21c6:	0e 94 2a b0 	call	0x16054	; 0x16054 <__unordsf2>
    21ca:	81 11       	cpse	r24, r1
    21cc:	0d c0       	rjmp	.+26     	; 0x21e8 <_ZN5Print10printFloatEdh+0x74>
    21ce:	2f ef       	ldi	r18, 0xFF	; 255
    21d0:	3f ef       	ldi	r19, 0xFF	; 255
    21d2:	4f e7       	ldi	r20, 0x7F	; 127
    21d4:	5f e7       	ldi	r21, 0x7F	; 127
    21d6:	c3 01       	movw	r24, r6
    21d8:	b2 01       	movw	r22, r4
    21da:	0e 94 74 ae 	call	0x15ce8	; 0x15ce8 <__cmpsf2>
    21de:	18 16       	cp	r1, r24
    21e0:	1c f4       	brge	.+6      	; 0x21e8 <_ZN5Print10printFloatEdh+0x74>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    21e2:	6a e6       	ldi	r22, 0x6A	; 106
    21e4:	7c e0       	ldi	r23, 0x0C	; 12
    21e6:	0c c0       	rjmp	.+24     	; 0x2200 <_ZN5Print10printFloatEdh+0x8c>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    21e8:	2f ef       	ldi	r18, 0xFF	; 255
    21ea:	3f ef       	ldi	r19, 0xFF	; 255
    21ec:	4f e7       	ldi	r20, 0x7F	; 127
    21ee:	5f e4       	ldi	r21, 0x4F	; 79
    21f0:	c7 01       	movw	r24, r14
    21f2:	b6 01       	movw	r22, r12
    21f4:	0e 94 c3 af 	call	0x15f86	; 0x15f86 <__gesf2>
    21f8:	18 16       	cp	r1, r24
    21fa:	a4 f4       	brge	.+40     	; 0x2224 <_ZN5Print10printFloatEdh+0xb0>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    21fc:	6e e6       	ldi	r22, 0x6E	; 110
    21fe:	7c e0       	ldi	r23, 0x0C	; 12
    2200:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    2202:	df 91       	pop	r29
    2204:	cf 91       	pop	r28
    2206:	1f 91       	pop	r17
    2208:	0f 91       	pop	r16
    220a:	ff 90       	pop	r15
    220c:	ef 90       	pop	r14
    220e:	df 90       	pop	r13
    2210:	cf 90       	pop	r12
    2212:	bf 90       	pop	r11
    2214:	af 90       	pop	r10
    2216:	9f 90       	pop	r9
    2218:	8f 90       	pop	r8
    221a:	7f 90       	pop	r7
    221c:	6f 90       	pop	r6
    221e:	5f 90       	pop	r5
    2220:	4f 90       	pop	r4
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    2222:	09 ce       	rjmp	.-1006   	; 0x1e36 <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    2224:	2f ef       	ldi	r18, 0xFF	; 255
    2226:	3f ef       	ldi	r19, 0xFF	; 255
    2228:	4f e7       	ldi	r20, 0x7F	; 127
    222a:	5f ec       	ldi	r21, 0xCF	; 207
    222c:	c7 01       	movw	r24, r14
    222e:	b6 01       	movw	r22, r12
    2230:	0e 94 74 ae 	call	0x15ce8	; 0x15ce8 <__cmpsf2>
    2234:	87 fd       	sbrc	r24, 7
    2236:	e2 cf       	rjmp	.-60     	; 0x21fc <_ZN5Print10printFloatEdh+0x88>
  
  // Handle negative numbers
  if (number < 0.0)
    2238:	20 e0       	ldi	r18, 0x00	; 0
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	a9 01       	movw	r20, r18
    223e:	c7 01       	movw	r24, r14
    2240:	b6 01       	movw	r22, r12
    2242:	0e 94 74 ae 	call	0x15ce8	; 0x15ce8 <__cmpsf2>
    2246:	87 ff       	sbrs	r24, 7
    2248:	09 c0       	rjmp	.+18     	; 0x225c <_ZN5Print10printFloatEdh+0xe8>
  {
     n += print('-');
    224a:	6d e2       	ldi	r22, 0x2D	; 45
    224c:	ce 01       	movw	r24, r28
    224e:	3d de       	rcall	.-902    	; 0x1eca <_ZN5Print5printEc>
    2250:	8c 01       	movw	r16, r24
     number = -number;
    2252:	f7 fa       	bst	r15, 7
    2254:	f0 94       	com	r15
    2256:	f7 f8       	bld	r15, 7
    2258:	f0 94       	com	r15
    225a:	02 c0       	rjmp	.+4      	; 0x2260 <_ZN5Print10printFloatEdh+0xec>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    225c:	00 e0       	ldi	r16, 0x00	; 0
    225e:	10 e0       	ldi	r17, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    2260:	a1 2c       	mov	r10, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    2262:	60 e0       	ldi	r22, 0x00	; 0
    2264:	70 e0       	ldi	r23, 0x00	; 0
    2266:	80 e0       	ldi	r24, 0x00	; 0
    2268:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    226a:	ab 14       	cp	r10, r11
    226c:	41 f0       	breq	.+16     	; 0x227e <_ZN5Print10printFloatEdh+0x10a>
    rounding /= 10.0;
    226e:	20 e0       	ldi	r18, 0x00	; 0
    2270:	30 e0       	ldi	r19, 0x00	; 0
    2272:	40 e2       	ldi	r20, 0x20	; 32
    2274:	51 e4       	ldi	r21, 0x41	; 65
    2276:	0e 94 78 ae 	call	0x15cf0	; 0x15cf0 <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    227a:	a3 94       	inc	r10
    227c:	f6 cf       	rjmp	.-20     	; 0x226a <_ZN5Print10printFloatEdh+0xf6>
    rounding /= 10.0;
  
  number += rounding;
    227e:	9b 01       	movw	r18, r22
    2280:	ac 01       	movw	r20, r24
    2282:	c7 01       	movw	r24, r14
    2284:	b6 01       	movw	r22, r12
    2286:	0e 94 10 ae 	call	0x15c20	; 0x15c20 <__addsf3>
    228a:	6b 01       	movw	r12, r22
    228c:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    228e:	0e 94 e5 ae 	call	0x15dca	; 0x15dca <__fixunssfsi>
    2292:	2b 01       	movw	r4, r22
    2294:	3c 01       	movw	r6, r24
  double remainder = number - (double)int_part;
    2296:	0e 94 11 af 	call	0x15e22	; 0x15e22 <__floatunsisf>
    229a:	9b 01       	movw	r18, r22
    229c:	ac 01       	movw	r20, r24
    229e:	c7 01       	movw	r24, r14
    22a0:	b6 01       	movw	r22, r12
    22a2:	0e 94 0f ae 	call	0x15c1e	; 0x15c1e <__subsf3>
    22a6:	6b 01       	movw	r12, r22
    22a8:	7c 01       	movw	r14, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    22aa:	2a e0       	ldi	r18, 0x0A	; 10
    22ac:	b3 01       	movw	r22, r6
    22ae:	a2 01       	movw	r20, r4
    22b0:	ce 01       	movw	r24, r28
    22b2:	54 de       	rcall	.-856    	; 0x1f5c <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    22b4:	08 0f       	add	r16, r24
    22b6:	19 1f       	adc	r17, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    22b8:	bb 20       	and	r11, r11
    22ba:	31 f0       	breq	.+12     	; 0x22c8 <_ZN5Print10printFloatEdh+0x154>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    22bc:	62 e7       	ldi	r22, 0x72	; 114
    22be:	7c e0       	ldi	r23, 0x0C	; 12
    22c0:	ce 01       	movw	r24, r28
    22c2:	b9 dd       	rcall	.-1166   	; 0x1e36 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print("."); 
    22c4:	08 0f       	add	r16, r24
    22c6:	19 1f       	adc	r17, r25
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    22c8:	7b 2c       	mov	r7, r11
  if (digits > 0) {
    n += print("."); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    22ca:	77 20       	and	r7, r7
    22cc:	39 f1       	breq	.+78     	; 0x231c <_ZN5Print10printFloatEdh+0x1a8>
  {
    remainder *= 10.0;
    22ce:	20 e0       	ldi	r18, 0x00	; 0
    22d0:	30 e0       	ldi	r19, 0x00	; 0
    22d2:	40 e2       	ldi	r20, 0x20	; 32
    22d4:	51 e4       	ldi	r21, 0x41	; 65
    22d6:	c7 01       	movw	r24, r14
    22d8:	b6 01       	movw	r22, r12
    22da:	0e 94 c7 af 	call	0x15f8e	; 0x15f8e <__mulsf3>
    22de:	6b 01       	movw	r12, r22
    22e0:	7c 01       	movw	r14, r24
    int toPrint = int(remainder);
    22e2:	0e 94 e0 ae 	call	0x15dc0	; 0x15dc0 <__fixsfsi>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    22e6:	4b 01       	movw	r8, r22
    22e8:	aa 24       	eor	r10, r10
    22ea:	97 fc       	sbrc	r9, 7
    22ec:	a0 94       	com	r10
    22ee:	ba 2c       	mov	r11, r10
    22f0:	2a e0       	ldi	r18, 0x0A	; 10
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	b5 01       	movw	r22, r10
    22f6:	a4 01       	movw	r20, r8
    22f8:	ce 01       	movw	r24, r28
    22fa:	88 de       	rcall	.-752    	; 0x200c <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    22fc:	08 0f       	add	r16, r24
    22fe:	19 1f       	adc	r17, r25
    remainder -= toPrint; 
    2300:	c5 01       	movw	r24, r10
    2302:	b4 01       	movw	r22, r8
    2304:	0e 94 13 af 	call	0x15e26	; 0x15e26 <__floatsisf>
    2308:	9b 01       	movw	r18, r22
    230a:	ac 01       	movw	r20, r24
    230c:	c7 01       	movw	r24, r14
    230e:	b6 01       	movw	r22, r12
    2310:	0e 94 0f ae 	call	0x15c1e	; 0x15c1e <__subsf3>
    2314:	6b 01       	movw	r12, r22
    2316:	7c 01       	movw	r14, r24
    2318:	7a 94       	dec	r7
    231a:	d7 cf       	rjmp	.-82     	; 0x22ca <_ZN5Print10printFloatEdh+0x156>
  } 
  
  return n;
}
    231c:	c8 01       	movw	r24, r16
    231e:	df 91       	pop	r29
    2320:	cf 91       	pop	r28
    2322:	1f 91       	pop	r17
    2324:	0f 91       	pop	r16
    2326:	ff 90       	pop	r15
    2328:	ef 90       	pop	r14
    232a:	df 90       	pop	r13
    232c:	cf 90       	pop	r12
    232e:	bf 90       	pop	r11
    2330:	af 90       	pop	r10
    2332:	9f 90       	pop	r9
    2334:	8f 90       	pop	r8
    2336:	7f 90       	pop	r7
    2338:	6f 90       	pop	r6
    233a:	5f 90       	pop	r5
    233c:	4f 90       	pop	r4
    233e:	08 95       	ret

00002340 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    2340:	19 cf       	rjmp	.-462    	; 0x2174 <_ZN5Print10printFloatEdh>

00002342 <_Z12disableTimerh>:
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
    2342:	82 30       	cpi	r24, 0x02	; 2
    2344:	a9 f0       	breq	.+42     	; 0x2370 <_Z12disableTimerh+0x2e>
    2346:	28 f4       	brcc	.+10     	; 0x2352 <_Z12disableTimerh+0x10>
    2348:	88 23       	and	r24, r24
    234a:	49 f0       	breq	.+18     	; 0x235e <_Z12disableTimerh+0x1c>
    234c:	81 30       	cpi	r24, 0x01	; 1
    234e:	51 f0       	breq	.+20     	; 0x2364 <_Z12disableTimerh+0x22>
    2350:	08 95       	ret
    2352:	84 30       	cpi	r24, 0x04	; 4
    2354:	09 f1       	breq	.+66     	; 0x2398 <_Z12disableTimerh+0x56>
    2356:	e8 f0       	brcs	.+58     	; 0x2392 <_Z12disableTimerh+0x50>
    2358:	85 30       	cpi	r24, 0x05	; 5
    235a:	09 f1       	breq	.+66     	; 0x239e <_Z12disableTimerh+0x5c>
    235c:	08 95       	ret
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
    235e:	10 92 6e 00 	sts	0x006E, r1
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
      #endif
      break;
    2362:	08 95       	ret

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
    2364:	80 91 6f 00 	lds	r24, 0x006F
    2368:	8d 7f       	andi	r24, 0xFD	; 253
    236a:	80 93 6f 00 	sts	0x006F, r24
      break;
    236e:	08 95       	ret
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
    2370:	80 91 70 00 	lds	r24, 0x0070
    2374:	8d 7f       	andi	r24, 0xFD	; 253
    2376:	80 93 70 00 	sts	0x0070, r24
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
    237a:	81 e0       	ldi	r24, 0x01	; 1
    237c:	80 93 b0 00 	sts	0x00B0, r24
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
    2380:	80 91 b1 00 	lds	r24, 0x00B1
    2384:	88 7f       	andi	r24, 0xF8	; 248
    2386:	84 60       	ori	r24, 0x04	; 4
    2388:	80 93 b1 00 	sts	0x00B1, r24
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
    238c:	10 92 b3 00 	sts	0x00B3, r1
      #endif
      break;
    2390:	08 95       	ret

#if defined(TIMSK3)
    case 3:
      TIMSK3 = 0;
    2392:	10 92 71 00 	sts	0x0071, r1
      break;
    2396:	08 95       	ret
#endif

#if defined(TIMSK4)
    case 4:
      TIMSK4 = 0;
    2398:	10 92 72 00 	sts	0x0072, r1
      break;
    239c:	08 95       	ret
#endif

#if defined(TIMSK5)
    case 5:
      TIMSK5 = 0;
    239e:	10 92 73 00 	sts	0x0073, r1
    23a2:	08 95       	ret

000023a4 <_Z6noToneh>:
  }
}


void noTone(uint8_t _pin)
{
    23a4:	cf 93       	push	r28
    23a6:	c8 2f       	mov	r28, r24
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
    23a8:	80 91 08 02 	lds	r24, 0x0208
    23ac:	8c 13       	cpse	r24, r28
    23ae:	07 c0       	rjmp	.+14     	; 0x23be <_Z6noToneh+0x1a>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    23b0:	ec e3       	ldi	r30, 0x3C	; 60
    23b2:	f3 e0       	ldi	r31, 0x03	; 3
    23b4:	84 91       	lpm	r24, Z
      tone_pins[i] = 255;
    23b6:	9f ef       	ldi	r25, 0xFF	; 255
    23b8:	90 93 08 02 	sts	0x0208, r25
    23bc:	01 c0       	rjmp	.+2      	; 0x23c0 <_Z6noToneh+0x1c>
}


void noTone(uint8_t _pin)
{
  int8_t _timer = -1;
    23be:	8f ef       	ldi	r24, 0xFF	; 255
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
      tone_pins[i] = 255;
    }
  }
  
  disableTimer(_timer);
    23c0:	c0 df       	rcall	.-128    	; 0x2342 <_Z12disableTimerh>

  digitalWrite(_pin, 0);
    23c2:	60 e0       	ldi	r22, 0x00	; 0
    23c4:	8c 2f       	mov	r24, r28
}
    23c6:	cf 91       	pop	r28
    }
  }
  
  disableTimer(_timer);

  digitalWrite(_pin, 0);
    23c8:	7a c4       	rjmp	.+2292   	; 0x2cbe <digitalWrite>

000023ca <__vector_13>:
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
{
    23ca:	1f 92       	push	r1
    23cc:	0f 92       	push	r0
    23ce:	0f b6       	in	r0, 0x3f	; 63
    23d0:	0f 92       	push	r0
    23d2:	11 24       	eor	r1, r1
    23d4:	0b b6       	in	r0, 0x3b	; 59
    23d6:	0f 92       	push	r0
    23d8:	2f 93       	push	r18
    23da:	3f 93       	push	r19
    23dc:	4f 93       	push	r20
    23de:	5f 93       	push	r21
    23e0:	6f 93       	push	r22
    23e2:	7f 93       	push	r23
    23e4:	8f 93       	push	r24
    23e6:	9f 93       	push	r25
    23e8:	af 93       	push	r26
    23ea:	bf 93       	push	r27
    23ec:	ef 93       	push	r30
    23ee:	ff 93       	push	r31

  if (timer2_toggle_count != 0)
    23f0:	80 91 47 25 	lds	r24, 0x2547
    23f4:	90 91 48 25 	lds	r25, 0x2548
    23f8:	a0 91 49 25 	lds	r26, 0x2549
    23fc:	b0 91 4a 25 	lds	r27, 0x254A
    2400:	89 2b       	or	r24, r25
    2402:	8a 2b       	or	r24, r26
    2404:	8b 2b       	or	r24, r27
    2406:	51 f1       	breq	.+84     	; 0x245c <__vector_13+0x92>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
    2408:	90 91 44 25 	lds	r25, 0x2544
    240c:	e0 91 45 25 	lds	r30, 0x2545
    2410:	f0 91 46 25 	lds	r31, 0x2546
    2414:	80 81       	ld	r24, Z
    2416:	89 27       	eor	r24, r25
    2418:	80 83       	st	Z, r24

    if (timer2_toggle_count > 0)
    241a:	80 91 47 25 	lds	r24, 0x2547
    241e:	90 91 48 25 	lds	r25, 0x2548
    2422:	a0 91 49 25 	lds	r26, 0x2549
    2426:	b0 91 4a 25 	lds	r27, 0x254A
    242a:	18 16       	cp	r1, r24
    242c:	19 06       	cpc	r1, r25
    242e:	1a 06       	cpc	r1, r26
    2430:	1b 06       	cpc	r1, r27
    2432:	bc f4       	brge	.+46     	; 0x2462 <__vector_13+0x98>
      timer2_toggle_count--;
    2434:	80 91 47 25 	lds	r24, 0x2547
    2438:	90 91 48 25 	lds	r25, 0x2548
    243c:	a0 91 49 25 	lds	r26, 0x2549
    2440:	b0 91 4a 25 	lds	r27, 0x254A
    2444:	01 97       	sbiw	r24, 0x01	; 1
    2446:	a1 09       	sbc	r26, r1
    2448:	b1 09       	sbc	r27, r1
    244a:	80 93 47 25 	sts	0x2547, r24
    244e:	90 93 48 25 	sts	0x2548, r25
    2452:	a0 93 49 25 	sts	0x2549, r26
    2456:	b0 93 4a 25 	sts	0x254A, r27
    245a:	03 c0       	rjmp	.+6      	; 0x2462 <__vector_13+0x98>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
    245c:	80 91 08 02 	lds	r24, 0x0208
    2460:	a1 df       	rcall	.-190    	; 0x23a4 <_Z6noToneh>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
    2462:	ff 91       	pop	r31
    2464:	ef 91       	pop	r30
    2466:	bf 91       	pop	r27
    2468:	af 91       	pop	r26
    246a:	9f 91       	pop	r25
    246c:	8f 91       	pop	r24
    246e:	7f 91       	pop	r23
    2470:	6f 91       	pop	r22
    2472:	5f 91       	pop	r21
    2474:	4f 91       	pop	r20
    2476:	3f 91       	pop	r19
    2478:	2f 91       	pop	r18
    247a:	0f 90       	pop	r0
    247c:	0b be       	out	0x3b, r0	; 59
    247e:	0f 90       	pop	r0
    2480:	0f be       	out	0x3f, r0	; 63
    2482:	0f 90       	pop	r0
    2484:	1f 90       	pop	r1
    2486:	18 95       	reti

00002488 <__vector_1>:
		intFunc[EXTERNAL_INT_4]();
}

#elif defined(EICRA) && defined(EICRB)

ISR(INT0_vect) {
    2488:	1f 92       	push	r1
    248a:	0f 92       	push	r0
    248c:	0f b6       	in	r0, 0x3f	; 63
    248e:	0f 92       	push	r0
    2490:	11 24       	eor	r1, r1
    2492:	0b b6       	in	r0, 0x3b	; 59
    2494:	0f 92       	push	r0
    2496:	2f 93       	push	r18
    2498:	3f 93       	push	r19
    249a:	4f 93       	push	r20
    249c:	5f 93       	push	r21
    249e:	6f 93       	push	r22
    24a0:	7f 93       	push	r23
    24a2:	8f 93       	push	r24
    24a4:	9f 93       	push	r25
    24a6:	af 93       	push	r26
    24a8:	bf 93       	push	r27
    24aa:	ef 93       	push	r30
    24ac:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_2])
    24ae:	80 91 4f 25 	lds	r24, 0x254F
    24b2:	90 91 50 25 	lds	r25, 0x2550
    24b6:	89 2b       	or	r24, r25
    24b8:	29 f0       	breq	.+10     	; 0x24c4 <__vector_1+0x3c>
    intFunc[EXTERNAL_INT_2]();
    24ba:	e0 91 4f 25 	lds	r30, 0x254F
    24be:	f0 91 50 25 	lds	r31, 0x2550
    24c2:	19 95       	eicall
}
    24c4:	ff 91       	pop	r31
    24c6:	ef 91       	pop	r30
    24c8:	bf 91       	pop	r27
    24ca:	af 91       	pop	r26
    24cc:	9f 91       	pop	r25
    24ce:	8f 91       	pop	r24
    24d0:	7f 91       	pop	r23
    24d2:	6f 91       	pop	r22
    24d4:	5f 91       	pop	r21
    24d6:	4f 91       	pop	r20
    24d8:	3f 91       	pop	r19
    24da:	2f 91       	pop	r18
    24dc:	0f 90       	pop	r0
    24de:	0b be       	out	0x3b, r0	; 59
    24e0:	0f 90       	pop	r0
    24e2:	0f be       	out	0x3f, r0	; 63
    24e4:	0f 90       	pop	r0
    24e6:	1f 90       	pop	r1
    24e8:	18 95       	reti

000024ea <__vector_2>:

ISR(INT1_vect) {
    24ea:	1f 92       	push	r1
    24ec:	0f 92       	push	r0
    24ee:	0f b6       	in	r0, 0x3f	; 63
    24f0:	0f 92       	push	r0
    24f2:	11 24       	eor	r1, r1
    24f4:	0b b6       	in	r0, 0x3b	; 59
    24f6:	0f 92       	push	r0
    24f8:	2f 93       	push	r18
    24fa:	3f 93       	push	r19
    24fc:	4f 93       	push	r20
    24fe:	5f 93       	push	r21
    2500:	6f 93       	push	r22
    2502:	7f 93       	push	r23
    2504:	8f 93       	push	r24
    2506:	9f 93       	push	r25
    2508:	af 93       	push	r26
    250a:	bf 93       	push	r27
    250c:	ef 93       	push	r30
    250e:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_3])
    2510:	80 91 51 25 	lds	r24, 0x2551
    2514:	90 91 52 25 	lds	r25, 0x2552
    2518:	89 2b       	or	r24, r25
    251a:	29 f0       	breq	.+10     	; 0x2526 <__vector_2+0x3c>
    intFunc[EXTERNAL_INT_3]();
    251c:	e0 91 51 25 	lds	r30, 0x2551
    2520:	f0 91 52 25 	lds	r31, 0x2552
    2524:	19 95       	eicall
}
    2526:	ff 91       	pop	r31
    2528:	ef 91       	pop	r30
    252a:	bf 91       	pop	r27
    252c:	af 91       	pop	r26
    252e:	9f 91       	pop	r25
    2530:	8f 91       	pop	r24
    2532:	7f 91       	pop	r23
    2534:	6f 91       	pop	r22
    2536:	5f 91       	pop	r21
    2538:	4f 91       	pop	r20
    253a:	3f 91       	pop	r19
    253c:	2f 91       	pop	r18
    253e:	0f 90       	pop	r0
    2540:	0b be       	out	0x3b, r0	; 59
    2542:	0f 90       	pop	r0
    2544:	0f be       	out	0x3f, r0	; 63
    2546:	0f 90       	pop	r0
    2548:	1f 90       	pop	r1
    254a:	18 95       	reti

0000254c <__vector_3>:

ISR(INT2_vect) {
    254c:	1f 92       	push	r1
    254e:	0f 92       	push	r0
    2550:	0f b6       	in	r0, 0x3f	; 63
    2552:	0f 92       	push	r0
    2554:	11 24       	eor	r1, r1
    2556:	0b b6       	in	r0, 0x3b	; 59
    2558:	0f 92       	push	r0
    255a:	2f 93       	push	r18
    255c:	3f 93       	push	r19
    255e:	4f 93       	push	r20
    2560:	5f 93       	push	r21
    2562:	6f 93       	push	r22
    2564:	7f 93       	push	r23
    2566:	8f 93       	push	r24
    2568:	9f 93       	push	r25
    256a:	af 93       	push	r26
    256c:	bf 93       	push	r27
    256e:	ef 93       	push	r30
    2570:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_4])
    2572:	80 91 53 25 	lds	r24, 0x2553
    2576:	90 91 54 25 	lds	r25, 0x2554
    257a:	89 2b       	or	r24, r25
    257c:	29 f0       	breq	.+10     	; 0x2588 <__vector_3+0x3c>
    intFunc[EXTERNAL_INT_4]();
    257e:	e0 91 53 25 	lds	r30, 0x2553
    2582:	f0 91 54 25 	lds	r31, 0x2554
    2586:	19 95       	eicall
}
    2588:	ff 91       	pop	r31
    258a:	ef 91       	pop	r30
    258c:	bf 91       	pop	r27
    258e:	af 91       	pop	r26
    2590:	9f 91       	pop	r25
    2592:	8f 91       	pop	r24
    2594:	7f 91       	pop	r23
    2596:	6f 91       	pop	r22
    2598:	5f 91       	pop	r21
    259a:	4f 91       	pop	r20
    259c:	3f 91       	pop	r19
    259e:	2f 91       	pop	r18
    25a0:	0f 90       	pop	r0
    25a2:	0b be       	out	0x3b, r0	; 59
    25a4:	0f 90       	pop	r0
    25a6:	0f be       	out	0x3f, r0	; 63
    25a8:	0f 90       	pop	r0
    25aa:	1f 90       	pop	r1
    25ac:	18 95       	reti

000025ae <__vector_4>:

ISR(INT3_vect) {
    25ae:	1f 92       	push	r1
    25b0:	0f 92       	push	r0
    25b2:	0f b6       	in	r0, 0x3f	; 63
    25b4:	0f 92       	push	r0
    25b6:	11 24       	eor	r1, r1
    25b8:	0b b6       	in	r0, 0x3b	; 59
    25ba:	0f 92       	push	r0
    25bc:	2f 93       	push	r18
    25be:	3f 93       	push	r19
    25c0:	4f 93       	push	r20
    25c2:	5f 93       	push	r21
    25c4:	6f 93       	push	r22
    25c6:	7f 93       	push	r23
    25c8:	8f 93       	push	r24
    25ca:	9f 93       	push	r25
    25cc:	af 93       	push	r26
    25ce:	bf 93       	push	r27
    25d0:	ef 93       	push	r30
    25d2:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_5])
    25d4:	80 91 55 25 	lds	r24, 0x2555
    25d8:	90 91 56 25 	lds	r25, 0x2556
    25dc:	89 2b       	or	r24, r25
    25de:	29 f0       	breq	.+10     	; 0x25ea <__vector_4+0x3c>
    intFunc[EXTERNAL_INT_5]();
    25e0:	e0 91 55 25 	lds	r30, 0x2555
    25e4:	f0 91 56 25 	lds	r31, 0x2556
    25e8:	19 95       	eicall
}
    25ea:	ff 91       	pop	r31
    25ec:	ef 91       	pop	r30
    25ee:	bf 91       	pop	r27
    25f0:	af 91       	pop	r26
    25f2:	9f 91       	pop	r25
    25f4:	8f 91       	pop	r24
    25f6:	7f 91       	pop	r23
    25f8:	6f 91       	pop	r22
    25fa:	5f 91       	pop	r21
    25fc:	4f 91       	pop	r20
    25fe:	3f 91       	pop	r19
    2600:	2f 91       	pop	r18
    2602:	0f 90       	pop	r0
    2604:	0b be       	out	0x3b, r0	; 59
    2606:	0f 90       	pop	r0
    2608:	0f be       	out	0x3f, r0	; 63
    260a:	0f 90       	pop	r0
    260c:	1f 90       	pop	r1
    260e:	18 95       	reti

00002610 <__vector_5>:

ISR(INT4_vect) {
    2610:	1f 92       	push	r1
    2612:	0f 92       	push	r0
    2614:	0f b6       	in	r0, 0x3f	; 63
    2616:	0f 92       	push	r0
    2618:	11 24       	eor	r1, r1
    261a:	0b b6       	in	r0, 0x3b	; 59
    261c:	0f 92       	push	r0
    261e:	2f 93       	push	r18
    2620:	3f 93       	push	r19
    2622:	4f 93       	push	r20
    2624:	5f 93       	push	r21
    2626:	6f 93       	push	r22
    2628:	7f 93       	push	r23
    262a:	8f 93       	push	r24
    262c:	9f 93       	push	r25
    262e:	af 93       	push	r26
    2630:	bf 93       	push	r27
    2632:	ef 93       	push	r30
    2634:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
    2636:	80 91 4b 25 	lds	r24, 0x254B
    263a:	90 91 4c 25 	lds	r25, 0x254C
    263e:	89 2b       	or	r24, r25
    2640:	29 f0       	breq	.+10     	; 0x264c <__vector_5+0x3c>
    intFunc[EXTERNAL_INT_0]();
    2642:	e0 91 4b 25 	lds	r30, 0x254B
    2646:	f0 91 4c 25 	lds	r31, 0x254C
    264a:	19 95       	eicall
}
    264c:	ff 91       	pop	r31
    264e:	ef 91       	pop	r30
    2650:	bf 91       	pop	r27
    2652:	af 91       	pop	r26
    2654:	9f 91       	pop	r25
    2656:	8f 91       	pop	r24
    2658:	7f 91       	pop	r23
    265a:	6f 91       	pop	r22
    265c:	5f 91       	pop	r21
    265e:	4f 91       	pop	r20
    2660:	3f 91       	pop	r19
    2662:	2f 91       	pop	r18
    2664:	0f 90       	pop	r0
    2666:	0b be       	out	0x3b, r0	; 59
    2668:	0f 90       	pop	r0
    266a:	0f be       	out	0x3f, r0	; 63
    266c:	0f 90       	pop	r0
    266e:	1f 90       	pop	r1
    2670:	18 95       	reti

00002672 <__vector_6>:

ISR(INT5_vect) {
    2672:	1f 92       	push	r1
    2674:	0f 92       	push	r0
    2676:	0f b6       	in	r0, 0x3f	; 63
    2678:	0f 92       	push	r0
    267a:	11 24       	eor	r1, r1
    267c:	0b b6       	in	r0, 0x3b	; 59
    267e:	0f 92       	push	r0
    2680:	2f 93       	push	r18
    2682:	3f 93       	push	r19
    2684:	4f 93       	push	r20
    2686:	5f 93       	push	r21
    2688:	6f 93       	push	r22
    268a:	7f 93       	push	r23
    268c:	8f 93       	push	r24
    268e:	9f 93       	push	r25
    2690:	af 93       	push	r26
    2692:	bf 93       	push	r27
    2694:	ef 93       	push	r30
    2696:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
    2698:	80 91 4d 25 	lds	r24, 0x254D
    269c:	90 91 4e 25 	lds	r25, 0x254E
    26a0:	89 2b       	or	r24, r25
    26a2:	29 f0       	breq	.+10     	; 0x26ae <__vector_6+0x3c>
    intFunc[EXTERNAL_INT_1]();
    26a4:	e0 91 4d 25 	lds	r30, 0x254D
    26a8:	f0 91 4e 25 	lds	r31, 0x254E
    26ac:	19 95       	eicall
}
    26ae:	ff 91       	pop	r31
    26b0:	ef 91       	pop	r30
    26b2:	bf 91       	pop	r27
    26b4:	af 91       	pop	r26
    26b6:	9f 91       	pop	r25
    26b8:	8f 91       	pop	r24
    26ba:	7f 91       	pop	r23
    26bc:	6f 91       	pop	r22
    26be:	5f 91       	pop	r21
    26c0:	4f 91       	pop	r20
    26c2:	3f 91       	pop	r19
    26c4:	2f 91       	pop	r18
    26c6:	0f 90       	pop	r0
    26c8:	0b be       	out	0x3b, r0	; 59
    26ca:	0f 90       	pop	r0
    26cc:	0f be       	out	0x3f, r0	; 63
    26ce:	0f 90       	pop	r0
    26d0:	1f 90       	pop	r1
    26d2:	18 95       	reti

000026d4 <__vector_7>:

ISR(INT6_vect) {
    26d4:	1f 92       	push	r1
    26d6:	0f 92       	push	r0
    26d8:	0f b6       	in	r0, 0x3f	; 63
    26da:	0f 92       	push	r0
    26dc:	11 24       	eor	r1, r1
    26de:	0b b6       	in	r0, 0x3b	; 59
    26e0:	0f 92       	push	r0
    26e2:	2f 93       	push	r18
    26e4:	3f 93       	push	r19
    26e6:	4f 93       	push	r20
    26e8:	5f 93       	push	r21
    26ea:	6f 93       	push	r22
    26ec:	7f 93       	push	r23
    26ee:	8f 93       	push	r24
    26f0:	9f 93       	push	r25
    26f2:	af 93       	push	r26
    26f4:	bf 93       	push	r27
    26f6:	ef 93       	push	r30
    26f8:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_6])
    26fa:	80 91 57 25 	lds	r24, 0x2557
    26fe:	90 91 58 25 	lds	r25, 0x2558
    2702:	89 2b       	or	r24, r25
    2704:	29 f0       	breq	.+10     	; 0x2710 <__vector_7+0x3c>
    intFunc[EXTERNAL_INT_6]();
    2706:	e0 91 57 25 	lds	r30, 0x2557
    270a:	f0 91 58 25 	lds	r31, 0x2558
    270e:	19 95       	eicall
}
    2710:	ff 91       	pop	r31
    2712:	ef 91       	pop	r30
    2714:	bf 91       	pop	r27
    2716:	af 91       	pop	r26
    2718:	9f 91       	pop	r25
    271a:	8f 91       	pop	r24
    271c:	7f 91       	pop	r23
    271e:	6f 91       	pop	r22
    2720:	5f 91       	pop	r21
    2722:	4f 91       	pop	r20
    2724:	3f 91       	pop	r19
    2726:	2f 91       	pop	r18
    2728:	0f 90       	pop	r0
    272a:	0b be       	out	0x3b, r0	; 59
    272c:	0f 90       	pop	r0
    272e:	0f be       	out	0x3f, r0	; 63
    2730:	0f 90       	pop	r0
    2732:	1f 90       	pop	r1
    2734:	18 95       	reti

00002736 <__vector_8>:

ISR(INT7_vect) {
    2736:	1f 92       	push	r1
    2738:	0f 92       	push	r0
    273a:	0f b6       	in	r0, 0x3f	; 63
    273c:	0f 92       	push	r0
    273e:	11 24       	eor	r1, r1
    2740:	0b b6       	in	r0, 0x3b	; 59
    2742:	0f 92       	push	r0
    2744:	2f 93       	push	r18
    2746:	3f 93       	push	r19
    2748:	4f 93       	push	r20
    274a:	5f 93       	push	r21
    274c:	6f 93       	push	r22
    274e:	7f 93       	push	r23
    2750:	8f 93       	push	r24
    2752:	9f 93       	push	r25
    2754:	af 93       	push	r26
    2756:	bf 93       	push	r27
    2758:	ef 93       	push	r30
    275a:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_7])
    275c:	80 91 59 25 	lds	r24, 0x2559
    2760:	90 91 5a 25 	lds	r25, 0x255A
    2764:	89 2b       	or	r24, r25
    2766:	29 f0       	breq	.+10     	; 0x2772 <__vector_8+0x3c>
    intFunc[EXTERNAL_INT_7]();
    2768:	e0 91 59 25 	lds	r30, 0x2559
    276c:	f0 91 5a 25 	lds	r31, 0x255A
    2770:	19 95       	eicall
}
    2772:	ff 91       	pop	r31
    2774:	ef 91       	pop	r30
    2776:	bf 91       	pop	r27
    2778:	af 91       	pop	r26
    277a:	9f 91       	pop	r25
    277c:	8f 91       	pop	r24
    277e:	7f 91       	pop	r23
    2780:	6f 91       	pop	r22
    2782:	5f 91       	pop	r21
    2784:	4f 91       	pop	r20
    2786:	3f 91       	pop	r19
    2788:	2f 91       	pop	r18
    278a:	0f 90       	pop	r0
    278c:	0b be       	out	0x3b, r0	; 59
    278e:	0f 90       	pop	r0
    2790:	0f be       	out	0x3f, r0	; 63
    2792:	0f 90       	pop	r0
    2794:	1f 90       	pop	r1
    2796:	18 95       	reti

00002798 <__vector_23>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    2798:	1f 92       	push	r1
    279a:	0f 92       	push	r0
    279c:	0f b6       	in	r0, 0x3f	; 63
    279e:	0f 92       	push	r0
    27a0:	11 24       	eor	r1, r1
    27a2:	2f 93       	push	r18
    27a4:	3f 93       	push	r19
    27a6:	8f 93       	push	r24
    27a8:	9f 93       	push	r25
    27aa:	af 93       	push	r26
    27ac:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    27ae:	80 91 50 25 	lds	r24, 0x2550
    27b2:	90 91 51 25 	lds	r25, 0x2551
    27b6:	a0 91 52 25 	lds	r26, 0x2552
    27ba:	b0 91 53 25 	lds	r27, 0x2553
	unsigned char f = timer0_fract;
    27be:	30 91 4f 25 	lds	r19, 0x254F

	m += MILLIS_INC;
	f += FRACT_INC;
    27c2:	23 e0       	ldi	r18, 0x03	; 3
    27c4:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    27c6:	2d 37       	cpi	r18, 0x7D	; 125
    27c8:	20 f4       	brcc	.+8      	; 0x27d2 <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    27ca:	01 96       	adiw	r24, 0x01	; 1
    27cc:	a1 1d       	adc	r26, r1
    27ce:	b1 1d       	adc	r27, r1
    27d0:	05 c0       	rjmp	.+10     	; 0x27dc <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    27d2:	26 e8       	ldi	r18, 0x86	; 134
    27d4:	23 0f       	add	r18, r19
		m += 1;
    27d6:	02 96       	adiw	r24, 0x02	; 2
    27d8:	a1 1d       	adc	r26, r1
    27da:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    27dc:	20 93 4f 25 	sts	0x254F, r18
	timer0_millis = m;
    27e0:	80 93 50 25 	sts	0x2550, r24
    27e4:	90 93 51 25 	sts	0x2551, r25
    27e8:	a0 93 52 25 	sts	0x2552, r26
    27ec:	b0 93 53 25 	sts	0x2553, r27
	timer0_overflow_count++;
    27f0:	80 91 54 25 	lds	r24, 0x2554
    27f4:	90 91 55 25 	lds	r25, 0x2555
    27f8:	a0 91 56 25 	lds	r26, 0x2556
    27fc:	b0 91 57 25 	lds	r27, 0x2557
    2800:	01 96       	adiw	r24, 0x01	; 1
    2802:	a1 1d       	adc	r26, r1
    2804:	b1 1d       	adc	r27, r1
    2806:	80 93 54 25 	sts	0x2554, r24
    280a:	90 93 55 25 	sts	0x2555, r25
    280e:	a0 93 56 25 	sts	0x2556, r26
    2812:	b0 93 57 25 	sts	0x2557, r27
}
    2816:	bf 91       	pop	r27
    2818:	af 91       	pop	r26
    281a:	9f 91       	pop	r25
    281c:	8f 91       	pop	r24
    281e:	3f 91       	pop	r19
    2820:	2f 91       	pop	r18
    2822:	0f 90       	pop	r0
    2824:	0f be       	out	0x3f, r0	; 63
    2826:	0f 90       	pop	r0
    2828:	1f 90       	pop	r1
    282a:	18 95       	reti

0000282c <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    282c:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    282e:	f8 94       	cli
	m = timer0_millis;
    2830:	60 91 50 25 	lds	r22, 0x2550
    2834:	70 91 51 25 	lds	r23, 0x2551
    2838:	80 91 52 25 	lds	r24, 0x2552
    283c:	90 91 53 25 	lds	r25, 0x2553
	SREG = oldSREG;
    2840:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    2842:	08 95       	ret

00002844 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    2844:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    2846:	f8 94       	cli
	m = timer0_overflow_count;
    2848:	80 91 54 25 	lds	r24, 0x2554
    284c:	90 91 55 25 	lds	r25, 0x2555
    2850:	a0 91 56 25 	lds	r26, 0x2556
    2854:	b0 91 57 25 	lds	r27, 0x2557
#if defined(TCNT0)
	t = TCNT0;
    2858:	26 b5       	in	r18, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    285a:	a8 9b       	sbis	0x15, 0	; 21
    285c:	05 c0       	rjmp	.+10     	; 0x2868 <micros+0x24>
    285e:	2f 3f       	cpi	r18, 0xFF	; 255
    2860:	19 f0       	breq	.+6      	; 0x2868 <micros+0x24>
		m++;
    2862:	01 96       	adiw	r24, 0x01	; 1
    2864:	a1 1d       	adc	r26, r1
    2866:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    2868:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    286a:	ba 2f       	mov	r27, r26
    286c:	a9 2f       	mov	r26, r25
    286e:	98 2f       	mov	r25, r24
    2870:	88 27       	eor	r24, r24
    2872:	82 0f       	add	r24, r18
    2874:	91 1d       	adc	r25, r1
    2876:	a1 1d       	adc	r26, r1
    2878:	b1 1d       	adc	r27, r1
    287a:	bc 01       	movw	r22, r24
    287c:	cd 01       	movw	r24, r26
    287e:	66 0f       	add	r22, r22
    2880:	77 1f       	adc	r23, r23
    2882:	88 1f       	adc	r24, r24
    2884:	99 1f       	adc	r25, r25
    2886:	66 0f       	add	r22, r22
    2888:	77 1f       	adc	r23, r23
    288a:	88 1f       	adc	r24, r24
    288c:	99 1f       	adc	r25, r25
}
    288e:	08 95       	ret

00002890 <delay>:

void delay(unsigned long ms)
{
    2890:	cf 92       	push	r12
    2892:	df 92       	push	r13
    2894:	ef 92       	push	r14
    2896:	ff 92       	push	r15
    2898:	cf 93       	push	r28
    289a:	df 93       	push	r29
    289c:	6b 01       	movw	r12, r22
    289e:	7c 01       	movw	r14, r24
	uint16_t start = (uint16_t)micros();
    28a0:	d1 df       	rcall	.-94     	; 0x2844 <micros>
    28a2:	eb 01       	movw	r28, r22

	while (ms > 0) {
    28a4:	c1 14       	cp	r12, r1
    28a6:	d1 04       	cpc	r13, r1
    28a8:	e1 04       	cpc	r14, r1
    28aa:	f1 04       	cpc	r15, r1
    28ac:	99 f0       	breq	.+38     	; 0x28d4 <delay+0x44>
		yield();
    28ae:	2d da       	rcall	.-2982   	; 0x1d0a <yield>
		if (((uint16_t)micros() - start) >= 1000) {
    28b0:	c9 df       	rcall	.-110    	; 0x2844 <micros>
    28b2:	6c 1b       	sub	r22, r28
    28b4:	7d 0b       	sbc	r23, r29
    28b6:	68 3e       	cpi	r22, 0xE8	; 232
    28b8:	73 40       	sbci	r23, 0x03	; 3
    28ba:	38 f0       	brcs	.+14     	; 0x28ca <delay+0x3a>
			ms--;
    28bc:	81 e0       	ldi	r24, 0x01	; 1
    28be:	c8 1a       	sub	r12, r24
    28c0:	d1 08       	sbc	r13, r1
    28c2:	e1 08       	sbc	r14, r1
    28c4:	f1 08       	sbc	r15, r1
			start += 1000;
    28c6:	c8 51       	subi	r28, 0x18	; 24
    28c8:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    28ca:	c1 14       	cp	r12, r1
    28cc:	d1 04       	cpc	r13, r1
    28ce:	e1 04       	cpc	r14, r1
    28d0:	f1 04       	cpc	r15, r1
    28d2:	69 f7       	brne	.-38     	; 0x28ae <delay+0x1e>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    28d4:	df 91       	pop	r29
    28d6:	cf 91       	pop	r28
    28d8:	ff 90       	pop	r15
    28da:	ef 90       	pop	r14
    28dc:	df 90       	pop	r13
    28de:	cf 90       	pop	r12
    28e0:	08 95       	ret

000028e2 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
    28e2:	01 97       	sbiw	r24, 0x01	; 1
    28e4:	00 97       	sbiw	r24, 0x00	; 0
    28e6:	39 f0       	breq	.+14     	; 0x28f6 <delayMicroseconds+0x14>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
    28e8:	88 0f       	add	r24, r24
    28ea:	99 1f       	adc	r25, r25
    28ec:	88 0f       	add	r24, r24
    28ee:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
    28f0:	02 97       	sbiw	r24, 0x02	; 2
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
    28f2:	01 97       	sbiw	r24, 0x01	; 1
    28f4:	f1 f7       	brne	.-4      	; 0x28f2 <delayMicroseconds+0x10>
    28f6:	08 95       	ret

000028f8 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    28f8:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    28fa:	84 b5       	in	r24, 0x24	; 36
    28fc:	82 60       	ori	r24, 0x02	; 2
    28fe:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    2900:	84 b5       	in	r24, 0x24	; 36
    2902:	81 60       	ori	r24, 0x01	; 1
    2904:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2906:	85 b5       	in	r24, 0x25	; 37
    2908:	82 60       	ori	r24, 0x02	; 2
    290a:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    290c:	85 b5       	in	r24, 0x25	; 37
    290e:	81 60       	ori	r24, 0x01	; 1
    2910:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    2912:	ee e6       	ldi	r30, 0x6E	; 110
    2914:	f0 e0       	ldi	r31, 0x00	; 0
    2916:	80 81       	ld	r24, Z
    2918:	81 60       	ori	r24, 0x01	; 1
    291a:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    291c:	e1 e8       	ldi	r30, 0x81	; 129
    291e:	f0 e0       	ldi	r31, 0x00	; 0
    2920:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    2922:	80 81       	ld	r24, Z
    2924:	82 60       	ori	r24, 0x02	; 2
    2926:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    2928:	80 81       	ld	r24, Z
    292a:	81 60       	ori	r24, 0x01	; 1
    292c:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    292e:	e0 e8       	ldi	r30, 0x80	; 128
    2930:	f0 e0       	ldi	r31, 0x00	; 0
    2932:	80 81       	ld	r24, Z
    2934:	81 60       	ori	r24, 0x01	; 1
    2936:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    2938:	e1 eb       	ldi	r30, 0xB1	; 177
    293a:	f0 e0       	ldi	r31, 0x00	; 0
    293c:	80 81       	ld	r24, Z
    293e:	84 60       	ori	r24, 0x04	; 4
    2940:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    2942:	e0 eb       	ldi	r30, 0xB0	; 176
    2944:	f0 e0       	ldi	r31, 0x00	; 0
    2946:	80 81       	ld	r24, Z
    2948:	81 60       	ori	r24, 0x01	; 1
    294a:	80 83       	st	Z, r24
#else
	#warning Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    294c:	e1 e9       	ldi	r30, 0x91	; 145
    294e:	f0 e0       	ldi	r31, 0x00	; 0
    2950:	80 81       	ld	r24, Z
    2952:	82 60       	ori	r24, 0x02	; 2
    2954:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    2956:	80 81       	ld	r24, Z
    2958:	81 60       	ori	r24, 0x01	; 1
    295a:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    295c:	e0 e9       	ldi	r30, 0x90	; 144
    295e:	f0 e0       	ldi	r31, 0x00	; 0
    2960:	80 81       	ld	r24, Z
    2962:	81 60       	ori	r24, 0x01	; 1
    2964:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    2966:	e1 ea       	ldi	r30, 0xA1	; 161
    2968:	f0 e0       	ldi	r31, 0x00	; 0
    296a:	80 81       	ld	r24, Z
    296c:	82 60       	ori	r24, 0x02	; 2
    296e:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    2970:	80 81       	ld	r24, Z
    2972:	81 60       	ori	r24, 0x01	; 1
    2974:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    2976:	e0 ea       	ldi	r30, 0xA0	; 160
    2978:	f0 e0       	ldi	r31, 0x00	; 0
    297a:	80 81       	ld	r24, Z
    297c:	81 60       	ori	r24, 0x01	; 1
    297e:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    2980:	e1 e2       	ldi	r30, 0x21	; 33
    2982:	f1 e0       	ldi	r31, 0x01	; 1
    2984:	80 81       	ld	r24, Z
    2986:	82 60       	ori	r24, 0x02	; 2
    2988:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    298a:	80 81       	ld	r24, Z
    298c:	81 60       	ori	r24, 0x01	; 1
    298e:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    2990:	e0 e2       	ldi	r30, 0x20	; 32
    2992:	f1 e0       	ldi	r31, 0x01	; 1
    2994:	80 81       	ld	r24, Z
    2996:	81 60       	ori	r24, 0x01	; 1
    2998:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    299a:	ea e7       	ldi	r30, 0x7A	; 122
    299c:	f0 e0       	ldi	r31, 0x00	; 0
    299e:	80 81       	ld	r24, Z
    29a0:	84 60       	ori	r24, 0x04	; 4
    29a2:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    29a4:	80 81       	ld	r24, Z
    29a6:	82 60       	ori	r24, 0x02	; 2
    29a8:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    29aa:	80 81       	ld	r24, Z
    29ac:	81 60       	ori	r24, 0x01	; 1
    29ae:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    29b0:	80 81       	ld	r24, Z
    29b2:	80 68       	ori	r24, 0x80	; 128
    29b4:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    29b6:	10 92 c1 00 	sts	0x00C1, r1
    29ba:	08 95       	ret

000029bc <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    29bc:	8e 30       	cpi	r24, 0x0E	; 14
    29be:	08 f0       	brcs	.+2      	; 0x29c2 <analogRead+0x6>
    29c0:	8e 50       	subi	r24, 0x0E	; 14
#endif

#if defined(ADCSRB) && defined(MUX5)
	// the MUX5 bit of ADCSRB selects whether we're reading from channels
	// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
	ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
    29c2:	eb e7       	ldi	r30, 0x7B	; 123
    29c4:	f0 e0       	ldi	r31, 0x00	; 0
    29c6:	90 81       	ld	r25, Z
    29c8:	28 2f       	mov	r18, r24
    29ca:	28 70       	andi	r18, 0x08	; 8
    29cc:	97 7f       	andi	r25, 0xF7	; 247
    29ce:	92 2b       	or	r25, r18
    29d0:	90 83       	st	Z, r25
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    29d2:	87 70       	andi	r24, 0x07	; 7
    29d4:	20 91 09 02 	lds	r18, 0x0209
    29d8:	90 e4       	ldi	r25, 0x40	; 64
    29da:	29 9f       	mul	r18, r25
    29dc:	90 01       	movw	r18, r0
    29de:	11 24       	eor	r1, r1
    29e0:	28 2b       	or	r18, r24
    29e2:	20 93 7c 00 	sts	0x007C, r18
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    29e6:	ea e7       	ldi	r30, 0x7A	; 122
    29e8:	f0 e0       	ldi	r31, 0x00	; 0
    29ea:	80 81       	ld	r24, Z
    29ec:	80 64       	ori	r24, 0x40	; 64
    29ee:	80 83       	st	Z, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    29f0:	80 81       	ld	r24, Z
    29f2:	86 fd       	sbrc	r24, 6
    29f4:	fd cf       	rjmp	.-6      	; 0x29f0 <analogRead+0x34>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    29f6:	80 91 78 00 	lds	r24, 0x0078
	high = ADCH;
    29fa:	20 91 79 00 	lds	r18, 0x0079
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    29fe:	90 e0       	ldi	r25, 0x00	; 0
}
    2a00:	92 2b       	or	r25, r18
    2a02:	08 95       	ret

00002a04 <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    2a04:	1f 93       	push	r17
    2a06:	cf 93       	push	r28
    2a08:	df 93       	push	r29
    2a0a:	18 2f       	mov	r17, r24
    2a0c:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    2a0e:	61 e0       	ldi	r22, 0x01	; 1
    2a10:	18 d1       	rcall	.+560    	; 0x2c42 <pinMode>
	if (val == 0)
    2a12:	20 97       	sbiw	r28, 0x00	; 0
    2a14:	21 f4       	brne	.+8      	; 0x2a1e <analogWrite+0x1a>
	{
		digitalWrite(pin, LOW);
    2a16:	60 e0       	ldi	r22, 0x00	; 0
    2a18:	81 2f       	mov	r24, r17
    2a1a:	51 d1       	rcall	.+674    	; 0x2cbe <digitalWrite>
    2a1c:	ad c0       	rjmp	.+346    	; 0x2b78 <analogWrite+0x174>
	}
	else if (val == 255)
    2a1e:	cf 3f       	cpi	r28, 0xFF	; 255
    2a20:	d1 05       	cpc	r29, r1
    2a22:	21 f4       	brne	.+8      	; 0x2a2c <analogWrite+0x28>
	{
		digitalWrite(pin, HIGH);
    2a24:	61 e0       	ldi	r22, 0x01	; 1
    2a26:	81 2f       	mov	r24, r17
    2a28:	4a d1       	rcall	.+660    	; 0x2cbe <digitalWrite>
    2a2a:	a6 c0       	rjmp	.+332    	; 0x2b78 <analogWrite+0x174>
	}
	else
	{
		switch(digitalPinToTimer(pin))
    2a2c:	41 2f       	mov	r20, r17
    2a2e:	50 e0       	ldi	r21, 0x00	; 0
    2a30:	fa 01       	movw	r30, r20
    2a32:	e3 5c       	subi	r30, 0xC3	; 195
    2a34:	fc 4f       	sbci	r31, 0xFC	; 252
    2a36:	44 91       	lpm	r20, Z
    2a38:	50 e0       	ldi	r21, 0x00	; 0
    2a3a:	fa 01       	movw	r30, r20
    2a3c:	31 97       	sbiw	r30, 0x01	; 1
    2a3e:	e1 31       	cpi	r30, 0x11	; 17
    2a40:	f1 05       	cpc	r31, r1
    2a42:	08 f0       	brcs	.+2      	; 0x2a46 <analogWrite+0x42>
    2a44:	8f c0       	rjmp	.+286    	; 0x2b64 <analogWrite+0x160>
    2a46:	e6 56       	subi	r30, 0x66	; 102
    2a48:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4a:	0c 94 86 b2 	jmp	0x1650c	; 0x1650c <__tablejump2__>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    2a4e:	84 b5       	in	r24, 0x24	; 36
    2a50:	80 68       	ori	r24, 0x80	; 128
    2a52:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    2a54:	c7 bd       	out	0x27, r28	; 39
				break;
    2a56:	90 c0       	rjmp	.+288    	; 0x2b78 <analogWrite+0x174>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    2a58:	84 b5       	in	r24, 0x24	; 36
    2a5a:	80 62       	ori	r24, 0x20	; 32
    2a5c:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    2a5e:	c8 bd       	out	0x28, r28	; 40
				break;
    2a60:	8b c0       	rjmp	.+278    	; 0x2b78 <analogWrite+0x174>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    2a62:	e0 e8       	ldi	r30, 0x80	; 128
    2a64:	f0 e0       	ldi	r31, 0x00	; 0
    2a66:	80 81       	ld	r24, Z
    2a68:	80 68       	ori	r24, 0x80	; 128
    2a6a:	80 83       	st	Z, r24
				OCR1A = val; // set pwm duty
    2a6c:	d0 93 89 00 	sts	0x0089, r29
    2a70:	c0 93 88 00 	sts	0x0088, r28
				break;
    2a74:	81 c0       	rjmp	.+258    	; 0x2b78 <analogWrite+0x174>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    2a76:	e0 e8       	ldi	r30, 0x80	; 128
    2a78:	f0 e0       	ldi	r31, 0x00	; 0
    2a7a:	80 81       	ld	r24, Z
    2a7c:	80 62       	ori	r24, 0x20	; 32
    2a7e:	80 83       	st	Z, r24
				OCR1B = val; // set pwm duty
    2a80:	d0 93 8b 00 	sts	0x008B, r29
    2a84:	c0 93 8a 00 	sts	0x008A, r28
				break;
    2a88:	77 c0       	rjmp	.+238    	; 0x2b78 <analogWrite+0x174>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
    2a8a:	e0 eb       	ldi	r30, 0xB0	; 176
    2a8c:	f0 e0       	ldi	r31, 0x00	; 0
    2a8e:	80 81       	ld	r24, Z
    2a90:	80 68       	ori	r24, 0x80	; 128
    2a92:	80 83       	st	Z, r24
				OCR2A = val; // set pwm duty
    2a94:	c0 93 b3 00 	sts	0x00B3, r28
				break;
    2a98:	6f c0       	rjmp	.+222    	; 0x2b78 <analogWrite+0x174>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
    2a9a:	e0 eb       	ldi	r30, 0xB0	; 176
    2a9c:	f0 e0       	ldi	r31, 0x00	; 0
    2a9e:	80 81       	ld	r24, Z
    2aa0:	80 62       	ori	r24, 0x20	; 32
    2aa2:	80 83       	st	Z, r24
				OCR2B = val; // set pwm duty
    2aa4:	c0 93 b4 00 	sts	0x00B4, r28
				break;
    2aa8:	67 c0       	rjmp	.+206    	; 0x2b78 <analogWrite+0x174>
			#endif

			#if defined(TCCR3A) && defined(COM3A1)
			case TIMER3A:
				// connect pwm to pin on timer 3, channel A
				sbi(TCCR3A, COM3A1);
    2aaa:	e0 e9       	ldi	r30, 0x90	; 144
    2aac:	f0 e0       	ldi	r31, 0x00	; 0
    2aae:	80 81       	ld	r24, Z
    2ab0:	80 68       	ori	r24, 0x80	; 128
    2ab2:	80 83       	st	Z, r24
				OCR3A = val; // set pwm duty
    2ab4:	d0 93 99 00 	sts	0x0099, r29
    2ab8:	c0 93 98 00 	sts	0x0098, r28
				break;
    2abc:	5d c0       	rjmp	.+186    	; 0x2b78 <analogWrite+0x174>
			#endif

			#if defined(TCCR3A) && defined(COM3B1)
			case TIMER3B:
				// connect pwm to pin on timer 3, channel B
				sbi(TCCR3A, COM3B1);
    2abe:	e0 e9       	ldi	r30, 0x90	; 144
    2ac0:	f0 e0       	ldi	r31, 0x00	; 0
    2ac2:	80 81       	ld	r24, Z
    2ac4:	80 62       	ori	r24, 0x20	; 32
    2ac6:	80 83       	st	Z, r24
				OCR3B = val; // set pwm duty
    2ac8:	d0 93 9b 00 	sts	0x009B, r29
    2acc:	c0 93 9a 00 	sts	0x009A, r28
				break;
    2ad0:	53 c0       	rjmp	.+166    	; 0x2b78 <analogWrite+0x174>
			#endif

			#if defined(TCCR3A) && defined(COM3C1)
			case TIMER3C:
				// connect pwm to pin on timer 3, channel C
				sbi(TCCR3A, COM3C1);
    2ad2:	e0 e9       	ldi	r30, 0x90	; 144
    2ad4:	f0 e0       	ldi	r31, 0x00	; 0
    2ad6:	80 81       	ld	r24, Z
    2ad8:	88 60       	ori	r24, 0x08	; 8
    2ada:	80 83       	st	Z, r24
				OCR3C = val; // set pwm duty
    2adc:	d0 93 9d 00 	sts	0x009D, r29
    2ae0:	c0 93 9c 00 	sts	0x009C, r28
				break;
    2ae4:	49 c0       	rjmp	.+146    	; 0x2b78 <analogWrite+0x174>
			#endif

			#if defined(TCCR4A)
			case TIMER4A:
				//connect pwm to pin on timer 4, channel A
				sbi(TCCR4A, COM4A1);
    2ae6:	e0 ea       	ldi	r30, 0xA0	; 160
    2ae8:	f0 e0       	ldi	r31, 0x00	; 0
    2aea:	80 81       	ld	r24, Z
    2aec:	80 68       	ori	r24, 0x80	; 128
    2aee:	80 83       	st	Z, r24
				#if defined(COM4A0)		// only used on 32U4
				cbi(TCCR4A, COM4A0);
    2af0:	80 81       	ld	r24, Z
    2af2:	8f 7b       	andi	r24, 0xBF	; 191
    2af4:	80 83       	st	Z, r24
				#endif
				OCR4A = val;	// set pwm duty
    2af6:	d0 93 a9 00 	sts	0x00A9, r29
    2afa:	c0 93 a8 00 	sts	0x00A8, r28
				break;
    2afe:	3c c0       	rjmp	.+120    	; 0x2b78 <analogWrite+0x174>
			#endif
			
			#if defined(TCCR4A) && defined(COM4B1)
			case TIMER4B:
				// connect pwm to pin on timer 4, channel B
				sbi(TCCR4A, COM4B1);
    2b00:	e0 ea       	ldi	r30, 0xA0	; 160
    2b02:	f0 e0       	ldi	r31, 0x00	; 0
    2b04:	80 81       	ld	r24, Z
    2b06:	80 62       	ori	r24, 0x20	; 32
    2b08:	80 83       	st	Z, r24
				OCR4B = val; // set pwm duty
    2b0a:	d0 93 ab 00 	sts	0x00AB, r29
    2b0e:	c0 93 aa 00 	sts	0x00AA, r28
				break;
    2b12:	32 c0       	rjmp	.+100    	; 0x2b78 <analogWrite+0x174>
			#endif

			#if defined(TCCR4A) && defined(COM4C1)
			case TIMER4C:
				// connect pwm to pin on timer 4, channel C
				sbi(TCCR4A, COM4C1);
    2b14:	e0 ea       	ldi	r30, 0xA0	; 160
    2b16:	f0 e0       	ldi	r31, 0x00	; 0
    2b18:	80 81       	ld	r24, Z
    2b1a:	88 60       	ori	r24, 0x08	; 8
    2b1c:	80 83       	st	Z, r24
				OCR4C = val; // set pwm duty
    2b1e:	d0 93 ad 00 	sts	0x00AD, r29
    2b22:	c0 93 ac 00 	sts	0x00AC, r28
				break;
    2b26:	28 c0       	rjmp	.+80     	; 0x2b78 <analogWrite+0x174>

							
			#if defined(TCCR5A) && defined(COM5A1)
			case TIMER5A:
				// connect pwm to pin on timer 5, channel A
				sbi(TCCR5A, COM5A1);
    2b28:	e0 e2       	ldi	r30, 0x20	; 32
    2b2a:	f1 e0       	ldi	r31, 0x01	; 1
    2b2c:	80 81       	ld	r24, Z
    2b2e:	80 68       	ori	r24, 0x80	; 128
    2b30:	80 83       	st	Z, r24
				OCR5A = val; // set pwm duty
    2b32:	d0 93 29 01 	sts	0x0129, r29
    2b36:	c0 93 28 01 	sts	0x0128, r28
				break;
    2b3a:	1e c0       	rjmp	.+60     	; 0x2b78 <analogWrite+0x174>
			#endif

			#if defined(TCCR5A) && defined(COM5B1)
			case TIMER5B:
				// connect pwm to pin on timer 5, channel B
				sbi(TCCR5A, COM5B1);
    2b3c:	e0 e2       	ldi	r30, 0x20	; 32
    2b3e:	f1 e0       	ldi	r31, 0x01	; 1
    2b40:	80 81       	ld	r24, Z
    2b42:	80 62       	ori	r24, 0x20	; 32
    2b44:	80 83       	st	Z, r24
				OCR5B = val; // set pwm duty
    2b46:	d0 93 2b 01 	sts	0x012B, r29
    2b4a:	c0 93 2a 01 	sts	0x012A, r28
				break;
    2b4e:	14 c0       	rjmp	.+40     	; 0x2b78 <analogWrite+0x174>
			#endif

			#if defined(TCCR5A) && defined(COM5C1)
			case TIMER5C:
				// connect pwm to pin on timer 5, channel C
				sbi(TCCR5A, COM5C1);
    2b50:	e0 e2       	ldi	r30, 0x20	; 32
    2b52:	f1 e0       	ldi	r31, 0x01	; 1
    2b54:	80 81       	ld	r24, Z
    2b56:	88 60       	ori	r24, 0x08	; 8
    2b58:	80 83       	st	Z, r24
				OCR5C = val; // set pwm duty
    2b5a:	d0 93 2d 01 	sts	0x012D, r29
    2b5e:	c0 93 2c 01 	sts	0x012C, r28
				break;
    2b62:	0a c0       	rjmp	.+20     	; 0x2b78 <analogWrite+0x174>
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    2b64:	c0 38       	cpi	r28, 0x80	; 128
    2b66:	d1 05       	cpc	r29, r1
    2b68:	24 f4       	brge	.+8      	; 0x2b72 <analogWrite+0x16e>
					digitalWrite(pin, LOW);
    2b6a:	60 e0       	ldi	r22, 0x00	; 0
    2b6c:	81 2f       	mov	r24, r17
    2b6e:	a7 d0       	rcall	.+334    	; 0x2cbe <digitalWrite>
    2b70:	03 c0       	rjmp	.+6      	; 0x2b78 <analogWrite+0x174>
				} else {
					digitalWrite(pin, HIGH);
    2b72:	61 e0       	ldi	r22, 0x01	; 1
    2b74:	81 2f       	mov	r24, r17
    2b76:	a3 d0       	rcall	.+326    	; 0x2cbe <digitalWrite>
				}
		}
	}
}
    2b78:	df 91       	pop	r29
    2b7a:	cf 91       	pop	r28
    2b7c:	1f 91       	pop	r17
    2b7e:	08 95       	ret

00002b80 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	fc 01       	movw	r30, r24
    2b84:	31 97       	sbiw	r30, 0x01	; 1
    2b86:	e1 31       	cpi	r30, 0x11	; 17
    2b88:	f1 05       	cpc	r31, r1
    2b8a:	08 f0       	brcs	.+2      	; 0x2b8e <turnOffPWM+0xe>
    2b8c:	59 c0       	rjmp	.+178    	; 0x2c40 <turnOffPWM+0xc0>
    2b8e:	e5 55       	subi	r30, 0x55	; 85
    2b90:	ff 4f       	sbci	r31, 0xFF	; 255
    2b92:	0c 94 86 b2 	jmp	0x1650c	; 0x1650c <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    2b96:	e0 e8       	ldi	r30, 0x80	; 128
    2b98:	f0 e0       	ldi	r31, 0x00	; 0
    2b9a:	80 81       	ld	r24, Z
    2b9c:	8f 77       	andi	r24, 0x7F	; 127
    2b9e:	80 83       	st	Z, r24
    2ba0:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2ba2:	e0 e8       	ldi	r30, 0x80	; 128
    2ba4:	f0 e0       	ldi	r31, 0x00	; 0
    2ba6:	80 81       	ld	r24, Z
    2ba8:	8f 7d       	andi	r24, 0xDF	; 223
    2baa:	80 83       	st	Z, r24
    2bac:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    2bae:	84 b5       	in	r24, 0x24	; 36
    2bb0:	8f 77       	andi	r24, 0x7F	; 127
    2bb2:	84 bd       	out	0x24, r24	; 36
    2bb4:	08 95       	ret
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2bb6:	84 b5       	in	r24, 0x24	; 36
    2bb8:	8f 7d       	andi	r24, 0xDF	; 223
    2bba:	84 bd       	out	0x24, r24	; 36
    2bbc:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    2bbe:	e0 eb       	ldi	r30, 0xB0	; 176
    2bc0:	f0 e0       	ldi	r31, 0x00	; 0
    2bc2:	80 81       	ld	r24, Z
    2bc4:	8f 77       	andi	r24, 0x7F	; 127
    2bc6:	80 83       	st	Z, r24
    2bc8:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2bca:	e0 eb       	ldi	r30, 0xB0	; 176
    2bcc:	f0 e0       	ldi	r31, 0x00	; 0
    2bce:	80 81       	ld	r24, Z
    2bd0:	8f 7d       	andi	r24, 0xDF	; 223
    2bd2:	80 83       	st	Z, r24
    2bd4:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    2bd6:	e0 e9       	ldi	r30, 0x90	; 144
    2bd8:	f0 e0       	ldi	r31, 0x00	; 0
    2bda:	80 81       	ld	r24, Z
    2bdc:	8f 77       	andi	r24, 0x7F	; 127
    2bde:	80 83       	st	Z, r24
    2be0:	08 95       	ret
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    2be2:	e0 e9       	ldi	r30, 0x90	; 144
    2be4:	f0 e0       	ldi	r31, 0x00	; 0
    2be6:	80 81       	ld	r24, Z
    2be8:	8f 7d       	andi	r24, 0xDF	; 223
    2bea:	80 83       	st	Z, r24
    2bec:	08 95       	ret
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    2bee:	e0 e9       	ldi	r30, 0x90	; 144
    2bf0:	f0 e0       	ldi	r31, 0x00	; 0
    2bf2:	80 81       	ld	r24, Z
    2bf4:	87 7f       	andi	r24, 0xF7	; 247
    2bf6:	80 83       	st	Z, r24
    2bf8:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    2bfa:	e0 ea       	ldi	r30, 0xA0	; 160
    2bfc:	f0 e0       	ldi	r31, 0x00	; 0
    2bfe:	80 81       	ld	r24, Z
    2c00:	8f 77       	andi	r24, 0x7F	; 127
    2c02:	80 83       	st	Z, r24
    2c04:	08 95       	ret
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    2c06:	e0 ea       	ldi	r30, 0xA0	; 160
    2c08:	f0 e0       	ldi	r31, 0x00	; 0
    2c0a:	80 81       	ld	r24, Z
    2c0c:	8f 7d       	andi	r24, 0xDF	; 223
    2c0e:	80 83       	st	Z, r24
    2c10:	08 95       	ret
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    2c12:	e0 ea       	ldi	r30, 0xA0	; 160
    2c14:	f0 e0       	ldi	r31, 0x00	; 0
    2c16:	80 81       	ld	r24, Z
    2c18:	87 7f       	andi	r24, 0xF7	; 247
    2c1a:	80 83       	st	Z, r24
    2c1c:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    2c1e:	e0 e2       	ldi	r30, 0x20	; 32
    2c20:	f1 e0       	ldi	r31, 0x01	; 1
    2c22:	80 81       	ld	r24, Z
    2c24:	8f 77       	andi	r24, 0x7F	; 127
    2c26:	80 83       	st	Z, r24
    2c28:	08 95       	ret
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    2c2a:	e0 e2       	ldi	r30, 0x20	; 32
    2c2c:	f1 e0       	ldi	r31, 0x01	; 1
    2c2e:	80 81       	ld	r24, Z
    2c30:	8f 7d       	andi	r24, 0xDF	; 223
    2c32:	80 83       	st	Z, r24
    2c34:	08 95       	ret
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    2c36:	e0 e2       	ldi	r30, 0x20	; 32
    2c38:	f1 e0       	ldi	r31, 0x01	; 1
    2c3a:	80 81       	ld	r24, Z
    2c3c:	87 7f       	andi	r24, 0xF7	; 247
    2c3e:	80 83       	st	Z, r24
    2c40:	08 95       	ret

00002c42 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    2c42:	cf 93       	push	r28
    2c44:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    2c46:	90 e0       	ldi	r25, 0x00	; 0
    2c48:	fc 01       	movw	r30, r24
    2c4a:	e3 5a       	subi	r30, 0xA3	; 163
    2c4c:	fc 4f       	sbci	r31, 0xFC	; 252
    2c4e:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    2c50:	fc 01       	movw	r30, r24
    2c52:	e3 58       	subi	r30, 0x83	; 131
    2c54:	fc 4f       	sbci	r31, 0xFC	; 252
    2c56:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    2c58:	88 23       	and	r24, r24
    2c5a:	71 f1       	breq	.+92     	; 0x2cb8 <pinMode+0x76>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    2c5c:	90 e0       	ldi	r25, 0x00	; 0
    2c5e:	88 0f       	add	r24, r24
    2c60:	99 1f       	adc	r25, r25
    2c62:	fc 01       	movw	r30, r24
    2c64:	ef 52       	subi	r30, 0x2F	; 47
    2c66:	fc 4f       	sbci	r31, 0xFC	; 252
    2c68:	a5 91       	lpm	r26, Z+
    2c6a:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
    2c6c:	89 54       	subi	r24, 0x49	; 73
    2c6e:	9c 4f       	sbci	r25, 0xFC	; 252
    2c70:	fc 01       	movw	r30, r24
    2c72:	c5 91       	lpm	r28, Z+
    2c74:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
    2c76:	61 11       	cpse	r22, r1
    2c78:	0b c0       	rjmp	.+22     	; 0x2c90 <pinMode+0x4e>
		uint8_t oldSREG = SREG;
    2c7a:	8f b7       	in	r24, 0x3f	; 63
                cli();
    2c7c:	f8 94       	cli
		*reg &= ~bit;
    2c7e:	9c 91       	ld	r25, X
    2c80:	20 95       	com	r18
    2c82:	92 23       	and	r25, r18
    2c84:	9c 93       	st	X, r25
		*out &= ~bit;
    2c86:	e8 81       	ld	r30, Y
    2c88:	2e 23       	and	r18, r30
    2c8a:	28 83       	st	Y, r18
		SREG = oldSREG;
    2c8c:	8f bf       	out	0x3f, r24	; 63
    2c8e:	14 c0       	rjmp	.+40     	; 0x2cb8 <pinMode+0x76>
	} else if (mode == INPUT_PULLUP) {
    2c90:	62 30       	cpi	r22, 0x02	; 2
    2c92:	61 f4       	brne	.+24     	; 0x2cac <pinMode+0x6a>
		uint8_t oldSREG = SREG;
    2c94:	8f b7       	in	r24, 0x3f	; 63
                cli();
    2c96:	f8 94       	cli
		*reg &= ~bit;
    2c98:	3c 91       	ld	r19, X
    2c9a:	92 2f       	mov	r25, r18
    2c9c:	90 95       	com	r25
    2c9e:	93 23       	and	r25, r19
    2ca0:	9c 93       	st	X, r25
		*out |= bit;
    2ca2:	e8 81       	ld	r30, Y
    2ca4:	2e 2b       	or	r18, r30
    2ca6:	28 83       	st	Y, r18
		SREG = oldSREG;
    2ca8:	8f bf       	out	0x3f, r24	; 63
    2caa:	06 c0       	rjmp	.+12     	; 0x2cb8 <pinMode+0x76>
	} else {
		uint8_t oldSREG = SREG;
    2cac:	8f b7       	in	r24, 0x3f	; 63
                cli();
    2cae:	f8 94       	cli
		*reg |= bit;
    2cb0:	ec 91       	ld	r30, X
    2cb2:	2e 2b       	or	r18, r30
    2cb4:	2c 93       	st	X, r18
		SREG = oldSREG;
    2cb6:	8f bf       	out	0x3f, r24	; 63
	}
}
    2cb8:	df 91       	pop	r29
    2cba:	cf 91       	pop	r28
    2cbc:	08 95       	ret

00002cbe <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2cbe:	1f 93       	push	r17
    2cc0:	cf 93       	push	r28
    2cc2:	df 93       	push	r29
    2cc4:	c6 2f       	mov	r28, r22
	uint8_t timer = digitalPinToTimer(pin);
    2cc6:	28 2f       	mov	r18, r24
    2cc8:	30 e0       	ldi	r19, 0x00	; 0
    2cca:	f9 01       	movw	r30, r18
    2ccc:	e3 5c       	subi	r30, 0xC3	; 195
    2cce:	fc 4f       	sbci	r31, 0xFC	; 252
    2cd0:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2cd2:	f9 01       	movw	r30, r18
    2cd4:	e3 5a       	subi	r30, 0xA3	; 163
    2cd6:	fc 4f       	sbci	r31, 0xFC	; 252
    2cd8:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
    2cda:	f9 01       	movw	r30, r18
    2cdc:	e3 58       	subi	r30, 0x83	; 131
    2cde:	fc 4f       	sbci	r31, 0xFC	; 252
    2ce0:	d4 91       	lpm	r29, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2ce2:	dd 23       	and	r29, r29
    2ce4:	c1 f0       	breq	.+48     	; 0x2d16 <digitalWrite+0x58>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2ce6:	81 11       	cpse	r24, r1
    2ce8:	4b df       	rcall	.-362    	; 0x2b80 <turnOffPWM>

	out = portOutputRegister(port);
    2cea:	2d 2f       	mov	r18, r29
    2cec:	30 e0       	ldi	r19, 0x00	; 0
    2cee:	f9 01       	movw	r30, r18
    2cf0:	ee 0f       	add	r30, r30
    2cf2:	ff 1f       	adc	r31, r31
    2cf4:	e9 54       	subi	r30, 0x49	; 73
    2cf6:	fc 4f       	sbci	r31, 0xFC	; 252
    2cf8:	a5 91       	lpm	r26, Z+
    2cfa:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    2cfc:	8f b7       	in	r24, 0x3f	; 63
	cli();
    2cfe:	f8 94       	cli

	if (val == LOW) {
    2d00:	c1 11       	cpse	r28, r1
    2d02:	05 c0       	rjmp	.+10     	; 0x2d0e <digitalWrite+0x50>
		*out &= ~bit;
    2d04:	ec 91       	ld	r30, X
    2d06:	10 95       	com	r17
    2d08:	1e 23       	and	r17, r30
    2d0a:	1c 93       	st	X, r17
    2d0c:	03 c0       	rjmp	.+6      	; 0x2d14 <digitalWrite+0x56>
	} else {
		*out |= bit;
    2d0e:	ec 91       	ld	r30, X
    2d10:	1e 2b       	or	r17, r30
    2d12:	1c 93       	st	X, r17
	}

	SREG = oldSREG;
    2d14:	8f bf       	out	0x3f, r24	; 63
}
    2d16:	df 91       	pop	r29
    2d18:	cf 91       	pop	r28
    2d1a:	1f 91       	pop	r17
    2d1c:	08 95       	ret

00002d1e <digitalRead>:

int digitalRead(uint8_t pin)
{
    2d1e:	cf 93       	push	r28
    2d20:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    2d22:	28 2f       	mov	r18, r24
    2d24:	30 e0       	ldi	r19, 0x00	; 0
    2d26:	f9 01       	movw	r30, r18
    2d28:	e3 5c       	subi	r30, 0xC3	; 195
    2d2a:	fc 4f       	sbci	r31, 0xFC	; 252
    2d2c:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2d2e:	f9 01       	movw	r30, r18
    2d30:	e3 5a       	subi	r30, 0xA3	; 163
    2d32:	fc 4f       	sbci	r31, 0xFC	; 252
    2d34:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    2d36:	f9 01       	movw	r30, r18
    2d38:	e3 58       	subi	r30, 0x83	; 131
    2d3a:	fc 4f       	sbci	r31, 0xFC	; 252
    2d3c:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    2d3e:	cc 23       	and	r28, r28
    2d40:	91 f0       	breq	.+36     	; 0x2d66 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2d42:	81 11       	cpse	r24, r1
    2d44:	1d df       	rcall	.-454    	; 0x2b80 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    2d46:	2c 2f       	mov	r18, r28
    2d48:	30 e0       	ldi	r19, 0x00	; 0
    2d4a:	f9 01       	movw	r30, r18
    2d4c:	ee 0f       	add	r30, r30
    2d4e:	ff 1f       	adc	r31, r31
    2d50:	e3 56       	subi	r30, 0x63	; 99
    2d52:	fc 4f       	sbci	r31, 0xFC	; 252
    2d54:	a5 91       	lpm	r26, Z+
    2d56:	b4 91       	lpm	r27, Z
    2d58:	ec 91       	ld	r30, X
    2d5a:	de 23       	and	r29, r30
    2d5c:	81 e0       	ldi	r24, 0x01	; 1
    2d5e:	90 e0       	ldi	r25, 0x00	; 0
    2d60:	21 f4       	brne	.+8      	; 0x2d6a <digitalRead+0x4c>
    2d62:	80 e0       	ldi	r24, 0x00	; 0
    2d64:	02 c0       	rjmp	.+4      	; 0x2d6a <digitalRead+0x4c>
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    2d66:	80 e0       	ldi	r24, 0x00	; 0
    2d68:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    2d6a:	df 91       	pop	r29
    2d6c:	cf 91       	pop	r28
    2d6e:	08 95       	ret

00002d70 <pulseIn>:
/* Measures the length (in microseconds) of a pulse on the pin; state is HIGH
 * or LOW, the type of pulse to measure.  Works on pulses from 2-3 microseconds
 * to 3 minutes in length, but must be called at least a few dozen microseconds
 * before the start of the pulse. */
unsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout)
{
    2d70:	af 92       	push	r10
    2d72:	bf 92       	push	r11
    2d74:	cf 92       	push	r12
    2d76:	df 92       	push	r13
    2d78:	ef 92       	push	r14
    2d7a:	ff 92       	push	r15
    2d7c:	0f 93       	push	r16
    2d7e:	1f 93       	push	r17
    2d80:	cf 93       	push	r28
    2d82:	df 93       	push	r29
	// cache the port and bit of the pin in order to speed up the
	// pulse width measuring loop and achieve finer resolution.  calling
	// digitalRead() instead yields much coarser resolution.
	uint8_t bit = digitalPinToBitMask(pin);
    2d84:	90 e0       	ldi	r25, 0x00	; 0
    2d86:	fc 01       	movw	r30, r24
    2d88:	e3 5a       	subi	r30, 0xA3	; 163
    2d8a:	fc 4f       	sbci	r31, 0xFC	; 252
    2d8c:	b4 90       	lpm	r11, Z
	uint8_t port = digitalPinToPort(pin);
    2d8e:	fc 01       	movw	r30, r24
    2d90:	e3 58       	subi	r30, 0x83	; 131
    2d92:	fc 4f       	sbci	r31, 0xFC	; 252
    2d94:	c4 91       	lpm	r28, Z
	uint8_t stateMask = (state ? bit : 0);
    2d96:	61 11       	cpse	r22, r1
    2d98:	02 c0       	rjmp	.+4      	; 0x2d9e <pulseIn+0x2e>
    2d9a:	a1 2c       	mov	r10, r1
    2d9c:	01 c0       	rjmp	.+2      	; 0x2da0 <pulseIn+0x30>
    2d9e:	ab 2c       	mov	r10, r11
	unsigned long width = 0; // keep initialization out of time critical area
	
	// convert the timeout from microseconds to a number of times through
	// the initial loop; it takes 16 clock cycles per iteration.
	unsigned long numloops = 0;
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
    2da0:	89 01       	movw	r16, r18
    2da2:	9a 01       	movw	r18, r20
    2da4:	3f 70       	andi	r19, 0x0F	; 15
	
	// wait for any previous pulse to end
	while ((*portInputRegister(port) & bit) == stateMask)
    2da6:	d0 e0       	ldi	r29, 0x00	; 0
    2da8:	cc 0f       	add	r28, r28
    2daa:	dd 1f       	adc	r29, r29
    2dac:	c3 56       	subi	r28, 0x63	; 99
    2dae:	dc 4f       	sbci	r29, 0xFC	; 252
	uint8_t stateMask = (state ? bit : 0);
	unsigned long width = 0; // keep initialization out of time critical area
	
	// convert the timeout from microseconds to a number of times through
	// the initial loop; it takes 16 clock cycles per iteration.
	unsigned long numloops = 0;
    2db0:	80 e0       	ldi	r24, 0x00	; 0
    2db2:	90 e0       	ldi	r25, 0x00	; 0
    2db4:	dc 01       	movw	r26, r24
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
	
	// wait for any previous pulse to end
	while ((*portInputRegister(port) & bit) == stateMask)
    2db6:	0e c0       	rjmp	.+28     	; 0x2dd4 <pulseIn+0x64>
		if (numloops++ == maxloops)
    2db8:	ac 01       	movw	r20, r24
    2dba:	bd 01       	movw	r22, r26
    2dbc:	4f 5f       	subi	r20, 0xFF	; 255
    2dbe:	5f 4f       	sbci	r21, 0xFF	; 255
    2dc0:	6f 4f       	sbci	r22, 0xFF	; 255
    2dc2:	7f 4f       	sbci	r23, 0xFF	; 255
    2dc4:	80 17       	cp	r24, r16
    2dc6:	91 07       	cpc	r25, r17
    2dc8:	a2 07       	cpc	r26, r18
    2dca:	b3 07       	cpc	r27, r19
    2dcc:	09 f4       	brne	.+2      	; 0x2dd0 <pulseIn+0x60>
    2dce:	7c c0       	rjmp	.+248    	; 0x2ec8 <pulseIn+0x158>
    2dd0:	db 01       	movw	r26, r22
    2dd2:	ca 01       	movw	r24, r20
	// the initial loop; it takes 16 clock cycles per iteration.
	unsigned long numloops = 0;
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
	
	// wait for any previous pulse to end
	while ((*portInputRegister(port) & bit) == stateMask)
    2dd4:	fe 01       	movw	r30, r28
    2dd6:	45 91       	lpm	r20, Z+
    2dd8:	54 91       	lpm	r21, Z
    2dda:	fa 01       	movw	r30, r20
    2ddc:	40 81       	ld	r20, Z
    2dde:	4b 21       	and	r20, r11
    2de0:	a4 16       	cp	r10, r20
    2de2:	51 f3       	breq	.-44     	; 0x2db8 <pulseIn+0x48>
    2de4:	0e c0       	rjmp	.+28     	; 0x2e02 <pulseIn+0x92>
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to start
	while ((*portInputRegister(port) & bit) != stateMask)
		if (numloops++ == maxloops)
    2de6:	ac 01       	movw	r20, r24
    2de8:	bd 01       	movw	r22, r26
    2dea:	4f 5f       	subi	r20, 0xFF	; 255
    2dec:	5f 4f       	sbci	r21, 0xFF	; 255
    2dee:	6f 4f       	sbci	r22, 0xFF	; 255
    2df0:	7f 4f       	sbci	r23, 0xFF	; 255
    2df2:	80 17       	cp	r24, r16
    2df4:	91 07       	cpc	r25, r17
    2df6:	a2 07       	cpc	r26, r18
    2df8:	b3 07       	cpc	r27, r19
    2dfa:	09 f4       	brne	.+2      	; 0x2dfe <pulseIn+0x8e>
    2dfc:	69 c0       	rjmp	.+210    	; 0x2ed0 <pulseIn+0x160>
    2dfe:	db 01       	movw	r26, r22
    2e00:	ca 01       	movw	r24, r20
	while ((*portInputRegister(port) & bit) == stateMask)
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to start
	while ((*portInputRegister(port) & bit) != stateMask)
    2e02:	fe 01       	movw	r30, r28
    2e04:	45 91       	lpm	r20, Z+
    2e06:	54 91       	lpm	r21, Z
    2e08:	fa 01       	movw	r30, r20
    2e0a:	40 81       	ld	r20, Z
    2e0c:	4b 21       	and	r20, r11
    2e0e:	a4 12       	cpse	r10, r20
    2e10:	ea cf       	rjmp	.-44     	; 0x2de6 <pulseIn+0x76>
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to stop
	while ((*portInputRegister(port) & bit) == stateMask) {
    2e12:	fe 01       	movw	r30, r28
    2e14:	45 91       	lpm	r20, Z+
    2e16:	54 91       	lpm	r21, Z
    2e18:	fa 01       	movw	r30, r20
    2e1a:	40 81       	ld	r20, Z
    2e1c:	4b 21       	and	r20, r11
    2e1e:	a4 12       	cpse	r10, r20
    2e20:	24 c0       	rjmp	.+72     	; 0x2e6a <pulseIn+0xfa>
		if (numloops++ == maxloops)
    2e22:	80 17       	cp	r24, r16
    2e24:	91 07       	cpc	r25, r17
    2e26:	a2 07       	cpc	r26, r18
    2e28:	b3 07       	cpc	r27, r19
    2e2a:	09 f4       	brne	.+2      	; 0x2e2e <pulseIn+0xbe>
    2e2c:	55 c0       	rjmp	.+170    	; 0x2ed8 <pulseIn+0x168>
    2e2e:	c1 2c       	mov	r12, r1
    2e30:	d1 2c       	mov	r13, r1
    2e32:	76 01       	movw	r14, r12
    2e34:	0c c0       	rjmp	.+24     	; 0x2e4e <pulseIn+0xde>
    2e36:	ac 01       	movw	r20, r24
    2e38:	bd 01       	movw	r22, r26
    2e3a:	4c 0d       	add	r20, r12
    2e3c:	5d 1d       	adc	r21, r13
    2e3e:	6e 1d       	adc	r22, r14
    2e40:	7f 1d       	adc	r23, r15
    2e42:	04 17       	cp	r16, r20
    2e44:	15 07       	cpc	r17, r21
    2e46:	26 07       	cpc	r18, r22
    2e48:	37 07       	cpc	r19, r23
    2e4a:	09 f4       	brne	.+2      	; 0x2e4e <pulseIn+0xde>
    2e4c:	49 c0       	rjmp	.+146    	; 0x2ee0 <pulseIn+0x170>
			return 0;
		width++;
    2e4e:	ff ef       	ldi	r31, 0xFF	; 255
    2e50:	cf 1a       	sub	r12, r31
    2e52:	df 0a       	sbc	r13, r31
    2e54:	ef 0a       	sbc	r14, r31
    2e56:	ff 0a       	sbc	r15, r31
	while ((*portInputRegister(port) & bit) != stateMask)
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to stop
	while ((*portInputRegister(port) & bit) == stateMask) {
    2e58:	fe 01       	movw	r30, r28
    2e5a:	45 91       	lpm	r20, Z+
    2e5c:	54 91       	lpm	r21, Z
    2e5e:	fa 01       	movw	r30, r20
    2e60:	40 81       	ld	r20, Z
    2e62:	4b 21       	and	r20, r11
    2e64:	a4 16       	cp	r10, r20
    2e66:	39 f3       	breq	.-50     	; 0x2e36 <pulseIn+0xc6>
    2e68:	03 c0       	rjmp	.+6      	; 0x2e70 <pulseIn+0x100>
    2e6a:	c1 2c       	mov	r12, r1
    2e6c:	d1 2c       	mov	r13, r1
    2e6e:	76 01       	movw	r14, r12

	// convert the reading to microseconds. The loop has been determined
	// to be 20 clock cycles long and have about 16 clocks between the edge
	// and the start of the loop. There will be some error introduced by
	// the interrupt handlers.
	return clockCyclesToMicroseconds(width * 21 + 16); 
    2e70:	d7 01       	movw	r26, r14
    2e72:	c6 01       	movw	r24, r12
    2e74:	88 0f       	add	r24, r24
    2e76:	99 1f       	adc	r25, r25
    2e78:	aa 1f       	adc	r26, r26
    2e7a:	bb 1f       	adc	r27, r27
    2e7c:	88 0f       	add	r24, r24
    2e7e:	99 1f       	adc	r25, r25
    2e80:	aa 1f       	adc	r26, r26
    2e82:	bb 1f       	adc	r27, r27
    2e84:	ac 01       	movw	r20, r24
    2e86:	bd 01       	movw	r22, r26
    2e88:	44 0f       	add	r20, r20
    2e8a:	55 1f       	adc	r21, r21
    2e8c:	66 1f       	adc	r22, r22
    2e8e:	77 1f       	adc	r23, r23
    2e90:	44 0f       	add	r20, r20
    2e92:	55 1f       	adc	r21, r21
    2e94:	66 1f       	adc	r22, r22
    2e96:	77 1f       	adc	r23, r23
    2e98:	84 0f       	add	r24, r20
    2e9a:	95 1f       	adc	r25, r21
    2e9c:	a6 1f       	adc	r26, r22
    2e9e:	b7 1f       	adc	r27, r23
    2ea0:	c8 0e       	add	r12, r24
    2ea2:	d9 1e       	adc	r13, r25
    2ea4:	ea 1e       	adc	r14, r26
    2ea6:	fb 1e       	adc	r15, r27
    2ea8:	f0 e1       	ldi	r31, 0x10	; 16
    2eaa:	cf 0e       	add	r12, r31
    2eac:	d1 1c       	adc	r13, r1
    2eae:	e1 1c       	adc	r14, r1
    2eb0:	f1 1c       	adc	r15, r1
    2eb2:	c7 01       	movw	r24, r14
    2eb4:	b6 01       	movw	r22, r12
    2eb6:	68 94       	set
    2eb8:	13 f8       	bld	r1, 3
    2eba:	96 95       	lsr	r25
    2ebc:	87 95       	ror	r24
    2ebe:	77 95       	ror	r23
    2ec0:	67 95       	ror	r22
    2ec2:	16 94       	lsr	r1
    2ec4:	d1 f7       	brne	.-12     	; 0x2eba <pulseIn+0x14a>
    2ec6:	0f c0       	rjmp	.+30     	; 0x2ee6 <pulseIn+0x176>
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
	
	// wait for any previous pulse to end
	while ((*portInputRegister(port) & bit) == stateMask)
		if (numloops++ == maxloops)
			return 0;
    2ec8:	60 e0       	ldi	r22, 0x00	; 0
    2eca:	70 e0       	ldi	r23, 0x00	; 0
    2ecc:	cb 01       	movw	r24, r22
    2ece:	0b c0       	rjmp	.+22     	; 0x2ee6 <pulseIn+0x176>
	
	// wait for the pulse to start
	while ((*portInputRegister(port) & bit) != stateMask)
		if (numloops++ == maxloops)
			return 0;
    2ed0:	60 e0       	ldi	r22, 0x00	; 0
    2ed2:	70 e0       	ldi	r23, 0x00	; 0
    2ed4:	cb 01       	movw	r24, r22
    2ed6:	07 c0       	rjmp	.+14     	; 0x2ee6 <pulseIn+0x176>
	
	// wait for the pulse to stop
	while ((*portInputRegister(port) & bit) == stateMask) {
		if (numloops++ == maxloops)
			return 0;
    2ed8:	60 e0       	ldi	r22, 0x00	; 0
    2eda:	70 e0       	ldi	r23, 0x00	; 0
    2edc:	cb 01       	movw	r24, r22
    2ede:	03 c0       	rjmp	.+6      	; 0x2ee6 <pulseIn+0x176>
    2ee0:	60 e0       	ldi	r22, 0x00	; 0
    2ee2:	70 e0       	ldi	r23, 0x00	; 0
    2ee4:	cb 01       	movw	r24, r22
	// convert the reading to microseconds. The loop has been determined
	// to be 20 clock cycles long and have about 16 clocks between the edge
	// and the start of the loop. There will be some error introduced by
	// the interrupt handlers.
	return clockCyclesToMicroseconds(width * 21 + 16); 
}
    2ee6:	df 91       	pop	r29
    2ee8:	cf 91       	pop	r28
    2eea:	1f 91       	pop	r17
    2eec:	0f 91       	pop	r16
    2eee:	ff 90       	pop	r15
    2ef0:	ef 90       	pop	r14
    2ef2:	df 90       	pop	r13
    2ef4:	cf 90       	pop	r12
    2ef6:	bf 90       	pop	r11
    2ef8:	af 90       	pop	r10
    2efa:	08 95       	ret

00002efc <_ZN6StringD1Ev>:
			buffer[len] = 0;
			memcpy(buffer + index, replace.buffer, replace.len);
			index--;
		}
	}
}
    2efc:	fc 01       	movw	r30, r24
    2efe:	80 81       	ld	r24, Z
    2f00:	91 81       	ldd	r25, Z+1	; 0x01
    2f02:	0c 94 c6 b0 	jmp	0x1618c	; 0x1618c <free>

00002f06 <_ZN6String10invalidateEv>:
    2f06:	cf 93       	push	r28
    2f08:	df 93       	push	r29
    2f0a:	ec 01       	movw	r28, r24
    2f0c:	88 81       	ld	r24, Y
    2f0e:	99 81       	ldd	r25, Y+1	; 0x01
    2f10:	00 97       	sbiw	r24, 0x00	; 0
    2f12:	11 f0       	breq	.+4      	; 0x2f18 <_ZN6String10invalidateEv+0x12>
    2f14:	0e 94 c6 b0 	call	0x1618c	; 0x1618c <free>
    2f18:	19 82       	std	Y+1, r1	; 0x01
    2f1a:	18 82       	st	Y, r1
    2f1c:	1d 82       	std	Y+5, r1	; 0x05
    2f1e:	1c 82       	std	Y+4, r1	; 0x04
    2f20:	1b 82       	std	Y+3, r1	; 0x03
    2f22:	1a 82       	std	Y+2, r1	; 0x02
    2f24:	df 91       	pop	r29
    2f26:	cf 91       	pop	r28
    2f28:	08 95       	ret

00002f2a <_ZN6String12changeBufferEj>:
    2f2a:	0f 93       	push	r16
    2f2c:	1f 93       	push	r17
    2f2e:	cf 93       	push	r28
    2f30:	df 93       	push	r29
    2f32:	ec 01       	movw	r28, r24
    2f34:	8b 01       	movw	r16, r22
    2f36:	6f 5f       	subi	r22, 0xFF	; 255
    2f38:	7f 4f       	sbci	r23, 0xFF	; 255
    2f3a:	88 81       	ld	r24, Y
    2f3c:	99 81       	ldd	r25, Y+1	; 0x01
    2f3e:	0e 94 55 b1 	call	0x162aa	; 0x162aa <realloc>
    2f42:	00 97       	sbiw	r24, 0x00	; 0
    2f44:	31 f0       	breq	.+12     	; 0x2f52 <_ZN6String12changeBufferEj+0x28>
    2f46:	99 83       	std	Y+1, r25	; 0x01
    2f48:	88 83       	st	Y, r24
    2f4a:	1b 83       	std	Y+3, r17	; 0x03
    2f4c:	0a 83       	std	Y+2, r16	; 0x02
    2f4e:	81 e0       	ldi	r24, 0x01	; 1
    2f50:	01 c0       	rjmp	.+2      	; 0x2f54 <_ZN6String12changeBufferEj+0x2a>
    2f52:	80 e0       	ldi	r24, 0x00	; 0
    2f54:	df 91       	pop	r29
    2f56:	cf 91       	pop	r28
    2f58:	1f 91       	pop	r17
    2f5a:	0f 91       	pop	r16
    2f5c:	08 95       	ret

00002f5e <_ZN6String7reserveEj>:
    2f5e:	cf 93       	push	r28
    2f60:	df 93       	push	r29
    2f62:	ec 01       	movw	r28, r24
    2f64:	88 81       	ld	r24, Y
    2f66:	99 81       	ldd	r25, Y+1	; 0x01
    2f68:	89 2b       	or	r24, r25
    2f6a:	29 f0       	breq	.+10     	; 0x2f76 <_ZN6String7reserveEj+0x18>
    2f6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f6e:	9b 81       	ldd	r25, Y+3	; 0x03
    2f70:	86 17       	cp	r24, r22
    2f72:	97 07       	cpc	r25, r23
    2f74:	58 f4       	brcc	.+22     	; 0x2f8c <_ZN6String7reserveEj+0x2e>
    2f76:	ce 01       	movw	r24, r28
    2f78:	d8 df       	rcall	.-80     	; 0x2f2a <_ZN6String12changeBufferEj>
    2f7a:	88 23       	and	r24, r24
    2f7c:	41 f0       	breq	.+16     	; 0x2f8e <_ZN6String7reserveEj+0x30>
    2f7e:	8c 81       	ldd	r24, Y+4	; 0x04
    2f80:	9d 81       	ldd	r25, Y+5	; 0x05
    2f82:	89 2b       	or	r24, r25
    2f84:	19 f4       	brne	.+6      	; 0x2f8c <_ZN6String7reserveEj+0x2e>
    2f86:	e8 81       	ld	r30, Y
    2f88:	f9 81       	ldd	r31, Y+1	; 0x01
    2f8a:	10 82       	st	Z, r1
    2f8c:	81 e0       	ldi	r24, 0x01	; 1
    2f8e:	df 91       	pop	r29
    2f90:	cf 91       	pop	r28
    2f92:	08 95       	ret

00002f94 <_ZN6String4copyEPKcj>:
    2f94:	ef 92       	push	r14
    2f96:	ff 92       	push	r15
    2f98:	0f 93       	push	r16
    2f9a:	1f 93       	push	r17
    2f9c:	cf 93       	push	r28
    2f9e:	df 93       	push	r29
    2fa0:	ec 01       	movw	r28, r24
    2fa2:	7b 01       	movw	r14, r22
    2fa4:	8a 01       	movw	r16, r20
    2fa6:	ba 01       	movw	r22, r20
    2fa8:	da df       	rcall	.-76     	; 0x2f5e <_ZN6String7reserveEj>
    2faa:	81 11       	cpse	r24, r1
    2fac:	03 c0       	rjmp	.+6      	; 0x2fb4 <_ZN6String4copyEPKcj+0x20>
    2fae:	ce 01       	movw	r24, r28
    2fb0:	aa df       	rcall	.-172    	; 0x2f06 <_ZN6String10invalidateEv>
    2fb2:	07 c0       	rjmp	.+14     	; 0x2fc2 <_ZN6String4copyEPKcj+0x2e>
    2fb4:	1d 83       	std	Y+5, r17	; 0x05
    2fb6:	0c 83       	std	Y+4, r16	; 0x04
    2fb8:	b7 01       	movw	r22, r14
    2fba:	88 81       	ld	r24, Y
    2fbc:	99 81       	ldd	r25, Y+1	; 0x01
    2fbe:	0e 94 77 b5 	call	0x16aee	; 0x16aee <strcpy>
    2fc2:	ce 01       	movw	r24, r28
    2fc4:	df 91       	pop	r29
    2fc6:	cf 91       	pop	r28
    2fc8:	1f 91       	pop	r17
    2fca:	0f 91       	pop	r16
    2fcc:	ff 90       	pop	r15
    2fce:	ef 90       	pop	r14
    2fd0:	08 95       	ret

00002fd2 <_ZN6StringC1EPKc>:
    2fd2:	fc 01       	movw	r30, r24
    2fd4:	11 82       	std	Z+1, r1	; 0x01
    2fd6:	10 82       	st	Z, r1
    2fd8:	13 82       	std	Z+3, r1	; 0x03
    2fda:	12 82       	std	Z+2, r1	; 0x02
    2fdc:	15 82       	std	Z+5, r1	; 0x05
    2fde:	14 82       	std	Z+4, r1	; 0x04
    2fe0:	61 15       	cp	r22, r1
    2fe2:	71 05       	cpc	r23, r1
    2fe4:	51 f0       	breq	.+20     	; 0x2ffa <_ZN6StringC1EPKc+0x28>
    2fe6:	fb 01       	movw	r30, r22
    2fe8:	01 90       	ld	r0, Z+
    2fea:	00 20       	and	r0, r0
    2fec:	e9 f7       	brne	.-6      	; 0x2fe8 <_ZN6StringC1EPKc+0x16>
    2fee:	af 01       	movw	r20, r30
    2ff0:	41 50       	subi	r20, 0x01	; 1
    2ff2:	51 09       	sbc	r21, r1
    2ff4:	46 1b       	sub	r20, r22
    2ff6:	57 0b       	sbc	r21, r23
    2ff8:	cd cf       	rjmp	.-102    	; 0x2f94 <_ZN6String4copyEPKcj>
    2ffa:	08 95       	ret

00002ffc <_ZN6String4copyEPK19__FlashStringHelperj>:
    2ffc:	ef 92       	push	r14
    2ffe:	ff 92       	push	r15
    3000:	0f 93       	push	r16
    3002:	1f 93       	push	r17
    3004:	cf 93       	push	r28
    3006:	df 93       	push	r29
    3008:	ec 01       	movw	r28, r24
    300a:	7b 01       	movw	r14, r22
    300c:	8a 01       	movw	r16, r20
    300e:	ba 01       	movw	r22, r20
    3010:	a6 df       	rcall	.-180    	; 0x2f5e <_ZN6String7reserveEj>
    3012:	81 11       	cpse	r24, r1
    3014:	03 c0       	rjmp	.+6      	; 0x301c <_ZN6String4copyEPK19__FlashStringHelperj+0x20>
    3016:	ce 01       	movw	r24, r28
    3018:	76 df       	rcall	.-276    	; 0x2f06 <_ZN6String10invalidateEv>
    301a:	07 c0       	rjmp	.+14     	; 0x302a <_ZN6String4copyEPK19__FlashStringHelperj+0x2e>
    301c:	1d 83       	std	Y+5, r17	; 0x05
    301e:	0c 83       	std	Y+4, r16	; 0x04
    3020:	b7 01       	movw	r22, r14
    3022:	88 81       	ld	r24, Y
    3024:	99 81       	ldd	r25, Y+1	; 0x01
    3026:	0e 94 0b b5 	call	0x16a16	; 0x16a16 <strcpy_P>
    302a:	ce 01       	movw	r24, r28
    302c:	df 91       	pop	r29
    302e:	cf 91       	pop	r28
    3030:	1f 91       	pop	r17
    3032:	0f 91       	pop	r16
    3034:	ff 90       	pop	r15
    3036:	ef 90       	pop	r14
    3038:	08 95       	ret

0000303a <_ZN6StringaSERKS_>:
    303a:	cf 93       	push	r28
    303c:	df 93       	push	r29
    303e:	ec 01       	movw	r28, r24
    3040:	fb 01       	movw	r30, r22
    3042:	86 17       	cp	r24, r22
    3044:	97 07       	cpc	r25, r23
    3046:	51 f0       	breq	.+20     	; 0x305c <_ZN6StringaSERKS_+0x22>
    3048:	60 81       	ld	r22, Z
    304a:	71 81       	ldd	r23, Z+1	; 0x01
    304c:	61 15       	cp	r22, r1
    304e:	71 05       	cpc	r23, r1
    3050:	21 f0       	breq	.+8      	; 0x305a <_ZN6StringaSERKS_+0x20>
    3052:	44 81       	ldd	r20, Z+4	; 0x04
    3054:	55 81       	ldd	r21, Z+5	; 0x05
    3056:	9e df       	rcall	.-196    	; 0x2f94 <_ZN6String4copyEPKcj>
    3058:	01 c0       	rjmp	.+2      	; 0x305c <_ZN6StringaSERKS_+0x22>
    305a:	55 df       	rcall	.-342    	; 0x2f06 <_ZN6String10invalidateEv>
    305c:	ce 01       	movw	r24, r28
    305e:	df 91       	pop	r29
    3060:	cf 91       	pop	r28
    3062:	08 95       	ret

00003064 <_ZN6StringC1ERKS_>:
    3064:	fc 01       	movw	r30, r24
    3066:	11 82       	std	Z+1, r1	; 0x01
    3068:	10 82       	st	Z, r1
    306a:	13 82       	std	Z+3, r1	; 0x03
    306c:	12 82       	std	Z+2, r1	; 0x02
    306e:	15 82       	std	Z+5, r1	; 0x05
    3070:	14 82       	std	Z+4, r1	; 0x04
    3072:	e3 cf       	rjmp	.-58     	; 0x303a <_ZN6StringaSERKS_>

00003074 <_ZN6StringaSEPKc>:
    3074:	cf 93       	push	r28
    3076:	df 93       	push	r29
    3078:	ec 01       	movw	r28, r24
    307a:	61 15       	cp	r22, r1
    307c:	71 05       	cpc	r23, r1
    307e:	59 f0       	breq	.+22     	; 0x3096 <_ZN6StringaSEPKc+0x22>
    3080:	fb 01       	movw	r30, r22
    3082:	01 90       	ld	r0, Z+
    3084:	00 20       	and	r0, r0
    3086:	e9 f7       	brne	.-6      	; 0x3082 <_ZN6StringaSEPKc+0xe>
    3088:	af 01       	movw	r20, r30
    308a:	41 50       	subi	r20, 0x01	; 1
    308c:	51 09       	sbc	r21, r1
    308e:	46 1b       	sub	r20, r22
    3090:	57 0b       	sbc	r21, r23
    3092:	80 df       	rcall	.-256    	; 0x2f94 <_ZN6String4copyEPKcj>
    3094:	01 c0       	rjmp	.+2      	; 0x3098 <_ZN6StringaSEPKc+0x24>
    3096:	37 df       	rcall	.-402    	; 0x2f06 <_ZN6String10invalidateEv>
    3098:	ce 01       	movw	r24, r28
    309a:	df 91       	pop	r29
    309c:	cf 91       	pop	r28
    309e:	08 95       	ret

000030a0 <_ZN6StringC1Ehh>:
    30a0:	0f 93       	push	r16
    30a2:	1f 93       	push	r17
    30a4:	cf 93       	push	r28
    30a6:	df 93       	push	r29
    30a8:	cd b7       	in	r28, 0x3d	; 61
    30aa:	de b7       	in	r29, 0x3e	; 62
    30ac:	29 97       	sbiw	r28, 0x09	; 9
    30ae:	0f b6       	in	r0, 0x3f	; 63
    30b0:	f8 94       	cli
    30b2:	de bf       	out	0x3e, r29	; 62
    30b4:	0f be       	out	0x3f, r0	; 63
    30b6:	cd bf       	out	0x3d, r28	; 61
    30b8:	8c 01       	movw	r16, r24
    30ba:	86 2f       	mov	r24, r22
    30bc:	f8 01       	movw	r30, r16
    30be:	11 82       	std	Z+1, r1	; 0x01
    30c0:	10 82       	st	Z, r1
    30c2:	13 82       	std	Z+3, r1	; 0x03
    30c4:	12 82       	std	Z+2, r1	; 0x02
    30c6:	15 82       	std	Z+5, r1	; 0x05
    30c8:	14 82       	std	Z+4, r1	; 0x04
    30ca:	50 e0       	ldi	r21, 0x00	; 0
    30cc:	be 01       	movw	r22, r28
    30ce:	6f 5f       	subi	r22, 0xFF	; 255
    30d0:	7f 4f       	sbci	r23, 0xFF	; 255
    30d2:	90 e0       	ldi	r25, 0x00	; 0
    30d4:	0e 94 fa b5 	call	0x16bf4	; 0x16bf4 <utoa>
    30d8:	be 01       	movw	r22, r28
    30da:	6f 5f       	subi	r22, 0xFF	; 255
    30dc:	7f 4f       	sbci	r23, 0xFF	; 255
    30de:	c8 01       	movw	r24, r16
    30e0:	c9 df       	rcall	.-110    	; 0x3074 <_ZN6StringaSEPKc>
    30e2:	29 96       	adiw	r28, 0x09	; 9
    30e4:	0f b6       	in	r0, 0x3f	; 63
    30e6:	f8 94       	cli
    30e8:	de bf       	out	0x3e, r29	; 62
    30ea:	0f be       	out	0x3f, r0	; 63
    30ec:	cd bf       	out	0x3d, r28	; 61
    30ee:	df 91       	pop	r29
    30f0:	cf 91       	pop	r28
    30f2:	1f 91       	pop	r17
    30f4:	0f 91       	pop	r16
    30f6:	08 95       	ret

000030f8 <_ZN6StringC1Eih>:
    30f8:	0f 93       	push	r16
    30fa:	1f 93       	push	r17
    30fc:	cf 93       	push	r28
    30fe:	df 93       	push	r29
    3100:	cd b7       	in	r28, 0x3d	; 61
    3102:	de b7       	in	r29, 0x3e	; 62
    3104:	62 97       	sbiw	r28, 0x12	; 18
    3106:	0f b6       	in	r0, 0x3f	; 63
    3108:	f8 94       	cli
    310a:	de bf       	out	0x3e, r29	; 62
    310c:	0f be       	out	0x3f, r0	; 63
    310e:	cd bf       	out	0x3d, r28	; 61
    3110:	8c 01       	movw	r16, r24
    3112:	cb 01       	movw	r24, r22
    3114:	f8 01       	movw	r30, r16
    3116:	11 82       	std	Z+1, r1	; 0x01
    3118:	10 82       	st	Z, r1
    311a:	13 82       	std	Z+3, r1	; 0x03
    311c:	12 82       	std	Z+2, r1	; 0x02
    311e:	15 82       	std	Z+5, r1	; 0x05
    3120:	14 82       	std	Z+4, r1	; 0x04
    3122:	50 e0       	ldi	r21, 0x00	; 0
    3124:	be 01       	movw	r22, r28
    3126:	6f 5f       	subi	r22, 0xFF	; 255
    3128:	7f 4f       	sbci	r23, 0xFF	; 255
    312a:	0e 94 9b b5 	call	0x16b36	; 0x16b36 <itoa>
    312e:	be 01       	movw	r22, r28
    3130:	6f 5f       	subi	r22, 0xFF	; 255
    3132:	7f 4f       	sbci	r23, 0xFF	; 255
    3134:	c8 01       	movw	r24, r16
    3136:	9e df       	rcall	.-196    	; 0x3074 <_ZN6StringaSEPKc>
    3138:	62 96       	adiw	r28, 0x12	; 18
    313a:	0f b6       	in	r0, 0x3f	; 63
    313c:	f8 94       	cli
    313e:	de bf       	out	0x3e, r29	; 62
    3140:	0f be       	out	0x3f, r0	; 63
    3142:	cd bf       	out	0x3d, r28	; 61
    3144:	df 91       	pop	r29
    3146:	cf 91       	pop	r28
    3148:	1f 91       	pop	r17
    314a:	0f 91       	pop	r16
    314c:	08 95       	ret

0000314e <_ZN6StringC1Ejh>:
    314e:	0f 93       	push	r16
    3150:	1f 93       	push	r17
    3152:	cf 93       	push	r28
    3154:	df 93       	push	r29
    3156:	cd b7       	in	r28, 0x3d	; 61
    3158:	de b7       	in	r29, 0x3e	; 62
    315a:	61 97       	sbiw	r28, 0x11	; 17
    315c:	0f b6       	in	r0, 0x3f	; 63
    315e:	f8 94       	cli
    3160:	de bf       	out	0x3e, r29	; 62
    3162:	0f be       	out	0x3f, r0	; 63
    3164:	cd bf       	out	0x3d, r28	; 61
    3166:	8c 01       	movw	r16, r24
    3168:	cb 01       	movw	r24, r22
    316a:	f8 01       	movw	r30, r16
    316c:	11 82       	std	Z+1, r1	; 0x01
    316e:	10 82       	st	Z, r1
    3170:	13 82       	std	Z+3, r1	; 0x03
    3172:	12 82       	std	Z+2, r1	; 0x02
    3174:	15 82       	std	Z+5, r1	; 0x05
    3176:	14 82       	std	Z+4, r1	; 0x04
    3178:	50 e0       	ldi	r21, 0x00	; 0
    317a:	be 01       	movw	r22, r28
    317c:	6f 5f       	subi	r22, 0xFF	; 255
    317e:	7f 4f       	sbci	r23, 0xFF	; 255
    3180:	0e 94 fa b5 	call	0x16bf4	; 0x16bf4 <utoa>
    3184:	be 01       	movw	r22, r28
    3186:	6f 5f       	subi	r22, 0xFF	; 255
    3188:	7f 4f       	sbci	r23, 0xFF	; 255
    318a:	c8 01       	movw	r24, r16
    318c:	73 df       	rcall	.-282    	; 0x3074 <_ZN6StringaSEPKc>
    318e:	61 96       	adiw	r28, 0x11	; 17
    3190:	0f b6       	in	r0, 0x3f	; 63
    3192:	f8 94       	cli
    3194:	de bf       	out	0x3e, r29	; 62
    3196:	0f be       	out	0x3f, r0	; 63
    3198:	cd bf       	out	0x3d, r28	; 61
    319a:	df 91       	pop	r29
    319c:	cf 91       	pop	r28
    319e:	1f 91       	pop	r17
    31a0:	0f 91       	pop	r16
    31a2:	08 95       	ret

000031a4 <_ZN6StringC1Elh>:
    31a4:	0f 93       	push	r16
    31a6:	1f 93       	push	r17
    31a8:	cf 93       	push	r28
    31aa:	df 93       	push	r29
    31ac:	cd b7       	in	r28, 0x3d	; 61
    31ae:	de b7       	in	r29, 0x3e	; 62
    31b0:	a2 97       	sbiw	r28, 0x22	; 34
    31b2:	0f b6       	in	r0, 0x3f	; 63
    31b4:	f8 94       	cli
    31b6:	de bf       	out	0x3e, r29	; 62
    31b8:	0f be       	out	0x3f, r0	; 63
    31ba:	cd bf       	out	0x3d, r28	; 61
    31bc:	8c 01       	movw	r16, r24
    31be:	cb 01       	movw	r24, r22
    31c0:	ba 01       	movw	r22, r20
    31c2:	f8 01       	movw	r30, r16
    31c4:	11 82       	std	Z+1, r1	; 0x01
    31c6:	10 82       	st	Z, r1
    31c8:	13 82       	std	Z+3, r1	; 0x03
    31ca:	12 82       	std	Z+2, r1	; 0x02
    31cc:	15 82       	std	Z+5, r1	; 0x05
    31ce:	14 82       	std	Z+4, r1	; 0x04
    31d0:	30 e0       	ldi	r19, 0x00	; 0
    31d2:	ae 01       	movw	r20, r28
    31d4:	4f 5f       	subi	r20, 0xFF	; 255
    31d6:	5f 4f       	sbci	r21, 0xFF	; 255
    31d8:	0e 94 af b5 	call	0x16b5e	; 0x16b5e <ltoa>
    31dc:	be 01       	movw	r22, r28
    31de:	6f 5f       	subi	r22, 0xFF	; 255
    31e0:	7f 4f       	sbci	r23, 0xFF	; 255
    31e2:	c8 01       	movw	r24, r16
    31e4:	47 df       	rcall	.-370    	; 0x3074 <_ZN6StringaSEPKc>
    31e6:	a2 96       	adiw	r28, 0x22	; 34
    31e8:	0f b6       	in	r0, 0x3f	; 63
    31ea:	f8 94       	cli
    31ec:	de bf       	out	0x3e, r29	; 62
    31ee:	0f be       	out	0x3f, r0	; 63
    31f0:	cd bf       	out	0x3d, r28	; 61
    31f2:	df 91       	pop	r29
    31f4:	cf 91       	pop	r28
    31f6:	1f 91       	pop	r17
    31f8:	0f 91       	pop	r16
    31fa:	08 95       	ret

000031fc <_ZN6StringC1Emh>:
    31fc:	0f 93       	push	r16
    31fe:	1f 93       	push	r17
    3200:	cf 93       	push	r28
    3202:	df 93       	push	r29
    3204:	cd b7       	in	r28, 0x3d	; 61
    3206:	de b7       	in	r29, 0x3e	; 62
    3208:	a1 97       	sbiw	r28, 0x21	; 33
    320a:	0f b6       	in	r0, 0x3f	; 63
    320c:	f8 94       	cli
    320e:	de bf       	out	0x3e, r29	; 62
    3210:	0f be       	out	0x3f, r0	; 63
    3212:	cd bf       	out	0x3d, r28	; 61
    3214:	8c 01       	movw	r16, r24
    3216:	cb 01       	movw	r24, r22
    3218:	ba 01       	movw	r22, r20
    321a:	f8 01       	movw	r30, r16
    321c:	11 82       	std	Z+1, r1	; 0x01
    321e:	10 82       	st	Z, r1
    3220:	13 82       	std	Z+3, r1	; 0x03
    3222:	12 82       	std	Z+2, r1	; 0x02
    3224:	15 82       	std	Z+5, r1	; 0x05
    3226:	14 82       	std	Z+4, r1	; 0x04
    3228:	30 e0       	ldi	r19, 0x00	; 0
    322a:	ae 01       	movw	r20, r28
    322c:	4f 5f       	subi	r20, 0xFF	; 255
    322e:	5f 4f       	sbci	r21, 0xFF	; 255
    3230:	0e 94 cf b5 	call	0x16b9e	; 0x16b9e <ultoa>
    3234:	be 01       	movw	r22, r28
    3236:	6f 5f       	subi	r22, 0xFF	; 255
    3238:	7f 4f       	sbci	r23, 0xFF	; 255
    323a:	c8 01       	movw	r24, r16
    323c:	1b df       	rcall	.-458    	; 0x3074 <_ZN6StringaSEPKc>
    323e:	a1 96       	adiw	r28, 0x21	; 33
    3240:	0f b6       	in	r0, 0x3f	; 63
    3242:	f8 94       	cli
    3244:	de bf       	out	0x3e, r29	; 62
    3246:	0f be       	out	0x3f, r0	; 63
    3248:	cd bf       	out	0x3d, r28	; 61
    324a:	df 91       	pop	r29
    324c:	cf 91       	pop	r28
    324e:	1f 91       	pop	r17
    3250:	0f 91       	pop	r16
    3252:	08 95       	ret

00003254 <_ZN6StringaSEPK19__FlashStringHelper>:
    3254:	0f 93       	push	r16
    3256:	1f 93       	push	r17
    3258:	cf 93       	push	r28
    325a:	df 93       	push	r29
    325c:	1f 92       	push	r1
    325e:	1f 92       	push	r1
    3260:	cd b7       	in	r28, 0x3d	; 61
    3262:	de b7       	in	r29, 0x3e	; 62
    3264:	8c 01       	movw	r16, r24
    3266:	61 15       	cp	r22, r1
    3268:	71 05       	cpc	r23, r1
    326a:	59 f0       	breq	.+22     	; 0x3282 <_ZN6StringaSEPK19__FlashStringHelper+0x2e>
    326c:	cb 01       	movw	r24, r22
    326e:	69 83       	std	Y+1, r22	; 0x01
    3270:	7a 83       	std	Y+2, r23	; 0x02
    3272:	0e 94 12 b5 	call	0x16a24	; 0x16a24 <__strlen_P>
    3276:	ac 01       	movw	r20, r24
    3278:	69 81       	ldd	r22, Y+1	; 0x01
    327a:	7a 81       	ldd	r23, Y+2	; 0x02
    327c:	c8 01       	movw	r24, r16
    327e:	be de       	rcall	.-644    	; 0x2ffc <_ZN6String4copyEPK19__FlashStringHelperj>
    3280:	01 c0       	rjmp	.+2      	; 0x3284 <_ZN6StringaSEPK19__FlashStringHelper+0x30>
    3282:	41 de       	rcall	.-894    	; 0x2f06 <_ZN6String10invalidateEv>
    3284:	c8 01       	movw	r24, r16
    3286:	0f 90       	pop	r0
    3288:	0f 90       	pop	r0
    328a:	df 91       	pop	r29
    328c:	cf 91       	pop	r28
    328e:	1f 91       	pop	r17
    3290:	0f 91       	pop	r16
    3292:	08 95       	ret

00003294 <_ZN6StringC1EPK19__FlashStringHelper>:
    3294:	fc 01       	movw	r30, r24
    3296:	11 82       	std	Z+1, r1	; 0x01
    3298:	10 82       	st	Z, r1
    329a:	13 82       	std	Z+3, r1	; 0x03
    329c:	12 82       	std	Z+2, r1	; 0x02
    329e:	15 82       	std	Z+5, r1	; 0x05
    32a0:	14 82       	std	Z+4, r1	; 0x04
    32a2:	d8 cf       	rjmp	.-80     	; 0x3254 <_ZN6StringaSEPK19__FlashStringHelper>

000032a4 <_ZN6String6concatEPKcj>:
    32a4:	ef 92       	push	r14
    32a6:	ff 92       	push	r15
    32a8:	0f 93       	push	r16
    32aa:	1f 93       	push	r17
    32ac:	cf 93       	push	r28
    32ae:	df 93       	push	r29
    32b0:	ec 01       	movw	r28, r24
    32b2:	7b 01       	movw	r14, r22
    32b4:	0c 81       	ldd	r16, Y+4	; 0x04
    32b6:	1d 81       	ldd	r17, Y+5	; 0x05
    32b8:	61 15       	cp	r22, r1
    32ba:	71 05       	cpc	r23, r1
    32bc:	11 f4       	brne	.+4      	; 0x32c2 <_ZN6String6concatEPKcj+0x1e>
    32be:	80 e0       	ldi	r24, 0x00	; 0
    32c0:	15 c0       	rjmp	.+42     	; 0x32ec <_ZN6String6concatEPKcj+0x48>
    32c2:	41 15       	cp	r20, r1
    32c4:	51 05       	cpc	r21, r1
    32c6:	89 f0       	breq	.+34     	; 0x32ea <_ZN6String6concatEPKcj+0x46>
    32c8:	04 0f       	add	r16, r20
    32ca:	15 1f       	adc	r17, r21
    32cc:	b8 01       	movw	r22, r16
    32ce:	47 de       	rcall	.-882    	; 0x2f5e <_ZN6String7reserveEj>
    32d0:	88 23       	and	r24, r24
    32d2:	a9 f3       	breq	.-22     	; 0x32be <_ZN6String6concatEPKcj+0x1a>
    32d4:	28 81       	ld	r18, Y
    32d6:	39 81       	ldd	r19, Y+1	; 0x01
    32d8:	8c 81       	ldd	r24, Y+4	; 0x04
    32da:	9d 81       	ldd	r25, Y+5	; 0x05
    32dc:	b7 01       	movw	r22, r14
    32de:	82 0f       	add	r24, r18
    32e0:	93 1f       	adc	r25, r19
    32e2:	0e 94 77 b5 	call	0x16aee	; 0x16aee <strcpy>
    32e6:	1d 83       	std	Y+5, r17	; 0x05
    32e8:	0c 83       	std	Y+4, r16	; 0x04
    32ea:	81 e0       	ldi	r24, 0x01	; 1
    32ec:	df 91       	pop	r29
    32ee:	cf 91       	pop	r28
    32f0:	1f 91       	pop	r17
    32f2:	0f 91       	pop	r16
    32f4:	ff 90       	pop	r15
    32f6:	ef 90       	pop	r14
    32f8:	08 95       	ret

000032fa <_ZN6String6concatEPKc>:
    32fa:	61 15       	cp	r22, r1
    32fc:	71 05       	cpc	r23, r1
    32fe:	51 f0       	breq	.+20     	; 0x3314 <_ZN6String6concatEPKc+0x1a>
    3300:	fb 01       	movw	r30, r22
    3302:	01 90       	ld	r0, Z+
    3304:	00 20       	and	r0, r0
    3306:	e9 f7       	brne	.-6      	; 0x3302 <_ZN6String6concatEPKc+0x8>
    3308:	af 01       	movw	r20, r30
    330a:	41 50       	subi	r20, 0x01	; 1
    330c:	51 09       	sbc	r21, r1
    330e:	46 1b       	sub	r20, r22
    3310:	57 0b       	sbc	r21, r23
    3312:	c8 cf       	rjmp	.-112    	; 0x32a4 <_ZN6String6concatEPKcj>
    3314:	80 e0       	ldi	r24, 0x00	; 0
    3316:	08 95       	ret

00003318 <_ZN6String6concatEc>:
    3318:	cf 93       	push	r28
    331a:	df 93       	push	r29
    331c:	1f 92       	push	r1
    331e:	1f 92       	push	r1
    3320:	cd b7       	in	r28, 0x3d	; 61
    3322:	de b7       	in	r29, 0x3e	; 62
    3324:	69 83       	std	Y+1, r22	; 0x01
    3326:	1a 82       	std	Y+2, r1	; 0x02
    3328:	41 e0       	ldi	r20, 0x01	; 1
    332a:	50 e0       	ldi	r21, 0x00	; 0
    332c:	be 01       	movw	r22, r28
    332e:	6f 5f       	subi	r22, 0xFF	; 255
    3330:	7f 4f       	sbci	r23, 0xFF	; 255
    3332:	b8 df       	rcall	.-144    	; 0x32a4 <_ZN6String6concatEPKcj>
    3334:	0f 90       	pop	r0
    3336:	0f 90       	pop	r0
    3338:	df 91       	pop	r29
    333a:	cf 91       	pop	r28
    333c:	08 95       	ret

0000333e <_ZplRK15StringSumHelperRK6String>:
    333e:	cf 93       	push	r28
    3340:	df 93       	push	r29
    3342:	ec 01       	movw	r28, r24
    3344:	fb 01       	movw	r30, r22
    3346:	44 81       	ldd	r20, Z+4	; 0x04
    3348:	55 81       	ldd	r21, Z+5	; 0x05
    334a:	60 81       	ld	r22, Z
    334c:	71 81       	ldd	r23, Z+1	; 0x01
    334e:	aa df       	rcall	.-172    	; 0x32a4 <_ZN6String6concatEPKcj>
    3350:	81 11       	cpse	r24, r1
    3352:	02 c0       	rjmp	.+4      	; 0x3358 <_ZplRK15StringSumHelperRK6String+0x1a>
    3354:	ce 01       	movw	r24, r28
    3356:	d7 dd       	rcall	.-1106   	; 0x2f06 <_ZN6String10invalidateEv>
    3358:	ce 01       	movw	r24, r28
    335a:	df 91       	pop	r29
    335c:	cf 91       	pop	r28
    335e:	08 95       	ret

00003360 <_ZplRK15StringSumHelperPKc>:
    3360:	cf 93       	push	r28
    3362:	df 93       	push	r29
    3364:	ec 01       	movw	r28, r24
    3366:	61 15       	cp	r22, r1
    3368:	71 05       	cpc	r23, r1
    336a:	61 f0       	breq	.+24     	; 0x3384 <_ZplRK15StringSumHelperPKc+0x24>
    336c:	fb 01       	movw	r30, r22
    336e:	01 90       	ld	r0, Z+
    3370:	00 20       	and	r0, r0
    3372:	e9 f7       	brne	.-6      	; 0x336e <_ZplRK15StringSumHelperPKc+0xe>
    3374:	af 01       	movw	r20, r30
    3376:	41 50       	subi	r20, 0x01	; 1
    3378:	51 09       	sbc	r21, r1
    337a:	46 1b       	sub	r20, r22
    337c:	57 0b       	sbc	r21, r23
    337e:	92 df       	rcall	.-220    	; 0x32a4 <_ZN6String6concatEPKcj>
    3380:	81 11       	cpse	r24, r1
    3382:	02 c0       	rjmp	.+4      	; 0x3388 <_ZplRK15StringSumHelperPKc+0x28>
    3384:	ce 01       	movw	r24, r28
    3386:	bf dd       	rcall	.-1154   	; 0x2f06 <_ZN6String10invalidateEv>
    3388:	ce 01       	movw	r24, r28
    338a:	df 91       	pop	r29
    338c:	cf 91       	pop	r28
    338e:	08 95       	ret

00003390 <_ZN6StringixEj>:
    3390:	fc 01       	movw	r30, r24
    3392:	84 81       	ldd	r24, Z+4	; 0x04
    3394:	95 81       	ldd	r25, Z+5	; 0x05
    3396:	68 17       	cp	r22, r24
    3398:	79 07       	cpc	r23, r25
    339a:	20 f4       	brcc	.+8      	; 0x33a4 <_ZN6StringixEj+0x14>
    339c:	80 81       	ld	r24, Z
    339e:	91 81       	ldd	r25, Z+1	; 0x01
    33a0:	00 97       	sbiw	r24, 0x00	; 0
    33a2:	29 f4       	brne	.+10     	; 0x33ae <_ZN6StringixEj+0x1e>
    33a4:	10 92 58 25 	sts	0x2558, r1
    33a8:	88 e5       	ldi	r24, 0x58	; 88
    33aa:	95 e2       	ldi	r25, 0x25	; 37
    33ac:	08 95       	ret
    33ae:	86 0f       	add	r24, r22
    33b0:	97 1f       	adc	r25, r23
    33b2:	08 95       	ret

000033b4 <_ZNK6String8getBytesEPhjj>:
    33b4:	0f 93       	push	r16
    33b6:	1f 93       	push	r17
    33b8:	cf 93       	push	r28
    33ba:	df 93       	push	r29
    33bc:	eb 01       	movw	r28, r22
    33be:	41 15       	cp	r20, r1
    33c0:	51 05       	cpc	r21, r1
    33c2:	e9 f0       	breq	.+58     	; 0x33fe <_ZNK6String8getBytesEPhjj+0x4a>
    33c4:	20 97       	sbiw	r28, 0x00	; 0
    33c6:	d9 f0       	breq	.+54     	; 0x33fe <_ZNK6String8getBytesEPhjj+0x4a>
    33c8:	fc 01       	movw	r30, r24
    33ca:	64 81       	ldd	r22, Z+4	; 0x04
    33cc:	75 81       	ldd	r23, Z+5	; 0x05
    33ce:	26 17       	cp	r18, r22
    33d0:	37 07       	cpc	r19, r23
    33d2:	a0 f4       	brcc	.+40     	; 0x33fc <_ZNK6String8getBytesEPhjj+0x48>
    33d4:	62 1b       	sub	r22, r18
    33d6:	73 0b       	sbc	r23, r19
    33d8:	8a 01       	movw	r16, r20
    33da:	01 50       	subi	r16, 0x01	; 1
    33dc:	11 09       	sbc	r17, r1
    33de:	60 17       	cp	r22, r16
    33e0:	71 07       	cpc	r23, r17
    33e2:	08 f4       	brcc	.+2      	; 0x33e6 <_ZNK6String8getBytesEPhjj+0x32>
    33e4:	8b 01       	movw	r16, r22
    33e6:	fc 01       	movw	r30, r24
    33e8:	60 81       	ld	r22, Z
    33ea:	71 81       	ldd	r23, Z+1	; 0x01
    33ec:	62 0f       	add	r22, r18
    33ee:	73 1f       	adc	r23, r19
    33f0:	a8 01       	movw	r20, r16
    33f2:	ce 01       	movw	r24, r28
    33f4:	0e 94 8c b5 	call	0x16b18	; 0x16b18 <strncpy>
    33f8:	c0 0f       	add	r28, r16
    33fa:	d1 1f       	adc	r29, r17
    33fc:	18 82       	st	Y, r1
    33fe:	df 91       	pop	r29
    3400:	cf 91       	pop	r28
    3402:	1f 91       	pop	r17
    3404:	0f 91       	pop	r16
    3406:	08 95       	ret

00003408 <_ZNK6String7indexOfEcj>:
    3408:	cf 93       	push	r28
    340a:	df 93       	push	r29
    340c:	fc 01       	movw	r30, r24
    340e:	84 81       	ldd	r24, Z+4	; 0x04
    3410:	95 81       	ldd	r25, Z+5	; 0x05
    3412:	48 17       	cp	r20, r24
    3414:	59 07       	cpc	r21, r25
    3416:	68 f4       	brcc	.+26     	; 0x3432 <_ZNK6String7indexOfEcj+0x2a>
    3418:	c0 81       	ld	r28, Z
    341a:	d1 81       	ldd	r29, Z+1	; 0x01
    341c:	70 e0       	ldi	r23, 0x00	; 0
    341e:	ce 01       	movw	r24, r28
    3420:	84 0f       	add	r24, r20
    3422:	95 1f       	adc	r25, r21
    3424:	0e 94 63 b5 	call	0x16ac6	; 0x16ac6 <strchr>
    3428:	00 97       	sbiw	r24, 0x00	; 0
    342a:	19 f0       	breq	.+6      	; 0x3432 <_ZNK6String7indexOfEcj+0x2a>
    342c:	8c 1b       	sub	r24, r28
    342e:	9d 0b       	sbc	r25, r29
    3430:	02 c0       	rjmp	.+4      	; 0x3436 <_ZNK6String7indexOfEcj+0x2e>
    3432:	8f ef       	ldi	r24, 0xFF	; 255
    3434:	9f ef       	ldi	r25, 0xFF	; 255
    3436:	df 91       	pop	r29
    3438:	cf 91       	pop	r28
    343a:	08 95       	ret

0000343c <_ZNK6String7indexOfEc>:
    343c:	40 e0       	ldi	r20, 0x00	; 0
    343e:	50 e0       	ldi	r21, 0x00	; 0
    3440:	e3 cf       	rjmp	.-58     	; 0x3408 <_ZNK6String7indexOfEcj>

00003442 <_ZN6String6removeEjj>:
	if (index >= len) { return; }
	int count = len - index;
	remove(index, count);
}

void String::remove(unsigned int index, unsigned int count){
    3442:	cf 93       	push	r28
    3444:	df 93       	push	r29
    3446:	ec 01       	movw	r28, r24
    3448:	9b 01       	movw	r18, r22
    344a:	ba 01       	movw	r22, r20
	if (index >= len) { return; }
    344c:	4c 81       	ldd	r20, Y+4	; 0x04
    344e:	5d 81       	ldd	r21, Y+5	; 0x05
    3450:	24 17       	cp	r18, r20
    3452:	35 07       	cpc	r19, r21
    3454:	18 f5       	brcc	.+70     	; 0x349c <_ZN6String6removeEjj+0x5a>
	if (count <= 0) { return; }
    3456:	61 15       	cp	r22, r1
    3458:	71 05       	cpc	r23, r1
    345a:	01 f1       	breq	.+64     	; 0x349c <_ZN6String6removeEjj+0x5a>
	if (index + count > len) { count = len - index; }
    345c:	c9 01       	movw	r24, r18
    345e:	86 0f       	add	r24, r22
    3460:	97 1f       	adc	r25, r23
    3462:	48 17       	cp	r20, r24
    3464:	59 07       	cpc	r21, r25
    3466:	18 f4       	brcc	.+6      	; 0x346e <_ZN6String6removeEjj+0x2c>
    3468:	ba 01       	movw	r22, r20
    346a:	62 1b       	sub	r22, r18
    346c:	73 0b       	sbc	r23, r19
	char *writeTo = buffer + index;
    346e:	88 81       	ld	r24, Y
    3470:	99 81       	ldd	r25, Y+1	; 0x01
	len = len - count;
    3472:	46 1b       	sub	r20, r22
    3474:	57 0b       	sbc	r21, r23
    3476:	5d 83       	std	Y+5, r21	; 0x05
    3478:	4c 83       	std	Y+4, r20	; 0x04
	strncpy(writeTo, buffer + index + count,len - index);
    347a:	42 1b       	sub	r20, r18
    347c:	53 0b       	sbc	r21, r19
    347e:	62 0f       	add	r22, r18
    3480:	73 1f       	adc	r23, r19
    3482:	68 0f       	add	r22, r24
    3484:	79 1f       	adc	r23, r25
    3486:	82 0f       	add	r24, r18
    3488:	93 1f       	adc	r25, r19
    348a:	0e 94 8c b5 	call	0x16b18	; 0x16b18 <strncpy>
	buffer[len] = 0;
    348e:	e8 81       	ld	r30, Y
    3490:	f9 81       	ldd	r31, Y+1	; 0x01
    3492:	8c 81       	ldd	r24, Y+4	; 0x04
    3494:	9d 81       	ldd	r25, Y+5	; 0x05
    3496:	e8 0f       	add	r30, r24
    3498:	f9 1f       	adc	r31, r25
    349a:	10 82       	st	Z, r1
}
    349c:	df 91       	pop	r29
    349e:	cf 91       	pop	r28
    34a0:	08 95       	ret

000034a2 <_ZN8SPIClass5beginEv>:
  }
}

void SPIClass::setDataMode(uint8_t mode)
{
  SPCR = (SPCR & ~SPI_MODE_MASK) | mode;
    34a2:	61 e0       	ldi	r22, 0x01	; 1
    34a4:	89 e0       	ldi	r24, 0x09	; 9
    34a6:	0b dc       	rcall	.-2026   	; 0x2cbe <digitalWrite>
    34a8:	61 e0       	ldi	r22, 0x01	; 1
    34aa:	89 e0       	ldi	r24, 0x09	; 9
    34ac:	ca db       	rcall	.-2156   	; 0x2c42 <pinMode>
    34ae:	8c b5       	in	r24, 0x2c	; 44
    34b0:	80 61       	ori	r24, 0x10	; 16
    34b2:	8c bd       	out	0x2c, r24	; 44
    34b4:	8c b5       	in	r24, 0x2c	; 44
    34b6:	80 64       	ori	r24, 0x40	; 64
    34b8:	8c bd       	out	0x2c, r24	; 44
    34ba:	61 e0       	ldi	r22, 0x01	; 1
    34bc:	8c e0       	ldi	r24, 0x0C	; 12
    34be:	c1 db       	rcall	.-2174   	; 0x2c42 <pinMode>
    34c0:	61 e0       	ldi	r22, 0x01	; 1
    34c2:	8a e0       	ldi	r24, 0x0A	; 10
    34c4:	be cb       	rjmp	.-2180   	; 0x2c42 <pinMode>

000034c6 <_ZN8SPIClass15setClockDividerEh>:
}

void SPIClass::setClockDivider(uint8_t rate)
{
  SPCR = (SPCR & ~SPI_CLOCK_MASK) | (rate & SPI_CLOCK_MASK);
    34c6:	2c b5       	in	r18, 0x2c	; 44
    34c8:	98 2f       	mov	r25, r24
    34ca:	93 70       	andi	r25, 0x03	; 3
    34cc:	2c 7f       	andi	r18, 0xFC	; 252
    34ce:	92 2b       	or	r25, r18
    34d0:	9c bd       	out	0x2c, r25	; 44
  SPSR = (SPSR & ~SPI_2XCLOCK_MASK) | ((rate >> 2) & SPI_2XCLOCK_MASK);
    34d2:	9d b5       	in	r25, 0x2d	; 45
    34d4:	82 fb       	bst	r24, 2
    34d6:	88 27       	eor	r24, r24
    34d8:	80 f9       	bld	r24, 0
    34da:	9e 7f       	andi	r25, 0xFE	; 254
    34dc:	98 2b       	or	r25, r24
    34de:	9d bd       	out	0x2d, r25	; 45
    34e0:	08 95       	ret

000034e2 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    34e2:	10 92 c6 25 	sts	0x25C6, r1
    34e6:	81 e0       	ldi	r24, 0x01	; 1
    34e8:	80 93 c4 25 	sts	0x25C4, r24
    34ec:	10 92 c3 25 	sts	0x25C3, r1
    34f0:	61 e0       	ldi	r22, 0x01	; 1
    34f2:	80 e1       	ldi	r24, 0x10	; 16
    34f4:	e4 db       	rcall	.-2104   	; 0x2cbe <digitalWrite>
    34f6:	61 e0       	ldi	r22, 0x01	; 1
    34f8:	8f e0       	ldi	r24, 0x0F	; 15
    34fa:	e1 db       	rcall	.-2110   	; 0x2cbe <digitalWrite>
    34fc:	e9 eb       	ldi	r30, 0xB9	; 185
    34fe:	f0 e0       	ldi	r31, 0x00	; 0
    3500:	80 81       	ld	r24, Z
    3502:	8e 7f       	andi	r24, 0xFE	; 254
    3504:	80 83       	st	Z, r24
    3506:	80 81       	ld	r24, Z
    3508:	8d 7f       	andi	r24, 0xFD	; 253
    350a:	80 83       	st	Z, r24
    350c:	88 e4       	ldi	r24, 0x48	; 72
    350e:	80 93 b8 00 	sts	0x00B8, r24
    3512:	85 e4       	ldi	r24, 0x45	; 69
    3514:	80 93 bc 00 	sts	0x00BC, r24
    3518:	08 95       	ret

0000351a <twi_transmit>:
    351a:	61 32       	cpi	r22, 0x21	; 33
    351c:	a8 f4       	brcc	.+42     	; 0x3548 <twi_transmit+0x2e>
    351e:	20 91 c6 25 	lds	r18, 0x25C6
    3522:	24 30       	cpi	r18, 0x04	; 4
    3524:	99 f4       	brne	.+38     	; 0x354c <twi_transmit+0x32>
    3526:	60 93 7b 25 	sts	0x257B, r22
    352a:	66 23       	and	r22, r22
    352c:	89 f0       	breq	.+34     	; 0x3550 <twi_transmit+0x36>
    352e:	fc 01       	movw	r30, r24
    3530:	ad e7       	ldi	r26, 0x7D	; 125
    3532:	b5 e2       	ldi	r27, 0x25	; 37
    3534:	01 96       	adiw	r24, 0x01	; 1
    3536:	61 50       	subi	r22, 0x01	; 1
    3538:	86 0f       	add	r24, r22
    353a:	91 1d       	adc	r25, r1
    353c:	21 91       	ld	r18, Z+
    353e:	2d 93       	st	X+, r18
    3540:	e8 17       	cp	r30, r24
    3542:	f9 07       	cpc	r31, r25
    3544:	d9 f7       	brne	.-10     	; 0x353c <twi_transmit+0x22>
    3546:	06 c0       	rjmp	.+12     	; 0x3554 <twi_transmit+0x3a>
    3548:	81 e0       	ldi	r24, 0x01	; 1
    354a:	08 95       	ret
    354c:	82 e0       	ldi	r24, 0x02	; 2
    354e:	08 95       	ret
    3550:	80 e0       	ldi	r24, 0x00	; 0
    3552:	08 95       	ret
    3554:	80 e0       	ldi	r24, 0x00	; 0
    3556:	08 95       	ret

00003558 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    3558:	85 ed       	ldi	r24, 0xD5	; 213
    355a:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    355e:	ec eb       	ldi	r30, 0xBC	; 188
    3560:	f0 e0       	ldi	r31, 0x00	; 0
    3562:	80 81       	ld	r24, Z
    3564:	84 fd       	sbrc	r24, 4
    3566:	fd cf       	rjmp	.-6      	; 0x3562 <twi_stop+0xa>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    3568:	10 92 c6 25 	sts	0x25C6, r1
    356c:	08 95       	ret

0000356e <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    356e:	85 ec       	ldi	r24, 0xC5	; 197
    3570:	80 93 bc 00 	sts	0x00BC, r24

  // update twi state
  twi_state = TWI_READY;
    3574:	10 92 c6 25 	sts	0x25C6, r1
    3578:	08 95       	ret

0000357a <__vector_39>:
}

ISR(TWI_vect)
{
    357a:	1f 92       	push	r1
    357c:	0f 92       	push	r0
    357e:	0f b6       	in	r0, 0x3f	; 63
    3580:	0f 92       	push	r0
    3582:	11 24       	eor	r1, r1
    3584:	0b b6       	in	r0, 0x3b	; 59
    3586:	0f 92       	push	r0
    3588:	2f 93       	push	r18
    358a:	3f 93       	push	r19
    358c:	4f 93       	push	r20
    358e:	5f 93       	push	r21
    3590:	6f 93       	push	r22
    3592:	7f 93       	push	r23
    3594:	8f 93       	push	r24
    3596:	9f 93       	push	r25
    3598:	af 93       	push	r26
    359a:	bf 93       	push	r27
    359c:	ef 93       	push	r30
    359e:	ff 93       	push	r31
  switch(TW_STATUS){
    35a0:	80 91 b9 00 	lds	r24, 0x00B9
    35a4:	88 7f       	andi	r24, 0xF8	; 248
    35a6:	90 e0       	ldi	r25, 0x00	; 0
    35a8:	89 3c       	cpi	r24, 0xC9	; 201
    35aa:	91 05       	cpc	r25, r1
    35ac:	08 f0       	brcs	.+2      	; 0x35b0 <__vector_39+0x36>
    35ae:	ee c0       	rjmp	.+476    	; 0x378c <__vector_39+0x212>
    35b0:	fc 01       	movw	r30, r24
    35b2:	e4 54       	subi	r30, 0x44	; 68
    35b4:	ff 4f       	sbci	r31, 0xFF	; 255
    35b6:	0c 94 86 b2 	jmp	0x1650c	; 0x1650c <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    35ba:	80 91 c5 25 	lds	r24, 0x25C5
    35be:	80 93 bb 00 	sts	0x00BB, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    35c2:	85 ec       	ldi	r24, 0xC5	; 197
    35c4:	80 93 bc 00 	sts	0x00BC, r24
    35c8:	e1 c0       	rjmp	.+450    	; 0x378c <__vector_39+0x212>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    35ca:	90 91 9e 25 	lds	r25, 0x259E
    35ce:	80 91 9d 25 	lds	r24, 0x259D
    35d2:	98 17       	cp	r25, r24
    35d4:	80 f4       	brcc	.+32     	; 0x35f6 <__vector_39+0x7c>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    35d6:	e0 91 9e 25 	lds	r30, 0x259E
    35da:	81 e0       	ldi	r24, 0x01	; 1
    35dc:	8e 0f       	add	r24, r30
    35de:	80 93 9e 25 	sts	0x259E, r24
    35e2:	f0 e0       	ldi	r31, 0x00	; 0
    35e4:	e1 56       	subi	r30, 0x61	; 97
    35e6:	fa 4d       	sbci	r31, 0xDA	; 218
    35e8:	80 81       	ld	r24, Z
    35ea:	80 93 bb 00 	sts	0x00BB, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    35ee:	85 ec       	ldi	r24, 0xC5	; 197
    35f0:	80 93 bc 00 	sts	0x00BC, r24
    35f4:	cb c0       	rjmp	.+406    	; 0x378c <__vector_39+0x212>
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
        twi_reply(1);
      }else{
	if (twi_sendStop)
    35f6:	80 91 c4 25 	lds	r24, 0x25C4
    35fa:	88 23       	and	r24, r24
    35fc:	11 f0       	breq	.+4      	; 0x3602 <__vector_39+0x88>
          twi_stop();
    35fe:	ac df       	rcall	.-168    	; 0x3558 <twi_stop>
    3600:	c5 c0       	rjmp	.+394    	; 0x378c <__vector_39+0x212>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    3602:	81 e0       	ldi	r24, 0x01	; 1
    3604:	80 93 c3 25 	sts	0x25C3, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    3608:	84 ea       	ldi	r24, 0xA4	; 164
    360a:	80 93 bc 00 	sts	0x00BC, r24
	  twi_state = TWI_READY;
    360e:	10 92 c6 25 	sts	0x25C6, r1
    3612:	bc c0       	rjmp	.+376    	; 0x378c <__vector_39+0x212>
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    3614:	80 e2       	ldi	r24, 0x20	; 32
    3616:	80 93 59 25 	sts	0x2559, r24
      twi_stop();
    361a:	9e df       	rcall	.-196    	; 0x3558 <twi_stop>
      break;
    361c:	b7 c0       	rjmp	.+366    	; 0x378c <__vector_39+0x212>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    361e:	80 e3       	ldi	r24, 0x30	; 48
    3620:	80 93 59 25 	sts	0x2559, r24
      twi_stop();
    3624:	99 df       	rcall	.-206    	; 0x3558 <twi_stop>
      break;
    3626:	b2 c0       	rjmp	.+356    	; 0x378c <__vector_39+0x212>
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    3628:	88 e3       	ldi	r24, 0x38	; 56
    362a:	80 93 59 25 	sts	0x2559, r24
      twi_releaseBus();
    362e:	9f df       	rcall	.-194    	; 0x356e <twi_releaseBus>
      break;
    3630:	ad c0       	rjmp	.+346    	; 0x378c <__vector_39+0x212>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    3632:	e0 91 9e 25 	lds	r30, 0x259E
    3636:	81 e0       	ldi	r24, 0x01	; 1
    3638:	8e 0f       	add	r24, r30
    363a:	80 93 9e 25 	sts	0x259E, r24
    363e:	80 91 bb 00 	lds	r24, 0x00BB
    3642:	f0 e0       	ldi	r31, 0x00	; 0
    3644:	e1 56       	subi	r30, 0x61	; 97
    3646:	fa 4d       	sbci	r31, 0xDA	; 218
    3648:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    364a:	90 91 9e 25 	lds	r25, 0x259E
    364e:	80 91 9d 25 	lds	r24, 0x259D
    3652:	98 17       	cp	r25, r24
    3654:	20 f4       	brcc	.+8      	; 0x365e <__vector_39+0xe4>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3656:	85 ec       	ldi	r24, 0xC5	; 197
    3658:	80 93 bc 00 	sts	0x00BC, r24
    365c:	97 c0       	rjmp	.+302    	; 0x378c <__vector_39+0x212>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    365e:	85 e8       	ldi	r24, 0x85	; 133
    3660:	80 93 bc 00 	sts	0x00BC, r24
    3664:	93 c0       	rjmp	.+294    	; 0x378c <__vector_39+0x212>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    3666:	e0 91 9e 25 	lds	r30, 0x259E
    366a:	81 e0       	ldi	r24, 0x01	; 1
    366c:	8e 0f       	add	r24, r30
    366e:	80 93 9e 25 	sts	0x259E, r24
    3672:	80 91 bb 00 	lds	r24, 0x00BB
    3676:	f0 e0       	ldi	r31, 0x00	; 0
    3678:	e1 56       	subi	r30, 0x61	; 97
    367a:	fa 4d       	sbci	r31, 0xDA	; 218
    367c:	80 83       	st	Z, r24
	if (twi_sendStop)
    367e:	80 91 c4 25 	lds	r24, 0x25C4
    3682:	88 23       	and	r24, r24
    3684:	11 f0       	breq	.+4      	; 0x368a <__vector_39+0x110>
          twi_stop();
    3686:	68 df       	rcall	.-304    	; 0x3558 <twi_stop>
    3688:	81 c0       	rjmp	.+258    	; 0x378c <__vector_39+0x212>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    368a:	81 e0       	ldi	r24, 0x01	; 1
    368c:	80 93 c3 25 	sts	0x25C3, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    3690:	84 ea       	ldi	r24, 0xA4	; 164
    3692:	80 93 bc 00 	sts	0x00BC, r24
	  twi_state = TWI_READY;
    3696:	10 92 c6 25 	sts	0x25C6, r1
    369a:	78 c0       	rjmp	.+240    	; 0x378c <__vector_39+0x212>
	}    
	break;
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
    369c:	5d df       	rcall	.-326    	; 0x3558 <twi_stop>
      break;
    369e:	76 c0       	rjmp	.+236    	; 0x378c <__vector_39+0x212>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    36a0:	83 e0       	ldi	r24, 0x03	; 3
    36a2:	80 93 c6 25 	sts	0x25C6, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    36a6:	10 92 5a 25 	sts	0x255A, r1
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    36aa:	85 ec       	ldi	r24, 0xC5	; 197
    36ac:	80 93 bc 00 	sts	0x00BC, r24
    36b0:	6d c0       	rjmp	.+218    	; 0x378c <__vector_39+0x212>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    36b2:	80 91 5a 25 	lds	r24, 0x255A
    36b6:	80 32       	cpi	r24, 0x20	; 32
    36b8:	80 f4       	brcc	.+32     	; 0x36da <__vector_39+0x160>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    36ba:	e0 91 5a 25 	lds	r30, 0x255A
    36be:	81 e0       	ldi	r24, 0x01	; 1
    36c0:	8e 0f       	add	r24, r30
    36c2:	80 93 5a 25 	sts	0x255A, r24
    36c6:	80 91 bb 00 	lds	r24, 0x00BB
    36ca:	f0 e0       	ldi	r31, 0x00	; 0
    36cc:	e5 5a       	subi	r30, 0xA5	; 165
    36ce:	fa 4d       	sbci	r31, 0xDA	; 218
    36d0:	80 83       	st	Z, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    36d2:	85 ec       	ldi	r24, 0xC5	; 197
    36d4:	80 93 bc 00 	sts	0x00BC, r24
    36d8:	59 c0       	rjmp	.+178    	; 0x378c <__vector_39+0x212>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    36da:	85 e8       	ldi	r24, 0x85	; 133
    36dc:	80 93 bc 00 	sts	0x00BC, r24
    36e0:	55 c0       	rjmp	.+170    	; 0x378c <__vector_39+0x212>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    36e2:	80 91 5a 25 	lds	r24, 0x255A
    36e6:	80 32       	cpi	r24, 0x20	; 32
    36e8:	30 f4       	brcc	.+12     	; 0x36f6 <__vector_39+0x17c>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    36ea:	e0 91 5a 25 	lds	r30, 0x255A
    36ee:	f0 e0       	ldi	r31, 0x00	; 0
    36f0:	e5 5a       	subi	r30, 0xA5	; 165
    36f2:	fa 4d       	sbci	r31, 0xDA	; 218
    36f4:	10 82       	st	Z, r1
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
    36f6:	30 df       	rcall	.-416    	; 0x3558 <twi_stop>
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    36f8:	60 91 5a 25 	lds	r22, 0x255A
    36fc:	70 e0       	ldi	r23, 0x00	; 0
    36fe:	e0 91 bf 25 	lds	r30, 0x25BF
    3702:	f0 91 c0 25 	lds	r31, 0x25C0
    3706:	8b e5       	ldi	r24, 0x5B	; 91
    3708:	95 e2       	ldi	r25, 0x25	; 37
    370a:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    370c:	10 92 5a 25 	sts	0x255A, r1
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    3710:	2e df       	rcall	.-420    	; 0x356e <twi_releaseBus>
      break;
    3712:	3c c0       	rjmp	.+120    	; 0x378c <__vector_39+0x212>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3714:	85 e8       	ldi	r24, 0x85	; 133
    3716:	80 93 bc 00 	sts	0x00BC, r24
    371a:	38 c0       	rjmp	.+112    	; 0x378c <__vector_39+0x212>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    371c:	84 e0       	ldi	r24, 0x04	; 4
    371e:	80 93 c6 25 	sts	0x25C6, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    3722:	10 92 7c 25 	sts	0x257C, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    3726:	10 92 7b 25 	sts	0x257B, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    372a:	e0 91 c1 25 	lds	r30, 0x25C1
    372e:	f0 91 c2 25 	lds	r31, 0x25C2
    3732:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    3734:	80 91 7b 25 	lds	r24, 0x257B
    3738:	81 11       	cpse	r24, r1
    373a:	05 c0       	rjmp	.+10     	; 0x3746 <__vector_39+0x1cc>
        twi_txBufferLength = 1;
    373c:	81 e0       	ldi	r24, 0x01	; 1
    373e:	80 93 7b 25 	sts	0x257B, r24
        twi_txBuffer[0] = 0x00;
    3742:	10 92 7d 25 	sts	0x257D, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    3746:	e0 91 7c 25 	lds	r30, 0x257C
    374a:	81 e0       	ldi	r24, 0x01	; 1
    374c:	8e 0f       	add	r24, r30
    374e:	80 93 7c 25 	sts	0x257C, r24
    3752:	f0 e0       	ldi	r31, 0x00	; 0
    3754:	e3 58       	subi	r30, 0x83	; 131
    3756:	fa 4d       	sbci	r31, 0xDA	; 218
    3758:	80 81       	ld	r24, Z
    375a:	80 93 bb 00 	sts	0x00BB, r24
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    375e:	90 91 7c 25 	lds	r25, 0x257C
    3762:	80 91 7b 25 	lds	r24, 0x257B
    3766:	98 17       	cp	r25, r24
    3768:	20 f4       	brcc	.+8      	; 0x3772 <__vector_39+0x1f8>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    376a:	85 ec       	ldi	r24, 0xC5	; 197
    376c:	80 93 bc 00 	sts	0x00BC, r24
    3770:	0d c0       	rjmp	.+26     	; 0x378c <__vector_39+0x212>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3772:	85 e8       	ldi	r24, 0x85	; 133
    3774:	80 93 bc 00 	sts	0x00BC, r24
    3778:	09 c0       	rjmp	.+18     	; 0x378c <__vector_39+0x212>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    377a:	85 ec       	ldi	r24, 0xC5	; 197
    377c:	80 93 bc 00 	sts	0x00BC, r24
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    3780:	10 92 c6 25 	sts	0x25C6, r1
      break;
    3784:	03 c0       	rjmp	.+6      	; 0x378c <__vector_39+0x212>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    3786:	10 92 59 25 	sts	0x2559, r1
      twi_stop();
    378a:	e6 de       	rcall	.-564    	; 0x3558 <twi_stop>
      break;
  }
}
    378c:	ff 91       	pop	r31
    378e:	ef 91       	pop	r30
    3790:	bf 91       	pop	r27
    3792:	af 91       	pop	r26
    3794:	9f 91       	pop	r25
    3796:	8f 91       	pop	r24
    3798:	7f 91       	pop	r23
    379a:	6f 91       	pop	r22
    379c:	5f 91       	pop	r21
    379e:	4f 91       	pop	r20
    37a0:	3f 91       	pop	r19
    37a2:	2f 91       	pop	r18
    37a4:	0f 90       	pop	r0
    37a6:	0b be       	out	0x3b, r0	; 59
    37a8:	0f 90       	pop	r0
    37aa:	0f be       	out	0x3f, r0	; 63
    37ac:	0f 90       	pop	r0
    37ae:	1f 90       	pop	r1
    37b0:	18 95       	reti

000037b2 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    37b2:	80 91 f6 25 	lds	r24, 0x25F6
    37b6:	90 e0       	ldi	r25, 0x00	; 0
    37b8:	20 91 f7 25 	lds	r18, 0x25F7
    37bc:	82 1b       	sub	r24, r18
    37be:	91 09       	sbc	r25, r1
    37c0:	08 95       	ret

000037c2 <_ZN7TwoWire4readEv>:
    37c2:	20 91 f7 25 	lds	r18, 0x25F7
    37c6:	80 91 f6 25 	lds	r24, 0x25F6
    37ca:	28 17       	cp	r18, r24
    37cc:	50 f4       	brcc	.+20     	; 0x37e2 <_ZN7TwoWire4readEv+0x20>
    37ce:	e2 2f       	mov	r30, r18
    37d0:	f0 e0       	ldi	r31, 0x00	; 0
    37d2:	e8 50       	subi	r30, 0x08	; 8
    37d4:	fa 4d       	sbci	r31, 0xDA	; 218
    37d6:	80 81       	ld	r24, Z
    37d8:	90 e0       	ldi	r25, 0x00	; 0
    37da:	2f 5f       	subi	r18, 0xFF	; 255
    37dc:	20 93 f7 25 	sts	0x25F7, r18
    37e0:	08 95       	ret
    37e2:	8f ef       	ldi	r24, 0xFF	; 255
    37e4:	9f ef       	ldi	r25, 0xFF	; 255
    37e6:	08 95       	ret

000037e8 <_ZN7TwoWire4peekEv>:
    37e8:	e0 91 f7 25 	lds	r30, 0x25F7
    37ec:	80 91 f6 25 	lds	r24, 0x25F6
    37f0:	e8 17       	cp	r30, r24
    37f2:	30 f4       	brcc	.+12     	; 0x3800 <_ZN7TwoWire4peekEv+0x18>
    37f4:	f0 e0       	ldi	r31, 0x00	; 0
    37f6:	e8 50       	subi	r30, 0x08	; 8
    37f8:	fa 4d       	sbci	r31, 0xDA	; 218
    37fa:	80 81       	ld	r24, Z
    37fc:	90 e0       	ldi	r25, 0x00	; 0
    37fe:	08 95       	ret
    3800:	8f ef       	ldi	r24, 0xFF	; 255
    3802:	9f ef       	ldi	r25, 0xFF	; 255
    3804:	08 95       	ret

00003806 <_ZN7TwoWire5flushEv>:
    3806:	08 95       	ret

00003808 <_ZN7TwoWire5writeEPKhj>:
    3808:	cf 92       	push	r12
    380a:	df 92       	push	r13
    380c:	ef 92       	push	r14
    380e:	ff 92       	push	r15
    3810:	0f 93       	push	r16
    3812:	1f 93       	push	r17
    3814:	cf 93       	push	r28
    3816:	df 93       	push	r29
    3818:	7c 01       	movw	r14, r24
    381a:	cb 01       	movw	r24, r22
    381c:	8a 01       	movw	r16, r20
    381e:	20 91 d3 25 	lds	r18, 0x25D3
    3822:	22 23       	and	r18, r18
    3824:	89 f0       	breq	.+34     	; 0x3848 <_ZN7TwoWire5writeEPKhj+0x40>
    3826:	eb 01       	movw	r28, r22
    3828:	6b 01       	movw	r12, r22
    382a:	c4 0e       	add	r12, r20
    382c:	d5 1e       	adc	r13, r21
    382e:	cc 15       	cp	r28, r12
    3830:	dd 05       	cpc	r29, r13
    3832:	61 f0       	breq	.+24     	; 0x384c <_ZN7TwoWire5writeEPKhj+0x44>
    3834:	69 91       	ld	r22, Y+
    3836:	d7 01       	movw	r26, r14
    3838:	ed 91       	ld	r30, X+
    383a:	fc 91       	ld	r31, X
    383c:	01 90       	ld	r0, Z+
    383e:	f0 81       	ld	r31, Z
    3840:	e0 2d       	mov	r30, r0
    3842:	c7 01       	movw	r24, r14
    3844:	19 95       	eicall
    3846:	f3 cf       	rjmp	.-26     	; 0x382e <_ZN7TwoWire5writeEPKhj+0x26>
    3848:	64 2f       	mov	r22, r20
    384a:	67 de       	rcall	.-818    	; 0x351a <twi_transmit>
    384c:	c8 01       	movw	r24, r16
    384e:	df 91       	pop	r29
    3850:	cf 91       	pop	r28
    3852:	1f 91       	pop	r17
    3854:	0f 91       	pop	r16
    3856:	ff 90       	pop	r15
    3858:	ef 90       	pop	r14
    385a:	df 90       	pop	r13
    385c:	cf 90       	pop	r12
    385e:	08 95       	ret

00003860 <_ZN7TwoWire5writeEh>:
    3860:	cf 93       	push	r28
    3862:	df 93       	push	r29
    3864:	1f 92       	push	r1
    3866:	cd b7       	in	r28, 0x3d	; 61
    3868:	de b7       	in	r29, 0x3e	; 62
    386a:	69 83       	std	Y+1, r22	; 0x01
    386c:	20 91 d3 25 	lds	r18, 0x25D3
    3870:	22 23       	and	r18, r18
    3872:	d1 f0       	breq	.+52     	; 0x38a8 <_ZN7TwoWire5writeEh+0x48>
    3874:	20 91 d4 25 	lds	r18, 0x25D4
    3878:	20 32       	cpi	r18, 0x20	; 32
    387a:	40 f0       	brcs	.+16     	; 0x388c <_ZN7TwoWire5writeEh+0x2c>
    387c:	21 e0       	ldi	r18, 0x01	; 1
    387e:	30 e0       	ldi	r19, 0x00	; 0
    3880:	fc 01       	movw	r30, r24
    3882:	33 83       	std	Z+3, r19	; 0x03
    3884:	22 83       	std	Z+2, r18	; 0x02
    3886:	80 e0       	ldi	r24, 0x00	; 0
    3888:	90 e0       	ldi	r25, 0x00	; 0
    388a:	14 c0       	rjmp	.+40     	; 0x38b4 <_ZN7TwoWire5writeEh+0x54>
    388c:	80 91 d5 25 	lds	r24, 0x25D5
    3890:	e8 2f       	mov	r30, r24
    3892:	f0 e0       	ldi	r31, 0x00	; 0
    3894:	ea 52       	subi	r30, 0x2A	; 42
    3896:	fa 4d       	sbci	r31, 0xDA	; 218
    3898:	99 81       	ldd	r25, Y+1	; 0x01
    389a:	90 83       	st	Z, r25
    389c:	8f 5f       	subi	r24, 0xFF	; 255
    389e:	80 93 d5 25 	sts	0x25D5, r24
    38a2:	80 93 d4 25 	sts	0x25D4, r24
    38a6:	04 c0       	rjmp	.+8      	; 0x38b0 <_ZN7TwoWire5writeEh+0x50>
    38a8:	61 e0       	ldi	r22, 0x01	; 1
    38aa:	ce 01       	movw	r24, r28
    38ac:	01 96       	adiw	r24, 0x01	; 1
    38ae:	35 de       	rcall	.-918    	; 0x351a <twi_transmit>
    38b0:	81 e0       	ldi	r24, 0x01	; 1
    38b2:	90 e0       	ldi	r25, 0x00	; 0
    38b4:	0f 90       	pop	r0
    38b6:	df 91       	pop	r29
    38b8:	cf 91       	pop	r28
    38ba:	08 95       	ret

000038bc <_ZN7TwoWireC1Ev>:
    38bc:	fc 01       	movw	r30, r24
    38be:	13 82       	std	Z+3, r1	; 0x03
    38c0:	12 82       	std	Z+2, r1	; 0x02
    38c2:	48 ee       	ldi	r20, 0xE8	; 232
    38c4:	53 e0       	ldi	r21, 0x03	; 3
    38c6:	60 e0       	ldi	r22, 0x00	; 0
    38c8:	70 e0       	ldi	r23, 0x00	; 0
    38ca:	44 83       	std	Z+4, r20	; 0x04
    38cc:	55 83       	std	Z+5, r21	; 0x05
    38ce:	66 83       	std	Z+6, r22	; 0x06
    38d0:	77 83       	std	Z+7, r23	; 0x07
    38d2:	88 e7       	ldi	r24, 0x78	; 120
    38d4:	9c e0       	ldi	r25, 0x0C	; 12
    38d6:	91 83       	std	Z+1, r25	; 0x01
    38d8:	80 83       	st	Z, r24
    38da:	08 95       	ret

000038dc <_ZN7TwoWire5beginEv>:
    38dc:	10 92 f7 25 	sts	0x25F7, r1
    38e0:	10 92 f6 25 	sts	0x25F6, r1
    38e4:	10 92 d5 25 	sts	0x25D5, r1
    38e8:	10 92 d4 25 	sts	0x25D4, r1
    38ec:	fa cd       	rjmp	.-1036   	; 0x34e2 <twi_init>

000038ee <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    38ee:	87 ec       	ldi	r24, 0xC7	; 199
    38f0:	95 e2       	ldi	r25, 0x25	; 37
    38f2:	e4 cf       	rjmp	.-56     	; 0x38bc <_ZN7TwoWireC1Ev>

000038f4 <_Z9func_freev>:

// Look up an entry by key.  Returns -1 on fail else addr of value.
int getValue(char *key) {
	int kaddr = findKey(key);
	return (kaddr < 0) ? kaddr : findend(kaddr);
}
    38f4:	cf 93       	push	r28
    38f6:	df 93       	push	r29
    38f8:	00 d0       	rcall	.+0      	; 0x38fa <_Z9func_freev+0x6>
    38fa:	1f 92       	push	r1
    38fc:	cd b7       	in	r28, 0x3d	; 61
    38fe:	de b7       	in	r29, 0x3e	; 62
    3900:	be 01       	movw	r22, r28
    3902:	60 50       	subi	r22, 0x00	; 0
    3904:	7b 43       	sbci	r23, 0x3B	; 59
    3906:	88 27       	eor	r24, r24
    3908:	77 fd       	sbrc	r23, 7
    390a:	80 95       	com	r24
    390c:	98 2f       	mov	r25, r24
    390e:	0f 90       	pop	r0
    3910:	0f 90       	pop	r0
    3912:	0f 90       	pop	r0
    3914:	0f 90       	pop	r0
    3916:	df 91       	pop	r29
    3918:	cf 91       	pop	r28
    391a:	08 95       	ret

0000391c <_Z8skipbytec>:
    391c:	08 95       	ret

0000391e <_Z3eofv>:
    391e:	1e ba       	out	0x1e, r1	; 30
    3920:	08 95       	ret

00003922 <_Z18find_user_functionPc>:
    3922:	8f 92       	push	r8
    3924:	9f 92       	push	r9
    3926:	af 92       	push	r10
    3928:	bf 92       	push	r11
    392a:	cf 92       	push	r12
    392c:	df 92       	push	r13
    392e:	ef 92       	push	r14
    3930:	ff 92       	push	r15
    3932:	cf 93       	push	r28
    3934:	df 93       	push	r29
    3936:	ec 01       	movw	r28, r24
    3938:	10 92 66 2b 	sts	0x2B66, r1
    393c:	10 92 67 2b 	sts	0x2B67, r1
    3940:	10 92 68 2b 	sts	0x2B68, r1
    3944:	10 92 69 2b 	sts	0x2B69, r1
    3948:	80 90 c7 2d 	lds	r8, 0x2DC7
    394c:	91 2c       	mov	r9, r1
    394e:	a1 2c       	mov	r10, r1
    3950:	b1 2c       	mov	r11, r1
    3952:	c0 90 66 2b 	lds	r12, 0x2B66
    3956:	d0 90 67 2b 	lds	r13, 0x2B67
    395a:	e0 90 68 2b 	lds	r14, 0x2B68
    395e:	f0 90 69 2b 	lds	r15, 0x2B69
    3962:	c8 14       	cp	r12, r8
    3964:	d9 04       	cpc	r13, r9
    3966:	ea 04       	cpc	r14, r10
    3968:	fb 04       	cpc	r15, r11
    396a:	44 f5       	brge	.+80     	; 0x39bc <_Z18find_user_functionPc+0x9a>
    396c:	f6 01       	movw	r30, r12
    396e:	ee 0f       	add	r30, r30
    3970:	ff 1f       	adc	r31, r31
    3972:	ee 0f       	add	r30, r30
    3974:	ff 1f       	adc	r31, r31
    3976:	e1 59       	subi	r30, 0x91	; 145
    3978:	f4 4d       	sbci	r31, 0xD4	; 212
    397a:	60 81       	ld	r22, Z
    397c:	71 81       	ldd	r23, Z+1	; 0x01
    397e:	ce 01       	movw	r24, r28
    3980:	0e 94 6e b5 	call	0x16adc	; 0x16adc <strcmp>
    3984:	89 2b       	or	r24, r25
    3986:	61 f4       	brne	.+24     	; 0x39a0 <_Z18find_user_functionPc+0x7e>
    3988:	68 94       	set
    398a:	c7 f8       	bld	r12, 7
    398c:	c0 92 66 2b 	sts	0x2B66, r12
    3990:	d0 92 67 2b 	sts	0x2B67, r13
    3994:	e0 92 68 2b 	sts	0x2B68, r14
    3998:	f0 92 69 2b 	sts	0x2B69, r15
    399c:	81 e0       	ldi	r24, 0x01	; 1
    399e:	0f c0       	rjmp	.+30     	; 0x39be <_Z18find_user_functionPc+0x9c>
    39a0:	8f ef       	ldi	r24, 0xFF	; 255
    39a2:	c8 1a       	sub	r12, r24
    39a4:	d8 0a       	sbc	r13, r24
    39a6:	e8 0a       	sbc	r14, r24
    39a8:	f8 0a       	sbc	r15, r24
    39aa:	c0 92 66 2b 	sts	0x2B66, r12
    39ae:	d0 92 67 2b 	sts	0x2B67, r13
    39b2:	e0 92 68 2b 	sts	0x2B68, r14
    39b6:	f0 92 69 2b 	sts	0x2B69, r15
    39ba:	cb cf       	rjmp	.-106    	; 0x3952 <_Z18find_user_functionPc+0x30>
    39bc:	80 e0       	ldi	r24, 0x00	; 0
    39be:	df 91       	pop	r29
    39c0:	cf 91       	pop	r28
    39c2:	ff 90       	pop	r15
    39c4:	ef 90       	pop	r14
    39c6:	df 90       	pop	r13
    39c8:	cf 90       	pop	r12
    39ca:	bf 90       	pop	r11
    39cc:	af 90       	pop	r10
    39ce:	9f 90       	pop	r9
    39d0:	8f 90       	pop	r8
    39d2:	08 95       	ret

000039d4 <_Z11findbuiltinPc>:
    39d4:	cf 92       	push	r12
    39d6:	df 92       	push	r13
    39d8:	ef 92       	push	r14
    39da:	ff 92       	push	r15
    39dc:	0f 93       	push	r16
    39de:	1f 93       	push	r17
    39e0:	cf 93       	push	r28
    39e2:	df 93       	push	r29
    39e4:	7c 01       	movw	r14, r24
    39e6:	c6 e1       	ldi	r28, 0x16	; 22
    39e8:	d5 e0       	ldi	r29, 0x05	; 5
    39ea:	fe 01       	movw	r30, r28
    39ec:	84 91       	lpm	r24, Z
    39ee:	88 23       	and	r24, r24
    39f0:	41 f1       	breq	.+80     	; 0x3a42 <_Z11findbuiltinPc+0x6e>
    39f2:	be 01       	movw	r22, r28
    39f4:	c7 01       	movw	r24, r14
    39f6:	0e 94 02 b5 	call	0x16a04	; 0x16a04 <strcmp_P>
    39fa:	6c 01       	movw	r12, r24
    39fc:	ce 01       	movw	r24, r28
    39fe:	0e 94 12 b5 	call	0x16a24	; 0x16a24 <__strlen_P>
    3a02:	8c 01       	movw	r16, r24
    3a04:	0f 5f       	subi	r16, 0xFF	; 255
    3a06:	1f 4f       	sbci	r17, 0xFF	; 255
    3a08:	0c 0f       	add	r16, r28
    3a0a:	1d 1f       	adc	r17, r29
    3a0c:	cd 28       	or	r12, r13
    3a0e:	89 f4       	brne	.+34     	; 0x3a32 <_Z11findbuiltinPc+0x5e>
    3a10:	84 ea       	ldi	r24, 0xA4	; 164
    3a12:	8e bb       	out	0x1e, r24	; 30
    3a14:	c8 01       	movw	r24, r16
    3a16:	aa 27       	eor	r26, r26
    3a18:	97 fd       	sbrc	r25, 7
    3a1a:	a0 95       	com	r26
    3a1c:	ba 2f       	mov	r27, r26
    3a1e:	80 93 66 2b 	sts	0x2B66, r24
    3a22:	90 93 67 2b 	sts	0x2B67, r25
    3a26:	a0 93 68 2b 	sts	0x2B68, r26
    3a2a:	b0 93 69 2b 	sts	0x2B69, r27
    3a2e:	81 e0       	ldi	r24, 0x01	; 1
    3a30:	08 c0       	rjmp	.+16     	; 0x3a42 <_Z11findbuiltinPc+0x6e>
    3a32:	c8 01       	movw	r24, r16
    3a34:	0e 94 12 b5 	call	0x16a24	; 0x16a24 <__strlen_P>
    3a38:	ec 01       	movw	r28, r24
    3a3a:	21 96       	adiw	r28, 0x01	; 1
    3a3c:	c0 0f       	add	r28, r16
    3a3e:	d1 1f       	adc	r29, r17
    3a40:	d4 cf       	rjmp	.-88     	; 0x39ea <_Z11findbuiltinPc+0x16>
    3a42:	df 91       	pop	r29
    3a44:	cf 91       	pop	r28
    3a46:	1f 91       	pop	r17
    3a48:	0f 91       	pop	r16
    3a4a:	ff 90       	pop	r15
    3a4c:	ef 90       	pop	r14
    3a4e:	df 90       	pop	r13
    3a50:	cf 90       	pop	r12
    3a52:	08 95       	ret

00003a54 <_Z8cmd_bootv>:
    3a54:	f8 94       	cli
    3a56:	28 e0       	ldi	r18, 0x08	; 8
    3a58:	88 e1       	ldi	r24, 0x18	; 24
    3a5a:	90 e0       	ldi	r25, 0x00	; 0
    3a5c:	0f b6       	in	r0, 0x3f	; 63
    3a5e:	f8 94       	cli
    3a60:	a8 95       	wdr
    3a62:	80 93 60 00 	sts	0x0060, r24
    3a66:	0f be       	out	0x3f, r0	; 63
    3a68:	20 93 60 00 	sts	0x0060, r18
    3a6c:	ff cf       	rjmp	.-2      	; 0x3a6c <_Z8cmd_bootv+0x18>

00003a6e <_Z6getmsgh>:
    3a6e:	1f 93       	push	r17
    3a70:	cf 93       	push	r28
    3a72:	df 93       	push	r29
    3a74:	18 2f       	mov	r17, r24
    3a76:	c0 e6       	ldi	r28, 0x60	; 96
    3a78:	d4 e0       	ldi	r29, 0x04	; 4
    3a7a:	ce 01       	movw	r24, r28
    3a7c:	11 23       	and	r17, r17
    3a7e:	39 f0       	breq	.+14     	; 0x3a8e <_Z6getmsgh+0x20>
    3a80:	0e 94 12 b5 	call	0x16a24	; 0x16a24 <__strlen_P>
    3a84:	01 96       	adiw	r24, 0x01	; 1
    3a86:	c8 0f       	add	r28, r24
    3a88:	d9 1f       	adc	r29, r25
    3a8a:	11 50       	subi	r17, 0x01	; 1
    3a8c:	f6 cf       	rjmp	.-20     	; 0x3a7a <_Z6getmsgh+0xc>
    3a8e:	df 91       	pop	r29
    3a90:	cf 91       	pop	r28
    3a92:	1f 91       	pop	r17
    3a94:	08 95       	ret

00003a96 <_Z8chartypeh>:
    3a96:	87 fd       	sbrc	r24, 7
    3a98:	0e c0       	rjmp	.+28     	; 0x3ab6 <_Z8chartypeh+0x20>
    3a9a:	e8 2f       	mov	r30, r24
    3a9c:	e6 95       	lsr	r30
    3a9e:	f0 e0       	ldi	r31, 0x00	; 0
    3aa0:	e0 5e       	subi	r30, 0xE0	; 224
    3aa2:	fb 4f       	sbci	r31, 0xFB	; 251
    3aa4:	e4 91       	lpm	r30, Z
    3aa6:	80 ff       	sbrs	r24, 0
    3aa8:	02 c0       	rjmp	.+4      	; 0x3aae <_Z8chartypeh+0x18>
    3aaa:	8e 2f       	mov	r24, r30
    3aac:	02 c0       	rjmp	.+4      	; 0x3ab2 <_Z8chartypeh+0x1c>
    3aae:	8e 2f       	mov	r24, r30
    3ab0:	82 95       	swap	r24
    3ab2:	8f 70       	andi	r24, 0x0F	; 15
    3ab4:	08 95       	ret
    3ab6:	84 e0       	ldi	r24, 0x04	; 4
    3ab8:	08 95       	ret

00003aba <_Z7isrelopv>:
    3aba:	8e b3       	in	r24, 0x1e	; 30
    3abc:	8c 33       	cpi	r24, 0x3C	; 60
    3abe:	91 f0       	breq	.+36     	; 0x3ae4 <_Z7isrelopv+0x2a>
    3ac0:	8e b3       	in	r24, 0x1e	; 30
    3ac2:	84 38       	cpi	r24, 0x84	; 132
    3ac4:	79 f0       	breq	.+30     	; 0x3ae4 <_Z7isrelopv+0x2a>
    3ac6:	8e b3       	in	r24, 0x1e	; 30
    3ac8:	88 38       	cpi	r24, 0x88	; 136
    3aca:	61 f0       	breq	.+24     	; 0x3ae4 <_Z7isrelopv+0x2a>
    3acc:	8e b3       	in	r24, 0x1e	; 30
    3ace:	89 38       	cpi	r24, 0x89	; 137
    3ad0:	49 f0       	breq	.+18     	; 0x3ae4 <_Z7isrelopv+0x2a>
    3ad2:	8e b3       	in	r24, 0x1e	; 30
    3ad4:	8e 33       	cpi	r24, 0x3E	; 62
    3ad6:	31 f0       	breq	.+12     	; 0x3ae4 <_Z7isrelopv+0x2a>
    3ad8:	9e b3       	in	r25, 0x1e	; 30
    3ada:	81 e0       	ldi	r24, 0x01	; 1
    3adc:	95 38       	cpi	r25, 0x85	; 133
    3ade:	19 f0       	breq	.+6      	; 0x3ae6 <_Z7isrelopv+0x2c>
    3ae0:	80 e0       	ldi	r24, 0x00	; 0
    3ae2:	08 95       	ret
    3ae4:	81 e0       	ldi	r24, 0x01	; 1
    3ae6:	08 95       	ret

00003ae8 <_Z5ishexc>:
    3ae8:	90 ed       	ldi	r25, 0xD0	; 208
    3aea:	98 0f       	add	r25, r24
    3aec:	9a 30       	cpi	r25, 0x0A	; 10
    3aee:	58 f0       	brcs	.+22     	; 0x3b06 <_Z5ishexc+0x1e>
    3af0:	9f e9       	ldi	r25, 0x9F	; 159
    3af2:	98 0f       	add	r25, r24
    3af4:	96 30       	cpi	r25, 0x06	; 6
    3af6:	38 f0       	brcs	.+14     	; 0x3b06 <_Z5ishexc+0x1e>
    3af8:	9f eb       	ldi	r25, 0xBF	; 191
    3afa:	98 0f       	add	r25, r24
    3afc:	81 e0       	ldi	r24, 0x01	; 1
    3afe:	96 30       	cpi	r25, 0x06	; 6
    3b00:	18 f0       	brcs	.+6      	; 0x3b08 <_Z5ishexc+0x20>
    3b02:	80 e0       	ldi	r24, 0x00	; 0
    3b04:	08 95       	ret
    3b06:	81 e0       	ldi	r24, 0x01	; 1
    3b08:	08 95       	ret

00003b0a <_Z6hexvalc>:
    3b0a:	90 ed       	ldi	r25, 0xD0	; 208
    3b0c:	98 0f       	add	r25, r24
    3b0e:	9a 30       	cpi	r25, 0x0A	; 10
    3b10:	28 f0       	brcs	.+10     	; 0x3b1c <_Z6hexvalc+0x12>
    3b12:	90 e0       	ldi	r25, 0x00	; 0
    3b14:	0e 94 fa b4 	call	0x169f4	; 0x169f4 <tolower>
    3b18:	87 55       	subi	r24, 0x57	; 87
    3b1a:	08 95       	ret
    3b1c:	89 2f       	mov	r24, r25
    3b1e:	08 95       	ret

00003b20 <_Z11isstringargl>:
    3b20:	0f 93       	push	r16
    3b22:	1f 93       	push	r17
    3b24:	61 50       	subi	r22, 0x01	; 1
    3b26:	71 09       	sbc	r23, r1
    3b28:	81 e0       	ldi	r24, 0x01	; 1
    3b2a:	90 e0       	ldi	r25, 0x00	; 0
    3b2c:	02 c0       	rjmp	.+4      	; 0x3b32 <_Z11isstringargl+0x12>
    3b2e:	88 0f       	add	r24, r24
    3b30:	99 1f       	adc	r25, r25
    3b32:	6a 95       	dec	r22
    3b34:	e2 f7       	brpl	.-8      	; 0x3b2e <_Z11isstringargl+0xe>
    3b36:	8c 01       	movw	r16, r24
    3b38:	22 27       	eor	r18, r18
    3b3a:	17 fd       	sbrc	r17, 7
    3b3c:	20 95       	com	r18
    3b3e:	32 2f       	mov	r19, r18
    3b40:	e0 91 44 2b 	lds	r30, 0x2B44
    3b44:	f0 91 45 2b 	lds	r31, 0x2B45
    3b48:	40 85       	ldd	r20, Z+8	; 0x08
    3b4a:	51 85       	ldd	r21, Z+9	; 0x09
    3b4c:	62 85       	ldd	r22, Z+10	; 0x0a
    3b4e:	73 85       	ldd	r23, Z+11	; 0x0b
    3b50:	04 23       	and	r16, r20
    3b52:	15 23       	and	r17, r21
    3b54:	26 23       	and	r18, r22
    3b56:	37 23       	and	r19, r23
    3b58:	61 e0       	ldi	r22, 0x01	; 1
    3b5a:	70 e0       	ldi	r23, 0x00	; 0
    3b5c:	80 e0       	ldi	r24, 0x00	; 0
    3b5e:	90 e0       	ldi	r25, 0x00	; 0
    3b60:	01 2b       	or	r16, r17
    3b62:	02 2b       	or	r16, r18
    3b64:	03 2b       	or	r16, r19
    3b66:	19 f4       	brne	.+6      	; 0x3b6e <_Z11isstringargl+0x4e>
    3b68:	60 e0       	ldi	r22, 0x00	; 0
    3b6a:	70 e0       	ldi	r23, 0x00	; 0
    3b6c:	cb 01       	movw	r24, r22
    3b6e:	1f 91       	pop	r17
    3b70:	0f 91       	pop	r16
    3b72:	08 95       	ret

00003b74 <_Z9findindexPcPKch>:
    3b74:	df 92       	push	r13
    3b76:	ef 92       	push	r14
    3b78:	ff 92       	push	r15
    3b7a:	0f 93       	push	r16
    3b7c:	1f 93       	push	r17
    3b7e:	cf 93       	push	r28
    3b80:	df 93       	push	r29
    3b82:	7c 01       	movw	r14, r24
    3b84:	eb 01       	movw	r28, r22
    3b86:	d4 2e       	mov	r13, r20
    3b88:	10 92 66 2b 	sts	0x2B66, r1
    3b8c:	10 92 67 2b 	sts	0x2B67, r1
    3b90:	10 92 68 2b 	sts	0x2B68, r1
    3b94:	10 92 69 2b 	sts	0x2B69, r1
    3b98:	fe 01       	movw	r30, r28
    3b9a:	84 91       	lpm	r24, Z
    3b9c:	88 23       	and	r24, r24
    3b9e:	41 f1       	breq	.+80     	; 0x3bf0 <_Z9findindexPcPKch+0x7c>
    3ba0:	be 01       	movw	r22, r28
    3ba2:	c7 01       	movw	r24, r14
    3ba4:	0e 94 02 b5 	call	0x16a04	; 0x16a04 <strcmp_P>
    3ba8:	00 97       	sbiw	r24, 0x00	; 0
    3baa:	f9 f0       	breq	.+62     	; 0x3bea <_Z9findindexPcPKch+0x76>
    3bac:	dd 20       	and	r13, r13
    3bae:	11 f0       	breq	.+4      	; 0x3bb4 <_Z9findindexPcPKch+0x40>
    3bb0:	97 fd       	sbrc	r25, 7
    3bb2:	1d c0       	rjmp	.+58     	; 0x3bee <_Z9findindexPcPKch+0x7a>
    3bb4:	00 91 66 2b 	lds	r16, 0x2B66
    3bb8:	10 91 67 2b 	lds	r17, 0x2B67
    3bbc:	20 91 68 2b 	lds	r18, 0x2B68
    3bc0:	30 91 69 2b 	lds	r19, 0x2B69
    3bc4:	0f 5f       	subi	r16, 0xFF	; 255
    3bc6:	1f 4f       	sbci	r17, 0xFF	; 255
    3bc8:	2f 4f       	sbci	r18, 0xFF	; 255
    3bca:	3f 4f       	sbci	r19, 0xFF	; 255
    3bcc:	00 93 66 2b 	sts	0x2B66, r16
    3bd0:	10 93 67 2b 	sts	0x2B67, r17
    3bd4:	20 93 68 2b 	sts	0x2B68, r18
    3bd8:	30 93 69 2b 	sts	0x2B69, r19
    3bdc:	ce 01       	movw	r24, r28
    3bde:	0e 94 12 b5 	call	0x16a24	; 0x16a24 <__strlen_P>
    3be2:	01 96       	adiw	r24, 0x01	; 1
    3be4:	c8 0f       	add	r28, r24
    3be6:	d9 1f       	adc	r29, r25
    3be8:	d7 cf       	rjmp	.-82     	; 0x3b98 <_Z9findindexPcPKch+0x24>
    3bea:	81 e0       	ldi	r24, 0x01	; 1
    3bec:	01 c0       	rjmp	.+2      	; 0x3bf0 <_Z9findindexPcPKch+0x7c>
    3bee:	80 e0       	ldi	r24, 0x00	; 0
    3bf0:	df 91       	pop	r29
    3bf2:	cf 91       	pop	r28
    3bf4:	1f 91       	pop	r17
    3bf6:	0f 91       	pop	r16
    3bf8:	ff 90       	pop	r15
    3bfa:	ef 90       	pop	r14
    3bfc:	df 90       	pop	r13
    3bfe:	08 95       	ret

00003c00 <_Z6pinnumPc>:
    3c00:	fc 01       	movw	r30, r24
    3c02:	81 81       	ldd	r24, Z+1	; 0x01
    3c04:	80 53       	subi	r24, 0x30	; 48
    3c06:	92 81       	ldd	r25, Z+2	; 0x02
    3c08:	99 23       	and	r25, r25
    3c0a:	31 f0       	breq	.+12     	; 0x3c18 <_Z6pinnumPc+0x18>
    3c0c:	90 53       	subi	r25, 0x30	; 48
    3c0e:	2a e0       	ldi	r18, 0x0A	; 10
    3c10:	82 9f       	mul	r24, r18
    3c12:	90 0d       	add	r25, r0
    3c14:	11 24       	eor	r1, r1
    3c16:	89 2f       	mov	r24, r25
    3c18:	08 95       	ret

00003c1a <_Z10whackabyteh>:
    3c1a:	0f 93       	push	r16
    3c1c:	1f 93       	push	r17
    3c1e:	cf 93       	push	r28
    3c20:	df 93       	push	r29
    3c22:	08 2f       	mov	r16, r24
    3c24:	80 91 d9 26 	lds	r24, 0x26D9
    3c28:	e8 2f       	mov	r30, r24
    3c2a:	f0 e0       	ldi	r31, 0x00	; 0
    3c2c:	ee 0f       	add	r30, r30
    3c2e:	ff 1f       	adc	r31, r31
    3c30:	e7 56       	subi	r30, 0x67	; 103
    3c32:	f9 4d       	sbci	r31, 0xD9	; 217
    3c34:	c0 81       	ld	r28, Z
    3c36:	d1 81       	ldd	r29, Z+1	; 0x01
    3c38:	60 e0       	ldi	r22, 0x00	; 0
    3c3a:	41 d8       	rcall	.-3966   	; 0x2cbe <digitalWrite>
    3c3c:	ce 01       	movw	r24, r28
    3c3e:	0e 94 71 14 	call	0x28e2	; 0x28e2 <delayMicroseconds>
    3c42:	19 e0       	ldi	r17, 0x09	; 9
    3c44:	11 50       	subi	r17, 0x01	; 1
    3c46:	51 f0       	breq	.+20     	; 0x3c5c <_Z10whackabyteh+0x42>
    3c48:	60 2f       	mov	r22, r16
    3c4a:	61 70       	andi	r22, 0x01	; 1
    3c4c:	80 91 d9 26 	lds	r24, 0x26D9
    3c50:	36 d8       	rcall	.-3988   	; 0x2cbe <digitalWrite>
    3c52:	ce 01       	movw	r24, r28
    3c54:	0e 94 71 14 	call	0x28e2	; 0x28e2 <delayMicroseconds>
    3c58:	06 95       	lsr	r16
    3c5a:	f4 cf       	rjmp	.-24     	; 0x3c44 <_Z10whackabyteh+0x2a>
    3c5c:	61 e0       	ldi	r22, 0x01	; 1
    3c5e:	80 91 d9 26 	lds	r24, 0x26D9
    3c62:	2d d8       	rcall	.-4006   	; 0x2cbe <digitalWrite>
    3c64:	ce 01       	movw	r24, r28
    3c66:	88 0f       	add	r24, r24
    3c68:	99 1f       	adc	r25, r25
    3c6a:	df 91       	pop	r29
    3c6c:	cf 91       	pop	r28
    3c6e:	1f 91       	pop	r17
    3c70:	0f 91       	pop	r16
    3c72:	0c 94 71 14 	jmp	0x28e2	; 0x28e2 <delayMicroseconds>

00003c76 <_Z3spbc>:
    3c76:	90 91 d9 26 	lds	r25, 0x26D9
    3c7a:	91 11       	cpse	r25, r1
    3c7c:	12 c0       	rjmp	.+36     	; 0x3ca2 <_Z3spbc+0x2c>
    3c7e:	e0 91 97 26 	lds	r30, 0x2697
    3c82:	f0 91 98 26 	lds	r31, 0x2698
    3c86:	30 97       	sbiw	r30, 0x00	; 0
    3c88:	09 f0       	breq	.+2      	; 0x3c8c <_Z3spbc+0x16>
    3c8a:	19 94       	eijmp
    3c8c:	e0 91 04 24 	lds	r30, 0x2404
    3c90:	f0 91 05 24 	lds	r31, 0x2405
    3c94:	01 90       	ld	r0, Z+
    3c96:	f0 81       	ld	r31, Z
    3c98:	e0 2d       	mov	r30, r0
    3c9a:	68 2f       	mov	r22, r24
    3c9c:	84 e0       	ldi	r24, 0x04	; 4
    3c9e:	94 e2       	ldi	r25, 0x24	; 36
    3ca0:	19 94       	eijmp
    3ca2:	bb cf       	rjmp	.-138    	; 0x3c1a <_Z10whackabyteh>

00003ca4 <_Z8showdictPKc>:
    3ca4:	cf 93       	push	r28
    3ca6:	df 93       	push	r29
    3ca8:	ec 01       	movw	r28, r24
    3caa:	21 96       	adiw	r28, 0x01	; 1
    3cac:	fe 01       	movw	r30, r28
    3cae:	31 97       	sbiw	r30, 0x01	; 1
    3cb0:	84 91       	lpm	r24, Z
    3cb2:	8f 3f       	cpi	r24, 0xFF	; 255
    3cb4:	61 f0       	breq	.+24     	; 0x3cce <_Z8showdictPKc+0x2a>
    3cb6:	81 11       	cpse	r24, r1
    3cb8:	06 c0       	rjmp	.+12     	; 0x3cc6 <_Z8showdictPKc+0x22>
    3cba:	fe 01       	movw	r30, r28
    3cbc:	84 91       	lpm	r24, Z
    3cbe:	88 23       	and	r24, r24
    3cc0:	31 f0       	breq	.+12     	; 0x3cce <_Z8showdictPKc+0x2a>
    3cc2:	80 e2       	ldi	r24, 0x20	; 32
    3cc4:	02 c0       	rjmp	.+4      	; 0x3cca <_Z8showdictPKc+0x26>
    3cc6:	80 36       	cpi	r24, 0x60	; 96
    3cc8:	81 f3       	breq	.-32     	; 0x3caa <_Z8showdictPKc+0x6>
    3cca:	d5 df       	rcall	.-86     	; 0x3c76 <_Z3spbc>
    3ccc:	ee cf       	rjmp	.-36     	; 0x3caa <_Z8showdictPKc+0x6>
    3cce:	df 91       	pop	r29
    3cd0:	cf 91       	pop	r28
    3cd2:	08 95       	ret

00003cd4 <_Z7putlbufc>:
    3cd4:	e0 91 c8 2f 	lds	r30, 0x2FC8
    3cd8:	f0 91 c9 2f 	lds	r31, 0x2FC9
    3cdc:	9f e2       	ldi	r25, 0x2F	; 47
    3cde:	e6 3c       	cpi	r30, 0xC6	; 198
    3ce0:	f9 07       	cpc	r31, r25
    3ce2:	58 f4       	brcc	.+22     	; 0x3cfa <_Z7putlbufc+0x26>
    3ce4:	9f 01       	movw	r18, r30
    3ce6:	2f 5f       	subi	r18, 0xFF	; 255
    3ce8:	3f 4f       	sbci	r19, 0xFF	; 255
    3cea:	30 93 c9 2f 	sts	0x2FC9, r19
    3cee:	20 93 c8 2f 	sts	0x2FC8, r18
    3cf2:	80 83       	st	Z, r24
    3cf4:	c0 df       	rcall	.-128    	; 0x3c76 <_Z3spbc>
    3cf6:	81 e0       	ldi	r24, 0x01	; 1
    3cf8:	08 95       	ret
    3cfa:	87 e0       	ldi	r24, 0x07	; 7
    3cfc:	bc df       	rcall	.-136    	; 0x3c76 <_Z3spbc>
    3cfe:	80 e0       	ldi	r24, 0x00	; 0
    3d00:	08 95       	ret

00003d02 <_Z4msgph>:
    3d02:	cf 93       	push	r28
    3d04:	df 93       	push	r29
    3d06:	b3 de       	rcall	.-666    	; 0x3a6e <_Z6getmsgh>
    3d08:	fc 01       	movw	r30, r24
    3d0a:	84 91       	lpm	r24, Z
    3d0c:	ef 01       	movw	r28, r30
    3d0e:	21 96       	adiw	r28, 0x01	; 1
    3d10:	88 23       	and	r24, r24
    3d12:	19 f0       	breq	.+6      	; 0x3d1a <_Z4msgph+0x18>
    3d14:	b0 df       	rcall	.-160    	; 0x3c76 <_Z3spbc>
    3d16:	fe 01       	movw	r30, r28
    3d18:	f8 cf       	rjmp	.-16     	; 0x3d0a <_Z4msgph+0x8>
    3d1a:	df 91       	pop	r29
    3d1c:	cf 91       	pop	r28
    3d1e:	08 95       	ret

00003d20 <_Z16setOutputHandlerPFvhE>:
    3d20:	90 93 98 26 	sts	0x2698, r25
    3d24:	80 93 97 26 	sts	0x2697, r24
    3d28:	08 95       	ret

00003d2a <_Z18resetOutputHandlerv>:
    3d2a:	10 92 98 26 	sts	0x2698, r1
    3d2e:	10 92 97 26 	sts	0x2697, r1
    3d32:	08 95       	ret

00003d34 <_Z2spPKc>:
    3d34:	cf 93       	push	r28
    3d36:	df 93       	push	r29
    3d38:	ec 01       	movw	r28, r24
    3d3a:	89 91       	ld	r24, Y+
    3d3c:	88 23       	and	r24, r24
    3d3e:	11 f0       	breq	.+4      	; 0x3d44 <_Z2spPKc+0x10>
    3d40:	9a df       	rcall	.-204    	; 0x3c76 <_Z3spbc>
    3d42:	fb cf       	rjmp	.-10     	; 0x3d3a <_Z2spPKc+0x6>
    3d44:	df 91       	pop	r29
    3d46:	cf 91       	pop	r28
    3d48:	08 95       	ret

00003d4a <_Z2spRK6String>:
    3d4a:	ef 92       	push	r14
    3d4c:	ff 92       	push	r15
    3d4e:	0f 93       	push	r16
    3d50:	1f 93       	push	r17
    3d52:	cf 93       	push	r28
    3d54:	df 93       	push	r29
    3d56:	cd b7       	in	r28, 0x3d	; 61
    3d58:	de b7       	in	r29, 0x3e	; 62
    3d5a:	ed b6       	in	r14, 0x3d	; 61
    3d5c:	fe b6       	in	r15, 0x3e	; 62
    3d5e:	fc 01       	movw	r30, r24
    3d60:	44 81       	ldd	r20, Z+4	; 0x04
    3d62:	55 81       	ldd	r21, Z+5	; 0x05
    3d64:	4f 5f       	subi	r20, 0xFF	; 255
    3d66:	5f 4f       	sbci	r21, 0xFF	; 255
    3d68:	2d b7       	in	r18, 0x3d	; 61
    3d6a:	3e b7       	in	r19, 0x3e	; 62
    3d6c:	24 1b       	sub	r18, r20
    3d6e:	35 0b       	sbc	r19, r21
    3d70:	0f b6       	in	r0, 0x3f	; 63
    3d72:	f8 94       	cli
    3d74:	3e bf       	out	0x3e, r19	; 62
    3d76:	0f be       	out	0x3f, r0	; 63
    3d78:	2d bf       	out	0x3d, r18	; 61
    3d7a:	0d b7       	in	r16, 0x3d	; 61
    3d7c:	1e b7       	in	r17, 0x3e	; 62
    3d7e:	0f 5f       	subi	r16, 0xFF	; 255
    3d80:	1f 4f       	sbci	r17, 0xFF	; 255
    3d82:	20 e0       	ldi	r18, 0x00	; 0
    3d84:	30 e0       	ldi	r19, 0x00	; 0
    3d86:	b8 01       	movw	r22, r16
    3d88:	15 db       	rcall	.-2518   	; 0x33b4 <_ZNK6String8getBytesEPhjj>
    3d8a:	c8 01       	movw	r24, r16
    3d8c:	d3 df       	rcall	.-90     	; 0x3d34 <_Z2spPKc>
    3d8e:	0f b6       	in	r0, 0x3f	; 63
    3d90:	f8 94       	cli
    3d92:	fe be       	out	0x3e, r15	; 62
    3d94:	0f be       	out	0x3f, r0	; 63
    3d96:	ed be       	out	0x3d, r14	; 61
    3d98:	df 91       	pop	r29
    3d9a:	cf 91       	pop	r28
    3d9c:	1f 91       	pop	r17
    3d9e:	0f 91       	pop	r16
    3da0:	ff 90       	pop	r15
    3da2:	ef 90       	pop	r14
    3da4:	08 95       	ret

00003da6 <_Z2sph>:
    3da6:	cf 93       	push	r28
    3da8:	df 93       	push	r29
    3daa:	00 d0       	rcall	.+0      	; 0x3dac <_Z2sph+0x6>
    3dac:	00 d0       	rcall	.+0      	; 0x3dae <_Z2sph+0x8>
    3dae:	cd b7       	in	r28, 0x3d	; 61
    3db0:	de b7       	in	r29, 0x3e	; 62
    3db2:	4a e0       	ldi	r20, 0x0A	; 10
    3db4:	68 2f       	mov	r22, r24
    3db6:	ce 01       	movw	r24, r28
    3db8:	01 96       	adiw	r24, 0x01	; 1
    3dba:	72 d9       	rcall	.-3356   	; 0x30a0 <_ZN6StringC1Ehh>
    3dbc:	ce 01       	movw	r24, r28
    3dbe:	01 96       	adiw	r24, 0x01	; 1
    3dc0:	c4 df       	rcall	.-120    	; 0x3d4a <_Z2spRK6String>
    3dc2:	ce 01       	movw	r24, r28
    3dc4:	01 96       	adiw	r24, 0x01	; 1
    3dc6:	9a d8       	rcall	.-3788   	; 0x2efc <_ZN6StringD1Ev>
    3dc8:	26 96       	adiw	r28, 0x06	; 6
    3dca:	0f b6       	in	r0, 0x3f	; 63
    3dcc:	f8 94       	cli
    3dce:	de bf       	out	0x3e, r29	; 62
    3dd0:	0f be       	out	0x3f, r0	; 63
    3dd2:	cd bf       	out	0x3d, r28	; 61
    3dd4:	df 91       	pop	r29
    3dd6:	cf 91       	pop	r28
    3dd8:	08 95       	ret

00003dda <_Z2spj>:
    3dda:	cf 93       	push	r28
    3ddc:	df 93       	push	r29
    3dde:	00 d0       	rcall	.+0      	; 0x3de0 <_Z2spj+0x6>
    3de0:	00 d0       	rcall	.+0      	; 0x3de2 <_Z2spj+0x8>
    3de2:	cd b7       	in	r28, 0x3d	; 61
    3de4:	de b7       	in	r29, 0x3e	; 62
    3de6:	4a e0       	ldi	r20, 0x0A	; 10
    3de8:	bc 01       	movw	r22, r24
    3dea:	ce 01       	movw	r24, r28
    3dec:	01 96       	adiw	r24, 0x01	; 1
    3dee:	af d9       	rcall	.-3234   	; 0x314e <_ZN6StringC1Ejh>
    3df0:	ce 01       	movw	r24, r28
    3df2:	01 96       	adiw	r24, 0x01	; 1
    3df4:	aa df       	rcall	.-172    	; 0x3d4a <_Z2spRK6String>
    3df6:	ce 01       	movw	r24, r28
    3df8:	01 96       	adiw	r24, 0x01	; 1
    3dfa:	80 d8       	rcall	.-3840   	; 0x2efc <_ZN6StringD1Ev>
    3dfc:	26 96       	adiw	r28, 0x06	; 6
    3dfe:	0f b6       	in	r0, 0x3f	; 63
    3e00:	f8 94       	cli
    3e02:	de bf       	out	0x3e, r29	; 62
    3e04:	0f be       	out	0x3f, r0	; 63
    3e06:	cd bf       	out	0x3d, r28	; 61
    3e08:	df 91       	pop	r29
    3e0a:	cf 91       	pop	r28
    3e0c:	08 95       	ret

00003e0e <_Z2spl>:
    3e0e:	cf 93       	push	r28
    3e10:	df 93       	push	r29
    3e12:	00 d0       	rcall	.+0      	; 0x3e14 <_Z2spl+0x6>
    3e14:	00 d0       	rcall	.+0      	; 0x3e16 <_Z2spl+0x8>
    3e16:	cd b7       	in	r28, 0x3d	; 61
    3e18:	de b7       	in	r29, 0x3e	; 62
    3e1a:	ab 01       	movw	r20, r22
    3e1c:	bc 01       	movw	r22, r24
    3e1e:	2a e0       	ldi	r18, 0x0A	; 10
    3e20:	ce 01       	movw	r24, r28
    3e22:	01 96       	adiw	r24, 0x01	; 1
    3e24:	bf d9       	rcall	.-3202   	; 0x31a4 <_ZN6StringC1Elh>
    3e26:	ce 01       	movw	r24, r28
    3e28:	01 96       	adiw	r24, 0x01	; 1
    3e2a:	8f df       	rcall	.-226    	; 0x3d4a <_Z2spRK6String>
    3e2c:	ce 01       	movw	r24, r28
    3e2e:	01 96       	adiw	r24, 0x01	; 1
    3e30:	65 d8       	rcall	.-3894   	; 0x2efc <_ZN6StringD1Ev>
    3e32:	26 96       	adiw	r28, 0x06	; 6
    3e34:	0f b6       	in	r0, 0x3f	; 63
    3e36:	f8 94       	cli
    3e38:	de bf       	out	0x3e, r29	; 62
    3e3a:	0f be       	out	0x3f, r0	; 63
    3e3c:	cd bf       	out	0x3d, r28	; 61
    3e3e:	df 91       	pop	r29
    3e40:	cf 91       	pop	r28
    3e42:	08 95       	ret

00003e44 <_Z2spm>:
    3e44:	cf 93       	push	r28
    3e46:	df 93       	push	r29
    3e48:	00 d0       	rcall	.+0      	; 0x3e4a <_Z2spm+0x6>
    3e4a:	00 d0       	rcall	.+0      	; 0x3e4c <_Z2spm+0x8>
    3e4c:	cd b7       	in	r28, 0x3d	; 61
    3e4e:	de b7       	in	r29, 0x3e	; 62
    3e50:	ab 01       	movw	r20, r22
    3e52:	bc 01       	movw	r22, r24
    3e54:	2a e0       	ldi	r18, 0x0A	; 10
    3e56:	ce 01       	movw	r24, r28
    3e58:	01 96       	adiw	r24, 0x01	; 1
    3e5a:	d0 d9       	rcall	.-3168   	; 0x31fc <_ZN6StringC1Emh>
    3e5c:	ce 01       	movw	r24, r28
    3e5e:	01 96       	adiw	r24, 0x01	; 1
    3e60:	74 df       	rcall	.-280    	; 0x3d4a <_Z2spRK6String>
    3e62:	ce 01       	movw	r24, r28
    3e64:	01 96       	adiw	r24, 0x01	; 1
    3e66:	4a d8       	rcall	.-3948   	; 0x2efc <_ZN6StringD1Ev>
    3e68:	26 96       	adiw	r28, 0x06	; 6
    3e6a:	0f b6       	in	r0, 0x3f	; 63
    3e6c:	f8 94       	cli
    3e6e:	de bf       	out	0x3e, r29	; 62
    3e70:	0f be       	out	0x3f, r0	; 63
    3e72:	cd bf       	out	0x3d, r28	; 61
    3e74:	df 91       	pop	r29
    3e76:	cf 91       	pop	r28
    3e78:	08 95       	ret

00003e7a <_Z5speolv>:
    3e7a:	8d e0       	ldi	r24, 0x0D	; 13
    3e7c:	fc de       	rcall	.-520    	; 0x3c76 <_Z3spbc>
    3e7e:	8a e0       	ldi	r24, 0x0A	; 10
    3e80:	fa ce       	rjmp	.-524    	; 0x3c76 <_Z3spbc>

00003e82 <_Z12pointToErrorv>:
    3e82:	cf 93       	push	r28
    3e84:	df 93       	push	r29
    3e86:	80 91 6e 2b 	lds	r24, 0x2B6E
    3e8a:	81 30       	cpi	r24, 0x01	; 1
    3e8c:	c1 f4       	brne	.+48     	; 0x3ebe <_Z12pointToErrorv+0x3c>
    3e8e:	c0 91 6a 2b 	lds	r28, 0x2B6A
    3e92:	d0 91 6b 2b 	lds	r29, 0x2B6B
    3e96:	c8 5c       	subi	r28, 0xC8	; 200
    3e98:	dd 42       	sbci	r29, 0x2D	; 45
    3e9a:	c1 15       	cp	r28, r1
    3e9c:	82 e0       	ldi	r24, 0x02	; 2
    3e9e:	d8 07       	cpc	r29, r24
    3ea0:	70 f4       	brcc	.+28     	; 0x3ebe <_Z12pointToErrorv+0x3c>
    3ea2:	eb df       	rcall	.-42     	; 0x3e7a <_Z5speolv>
    3ea4:	21 97       	sbiw	r28, 0x01	; 1
    3ea6:	ce 3f       	cpi	r28, 0xFE	; 254
    3ea8:	8f ef       	ldi	r24, 0xFF	; 255
    3eaa:	d8 07       	cpc	r29, r24
    3eac:	19 f0       	breq	.+6      	; 0x3eb4 <_Z12pointToErrorv+0x32>
    3eae:	8d e2       	ldi	r24, 0x2D	; 45
    3eb0:	e2 de       	rcall	.-572    	; 0x3c76 <_Z3spbc>
    3eb2:	f8 cf       	rjmp	.-16     	; 0x3ea4 <_Z12pointToErrorv+0x22>
    3eb4:	8e e5       	ldi	r24, 0x5E	; 94
    3eb6:	df de       	rcall	.-578    	; 0x3c76 <_Z3spbc>
    3eb8:	df 91       	pop	r29
    3eba:	cf 91       	pop	r28
    3ebc:	de cf       	rjmp	.-68     	; 0x3e7a <_Z5speolv>
    3ebe:	df 91       	pop	r29
    3ec0:	cf 91       	pop	r28
    3ec2:	08 95       	ret

00003ec4 <_Z19show_user_functionsv>:
    3ec4:	cf 93       	push	r28
    3ec6:	c0 e0       	ldi	r28, 0x00	; 0
    3ec8:	80 91 c7 2d 	lds	r24, 0x2DC7
    3ecc:	c8 17       	cp	r28, r24
    3ece:	68 f4       	brcc	.+26     	; 0x3eea <_Z19show_user_functionsv+0x26>
    3ed0:	84 e0       	ldi	r24, 0x04	; 4
    3ed2:	c8 9f       	mul	r28, r24
    3ed4:	f0 01       	movw	r30, r0
    3ed6:	11 24       	eor	r1, r1
    3ed8:	e1 59       	subi	r30, 0x91	; 145
    3eda:	f4 4d       	sbci	r31, 0xD4	; 212
    3edc:	80 81       	ld	r24, Z
    3ede:	91 81       	ldd	r25, Z+1	; 0x01
    3ee0:	29 df       	rcall	.-430    	; 0x3d34 <_Z2spPKc>
    3ee2:	80 e2       	ldi	r24, 0x20	; 32
    3ee4:	c8 de       	rcall	.-624    	; 0x3c76 <_Z3spbc>
    3ee6:	cf 5f       	subi	r28, 0xFF	; 255
    3ee8:	ef cf       	rjmp	.-34     	; 0x3ec8 <_Z19show_user_functionsv+0x4>
    3eea:	cf 91       	pop	r28
    3eec:	c6 cf       	rjmp	.-116    	; 0x3e7a <_Z5speolv>

00003eee <_Z5msgplh>:
    3eee:	09 df       	rcall	.-494    	; 0x3d02 <_Z4msgph>
    3ef0:	c4 cf       	rjmp	.-120    	; 0x3e7a <_Z5speolv>

00003ef2 <_Z5speolPKc>:
    3ef2:	20 df       	rcall	.-448    	; 0x3d34 <_Z2spPKc>
    3ef4:	c2 cf       	rjmp	.-124    	; 0x3e7a <_Z5speolv>

00003ef6 <_Z5speolRK6String>:
    3ef6:	29 df       	rcall	.-430    	; 0x3d4a <_Z2spRK6String>
    3ef8:	c0 cf       	rjmp	.-128    	; 0x3e7a <_Z5speolv>

00003efa <_Z5speolj>:
    3efa:	6f df       	rcall	.-290    	; 0x3dda <_Z2spj>
    3efc:	be cf       	rjmp	.-132    	; 0x3e7a <_Z5speolv>

00003efe <_Z18printIntegerInBasemhlh>:
    3efe:	4f 92       	push	r4
    3f00:	5f 92       	push	r5
    3f02:	6f 92       	push	r6
    3f04:	7f 92       	push	r7
    3f06:	8f 92       	push	r8
    3f08:	9f 92       	push	r9
    3f0a:	af 92       	push	r10
    3f0c:	bf 92       	push	r11
    3f0e:	cf 92       	push	r12
    3f10:	df 92       	push	r13
    3f12:	ef 92       	push	r14
    3f14:	ff 92       	push	r15
    3f16:	0f 93       	push	r16
    3f18:	1f 93       	push	r17
    3f1a:	cf 93       	push	r28
    3f1c:	df 93       	push	r29
    3f1e:	cd b7       	in	r28, 0x3d	; 61
    3f20:	de b7       	in	r29, 0x3e	; 62
    3f22:	a4 97       	sbiw	r28, 0x24	; 36
    3f24:	0f b6       	in	r0, 0x3f	; 63
    3f26:	f8 94       	cli
    3f28:	de bf       	out	0x3e, r29	; 62
    3f2a:	0f be       	out	0x3f, r0	; 63
    3f2c:	cd bf       	out	0x3d, r28	; 61
    3f2e:	28 01       	movw	r4, r16
    3f30:	39 01       	movw	r6, r18
    3f32:	1e 2d       	mov	r17, r14
    3f34:	9e 01       	movw	r18, r28
    3f36:	2f 5f       	subi	r18, 0xFF	; 255
    3f38:	3f 4f       	sbci	r19, 0xFF	; 255
    3f3a:	69 01       	movw	r12, r18
    3f3c:	61 15       	cp	r22, r1
    3f3e:	71 05       	cpc	r23, r1
    3f40:	81 05       	cpc	r24, r1
    3f42:	91 05       	cpc	r25, r1
    3f44:	31 f4       	brne	.+12     	; 0x3f52 <_Z18printIntegerInBasemhlh+0x54>
    3f46:	19 82       	std	Y+1, r1	; 0x01
    3f48:	7e 01       	movw	r14, r28
    3f4a:	32 e0       	ldi	r19, 0x02	; 2
    3f4c:	e3 0e       	add	r14, r19
    3f4e:	f1 1c       	adc	r15, r1
    3f50:	1f c0       	rjmp	.+62     	; 0x3f90 <_Z18printIntegerInBasemhlh+0x92>
    3f52:	59 01       	movw	r10, r18
    3f54:	24 2f       	mov	r18, r20
    3f56:	30 e0       	ldi	r19, 0x00	; 0
    3f58:	40 e0       	ldi	r20, 0x00	; 0
    3f5a:	50 e0       	ldi	r21, 0x00	; 0
    3f5c:	29 a3       	std	Y+33, r18	; 0x21
    3f5e:	3a a3       	std	Y+34, r19	; 0x22
    3f60:	4b a3       	std	Y+35, r20	; 0x23
    3f62:	5c a3       	std	Y+36, r21	; 0x24
    3f64:	45 01       	movw	r8, r10
    3f66:	3f ef       	ldi	r19, 0xFF	; 255
    3f68:	83 1a       	sub	r8, r19
    3f6a:	93 0a       	sbc	r9, r19
    3f6c:	74 01       	movw	r14, r8
    3f6e:	29 a1       	ldd	r18, Y+33	; 0x21
    3f70:	3a a1       	ldd	r19, Y+34	; 0x22
    3f72:	4b a1       	ldd	r20, Y+35	; 0x23
    3f74:	5c a1       	ldd	r21, Y+36	; 0x24
    3f76:	0e 94 48 b2 	call	0x16490	; 0x16490 <__udivmodsi4>
    3f7a:	f5 01       	movw	r30, r10
    3f7c:	60 83       	st	Z, r22
    3f7e:	b9 01       	movw	r22, r18
    3f80:	ca 01       	movw	r24, r20
    3f82:	61 15       	cp	r22, r1
    3f84:	71 05       	cpc	r23, r1
    3f86:	81 05       	cpc	r24, r1
    3f88:	91 05       	cpc	r25, r1
    3f8a:	11 f0       	breq	.+4      	; 0x3f90 <_Z18printIntegerInBasemhlh+0x92>
    3f8c:	54 01       	movw	r10, r8
    3f8e:	ea cf       	rjmp	.-44     	; 0x3f64 <_Z18printIntegerInBasemhlh+0x66>
    3f90:	41 14       	cp	r4, r1
    3f92:	51 04       	cpc	r5, r1
    3f94:	61 04       	cpc	r6, r1
    3f96:	71 04       	cpc	r7, r1
    3f98:	f1 f0       	breq	.+60     	; 0x3fd6 <_Z18printIntegerInBasemhlh+0xd8>
    3f9a:	c7 01       	movw	r24, r14
    3f9c:	8c 19       	sub	r24, r12
    3f9e:	9d 09       	sbc	r25, r13
    3fa0:	aa 27       	eor	r26, r26
    3fa2:	97 fd       	sbrc	r25, 7
    3fa4:	a0 95       	com	r26
    3fa6:	ba 2f       	mov	r27, r26
    3fa8:	48 1a       	sub	r4, r24
    3faa:	59 0a       	sbc	r5, r25
    3fac:	6a 0a       	sbc	r6, r26
    3fae:	7b 0a       	sbc	r7, r27
    3fb0:	14 14       	cp	r1, r4
    3fb2:	15 04       	cpc	r1, r5
    3fb4:	16 04       	cpc	r1, r6
    3fb6:	17 04       	cpc	r1, r7
    3fb8:	74 f4       	brge	.+28     	; 0x3fd6 <_Z18printIntegerInBasemhlh+0xd8>
    3fba:	81 2f       	mov	r24, r17
    3fbc:	5c de       	rcall	.-840    	; 0x3c76 <_Z3spbc>
    3fbe:	f1 e0       	ldi	r31, 0x01	; 1
    3fc0:	4f 1a       	sub	r4, r31
    3fc2:	51 08       	sbc	r5, r1
    3fc4:	61 08       	sbc	r6, r1
    3fc6:	71 08       	sbc	r7, r1
    3fc8:	f3 cf       	rjmp	.-26     	; 0x3fb0 <_Z18printIntegerInBasemhlh+0xb2>
    3fca:	f7 01       	movw	r30, r14
    3fcc:	80 81       	ld	r24, Z
    3fce:	8a 30       	cpi	r24, 0x0A	; 10
    3fd0:	48 f4       	brcc	.+18     	; 0x3fe4 <_Z18printIntegerInBasemhlh+0xe6>
    3fd2:	80 5d       	subi	r24, 0xD0	; 208
    3fd4:	50 de       	rcall	.-864    	; 0x3c76 <_Z3spbc>
    3fd6:	f1 e0       	ldi	r31, 0x01	; 1
    3fd8:	ef 1a       	sub	r14, r31
    3fda:	f1 08       	sbc	r15, r1
    3fdc:	ec 14       	cp	r14, r12
    3fde:	fd 04       	cpc	r15, r13
    3fe0:	a0 f7       	brcc	.-24     	; 0x3fca <_Z18printIntegerInBasemhlh+0xcc>
    3fe2:	02 c0       	rjmp	.+4      	; 0x3fe8 <_Z18printIntegerInBasemhlh+0xea>
    3fe4:	89 5c       	subi	r24, 0xC9	; 201
    3fe6:	f6 cf       	rjmp	.-20     	; 0x3fd4 <_Z18printIntegerInBasemhlh+0xd6>
    3fe8:	a4 96       	adiw	r28, 0x24	; 36
    3fea:	0f b6       	in	r0, 0x3f	; 63
    3fec:	f8 94       	cli
    3fee:	de bf       	out	0x3e, r29	; 62
    3ff0:	0f be       	out	0x3f, r0	; 63
    3ff2:	cd bf       	out	0x3d, r28	; 61
    3ff4:	df 91       	pop	r29
    3ff6:	cf 91       	pop	r28
    3ff8:	1f 91       	pop	r17
    3ffa:	0f 91       	pop	r16
    3ffc:	ff 90       	pop	r15
    3ffe:	ef 90       	pop	r14
    4000:	df 90       	pop	r13
    4002:	cf 90       	pop	r12
    4004:	bf 90       	pop	r11
    4006:	af 90       	pop	r10
    4008:	9f 90       	pop	r9
    400a:	8f 90       	pop	r8
    400c:	7f 90       	pop	r7
    400e:	6f 90       	pop	r6
    4010:	5f 90       	pop	r5
    4012:	4f 90       	pop	r4
    4014:	08 95       	ret

00004016 <_Z12printIntegerllh>:
    4016:	8f 92       	push	r8
    4018:	9f 92       	push	r9
    401a:	af 92       	push	r10
    401c:	bf 92       	push	r11
    401e:	ef 92       	push	r14
    4020:	0f 93       	push	r16
    4022:	1f 93       	push	r17
    4024:	cf 93       	push	r28
    4026:	df 93       	push	r29
    4028:	00 d0       	rcall	.+0      	; 0x402a <_Z12printIntegerllh+0x14>
    402a:	1f 92       	push	r1
    402c:	cd b7       	in	r28, 0x3d	; 61
    402e:	de b7       	in	r29, 0x3e	; 62
    4030:	4b 01       	movw	r8, r22
    4032:	5c 01       	movw	r10, r24
    4034:	97 ff       	sbrs	r25, 7
    4036:	16 c0       	rjmp	.+44     	; 0x4064 <_Z12printIntegerllh+0x4e>
    4038:	8d e2       	ldi	r24, 0x2D	; 45
    403a:	29 83       	std	Y+1, r18	; 0x01
    403c:	3a 83       	std	Y+2, r19	; 0x02
    403e:	4b 83       	std	Y+3, r20	; 0x03
    4040:	5c 83       	std	Y+4, r21	; 0x04
    4042:	19 de       	rcall	.-974    	; 0x3c76 <_Z3spbc>
    4044:	b0 94       	com	r11
    4046:	a0 94       	com	r10
    4048:	90 94       	com	r9
    404a:	80 94       	com	r8
    404c:	81 1c       	adc	r8, r1
    404e:	91 1c       	adc	r9, r1
    4050:	a1 1c       	adc	r10, r1
    4052:	b1 1c       	adc	r11, r1
    4054:	29 81       	ldd	r18, Y+1	; 0x01
    4056:	3a 81       	ldd	r19, Y+2	; 0x02
    4058:	4b 81       	ldd	r20, Y+3	; 0x03
    405a:	5c 81       	ldd	r21, Y+4	; 0x04
    405c:	21 50       	subi	r18, 0x01	; 1
    405e:	31 09       	sbc	r19, r1
    4060:	41 09       	sbc	r20, r1
    4062:	51 09       	sbc	r21, r1
    4064:	e0 2e       	mov	r14, r16
    4066:	89 01       	movw	r16, r18
    4068:	9a 01       	movw	r18, r20
    406a:	4a e0       	ldi	r20, 0x0A	; 10
    406c:	c5 01       	movw	r24, r10
    406e:	b4 01       	movw	r22, r8
    4070:	46 df       	rcall	.-372    	; 0x3efe <_Z18printIntegerInBasemhlh>
    4072:	0f 90       	pop	r0
    4074:	0f 90       	pop	r0
    4076:	0f 90       	pop	r0
    4078:	0f 90       	pop	r0
    407a:	df 91       	pop	r29
    407c:	cf 91       	pop	r28
    407e:	1f 91       	pop	r17
    4080:	0f 91       	pop	r16
    4082:	ef 90       	pop	r14
    4084:	bf 90       	pop	r11
    4086:	af 90       	pop	r10
    4088:	9f 90       	pop	r9
    408a:	8f 90       	pop	r8
    408c:	08 95       	ret

0000408e <_Z6getsymv>:
    408e:	0f 93       	push	r16
    4090:	8a b5       	in	r24, 0x2a	; 42
    4092:	01 dd       	rcall	.-1534   	; 0x3a96 <_Z8chartypeh>
    4094:	e8 2f       	mov	r30, r24
    4096:	f0 e0       	ldi	r31, 0x00	; 0
    4098:	ee 0f       	add	r30, r30
    409a:	ff 1f       	adc	r31, r31
    409c:	e6 5f       	subi	r30, 0xF6	; 246
    409e:	fd 4f       	sbci	r31, 0xFD	; 253
    40a0:	01 90       	ld	r0, Z+
    40a2:	f0 81       	ld	r31, Z
    40a4:	e0 2d       	mov	r30, r0
    40a6:	19 95       	eicall
    40a8:	80 91 47 2b 	lds	r24, 0x2B47
    40ac:	88 23       	and	r24, r24
    40ae:	f1 f0       	breq	.+60     	; 0x40ec <_Z6getsymv+0x5e>
    40b0:	84 e8       	ldi	r24, 0x84	; 132
    40b2:	9c e0       	ldi	r25, 0x0C	; 12
    40b4:	3f de       	rcall	.-898    	; 0x3d34 <_Z2spPKc>
    40b6:	6e b3       	in	r22, 0x1e	; 30
    40b8:	70 e0       	ldi	r23, 0x00	; 0
    40ba:	80 e0       	ldi	r24, 0x00	; 0
    40bc:	90 e0       	ldi	r25, 0x00	; 0
    40be:	00 e2       	ldi	r16, 0x20	; 32
    40c0:	20 e0       	ldi	r18, 0x00	; 0
    40c2:	30 e0       	ldi	r19, 0x00	; 0
    40c4:	a9 01       	movw	r20, r18
    40c6:	a7 df       	rcall	.-178    	; 0x4016 <_Z12printIntegerllh>
    40c8:	8a e8       	ldi	r24, 0x8A	; 138
    40ca:	9c e0       	ldi	r25, 0x0C	; 12
    40cc:	33 de       	rcall	.-922    	; 0x3d34 <_Z2spPKc>
    40ce:	60 91 66 2b 	lds	r22, 0x2B66
    40d2:	70 91 67 2b 	lds	r23, 0x2B67
    40d6:	80 91 68 2b 	lds	r24, 0x2B68
    40da:	90 91 69 2b 	lds	r25, 0x2B69
    40de:	20 e0       	ldi	r18, 0x00	; 0
    40e0:	30 e0       	ldi	r19, 0x00	; 0
    40e2:	a9 01       	movw	r20, r18
    40e4:	98 df       	rcall	.-208    	; 0x4016 <_Z12printIntegerllh>
    40e6:	80 e2       	ldi	r24, 0x20	; 32
    40e8:	0f 91       	pop	r16
    40ea:	c5 cd       	rjmp	.-1142   	; 0x3c76 <_Z3spbc>
    40ec:	0f 91       	pop	r16
    40ee:	08 95       	ret

000040f0 <_Z8printHexm>:
    40f0:	ef 92       	push	r14
    40f2:	0f 93       	push	r16
    40f4:	1f 93       	push	r17
    40f6:	50 e3       	ldi	r21, 0x30	; 48
    40f8:	e5 2e       	mov	r14, r21
    40fa:	00 e0       	ldi	r16, 0x00	; 0
    40fc:	10 e0       	ldi	r17, 0x00	; 0
    40fe:	98 01       	movw	r18, r16
    4100:	40 e1       	ldi	r20, 0x10	; 16
    4102:	fd de       	rcall	.-518    	; 0x3efe <_Z18printIntegerInBasemhlh>
    4104:	1f 91       	pop	r17
    4106:	0f 91       	pop	r16
    4108:	ef 90       	pop	r14
    410a:	08 95       	ret

0000410c <_Z14markparsepointP10parsepoint>:
    410c:	40 91 6a 2b 	lds	r20, 0x2B6A
    4110:	50 91 6b 2b 	lds	r21, 0x2B6B
    4114:	60 91 6c 2b 	lds	r22, 0x2B6C
    4118:	70 91 6d 2b 	lds	r23, 0x2B6D
    411c:	fc 01       	movw	r30, r24
    411e:	40 83       	st	Z, r20
    4120:	51 83       	std	Z+1, r21	; 0x01
    4122:	62 83       	std	Z+2, r22	; 0x02
    4124:	73 83       	std	Z+3, r23	; 0x03
    4126:	20 91 6e 2b 	lds	r18, 0x2B6E
    412a:	24 83       	std	Z+4, r18	; 0x04
    412c:	80 91 47 2b 	lds	r24, 0x2B47
    4130:	88 23       	and	r24, r24
    4132:	b1 f0       	breq	.+44     	; 0x4160 <_Z14markparsepointP10parsepoint+0x54>
    4134:	a2 de       	rcall	.-700    	; 0x3e7a <_Z5speolv>
    4136:	8e e8       	ldi	r24, 0x8E	; 142
    4138:	9c e0       	ldi	r25, 0x0C	; 12
    413a:	fc dd       	rcall	.-1032   	; 0x3d34 <_Z2spPKc>
    413c:	60 91 6e 2b 	lds	r22, 0x2B6E
    4140:	70 e0       	ldi	r23, 0x00	; 0
    4142:	80 e0       	ldi	r24, 0x00	; 0
    4144:	90 e0       	ldi	r25, 0x00	; 0
    4146:	d4 df       	rcall	.-88     	; 0x40f0 <_Z8printHexm>
    4148:	80 e2       	ldi	r24, 0x20	; 32
    414a:	95 dd       	rcall	.-1238   	; 0x3c76 <_Z3spbc>
    414c:	60 91 6a 2b 	lds	r22, 0x2B6A
    4150:	70 91 6b 2b 	lds	r23, 0x2B6B
    4154:	80 91 6c 2b 	lds	r24, 0x2B6C
    4158:	90 91 6d 2b 	lds	r25, 0x2B6D
    415c:	c9 df       	rcall	.-110    	; 0x40f0 <_Z8printHexm>
    415e:	8d ce       	rjmp	.-742    	; 0x3e7a <_Z5speolv>
    4160:	08 95       	ret

00004162 <_Z2tbv>:
    4162:	80 91 47 2b 	lds	r24, 0x2B47
    4166:	88 23       	and	r24, r24
    4168:	09 f1       	breq	.+66     	; 0x41ac <_Z2tbv+0x4a>
    416a:	84 e9       	ldi	r24, 0x94	; 148
    416c:	9c e0       	ldi	r25, 0x0C	; 12
    416e:	e2 dd       	rcall	.-1084   	; 0x3d34 <_Z2spPKc>
    4170:	60 91 6a 2b 	lds	r22, 0x2B6A
    4174:	70 91 6b 2b 	lds	r23, 0x2B6B
    4178:	80 91 6c 2b 	lds	r24, 0x2B6C
    417c:	90 91 6d 2b 	lds	r25, 0x2B6D
    4180:	b7 df       	rcall	.-146    	; 0x40f0 <_Z8printHexm>
    4182:	80 e2       	ldi	r24, 0x20	; 32
    4184:	78 dd       	rcall	.-1296   	; 0x3c76 <_Z3spbc>
    4186:	8f e7       	ldi	r24, 0x7F	; 127
    4188:	9f e0       	ldi	r25, 0x0F	; 15
    418a:	d4 dd       	rcall	.-1112   	; 0x3d34 <_Z2spPKc>
    418c:	6e b3       	in	r22, 0x1e	; 30
    418e:	70 e0       	ldi	r23, 0x00	; 0
    4190:	80 e0       	ldi	r24, 0x00	; 0
    4192:	90 e0       	ldi	r25, 0x00	; 0
    4194:	ad df       	rcall	.-166    	; 0x40f0 <_Z8printHexm>
    4196:	80 e2       	ldi	r24, 0x20	; 32
    4198:	6e dd       	rcall	.-1316   	; 0x3c76 <_Z3spbc>
    419a:	85 e1       	ldi	r24, 0x15	; 21
    419c:	9c e1       	ldi	r25, 0x1C	; 28
    419e:	ca dd       	rcall	.-1132   	; 0x3d34 <_Z2spPKc>
    41a0:	6a b5       	in	r22, 0x2a	; 42
    41a2:	70 e0       	ldi	r23, 0x00	; 0
    41a4:	80 e0       	ldi	r24, 0x00	; 0
    41a6:	90 e0       	ldi	r25, 0x00	; 0
    41a8:	a3 df       	rcall	.-186    	; 0x40f0 <_Z8printHexm>
    41aa:	67 ce       	rjmp	.-818    	; 0x3e7a <_Z5speolv>
    41ac:	08 95       	ret

000041ae <_Z6fatal2cc>:
    41ae:	cf 93       	push	r28
    41b0:	df 93       	push	r29
    41b2:	1f 92       	push	r1
    41b4:	1f 92       	push	r1
    41b6:	cd b7       	in	r28, 0x3d	; 61
    41b8:	de b7       	in	r29, 0x3e	; 62
    41ba:	10 92 d9 26 	sts	0x26D9, r1
    41be:	6a 83       	std	Y+2, r22	; 0x02
    41c0:	89 83       	std	Y+1, r24	; 0x01
    41c2:	5f de       	rcall	.-834    	; 0x3e82 <_Z12pointToErrorv>
    41c4:	89 81       	ldd	r24, Y+1	; 0x01
    41c6:	9d dd       	rcall	.-1222   	; 0x3d02 <_Z4msgph>
    41c8:	6a 81       	ldd	r22, Y+2	; 0x02
    41ca:	66 23       	and	r22, r22
    41cc:	11 f0       	breq	.+4      	; 0x41d2 <_Z6fatal2cc+0x24>
    41ce:	86 2f       	mov	r24, r22
    41d0:	8e de       	rcall	.-740    	; 0x3eee <_Z5msgplh>
    41d2:	c7 df       	rcall	.-114    	; 0x4162 <_Z2tbv>
    41d4:	61 e0       	ldi	r22, 0x01	; 1
    41d6:	70 e0       	ldi	r23, 0x00	; 0
    41d8:	88 e1       	ldi	r24, 0x18	; 24
    41da:	96 e2       	ldi	r25, 0x26	; 38
    41dc:	0e 94 a6 b4 	call	0x1694c	; 0x1694c <longjmp>

000041e0 <_Z5fatalc>:
    41e0:	60 e0       	ldi	r22, 0x00	; 0
    41e2:	e5 df       	rcall	.-54     	; 0x41ae <_Z6fatal2cc>

000041e4 <_Z12expectedcharh>:
    41e4:	48 dd       	rcall	.-1392   	; 0x3c76 <_Z3spbc>
    41e6:	80 e0       	ldi	r24, 0x00	; 0
    41e8:	fb df       	rcall	.-10     	; 0x41e0 <_Z5fatalc>

000041ea <_Z8expectedh>:
    41ea:	68 2f       	mov	r22, r24
    41ec:	80 e0       	ldi	r24, 0x00	; 0
    41ee:	df df       	rcall	.-66     	; 0x41ae <_Z6fatal2cc>

000041f0 <_Z10unexpectedh>:
    41f0:	68 2f       	mov	r22, r24
    41f2:	81 e0       	ldi	r24, 0x01	; 1
    41f4:	dc df       	rcall	.-72     	; 0x41ae <_Z6fatal2cc>

000041f6 <_Z6chkpinc>:
    41f6:	80 32       	cpi	r24, 0x20	; 32
    41f8:	10 f0       	brcs	.+4      	; 0x41fe <_Z6chkpinc+0x8>
    41fa:	8e e0       	ldi	r24, 0x0E	; 14
    41fc:	f9 cf       	rjmp	.-14     	; 0x41f0 <_Z10unexpectedh>
    41fe:	08 95       	ret

00004200 <_Z7setBaudlm>:
    4200:	8f 92       	push	r8
    4202:	9f 92       	push	r9
    4204:	af 92       	push	r10
    4206:	bf 92       	push	r11
    4208:	cf 92       	push	r12
    420a:	df 92       	push	r13
    420c:	ef 92       	push	r14
    420e:	ff 92       	push	r15
    4210:	cf 93       	push	r28
    4212:	df 93       	push	r29
    4214:	6b 01       	movw	r12, r22
    4216:	7c 01       	movw	r14, r24
    4218:	49 01       	movw	r8, r18
    421a:	5a 01       	movw	r10, r20
    421c:	86 2f       	mov	r24, r22
    421e:	eb df       	rcall	.-42     	; 0x41f6 <_Z6chkpinc>
    4220:	c1 14       	cp	r12, r1
    4222:	d1 04       	cpc	r13, r1
    4224:	e1 04       	cpc	r14, r1
    4226:	f1 04       	cpc	r15, r1
    4228:	59 f4       	brne	.+22     	; 0x4240 <_Z7setBaudlm+0x40>
    422a:	26 e0       	ldi	r18, 0x06	; 6
    422c:	b5 01       	movw	r22, r10
    422e:	a4 01       	movw	r20, r8
    4230:	84 e0       	ldi	r24, 0x04	; 4
    4232:	94 e2       	ldi	r25, 0x24	; 36
    4234:	0e 94 cd 0c 	call	0x199a	; 0x199a <_ZN14HardwareSerial5beginEmh>
    4238:	60 e0       	ldi	r22, 0x00	; 0
    423a:	70 e0       	ldi	r23, 0x00	; 0
    423c:	cb 01       	movw	r24, r22
    423e:	23 c0       	rjmp	.+70     	; 0x4286 <_Z7setBaudlm+0x86>
    4240:	e6 01       	movw	r28, r12
    4242:	cc 0f       	add	r28, r28
    4244:	dd 1f       	adc	r29, r29
    4246:	c7 56       	subi	r28, 0x67	; 103
    4248:	d9 4d       	sbci	r29, 0xD9	; 217
    424a:	60 e4       	ldi	r22, 0x40	; 64
    424c:	72 e4       	ldi	r23, 0x42	; 66
    424e:	8f e0       	ldi	r24, 0x0F	; 15
    4250:	90 e0       	ldi	r25, 0x00	; 0
    4252:	a5 01       	movw	r20, r10
    4254:	94 01       	movw	r18, r8
    4256:	0e 94 48 b2 	call	0x16490	; 0x16490 <__udivmodsi4>
    425a:	23 50       	subi	r18, 0x03	; 3
    425c:	31 09       	sbc	r19, r1
    425e:	39 83       	std	Y+1, r19	; 0x01
    4260:	28 83       	st	Y, r18
    4262:	61 e0       	ldi	r22, 0x01	; 1
    4264:	8c 2d       	mov	r24, r12
    4266:	0e 94 21 16 	call	0x2c42	; 0x2c42 <pinMode>
    426a:	61 e0       	ldi	r22, 0x01	; 1
    426c:	8c 2d       	mov	r24, r12
    426e:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <digitalWrite>
    4272:	88 81       	ld	r24, Y
    4274:	99 81       	ldd	r25, Y+1	; 0x01
    4276:	0e 94 71 14 	call	0x28e2	; 0x28e2 <delayMicroseconds>
    427a:	68 81       	ld	r22, Y
    427c:	79 81       	ldd	r23, Y+1	; 0x01
    427e:	88 27       	eor	r24, r24
    4280:	77 fd       	sbrc	r23, 7
    4282:	80 95       	com	r24
    4284:	98 2f       	mov	r25, r24
    4286:	df 91       	pop	r29
    4288:	cf 91       	pop	r28
    428a:	ff 90       	pop	r15
    428c:	ef 90       	pop	r14
    428e:	df 90       	pop	r13
    4290:	cf 90       	pop	r12
    4292:	bf 90       	pop	r11
    4294:	af 90       	pop	r10
    4296:	9f 90       	pop	r9
    4298:	8f 90       	pop	r8
    429a:	08 95       	ret

0000429c <_Z9setOutputh>:
    429c:	cf 93       	push	r28
    429e:	c8 2f       	mov	r28, r24
    42a0:	aa df       	rcall	.-172    	; 0x41f6 <_Z6chkpinc>
    42a2:	c0 93 d9 26 	sts	0x26D9, r28
    42a6:	cc 23       	and	r28, r28
    42a8:	a1 f0       	breq	.+40     	; 0x42d2 <_Z9setOutputh+0x36>
    42aa:	ec 2f       	mov	r30, r28
    42ac:	f0 e0       	ldi	r31, 0x00	; 0
    42ae:	ee 0f       	add	r30, r30
    42b0:	ff 1f       	adc	r31, r31
    42b2:	e7 56       	subi	r30, 0x67	; 103
    42b4:	f9 4d       	sbci	r31, 0xD9	; 217
    42b6:	20 81       	ld	r18, Z
    42b8:	31 81       	ldd	r19, Z+1	; 0x01
    42ba:	23 2b       	or	r18, r19
    42bc:	51 f4       	brne	.+20     	; 0x42d2 <_Z9setOutputh+0x36>
    42be:	6c 2f       	mov	r22, r28
    42c0:	70 e0       	ldi	r23, 0x00	; 0
    42c2:	80 e0       	ldi	r24, 0x00	; 0
    42c4:	90 e0       	ldi	r25, 0x00	; 0
    42c6:	20 e8       	ldi	r18, 0x80	; 128
    42c8:	35 e2       	ldi	r19, 0x25	; 37
    42ca:	40 e0       	ldi	r20, 0x00	; 0
    42cc:	50 e0       	ldi	r21, 0x00	; 0
    42ce:	cf 91       	pop	r28
    42d0:	97 cf       	rjmp	.-210    	; 0x4200 <_Z7setBaudlm>
    42d2:	cf 91       	pop	r28
    42d4:	08 95       	ret

000042d6 <_Z6badsymv>:
    42d6:	84 e1       	ldi	r24, 0x14	; 20
    42d8:	8b df       	rcall	.-234    	; 0x41f0 <_Z10unexpectedh>

000042da <_Z7missingh>:
    42da:	68 2f       	mov	r22, r24
    42dc:	82 e0       	ldi	r24, 0x02	; 2
    42de:	67 df       	rcall	.-306    	; 0x41ae <_Z6fatal2cc>

000042e0 <_Z7reqargsh>:
    42e0:	e0 91 44 2b 	lds	r30, 0x2B44
    42e4:	f0 91 45 2b 	lds	r31, 0x2B45
    42e8:	90 e0       	ldi	r25, 0x00	; 0
    42ea:	a0 e0       	ldi	r26, 0x00	; 0
    42ec:	b0 e0       	ldi	r27, 0x00	; 0
    42ee:	40 81       	ld	r20, Z
    42f0:	51 81       	ldd	r21, Z+1	; 0x01
    42f2:	62 81       	ldd	r22, Z+2	; 0x02
    42f4:	73 81       	ldd	r23, Z+3	; 0x03
    42f6:	48 17       	cp	r20, r24
    42f8:	59 07       	cpc	r21, r25
    42fa:	6a 07       	cpc	r22, r26
    42fc:	7b 07       	cpc	r23, r27
    42fe:	14 f4       	brge	.+4      	; 0x4304 <_Z7reqargsh+0x24>
    4300:	8b e1       	ldi	r24, 0x1B	; 27
    4302:	eb cf       	rjmp	.-42     	; 0x42da <_Z7missingh>
    4304:	08 95       	ret

00004306 <_Z9func_beepv>:
    4306:	8f 92       	push	r8
    4308:	9f 92       	push	r9
    430a:	af 92       	push	r10
    430c:	bf 92       	push	r11
    430e:	cf 92       	push	r12
    4310:	df 92       	push	r13
    4312:	ef 92       	push	r14
    4314:	ff 92       	push	r15
    4316:	0f 93       	push	r16
    4318:	1f 93       	push	r17
    431a:	cf 93       	push	r28
    431c:	df 93       	push	r29
    431e:	00 d0       	rcall	.+0      	; 0x4320 <_Z9func_beepv+0x1a>
    4320:	1f 92       	push	r1
    4322:	cd b7       	in	r28, 0x3d	; 61
    4324:	de b7       	in	r29, 0x3e	; 62
    4326:	83 e0       	ldi	r24, 0x03	; 3
    4328:	db df       	rcall	.-74     	; 0x42e0 <_Z7reqargsh>
    432a:	80 90 44 2b 	lds	r8, 0x2B44
    432e:	90 90 45 2b 	lds	r9, 0x2B45
    4332:	f4 01       	movw	r30, r8
    4334:	38 97       	sbiw	r30, 0x08	; 8
    4336:	c0 80       	ld	r12, Z
    4338:	d1 80       	ldd	r13, Z+1	; 0x01
    433a:	e2 80       	ldd	r14, Z+2	; 0x02
    433c:	f3 80       	ldd	r15, Z+3	; 0x03
    433e:	34 97       	sbiw	r30, 0x04	; 4
    4340:	60 81       	ld	r22, Z
    4342:	71 81       	ldd	r23, Z+1	; 0x01
    4344:	82 81       	ldd	r24, Z+2	; 0x02
    4346:	93 81       	ldd	r25, Z+3	; 0x03
    4348:	a7 01       	movw	r20, r14
    434a:	96 01       	movw	r18, r12
    434c:	0e 94 39 b2 	call	0x16472	; 0x16472 <__mulsi3>
    4350:	28 ee       	ldi	r18, 0xE8	; 232
    4352:	33 e0       	ldi	r19, 0x03	; 3
    4354:	40 e0       	ldi	r20, 0x00	; 0
    4356:	50 e0       	ldi	r21, 0x00	; 0
    4358:	0e 94 48 b2 	call	0x16490	; 0x16490 <__udivmodsi4>
    435c:	59 01       	movw	r10, r18
    435e:	8a 01       	movw	r16, r20
    4360:	60 e2       	ldi	r22, 0x20	; 32
    4362:	71 ea       	ldi	r23, 0xA1	; 161
    4364:	87 e0       	ldi	r24, 0x07	; 7
    4366:	90 e0       	ldi	r25, 0x00	; 0
    4368:	a7 01       	movw	r20, r14
    436a:	96 01       	movw	r18, r12
    436c:	0e 94 48 b2 	call	0x16490	; 0x16490 <__udivmodsi4>
    4370:	27 50       	subi	r18, 0x07	; 7
    4372:	31 09       	sbc	r19, r1
    4374:	41 09       	sbc	r20, r1
    4376:	51 09       	sbc	r21, r1
    4378:	f4 01       	movw	r30, r8
    437a:	34 97       	sbiw	r30, 0x04	; 4
    437c:	61 e0       	ldi	r22, 0x01	; 1
    437e:	80 81       	ld	r24, Z
    4380:	29 83       	std	Y+1, r18	; 0x01
    4382:	3a 83       	std	Y+2, r19	; 0x02
    4384:	4b 83       	std	Y+3, r20	; 0x03
    4386:	5c 83       	std	Y+4, r21	; 0x04
    4388:	0e 94 21 16 	call	0x2c42	; 0x2c42 <pinMode>
    438c:	65 01       	movw	r12, r10
    438e:	78 01       	movw	r14, r16
    4390:	29 81       	ldd	r18, Y+1	; 0x01
    4392:	3a 81       	ldd	r19, Y+2	; 0x02
    4394:	4b 81       	ldd	r20, Y+3	; 0x03
    4396:	5c 81       	ldd	r21, Y+4	; 0x04
    4398:	89 01       	movw	r16, r18
    439a:	01 50       	subi	r16, 0x01	; 1
    439c:	11 09       	sbc	r17, r1
    439e:	c1 14       	cp	r12, r1
    43a0:	d1 04       	cpc	r13, r1
    43a2:	e1 04       	cpc	r14, r1
    43a4:	f1 04       	cpc	r15, r1
    43a6:	41 f1       	breq	.+80     	; 0x43f8 <_Z9func_beepv+0xf2>
    43a8:	e0 91 44 2b 	lds	r30, 0x2B44
    43ac:	f0 91 45 2b 	lds	r31, 0x2B45
    43b0:	34 97       	sbiw	r30, 0x04	; 4
    43b2:	61 e0       	ldi	r22, 0x01	; 1
    43b4:	80 81       	ld	r24, Z
    43b6:	29 83       	std	Y+1, r18	; 0x01
    43b8:	3a 83       	std	Y+2, r19	; 0x02
    43ba:	4b 83       	std	Y+3, r20	; 0x03
    43bc:	5c 83       	std	Y+4, r21	; 0x04
    43be:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <digitalWrite>
    43c2:	29 81       	ldd	r18, Y+1	; 0x01
    43c4:	3a 81       	ldd	r19, Y+2	; 0x02
    43c6:	c9 01       	movw	r24, r18
    43c8:	0e 94 71 14 	call	0x28e2	; 0x28e2 <delayMicroseconds>
    43cc:	e0 91 44 2b 	lds	r30, 0x2B44
    43d0:	f0 91 45 2b 	lds	r31, 0x2B45
    43d4:	34 97       	sbiw	r30, 0x04	; 4
    43d6:	60 e0       	ldi	r22, 0x00	; 0
    43d8:	80 81       	ld	r24, Z
    43da:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <digitalWrite>
    43de:	c8 01       	movw	r24, r16
    43e0:	0e 94 71 14 	call	0x28e2	; 0x28e2 <delayMicroseconds>
    43e4:	81 e0       	ldi	r24, 0x01	; 1
    43e6:	c8 1a       	sub	r12, r24
    43e8:	d1 08       	sbc	r13, r1
    43ea:	e1 08       	sbc	r14, r1
    43ec:	f1 08       	sbc	r15, r1
    43ee:	5c 81       	ldd	r21, Y+4	; 0x04
    43f0:	4b 81       	ldd	r20, Y+3	; 0x03
    43f2:	3a 81       	ldd	r19, Y+2	; 0x02
    43f4:	29 81       	ldd	r18, Y+1	; 0x01
    43f6:	d3 cf       	rjmp	.-90     	; 0x439e <_Z9func_beepv+0x98>
    43f8:	60 e0       	ldi	r22, 0x00	; 0
    43fa:	70 e0       	ldi	r23, 0x00	; 0
    43fc:	cb 01       	movw	r24, r22
    43fe:	0f 90       	pop	r0
    4400:	0f 90       	pop	r0
    4402:	0f 90       	pop	r0
    4404:	0f 90       	pop	r0
    4406:	df 91       	pop	r29
    4408:	cf 91       	pop	r28
    440a:	1f 91       	pop	r17
    440c:	0f 91       	pop	r16
    440e:	ff 90       	pop	r15
    4410:	ef 90       	pop	r14
    4412:	df 90       	pop	r13
    4414:	cf 90       	pop	r12
    4416:	bf 90       	pop	r11
    4418:	af 90       	pop	r10
    441a:	9f 90       	pop	r9
    441c:	8f 90       	pop	r8
    441e:	08 95       	ret

00004420 <_Z11func_randomv>:
    4420:	cf 92       	push	r12
    4422:	df 92       	push	r13
    4424:	ef 92       	push	r14
    4426:	ff 92       	push	r15
    4428:	0f 93       	push	r16
    442a:	1f 93       	push	r17
    442c:	81 e0       	ldi	r24, 0x01	; 1
    442e:	58 df       	rcall	.-336    	; 0x42e0 <_Z7reqargsh>
    4430:	40 91 20 02 	lds	r20, 0x0220
    4434:	50 91 21 02 	lds	r21, 0x0221
    4438:	60 91 22 02 	lds	r22, 0x0222
    443c:	70 91 23 02 	lds	r23, 0x0223
    4440:	c0 90 1c 02 	lds	r12, 0x021C
    4444:	d0 90 1d 02 	lds	r13, 0x021D
    4448:	e0 90 1e 02 	lds	r14, 0x021E
    444c:	f0 90 1f 02 	lds	r15, 0x021F
    4450:	db 01       	movw	r26, r22
    4452:	ca 01       	movw	r24, r20
    4454:	e9 e1       	ldi	r30, 0x19	; 25
    4456:	b6 95       	lsr	r27
    4458:	a7 95       	ror	r26
    445a:	97 95       	ror	r25
    445c:	87 95       	ror	r24
    445e:	ea 95       	dec	r30
    4460:	d1 f7       	brne	.-12     	; 0x4456 <_Z11func_randomv+0x36>
    4462:	8c 0d       	add	r24, r12
    4464:	9d 1d       	adc	r25, r13
    4466:	ae 1d       	adc	r26, r14
    4468:	bf 1d       	adc	r27, r15
    446a:	f7 e0       	ldi	r31, 0x07	; 7
    446c:	44 0f       	add	r20, r20
    446e:	55 1f       	adc	r21, r21
    4470:	66 1f       	adc	r22, r22
    4472:	77 1f       	adc	r23, r23
    4474:	fa 95       	dec	r31
    4476:	d1 f7       	brne	.-12     	; 0x446c <_Z11func_randomv+0x4c>
    4478:	84 27       	eor	r24, r20
    447a:	95 27       	eor	r25, r21
    447c:	a6 27       	eor	r26, r22
    447e:	b7 27       	eor	r27, r23
    4480:	80 93 20 02 	sts	0x0220, r24
    4484:	90 93 21 02 	sts	0x0221, r25
    4488:	a0 93 22 02 	sts	0x0222, r26
    448c:	b0 93 23 02 	sts	0x0223, r27
    4490:	bc 01       	movw	r22, r24
    4492:	cd 01       	movw	r24, r26
    4494:	9f 77       	andi	r25, 0x7F	; 127
    4496:	e0 91 44 2b 	lds	r30, 0x2B44
    449a:	f0 91 45 2b 	lds	r31, 0x2B45
    449e:	34 97       	sbiw	r30, 0x04	; 4
    44a0:	20 81       	ld	r18, Z
    44a2:	31 81       	ldd	r19, Z+1	; 0x01
    44a4:	42 81       	ldd	r20, Z+2	; 0x02
    44a6:	53 81       	ldd	r21, Z+3	; 0x03
    44a8:	0e 94 6a b2 	call	0x164d4	; 0x164d4 <__divmodsi4>
    44ac:	97 01       	movw	r18, r14
    44ae:	86 01       	movw	r16, r12
    44b0:	a9 e1       	ldi	r26, 0x19	; 25
    44b2:	36 95       	lsr	r19
    44b4:	27 95       	ror	r18
    44b6:	17 95       	ror	r17
    44b8:	07 95       	ror	r16
    44ba:	aa 95       	dec	r26
    44bc:	d1 f7       	brne	.-12     	; 0x44b2 <_Z11func_randomv+0x92>
    44be:	01 51       	subi	r16, 0x11	; 17
    44c0:	11 44       	sbci	r17, 0x41	; 65
    44c2:	22 45       	sbci	r18, 0x52	; 82
    44c4:	31 42       	sbci	r19, 0x21	; 33
    44c6:	b7 e0       	ldi	r27, 0x07	; 7
    44c8:	cc 0c       	add	r12, r12
    44ca:	dd 1c       	adc	r13, r13
    44cc:	ee 1c       	adc	r14, r14
    44ce:	ff 1c       	adc	r15, r15
    44d0:	ba 95       	dec	r27
    44d2:	d1 f7       	brne	.-12     	; 0x44c8 <_Z11func_randomv+0xa8>
    44d4:	0c 25       	eor	r16, r12
    44d6:	1d 25       	eor	r17, r13
    44d8:	2e 25       	eor	r18, r14
    44da:	3f 25       	eor	r19, r15
    44dc:	00 93 1c 02 	sts	0x021C, r16
    44e0:	10 93 1d 02 	sts	0x021D, r17
    44e4:	20 93 1e 02 	sts	0x021E, r18
    44e8:	30 93 1f 02 	sts	0x021F, r19
    44ec:	1f 91       	pop	r17
    44ee:	0f 91       	pop	r16
    44f0:	ff 90       	pop	r15
    44f2:	ef 90       	pop	r14
    44f4:	df 90       	pop	r13
    44f6:	cf 90       	pop	r12
    44f8:	08 95       	ret

000044fa <_Z8func_inbv>:
    44fa:	81 e0       	ldi	r24, 0x01	; 1
    44fc:	f1 de       	rcall	.-542    	; 0x42e0 <_Z7reqargsh>
    44fe:	e0 91 44 2b 	lds	r30, 0x2B44
    4502:	f0 91 45 2b 	lds	r31, 0x2B45
    4506:	34 97       	sbiw	r30, 0x04	; 4
    4508:	01 90       	ld	r0, Z+
    450a:	f0 81       	ld	r31, Z
    450c:	e0 2d       	mov	r30, r0
    450e:	60 81       	ld	r22, Z
    4510:	70 e0       	ldi	r23, 0x00	; 0
    4512:	80 e0       	ldi	r24, 0x00	; 0
    4514:	90 e0       	ldi	r25, 0x00	; 0
    4516:	08 95       	ret

00004518 <_Z9func_outbv>:
    4518:	82 e0       	ldi	r24, 0x02	; 2
    451a:	e2 de       	rcall	.-572    	; 0x42e0 <_Z7reqargsh>
    451c:	80 91 44 2b 	lds	r24, 0x2B44
    4520:	90 91 45 2b 	lds	r25, 0x2B45
    4524:	fc 01       	movw	r30, r24
    4526:	34 97       	sbiw	r30, 0x04	; 4
    4528:	01 90       	ld	r0, Z+
    452a:	f0 81       	ld	r31, Z
    452c:	e0 2d       	mov	r30, r0
    452e:	dc 01       	movw	r26, r24
    4530:	18 97       	sbiw	r26, 0x08	; 8
    4532:	8c 91       	ld	r24, X
    4534:	80 83       	st	Z, r24
    4536:	60 e0       	ldi	r22, 0x00	; 0
    4538:	70 e0       	ldi	r23, 0x00	; 0
    453a:	cb 01       	movw	r24, r22
    453c:	08 95       	ret

0000453e <_Z8func_absv>:
    453e:	81 e0       	ldi	r24, 0x01	; 1
    4540:	cf de       	rcall	.-610    	; 0x42e0 <_Z7reqargsh>
    4542:	e0 91 44 2b 	lds	r30, 0x2B44
    4546:	f0 91 45 2b 	lds	r31, 0x2B45
    454a:	34 97       	sbiw	r30, 0x04	; 4
    454c:	60 81       	ld	r22, Z
    454e:	71 81       	ldd	r23, Z+1	; 0x01
    4550:	82 81       	ldd	r24, Z+2	; 0x02
    4552:	93 81       	ldd	r25, Z+3	; 0x03
    4554:	97 ff       	sbrs	r25, 7
    4556:	07 c0       	rjmp	.+14     	; 0x4566 <_Z8func_absv+0x28>
    4558:	90 95       	com	r25
    455a:	80 95       	com	r24
    455c:	70 95       	com	r23
    455e:	61 95       	neg	r22
    4560:	7f 4f       	sbci	r23, 0xFF	; 255
    4562:	8f 4f       	sbci	r24, 0xFF	; 255
    4564:	9f 4f       	sbci	r25, 0xFF	; 255
    4566:	08 95       	ret

00004568 <_Z9func_signv>:
    4568:	81 e0       	ldi	r24, 0x01	; 1
    456a:	ba de       	rcall	.-652    	; 0x42e0 <_Z7reqargsh>
    456c:	e0 91 44 2b 	lds	r30, 0x2B44
    4570:	f0 91 45 2b 	lds	r31, 0x2B45
    4574:	34 97       	sbiw	r30, 0x04	; 4
    4576:	40 81       	ld	r20, Z
    4578:	51 81       	ldd	r21, Z+1	; 0x01
    457a:	62 81       	ldd	r22, Z+2	; 0x02
    457c:	73 81       	ldd	r23, Z+3	; 0x03
    457e:	77 fd       	sbrc	r23, 7
    4580:	0c c0       	rjmp	.+24     	; 0x459a <_Z9func_signv+0x32>
    4582:	31 e0       	ldi	r19, 0x01	; 1
    4584:	20 e0       	ldi	r18, 0x00	; 0
    4586:	80 e0       	ldi	r24, 0x00	; 0
    4588:	90 e0       	ldi	r25, 0x00	; 0
    458a:	45 2b       	or	r20, r21
    458c:	46 2b       	or	r20, r22
    458e:	47 2b       	or	r20, r23
    4590:	09 f4       	brne	.+2      	; 0x4594 <_Z9func_signv+0x2c>
    4592:	30 e0       	ldi	r19, 0x00	; 0
    4594:	63 2f       	mov	r22, r19
    4596:	72 2f       	mov	r23, r18
    4598:	08 95       	ret
    459a:	6f ef       	ldi	r22, 0xFF	; 255
    459c:	7f ef       	ldi	r23, 0xFF	; 255
    459e:	8f ef       	ldi	r24, 0xFF	; 255
    45a0:	9f ef       	ldi	r25, 0xFF	; 255
    45a2:	08 95       	ret

000045a4 <_Z8func_minv>:
    45a4:	0f 93       	push	r16
    45a6:	1f 93       	push	r17
    45a8:	82 e0       	ldi	r24, 0x02	; 2
    45aa:	9a de       	rcall	.-716    	; 0x42e0 <_Z7reqargsh>
    45ac:	80 91 44 2b 	lds	r24, 0x2B44
    45b0:	90 91 45 2b 	lds	r25, 0x2B45
    45b4:	fc 01       	movw	r30, r24
    45b6:	38 97       	sbiw	r30, 0x08	; 8
    45b8:	dc 01       	movw	r26, r24
    45ba:	14 97       	sbiw	r26, 0x04	; 4
    45bc:	0d 91       	ld	r16, X+
    45be:	1d 91       	ld	r17, X+
    45c0:	2d 91       	ld	r18, X+
    45c2:	3c 91       	ld	r19, X
    45c4:	60 81       	ld	r22, Z
    45c6:	71 81       	ldd	r23, Z+1	; 0x01
    45c8:	82 81       	ldd	r24, Z+2	; 0x02
    45ca:	93 81       	ldd	r25, Z+3	; 0x03
    45cc:	06 17       	cp	r16, r22
    45ce:	17 07       	cpc	r17, r23
    45d0:	28 07       	cpc	r18, r24
    45d2:	39 07       	cpc	r19, r25
    45d4:	14 f4       	brge	.+4      	; 0x45da <_Z8func_minv+0x36>
    45d6:	c9 01       	movw	r24, r18
    45d8:	b8 01       	movw	r22, r16
    45da:	1f 91       	pop	r17
    45dc:	0f 91       	pop	r16
    45de:	08 95       	ret

000045e0 <_Z8func_maxv>:
    45e0:	0f 93       	push	r16
    45e2:	1f 93       	push	r17
    45e4:	82 e0       	ldi	r24, 0x02	; 2
    45e6:	7c de       	rcall	.-776    	; 0x42e0 <_Z7reqargsh>
    45e8:	80 91 44 2b 	lds	r24, 0x2B44
    45ec:	90 91 45 2b 	lds	r25, 0x2B45
    45f0:	fc 01       	movw	r30, r24
    45f2:	38 97       	sbiw	r30, 0x08	; 8
    45f4:	dc 01       	movw	r26, r24
    45f6:	14 97       	sbiw	r26, 0x04	; 4
    45f8:	0d 91       	ld	r16, X+
    45fa:	1d 91       	ld	r17, X+
    45fc:	2d 91       	ld	r18, X+
    45fe:	3c 91       	ld	r19, X
    4600:	60 81       	ld	r22, Z
    4602:	71 81       	ldd	r23, Z+1	; 0x01
    4604:	82 81       	ldd	r24, Z+2	; 0x02
    4606:	93 81       	ldd	r25, Z+3	; 0x03
    4608:	60 17       	cp	r22, r16
    460a:	71 07       	cpc	r23, r17
    460c:	82 07       	cpc	r24, r18
    460e:	93 07       	cpc	r25, r19
    4610:	14 f4       	brge	.+4      	; 0x4616 <_Z8func_maxv+0x36>
    4612:	c9 01       	movw	r24, r18
    4614:	b8 01       	movw	r22, r16
    4616:	1f 91       	pop	r17
    4618:	0f 91       	pop	r16
    461a:	08 95       	ret

0000461c <_Z14func_constrainv>:
    461c:	0f 93       	push	r16
    461e:	1f 93       	push	r17
    4620:	83 e0       	ldi	r24, 0x03	; 3
    4622:	5e de       	rcall	.-836    	; 0x42e0 <_Z7reqargsh>
    4624:	40 91 44 2b 	lds	r20, 0x2B44
    4628:	50 91 45 2b 	lds	r21, 0x2B45
    462c:	fa 01       	movw	r30, r20
    462e:	34 97       	sbiw	r30, 0x04	; 4
    4630:	00 81       	ld	r16, Z
    4632:	11 81       	ldd	r17, Z+1	; 0x01
    4634:	22 81       	ldd	r18, Z+2	; 0x02
    4636:	33 81       	ldd	r19, Z+3	; 0x03
    4638:	34 97       	sbiw	r30, 0x04	; 4
    463a:	80 81       	ld	r24, Z
    463c:	91 81       	ldd	r25, Z+1	; 0x01
    463e:	a2 81       	ldd	r26, Z+2	; 0x02
    4640:	b3 81       	ldd	r27, Z+3	; 0x03
    4642:	08 17       	cp	r16, r24
    4644:	19 07       	cpc	r17, r25
    4646:	2a 07       	cpc	r18, r26
    4648:	3b 07       	cpc	r19, r27
    464a:	6c f0       	brlt	.+26     	; 0x4666 <_Z14func_constrainv+0x4a>
    464c:	34 97       	sbiw	r30, 0x04	; 4
    464e:	60 81       	ld	r22, Z
    4650:	71 81       	ldd	r23, Z+1	; 0x01
    4652:	82 81       	ldd	r24, Z+2	; 0x02
    4654:	93 81       	ldd	r25, Z+3	; 0x03
    4656:	06 17       	cp	r16, r22
    4658:	17 07       	cpc	r17, r23
    465a:	28 07       	cpc	r18, r24
    465c:	39 07       	cpc	r19, r25
    465e:	2c f4       	brge	.+10     	; 0x466a <_Z14func_constrainv+0x4e>
    4660:	c9 01       	movw	r24, r18
    4662:	b8 01       	movw	r22, r16
    4664:	02 c0       	rjmp	.+4      	; 0x466a <_Z14func_constrainv+0x4e>
    4666:	bc 01       	movw	r22, r24
    4668:	cd 01       	movw	r24, r26
    466a:	1f 91       	pop	r17
    466c:	0f 91       	pop	r16
    466e:	08 95       	ret

00004670 <_Z7func_arv>:
    4670:	81 e0       	ldi	r24, 0x01	; 1
    4672:	36 de       	rcall	.-916    	; 0x42e0 <_Z7reqargsh>
    4674:	e0 91 44 2b 	lds	r30, 0x2B44
    4678:	f0 91 45 2b 	lds	r31, 0x2B45
    467c:	34 97       	sbiw	r30, 0x04	; 4
    467e:	80 81       	ld	r24, Z
    4680:	0e 94 de 14 	call	0x29bc	; 0x29bc <analogRead>
    4684:	bc 01       	movw	r22, r24
    4686:	88 27       	eor	r24, r24
    4688:	77 fd       	sbrc	r23, 7
    468a:	80 95       	com	r24
    468c:	98 2f       	mov	r25, r24
    468e:	08 95       	ret

00004690 <_Z7func_awv>:
    4690:	82 e0       	ldi	r24, 0x02	; 2
    4692:	26 de       	rcall	.-948    	; 0x42e0 <_Z7reqargsh>
    4694:	80 91 44 2b 	lds	r24, 0x2B44
    4698:	90 91 45 2b 	lds	r25, 0x2B45
    469c:	fc 01       	movw	r30, r24
    469e:	38 97       	sbiw	r30, 0x08	; 8
    46a0:	60 81       	ld	r22, Z
    46a2:	71 81       	ldd	r23, Z+1	; 0x01
    46a4:	34 96       	adiw	r30, 0x04	; 4
    46a6:	80 81       	ld	r24, Z
    46a8:	0e 94 02 15 	call	0x2a04	; 0x2a04 <analogWrite>
    46ac:	60 e0       	ldi	r22, 0x00	; 0
    46ae:	70 e0       	ldi	r23, 0x00	; 0
    46b0:	cb 01       	movw	r24, r22
    46b2:	08 95       	ret

000046b4 <_Z7func_drv>:
    46b4:	81 e0       	ldi	r24, 0x01	; 1
    46b6:	14 de       	rcall	.-984    	; 0x42e0 <_Z7reqargsh>
    46b8:	e0 91 44 2b 	lds	r30, 0x2B44
    46bc:	f0 91 45 2b 	lds	r31, 0x2B45
    46c0:	34 97       	sbiw	r30, 0x04	; 4
    46c2:	80 81       	ld	r24, Z
    46c4:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <digitalRead>
    46c8:	bc 01       	movw	r22, r24
    46ca:	88 27       	eor	r24, r24
    46cc:	77 fd       	sbrc	r23, 7
    46ce:	80 95       	com	r24
    46d0:	98 2f       	mov	r25, r24
    46d2:	08 95       	ret

000046d4 <_Z7func_dwv>:
    46d4:	82 e0       	ldi	r24, 0x02	; 2
    46d6:	04 de       	rcall	.-1016   	; 0x42e0 <_Z7reqargsh>
    46d8:	80 91 44 2b 	lds	r24, 0x2B44
    46dc:	90 91 45 2b 	lds	r25, 0x2B45
    46e0:	fc 01       	movw	r30, r24
    46e2:	38 97       	sbiw	r30, 0x08	; 8
    46e4:	dc 01       	movw	r26, r24
    46e6:	14 97       	sbiw	r26, 0x04	; 4
    46e8:	60 81       	ld	r22, Z
    46ea:	8c 91       	ld	r24, X
    46ec:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <digitalWrite>
    46f0:	60 e0       	ldi	r22, 0x00	; 0
    46f2:	70 e0       	ldi	r23, 0x00	; 0
    46f4:	cb 01       	movw	r24, r22
    46f6:	08 95       	ret

000046f8 <_Z12func_pinmodev>:
    46f8:	82 e0       	ldi	r24, 0x02	; 2
    46fa:	f2 dd       	rcall	.-1052   	; 0x42e0 <_Z7reqargsh>
    46fc:	80 91 44 2b 	lds	r24, 0x2B44
    4700:	90 91 45 2b 	lds	r25, 0x2B45
    4704:	fc 01       	movw	r30, r24
    4706:	38 97       	sbiw	r30, 0x08	; 8
    4708:	dc 01       	movw	r26, r24
    470a:	14 97       	sbiw	r26, 0x04	; 4
    470c:	60 81       	ld	r22, Z
    470e:	8c 91       	ld	r24, X
    4710:	0e 94 21 16 	call	0x2c42	; 0x2c42 <pinMode>
    4714:	60 e0       	ldi	r22, 0x00	; 0
    4716:	70 e0       	ldi	r23, 0x00	; 0
    4718:	cb 01       	movw	r24, r22
    471a:	08 95       	ret

0000471c <_Z12func_pulseinv>:
    471c:	83 e0       	ldi	r24, 0x03	; 3
    471e:	e0 dd       	rcall	.-1088   	; 0x42e0 <_Z7reqargsh>
    4720:	80 91 44 2b 	lds	r24, 0x2B44
    4724:	90 91 45 2b 	lds	r25, 0x2B45
    4728:	fc 01       	movw	r30, r24
    472a:	3c 97       	sbiw	r30, 0x0c	; 12
    472c:	20 81       	ld	r18, Z
    472e:	31 81       	ldd	r19, Z+1	; 0x01
    4730:	42 81       	ldd	r20, Z+2	; 0x02
    4732:	53 81       	ldd	r21, Z+3	; 0x03
    4734:	34 96       	adiw	r30, 0x04	; 4
    4736:	dc 01       	movw	r26, r24
    4738:	14 97       	sbiw	r26, 0x04	; 4
    473a:	60 81       	ld	r22, Z
    473c:	8c 91       	ld	r24, X
    473e:	0c 94 b8 16 	jmp	0x2d70	; 0x2d70 <pulseIn>

00004742 <_Z10func_delayv>:
    4742:	81 e0       	ldi	r24, 0x01	; 1
    4744:	cd dd       	rcall	.-1126   	; 0x42e0 <_Z7reqargsh>
    4746:	e0 91 44 2b 	lds	r30, 0x2B44
    474a:	f0 91 45 2b 	lds	r31, 0x2B45
    474e:	34 97       	sbiw	r30, 0x04	; 4
    4750:	60 81       	ld	r22, Z
    4752:	71 81       	ldd	r23, Z+1	; 0x01
    4754:	82 81       	ldd	r24, Z+2	; 0x02
    4756:	93 81       	ldd	r25, Z+3	; 0x03
    4758:	0e 94 48 14 	call	0x2890	; 0x2890 <delay>
    475c:	60 e0       	ldi	r22, 0x00	; 0
    475e:	70 e0       	ldi	r23, 0x00	; 0
    4760:	cb 01       	movw	r24, r22
    4762:	08 95       	ret

00004764 <_Z12func_setBaudv>:
    4764:	82 e0       	ldi	r24, 0x02	; 2
    4766:	bc dd       	rcall	.-1160   	; 0x42e0 <_Z7reqargsh>
    4768:	80 91 44 2b 	lds	r24, 0x2B44
    476c:	90 91 45 2b 	lds	r25, 0x2B45
    4770:	fc 01       	movw	r30, r24
    4772:	38 97       	sbiw	r30, 0x08	; 8
    4774:	20 81       	ld	r18, Z
    4776:	31 81       	ldd	r19, Z+1	; 0x01
    4778:	42 81       	ldd	r20, Z+2	; 0x02
    477a:	53 81       	ldd	r21, Z+3	; 0x03
    477c:	34 96       	adiw	r30, 0x04	; 4
    477e:	60 81       	ld	r22, Z
    4780:	71 81       	ldd	r23, Z+1	; 0x01
    4782:	82 81       	ldd	r24, Z+2	; 0x02
    4784:	93 81       	ldd	r25, Z+3	; 0x03
    4786:	3c dd       	rcall	.-1416   	; 0x4200 <_Z7setBaudlm>
    4788:	60 e0       	ldi	r22, 0x00	; 0
    478a:	70 e0       	ldi	r23, 0x00	; 0
    478c:	cb 01       	movw	r24, r22
    478e:	08 95       	ret

00004790 <_Z13func_bitclearv>:
    4790:	0f 93       	push	r16
    4792:	1f 93       	push	r17
    4794:	82 e0       	ldi	r24, 0x02	; 2
    4796:	a4 dd       	rcall	.-1208   	; 0x42e0 <_Z7reqargsh>
    4798:	20 91 44 2b 	lds	r18, 0x2B44
    479c:	30 91 45 2b 	lds	r19, 0x2B45
    47a0:	f9 01       	movw	r30, r18
    47a2:	38 97       	sbiw	r30, 0x08	; 8
    47a4:	61 e0       	ldi	r22, 0x01	; 1
    47a6:	70 e0       	ldi	r23, 0x00	; 0
    47a8:	80 e0       	ldi	r24, 0x00	; 0
    47aa:	90 e0       	ldi	r25, 0x00	; 0
    47ac:	00 80       	ld	r0, Z
    47ae:	04 c0       	rjmp	.+8      	; 0x47b8 <_Z13func_bitclearv+0x28>
    47b0:	66 0f       	add	r22, r22
    47b2:	77 1f       	adc	r23, r23
    47b4:	88 1f       	adc	r24, r24
    47b6:	99 1f       	adc	r25, r25
    47b8:	0a 94       	dec	r0
    47ba:	d2 f7       	brpl	.-12     	; 0x47b0 <_Z13func_bitclearv+0x20>
    47bc:	60 95       	com	r22
    47be:	70 95       	com	r23
    47c0:	80 95       	com	r24
    47c2:	90 95       	com	r25
    47c4:	34 96       	adiw	r30, 0x04	; 4
    47c6:	00 81       	ld	r16, Z
    47c8:	11 81       	ldd	r17, Z+1	; 0x01
    47ca:	22 81       	ldd	r18, Z+2	; 0x02
    47cc:	33 81       	ldd	r19, Z+3	; 0x03
    47ce:	60 23       	and	r22, r16
    47d0:	71 23       	and	r23, r17
    47d2:	82 23       	and	r24, r18
    47d4:	93 23       	and	r25, r19
    47d6:	1f 91       	pop	r17
    47d8:	0f 91       	pop	r16
    47da:	08 95       	ret

000047dc <_Z11func_bitsetv>:
    47dc:	0f 93       	push	r16
    47de:	1f 93       	push	r17
    47e0:	82 e0       	ldi	r24, 0x02	; 2
    47e2:	7e dd       	rcall	.-1284   	; 0x42e0 <_Z7reqargsh>
    47e4:	20 91 44 2b 	lds	r18, 0x2B44
    47e8:	30 91 45 2b 	lds	r19, 0x2B45
    47ec:	f9 01       	movw	r30, r18
    47ee:	38 97       	sbiw	r30, 0x08	; 8
    47f0:	61 e0       	ldi	r22, 0x01	; 1
    47f2:	70 e0       	ldi	r23, 0x00	; 0
    47f4:	80 e0       	ldi	r24, 0x00	; 0
    47f6:	90 e0       	ldi	r25, 0x00	; 0
    47f8:	00 80       	ld	r0, Z
    47fa:	04 c0       	rjmp	.+8      	; 0x4804 <_Z11func_bitsetv+0x28>
    47fc:	66 0f       	add	r22, r22
    47fe:	77 1f       	adc	r23, r23
    4800:	88 1f       	adc	r24, r24
    4802:	99 1f       	adc	r25, r25
    4804:	0a 94       	dec	r0
    4806:	d2 f7       	brpl	.-12     	; 0x47fc <_Z11func_bitsetv+0x20>
    4808:	34 96       	adiw	r30, 0x04	; 4
    480a:	00 81       	ld	r16, Z
    480c:	11 81       	ldd	r17, Z+1	; 0x01
    480e:	22 81       	ldd	r18, Z+2	; 0x02
    4810:	33 81       	ldd	r19, Z+3	; 0x03
    4812:	60 2b       	or	r22, r16
    4814:	71 2b       	or	r23, r17
    4816:	82 2b       	or	r24, r18
    4818:	93 2b       	or	r25, r19
    481a:	1f 91       	pop	r17
    481c:	0f 91       	pop	r16
    481e:	08 95       	ret

00004820 <_Z12func_bitreadv>:
    4820:	82 e0       	ldi	r24, 0x02	; 2
    4822:	5e dd       	rcall	.-1348   	; 0x42e0 <_Z7reqargsh>
    4824:	80 91 44 2b 	lds	r24, 0x2B44
    4828:	90 91 45 2b 	lds	r25, 0x2B45
    482c:	dc 01       	movw	r26, r24
    482e:	14 97       	sbiw	r26, 0x04	; 4
    4830:	fc 01       	movw	r30, r24
    4832:	38 97       	sbiw	r30, 0x08	; 8
    4834:	6d 91       	ld	r22, X+
    4836:	7d 91       	ld	r23, X+
    4838:	8d 91       	ld	r24, X+
    483a:	9c 91       	ld	r25, X
    483c:	00 80       	ld	r0, Z
    483e:	04 c0       	rjmp	.+8      	; 0x4848 <_Z12func_bitreadv+0x28>
    4840:	95 95       	asr	r25
    4842:	87 95       	ror	r24
    4844:	77 95       	ror	r23
    4846:	67 95       	ror	r22
    4848:	0a 94       	dec	r0
    484a:	d2 f7       	brpl	.-12     	; 0x4840 <_Z12func_bitreadv+0x20>
    484c:	61 70       	andi	r22, 0x01	; 1
    484e:	77 27       	eor	r23, r23
    4850:	88 27       	eor	r24, r24
    4852:	99 27       	eor	r25, r25
    4854:	08 95       	ret

00004856 <_Z13func_bitwritev>:
    4856:	83 e0       	ldi	r24, 0x03	; 3
    4858:	43 dd       	rcall	.-1402   	; 0x42e0 <_Z7reqargsh>
    485a:	e0 91 44 2b 	lds	r30, 0x2B44
    485e:	f0 91 45 2b 	lds	r31, 0x2B45
    4862:	3c 97       	sbiw	r30, 0x0c	; 12
    4864:	80 81       	ld	r24, Z
    4866:	91 81       	ldd	r25, Z+1	; 0x01
    4868:	a2 81       	ldd	r26, Z+2	; 0x02
    486a:	b3 81       	ldd	r27, Z+3	; 0x03
    486c:	89 2b       	or	r24, r25
    486e:	8a 2b       	or	r24, r26
    4870:	8b 2b       	or	r24, r27
    4872:	09 f0       	breq	.+2      	; 0x4876 <_Z13func_bitwritev+0x20>
    4874:	b3 cf       	rjmp	.-154    	; 0x47dc <_Z11func_bitsetv>
    4876:	8c cf       	rjmp	.-232    	; 0x4790 <_Z13func_bitclearv>

00004878 <_Z6getargl>:
    4878:	0f 93       	push	r16
    487a:	1f 93       	push	r17
    487c:	a0 91 44 2b 	lds	r26, 0x2B44
    4880:	b0 91 45 2b 	lds	r27, 0x2B45
    4884:	0d 91       	ld	r16, X+
    4886:	1d 91       	ld	r17, X+
    4888:	2d 91       	ld	r18, X+
    488a:	3c 91       	ld	r19, X
    488c:	13 97       	sbiw	r26, 0x03	; 3
    488e:	06 17       	cp	r16, r22
    4890:	17 07       	cpc	r17, r23
    4892:	28 07       	cpc	r18, r24
    4894:	39 07       	cpc	r19, r25
    4896:	14 f4       	brge	.+4      	; 0x489c <_Z6getargl+0x24>
    4898:	8b e1       	ldi	r24, 0x1B	; 27
    489a:	1f dd       	rcall	.-1474   	; 0x42da <_Z7missingh>
    489c:	2c ef       	ldi	r18, 0xFC	; 252
    489e:	26 03       	mulsu	r18, r22
    48a0:	f0 01       	movw	r30, r0
    48a2:	27 9f       	mul	r18, r23
    48a4:	f0 0d       	add	r31, r0
    48a6:	11 24       	eor	r1, r1
    48a8:	ea 0f       	add	r30, r26
    48aa:	fb 1f       	adc	r31, r27
    48ac:	60 81       	ld	r22, Z
    48ae:	71 81       	ldd	r23, Z+1	; 0x01
    48b0:	82 81       	ldd	r24, Z+2	; 0x02
    48b2:	93 81       	ldd	r25, Z+3	; 0x03
    48b4:	1f 91       	pop	r17
    48b6:	0f 91       	pop	r16
    48b8:	08 95       	ret

000048ba <_Z8isstringv>:
    48ba:	0f 93       	push	r16
    48bc:	1f 93       	push	r17
    48be:	61 e0       	ldi	r22, 0x01	; 1
    48c0:	70 e0       	ldi	r23, 0x00	; 0
    48c2:	80 e0       	ldi	r24, 0x00	; 0
    48c4:	90 e0       	ldi	r25, 0x00	; 0
    48c6:	d8 df       	rcall	.-80     	; 0x4878 <_Z6getargl>
    48c8:	61 50       	subi	r22, 0x01	; 1
    48ca:	71 09       	sbc	r23, r1
    48cc:	81 e0       	ldi	r24, 0x01	; 1
    48ce:	90 e0       	ldi	r25, 0x00	; 0
    48d0:	02 c0       	rjmp	.+4      	; 0x48d6 <_Z8isstringv+0x1c>
    48d2:	88 0f       	add	r24, r24
    48d4:	99 1f       	adc	r25, r25
    48d6:	6a 95       	dec	r22
    48d8:	e2 f7       	brpl	.-8      	; 0x48d2 <_Z8isstringv+0x18>
    48da:	8c 01       	movw	r16, r24
    48dc:	22 27       	eor	r18, r18
    48de:	17 fd       	sbrc	r17, 7
    48e0:	20 95       	com	r18
    48e2:	32 2f       	mov	r19, r18
    48e4:	e0 91 44 2b 	lds	r30, 0x2B44
    48e8:	f0 91 45 2b 	lds	r31, 0x2B45
    48ec:	04 84       	ldd	r0, Z+12	; 0x0c
    48ee:	f5 85       	ldd	r31, Z+13	; 0x0d
    48f0:	e0 2d       	mov	r30, r0
    48f2:	40 85       	ldd	r20, Z+8	; 0x08
    48f4:	51 85       	ldd	r21, Z+9	; 0x09
    48f6:	62 85       	ldd	r22, Z+10	; 0x0a
    48f8:	73 85       	ldd	r23, Z+11	; 0x0b
    48fa:	04 23       	and	r16, r20
    48fc:	15 23       	and	r17, r21
    48fe:	26 23       	and	r18, r22
    4900:	37 23       	and	r19, r23
    4902:	61 e0       	ldi	r22, 0x01	; 1
    4904:	70 e0       	ldi	r23, 0x00	; 0
    4906:	80 e0       	ldi	r24, 0x00	; 0
    4908:	90 e0       	ldi	r25, 0x00	; 0
    490a:	01 2b       	or	r16, r17
    490c:	02 2b       	or	r16, r18
    490e:	03 2b       	or	r16, r19
    4910:	19 f4       	brne	.+6      	; 0x4918 <_Z8isstringv+0x5e>
    4912:	60 e0       	ldi	r22, 0x00	; 0
    4914:	70 e0       	ldi	r23, 0x00	; 0
    4916:	cb 01       	movw	r24, r22
    4918:	1f 91       	pop	r17
    491a:	0f 91       	pop	r16
    491c:	08 95       	ret

0000491e <_Z12getstringargl>:
    491e:	cf 92       	push	r12
    4920:	df 92       	push	r13
    4922:	ef 92       	push	r14
    4924:	ff 92       	push	r15
    4926:	6b 01       	movw	r12, r22
    4928:	7c 01       	movw	r14, r24
    492a:	fa d8       	rcall	.-3596   	; 0x3b20 <_Z11isstringargl>
    492c:	67 2b       	or	r22, r23
    492e:	68 2b       	or	r22, r24
    4930:	69 2b       	or	r22, r25
    4932:	11 f4       	brne	.+4      	; 0x4938 <_Z12getstringargl+0x1a>
    4934:	83 e0       	ldi	r24, 0x03	; 3
    4936:	59 dc       	rcall	.-1870   	; 0x41ea <_Z8expectedh>
    4938:	c7 01       	movw	r24, r14
    493a:	b6 01       	movw	r22, r12
    493c:	ff 90       	pop	r15
    493e:	ef 90       	pop	r14
    4940:	df 90       	pop	r13
    4942:	cf 90       	pop	r12
    4944:	99 cf       	rjmp	.-206    	; 0x4878 <_Z6getargl>

00004946 <_Z9underflowh>:
    4946:	64 e0       	ldi	r22, 0x04	; 4
    4948:	32 dc       	rcall	.-1948   	; 0x41ae <_Z6fatal2cc>

0000494a <_Z4vpopv>:
    494a:	e0 91 46 2b 	lds	r30, 0x2B46
    494e:	ef 3f       	cpi	r30, 0xFF	; 255
    4950:	11 f4       	brne	.+4      	; 0x4956 <_Z4vpopv+0xc>
    4952:	89 e0       	ldi	r24, 0x09	; 9
    4954:	f8 df       	rcall	.-16     	; 0x4946 <_Z9underflowh>
    4956:	ef 5f       	subi	r30, 0xFF	; 255
    4958:	e0 93 46 2b 	sts	0x2B46, r30
    495c:	84 e0       	ldi	r24, 0x04	; 4
    495e:	e8 9f       	mul	r30, r24
    4960:	f0 01       	movw	r30, r0
    4962:	11 24       	eor	r1, r1
    4964:	ec 5b       	subi	r30, 0xBC	; 188
    4966:	f8 4d       	sbci	r31, 0xD8	; 216
    4968:	60 81       	ld	r22, Z
    496a:	71 81       	ldd	r23, Z+1	; 0x01
    496c:	82 81       	ldd	r24, Z+2	; 0x02
    496e:	93 81       	ldd	r25, Z+3	; 0x03
    4970:	08 95       	ret

00004972 <_Z15releaseargblockv>:
    4972:	80 91 46 2b 	lds	r24, 0x2B46
    4976:	8f 5f       	subi	r24, 0xFF	; 255
    4978:	e0 91 44 2b 	lds	r30, 0x2B44
    497c:	f0 91 45 2b 	lds	r31, 0x2B45
    4980:	90 81       	ld	r25, Z
    4982:	89 0f       	add	r24, r25
    4984:	80 93 46 2b 	sts	0x2B46, r24
    4988:	e0 df       	rcall	.-64     	; 0x494a <_Z4vpopv>
    498a:	70 93 43 27 	sts	0x2743, r23
    498e:	60 93 42 27 	sts	0x2742, r22
    4992:	db df       	rcall	.-74     	; 0x494a <_Z4vpopv>
    4994:	da df       	rcall	.-76     	; 0x494a <_Z4vpopv>
    4996:	70 93 45 2b 	sts	0x2B45, r23
    499a:	60 93 44 2b 	sts	0x2B44, r22
    499e:	08 95       	ret

000049a0 <_Z8overflowh>:
    49a0:	65 e0       	ldi	r22, 0x05	; 5
    49a2:	05 dc       	rcall	.-2038   	; 0x41ae <_Z6fatal2cc>

000049a4 <_Z18addBitlashFunctionPKcPFlvE>:
    49a4:	20 91 c7 2d 	lds	r18, 0x2DC7
    49a8:	26 39       	cpi	r18, 0x96	; 150
    49aa:	10 f0       	brcs	.+4      	; 0x49b0 <_Z18addBitlashFunctionPKcPFlvE+0xc>
    49ac:	89 e1       	ldi	r24, 0x19	; 25
    49ae:	f8 df       	rcall	.-16     	; 0x49a0 <_Z8overflowh>
    49b0:	34 e0       	ldi	r19, 0x04	; 4
    49b2:	23 9f       	mul	r18, r19
    49b4:	f0 01       	movw	r30, r0
    49b6:	11 24       	eor	r1, r1
    49b8:	e1 59       	subi	r30, 0x91	; 145
    49ba:	f4 4d       	sbci	r31, 0xD4	; 212
    49bc:	91 83       	std	Z+1, r25	; 0x01
    49be:	80 83       	st	Z, r24
    49c0:	73 83       	std	Z+3, r23	; 0x03
    49c2:	62 83       	std	Z+2, r22	; 0x02
    49c4:	2f 5f       	subi	r18, 0xFF	; 255
    49c6:	20 93 c7 2d 	sts	0x2DC7, r18
    49ca:	08 95       	ret

000049cc <_Z5spushc>:
    49cc:	e0 91 42 27 	lds	r30, 0x2742
    49d0:	f0 91 43 27 	lds	r31, 0x2743
    49d4:	20 91 46 2b 	lds	r18, 0x2B46
    49d8:	94 e0       	ldi	r25, 0x04	; 4
    49da:	29 9f       	mul	r18, r25
    49dc:	90 01       	movw	r18, r0
    49de:	11 24       	eor	r1, r1
    49e0:	2c 5b       	subi	r18, 0xBC	; 188
    49e2:	38 4d       	sbci	r19, 0xD8	; 216
    49e4:	e2 17       	cp	r30, r18
    49e6:	f3 07       	cpc	r31, r19
    49e8:	10 f0       	brcs	.+4      	; 0x49ee <_Z5spushc+0x22>
    49ea:	83 e0       	ldi	r24, 0x03	; 3
    49ec:	d9 df       	rcall	.-78     	; 0x49a0 <_Z8overflowh>
    49ee:	9f 01       	movw	r18, r30
    49f0:	2f 5f       	subi	r18, 0xFF	; 255
    49f2:	3f 4f       	sbci	r19, 0xFF	; 255
    49f4:	30 93 43 27 	sts	0x2743, r19
    49f8:	20 93 42 27 	sts	0x2742, r18
    49fc:	80 83       	st	Z, r24
    49fe:	08 95       	ret

00004a00 <_Z7strpushPc>:
    4a00:	cf 93       	push	r28
    4a02:	df 93       	push	r29
    4a04:	ec 01       	movw	r28, r24
    4a06:	89 91       	ld	r24, Y+
    4a08:	88 23       	and	r24, r24
    4a0a:	11 f0       	breq	.+4      	; 0x4a10 <_Z7strpushPc+0x10>
    4a0c:	df df       	rcall	.-66     	; 0x49cc <_Z5spushc>
    4a0e:	fb cf       	rjmp	.-10     	; 0x4a06 <_Z7strpushPc+0x6>
    4a10:	df 91       	pop	r29
    4a12:	cf 91       	pop	r28
    4a14:	db cf       	rjmp	.-74     	; 0x49cc <_Z5spushc>

00004a16 <_Z5vpushl>:
    4a16:	40 91 46 2b 	lds	r20, 0x2B46
    4a1a:	24 e0       	ldi	r18, 0x04	; 4
    4a1c:	42 9f       	mul	r20, r18
    4a1e:	f0 01       	movw	r30, r0
    4a20:	11 24       	eor	r1, r1
    4a22:	ec 5b       	subi	r30, 0xBC	; 188
    4a24:	f8 4d       	sbci	r31, 0xD8	; 216
    4a26:	20 91 42 27 	lds	r18, 0x2742
    4a2a:	30 91 43 27 	lds	r19, 0x2743
    4a2e:	e2 17       	cp	r30, r18
    4a30:	f3 07       	cpc	r31, r19
    4a32:	10 f4       	brcc	.+4      	; 0x4a38 <_Z5vpushl+0x22>
    4a34:	89 e0       	ldi	r24, 0x09	; 9
    4a36:	b4 df       	rcall	.-152    	; 0x49a0 <_Z8overflowh>
    4a38:	41 50       	subi	r20, 0x01	; 1
    4a3a:	40 93 46 2b 	sts	0x2B46, r20
    4a3e:	60 83       	st	Z, r22
    4a40:	71 83       	std	Z+1, r23	; 0x01
    4a42:	82 83       	std	Z+2, r24	; 0x02
    4a44:	93 83       	std	Z+3, r25	; 0x03
    4a46:	08 95       	ret

00004a48 <_Z5vinitv>:
    4a48:	8d ef       	ldi	r24, 0xFD	; 253
    4a4a:	80 93 46 2b 	sts	0x2B46, r24
    4a4e:	88 e3       	ldi	r24, 0x38	; 56
    4a50:	9b e2       	ldi	r25, 0x2B	; 43
    4a52:	90 93 45 2b 	sts	0x2B45, r25
    4a56:	80 93 44 2b 	sts	0x2B44, r24
    4a5a:	60 e0       	ldi	r22, 0x00	; 0
    4a5c:	70 e0       	ldi	r23, 0x00	; 0
    4a5e:	cb 01       	movw	r24, r22
    4a60:	da df       	rcall	.-76     	; 0x4a16 <_Z5vpushl>
    4a62:	e4 e4       	ldi	r30, 0x44	; 68
    4a64:	f7 e2       	ldi	r31, 0x27	; 39
    4a66:	f0 93 43 27 	sts	0x2743, r31
    4a6a:	e0 93 42 27 	sts	0x2742, r30
    4a6e:	10 82       	st	Z, r1
    4a70:	08 95       	ret

00004a72 <_Z3voph>:
    4a72:	cf 92       	push	r12
    4a74:	df 92       	push	r13
    4a76:	ef 92       	push	r14
    4a78:	ff 92       	push	r15
    4a7a:	cf 93       	push	r28
    4a7c:	c8 2f       	mov	r28, r24
    4a7e:	65 df       	rcall	.-310    	; 0x494a <_Z4vpopv>
    4a80:	6b 01       	movw	r12, r22
    4a82:	7c 01       	movw	r14, r24
    4a84:	62 df       	rcall	.-316    	; 0x494a <_Z4vpopv>
    4a86:	9b 01       	movw	r18, r22
    4a88:	ac 01       	movw	r20, r24
    4a8a:	ce 35       	cpi	r28, 0x5E	; 94
    4a8c:	09 f4       	brne	.+2      	; 0x4a90 <_Z3voph+0x1e>
    4a8e:	bd c0       	rjmp	.+378    	; 0x4c0a <_Z3voph+0x198>
    4a90:	28 f5       	brcc	.+74     	; 0x4adc <_Z3voph+0x6a>
    4a92:	cb 32       	cpi	r28, 0x2B	; 43
    4a94:	09 f4       	brne	.+2      	; 0x4a98 <_Z3voph+0x26>
    4a96:	4c c0       	rjmp	.+152    	; 0x4b30 <_Z3voph+0xbe>
    4a98:	70 f4       	brcc	.+28     	; 0x4ab6 <_Z3voph+0x44>
    4a9a:	c6 32       	cpi	r28, 0x26	; 38
    4a9c:	09 f4       	brne	.+2      	; 0x4aa0 <_Z3voph+0x2e>
    4a9e:	b0 c0       	rjmp	.+352    	; 0x4c00 <_Z3voph+0x18e>
    4aa0:	ca 32       	cpi	r28, 0x2A	; 42
    4aa2:	09 f4       	brne	.+2      	; 0x4aa6 <_Z3voph+0x34>
    4aa4:	4a c0       	rjmp	.+148    	; 0x4b3a <_Z3voph+0xc8>
    4aa6:	c5 32       	cpi	r28, 0x25	; 37
    4aa8:	09 f0       	breq	.+2      	; 0x4aac <_Z3voph+0x3a>
    4aaa:	c1 c0       	rjmp	.+386    	; 0x4c2e <_Z3voph+0x1bc>
    4aac:	a7 01       	movw	r20, r14
    4aae:	96 01       	movw	r18, r12
    4ab0:	0e 94 6a b2 	call	0x164d4	; 0x164d4 <__divmodsi4>
    4ab4:	b6 c0       	rjmp	.+364    	; 0x4c22 <_Z3voph+0x1b0>
    4ab6:	cf 32       	cpi	r28, 0x2F	; 47
    4ab8:	09 f4       	brne	.+2      	; 0x4abc <_Z3voph+0x4a>
    4aba:	44 c0       	rjmp	.+136    	; 0x4b44 <_Z3voph+0xd2>
    4abc:	40 f4       	brcc	.+16     	; 0x4ace <_Z3voph+0x5c>
    4abe:	cd 32       	cpi	r28, 0x2D	; 45
    4ac0:	09 f0       	breq	.+2      	; 0x4ac4 <_Z3voph+0x52>
    4ac2:	b5 c0       	rjmp	.+362    	; 0x4c2e <_Z3voph+0x1bc>
    4ac4:	6c 19       	sub	r22, r12
    4ac6:	7d 09       	sbc	r23, r13
    4ac8:	8e 09       	sbc	r24, r14
    4aca:	9f 09       	sbc	r25, r15
    4acc:	aa c0       	rjmp	.+340    	; 0x4c22 <_Z3voph+0x1b0>
    4ace:	cc 33       	cpi	r28, 0x3C	; 60
    4ad0:	09 f4       	brne	.+2      	; 0x4ad4 <_Z3voph+0x62>
    4ad2:	3f c0       	rjmp	.+126    	; 0x4b52 <_Z3voph+0xe0>
    4ad4:	ce 33       	cpi	r28, 0x3E	; 62
    4ad6:	09 f4       	brne	.+2      	; 0x4ada <_Z3voph+0x68>
    4ad8:	47 c0       	rjmp	.+142    	; 0x4b68 <_Z3voph+0xf6>
    4ada:	a9 c0       	rjmp	.+338    	; 0x4c2e <_Z3voph+0x1bc>
    4adc:	c7 38       	cpi	r28, 0x87	; 135
    4ade:	09 f4       	brne	.+2      	; 0x4ae2 <_Z3voph+0x70>
    4ae0:	74 c0       	rjmp	.+232    	; 0x4bca <_Z3voph+0x158>
    4ae2:	98 f4       	brcc	.+38     	; 0x4b0a <_Z3voph+0x98>
    4ae4:	c4 38       	cpi	r28, 0x84	; 132
    4ae6:	09 f4       	brne	.+2      	; 0x4aea <_Z3voph+0x78>
    4ae8:	4a c0       	rjmp	.+148    	; 0x4b7e <_Z3voph+0x10c>
    4aea:	40 f4       	brcc	.+16     	; 0x4afc <_Z3voph+0x8a>
    4aec:	cc 37       	cpi	r28, 0x7C	; 124
    4aee:	09 f0       	breq	.+2      	; 0x4af2 <_Z3voph+0x80>
    4af0:	9e c0       	rjmp	.+316    	; 0x4c2e <_Z3voph+0x1bc>
    4af2:	6c 29       	or	r22, r12
    4af4:	7d 29       	or	r23, r13
    4af6:	8e 29       	or	r24, r14
    4af8:	9f 29       	or	r25, r15
    4afa:	93 c0       	rjmp	.+294    	; 0x4c22 <_Z3voph+0x1b0>
    4afc:	c5 38       	cpi	r28, 0x85	; 133
    4afe:	09 f4       	brne	.+2      	; 0x4b02 <_Z3voph+0x90>
    4b00:	49 c0       	rjmp	.+146    	; 0x4b94 <_Z3voph+0x122>
    4b02:	c6 38       	cpi	r28, 0x86	; 134
    4b04:	09 f4       	brne	.+2      	; 0x4b08 <_Z3voph+0x96>
    4b06:	5a c0       	rjmp	.+180    	; 0x4bbc <_Z3voph+0x14a>
    4b08:	92 c0       	rjmp	.+292    	; 0x4c2e <_Z3voph+0x1bc>
    4b0a:	c9 38       	cpi	r28, 0x89	; 137
    4b0c:	09 f4       	brne	.+2      	; 0x4b10 <_Z3voph+0x9e>
    4b0e:	4c c0       	rjmp	.+152    	; 0x4ba8 <_Z3voph+0x136>
    4b10:	08 f4       	brcc	.+2      	; 0x4b14 <_Z3voph+0xa2>
    4b12:	69 c0       	rjmp	.+210    	; 0x4be6 <_Z3voph+0x174>
    4b14:	ca 38       	cpi	r28, 0x8A	; 138
    4b16:	09 f4       	brne	.+2      	; 0x4b1a <_Z3voph+0xa8>
    4b18:	7d c0       	rjmp	.+250    	; 0x4c14 <_Z3voph+0x1a2>
    4b1a:	cb 38       	cpi	r28, 0x8B	; 139
    4b1c:	09 f0       	breq	.+2      	; 0x4b20 <_Z3voph+0xae>
    4b1e:	87 c0       	rjmp	.+270    	; 0x4c2e <_Z3voph+0x1bc>
    4b20:	04 c0       	rjmp	.+8      	; 0x4b2a <_Z3voph+0xb8>
    4b22:	95 95       	asr	r25
    4b24:	87 95       	ror	r24
    4b26:	77 95       	ror	r23
    4b28:	67 95       	ror	r22
    4b2a:	ca 94       	dec	r12
    4b2c:	d2 f7       	brpl	.-12     	; 0x4b22 <_Z3voph+0xb0>
    4b2e:	79 c0       	rjmp	.+242    	; 0x4c22 <_Z3voph+0x1b0>
    4b30:	6c 0d       	add	r22, r12
    4b32:	7d 1d       	adc	r23, r13
    4b34:	8e 1d       	adc	r24, r14
    4b36:	9f 1d       	adc	r25, r15
    4b38:	74 c0       	rjmp	.+232    	; 0x4c22 <_Z3voph+0x1b0>
    4b3a:	c7 01       	movw	r24, r14
    4b3c:	b6 01       	movw	r22, r12
    4b3e:	0e 94 39 b2 	call	0x16472	; 0x16472 <__mulsi3>
    4b42:	6f c0       	rjmp	.+222    	; 0x4c22 <_Z3voph+0x1b0>
    4b44:	a7 01       	movw	r20, r14
    4b46:	96 01       	movw	r18, r12
    4b48:	0e 94 6a b2 	call	0x164d4	; 0x164d4 <__divmodsi4>
    4b4c:	ca 01       	movw	r24, r20
    4b4e:	b9 01       	movw	r22, r18
    4b50:	68 c0       	rjmp	.+208    	; 0x4c22 <_Z3voph+0x1b0>
    4b52:	61 e0       	ldi	r22, 0x01	; 1
    4b54:	70 e0       	ldi	r23, 0x00	; 0
    4b56:	80 e0       	ldi	r24, 0x00	; 0
    4b58:	90 e0       	ldi	r25, 0x00	; 0
    4b5a:	2c 15       	cp	r18, r12
    4b5c:	3d 05       	cpc	r19, r13
    4b5e:	4e 05       	cpc	r20, r14
    4b60:	5f 05       	cpc	r21, r15
    4b62:	0c f4       	brge	.+2      	; 0x4b66 <_Z3voph+0xf4>
    4b64:	5e c0       	rjmp	.+188    	; 0x4c22 <_Z3voph+0x1b0>
    4b66:	48 c0       	rjmp	.+144    	; 0x4bf8 <_Z3voph+0x186>
    4b68:	61 e0       	ldi	r22, 0x01	; 1
    4b6a:	70 e0       	ldi	r23, 0x00	; 0
    4b6c:	80 e0       	ldi	r24, 0x00	; 0
    4b6e:	90 e0       	ldi	r25, 0x00	; 0
    4b70:	c2 16       	cp	r12, r18
    4b72:	d3 06       	cpc	r13, r19
    4b74:	e4 06       	cpc	r14, r20
    4b76:	f5 06       	cpc	r15, r21
    4b78:	0c f4       	brge	.+2      	; 0x4b7c <_Z3voph+0x10a>
    4b7a:	53 c0       	rjmp	.+166    	; 0x4c22 <_Z3voph+0x1b0>
    4b7c:	3d c0       	rjmp	.+122    	; 0x4bf8 <_Z3voph+0x186>
    4b7e:	61 e0       	ldi	r22, 0x01	; 1
    4b80:	70 e0       	ldi	r23, 0x00	; 0
    4b82:	80 e0       	ldi	r24, 0x00	; 0
    4b84:	90 e0       	ldi	r25, 0x00	; 0
    4b86:	c2 16       	cp	r12, r18
    4b88:	d3 06       	cpc	r13, r19
    4b8a:	e4 06       	cpc	r14, r20
    4b8c:	f5 06       	cpc	r15, r21
    4b8e:	0c f0       	brlt	.+2      	; 0x4b92 <_Z3voph+0x120>
    4b90:	48 c0       	rjmp	.+144    	; 0x4c22 <_Z3voph+0x1b0>
    4b92:	32 c0       	rjmp	.+100    	; 0x4bf8 <_Z3voph+0x186>
    4b94:	61 e0       	ldi	r22, 0x01	; 1
    4b96:	70 e0       	ldi	r23, 0x00	; 0
    4b98:	80 e0       	ldi	r24, 0x00	; 0
    4b9a:	90 e0       	ldi	r25, 0x00	; 0
    4b9c:	2c 15       	cp	r18, r12
    4b9e:	3d 05       	cpc	r19, r13
    4ba0:	4e 05       	cpc	r20, r14
    4ba2:	5f 05       	cpc	r21, r15
    4ba4:	f4 f5       	brge	.+124    	; 0x4c22 <_Z3voph+0x1b0>
    4ba6:	28 c0       	rjmp	.+80     	; 0x4bf8 <_Z3voph+0x186>
    4ba8:	61 e0       	ldi	r22, 0x01	; 1
    4baa:	70 e0       	ldi	r23, 0x00	; 0
    4bac:	80 e0       	ldi	r24, 0x00	; 0
    4bae:	90 e0       	ldi	r25, 0x00	; 0
    4bb0:	2c 15       	cp	r18, r12
    4bb2:	3d 05       	cpc	r19, r13
    4bb4:	4e 05       	cpc	r20, r14
    4bb6:	5f 05       	cpc	r21, r15
    4bb8:	a1 f5       	brne	.+104    	; 0x4c22 <_Z3voph+0x1b0>
    4bba:	1e c0       	rjmp	.+60     	; 0x4bf8 <_Z3voph+0x186>
    4bbc:	61 15       	cp	r22, r1
    4bbe:	71 05       	cpc	r23, r1
    4bc0:	81 05       	cpc	r24, r1
    4bc2:	91 05       	cpc	r25, r1
    4bc4:	59 f0       	breq	.+22     	; 0x4bdc <_Z3voph+0x16a>
    4bc6:	61 e0       	ldi	r22, 0x01	; 1
    4bc8:	05 c0       	rjmp	.+10     	; 0x4bd4 <_Z3voph+0x162>
    4bca:	61 e0       	ldi	r22, 0x01	; 1
    4bcc:	23 2b       	or	r18, r19
    4bce:	24 2b       	or	r18, r20
    4bd0:	25 2b       	or	r18, r21
    4bd2:	29 f4       	brne	.+10     	; 0x4bde <_Z3voph+0x16c>
    4bd4:	cd 28       	or	r12, r13
    4bd6:	ce 28       	or	r12, r14
    4bd8:	cf 28       	or	r12, r15
    4bda:	09 f4       	brne	.+2      	; 0x4bde <_Z3voph+0x16c>
    4bdc:	60 e0       	ldi	r22, 0x00	; 0
    4bde:	70 e0       	ldi	r23, 0x00	; 0
    4be0:	80 e0       	ldi	r24, 0x00	; 0
    4be2:	90 e0       	ldi	r25, 0x00	; 0
    4be4:	1e c0       	rjmp	.+60     	; 0x4c22 <_Z3voph+0x1b0>
    4be6:	61 e0       	ldi	r22, 0x01	; 1
    4be8:	70 e0       	ldi	r23, 0x00	; 0
    4bea:	80 e0       	ldi	r24, 0x00	; 0
    4bec:	90 e0       	ldi	r25, 0x00	; 0
    4bee:	2c 15       	cp	r18, r12
    4bf0:	3d 05       	cpc	r19, r13
    4bf2:	4e 05       	cpc	r20, r14
    4bf4:	5f 05       	cpc	r21, r15
    4bf6:	a9 f0       	breq	.+42     	; 0x4c22 <_Z3voph+0x1b0>
    4bf8:	60 e0       	ldi	r22, 0x00	; 0
    4bfa:	70 e0       	ldi	r23, 0x00	; 0
    4bfc:	cb 01       	movw	r24, r22
    4bfe:	11 c0       	rjmp	.+34     	; 0x4c22 <_Z3voph+0x1b0>
    4c00:	6c 21       	and	r22, r12
    4c02:	7d 21       	and	r23, r13
    4c04:	8e 21       	and	r24, r14
    4c06:	9f 21       	and	r25, r15
    4c08:	0c c0       	rjmp	.+24     	; 0x4c22 <_Z3voph+0x1b0>
    4c0a:	6c 25       	eor	r22, r12
    4c0c:	7d 25       	eor	r23, r13
    4c0e:	8e 25       	eor	r24, r14
    4c10:	9f 25       	eor	r25, r15
    4c12:	07 c0       	rjmp	.+14     	; 0x4c22 <_Z3voph+0x1b0>
    4c14:	04 c0       	rjmp	.+8      	; 0x4c1e <_Z3voph+0x1ac>
    4c16:	66 0f       	add	r22, r22
    4c18:	77 1f       	adc	r23, r23
    4c1a:	88 1f       	adc	r24, r24
    4c1c:	99 1f       	adc	r25, r25
    4c1e:	ca 94       	dec	r12
    4c20:	d2 f7       	brpl	.-12     	; 0x4c16 <_Z3voph+0x1a4>
    4c22:	cf 91       	pop	r28
    4c24:	ff 90       	pop	r15
    4c26:	ef 90       	pop	r14
    4c28:	df 90       	pop	r13
    4c2a:	cf 90       	pop	r12
    4c2c:	f4 ce       	rjmp	.-536    	; 0x4a16 <_Z5vpushl>
    4c2e:	8a e0       	ldi	r24, 0x0A	; 10
    4c30:	df da       	rcall	.-2626   	; 0x41f0 <_Z10unexpectedh>

00004c32 <_Z11printBinarym>:
    4c32:	ef 92       	push	r14
    4c34:	0f 93       	push	r16
    4c36:	1f 93       	push	r17
    4c38:	10 e3       	ldi	r17, 0x30	; 48
    4c3a:	e1 2e       	mov	r14, r17
    4c3c:	00 e0       	ldi	r16, 0x00	; 0
    4c3e:	10 e0       	ldi	r17, 0x00	; 0
    4c40:	98 01       	movw	r18, r16
    4c42:	42 e0       	ldi	r20, 0x02	; 2
    4c44:	5c d9       	rcall	.-3400   	; 0x3efe <_Z18printIntegerInBasemhlh>
    4c46:	1f 91       	pop	r17
    4c48:	0f 91       	pop	r16
    4c4a:	ef 90       	pop	r14
    4c4c:	08 95       	ret

00004c4e <_Z19func_printf_handlerhh>:
    4c4e:	4f 92       	push	r4
    4c50:	5f 92       	push	r5
    4c52:	6f 92       	push	r6
    4c54:	7f 92       	push	r7
    4c56:	8f 92       	push	r8
    4c58:	9f 92       	push	r9
    4c5a:	bf 92       	push	r11
    4c5c:	cf 92       	push	r12
    4c5e:	df 92       	push	r13
    4c60:	ef 92       	push	r14
    4c62:	ff 92       	push	r15
    4c64:	0f 93       	push	r16
    4c66:	1f 93       	push	r17
    4c68:	cf 93       	push	r28
    4c6a:	df 93       	push	r29
    4c6c:	00 d0       	rcall	.+0      	; 0x4c6e <_Z19func_printf_handlerhh+0x20>
    4c6e:	1f 92       	push	r1
    4c70:	cd b7       	in	r28, 0x3d	; 61
    4c72:	de b7       	in	r29, 0x3e	; 62
    4c74:	98 2e       	mov	r9, r24
    4c76:	b6 2e       	mov	r11, r22
    4c78:	60 e0       	ldi	r22, 0x00	; 0
    4c7a:	70 e0       	ldi	r23, 0x00	; 0
    4c7c:	cb 01       	movw	r24, r22
    4c7e:	fc dd       	rcall	.-1032   	; 0x4878 <_Z6getargl>
    4c80:	6b 01       	movw	r12, r22
    4c82:	7c 01       	movw	r14, r24
    4c84:	69 2d       	mov	r22, r9
    4c86:	70 e0       	ldi	r23, 0x00	; 0
    4c88:	80 e0       	ldi	r24, 0x00	; 0
    4c8a:	90 e0       	ldi	r25, 0x00	; 0
    4c8c:	c6 16       	cp	r12, r22
    4c8e:	d7 06       	cpc	r13, r23
    4c90:	e8 06       	cpc	r14, r24
    4c92:	f9 06       	cpc	r15, r25
    4c94:	2c f4       	brge	.+10     	; 0x4ca0 <_Z19func_printf_handlerhh+0x52>
    4c96:	f1 d8       	rcall	.-3614   	; 0x3e7a <_Z5speolv>
    4c98:	60 e0       	ldi	r22, 0x00	; 0
    4c9a:	70 e0       	ldi	r23, 0x00	; 0
    4c9c:	cb 01       	movw	r24, r22
    4c9e:	35 c1       	rjmp	.+618    	; 0x4f0a <_Z19func_printf_handlerhh+0x2bc>
    4ca0:	eb dd       	rcall	.-1066   	; 0x4878 <_Z6getargl>
    4ca2:	4b 01       	movw	r8, r22
    4ca4:	f4 01       	movw	r30, r8
    4ca6:	80 81       	ld	r24, Z
    4ca8:	88 23       	and	r24, r24
    4caa:	09 f4       	brne	.+2      	; 0x4cae <_Z19func_printf_handlerhh+0x60>
    4cac:	28 c1       	rjmp	.+592    	; 0x4efe <_Z19func_printf_handlerhh+0x2b0>
    4cae:	85 32       	cpi	r24, 0x25	; 37
    4cb0:	09 f0       	breq	.+2      	; 0x4cb4 <_Z19func_printf_handlerhh+0x66>
    4cb2:	1a c1       	rjmp	.+564    	; 0x4ee8 <_Z19func_printf_handlerhh+0x29a>
    4cb4:	d4 01       	movw	r26, r8
    4cb6:	11 96       	adiw	r26, 0x01	; 1
    4cb8:	8c 91       	ld	r24, X
    4cba:	64 01       	movw	r12, r8
    4cbc:	80 33       	cpi	r24, 0x30	; 48
    4cbe:	31 f0       	breq	.+12     	; 0x4ccc <_Z19func_printf_handlerhh+0x7e>
    4cc0:	bf ef       	ldi	r27, 0xFF	; 255
    4cc2:	cb 1a       	sub	r12, r27
    4cc4:	db 0a       	sbc	r13, r27
    4cc6:	80 e2       	ldi	r24, 0x20	; 32
    4cc8:	e8 2e       	mov	r14, r24
    4cca:	05 c0       	rjmp	.+10     	; 0x4cd6 <_Z19func_printf_handlerhh+0x88>
    4ccc:	e2 e0       	ldi	r30, 0x02	; 2
    4cce:	ce 0e       	add	r12, r30
    4cd0:	d1 1c       	adc	r13, r1
    4cd2:	00 e3       	ldi	r16, 0x30	; 48
    4cd4:	e0 2e       	mov	r14, r16
    4cd6:	d6 01       	movw	r26, r12
    4cd8:	8c 91       	ld	r24, X
    4cda:	8a 32       	cpi	r24, 0x2A	; 42
    4cdc:	29 f0       	breq	.+10     	; 0x4ce8 <_Z19func_printf_handlerhh+0x9a>
    4cde:	f6 01       	movw	r30, r12
    4ce0:	20 e0       	ldi	r18, 0x00	; 0
    4ce2:	30 e0       	ldi	r19, 0x00	; 0
    4ce4:	a9 01       	movw	r20, r18
    4ce6:	10 c0       	rjmp	.+32     	; 0x4d08 <_Z19func_printf_handlerhh+0xba>
    4ce8:	ff 24       	eor	r15, r15
    4cea:	f3 94       	inc	r15
    4cec:	fb 0c       	add	r15, r11
    4cee:	6b 2d       	mov	r22, r11
    4cf0:	70 e0       	ldi	r23, 0x00	; 0
    4cf2:	80 e0       	ldi	r24, 0x00	; 0
    4cf4:	90 e0       	ldi	r25, 0x00	; 0
    4cf6:	c0 dd       	rcall	.-1152   	; 0x4878 <_Z6getargl>
    4cf8:	9b 01       	movw	r18, r22
    4cfa:	ac 01       	movw	r20, r24
    4cfc:	46 01       	movw	r8, r12
    4cfe:	bf ef       	ldi	r27, 0xFF	; 255
    4d00:	8b 1a       	sub	r8, r27
    4d02:	9b 0a       	sbc	r9, r27
    4d04:	bf 2c       	mov	r11, r15
    4d06:	1a c0       	rjmp	.+52     	; 0x4d3c <_Z19func_printf_handlerhh+0xee>
    4d08:	4f 01       	movw	r8, r30
    4d0a:	c1 90       	ld	r12, Z+
    4d0c:	d1 2c       	mov	r13, r1
    4d0e:	80 e3       	ldi	r24, 0x30	; 48
    4d10:	c8 1a       	sub	r12, r24
    4d12:	d1 08       	sbc	r13, r1
    4d14:	aa e0       	ldi	r26, 0x0A	; 10
    4d16:	ca 16       	cp	r12, r26
    4d18:	d1 04       	cpc	r13, r1
    4d1a:	80 f4       	brcc	.+32     	; 0x4d3c <_Z19func_printf_handlerhh+0xee>
    4d1c:	aa e0       	ldi	r26, 0x0A	; 10
    4d1e:	b0 e0       	ldi	r27, 0x00	; 0
    4d20:	0e 94 8c b2 	call	0x16518	; 0x16518 <__muluhisi3>
    4d24:	9b 01       	movw	r18, r22
    4d26:	ac 01       	movw	r20, r24
    4d28:	c6 01       	movw	r24, r12
    4d2a:	aa 27       	eor	r26, r26
    4d2c:	97 fd       	sbrc	r25, 7
    4d2e:	a0 95       	com	r26
    4d30:	ba 2f       	mov	r27, r26
    4d32:	28 0f       	add	r18, r24
    4d34:	39 1f       	adc	r19, r25
    4d36:	4a 1f       	adc	r20, r26
    4d38:	5b 1f       	adc	r21, r27
    4d3a:	e6 cf       	rjmp	.-52     	; 0x4d08 <_Z19func_printf_handlerhh+0xba>
    4d3c:	f4 01       	movw	r30, r8
    4d3e:	80 81       	ld	r24, Z
    4d40:	83 36       	cpi	r24, 0x63	; 99
    4d42:	09 f4       	brne	.+2      	; 0x4d46 <_Z19func_printf_handlerhh+0xf8>
    4d44:	89 c0       	rjmp	.+274    	; 0x4e58 <_Z19func_printf_handlerhh+0x20a>
    4d46:	50 f4       	brcc	.+20     	; 0x4d5c <_Z19func_printf_handlerhh+0x10e>
    4d48:	85 32       	cpi	r24, 0x25	; 37
    4d4a:	09 f4       	brne	.+2      	; 0x4d4e <_Z19func_printf_handlerhh+0x100>
    4d4c:	a6 c0       	rjmp	.+332    	; 0x4e9a <_Z19func_printf_handlerhh+0x24c>
    4d4e:	82 36       	cpi	r24, 0x62	; 98
    4d50:	09 f4       	brne	.+2      	; 0x4d54 <_Z19func_printf_handlerhh+0x106>
    4d52:	43 c0       	rjmp	.+134    	; 0x4dda <_Z19func_printf_handlerhh+0x18c>
    4d54:	83 32       	cpi	r24, 0x23	; 35
    4d56:	09 f0       	breq	.+2      	; 0x4d5a <_Z19func_printf_handlerhh+0x10c>
    4d58:	bd c0       	rjmp	.+378    	; 0x4ed4 <_Z19func_printf_handlerhh+0x286>
    4d5a:	a1 c0       	rjmp	.+322    	; 0x4e9e <_Z19func_printf_handlerhh+0x250>
    4d5c:	83 37       	cpi	r24, 0x73	; 115
    4d5e:	09 f4       	brne	.+2      	; 0x4d62 <_Z19func_printf_handlerhh+0x114>
    4d60:	4d c0       	rjmp	.+154    	; 0x4dfc <_Z19func_printf_handlerhh+0x1ae>
    4d62:	98 f4       	brcc	.+38     	; 0x4d8a <_Z19func_printf_handlerhh+0x13c>
    4d64:	84 36       	cpi	r24, 0x64	; 100
    4d66:	09 f0       	breq	.+2      	; 0x4d6a <_Z19func_printf_handlerhh+0x11c>
    4d68:	b5 c0       	rjmp	.+362    	; 0x4ed4 <_Z19func_printf_handlerhh+0x286>
    4d6a:	6b 2d       	mov	r22, r11
    4d6c:	70 e0       	ldi	r23, 0x00	; 0
    4d6e:	80 e0       	ldi	r24, 0x00	; 0
    4d70:	90 e0       	ldi	r25, 0x00	; 0
    4d72:	29 83       	std	Y+1, r18	; 0x01
    4d74:	3a 83       	std	Y+2, r19	; 0x02
    4d76:	4b 83       	std	Y+3, r20	; 0x03
    4d78:	5c 83       	std	Y+4, r21	; 0x04
    4d7a:	7e dd       	rcall	.-1284   	; 0x4878 <_Z6getargl>
    4d7c:	0e 2d       	mov	r16, r14
    4d7e:	29 81       	ldd	r18, Y+1	; 0x01
    4d80:	3a 81       	ldd	r19, Y+2	; 0x02
    4d82:	4b 81       	ldd	r20, Y+3	; 0x03
    4d84:	5c 81       	ldd	r21, Y+4	; 0x04
    4d86:	47 d9       	rcall	.-3442   	; 0x4016 <_Z12printIntegerllh>
    4d88:	ad c0       	rjmp	.+346    	; 0x4ee4 <_Z19func_printf_handlerhh+0x296>
    4d8a:	85 37       	cpi	r24, 0x75	; 117
    4d8c:	a1 f0       	breq	.+40     	; 0x4db6 <_Z19func_printf_handlerhh+0x168>
    4d8e:	88 37       	cpi	r24, 0x78	; 120
    4d90:	09 f0       	breq	.+2      	; 0x4d94 <_Z19func_printf_handlerhh+0x146>
    4d92:	a0 c0       	rjmp	.+320    	; 0x4ed4 <_Z19func_printf_handlerhh+0x286>
    4d94:	6b 2d       	mov	r22, r11
    4d96:	70 e0       	ldi	r23, 0x00	; 0
    4d98:	80 e0       	ldi	r24, 0x00	; 0
    4d9a:	90 e0       	ldi	r25, 0x00	; 0
    4d9c:	29 83       	std	Y+1, r18	; 0x01
    4d9e:	3a 83       	std	Y+2, r19	; 0x02
    4da0:	4b 83       	std	Y+3, r20	; 0x03
    4da2:	5c 83       	std	Y+4, r21	; 0x04
    4da4:	69 dd       	rcall	.-1326   	; 0x4878 <_Z6getargl>
    4da6:	29 81       	ldd	r18, Y+1	; 0x01
    4da8:	3a 81       	ldd	r19, Y+2	; 0x02
    4daa:	4b 81       	ldd	r20, Y+3	; 0x03
    4dac:	5c 81       	ldd	r21, Y+4	; 0x04
    4dae:	89 01       	movw	r16, r18
    4db0:	9a 01       	movw	r18, r20
    4db2:	40 e1       	ldi	r20, 0x10	; 16
    4db4:	10 c0       	rjmp	.+32     	; 0x4dd6 <_Z19func_printf_handlerhh+0x188>
    4db6:	6b 2d       	mov	r22, r11
    4db8:	70 e0       	ldi	r23, 0x00	; 0
    4dba:	80 e0       	ldi	r24, 0x00	; 0
    4dbc:	90 e0       	ldi	r25, 0x00	; 0
    4dbe:	29 83       	std	Y+1, r18	; 0x01
    4dc0:	3a 83       	std	Y+2, r19	; 0x02
    4dc2:	4b 83       	std	Y+3, r20	; 0x03
    4dc4:	5c 83       	std	Y+4, r21	; 0x04
    4dc6:	58 dd       	rcall	.-1360   	; 0x4878 <_Z6getargl>
    4dc8:	29 81       	ldd	r18, Y+1	; 0x01
    4dca:	3a 81       	ldd	r19, Y+2	; 0x02
    4dcc:	4b 81       	ldd	r20, Y+3	; 0x03
    4dce:	5c 81       	ldd	r21, Y+4	; 0x04
    4dd0:	89 01       	movw	r16, r18
    4dd2:	9a 01       	movw	r18, r20
    4dd4:	4a e0       	ldi	r20, 0x0A	; 10
    4dd6:	93 d8       	rcall	.-3802   	; 0x3efe <_Z18printIntegerInBasemhlh>
    4dd8:	85 c0       	rjmp	.+266    	; 0x4ee4 <_Z19func_printf_handlerhh+0x296>
    4dda:	6b 2d       	mov	r22, r11
    4ddc:	70 e0       	ldi	r23, 0x00	; 0
    4dde:	80 e0       	ldi	r24, 0x00	; 0
    4de0:	90 e0       	ldi	r25, 0x00	; 0
    4de2:	29 83       	std	Y+1, r18	; 0x01
    4de4:	3a 83       	std	Y+2, r19	; 0x02
    4de6:	4b 83       	std	Y+3, r20	; 0x03
    4de8:	5c 83       	std	Y+4, r21	; 0x04
    4dea:	46 dd       	rcall	.-1396   	; 0x4878 <_Z6getargl>
    4dec:	29 81       	ldd	r18, Y+1	; 0x01
    4dee:	3a 81       	ldd	r19, Y+2	; 0x02
    4df0:	4b 81       	ldd	r20, Y+3	; 0x03
    4df2:	5c 81       	ldd	r21, Y+4	; 0x04
    4df4:	89 01       	movw	r16, r18
    4df6:	9a 01       	movw	r18, r20
    4df8:	42 e0       	ldi	r20, 0x02	; 2
    4dfa:	ed cf       	rjmp	.-38     	; 0x4dd6 <_Z19func_printf_handlerhh+0x188>
    4dfc:	6b 2d       	mov	r22, r11
    4dfe:	70 e0       	ldi	r23, 0x00	; 0
    4e00:	80 e0       	ldi	r24, 0x00	; 0
    4e02:	90 e0       	ldi	r25, 0x00	; 0
    4e04:	29 83       	std	Y+1, r18	; 0x01
    4e06:	3a 83       	std	Y+2, r19	; 0x02
    4e08:	4b 83       	std	Y+3, r20	; 0x03
    4e0a:	5c 83       	std	Y+4, r21	; 0x04
    4e0c:	35 dd       	rcall	.-1430   	; 0x4878 <_Z6getargl>
    4e0e:	6b 01       	movw	r12, r22
    4e10:	7c 01       	movw	r14, r24
    4e12:	fb 01       	movw	r30, r22
    4e14:	01 90       	ld	r0, Z+
    4e16:	00 20       	and	r0, r0
    4e18:	e9 f7       	brne	.-6      	; 0x4e14 <_Z19func_printf_handlerhh+0x1c6>
    4e1a:	31 97       	sbiw	r30, 0x01	; 1
    4e1c:	e6 1b       	sub	r30, r22
    4e1e:	f7 0b       	sbc	r31, r23
    4e20:	29 81       	ldd	r18, Y+1	; 0x01
    4e22:	3a 81       	ldd	r19, Y+2	; 0x02
    4e24:	4b 81       	ldd	r20, Y+3	; 0x03
    4e26:	5c 81       	ldd	r21, Y+4	; 0x04
    4e28:	29 01       	movw	r4, r18
    4e2a:	3a 01       	movw	r6, r20
    4e2c:	4e 1a       	sub	r4, r30
    4e2e:	5f 0a       	sbc	r5, r31
    4e30:	61 08       	sbc	r6, r1
    4e32:	71 08       	sbc	r7, r1
    4e34:	14 14       	cp	r1, r4
    4e36:	15 04       	cpc	r1, r5
    4e38:	16 04       	cpc	r1, r6
    4e3a:	17 04       	cpc	r1, r7
    4e3c:	4c f4       	brge	.+18     	; 0x4e50 <_Z19func_printf_handlerhh+0x202>
    4e3e:	80 e2       	ldi	r24, 0x20	; 32
    4e40:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <_Z3spbc>
    4e44:	f1 e0       	ldi	r31, 0x01	; 1
    4e46:	4f 1a       	sub	r4, r31
    4e48:	51 08       	sbc	r5, r1
    4e4a:	61 08       	sbc	r6, r1
    4e4c:	71 08       	sbc	r7, r1
    4e4e:	f2 cf       	rjmp	.-28     	; 0x4e34 <_Z19func_printf_handlerhh+0x1e6>
    4e50:	c6 01       	movw	r24, r12
    4e52:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <_Z2spPKc>
    4e56:	46 c0       	rjmp	.+140    	; 0x4ee4 <_Z19func_printf_handlerhh+0x296>
    4e58:	cb 2c       	mov	r12, r11
    4e5a:	d1 2c       	mov	r13, r1
    4e5c:	e1 2c       	mov	r14, r1
    4e5e:	f1 2c       	mov	r15, r1
    4e60:	c7 01       	movw	r24, r14
    4e62:	b6 01       	movw	r22, r12
    4e64:	29 83       	std	Y+1, r18	; 0x01
    4e66:	3a 83       	std	Y+2, r19	; 0x02
    4e68:	4b 83       	std	Y+3, r20	; 0x03
    4e6a:	5c 83       	std	Y+4, r21	; 0x04
    4e6c:	05 dd       	rcall	.-1526   	; 0x4878 <_Z6getargl>
    4e6e:	86 2f       	mov	r24, r22
    4e70:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <_Z3spbc>
    4e74:	29 81       	ldd	r18, Y+1	; 0x01
    4e76:	3a 81       	ldd	r19, Y+2	; 0x02
    4e78:	4b 81       	ldd	r20, Y+3	; 0x03
    4e7a:	5c 81       	ldd	r21, Y+4	; 0x04
    4e7c:	21 50       	subi	r18, 0x01	; 1
    4e7e:	31 09       	sbc	r19, r1
    4e80:	41 09       	sbc	r20, r1
    4e82:	51 09       	sbc	r21, r1
    4e84:	da 01       	movw	r26, r20
    4e86:	c9 01       	movw	r24, r18
    4e88:	01 96       	adiw	r24, 0x01	; 1
    4e8a:	a1 1d       	adc	r26, r1
    4e8c:	b1 1d       	adc	r27, r1
    4e8e:	18 16       	cp	r1, r24
    4e90:	19 06       	cpc	r1, r25
    4e92:	1a 06       	cpc	r1, r26
    4e94:	1b 06       	cpc	r1, r27
    4e96:	24 f3       	brlt	.-56     	; 0x4e60 <_Z19func_printf_handlerhh+0x212>
    4e98:	25 c0       	rjmp	.+74     	; 0x4ee4 <_Z19func_printf_handlerhh+0x296>
    4e9a:	85 e2       	ldi	r24, 0x25	; 37
    4e9c:	20 c0       	rjmp	.+64     	; 0x4ede <_Z19func_printf_handlerhh+0x290>
    4e9e:	6b 2d       	mov	r22, r11
    4ea0:	70 e0       	ldi	r23, 0x00	; 0
    4ea2:	80 e0       	ldi	r24, 0x00	; 0
    4ea4:	90 e0       	ldi	r25, 0x00	; 0
    4ea6:	29 83       	std	Y+1, r18	; 0x01
    4ea8:	3a 83       	std	Y+2, r19	; 0x02
    4eaa:	4b 83       	std	Y+3, r20	; 0x03
    4eac:	5c 83       	std	Y+4, r21	; 0x04
    4eae:	e4 dc       	rcall	.-1592   	; 0x4878 <_Z6getargl>
    4eb0:	6b 01       	movw	r12, r22
    4eb2:	7c 01       	movw	r14, r24
    4eb4:	29 81       	ldd	r18, Y+1	; 0x01
    4eb6:	3a 81       	ldd	r19, Y+2	; 0x02
    4eb8:	4b 81       	ldd	r20, Y+3	; 0x03
    4eba:	5c 81       	ldd	r21, Y+4	; 0x04
    4ebc:	21 15       	cp	r18, r1
    4ebe:	31 05       	cpc	r19, r1
    4ec0:	41 05       	cpc	r20, r1
    4ec2:	51 05       	cpc	r21, r1
    4ec4:	21 f0       	breq	.+8      	; 0x4ece <_Z19func_printf_handlerhh+0x280>
    4ec6:	77 27       	eor	r23, r23
    4ec8:	88 27       	eor	r24, r24
    4eca:	99 27       	eor	r25, r25
    4ecc:	99 d9       	rcall	.-3278   	; 0x4200 <_Z7setBaudlm>
    4ece:	8c 2d       	mov	r24, r12
    4ed0:	e5 d9       	rcall	.-3126   	; 0x429c <_Z9setOutputh>
    4ed2:	08 c0       	rjmp	.+16     	; 0x4ee4 <_Z19func_printf_handlerhh+0x296>
    4ed4:	85 e2       	ldi	r24, 0x25	; 37
    4ed6:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <_Z3spbc>
    4eda:	d4 01       	movw	r26, r8
    4edc:	8c 91       	ld	r24, X
    4ede:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <_Z3spbc>
    4ee2:	e0 ce       	rjmp	.-576    	; 0x4ca4 <_Z19func_printf_handlerhh+0x56>
    4ee4:	b3 94       	inc	r11
    4ee6:	07 c0       	rjmp	.+14     	; 0x4ef6 <_Z19func_printf_handlerhh+0x2a8>
    4ee8:	8a 30       	cpi	r24, 0x0A	; 10
    4eea:	19 f4       	brne	.+6      	; 0x4ef2 <_Z19func_printf_handlerhh+0x2a4>
    4eec:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <_Z5speolv>
    4ef0:	02 c0       	rjmp	.+4      	; 0x4ef6 <_Z19func_printf_handlerhh+0x2a8>
    4ef2:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <_Z3spbc>
    4ef6:	bf ef       	ldi	r27, 0xFF	; 255
    4ef8:	8b 1a       	sub	r8, r27
    4efa:	9b 0a       	sbc	r9, r27
    4efc:	d3 ce       	rjmp	.-602    	; 0x4ca4 <_Z19func_printf_handlerhh+0x56>
    4efe:	10 92 d9 26 	sts	0x26D9, r1
    4f02:	6b 2d       	mov	r22, r11
    4f04:	70 e0       	ldi	r23, 0x00	; 0
    4f06:	80 e0       	ldi	r24, 0x00	; 0
    4f08:	90 e0       	ldi	r25, 0x00	; 0
    4f0a:	0f 90       	pop	r0
    4f0c:	0f 90       	pop	r0
    4f0e:	0f 90       	pop	r0
    4f10:	0f 90       	pop	r0
    4f12:	df 91       	pop	r29
    4f14:	cf 91       	pop	r28
    4f16:	1f 91       	pop	r17
    4f18:	0f 91       	pop	r16
    4f1a:	ff 90       	pop	r15
    4f1c:	ef 90       	pop	r14
    4f1e:	df 90       	pop	r13
    4f20:	cf 90       	pop	r12
    4f22:	bf 90       	pop	r11
    4f24:	9f 90       	pop	r9
    4f26:	8f 90       	pop	r8
    4f28:	7f 90       	pop	r7
    4f2a:	6f 90       	pop	r6
    4f2c:	5f 90       	pop	r5
    4f2e:	4f 90       	pop	r4
    4f30:	08 95       	ret

00004f32 <_Z11func_printfv>:
    4f32:	62 e0       	ldi	r22, 0x02	; 2
    4f34:	81 e0       	ldi	r24, 0x01	; 1
    4f36:	8b ce       	rjmp	.-746    	; 0x4c4e <_Z19func_printf_handlerhh>

00004f38 <_Z12initTaskListv>:
    4f38:	44 e1       	ldi	r20, 0x14	; 20
    4f3a:	50 e0       	ldi	r21, 0x00	; 0
    4f3c:	6f ef       	ldi	r22, 0xFF	; 255
    4f3e:	70 e0       	ldi	r23, 0x00	; 0
    4f40:	80 e8       	ldi	r24, 0x80	; 128
    4f42:	96 e2       	ldi	r25, 0x26	; 38
    4f44:	0c 94 5c b5 	jmp	0x16ab8	; 0x16ab8 <memset>

00004f48 <_Z8stopTaskh>:
    4f48:	8a 30       	cpi	r24, 0x0A	; 10
    4f4a:	50 f4       	brcc	.+20     	; 0x4f60 <_Z8stopTaskh+0x18>
    4f4c:	e8 2f       	mov	r30, r24
    4f4e:	f0 e0       	ldi	r31, 0x00	; 0
    4f50:	ee 0f       	add	r30, r30
    4f52:	ff 1f       	adc	r31, r31
    4f54:	e0 58       	subi	r30, 0x80	; 128
    4f56:	f9 4d       	sbci	r31, 0xD9	; 217
    4f58:	8f ef       	ldi	r24, 0xFF	; 255
    4f5a:	9f ef       	ldi	r25, 0xFF	; 255
    4f5c:	91 83       	std	Z+1, r25	; 0x01
    4f5e:	80 83       	st	Z, r24
    4f60:	08 95       	ret

00004f62 <_Z9startTaskil>:
    4f62:	cf 92       	push	r12
    4f64:	df 92       	push	r13
    4f66:	ef 92       	push	r14
    4f68:	ff 92       	push	r15
    4f6a:	cf 93       	push	r28
    4f6c:	df 93       	push	r29
    4f6e:	6a 01       	movw	r12, r20
    4f70:	7b 01       	movw	r14, r22
    4f72:	e0 e8       	ldi	r30, 0x80	; 128
    4f74:	f6 e2       	ldi	r31, 0x26	; 38
    4f76:	20 e0       	ldi	r18, 0x00	; 0
    4f78:	30 e0       	ldi	r19, 0x00	; 0
    4f7a:	41 91       	ld	r20, Z+
    4f7c:	51 91       	ld	r21, Z+
    4f7e:	4f 3f       	cpi	r20, 0xFF	; 255
    4f80:	5f 4f       	sbci	r21, 0xFF	; 255
    4f82:	31 f5       	brne	.+76     	; 0x4fd0 <_Z9startTaskil+0x6e>
    4f84:	f9 01       	movw	r30, r18
    4f86:	ee 0f       	add	r30, r30
    4f88:	ff 1f       	adc	r31, r31
    4f8a:	e0 58       	subi	r30, 0x80	; 128
    4f8c:	f9 4d       	sbci	r31, 0xD9	; 217
    4f8e:	91 83       	std	Z+1, r25	; 0x01
    4f90:	80 83       	st	Z, r24
    4f92:	e9 01       	movw	r28, r18
    4f94:	cc 0f       	add	r28, r28
    4f96:	dd 1f       	adc	r29, r29
    4f98:	cc 0f       	add	r28, r28
    4f9a:	dd 1f       	adc	r29, r29
    4f9c:	fe 01       	movw	r30, r28
    4f9e:	e8 5a       	subi	r30, 0xA8	; 168
    4fa0:	f9 4d       	sbci	r31, 0xD9	; 217
    4fa2:	c0 82       	st	Z, r12
    4fa4:	d1 82       	std	Z+1, r13	; 0x01
    4fa6:	e2 82       	std	Z+2, r14	; 0x02
    4fa8:	f3 82       	std	Z+3, r15	; 0x03
    4faa:	0e 94 16 14 	call	0x282c	; 0x282c <millis>
    4fae:	c0 5d       	subi	r28, 0xD0	; 208
    4fb0:	d9 4d       	sbci	r29, 0xD9	; 217
    4fb2:	6c 0d       	add	r22, r12
    4fb4:	7d 1d       	adc	r23, r13
    4fb6:	8e 1d       	adc	r24, r14
    4fb8:	9f 1d       	adc	r25, r15
    4fba:	68 83       	st	Y, r22
    4fbc:	79 83       	std	Y+1, r23	; 0x01
    4fbe:	8a 83       	std	Y+2, r24	; 0x02
    4fc0:	9b 83       	std	Y+3, r25	; 0x03
    4fc2:	df 91       	pop	r29
    4fc4:	cf 91       	pop	r28
    4fc6:	ff 90       	pop	r15
    4fc8:	ef 90       	pop	r14
    4fca:	df 90       	pop	r13
    4fcc:	cf 90       	pop	r12
    4fce:	08 95       	ret
    4fd0:	2f 5f       	subi	r18, 0xFF	; 255
    4fd2:	3f 4f       	sbci	r19, 0xFF	; 255
    4fd4:	2a 30       	cpi	r18, 0x0A	; 10
    4fd6:	31 05       	cpc	r19, r1
    4fd8:	81 f6       	brne	.-96     	; 0x4f7a <_Z9startTaskil+0x18>
    4fda:	87 e1       	ldi	r24, 0x17	; 23
    4fdc:	e1 dc       	rcall	.-1598   	; 0x49a0 <_Z8overflowh>

00004fde <_Z6snoozem>:
    4fde:	20 91 96 26 	lds	r18, 0x2696
    4fe2:	22 23       	and	r18, r18
    4fe4:	69 f0       	breq	.+26     	; 0x5000 <_Z6snoozem+0x22>
    4fe6:	e0 91 94 26 	lds	r30, 0x2694
    4fea:	24 e0       	ldi	r18, 0x04	; 4
    4fec:	e2 9f       	mul	r30, r18
    4fee:	f0 01       	movw	r30, r0
    4ff0:	11 24       	eor	r1, r1
    4ff2:	e8 5a       	subi	r30, 0xA8	; 168
    4ff4:	f9 4d       	sbci	r31, 0xD9	; 217
    4ff6:	60 83       	st	Z, r22
    4ff8:	71 83       	std	Z+1, r23	; 0x01
    4ffa:	82 83       	std	Z+2, r24	; 0x02
    4ffc:	93 83       	std	Z+3, r25	; 0x03
    4ffe:	08 95       	ret
    5000:	0c 94 48 14 	jmp	0x2890	; 0x2890 <delay>

00005004 <_Z11func_snoozev>:
    5004:	81 e0       	ldi	r24, 0x01	; 1
    5006:	6c d9       	rcall	.-3368   	; 0x42e0 <_Z7reqargsh>
    5008:	e0 91 44 2b 	lds	r30, 0x2B44
    500c:	f0 91 45 2b 	lds	r31, 0x2B45
    5010:	34 97       	sbiw	r30, 0x04	; 4
    5012:	60 81       	ld	r22, Z
    5014:	71 81       	ldd	r23, Z+1	; 0x01
    5016:	82 81       	ldd	r24, Z+2	; 0x02
    5018:	93 81       	ldd	r25, Z+3	; 0x03
    501a:	e1 df       	rcall	.-62     	; 0x4fde <_Z6snoozem>
    501c:	60 e0       	ldi	r22, 0x00	; 0
    501e:	70 e0       	ldi	r23, 0x00	; 0
    5020:	cb 01       	movw	r24, r22
    5022:	08 95       	ret

00005024 <_Z7eewriteih>:
    5024:	8f 3f       	cpi	r24, 0xFF	; 255
    5026:	2e e1       	ldi	r18, 0x1E	; 30
    5028:	92 07       	cpc	r25, r18
    502a:	10 f4       	brcc	.+4      	; 0x5030 <_Z7eewriteih+0xc>
    502c:	0c 94 d5 b8 	jmp	0x171aa	; 0x171aa <__eewr_byte_EEPROM_SUFFIX>
    5030:	08 95       	ret

00005032 <_Z10saveStringiPc>:
    5032:	0f 93       	push	r16
    5034:	1f 93       	push	r17
    5036:	cf 93       	push	r28
    5038:	df 93       	push	r29
    503a:	fb 01       	movw	r30, r22
    503c:	01 90       	ld	r0, Z+
    503e:	00 20       	and	r0, r0
    5040:	e9 f7       	brne	.-6      	; 0x503c <_Z10saveStringiPc+0xa>
    5042:	31 97       	sbiw	r30, 0x01	; 1
    5044:	e6 1b       	sub	r30, r22
    5046:	f7 0b       	sbc	r31, r23
    5048:	e8 0f       	add	r30, r24
    504a:	f9 1f       	adc	r31, r25
    504c:	ef 3f       	cpi	r30, 0xFF	; 255
    504e:	fe 41       	sbci	r31, 0x1E	; 30
    5050:	88 f4       	brcc	.+34     	; 0x5074 <_Z10saveStringiPc+0x42>
    5052:	eb 01       	movw	r28, r22
    5054:	8c 01       	movw	r16, r24
    5056:	06 1b       	sub	r16, r22
    5058:	17 0b       	sbc	r17, r23
    505a:	c8 01       	movw	r24, r16
    505c:	8c 0f       	add	r24, r28
    505e:	9d 1f       	adc	r25, r29
    5060:	69 91       	ld	r22, Y+
    5062:	66 23       	and	r22, r22
    5064:	11 f0       	breq	.+4      	; 0x506a <_Z10saveStringiPc+0x38>
    5066:	de df       	rcall	.-68     	; 0x5024 <_Z7eewriteih>
    5068:	f8 cf       	rjmp	.-16     	; 0x505a <_Z10saveStringiPc+0x28>
    506a:	df 91       	pop	r29
    506c:	cf 91       	pop	r28
    506e:	1f 91       	pop	r17
    5070:	0f 91       	pop	r16
    5072:	d8 cf       	rjmp	.-80     	; 0x5024 <_Z7eewriteih>
    5074:	df 91       	pop	r29
    5076:	cf 91       	pop	r28
    5078:	1f 91       	pop	r17
    507a:	0f 91       	pop	r16
    507c:	08 95       	ret

0000507e <_Z7func_ewv>:
    507e:	82 e0       	ldi	r24, 0x02	; 2
    5080:	2f d9       	rcall	.-3490   	; 0x42e0 <_Z7reqargsh>
    5082:	80 91 44 2b 	lds	r24, 0x2B44
    5086:	90 91 45 2b 	lds	r25, 0x2B45
    508a:	fc 01       	movw	r30, r24
    508c:	38 97       	sbiw	r30, 0x08	; 8
    508e:	dc 01       	movw	r26, r24
    5090:	14 97       	sbiw	r26, 0x04	; 4
    5092:	60 81       	ld	r22, Z
    5094:	8d 91       	ld	r24, X+
    5096:	9c 91       	ld	r25, X
    5098:	c5 df       	rcall	.-118    	; 0x5024 <_Z7eewriteih>
    509a:	60 e0       	ldi	r22, 0x00	; 0
    509c:	70 e0       	ldi	r23, 0x00	; 0
    509e:	cb 01       	movw	r24, r22
    50a0:	08 95       	ret

000050a2 <_Z6eereadi>:
    50a2:	8f 3f       	cpi	r24, 0xFF	; 255
    50a4:	2e e1       	ldi	r18, 0x1E	; 30
    50a6:	92 07       	cpc	r25, r18
    50a8:	10 f4       	brcc	.+4      	; 0x50ae <_Z6eereadi+0xc>
    50aa:	0c 94 ad b8 	jmp	0x1715a	; 0x1715a <__eerd_byte_EEPROM_SUFFIX>
    50ae:	8f ef       	ldi	r24, 0xFF	; 255
    50b0:	08 95       	ret

000050b2 <_Z12findoccupiedi>:
    50b2:	cf 93       	push	r28
    50b4:	df 93       	push	r29
    50b6:	ec 01       	movw	r28, r24
    50b8:	cf 3f       	cpi	r28, 0xFF	; 255
    50ba:	8e e1       	ldi	r24, 0x1E	; 30
    50bc:	d8 07       	cpc	r29, r24
    50be:	34 f4       	brge	.+12     	; 0x50cc <_Z12findoccupiedi+0x1a>
    50c0:	ce 01       	movw	r24, r28
    50c2:	ef df       	rcall	.-34     	; 0x50a2 <_Z6eereadi>
    50c4:	8f 3f       	cpi	r24, 0xFF	; 255
    50c6:	29 f4       	brne	.+10     	; 0x50d2 <_Z12findoccupiedi+0x20>
    50c8:	21 96       	adiw	r28, 0x01	; 1
    50ca:	f6 cf       	rjmp	.-20     	; 0x50b8 <_Z12findoccupiedi+0x6>
    50cc:	8f ef       	ldi	r24, 0xFF	; 255
    50ce:	9f ef       	ldi	r25, 0xFF	; 255
    50d0:	01 c0       	rjmp	.+2      	; 0x50d4 <_Z12findoccupiedi+0x22>
    50d2:	ce 01       	movw	r24, r28
    50d4:	df 91       	pop	r29
    50d6:	cf 91       	pop	r28
    50d8:	08 95       	ret

000050da <_Z14findunoccupiedi>:
    50da:	cf 93       	push	r28
    50dc:	df 93       	push	r29
    50de:	ec 01       	movw	r28, r24
    50e0:	cf 3f       	cpi	r28, 0xFF	; 255
    50e2:	8e e1       	ldi	r24, 0x1E	; 30
    50e4:	d8 07       	cpc	r29, r24
    50e6:	34 f4       	brge	.+12     	; 0x50f4 <_Z14findunoccupiedi+0x1a>
    50e8:	ce 01       	movw	r24, r28
    50ea:	db df       	rcall	.-74     	; 0x50a2 <_Z6eereadi>
    50ec:	8f 3f       	cpi	r24, 0xFF	; 255
    50ee:	29 f0       	breq	.+10     	; 0x50fa <_Z14findunoccupiedi+0x20>
    50f0:	21 96       	adiw	r28, 0x01	; 1
    50f2:	f6 cf       	rjmp	.-20     	; 0x50e0 <_Z14findunoccupiedi+0x6>
    50f4:	8f ef       	ldi	r24, 0xFF	; 255
    50f6:	9f ef       	ldi	r25, 0xFF	; 255
    50f8:	01 c0       	rjmp	.+2      	; 0x50fc <_Z14findunoccupiedi+0x22>
    50fa:	ce 01       	movw	r24, r28
    50fc:	df 91       	pop	r29
    50fe:	cf 91       	pop	r28
    5100:	08 95       	ret

00005102 <_Z8findholei>:
    5102:	0f 93       	push	r16
    5104:	1f 93       	push	r17
    5106:	cf 93       	push	r28
    5108:	df 93       	push	r29
    510a:	8c 01       	movw	r16, r24
    510c:	20 e0       	ldi	r18, 0x00	; 0
    510e:	30 e0       	ldi	r19, 0x00	; 0
    5110:	c9 01       	movw	r24, r18
    5112:	80 0f       	add	r24, r16
    5114:	91 1f       	adc	r25, r17
    5116:	81 15       	cp	r24, r1
    5118:	9f 41       	sbci	r25, 0x1F	; 31
    511a:	e4 f4       	brge	.+56     	; 0x5154 <_Z8findholei+0x52>
    511c:	c9 01       	movw	r24, r18
    511e:	dd df       	rcall	.-70     	; 0x50da <_Z14findunoccupiedi>
    5120:	ec 01       	movw	r28, r24
    5122:	cf 3f       	cpi	r28, 0xFF	; 255
    5124:	8f ef       	ldi	r24, 0xFF	; 255
    5126:	d8 07       	cpc	r29, r24
    5128:	a9 f0       	breq	.+42     	; 0x5154 <_Z8findholei+0x52>
    512a:	ce 01       	movw	r24, r28
    512c:	c2 df       	rcall	.-124    	; 0x50b2 <_Z12findoccupiedi>
    512e:	9c 01       	movw	r18, r24
    5130:	8f 3f       	cpi	r24, 0xFF	; 255
    5132:	4f ef       	ldi	r20, 0xFF	; 255
    5134:	94 07       	cpc	r25, r20
    5136:	11 f4       	brne	.+4      	; 0x513c <_Z8findholei+0x3a>
    5138:	20 e0       	ldi	r18, 0x00	; 0
    513a:	3f e1       	ldi	r19, 0x1F	; 31
    513c:	c9 01       	movw	r24, r18
    513e:	8c 1b       	sub	r24, r28
    5140:	9d 0b       	sbc	r25, r29
    5142:	80 17       	cp	r24, r16
    5144:	91 07       	cpc	r25, r17
    5146:	24 f3       	brlt	.-56     	; 0x5110 <_Z8findholei+0xe>
    5148:	ce 01       	movw	r24, r28
    514a:	df 91       	pop	r29
    514c:	cf 91       	pop	r28
    514e:	1f 91       	pop	r17
    5150:	0f 91       	pop	r16
    5152:	08 95       	ret
    5154:	81 e1       	ldi	r24, 0x11	; 17
    5156:	24 dc       	rcall	.-1976   	; 0x49a0 <_Z8overflowh>

00005158 <_Z7findendi>:
    5158:	0f 93       	push	r16
    515a:	1f 93       	push	r17
    515c:	cf 93       	push	r28
    515e:	df 93       	push	r29
    5160:	8c 01       	movw	r16, r24
    5162:	e8 01       	movw	r28, r16
    5164:	21 96       	adiw	r28, 0x01	; 1
    5166:	cf 3f       	cpi	r28, 0xFF	; 255
    5168:	8e e1       	ldi	r24, 0x1E	; 30
    516a:	d8 07       	cpc	r29, r24
    516c:	5c f4       	brge	.+22     	; 0x5184 <_Z7findendi+0x2c>
    516e:	ce 01       	movw	r24, r28
    5170:	98 df       	rcall	.-208    	; 0x50a2 <_Z6eereadi>
    5172:	8f 3f       	cpi	r24, 0xFF	; 255
    5174:	51 f0       	breq	.+20     	; 0x518a <_Z7findendi+0x32>
    5176:	81 11       	cpse	r24, r1
    5178:	03 c0       	rjmp	.+6      	; 0x5180 <_Z7findendi+0x28>
    517a:	c8 01       	movw	r24, r16
    517c:	02 96       	adiw	r24, 0x02	; 2
    517e:	06 c0       	rjmp	.+12     	; 0x518c <_Z7findendi+0x34>
    5180:	8e 01       	movw	r16, r28
    5182:	ef cf       	rjmp	.-34     	; 0x5162 <_Z7findendi+0xa>
    5184:	8f ef       	ldi	r24, 0xFF	; 255
    5186:	9e e1       	ldi	r25, 0x1E	; 30
    5188:	01 c0       	rjmp	.+2      	; 0x518c <_Z7findendi+0x34>
    518a:	ce 01       	movw	r24, r28
    518c:	df 91       	pop	r29
    518e:	cf 91       	pop	r28
    5190:	1f 91       	pop	r17
    5192:	0f 91       	pop	r16
    5194:	08 95       	ret

00005196 <_Z10eestrmatchiPc>:
    5196:	ff 92       	push	r15
    5198:	0f 93       	push	r16
    519a:	1f 93       	push	r17
    519c:	cf 93       	push	r28
    519e:	df 93       	push	r29
    51a0:	eb 01       	movw	r28, r22
    51a2:	f9 90       	ld	r15, Y+
    51a4:	ff 20       	and	r15, r15
    51a6:	61 f0       	breq	.+24     	; 0x51c0 <_Z10eestrmatchiPc+0x2a>
    51a8:	8f 3f       	cpi	r24, 0xFF	; 255
    51aa:	2e e1       	ldi	r18, 0x1E	; 30
    51ac:	92 07       	cpc	r25, r18
    51ae:	5c f4       	brge	.+22     	; 0x51c6 <_Z10eestrmatchiPc+0x30>
    51b0:	8c 01       	movw	r16, r24
    51b2:	0f 5f       	subi	r16, 0xFF	; 255
    51b4:	1f 4f       	sbci	r17, 0xFF	; 255
    51b6:	75 df       	rcall	.-278    	; 0x50a2 <_Z6eereadi>
    51b8:	8f 11       	cpse	r24, r15
    51ba:	05 c0       	rjmp	.+10     	; 0x51c6 <_Z10eestrmatchiPc+0x30>
    51bc:	c8 01       	movw	r24, r16
    51be:	f1 cf       	rjmp	.-30     	; 0x51a2 <_Z10eestrmatchiPc+0xc>
    51c0:	70 df       	rcall	.-288    	; 0x50a2 <_Z6eereadi>
    51c2:	91 e0       	ldi	r25, 0x01	; 1
    51c4:	81 11       	cpse	r24, r1
    51c6:	90 e0       	ldi	r25, 0x00	; 0
    51c8:	89 2f       	mov	r24, r25
    51ca:	df 91       	pop	r29
    51cc:	cf 91       	pop	r28
    51ce:	1f 91       	pop	r17
    51d0:	0f 91       	pop	r16
    51d2:	ff 90       	pop	r15
    51d4:	08 95       	ret

000051d6 <_Z7findKeyPc>:
    51d6:	0f 93       	push	r16
    51d8:	1f 93       	push	r17
    51da:	cf 93       	push	r28
    51dc:	df 93       	push	r29
    51de:	8c 01       	movw	r16, r24
    51e0:	80 e0       	ldi	r24, 0x00	; 0
    51e2:	90 e0       	ldi	r25, 0x00	; 0
    51e4:	66 df       	rcall	.-308    	; 0x50b2 <_Z12findoccupiedi>
    51e6:	ec 01       	movw	r28, r24
    51e8:	8f 3f       	cpi	r24, 0xFF	; 255
    51ea:	2f ef       	ldi	r18, 0xFF	; 255
    51ec:	92 07       	cpc	r25, r18
    51ee:	71 f0       	breq	.+28     	; 0x520c <_Z7findKeyPc+0x36>
    51f0:	b8 01       	movw	r22, r16
    51f2:	d1 df       	rcall	.-94     	; 0x5196 <_Z10eestrmatchiPc>
    51f4:	81 11       	cpse	r24, r1
    51f6:	08 c0       	rjmp	.+16     	; 0x5208 <_Z7findKeyPc+0x32>
    51f8:	ce 01       	movw	r24, r28
    51fa:	ae df       	rcall	.-164    	; 0x5158 <_Z7findendi>
    51fc:	ad df       	rcall	.-166    	; 0x5158 <_Z7findendi>
    51fe:	8b 3f       	cpi	r24, 0xFB	; 251
    5200:	2e e1       	ldi	r18, 0x1E	; 30
    5202:	92 07       	cpc	r25, r18
    5204:	7c f3       	brlt	.-34     	; 0x51e4 <_Z7findKeyPc+0xe>
    5206:	02 c0       	rjmp	.+4      	; 0x520c <_Z7findKeyPc+0x36>
    5208:	ce 01       	movw	r24, r28
    520a:	02 c0       	rjmp	.+4      	; 0x5210 <_Z7findKeyPc+0x3a>
    520c:	8f ef       	ldi	r24, 0xFF	; 255
    520e:	9f ef       	ldi	r25, 0xFF	; 255
    5210:	df 91       	pop	r29
    5212:	cf 91       	pop	r28
    5214:	1f 91       	pop	r17
    5216:	0f 91       	pop	r16
    5218:	08 95       	ret

0000521a <_Z10findscriptPc>:

//////////
//
//	findscript: look up a script, with side effects
//
byte findscript(char *idbuf) {
    521a:	cf 93       	push	r28
    521c:	df 93       	push	r29
    521e:	ec 01       	movw	r28, r24

	// script function in eeprom?
	if ((symval=findKey(idbuf)) >= 0) sym = s_script_eeprom;
    5220:	da df       	rcall	.-76     	; 0x51d6 <_Z7findKeyPc>
    5222:	ac 01       	movw	r20, r24
    5224:	66 27       	eor	r22, r22
    5226:	57 fd       	sbrc	r21, 7
    5228:	60 95       	com	r22
    522a:	76 2f       	mov	r23, r22
    522c:	40 93 66 2b 	sts	0x2B66, r20
    5230:	50 93 67 2b 	sts	0x2B67, r21
    5234:	60 93 68 2b 	sts	0x2B68, r22
    5238:	70 93 69 2b 	sts	0x2B69, r23
    523c:	77 fd       	sbrc	r23, 7
    523e:	03 c0       	rjmp	.+6      	; 0x5246 <_Z10findscriptPc+0x2c>
    5240:	83 ea       	ldi	r24, 0xA3	; 163
    5242:	8e bb       	out	0x1e, r24	; 30
    5244:	09 c0       	rjmp	.+18     	; 0x5258 <_Z10findscriptPc+0x3e>
#if !defined(TINY_BUILD)
	// script function in a file?
	else if (scriptfileexists(idbuf)) sym = s_script_file;

	// script in the built-ins table?
	else if (findbuiltin(idbuf)) {;}
    5246:	ce 01       	movw	r24, r28
    5248:	0e 94 ea 1c 	call	0x39d4	; 0x39d4 <_Z11findbuiltinPc>
    524c:	81 11       	cpse	r24, r1
    524e:	04 c0       	rjmp	.+8      	; 0x5258 <_Z10findscriptPc+0x3e>
#endif

	else {
		sym = s_undef;		// huh?
    5250:	80 e8       	ldi	r24, 0x80	; 128
    5252:	8e bb       	out	0x1e, r24	; 30
		return 0;
    5254:	80 e0       	ldi	r24, 0x00	; 0
    5256:	01 c0       	rjmp	.+2      	; 0x525a <_Z10findscriptPc+0x40>
	}
	return sym;
    5258:	8e b3       	in	r24, 0x1e	; 30
}
    525a:	df 91       	pop	r29
    525c:	cf 91       	pop	r28
    525e:	08 95       	ret

00005260 <_Z8erasestri>:
		eewrite(addr, 0);
	}
}

// erase string at addy.  return addy of byte past end.
int erasestr(int addr) {
    5260:	ff 92       	push	r15
    5262:	0f 93       	push	r16
    5264:	1f 93       	push	r17
    5266:	cf 93       	push	r28
    5268:	df 93       	push	r29
    526a:	ec 01       	movw	r28, r24
	while (addr < ENDDB) {
    526c:	cf 3f       	cpi	r28, 0xFF	; 255
    526e:	8e e1       	ldi	r24, 0x1E	; 30
    5270:	d8 07       	cpc	r29, r24
    5272:	7c f4       	brge	.+30     	; 0x5292 <_Z8erasestri+0x32>
		byte c = eeread(addr);
    5274:	ce 01       	movw	r24, r28
    5276:	15 df       	rcall	.-470    	; 0x50a2 <_Z6eereadi>
    5278:	f8 2e       	mov	r15, r24
		if (c == EMPTY) return addr;
    527a:	8f ef       	ldi	r24, 0xFF	; 255
    527c:	f8 16       	cp	r15, r24
    527e:	49 f0       	breq	.+18     	; 0x5292 <_Z8erasestri+0x32>
		eewrite(addr++, EMPTY);
    5280:	8e 01       	movw	r16, r28
    5282:	0f 5f       	subi	r16, 0xFF	; 255
    5284:	1f 4f       	sbci	r17, 0xFF	; 255
    5286:	6f ef       	ldi	r22, 0xFF	; 255
    5288:	ce 01       	movw	r24, r28
    528a:	cc de       	rcall	.-616    	; 0x5024 <_Z7eewriteih>
    528c:	e8 01       	movw	r28, r16
		if (!c) return addr;
    528e:	f1 10       	cpse	r15, r1
    5290:	ed cf       	rjmp	.-38     	; 0x526c <_Z8erasestri+0xc>
	}
	return addr;
}
    5292:	ce 01       	movw	r24, r28
    5294:	df 91       	pop	r29
    5296:	cf 91       	pop	r28
    5298:	1f 91       	pop	r17
    529a:	0f 91       	pop	r16
    529c:	ff 90       	pop	r15
    529e:	08 95       	ret

000052a0 <_Z10eraseentryPc>:

// erase entry by id
void eraseentry(char *id) {
	int entry = findKey(id);
    52a0:	9a df       	rcall	.-204    	; 0x51d6 <_Z7findKeyPc>
	if (entry >= 0) erasestr(erasestr(entry));
    52a2:	97 fd       	sbrc	r25, 7
    52a4:	02 c0       	rjmp	.+4      	; 0x52aa <_Z10eraseentryPc+0xa>
    52a6:	dc df       	rcall	.-72     	; 0x5260 <_Z8erasestri>
    52a8:	db cf       	rjmp	.-74     	; 0x5260 <_Z8erasestri>
    52aa:	08 95       	ret

000052ac <_Z12cmd_functionv>:



// Parse and store a function definition
//
void cmd_function(void) {
    52ac:	6f 92       	push	r6
    52ae:	7f 92       	push	r7
    52b0:	8f 92       	push	r8
    52b2:	9f 92       	push	r9
    52b4:	af 92       	push	r10
    52b6:	bf 92       	push	r11
    52b8:	cf 92       	push	r12
    52ba:	df 92       	push	r13
    52bc:	ef 92       	push	r14
    52be:	ff 92       	push	r15
    52c0:	0f 93       	push	r16
    52c2:	1f 93       	push	r17
    52c4:	cf 93       	push	r28
    52c6:	df 93       	push	r29
    52c8:	cd b7       	in	r28, 0x3d	; 61
    52ca:	de b7       	in	r29, 0x3e	; 62
    52cc:	69 97       	sbiw	r28, 0x19	; 25
    52ce:	0f b6       	in	r0, 0x3f	; 63
    52d0:	f8 94       	cli
    52d2:	de bf       	out	0x3e, r29	; 62
    52d4:	0f be       	out	0x3f, r0	; 63
    52d6:	cd bf       	out	0x3d, r28	; 61
char id[IDLEN+1];			// buffer for id

	getsym();				// eat "function", get putative id
    52d8:	0e 94 47 20 	call	0x408e	; 0x408e <_Z6getsymv>
	if ((sym != s_undef) && (sym != s_script_eeprom) &&
    52dc:	8e b3       	in	r24, 0x1e	; 30
		(sym != s_script_progmem) && (sym != s_script_file)) unexpected(M_id);
    52de:	80 38       	cpi	r24, 0x80	; 128
    52e0:	61 f0       	breq	.+24     	; 0x52fa <_Z12cmd_functionv+0x4e>
//
void cmd_function(void) {
char id[IDLEN+1];			// buffer for id

	getsym();				// eat "function", get putative id
	if ((sym != s_undef) && (sym != s_script_eeprom) &&
    52e2:	8e b3       	in	r24, 0x1e	; 30
    52e4:	83 3a       	cpi	r24, 0xA3	; 163
    52e6:	49 f0       	breq	.+18     	; 0x52fa <_Z12cmd_functionv+0x4e>
		(sym != s_script_progmem) && (sym != s_script_file)) unexpected(M_id);
    52e8:	8e b3       	in	r24, 0x1e	; 30
//
void cmd_function(void) {
char id[IDLEN+1];			// buffer for id

	getsym();				// eat "function", get putative id
	if ((sym != s_undef) && (sym != s_script_eeprom) &&
    52ea:	84 3a       	cpi	r24, 0xA4	; 164
    52ec:	31 f0       	breq	.+12     	; 0x52fa <_Z12cmd_functionv+0x4e>
		(sym != s_script_progmem) && (sym != s_script_file)) unexpected(M_id);
    52ee:	8e b3       	in	r24, 0x1e	; 30
    52f0:	85 3a       	cpi	r24, 0xA5	; 165
    52f2:	19 f0       	breq	.+6      	; 0x52fa <_Z12cmd_functionv+0x4e>
    52f4:	87 e1       	ldi	r24, 0x17	; 23
    52f6:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <_Z10unexpectedh>
	strncpy(id, idbuf, IDLEN+1);	// save id string through value parse
    52fa:	49 e1       	ldi	r20, 0x19	; 25
    52fc:	50 e0       	ldi	r21, 0x00	; 0
    52fe:	68 e4       	ldi	r22, 0x48	; 72
    5300:	7b e2       	ldi	r23, 0x2B	; 43
    5302:	ce 01       	movw	r24, r28
    5304:	01 96       	adiw	r24, 0x01	; 1
    5306:	5c 01       	movw	r10, r24
    5308:	0e 94 8c b5 	call	0x16b18	; 0x16b18 <strncpy>
	eraseentry(id);
    530c:	c5 01       	movw	r24, r10
    530e:	c8 df       	rcall	.-112    	; 0x52a0 <_Z10eraseentryPc>
	
	getsym();		// eat the id, move on to '{'
    5310:	0e 94 47 20 	call	0x408e	; 0x408e <_Z6getsymv>

	if (sym != s_lcurly) expected(s_lcurly);
    5314:	8e b3       	in	r24, 0x1e	; 30
    5316:	8b 37       	cpi	r24, 0x7B	; 123
    5318:	19 f0       	breq	.+6      	; 0x5320 <_Z12cmd_functionv+0x74>
    531a:	8b e7       	ldi	r24, 0x7B	; 123
    531c:	0e 94 f5 20 	call	0x41ea	; 0x41ea <_Z8expectedh>

	// measure the macro text using skipstatement
	// fetchptr is on the character after '{'
	//
	// BUG: This is broken for file scripts
	char *startmark = (char *) fetchptr;		// mark first char of macro text
    5320:	c0 90 6a 2b 	lds	r12, 0x2B6A
    5324:	d0 90 6b 2b 	lds	r13, 0x2B6B
    5328:	e0 90 6c 2b 	lds	r14, 0x2B6C
    532c:	f0 90 6d 2b 	lds	r15, 0x2B6D
    5330:	46 01       	movw	r8, r12
	void skipstatement(void);
	skipstatement();				// gobble it up without executing it
    5332:	eb d3       	rcall	.+2006   	; 0x5b0a <_Z13skipstatementv>
    5334:	e0 91 6a 2b 	lds	r30, 0x2B6A
    5338:	f0 91 6b 2b 	lds	r31, 0x2B6B
    533c:	31 97       	sbiw	r30, 0x01	; 1
	char *endmark = (char *) fetchptr;		// and note the char past '}'

	// endmark is past the closing '}' - back up and find it
	do {
		--endmark;
    533e:	8f 01       	movw	r16, r30
	void skipstatement(void);
	skipstatement();				// gobble it up without executing it
	char *endmark = (char *) fetchptr;		// and note the char past '}'

	// endmark is past the closing '}' - back up and find it
	do {
    5340:	8e 16       	cp	r8, r30
    5342:	9f 06       	cpc	r9, r31
    5344:	e0 f0       	brcs	.+56     	; 0x537e <_Z12cmd_functionv+0xd2>
		--endmark;
	} while ((endmark > startmark) && (*endmark != '}'));
	
	int idlen = strlen(id);
    5346:	f5 01       	movw	r30, r10
    5348:	01 90       	ld	r0, Z+
    534a:	00 20       	and	r0, r0
    534c:	e9 f7       	brne	.-6      	; 0x5348 <_Z12cmd_functionv+0x9c>
    534e:	cf 01       	movw	r24, r30
    5350:	01 97       	sbiw	r24, 0x01	; 1
    5352:	3c 01       	movw	r6, r24
    5354:	6a 18       	sub	r6, r10
    5356:	7b 08       	sbc	r7, r11
	int addr = findhole(idlen + (endmark-startmark) + 2);	// longjmps on fail
    5358:	c8 01       	movw	r24, r16
    535a:	8c 19       	sub	r24, r12
    535c:	9d 09       	sbc	r25, r13
    535e:	86 0d       	add	r24, r6
    5360:	97 1d       	adc	r25, r7
    5362:	02 96       	adiw	r24, 0x02	; 2
    5364:	ce de       	rcall	.-612    	; 0x5102 <_Z8findholei>
    5366:	4c 01       	movw	r8, r24
	if (addr >= 0) {
    5368:	97 fd       	sbrc	r25, 7
    536a:	1e c0       	rjmp	.+60     	; 0x53a8 <_Z12cmd_functionv+0xfc>
		saveString(addr, id);		// write the id and its terminator
    536c:	b5 01       	movw	r22, r10
    536e:	61 de       	rcall	.-830    	; 0x5032 <_Z10saveStringiPc>
		addr += idlen + 1;		// advance to payload offset
    5370:	c3 01       	movw	r24, r6
    5372:	01 96       	adiw	r24, 0x01	; 1
    5374:	88 0d       	add	r24, r8
    5376:	99 1d       	adc	r25, r9
    5378:	c8 1a       	sub	r12, r24
    537a:	d9 0a       	sbc	r13, r25
		while (startmark < endmark) eewrite(addr++, *startmark++);
    537c:	05 c0       	rjmp	.+10     	; 0x5388 <_Z12cmd_functionv+0xdc>
    537e:	31 97       	sbiw	r30, 0x01	; 1
	char *endmark = (char *) fetchptr;		// and note the char past '}'

	// endmark is past the closing '}' - back up and find it
	do {
		--endmark;
	} while ((endmark > startmark) && (*endmark != '}'));
    5380:	81 81       	ldd	r24, Z+1	; 0x01
    5382:	8d 37       	cpi	r24, 0x7D	; 125
    5384:	e1 f6       	brne	.-72     	; 0x533e <_Z12cmd_functionv+0x92>
    5386:	df cf       	rjmp	.-66     	; 0x5346 <_Z12cmd_functionv+0x9a>
    5388:	f6 01       	movw	r30, r12
    538a:	e8 0f       	add	r30, r24
    538c:	f9 1f       	adc	r31, r25
	int idlen = strlen(id);
	int addr = findhole(idlen + (endmark-startmark) + 2);	// longjmps on fail
	if (addr >= 0) {
		saveString(addr, id);		// write the id and its terminator
		addr += idlen + 1;		// advance to payload offset
		while (startmark < endmark) eewrite(addr++, *startmark++);
    538e:	e0 17       	cp	r30, r16
    5390:	f1 07       	cpc	r31, r17
    5392:	40 f4       	brcc	.+16     	; 0x53a4 <_Z12cmd_functionv+0xf8>
    5394:	7c 01       	movw	r14, r24
    5396:	2f ef       	ldi	r18, 0xFF	; 255
    5398:	e2 1a       	sub	r14, r18
    539a:	f2 0a       	sbc	r15, r18
    539c:	60 81       	ld	r22, Z
    539e:	42 de       	rcall	.-892    	; 0x5024 <_Z7eewriteih>
    53a0:	c7 01       	movw	r24, r14
    53a2:	f2 cf       	rjmp	.-28     	; 0x5388 <_Z12cmd_functionv+0xdc>
		eewrite(addr, 0);
    53a4:	60 e0       	ldi	r22, 0x00	; 0
    53a6:	3e de       	rcall	.-900    	; 0x5024 <_Z7eewriteih>
	}

	msgpl(M_saved);
    53a8:	80 e1       	ldi	r24, 0x10	; 16
    53aa:	0e 94 77 1f 	call	0x3eee	; 0x3eee <_Z5msgplh>
}
    53ae:	69 96       	adiw	r28, 0x19	; 25
    53b0:	0f b6       	in	r0, 0x3f	; 63
    53b2:	f8 94       	cli
    53b4:	de bf       	out	0x3e, r29	; 62
    53b6:	0f be       	out	0x3f, r0	; 63
    53b8:	cd bf       	out	0x3d, r28	; 61
    53ba:	df 91       	pop	r29
    53bc:	cf 91       	pop	r28
    53be:	1f 91       	pop	r17
    53c0:	0f 91       	pop	r16
    53c2:	ff 90       	pop	r15
    53c4:	ef 90       	pop	r14
    53c6:	df 90       	pop	r13
    53c8:	cf 90       	pop	r12
    53ca:	bf 90       	pop	r11
    53cc:	af 90       	pop	r10
    53ce:	9f 90       	pop	r9
    53d0:	8f 90       	pop	r8
    53d2:	7f 90       	pop	r7
    53d4:	6f 90       	pop	r6
    53d6:	08 95       	ret

000053d8 <_Z6eeputsi>:


// print eeprom string at addr
void eeputs(int addr) {
    53d8:	cf 93       	push	r28
    53da:	df 93       	push	r29
	while (addr < ENDDB) {
    53dc:	8f 3f       	cpi	r24, 0xFF	; 255
    53de:	2e e1       	ldi	r18, 0x1E	; 30
    53e0:	92 07       	cpc	r25, r18
    53e2:	5c f4       	brge	.+22     	; 0x53fa <_Z6eeputsi+0x22>
		byte c = eeread(addr++);
    53e4:	ec 01       	movw	r28, r24
    53e6:	21 96       	adiw	r28, 0x01	; 1
    53e8:	5c de       	rcall	.-840    	; 0x50a2 <_Z6eereadi>
		if (!c || (c == EMPTY)) return;
    53ea:	9f ef       	ldi	r25, 0xFF	; 255
    53ec:	98 0f       	add	r25, r24
    53ee:	9e 3f       	cpi	r25, 0xFE	; 254
    53f0:	20 f4       	brcc	.+8      	; 0x53fa <_Z6eeputsi+0x22>
		else if ((c >= 0x80) || (c < ' ')) {
			spb('\\'); spb('x'); 
			if (c < 0x10) spb('0'); printHex(c);
		}
#endif
		else spb(c);
    53f2:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <_Z3spbc>


// print eeprom string at addr
void eeputs(int addr) {
	while (addr < ENDDB) {
		byte c = eeread(addr++);
    53f6:	ce 01       	movw	r24, r28
    53f8:	f1 cf       	rjmp	.-30     	; 0x53dc <_Z6eeputsi+0x4>
			if (c < 0x10) spb('0'); printHex(c);
		}
#endif
		else spb(c);
	}
}
    53fa:	df 91       	pop	r29
    53fc:	cf 91       	pop	r28
    53fe:	08 95       	ret

00005400 <_Z6cmd_lsv>:

// list the strings in the avpdb
void cmd_ls(void) {
    5400:	cf 93       	push	r28
    5402:	df 93       	push	r29
int start = STARTDB;
    5404:	80 e0       	ldi	r24, 0x00	; 0
    5406:	90 e0       	ldi	r25, 0x00	; 0
	for (;;) {
		// find the next entry
		start = findoccupied(start);
    5408:	54 de       	rcall	.-856    	; 0x50b2 <_Z12findoccupiedi>
    540a:	ec 01       	movw	r28, r24
		if (start == FAIL) return;
    540c:	cf 3f       	cpi	r28, 0xFF	; 255
    540e:	8f ef       	ldi	r24, 0xFF	; 255
    5410:	d8 07       	cpc	r29, r24
    5412:	e9 f0       	breq	.+58     	; 0x544e <_Z6cmd_lsv+0x4e>

		msgp(M_function);
    5414:	8c e1       	ldi	r24, 0x1C	; 28
    5416:	0e 94 81 1e 	call	0x3d02	; 0x3d02 <_Z4msgph>
		spb(' ');
    541a:	80 e2       	ldi	r24, 0x20	; 32
    541c:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <_Z3spbc>
		eeputs(start);
    5420:	ce 01       	movw	r24, r28
    5422:	da df       	rcall	.-76     	; 0x53d8 <_Z6eeputsi>
		spb(' ');
    5424:	80 e2       	ldi	r24, 0x20	; 32
    5426:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <_Z3spbc>
		spb('{');
    542a:	8b e7       	ldi	r24, 0x7B	; 123
    542c:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <_Z3spbc>
		start = findend(start);
    5430:	ce 01       	movw	r24, r28
    5432:	92 de       	rcall	.-732    	; 0x5158 <_Z7findendi>
    5434:	ec 01       	movw	r28, r24
		eeputs(start);
    5436:	d0 df       	rcall	.-96     	; 0x53d8 <_Z6eeputsi>
		spb('}');
    5438:	8d e7       	ldi	r24, 0x7D	; 125
    543a:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <_Z3spbc>
		spb(';');
    543e:	8b e3       	ldi	r24, 0x3B	; 59
    5440:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <_Z3spbc>
		speol();
    5444:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <_Z5speolv>
		start = findend(start);
    5448:	ce 01       	movw	r24, r28
    544a:	86 de       	rcall	.-756    	; 0x5158 <_Z7findendi>
	}
    544c:	dd cf       	rjmp	.-70     	; 0x5408 <_Z6cmd_lsv+0x8>
}
    544e:	df 91       	pop	r29
    5450:	cf 91       	pop	r28
    5452:	08 95       	ret

00005454 <_Z12showTaskListv>:
	long millis_to_wait = next_wake_time - millis();
	if (millis_to_wait < 0) millis_to_wait = 0;
	return millis_to_wait;			// millis until next task runs
}

void showTaskList(void) {
    5454:	cf 92       	push	r12
    5456:	df 92       	push	r13
    5458:	ef 92       	push	r14
    545a:	ff 92       	push	r15
    545c:	0f 93       	push	r16
    545e:	cf 93       	push	r28
    5460:	df 93       	push	r29
    5462:	c0 e8       	ldi	r28, 0x80	; 128
    5464:	d6 e2       	ldi	r29, 0x26	; 38
    5466:	c1 2c       	mov	r12, r1
    5468:	d1 2c       	mov	r13, r1
    546a:	76 01       	movw	r14, r12
byte slot;
	for (slot = 0; slot < NUMTASKS; slot++) {
		if (tasklist[slot] != SLOT_FREE) {
    546c:	88 81       	ld	r24, Y
    546e:	99 81       	ldd	r25, Y+1	; 0x01
    5470:	01 96       	adiw	r24, 0x01	; 1
    5472:	99 f0       	breq	.+38     	; 0x549a <_Z12showTaskListv+0x46>
			printInteger(slot, 0, ' '); spb(':'); spb(' ');
    5474:	00 e2       	ldi	r16, 0x20	; 32
    5476:	20 e0       	ldi	r18, 0x00	; 0
    5478:	30 e0       	ldi	r19, 0x00	; 0
    547a:	a9 01       	movw	r20, r18
    547c:	c7 01       	movw	r24, r14
    547e:	b6 01       	movw	r22, r12
    5480:	0e 94 0b 20 	call	0x4016	; 0x4016 <_Z12printIntegerllh>
    5484:	8a e3       	ldi	r24, 0x3A	; 58
    5486:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <_Z3spbc>
    548a:	80 e2       	ldi	r24, 0x20	; 32
    548c:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <_Z3spbc>
			eeputs(tasklist[slot]); speol();
    5490:	88 81       	ld	r24, Y
    5492:	99 81       	ldd	r25, Y+1	; 0x01
    5494:	a1 df       	rcall	.-190    	; 0x53d8 <_Z6eeputsi>
    5496:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <_Z5speolv>
    549a:	22 96       	adiw	r28, 0x02	; 2
    549c:	8f ef       	ldi	r24, 0xFF	; 255
    549e:	c8 1a       	sub	r12, r24
    54a0:	d8 0a       	sbc	r13, r24
    54a2:	e8 0a       	sbc	r14, r24
    54a4:	f8 0a       	sbc	r15, r24
	return millis_to_wait;			// millis until next task runs
}

void showTaskList(void) {
byte slot;
	for (slot = 0; slot < NUMTASKS; slot++) {
    54a6:	2a e0       	ldi	r18, 0x0A	; 10
    54a8:	c2 16       	cp	r12, r18
    54aa:	d1 04       	cpc	r13, r1
    54ac:	e1 04       	cpc	r14, r1
    54ae:	f1 04       	cpc	r15, r1
    54b0:	e9 f6       	brne	.-70     	; 0x546c <_Z12showTaskListv+0x18>
		if (tasklist[slot] != SLOT_FREE) {
			printInteger(slot, 0, ' '); spb(':'); spb(' ');
			eeputs(tasklist[slot]); speol();
		}
	}
}
    54b2:	df 91       	pop	r29
    54b4:	cf 91       	pop	r28
    54b6:	0f 91       	pop	r16
    54b8:	ff 90       	pop	r15
    54ba:	ef 90       	pop	r14
    54bc:	df 90       	pop	r13
    54be:	cf 90       	pop	r12
    54c0:	08 95       	ret

000054c2 <_Z8cmd_peepv>:

void cmd_peep(void) {
    54c2:	8f 92       	push	r8
    54c4:	9f 92       	push	r9
    54c6:	af 92       	push	r10
    54c8:	bf 92       	push	r11
    54ca:	ef 92       	push	r14
    54cc:	0f 93       	push	r16
    54ce:	1f 93       	push	r17
    54d0:	cf 93       	push	r28
    54d2:	df 93       	push	r29
    54d4:	81 2c       	mov	r8, r1
    54d6:	91 2c       	mov	r9, r1
    54d8:	54 01       	movw	r10, r8
    54da:	e4 01       	movw	r28, r8
int i=0;

	while (i <= ENDDB) {
		if (!(i&63)) {speol(); printIntegerInBase(i, 16, 4, '0'); spb(':'); }
    54dc:	c4 01       	movw	r24, r8
    54de:	8f 73       	andi	r24, 0x3F	; 63
    54e0:	99 27       	eor	r25, r25
    54e2:	89 2b       	or	r24, r25
    54e4:	81 f4       	brne	.+32     	; 0x5506 <_Z8cmd_peepv+0x44>
    54e6:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <_Z5speolv>
    54ea:	60 e3       	ldi	r22, 0x30	; 48
    54ec:	e6 2e       	mov	r14, r22
    54ee:	04 e0       	ldi	r16, 0x04	; 4
    54f0:	10 e0       	ldi	r17, 0x00	; 0
    54f2:	20 e0       	ldi	r18, 0x00	; 0
    54f4:	30 e0       	ldi	r19, 0x00	; 0
    54f6:	40 e1       	ldi	r20, 0x10	; 16
    54f8:	c5 01       	movw	r24, r10
    54fa:	b4 01       	movw	r22, r8
    54fc:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <_Z18printIntegerInBasemhlh>
    5500:	8a e3       	ldi	r24, 0x3A	; 58
    5502:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <_Z3spbc>
		if (!(i&7)) spb(' ');
    5506:	ce 01       	movw	r24, r28
    5508:	87 70       	andi	r24, 0x07	; 7
    550a:	99 27       	eor	r25, r25
    550c:	89 2b       	or	r24, r25
    550e:	19 f4       	brne	.+6      	; 0x5516 <_Z8cmd_peepv+0x54>
    5510:	80 e2       	ldi	r24, 0x20	; 32
    5512:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <_Z3spbc>
		if (!(i&3)) spb(' ');		
    5516:	ce 01       	movw	r24, r28
    5518:	83 70       	andi	r24, 0x03	; 3
    551a:	99 27       	eor	r25, r25
    551c:	89 2b       	or	r24, r25
    551e:	19 f4       	brne	.+6      	; 0x5526 <_Z8cmd_peepv+0x64>
    5520:	80 e2       	ldi	r24, 0x20	; 32
    5522:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <_Z3spbc>
		byte c = eeread(i) & 0xff;
    5526:	ce 01       	movw	r24, r28
    5528:	bc dd       	rcall	.-1160   	; 0x50a2 <_Z6eereadi>

		//if (c == 0) spb('\\');
		if (c == 0) spb('$');
    552a:	81 11       	cpse	r24, r1
    552c:	02 c0       	rjmp	.+4      	; 0x5532 <_Z8cmd_peepv+0x70>
    552e:	84 e2       	ldi	r24, 0x24	; 36
    5530:	07 c0       	rjmp	.+14     	; 0x5540 <_Z8cmd_peepv+0x7e>
		//else if ((c == 255) || (c < 0)) spb('.');
		else if (c == 255) spb('.');
    5532:	8f 3f       	cpi	r24, 0xFF	; 255
    5534:	11 f4       	brne	.+4      	; 0x553a <_Z8cmd_peepv+0x78>
    5536:	8e e2       	ldi	r24, 0x2E	; 46
    5538:	03 c0       	rjmp	.+6      	; 0x5540 <_Z8cmd_peepv+0x7e>
		else if (c < ' ') spb('^');
    553a:	80 32       	cpi	r24, 0x20	; 32
    553c:	08 f4       	brcc	.+2      	; 0x5540 <_Z8cmd_peepv+0x7e>
    553e:	8e e5       	ldi	r24, 0x5E	; 94
		else spb(c);
    5540:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <_Z3spbc>
    5544:	8f ef       	ldi	r24, 0xFF	; 255
    5546:	88 1a       	sub	r8, r24
    5548:	98 0a       	sbc	r9, r24
    554a:	a8 0a       	sbc	r10, r24
    554c:	b8 0a       	sbc	r11, r24
}

void cmd_peep(void) {
int i=0;

	while (i <= ENDDB) {
    554e:	81 14       	cp	r8, r1
    5550:	8f e1       	ldi	r24, 0x1F	; 31
    5552:	98 06       	cpc	r9, r24
    5554:	a1 04       	cpc	r10, r1
    5556:	b1 04       	cpc	r11, r1
    5558:	09 f0       	breq	.+2      	; 0x555c <_Z8cmd_peepv+0x9a>
    555a:	bf cf       	rjmp	.-130    	; 0x54da <_Z8cmd_peepv+0x18>
		else if (c < ' ') spb('^');
		else spb(c);
		i++;
	}
	speol();
}
    555c:	df 91       	pop	r29
    555e:	cf 91       	pop	r28
    5560:	1f 91       	pop	r17
    5562:	0f 91       	pop	r16
    5564:	ef 90       	pop	r14
    5566:	bf 90       	pop	r11
    5568:	af 90       	pop	r10
    556a:	9f 90       	pop	r9
    556c:	8f 90       	pop	r8
		else if (c == 255) spb('.');
		else if (c < ' ') spb('^');
		else spb(c);
		i++;
	}
	speol();
    556e:	0c 94 3d 1f 	jmp	0x3e7a	; 0x3e7a <_Z5speolv>

00005572 <_Z7func_erv>:
}
numvar func_ar(void) { reqargs(1); return analogRead(arg1); }
numvar func_aw(void) { reqargs(2); analogWrite(arg1, arg2); return 0; }
numvar func_dr(void) { reqargs(1); return digitalRead(arg1); }
numvar func_dw(void) { reqargs(2); digitalWrite(arg1, arg2); return 0; }
numvar func_er(void) { reqargs(1); return eeread(arg1); }
    5572:	81 e0       	ldi	r24, 0x01	; 1
    5574:	0e 94 70 21 	call	0x42e0	; 0x42e0 <_Z7reqargsh>
    5578:	e0 91 44 2b 	lds	r30, 0x2B44
    557c:	f0 91 45 2b 	lds	r31, 0x2B45
    5580:	34 97       	sbiw	r30, 0x04	; 4
    5582:	80 81       	ld	r24, Z
    5584:	91 81       	ldd	r25, Z+1	; 0x01
    5586:	8d dd       	rcall	.-1254   	; 0x50a2 <_Z6eereadi>
    5588:	68 2f       	mov	r22, r24
    558a:	70 e0       	ldi	r23, 0x00	; 0
    558c:	80 e0       	ldi	r24, 0x00	; 0
    558e:	90 e0       	ldi	r25, 0x00	; 0
    5590:	08 95       	ret

00005592 <_Z10nukeeepromv>:
	return value;
}
#endif


void nukeeeprom(void) {
    5592:	cf 93       	push	r28
    5594:	df 93       	push	r29
	initTaskList();		// stop any currently running background tasks
    5596:	d0 dc       	rcall	.-1632   	; 0x4f38 <_Z12initTaskListv>
	int addr = STARTDB;
    5598:	c0 e0       	ldi	r28, 0x00	; 0
    559a:	d0 e0       	ldi	r29, 0x00	; 0
	while (addr <= ENDDB) {
		if (eeread(addr) != EMPTY) eewrite(addr, EMPTY);
    559c:	ce 01       	movw	r24, r28
    559e:	81 dd       	rcall	.-1278   	; 0x50a2 <_Z6eereadi>
    55a0:	8f 3f       	cpi	r24, 0xFF	; 255
    55a2:	19 f0       	breq	.+6      	; 0x55aa <_Z10nukeeepromv+0x18>
    55a4:	6f ef       	ldi	r22, 0xFF	; 255
    55a6:	ce 01       	movw	r24, r28
    55a8:	3d dd       	rcall	.-1414   	; 0x5024 <_Z7eewriteih>
		addr++;
    55aa:	21 96       	adiw	r28, 0x01	; 1


void nukeeeprom(void) {
	initTaskList();		// stop any currently running background tasks
	int addr = STARTDB;
	while (addr <= ENDDB) {
    55ac:	c1 15       	cp	r28, r1
    55ae:	8f e1       	ldi	r24, 0x1F	; 31
    55b0:	d8 07       	cpc	r29, r24
    55b2:	a1 f7       	brne	.-24     	; 0x559c <_Z10nukeeepromv+0xa>
		if (eeread(addr) != EMPTY) eewrite(addr, EMPTY);
		addr++;
	}
}
    55b4:	df 91       	pop	r29
    55b6:	cf 91       	pop	r28
    55b8:	08 95       	ret

000055ba <_Z6primecv>:
//
//	primec(): 
//		fetch the current character from the input stream
//		set inchar to the character or zero on EOF
//
void primec(void) {
    55ba:	0f 93       	push	r16
	switch (fetchtype) {
    55bc:	20 91 6e 2b 	lds	r18, 0x2B6E
    55c0:	80 91 6a 2b 	lds	r24, 0x2B6A
    55c4:	90 91 6b 2b 	lds	r25, 0x2B6B
    55c8:	22 30       	cpi	r18, 0x02	; 2
    55ca:	39 f0       	breq	.+14     	; 0x55da <_Z6primecv+0x20>
    55cc:	23 30       	cpi	r18, 0x03	; 3
    55ce:	41 f0       	breq	.+16     	; 0x55e0 <_Z6primecv+0x26>
    55d0:	21 30       	cpi	r18, 0x01	; 1
    55d2:	69 f4       	brne	.+26     	; 0x55ee <_Z6primecv+0x34>
		case SCRIPT_RAM:		inchar = *(char *) fetchptr;		break;
    55d4:	fc 01       	movw	r30, r24
    55d6:	80 81       	ld	r24, Z
    55d8:	04 c0       	rjmp	.+8      	; 0x55e2 <_Z6primecv+0x28>
		case SCRIPT_PROGMEM:	inchar = pgm_read_byte(fetchptr); 	break;
    55da:	fc 01       	movw	r30, r24
    55dc:	84 91       	lpm	r24, Z
    55de:	01 c0       	rjmp	.+2      	; 0x55e2 <_Z6primecv+0x28>
		case SCRIPT_EEPROM:		inchar = eeread((int) fetchptr);	break;
    55e0:	60 dd       	rcall	.-1344   	; 0x50a2 <_Z6eereadi>
    55e2:	8a bd       	out	0x2a, r24	; 42

		default:				unexpected(M_oops);
	}

#ifdef PARSER_TRACE
	if (trace) {
    55e4:	80 91 47 2b 	lds	r24, 0x2B47
    55e8:	88 23       	and	r24, r24
    55ea:	f9 f0       	breq	.+62     	; 0x562a <_Z6primecv+0x70>
    55ec:	03 c0       	rjmp	.+6      	; 0x55f4 <_Z6primecv+0x3a>

#if defined(SDFILE) || defined(UNIX_BUILD)
		case SCRIPT_FILE:		inchar = scriptread();				break;
#endif

		default:				unexpected(M_oops);
    55ee:	8a e1       	ldi	r24, 0x1A	; 26
    55f0:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <_Z10unexpectedh>
	}

#ifdef PARSER_TRACE
	if (trace) {
		spb('<'); 
    55f4:	8c e3       	ldi	r24, 0x3C	; 60
    55f6:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <_Z3spbc>
		if (inchar >= 0x20) spb(inchar);
    55fa:	8a b5       	in	r24, 0x2a	; 42
    55fc:	80 32       	cpi	r24, 0x20	; 32
    55fe:	20 f0       	brcs	.+8      	; 0x5608 <_Z6primecv+0x4e>
    5600:	8a b5       	in	r24, 0x2a	; 42
    5602:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <_Z3spbc>
    5606:	0d c0       	rjmp	.+26     	; 0x5622 <_Z6primecv+0x68>
		else { spb('\\'); printInteger(inchar, 0, ' '); }
    5608:	8c e5       	ldi	r24, 0x5C	; 92
    560a:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <_Z3spbc>
    560e:	6a b5       	in	r22, 0x2a	; 42
    5610:	70 e0       	ldi	r23, 0x00	; 0
    5612:	80 e0       	ldi	r24, 0x00	; 0
    5614:	90 e0       	ldi	r25, 0x00	; 0
    5616:	00 e2       	ldi	r16, 0x20	; 32
    5618:	20 e0       	ldi	r18, 0x00	; 0
    561a:	30 e0       	ldi	r19, 0x00	; 0
    561c:	a9 01       	movw	r20, r18
    561e:	0e 94 0b 20 	call	0x4016	; 0x4016 <_Z12printIntegerllh>
		spb('>');
    5622:	8e e3       	ldi	r24, 0x3E	; 62
	}
#endif

}
    5624:	0f 91       	pop	r16
#ifdef PARSER_TRACE
	if (trace) {
		spb('<'); 
		if (inchar >= 0x20) spb(inchar);
		else { spb('\\'); printInteger(inchar, 0, ' '); }
		spb('>');
    5626:	0c 94 3b 1e 	jmp	0x3c76	; 0x3c76 <_Z3spbc>
	}
#endif

}
    562a:	0f 91       	pop	r16
    562c:	08 95       	ret

0000562e <_Z14initparsepointhlPc>:
	}
#endif
}


void initparsepoint(byte scripttype, numvar scriptaddress, char *scriptname) {
    562e:	cf 92       	push	r12
    5630:	df 92       	push	r13
    5632:	ef 92       	push	r14
    5634:	ff 92       	push	r15
    5636:	1f 93       	push	r17
    5638:	cf 93       	push	r28
    563a:	df 93       	push	r29
    563c:	18 2f       	mov	r17, r24
    563e:	6a 01       	movw	r12, r20
    5640:	7b 01       	movw	r14, r22
    5642:	e9 01       	movw	r28, r18

#ifdef PARSER_TRACE
	if (trace) {
    5644:	80 91 47 2b 	lds	r24, 0x2B47
    5648:	88 23       	and	r24, r24
    564a:	e9 f0       	breq	.+58     	; 0x5686 <_Z14initparsepointhlPc+0x58>
		speol();
    564c:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <_Z5speolv>
		sp("init:");printHex(scripttype); spb(' '); printHex(scriptaddress); 
    5650:	86 e9       	ldi	r24, 0x96	; 150
    5652:	9c e0       	ldi	r25, 0x0C	; 12
    5654:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <_Z2spPKc>
    5658:	61 2f       	mov	r22, r17
    565a:	70 e0       	ldi	r23, 0x00	; 0
    565c:	80 e0       	ldi	r24, 0x00	; 0
    565e:	90 e0       	ldi	r25, 0x00	; 0
    5660:	0e 94 78 20 	call	0x40f0	; 0x40f0 <_Z8printHexm>
    5664:	80 e2       	ldi	r24, 0x20	; 32
    5666:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <_Z3spbc>
    566a:	c7 01       	movw	r24, r14
    566c:	b6 01       	movw	r22, r12
    566e:	0e 94 78 20 	call	0x40f0	; 0x40f0 <_Z8printHexm>
		if (scriptname) { spb(' '); sp(scriptname); }
    5672:	20 97       	sbiw	r28, 0x00	; 0
    5674:	31 f0       	breq	.+12     	; 0x5682 <_Z14initparsepointhlPc+0x54>
    5676:	80 e2       	ldi	r24, 0x20	; 32
    5678:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <_Z3spbc>
    567c:	ce 01       	movw	r24, r28
    567e:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <_Z2spPKc>
		speol();
    5682:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <_Z5speolv>
	}
#endif

	fetchtype = scripttype;
    5686:	10 93 6e 2b 	sts	0x2B6E, r17
	fetchptr = scriptaddress;
    568a:	c0 92 6a 2b 	sts	0x2B6A, r12
    568e:	d0 92 6b 2b 	sts	0x2B6B, r13
    5692:	e0 92 6c 2b 	sts	0x2B6C, r14
    5696:	f0 92 6d 2b 	sts	0x2B6D, r15
	
	// if we're restoring to idle, we're done
	if (fetchtype == SCRIPT_NONE) return;
    569a:	11 23       	and	r17, r17
    569c:	41 f0       	breq	.+16     	; 0x56ae <_Z14initparsepointhlPc+0x80>
#endif
	}
#endif

	primec();	// re-fetch inchar
}
    569e:	df 91       	pop	r29
    56a0:	cf 91       	pop	r28
    56a2:	1f 91       	pop	r17
    56a4:	ff 90       	pop	r15
    56a6:	ef 90       	pop	r14
    56a8:	df 90       	pop	r13
    56aa:	cf 90       	pop	r12
		if (!scriptopen(scriptname, scriptaddress, O_READ)) unexpected(M_oops);		// TODO: error message
#endif
	}
#endif

	primec();	// re-fetch inchar
    56ac:	86 cf       	rjmp	.-244    	; 0x55ba <_Z6primecv>
}
    56ae:	df 91       	pop	r29
    56b0:	cf 91       	pop	r28
    56b2:	1f 91       	pop	r17
    56b4:	ff 90       	pop	r15
    56b6:	ef 90       	pop	r14
    56b8:	df 90       	pop	r13
    56ba:	cf 90       	pop	r12
    56bc:	08 95       	ret

000056be <_Z18returntoparsepointP10parsepointh>:

}

#else

void returntoparsepoint(parsepoint *p, byte returntoparent) {
    56be:	e0 91 44 2b 	lds	r30, 0x2B44
    56c2:	f0 91 45 2b 	lds	r31, 0x2B45
	// restore parse type and location; for script files, pass name from string pool
	initparsepoint(p->fetchtype, p->fetchptr, returntoparent ? callername : calleename);
    56c6:	66 23       	and	r22, r22
    56c8:	71 f0       	breq	.+28     	; 0x56e6 <_Z18returntoparsepointP10parsepointh+0x28>
    56ca:	40 85       	ldd	r20, Z+8	; 0x08
    56cc:	51 85       	ldd	r21, Z+9	; 0x09
    56ce:	62 85       	ldd	r22, Z+10	; 0x0a
    56d0:	73 85       	ldd	r23, Z+11	; 0x0b
    56d2:	41 15       	cp	r20, r1
    56d4:	51 05       	cpc	r21, r1
    56d6:	61 05       	cpc	r22, r1
    56d8:	71 05       	cpc	r23, r1
    56da:	41 f0       	breq	.+16     	; 0x56ec <_Z18returntoparsepointP10parsepointh+0x2e>
    56dc:	fa 01       	movw	r30, r20
    56de:	34 96       	adiw	r30, 0x04	; 4
    56e0:	20 81       	ld	r18, Z
    56e2:	31 81       	ldd	r19, Z+1	; 0x01
    56e4:	05 c0       	rjmp	.+10     	; 0x56f0 <_Z18returntoparsepointP10parsepointh+0x32>
    56e6:	24 81       	ldd	r18, Z+4	; 0x04
    56e8:	35 81       	ldd	r19, Z+5	; 0x05
    56ea:	02 c0       	rjmp	.+4      	; 0x56f0 <_Z18returntoparsepointP10parsepointh+0x32>
    56ec:	20 e0       	ldi	r18, 0x00	; 0
    56ee:	30 e0       	ldi	r19, 0x00	; 0
    56f0:	fc 01       	movw	r30, r24
    56f2:	40 81       	ld	r20, Z
    56f4:	51 81       	ldd	r21, Z+1	; 0x01
    56f6:	62 81       	ldd	r22, Z+2	; 0x02
    56f8:	73 81       	ldd	r23, Z+3	; 0x03
    56fa:	84 81       	ldd	r24, Z+4	; 0x04
    56fc:	98 cf       	rjmp	.-208    	; 0x562e <_Z14initparsepointhlPc>

000056fe <_Z6fetchcv>:
//	fetchc(): 
//		advance input to next character of input stream
//		and set inchar to the character found there
//
void fetchc(void) {
	++fetchptr;
    56fe:	80 91 6a 2b 	lds	r24, 0x2B6A
    5702:	90 91 6b 2b 	lds	r25, 0x2B6B
    5706:	a0 91 6c 2b 	lds	r26, 0x2B6C
    570a:	b0 91 6d 2b 	lds	r27, 0x2B6D
    570e:	01 96       	adiw	r24, 0x01	; 1
    5710:	a1 1d       	adc	r26, r1
    5712:	b1 1d       	adc	r27, r1
    5714:	80 93 6a 2b 	sts	0x2B6A, r24
    5718:	90 93 6b 2b 	sts	0x2B6B, r25
    571c:	a0 93 6c 2b 	sts	0x2B6C, r26
    5720:	b0 93 6d 2b 	sts	0x2B6D, r27

#ifdef PARSER_TRACE
	if (trace) {
    5724:	80 91 47 2b 	lds	r24, 0x2B47
    5728:	88 23       	and	r24, r24
    572a:	81 f0       	breq	.+32     	; 0x574c <_Z6fetchcv+0x4e>
		spb('[');
    572c:	8b e5       	ldi	r24, 0x5B	; 91
    572e:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <_Z3spbc>
		printHex(fetchptr);
    5732:	60 91 6a 2b 	lds	r22, 0x2B6A
    5736:	70 91 6b 2b 	lds	r23, 0x2B6B
    573a:	80 91 6c 2b 	lds	r24, 0x2B6C
    573e:	90 91 6d 2b 	lds	r25, 0x2B6D
    5742:	0e 94 78 20 	call	0x40f0	; 0x40f0 <_Z8printHexm>
		spb(']');
    5746:	8d e5       	ldi	r24, 0x5D	; 93
    5748:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <_Z3spbc>
	}
#endif

	primec();
    574c:	36 cf       	rjmp	.-404    	; 0x55ba <_Z6primecv>

0000574e <_Z8skpwhitev>:

// Token handlers to parse the various token types

// Skip to next nonblank and return the symbol therefrom
void skpwhite(void) {
	while (chartype(inchar) == 0) fetchc();
    574e:	8a b5       	in	r24, 0x2a	; 42
    5750:	0e 94 4b 1d 	call	0x3a96	; 0x3a96 <_Z8chartypeh>
    5754:	81 11       	cpse	r24, r1
    5756:	02 c0       	rjmp	.+4      	; 0x575c <_Z8skpwhitev+0xe>
    5758:	d2 df       	rcall	.-92     	; 0x56fe <_Z6fetchcv>
    575a:	f9 cf       	rjmp	.-14     	; 0x574e <_Z8skpwhitev>
	getsym();
    575c:	0c 94 47 20 	jmp	0x408e	; 0x408e <_Z6getsymv>

00005760 <_Z11skipcommentv>:
}

// Comment: Skip from // to end of line, return next symbol
void skipcomment(void) {
	while (sym == s_comment) {
    5760:	8e b3       	in	r24, 0x1e	; 30
    5762:	86 3a       	cpi	r24, 0xA6	; 166
    5764:	51 f4       	brne	.+20     	; 0x577a <_Z11skipcommentv+0x1a>
		while (inchar && (inchar != '\n') && (inchar != '\r')) fetchc();
    5766:	8a b5       	in	r24, 0x2a	; 42
    5768:	88 23       	and	r24, r24
    576a:	41 f0       	breq	.+16     	; 0x577c <_Z11skipcommentv+0x1c>
    576c:	8a b5       	in	r24, 0x2a	; 42
    576e:	8a 30       	cpi	r24, 0x0A	; 10
    5770:	29 f0       	breq	.+10     	; 0x577c <_Z11skipcommentv+0x1c>
    5772:	8a b5       	in	r24, 0x2a	; 42
    5774:	8d 30       	cpi	r24, 0x0D	; 13
    5776:	59 f4       	brne	.+22     	; 0x578e <_Z11skipcommentv+0x2e>
    5778:	01 c0       	rjmp	.+2      	; 0x577c <_Z11skipcommentv+0x1c>
    577a:	08 95       	ret
		if (!inchar) {
    577c:	8a b5       	in	r24, 0x2a	; 42
    577e:	81 11       	cpse	r24, r1
    5780:	02 c0       	rjmp	.+4      	; 0x5786 <_Z11skipcommentv+0x26>
			sym = s_eof;
    5782:	1e ba       	out	0x1e, r1	; 30
			return;
    5784:	08 95       	ret
		}
		else {
			fetchc();	// eat \r or \n
    5786:	bb df       	rcall	.-138    	; 0x56fe <_Z6fetchcv>
			getsym();	// and tee up what's next
    5788:	0e 94 47 20 	call	0x408e	; 0x408e <_Z6getsymv>
    578c:	e9 cf       	rjmp	.-46     	; 0x5760 <_Z11skipcommentv>
}

// Comment: Skip from // to end of line, return next symbol
void skipcomment(void) {
	while (sym == s_comment) {
		while (inchar && (inchar != '\n') && (inchar != '\r')) fetchc();
    578e:	b7 df       	rcall	.-146    	; 0x56fe <_Z6fetchcv>
    5790:	ea cf       	rjmp	.-44     	; 0x5766 <_Z11skipcommentv+0x6>

00005792 <_Z8chrconstv>:
#endif
}

// Parse a character constant of the form 'c'
void chrconst(void) {
	fetchc();
    5792:	b5 df       	rcall	.-150    	; 0x56fe <_Z6fetchcv>
	symval = inchar;
    5794:	8a b5       	in	r24, 0x2a	; 42
    5796:	90 e0       	ldi	r25, 0x00	; 0
    5798:	a0 e0       	ldi	r26, 0x00	; 0
    579a:	b0 e0       	ldi	r27, 0x00	; 0
    579c:	80 93 66 2b 	sts	0x2B66, r24
    57a0:	90 93 67 2b 	sts	0x2B67, r25
    57a4:	a0 93 68 2b 	sts	0x2B68, r26
    57a8:	b0 93 69 2b 	sts	0x2B69, r27
	sym = s_nval;
    57ac:	81 e8       	ldi	r24, 0x81	; 129
    57ae:	8e bb       	out	0x1e, r24	; 30
	fetchc();
    57b0:	a6 df       	rcall	.-180    	; 0x56fe <_Z6fetchcv>
	if (inchar != '\'') expectedchar('\'');
    57b2:	8a b5       	in	r24, 0x2a	; 42
    57b4:	87 32       	cpi	r24, 0x27	; 39
    57b6:	19 f0       	breq	.+6      	; 0x57be <_Z8chrconstv+0x2c>
    57b8:	87 e2       	ldi	r24, 0x27	; 39
    57ba:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <_Z12expectedcharh>
	fetchc();		// consume "
    57be:	9f cf       	rjmp	.-194    	; 0x56fe <_Z6fetchcv>

000057c0 <_Z7parseopv>:
	s_decr, s_define, s_ge, s_shiftright, s_le, s_shiftleft, s_comment
};

// Parse a one- or two-char operator like >, >=, >>, ...	
void parseop(void) {
	sym = inchar;		// think horse not zebra
    57c0:	8a b5       	in	r24, 0x2a	; 42
    57c2:	8e bb       	out	0x1e, r24	; 30
	fetchc();			// inchar has second char of token or ??
    57c4:	9c df       	rcall	.-200    	; 0x56fe <_Z6fetchcv>

	const prog_char *tk = twochartokens;
	byte index = 0;
    57c6:	40 e0       	ldi	r20, 0x00	; 0
// Parse a one- or two-char operator like >, >=, >>, ...	
void parseop(void) {
	sym = inchar;		// think horse not zebra
	fetchc();			// inchar has second char of token or ??

	const prog_char *tk = twochartokens;
    57c8:	87 ef       	ldi	r24, 0xF7	; 247
    57ca:	93 e0       	ldi	r25, 0x03	; 3
	byte index = 0;
	for (;;) {
		byte c1 = pgm_read_byte(tk++);
    57cc:	fc 01       	movw	r30, r24
    57ce:	54 91       	lpm	r21, Z
		if (!c1) return;
    57d0:	55 23       	and	r21, r21
    57d2:	b1 f0       	breq	.+44     	; 0x5800 <_Z7parseopv+0x40>
    57d4:	02 96       	adiw	r24, 0x02	; 2
    57d6:	31 96       	adiw	r30, 0x01	; 1
		byte c2 = pgm_read_byte(tk++); 
    57d8:	24 91       	lpm	r18, Z

		if ((sym == c1) && (inchar == c2)) {
    57da:	3e b3       	in	r19, 0x1e	; 30
    57dc:	35 13       	cpse	r19, r21
    57de:	0e c0       	rjmp	.+28     	; 0x57fc <_Z7parseopv+0x3c>
    57e0:	3a b5       	in	r19, 0x2a	; 42
    57e2:	32 13       	cpse	r19, r18
    57e4:	0b c0       	rjmp	.+22     	; 0x57fc <_Z7parseopv+0x3c>
			sym = (byte) pgm_read_byte(twocharsyms + index);
    57e6:	e4 2f       	mov	r30, r20
    57e8:	f0 e0       	ldi	r31, 0x00	; 0
    57ea:	e5 51       	subi	r30, 0x15	; 21
    57ec:	fc 4f       	sbci	r31, 0xFC	; 252
    57ee:	e4 91       	lpm	r30, Z
    57f0:	ee bb       	out	0x1e, r30	; 30
			fetchc();
    57f2:	85 df       	rcall	.-246    	; 0x56fe <_Z6fetchcv>
			if (sym == s_comment) skipcomment();
    57f4:	8e b3       	in	r24, 0x1e	; 30
    57f6:	86 3a       	cpi	r24, 0xA6	; 166
    57f8:	19 f4       	brne	.+6      	; 0x5800 <_Z7parseopv+0x40>
    57fa:	b2 cf       	rjmp	.-156    	; 0x5760 <_Z11skipcommentv>
			return;
		}
		index++;
    57fc:	4f 5f       	subi	r20, 0xFF	; 255
	}
    57fe:	e6 cf       	rjmp	.-52     	; 0x57cc <_Z7parseopv+0xc>
    5800:	08 95       	ret

00005802 <_Z6litsymv>:
}

//	One-char literal symbols, like '*' and '+'.
void litsym(void) {
	sym = inchar;
    5802:	8a b5       	in	r24, 0x2a	; 42
    5804:	8e bb       	out	0x1e, r24	; 30
	fetchc();
    5806:	7b cf       	rjmp	.-266    	; 0x56fe <_Z6fetchcv>

00005808 <_Z8parsenumv>:
void eof(void) {
	sym = s_eof;
}

// Parse a numeric constant from the input stream
void parsenum(void) {
    5808:	cf 93       	push	r28
byte radix;
	radix = 10;
	symval = inchar - '0';
    580a:	8a b5       	in	r24, 0x2a	; 42
    580c:	90 e0       	ldi	r25, 0x00	; 0
    580e:	c0 97       	sbiw	r24, 0x30	; 48
    5810:	aa 27       	eor	r26, r26
    5812:	97 fd       	sbrc	r25, 7
    5814:	a0 95       	com	r26
    5816:	ba 2f       	mov	r27, r26
    5818:	80 93 66 2b 	sts	0x2B66, r24
    581c:	90 93 67 2b 	sts	0x2B67, r25
    5820:	a0 93 68 2b 	sts	0x2B68, r26
    5824:	b0 93 69 2b 	sts	0x2B69, r27
}

// Parse a numeric constant from the input stream
void parsenum(void) {
byte radix;
	radix = 10;
    5828:	ca e0       	ldi	r28, 0x0A	; 10
	symval = inchar - '0';
	for (;;) {
		fetchc();
    582a:	69 df       	rcall	.-302    	; 0x56fe <_Z6fetchcv>
		inchar = tolower(inchar);
    582c:	8a b5       	in	r24, 0x2a	; 42
    582e:	90 e0       	ldi	r25, 0x00	; 0
    5830:	0e 94 fa b4 	call	0x169f4	; 0x169f4 <tolower>
    5834:	8a bd       	out	0x2a, r24	; 42
		if ((radix == 10) && (symval == 0)) {
    5836:	ca 30       	cpi	r28, 0x0A	; 10
    5838:	b1 f4       	brne	.+44     	; 0x5866 <_Z8parsenumv+0x5e>
    583a:	80 91 66 2b 	lds	r24, 0x2B66
    583e:	90 91 67 2b 	lds	r25, 0x2B67
    5842:	a0 91 68 2b 	lds	r26, 0x2B68
    5846:	b0 91 69 2b 	lds	r27, 0x2B69
    584a:	89 2b       	or	r24, r25
    584c:	8a 2b       	or	r24, r26
    584e:	8b 2b       	or	r24, r27
    5850:	51 f4       	brne	.+20     	; 0x5866 <_Z8parsenumv+0x5e>
			if (inchar == 'x') { radix = 16; continue; }
    5852:	8a b5       	in	r24, 0x2a	; 42
    5854:	88 37       	cpi	r24, 0x78	; 120
    5856:	11 f4       	brne	.+4      	; 0x585c <_Z8parsenumv+0x54>
    5858:	c0 e1       	ldi	r28, 0x10	; 16
    585a:	e7 cf       	rjmp	.-50     	; 0x582a <_Z8parsenumv+0x22>
			else if (inchar == 'b') { radix = 2; continue; }
    585c:	8a b5       	in	r24, 0x2a	; 42
    585e:	82 36       	cpi	r24, 0x62	; 98
    5860:	11 f4       	brne	.+4      	; 0x5866 <_Z8parsenumv+0x5e>
    5862:	c2 e0       	ldi	r28, 0x02	; 2
    5864:	e2 cf       	rjmp	.-60     	; 0x582a <_Z8parsenumv+0x22>
		}
		if (isdigit(inchar)) {
    5866:	8a b5       	in	r24, 0x2a	; 42
    5868:	90 e0       	ldi	r25, 0x00	; 0
    586a:	c0 97       	sbiw	r24, 0x30	; 48
    586c:	0a 97       	sbiw	r24, 0x0a	; 10
    586e:	20 f5       	brcc	.+72     	; 0x58b8 <_Z8parsenumv+0xb0>
			inchar = inchar - '0';
    5870:	8a b5       	in	r24, 0x2a	; 42
    5872:	80 53       	subi	r24, 0x30	; 48
    5874:	8a bd       	out	0x2a, r24	; 42
			if (inchar >= radix) break;
    5876:	8a b5       	in	r24, 0x2a	; 42
    5878:	8c 17       	cp	r24, r28
    587a:	20 f0       	brcs	.+8      	; 0x5884 <_Z8parsenumv+0x7c>
				symval = (symval*radix) + inchar - 'a' + 10;
			else break;
		}
		else break;
	}
	sym = s_nval;
    587c:	81 e8       	ldi	r24, 0x81	; 129
    587e:	8e bb       	out	0x1e, r24	; 30
}
    5880:	cf 91       	pop	r28
    5882:	08 95       	ret
			else if (inchar == 'b') { radix = 2; continue; }
		}
		if (isdigit(inchar)) {
			inchar = inchar - '0';
			if (inchar >= radix) break;
			symval = (symval*radix) + inchar;
    5884:	ea b5       	in	r30, 0x2a	; 42
    5886:	20 91 66 2b 	lds	r18, 0x2B66
    588a:	30 91 67 2b 	lds	r19, 0x2B67
    588e:	40 91 68 2b 	lds	r20, 0x2B68
    5892:	50 91 69 2b 	lds	r21, 0x2B69
    5896:	ac 2f       	mov	r26, r28
    5898:	b0 e0       	ldi	r27, 0x00	; 0
    589a:	0e 94 8c b2 	call	0x16518	; 0x16518 <__muluhisi3>
    589e:	6e 0f       	add	r22, r30
    58a0:	71 1d       	adc	r23, r1
    58a2:	81 1d       	adc	r24, r1
    58a4:	91 1d       	adc	r25, r1
    58a6:	60 93 66 2b 	sts	0x2B66, r22
    58aa:	70 93 67 2b 	sts	0x2B67, r23
    58ae:	80 93 68 2b 	sts	0x2B68, r24
    58b2:	90 93 69 2b 	sts	0x2B69, r25
    58b6:	b9 cf       	rjmp	.-142    	; 0x582a <_Z8parsenumv+0x22>
		}
		else if (radix == 16) {
    58b8:	c0 31       	cpi	r28, 0x10	; 16
    58ba:	01 f7       	brne	.-64     	; 0x587c <_Z8parsenumv+0x74>
			if ((inchar >= 'a') && (inchar <= 'f'))
    58bc:	8a b5       	in	r24, 0x2a	; 42
    58be:	81 36       	cpi	r24, 0x61	; 97
    58c0:	e8 f2       	brcs	.-70     	; 0x587c <_Z8parsenumv+0x74>
    58c2:	8a b5       	in	r24, 0x2a	; 42
    58c4:	87 36       	cpi	r24, 0x67	; 103
    58c6:	d0 f6       	brcc	.-76     	; 0x587c <_Z8parsenumv+0x74>
				symval = (symval*radix) + inchar - 'a' + 10;
    58c8:	2a b5       	in	r18, 0x2a	; 42
    58ca:	80 91 66 2b 	lds	r24, 0x2B66
    58ce:	90 91 67 2b 	lds	r25, 0x2B67
    58d2:	a0 91 68 2b 	lds	r26, 0x2B68
    58d6:	b0 91 69 2b 	lds	r27, 0x2B69
    58da:	74 e0       	ldi	r23, 0x04	; 4
    58dc:	88 0f       	add	r24, r24
    58de:	99 1f       	adc	r25, r25
    58e0:	aa 1f       	adc	r26, r26
    58e2:	bb 1f       	adc	r27, r27
    58e4:	7a 95       	dec	r23
    58e6:	d1 f7       	brne	.-12     	; 0x58dc <_Z8parsenumv+0xd4>
    58e8:	82 0f       	add	r24, r18
    58ea:	91 1d       	adc	r25, r1
    58ec:	a1 1d       	adc	r26, r1
    58ee:	b1 1d       	adc	r27, r1
    58f0:	87 55       	subi	r24, 0x57	; 87
    58f2:	91 09       	sbc	r25, r1
    58f4:	a1 09       	sbc	r26, r1
    58f6:	b1 09       	sbc	r27, r1
    58f8:	80 93 66 2b 	sts	0x2B66, r24
    58fc:	90 93 67 2b 	sts	0x2B67, r25
    5900:	a0 93 68 2b 	sts	0x2B68, r26
    5904:	b0 93 69 2b 	sts	0x2B69, r27
    5908:	90 cf       	rjmp	.-224    	; 0x582a <_Z8parsenumv+0x22>

0000590a <_Z7parseidv>:
	sym = s_nval;
}


// Parse an identifier from the input stream
void parseid(void) {
    590a:	cf 92       	push	r12
    590c:	df 92       	push	r13
    590e:	ff 92       	push	r15
    5910:	0f 93       	push	r16
    5912:	1f 93       	push	r17
    5914:	cf 93       	push	r28
    5916:	df 93       	push	r29
    5918:	1f 92       	push	r1
    591a:	cd b7       	in	r28, 0x3d	; 61
    591c:	de b7       	in	r29, 0x3e	; 62
	char c = *idbuf = tolower(inchar);
    591e:	8a b5       	in	r24, 0x2a	; 42
    5920:	90 e0       	ldi	r25, 0x00	; 0
    5922:	0e 94 fa b4 	call	0x169f4	; 0x169f4 <tolower>
    5926:	6c 01       	movw	r12, r24
    5928:	f8 2e       	mov	r15, r24
    592a:	80 93 48 2b 	sts	0x2B48, r24
	byte idbuflen = 1;
	fetchc();
    592e:	e7 de       	rcall	.-562    	; 0x56fe <_Z6fetchcv>
    5930:	09 e4       	ldi	r16, 0x49	; 73
    5932:	1b e2       	ldi	r17, 0x2B	; 43


// Parse an identifier from the input stream
void parseid(void) {
	char c = *idbuf = tolower(inchar);
	byte idbuflen = 1;
    5934:	21 e0       	ldi	r18, 0x01	; 1
	fetchc();
	while (isalnum(inchar) || (inchar == '.') || (inchar == '_')) {
    5936:	8a b5       	in	r24, 0x2a	; 42
    5938:	90 e0       	ldi	r25, 0x00	; 0
    593a:	29 83       	std	Y+1, r18	; 0x01
    593c:	0e 94 cb b4 	call	0x16996	; 0x16996 <isalnum>
    5940:	29 81       	ldd	r18, Y+1	; 0x01
    5942:	89 2b       	or	r24, r25
    5944:	31 f4       	brne	.+12     	; 0x5952 <_Z7parseidv+0x48>
    5946:	8a b5       	in	r24, 0x2a	; 42
    5948:	8e 32       	cpi	r24, 0x2E	; 46
    594a:	19 f0       	breq	.+6      	; 0x5952 <_Z7parseidv+0x48>
    594c:	8a b5       	in	r24, 0x2a	; 42
    594e:	8f 35       	cpi	r24, 0x5F	; 95
    5950:	81 f4       	brne	.+32     	; 0x5972 <_Z7parseidv+0x68>
		if (idbuflen >= IDLEN) overflow(M_id);
    5952:	28 31       	cpi	r18, 0x18	; 24
    5954:	11 f4       	brne	.+4      	; 0x595a <_Z7parseidv+0x50>
    5956:	87 e1       	ldi	r24, 0x17	; 23
    5958:	23 d8       	rcall	.-4026   	; 0x49a0 <_Z8overflowh>
		idbuf[idbuflen++] = tolower(inchar);
    595a:	2f 5f       	subi	r18, 0xFF	; 255
    595c:	8a b5       	in	r24, 0x2a	; 42
    595e:	90 e0       	ldi	r25, 0x00	; 0
    5960:	29 83       	std	Y+1, r18	; 0x01
    5962:	0e 94 fa b4 	call	0x169f4	; 0x169f4 <tolower>
    5966:	f8 01       	movw	r30, r16
    5968:	81 93       	st	Z+, r24
    596a:	8f 01       	movw	r16, r30
		fetchc();
    596c:	c8 de       	rcall	.-624    	; 0x56fe <_Z6fetchcv>
    596e:	29 81       	ldd	r18, Y+1	; 0x01
    5970:	e2 cf       	rjmp	.-60     	; 0x5936 <_Z7parseidv+0x2c>
	}
	idbuf[idbuflen] = 0;
    5972:	e2 2f       	mov	r30, r18
    5974:	f0 e0       	ldi	r31, 0x00	; 0
    5976:	e8 5b       	subi	r30, 0xB8	; 184
    5978:	f4 4d       	sbci	r31, 0xD4	; 212
    597a:	10 82       	st	Z, r1

	// do we have a one-char alpha nvar identifier?
	if ((idbuflen == 1) && isalpha(c)) {
    597c:	21 30       	cpi	r18, 0x01	; 1
    597e:	81 f4       	brne	.+32     	; 0x59a0 <_Z7parseidv+0x96>
    5980:	dd 24       	eor	r13, r13
    5982:	c6 01       	movw	r24, r12
    5984:	0e 94 d8 b4 	call	0x169b0	; 0x169b0 <isalpha>
    5988:	89 2b       	or	r24, r25
    598a:	61 f0       	breq	.+24     	; 0x59a4 <_Z7parseidv+0x9a>
		sym = s_nvar;
    598c:	83 e8       	ldi	r24, 0x83	; 131
    598e:	8e bb       	out	0x1e, r24	; 30
		symval = c - 'a';
    5990:	c6 01       	movw	r24, r12
    5992:	81 56       	subi	r24, 0x61	; 97
    5994:	91 09       	sbc	r25, r1
    5996:	aa 27       	eor	r26, r26
    5998:	97 fd       	sbrc	r25, 7
    599a:	a0 95       	com	r26
    599c:	ba 2f       	mov	r27, r26
    599e:	25 c0       	rjmp	.+74     	; 0x59ea <_Z7parseidv+0xe0>
	}
	
	// a pin identifier 'a'digit* or 'd'digit*?
	else if ((idbuflen <= 3) &&
    59a0:	24 30       	cpi	r18, 0x04	; 4
    59a2:	60 f5       	brcc	.+88     	; 0x59fc <_Z7parseidv+0xf2>
    59a4:	f1 e6       	ldi	r31, 0x61	; 97
    59a6:	ff 16       	cp	r15, r31
    59a8:	19 f0       	breq	.+6      	; 0x59b0 <_Z7parseidv+0xa6>
		((c == 'a') || (c == 'd')) && 
    59aa:	84 e6       	ldi	r24, 0x64	; 100
    59ac:	f8 12       	cpse	r15, r24
    59ae:	26 c0       	rjmp	.+76     	; 0x59fc <_Z7parseidv+0xf2>
		isdigit(idbuf[1]) && (
    59b0:	80 91 49 2b 	lds	r24, 0x2B49
    59b4:	90 e0       	ldi	r25, 0x00	; 0
    59b6:	c0 97       	sbiw	r24, 0x30	; 48
		symval = c - 'a';
	}
	
	// a pin identifier 'a'digit* or 'd'digit*?
	else if ((idbuflen <= 3) &&
		((c == 'a') || (c == 'd')) && 
    59b8:	0a 97       	sbiw	r24, 0x0a	; 10
    59ba:	00 f5       	brcc	.+64     	; 0x59fc <_Z7parseidv+0xf2>
		isdigit(idbuf[1]) && (
#if !defined(TINY_BUILD)
		isdigit(idbuf[2]) || 
    59bc:	20 91 4a 2b 	lds	r18, 0x2B4A
    59c0:	82 2f       	mov	r24, r18
    59c2:	90 e0       	ldi	r25, 0x00	; 0
#endif
		(idbuf[2] == 0))) {
    59c4:	c0 97       	sbiw	r24, 0x30	; 48
	}
	
	// a pin identifier 'a'digit* or 'd'digit*?
	else if ((idbuflen <= 3) &&
		((c == 'a') || (c == 'd')) && 
		isdigit(idbuf[1]) && (
    59c6:	0a 97       	sbiw	r24, 0x0a	; 10
    59c8:	10 f0       	brcs	.+4      	; 0x59ce <_Z7parseidv+0xc4>
#if !defined(TINY_BUILD)
		isdigit(idbuf[2]) || 
    59ca:	21 11       	cpse	r18, r1
    59cc:	17 c0       	rjmp	.+46     	; 0x59fc <_Z7parseidv+0xf2>
#endif
		(idbuf[2] == 0))) {
		sym = (c == 'a') ? s_apin : s_dpin;
    59ce:	e1 e6       	ldi	r30, 0x61	; 97
    59d0:	fe 12       	cpse	r15, r30
    59d2:	02 c0       	rjmp	.+4      	; 0x59d8 <_Z7parseidv+0xce>
    59d4:	81 e9       	ldi	r24, 0x91	; 145
    59d6:	01 c0       	rjmp	.+2      	; 0x59da <_Z7parseidv+0xd0>
    59d8:	82 e9       	ldi	r24, 0x92	; 146
    59da:	8e bb       	out	0x1e, r24	; 30
		symval = pinnum(idbuf);
    59dc:	88 e4       	ldi	r24, 0x48	; 72
    59de:	9b e2       	ldi	r25, 0x2B	; 43
    59e0:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <_Z6pinnumPc>
    59e4:	90 e0       	ldi	r25, 0x00	; 0
    59e6:	a0 e0       	ldi	r26, 0x00	; 0
    59e8:	b0 e0       	ldi	r27, 0x00	; 0
    59ea:	80 93 66 2b 	sts	0x2B66, r24
    59ee:	90 93 67 2b 	sts	0x2B67, r25
    59f2:	a0 93 68 2b 	sts	0x2B68, r26
    59f6:	b0 93 69 2b 	sts	0x2B69, r27
    59fa:	2f c0       	rjmp	.+94     	; 0x5a5a <_Z7parseidv+0x150>
	}

	// reserved word?
	else if (findindex(idbuf, (const prog_char *) reservedwords, 1)) {
    59fc:	41 e0       	ldi	r20, 0x01	; 1
    59fe:	68 e5       	ldi	r22, 0x58	; 88
    5a00:	76 e0       	ldi	r23, 0x06	; 6
    5a02:	88 e4       	ldi	r24, 0x48	; 72
    5a04:	9b e2       	ldi	r25, 0x2B	; 43
    5a06:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <_Z9findindexPcPKch>
    5a0a:	88 23       	and	r24, r24
    5a0c:	49 f0       	breq	.+18     	; 0x5a20 <_Z7parseidv+0x116>
		sym = pgm_read_byte(reservedwordtypes + symval);	// e.g., s_if or s_while
    5a0e:	e0 91 66 2b 	lds	r30, 0x2B66
    5a12:	f0 91 67 2b 	lds	r31, 0x2B67
    5a16:	e0 5f       	subi	r30, 0xF0	; 240
    5a18:	fb 4f       	sbci	r31, 0xFB	; 251
    5a1a:	e4 91       	lpm	r30, Z
    5a1c:	ee bb       	out	0x1e, r30	; 30
    5a1e:	1d c0       	rjmp	.+58     	; 0x5a5a <_Z7parseidv+0x150>
	}

	// function?
	else if (findindex(idbuf, (const prog_char *) functiondict, 1)) sym = s_nfunct;
    5a20:	41 e0       	ldi	r20, 0x01	; 1
    5a22:	69 ea       	ldi	r22, 0xA9	; 169
    5a24:	76 e0       	ldi	r23, 0x06	; 6
    5a26:	88 e4       	ldi	r24, 0x48	; 72
    5a28:	9b e2       	ldi	r25, 0x2B	; 43
    5a2a:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <_Z9findindexPcPKch>
    5a2e:	81 11       	cpse	r24, r1
    5a30:	06 c0       	rjmp	.+12     	; 0x5a3e <_Z7parseidv+0x134>

#ifdef PIN_ALIASES
	else if (findpinname(idbuf)) {;}		// sym and symval are set in findpinname
#endif

	else if (find_user_function(idbuf)) sym = s_nfunct;
    5a32:	88 e4       	ldi	r24, 0x48	; 72
    5a34:	9b e2       	ldi	r25, 0x2B	; 43
    5a36:	0e 94 91 1c 	call	0x3922	; 0x3922 <_Z18find_user_functionPc>
    5a3a:	88 23       	and	r24, r24
    5a3c:	19 f0       	breq	.+6      	; 0x5a44 <_Z7parseidv+0x13a>
    5a3e:	8e e8       	ldi	r24, 0x8E	; 142
    5a40:	8e bb       	out	0x1e, r24	; 30
    5a42:	0b c0       	rjmp	.+22     	; 0x5a5a <_Z7parseidv+0x150>

	else findscript(idbuf);
    5a44:	88 e4       	ldi	r24, 0x48	; 72
    5a46:	9b e2       	ldi	r25, 0x2B	; 43
}
    5a48:	0f 90       	pop	r0
    5a4a:	df 91       	pop	r29
    5a4c:	cf 91       	pop	r28
    5a4e:	1f 91       	pop	r17
    5a50:	0f 91       	pop	r16
    5a52:	ff 90       	pop	r15
    5a54:	df 90       	pop	r13
    5a56:	cf 90       	pop	r12
	else if (findpinname(idbuf)) {;}		// sym and symval are set in findpinname
#endif

	else if (find_user_function(idbuf)) sym = s_nfunct;

	else findscript(idbuf);
    5a58:	e0 cb       	rjmp	.-2112   	; 0x521a <_Z10findscriptPc>
}
    5a5a:	0f 90       	pop	r0
    5a5c:	df 91       	pop	r29
    5a5e:	cf 91       	pop	r28
    5a60:	1f 91       	pop	r17
    5a62:	0f 91       	pop	r16
    5a64:	ff 90       	pop	r15
    5a66:	df 90       	pop	r13
    5a68:	cf 90       	pop	r12
    5a6a:	08 95       	ret

00005a6c <_Z11parsestringPFvcE>:
// Enter with sym = s_quote therefore inchar = first char in string
// Exit with inchar = first char past closing s_quote
//
// Callers will need to call getsym() to resume parsing
//
void parsestring(void (*charFunc)(char)) {
    5a6c:	ef 92       	push	r14
    5a6e:	ff 92       	push	r15
    5a70:	0f 93       	push	r16
    5a72:	1f 93       	push	r17
    5a74:	cf 93       	push	r28
    5a76:	df 93       	push	r29
    5a78:	ec 01       	movw	r28, r24
				case ASC_BKSLASH:			break;	// just a backslash, move along

				// minor translations
				case 'n': 	inchar = '\n';	break;
				case 't': 	inchar = '\t';	break;
				case 'r':	inchar = '\r';	break;
    5a7a:	1d e0       	ldi	r17, 0x0D	; 13
				case ASC_QUOTE:				break;	// just a dbl quote, move along
				case ASC_BKSLASH:			break;	// just a backslash, move along

				// minor translations
				case 'n': 	inchar = '\n';	break;
				case 't': 	inchar = '\t';	break;
    5a7c:	09 e0       	ldi	r16, 0x09	; 9
				// pass-thrus
				case ASC_QUOTE:				break;	// just a dbl quote, move along
				case ASC_BKSLASH:			break;	// just a backslash, move along

				// minor translations
				case 'n': 	inchar = '\n';	break;
    5a7e:	ea e0       	ldi	r30, 0x0A	; 10
    5a80:	fe 2e       	mov	r15, r30
//
void parsestring(void (*charFunc)(char)) {

	for (;;) {

		if (inchar == ASC_QUOTE) {				// found the string terminator
    5a82:	8a b5       	in	r24, 0x2a	; 42
    5a84:	82 32       	cpi	r24, 0x22	; 34
    5a86:	39 f4       	brne	.+14     	; 0x5a96 <_Z11parsestringPFvcE+0x2a>
		(*charFunc)(inchar);

		fetchc();
		if (!inchar) unexpected(M_eof);		// get next else end of input before string terminator
	}
}
    5a88:	df 91       	pop	r29
    5a8a:	cf 91       	pop	r28
    5a8c:	1f 91       	pop	r17
    5a8e:	0f 91       	pop	r16
    5a90:	ff 90       	pop	r15
    5a92:	ef 90       	pop	r14
void parsestring(void (*charFunc)(char)) {

	for (;;) {

		if (inchar == ASC_QUOTE) {				// found the string terminator
			fetchc();							// consume it so's we move along
    5a94:	34 ce       	rjmp	.-920    	; 0x56fe <_Z6fetchcv>
			break;								// done with the big loop
		}
		else if (inchar == ASC_BKSLASH) {		// bkslash escape conventions per K&R C
    5a96:	8a b5       	in	r24, 0x2a	; 42
    5a98:	8c 35       	cpi	r24, 0x5C	; 92
    5a9a:	69 f5       	brne	.+90     	; 0x5af6 <_Z11parsestringPFvcE+0x8a>
			fetchc();
    5a9c:	30 de       	rcall	.-928    	; 0x56fe <_Z6fetchcv>
			switch (inchar) {
    5a9e:	8a b5       	in	r24, 0x2a	; 42
    5aa0:	82 37       	cpi	r24, 0x72	; 114
    5aa2:	61 f0       	breq	.+24     	; 0x5abc <_Z11parsestringPFvcE+0x50>
    5aa4:	20 f4       	brcc	.+8      	; 0x5aae <_Z11parsestringPFvcE+0x42>
    5aa6:	8e 36       	cpi	r24, 0x6E	; 110
    5aa8:	31 f5       	brne	.+76     	; 0x5af6 <_Z11parsestringPFvcE+0x8a>
				// pass-thrus
				case ASC_QUOTE:				break;	// just a dbl quote, move along
				case ASC_BKSLASH:			break;	// just a backslash, move along

				// minor translations
				case 'n': 	inchar = '\n';	break;
    5aaa:	fa bc       	out	0x2a, r15	; 42
    5aac:	24 c0       	rjmp	.+72     	; 0x5af6 <_Z11parsestringPFvcE+0x8a>
			fetchc();							// consume it so's we move along
			break;								// done with the big loop
		}
		else if (inchar == ASC_BKSLASH) {		// bkslash escape conventions per K&R C
			fetchc();
			switch (inchar) {
    5aae:	84 37       	cpi	r24, 0x74	; 116
    5ab0:	19 f0       	breq	.+6      	; 0x5ab8 <_Z11parsestringPFvcE+0x4c>
    5ab2:	88 37       	cpi	r24, 0x78	; 120
    5ab4:	29 f0       	breq	.+10     	; 0x5ac0 <_Z11parsestringPFvcE+0x54>
    5ab6:	1f c0       	rjmp	.+62     	; 0x5af6 <_Z11parsestringPFvcE+0x8a>
				case ASC_QUOTE:				break;	// just a dbl quote, move along
				case ASC_BKSLASH:			break;	// just a backslash, move along

				// minor translations
				case 'n': 	inchar = '\n';	break;
				case 't': 	inchar = '\t';	break;
    5ab8:	0a bd       	out	0x2a, r16	; 42
    5aba:	1d c0       	rjmp	.+58     	; 0x5af6 <_Z11parsestringPFvcE+0x8a>
				case 'r':	inchar = '\r';	break;
    5abc:	1a bd       	out	0x2a, r17	; 42
    5abe:	1b c0       	rjmp	.+54     	; 0x5af6 <_Z11parsestringPFvcE+0x8a>

				case 'x':			// bkslash x hexdigit hexdigit	
					fetchc();
    5ac0:	1e de       	rcall	.-964    	; 0x56fe <_Z6fetchcv>
					if (ishex(inchar)) {
    5ac2:	8a b5       	in	r24, 0x2a	; 42
    5ac4:	0e 94 74 1d 	call	0x3ae8	; 0x3ae8 <_Z5ishexc>
    5ac8:	88 23       	and	r24, r24
    5aca:	99 f0       	breq	.+38     	; 0x5af2 <_Z11parsestringPFvcE+0x86>
						byte firstnibble = hexval(inchar);
    5acc:	8a b5       	in	r24, 0x2a	; 42
    5ace:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <_Z6hexvalc>
    5ad2:	e8 2e       	mov	r14, r24
						fetchc();
    5ad4:	14 de       	rcall	.-984    	; 0x56fe <_Z6fetchcv>
						if (ishex(inchar)) {
    5ad6:	8a b5       	in	r24, 0x2a	; 42
    5ad8:	0e 94 74 1d 	call	0x3ae8	; 0x3ae8 <_Z5ishexc>
    5adc:	88 23       	and	r24, r24
    5ade:	49 f0       	breq	.+18     	; 0x5af2 <_Z11parsestringPFvcE+0x86>
							inchar = hexval(inchar) + (firstnibble << 4);
    5ae0:	8a b5       	in	r24, 0x2a	; 42
    5ae2:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <_Z6hexvalc>
    5ae6:	90 e1       	ldi	r25, 0x10	; 16
    5ae8:	e9 9e       	mul	r14, r25
    5aea:	80 0d       	add	r24, r0
    5aec:	11 24       	eor	r1, r1
    5aee:	8a bd       	out	0x2a, r24	; 42
							break;
    5af0:	02 c0       	rjmp	.+4      	; 0x5af6 <_Z11parsestringPFvcE+0x8a>
						}
					}
					unexpected(M_char);
    5af2:	84 e1       	ldi	r24, 0x14	; 20
    5af4:	08 c0       	rjmp	.+16     	; 0x5b06 <_Z11parsestringPFvcE+0x9a>
					inchar = 'x';
					break;
			}
		}
		// Process the character we just extracted
		(*charFunc)(inchar);
    5af6:	8a b5       	in	r24, 0x2a	; 42
    5af8:	fe 01       	movw	r30, r28
    5afa:	19 95       	eicall

		fetchc();
    5afc:	00 de       	rcall	.-1024   	; 0x56fe <_Z6fetchcv>
		if (!inchar) unexpected(M_eof);		// get next else end of input before string terminator
    5afe:	8a b5       	in	r24, 0x2a	; 42
    5b00:	81 11       	cpse	r24, r1
    5b02:	bf cf       	rjmp	.-130    	; 0x5a82 <_Z11parsestringPFvcE+0x16>
    5b04:	8c e0       	ldi	r24, 0x0C	; 12
    5b06:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <_Z10unexpectedh>

00005b0a <_Z13skipstatementv>:
// Skip a statement without executing it
//
// { stmt; stmt; }
// stmt;
//
void skipstatement(void) {
    5b0a:	cf 93       	push	r28
signed char nestlevel = 0;

#ifdef PARSER_TRACE
	if (trace) sp("SKP[");
    5b0c:	80 91 47 2b 	lds	r24, 0x2B47
    5b10:	88 23       	and	r24, r24
    5b12:	21 f0       	breq	.+8      	; 0x5b1c <_Z13skipstatementv+0x12>
    5b14:	8c e9       	ldi	r24, 0x9C	; 156
    5b16:	9c e0       	ldi	r25, 0x0C	; 12
    5b18:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <_Z2spPKc>
#endif

	// Skip a statement list in curly braces: { stmt; stmt; stmt; }
	// Eat until the matching s_rcurly
	if (sym == s_lcurly) {
    5b1c:	8e b3       	in	r24, 0x1e	; 30
    5b1e:	8b 37       	cpi	r24, 0x7B	; 123
    5b20:	f9 f4       	brne	.+62     	; 0x5b60 <_Z13skipstatementv+0x56>
		getsym();	// eat "{"
    5b22:	0e 94 47 20 	call	0x408e	; 0x408e <_Z6getsymv>
//
// { stmt; stmt; }
// stmt;
//
void skipstatement(void) {
signed char nestlevel = 0;
    5b26:	c0 e0       	ldi	r28, 0x00	; 0

	// Skip a statement list in curly braces: { stmt; stmt; stmt; }
	// Eat until the matching s_rcurly
	if (sym == s_lcurly) {
		getsym();	// eat "{"
		while (sym != s_eof) {
    5b28:	8e b3       	in	r24, 0x1e	; 30
    5b2a:	88 23       	and	r24, r24
    5b2c:	09 f4       	brne	.+2      	; 0x5b30 <_Z13skipstatementv+0x26>
    5b2e:	57 c0       	rjmp	.+174    	; 0x5bde <_Z13skipstatementv+0xd4>
			if (sym == s_lcurly) ++nestlevel;
    5b30:	8e b3       	in	r24, 0x1e	; 30
    5b32:	8b 37       	cpi	r24, 0x7B	; 123
    5b34:	11 f4       	brne	.+4      	; 0x5b3a <_Z13skipstatementv+0x30>
    5b36:	cf 5f       	subi	r28, 0xFF	; 255
    5b38:	10 c0       	rjmp	.+32     	; 0x5b5a <_Z13skipstatementv+0x50>
			else if (sym == s_rcurly) {
    5b3a:	8e b3       	in	r24, 0x1e	; 30
    5b3c:	8d 37       	cpi	r24, 0x7D	; 125
    5b3e:	39 f4       	brne	.+14     	; 0x5b4e <_Z13skipstatementv+0x44>
				if (nestlevel <= 0) {
    5b40:	1c 16       	cp	r1, r28
    5b42:	1c f0       	brlt	.+6      	; 0x5b4a <_Z13skipstatementv+0x40>
					getsym(); 	// eat "}"
    5b44:	0e 94 47 20 	call	0x408e	; 0x408e <_Z6getsymv>
					break;
    5b48:	4a c0       	rjmp	.+148    	; 0x5bde <_Z13skipstatementv+0xd4>
				}
				else --nestlevel;
    5b4a:	c1 50       	subi	r28, 0x01	; 1
    5b4c:	06 c0       	rjmp	.+12     	; 0x5b5a <_Z13skipstatementv+0x50>
			}
			else if (sym == s_quote) parsestring(&skipbyte);
    5b4e:	8e b3       	in	r24, 0x1e	; 30
    5b50:	82 32       	cpi	r24, 0x22	; 34
    5b52:	19 f4       	brne	.+6      	; 0x5b5a <_Z13skipstatementv+0x50>
    5b54:	8e e8       	ldi	r24, 0x8E	; 142
    5b56:	9c e1       	ldi	r25, 0x1C	; 28
    5b58:	89 df       	rcall	.-238    	; 0x5a6c <_Z11parsestringPFvcE>
			getsym();
    5b5a:	0e 94 47 20 	call	0x408e	; 0x408e <_Z6getsymv>
    5b5e:	e4 cf       	rjmp	.-56     	; 0x5b28 <_Z13skipstatementv+0x1e>
		}
	}

	// skipping the if statement is a little tricky; same for switch
	else if ((sym == s_if) || (sym == s_switch)) {
    5b60:	8e b3       	in	r24, 0x1e	; 30
    5b62:	8f 38       	cpi	r24, 0x8F	; 143
    5b64:	69 f0       	breq	.+26     	; 0x5b80 <_Z13skipstatementv+0x76>
    5b66:	8e b3       	in	r24, 0x1e	; 30
    5b68:	8e 39       	cpi	r24, 0x9E	; 158
    5b6a:	51 f0       	breq	.+20     	; 0x5b80 <_Z13skipstatementv+0x76>
    5b6c:	c0 e0       	ldi	r28, 0x00	; 0
    5b6e:	12 c0       	rjmp	.+36     	; 0x5b94 <_Z13skipstatementv+0x8a>

		// find ';', '{', or end
		while ((sym != s_eof) && (sym != s_semi) && (sym != s_lcurly)) getsym();
    5b70:	8e b3       	in	r24, 0x1e	; 30
    5b72:	8b 33       	cpi	r24, 0x3B	; 59
    5b74:	39 f1       	breq	.+78     	; 0x5bc4 <_Z13skipstatementv+0xba>
    5b76:	8e b3       	in	r24, 0x1e	; 30
    5b78:	8b 37       	cpi	r24, 0x7B	; 123
    5b7a:	21 f1       	breq	.+72     	; 0x5bc4 <_Z13skipstatementv+0xba>
    5b7c:	0e 94 47 20 	call	0x408e	; 0x408e <_Z6getsymv>
    5b80:	8e b3       	in	r24, 0x1e	; 30
    5b82:	81 11       	cpse	r24, r1
    5b84:	f5 cf       	rjmp	.-22     	; 0x5b70 <_Z13skipstatementv+0x66>
    5b86:	1e c0       	rjmp	.+60     	; 0x5bc4 <_Z13skipstatementv+0xba>
	// Skip a single statement, not a statementlist in braces: 
	// eat until semicolon or ')'
	// ignoring embedded argument lists
	else {
		while (sym != s_eof) {
			if (sym == s_lparen) ++nestlevel;
    5b88:	8e b3       	in	r24, 0x1e	; 30
    5b8a:	88 32       	cpi	r24, 0x28	; 40
    5b8c:	39 f4       	brne	.+14     	; 0x5b9c <_Z13skipstatementv+0x92>
    5b8e:	cf 5f       	subi	r28, 0xFF	; 255
				if (sym == s_semi) {
					getsym();	// eat ";"
					break;
				}
			}
			getsym();
    5b90:	0e 94 47 20 	call	0x408e	; 0x408e <_Z6getsymv>

	// Skip a single statement, not a statementlist in braces: 
	// eat until semicolon or ')'
	// ignoring embedded argument lists
	else {
		while (sym != s_eof) {
    5b94:	8e b3       	in	r24, 0x1e	; 30
    5b96:	81 11       	cpse	r24, r1
    5b98:	f7 cf       	rjmp	.-18     	; 0x5b88 <_Z13skipstatementv+0x7e>
    5b9a:	21 c0       	rjmp	.+66     	; 0x5bde <_Z13skipstatementv+0xd4>
			if (sym == s_lparen) ++nestlevel;
			else if (sym == s_rparen) {
    5b9c:	8e b3       	in	r24, 0x1e	; 30
    5b9e:	89 32       	cpi	r24, 0x29	; 41
    5ba0:	21 f4       	brne	.+8      	; 0x5baa <_Z13skipstatementv+0xa0>
				if (nestlevel <= 0) {
    5ba2:	1c 16       	cp	r1, r28
    5ba4:	7c f6       	brge	.-98     	; 0x5b44 <_Z13skipstatementv+0x3a>
					getsym();
					break;
				}
				else --nestlevel;
    5ba6:	c1 50       	subi	r28, 0x01	; 1
    5ba8:	f3 cf       	rjmp	.-26     	; 0x5b90 <_Z13skipstatementv+0x86>
			}
			else if (sym == s_quote) parsestring(&skipbyte);
    5baa:	8e b3       	in	r24, 0x1e	; 30
    5bac:	82 32       	cpi	r24, 0x22	; 34
    5bae:	21 f4       	brne	.+8      	; 0x5bb8 <_Z13skipstatementv+0xae>
    5bb0:	8e e8       	ldi	r24, 0x8E	; 142
    5bb2:	9c e1       	ldi	r25, 0x1C	; 28
    5bb4:	5b df       	rcall	.-330    	; 0x5a6c <_Z11parsestringPFvcE>
    5bb6:	ec cf       	rjmp	.-40     	; 0x5b90 <_Z13skipstatementv+0x86>
			else if (nestlevel == 0) {
    5bb8:	c1 11       	cpse	r28, r1
    5bba:	ea cf       	rjmp	.-44     	; 0x5b90 <_Z13skipstatementv+0x86>
				//if ((sym == s_semi) || (sym == s_comma)) {
				if (sym == s_semi) {
    5bbc:	8e b3       	in	r24, 0x1e	; 30
    5bbe:	8b 33       	cpi	r24, 0x3B	; 59
    5bc0:	39 f7       	brne	.-50     	; 0x5b90 <_Z13skipstatementv+0x86>
    5bc2:	c0 cf       	rjmp	.-128    	; 0x5b44 <_Z13skipstatementv+0x3a>
	else if ((sym == s_if) || (sym == s_switch)) {

		// find ';', '{', or end
		while ((sym != s_eof) && (sym != s_semi) && (sym != s_lcurly)) getsym();

		if (sym == s_eof) return;
    5bc4:	8e b3       	in	r24, 0x1e	; 30
    5bc6:	88 23       	and	r24, r24
    5bc8:	b1 f0       	breq	.+44     	; 0x5bf6 <_Z13skipstatementv+0xec>
		else if (sym == s_lcurly) skipstatement();	// eat an if-true {statementlist;}
    5bca:	8e b3       	in	r24, 0x1e	; 30
    5bcc:	8b 37       	cpi	r24, 0x7B	; 123
    5bce:	81 f4       	brne	.+32     	; 0x5bf0 <_Z13skipstatementv+0xe6>
    5bd0:	9c df       	rcall	.-200    	; 0x5b0a <_Z13skipstatementv>
		else getsym();								// ate the statement; eat the ';'

		// now handle the optional 'else' part
		if (sym == s_else) {
    5bd2:	8e b3       	in	r24, 0x1e	; 30
    5bd4:	82 3a       	cpi	r24, 0xA2	; 162
    5bd6:	19 f4       	brne	.+6      	; 0x5bde <_Z13skipstatementv+0xd4>
			getsym();			// eat 'else'
    5bd8:	0e 94 47 20 	call	0x408e	; 0x408e <_Z6getsymv>
			skipstatement();	// skip one statement and we're done
    5bdc:	96 df       	rcall	.-212    	; 0x5b0a <_Z13skipstatementv>
			getsym();
		}
	}

#ifdef PARSER_TRACE
	if (trace) sp("]SKP");
    5bde:	80 91 47 2b 	lds	r24, 0x2B47
    5be2:	88 23       	and	r24, r24
    5be4:	41 f0       	breq	.+16     	; 0x5bf6 <_Z13skipstatementv+0xec>
    5be6:	81 ea       	ldi	r24, 0xA1	; 161
    5be8:	9c e0       	ldi	r25, 0x0C	; 12
#endif

}
    5bea:	cf 91       	pop	r28
			getsym();
		}
	}

#ifdef PARSER_TRACE
	if (trace) sp("]SKP");
    5bec:	0c 94 9a 1e 	jmp	0x3d34	; 0x3d34 <_Z2spPKc>
		// find ';', '{', or end
		while ((sym != s_eof) && (sym != s_semi) && (sym != s_lcurly)) getsym();

		if (sym == s_eof) return;
		else if (sym == s_lcurly) skipstatement();	// eat an if-true {statementlist;}
		else getsym();								// ate the statement; eat the ';'
    5bf0:	0e 94 47 20 	call	0x408e	; 0x408e <_Z6getsymv>
    5bf4:	ee cf       	rjmp	.-36     	; 0x5bd2 <_Z13skipstatementv+0xc8>

#ifdef PARSER_TRACE
	if (trace) sp("]SKP");
#endif

}
    5bf6:	cf 91       	pop	r28
    5bf8:	08 95       	ret

00005bfa <_Z11func_getkeyv>:
numvar func_bitset(void) { reqargs(2); return arg1 | ((numvar)1 << arg2); }
numvar func_bitread(void) { reqargs(2); return (arg1 & ((numvar)1 << arg2)) != 0; }
numvar func_bitwrite(void) { reqargs(3); return arg3 ? func_bitset() : func_bitclear(); }

numvar func_getkey(void) {
	if (getarg(0) > 0) sp((char *) getarg(1));
    5bfa:	60 e0       	ldi	r22, 0x00	; 0
    5bfc:	70 e0       	ldi	r23, 0x00	; 0
    5bfe:	cb 01       	movw	r24, r22
    5c00:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
    5c04:	16 16       	cp	r1, r22
    5c06:	17 06       	cpc	r1, r23
    5c08:	18 06       	cpc	r1, r24
    5c0a:	19 06       	cpc	r1, r25
    5c0c:	4c f4       	brge	.+18     	; 0x5c20 <_Z11func_getkeyv+0x26>
    5c0e:	61 e0       	ldi	r22, 0x01	; 1
    5c10:	70 e0       	ldi	r23, 0x00	; 0
    5c12:	80 e0       	ldi	r24, 0x00	; 0
    5c14:	90 e0       	ldi	r25, 0x00	; 0
    5c16:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
    5c1a:	cb 01       	movw	r24, r22
    5c1c:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <_Z2spPKc>
	while (!serialAvailable()) {;}		// blocking!
    5c20:	84 e0       	ldi	r24, 0x04	; 4
    5c22:	94 e2       	ldi	r25, 0x24	; 36
    5c24:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <_ZN14HardwareSerial9availableEv>
    5c28:	89 2b       	or	r24, r25
    5c2a:	d1 f3       	breq	.-12     	; 0x5c20 <_Z11func_getkeyv+0x26>
	return (numvar) serialRead();
    5c2c:	84 e0       	ldi	r24, 0x04	; 4
    5c2e:	94 e2       	ldi	r25, 0x24	; 36
    5c30:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <_ZN14HardwareSerial4readEv>
    5c34:	bc 01       	movw	r22, r24
    5c36:	88 27       	eor	r24, r24
    5c38:	77 fd       	sbrc	r23, 7
    5c3a:	80 95       	com	r24
    5c3c:	98 2f       	mov	r25, r24
}
    5c3e:	08 95       	ret

00005c40 <_Z11func_getnumv>:

numvar func_getnum(void) {
    5c40:	cf 92       	push	r12
    5c42:	df 92       	push	r13
    5c44:	ef 92       	push	r14
    5c46:	ff 92       	push	r15
    5c48:	0f 93       	push	r16
    5c4a:	1f 93       	push	r17
    5c4c:	cf 93       	push	r28
    5c4e:	df 93       	push	r29
    5c50:	00 d0       	rcall	.+0      	; 0x5c52 <_Z11func_getnumv+0x12>
    5c52:	1f 92       	push	r1
    5c54:	cd b7       	in	r28, 0x3d	; 61
    5c56:	de b7       	in	r29, 0x3e	; 62
	numvar num = 0;
	if (getarg(0) > 0) sp((char *) getarg(1));
    5c58:	60 e0       	ldi	r22, 0x00	; 0
    5c5a:	70 e0       	ldi	r23, 0x00	; 0
    5c5c:	cb 01       	movw	r24, r22
    5c5e:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
    5c62:	16 16       	cp	r1, r22
    5c64:	17 06       	cpc	r1, r23
    5c66:	18 06       	cpc	r1, r24
    5c68:	19 06       	cpc	r1, r25
    5c6a:	4c f4       	brge	.+18     	; 0x5c7e <_Z11func_getnumv+0x3e>
    5c6c:	61 e0       	ldi	r22, 0x01	; 1
    5c6e:	70 e0       	ldi	r23, 0x00	; 0
    5c70:	80 e0       	ldi	r24, 0x00	; 0
    5c72:	90 e0       	ldi	r25, 0x00	; 0
    5c74:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
    5c78:	cb 01       	movw	r24, r22
    5c7a:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <_Z2spPKc>
	if (getarg(0) > 0) sp((char *) getarg(1));
	while (!serialAvailable()) {;}		// blocking!
	return (numvar) serialRead();
}

numvar func_getnum(void) {
    5c7e:	20 e0       	ldi	r18, 0x00	; 0
    5c80:	30 e0       	ldi	r19, 0x00	; 0
    5c82:	a9 01       	movw	r20, r18
			num = num * 10L + (long) (k - '0');
		}
		else if (k == '-') num = -num;
		else if ((k == 8) || (k == 0x7f)) {
			if (num != 0) {
				num /= 10L;
    5c84:	fa e0       	ldi	r31, 0x0A	; 10
    5c86:	cf 2e       	mov	r12, r31
    5c88:	d1 2c       	mov	r13, r1
    5c8a:	e1 2c       	mov	r14, r1
    5c8c:	f1 2c       	mov	r15, r1

numvar func_getnum(void) {
	numvar num = 0;
	if (getarg(0) > 0) sp((char *) getarg(1));
	for (;;) {
		while (!serialAvailable()) {;}	// blocking!
    5c8e:	84 e0       	ldi	r24, 0x04	; 4
    5c90:	94 e2       	ldi	r25, 0x24	; 36
    5c92:	29 83       	std	Y+1, r18	; 0x01
    5c94:	3a 83       	std	Y+2, r19	; 0x02
    5c96:	4b 83       	std	Y+3, r20	; 0x03
    5c98:	5c 83       	std	Y+4, r21	; 0x04
    5c9a:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <_ZN14HardwareSerial9availableEv>
    5c9e:	29 81       	ldd	r18, Y+1	; 0x01
    5ca0:	3a 81       	ldd	r19, Y+2	; 0x02
    5ca2:	4b 81       	ldd	r20, Y+3	; 0x03
    5ca4:	5c 81       	ldd	r21, Y+4	; 0x04
    5ca6:	89 2b       	or	r24, r25
    5ca8:	91 f3       	breq	.-28     	; 0x5c8e <_Z11func_getnumv+0x4e>
		int k = serialRead();
    5caa:	84 e0       	ldi	r24, 0x04	; 4
    5cac:	94 e2       	ldi	r25, 0x24	; 36
    5cae:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <_ZN14HardwareSerial4readEv>
    5cb2:	8c 01       	movw	r16, r24
		if ((k == '\r') || (k == '\n')) {
    5cb4:	29 81       	ldd	r18, Y+1	; 0x01
    5cb6:	3a 81       	ldd	r19, Y+2	; 0x02
    5cb8:	4b 81       	ldd	r20, Y+3	; 0x03
    5cba:	5c 81       	ldd	r21, Y+4	; 0x04
    5cbc:	8d 30       	cpi	r24, 0x0D	; 13
    5cbe:	91 05       	cpc	r25, r1
    5cc0:	09 f4       	brne	.+2      	; 0x5cc4 <_Z11func_getnumv+0x84>
    5cc2:	55 c0       	rjmp	.+170    	; 0x5d6e <_Z11func_getnumv+0x12e>
    5cc4:	8a 30       	cpi	r24, 0x0A	; 10
    5cc6:	91 05       	cpc	r25, r1
    5cc8:	09 f4       	brne	.+2      	; 0x5ccc <_Z11func_getnumv+0x8c>
    5cca:	51 c0       	rjmp	.+162    	; 0x5d6e <_Z11func_getnumv+0x12e>
			speol();
			return num;
		}
		else if ((k >= '0') && (k <= '9')) {
    5ccc:	fc 01       	movw	r30, r24
    5cce:	f0 97       	sbiw	r30, 0x30	; 48
    5cd0:	ea 30       	cpi	r30, 0x0A	; 10
    5cd2:	f1 05       	cpc	r31, r1
    5cd4:	80 f4       	brcc	.+32     	; 0x5cf6 <_Z11func_getnumv+0xb6>
			num = num * 10L + (long) (k - '0');
    5cd6:	aa e0       	ldi	r26, 0x0A	; 10
    5cd8:	b0 e0       	ldi	r27, 0x00	; 0
    5cda:	0e 94 8c b2 	call	0x16518	; 0x16518 <__muluhisi3>
    5cde:	9b 01       	movw	r18, r22
    5ce0:	ac 01       	movw	r20, r24
    5ce2:	cf 01       	movw	r24, r30
    5ce4:	aa 27       	eor	r26, r26
    5ce6:	97 fd       	sbrc	r25, 7
    5ce8:	a0 95       	com	r26
    5cea:	ba 2f       	mov	r27, r26
    5cec:	28 0f       	add	r18, r24
    5cee:	39 1f       	adc	r19, r25
    5cf0:	4a 1f       	adc	r20, r26
    5cf2:	5b 1f       	adc	r21, r27
    5cf4:	30 c0       	rjmp	.+96     	; 0x5d56 <_Z11func_getnumv+0x116>
		}
		else if (k == '-') num = -num;
    5cf6:	8d 32       	cpi	r24, 0x2D	; 45
    5cf8:	91 05       	cpc	r25, r1
    5cfa:	41 f4       	brne	.+16     	; 0x5d0c <_Z11func_getnumv+0xcc>
    5cfc:	50 95       	com	r21
    5cfe:	40 95       	com	r20
    5d00:	30 95       	com	r19
    5d02:	21 95       	neg	r18
    5d04:	3f 4f       	sbci	r19, 0xFF	; 255
    5d06:	4f 4f       	sbci	r20, 0xFF	; 255
    5d08:	5f 4f       	sbci	r21, 0xFF	; 255
    5d0a:	25 c0       	rjmp	.+74     	; 0x5d56 <_Z11func_getnumv+0x116>
		else if ((k == 8) || (k == 0x7f)) {
    5d0c:	88 30       	cpi	r24, 0x08	; 8
    5d0e:	91 05       	cpc	r25, r1
    5d10:	19 f0       	breq	.+6      	; 0x5d18 <_Z11func_getnumv+0xd8>
    5d12:	8f 37       	cpi	r24, 0x7F	; 127
    5d14:	91 05       	cpc	r25, r1
    5d16:	e9 f4       	brne	.+58     	; 0x5d52 <_Z11func_getnumv+0x112>
			if (num != 0) {
    5d18:	21 15       	cp	r18, r1
    5d1a:	31 05       	cpc	r19, r1
    5d1c:	41 05       	cpc	r20, r1
    5d1e:	51 05       	cpc	r21, r1
    5d20:	d1 f0       	breq	.+52     	; 0x5d56 <_Z11func_getnumv+0x116>
				num /= 10L;
    5d22:	ca 01       	movw	r24, r20
    5d24:	b9 01       	movw	r22, r18
    5d26:	a7 01       	movw	r20, r14
    5d28:	96 01       	movw	r18, r12
    5d2a:	0e 94 6a b2 	call	0x164d4	; 0x164d4 <__divmodsi4>
				spb(8); spb(' '); spb(8);
    5d2e:	88 e0       	ldi	r24, 0x08	; 8
    5d30:	29 83       	std	Y+1, r18	; 0x01
    5d32:	3a 83       	std	Y+2, r19	; 0x02
    5d34:	4b 83       	std	Y+3, r20	; 0x03
    5d36:	5c 83       	std	Y+4, r21	; 0x04
    5d38:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <_Z3spbc>
    5d3c:	80 e2       	ldi	r24, 0x20	; 32
    5d3e:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <_Z3spbc>
    5d42:	88 e0       	ldi	r24, 0x08	; 8
    5d44:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <_Z3spbc>
    5d48:	29 81       	ldd	r18, Y+1	; 0x01
    5d4a:	3a 81       	ldd	r19, Y+2	; 0x02
    5d4c:	4b 81       	ldd	r20, Y+3	; 0x03
    5d4e:	5c 81       	ldd	r21, Y+4	; 0x04
    5d50:	02 c0       	rjmp	.+4      	; 0x5d56 <_Z11func_getnumv+0x116>
			}
		}
		else {
			spb(7);	// beep
    5d52:	87 e0       	ldi	r24, 0x07	; 7
    5d54:	01 c0       	rjmp	.+2      	; 0x5d58 <_Z11func_getnumv+0x118>
			continue;
		}
		spb(k);			// else echo what we ate
    5d56:	80 2f       	mov	r24, r16
    5d58:	29 83       	std	Y+1, r18	; 0x01
    5d5a:	3a 83       	std	Y+2, r19	; 0x02
    5d5c:	4b 83       	std	Y+3, r20	; 0x03
    5d5e:	5c 83       	std	Y+4, r21	; 0x04
    5d60:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <_Z3spbc>
    5d64:	29 81       	ldd	r18, Y+1	; 0x01
    5d66:	3a 81       	ldd	r19, Y+2	; 0x02
    5d68:	4b 81       	ldd	r20, Y+3	; 0x03
    5d6a:	5c 81       	ldd	r21, Y+4	; 0x04
    5d6c:	90 cf       	rjmp	.-224    	; 0x5c8e <_Z11func_getnumv+0x4e>
	if (getarg(0) > 0) sp((char *) getarg(1));
	for (;;) {
		while (!serialAvailable()) {;}	// blocking!
		int k = serialRead();
		if ((k == '\r') || (k == '\n')) {
			speol();
    5d6e:	29 83       	std	Y+1, r18	; 0x01
    5d70:	3a 83       	std	Y+2, r19	; 0x02
    5d72:	4b 83       	std	Y+3, r20	; 0x03
    5d74:	5c 83       	std	Y+4, r21	; 0x04
    5d76:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <_Z5speolv>
    5d7a:	29 81       	ldd	r18, Y+1	; 0x01
    5d7c:	3a 81       	ldd	r19, Y+2	; 0x02
    5d7e:	4b 81       	ldd	r20, Y+3	; 0x03
    5d80:	5c 81       	ldd	r21, Y+4	; 0x04
			spb(7);	// beep
			continue;
		}
		spb(k);			// else echo what we ate
	}
}
    5d82:	ca 01       	movw	r24, r20
    5d84:	b9 01       	movw	r22, r18
    5d86:	0f 90       	pop	r0
    5d88:	0f 90       	pop	r0
    5d8a:	0f 90       	pop	r0
    5d8c:	0f 90       	pop	r0
    5d8e:	df 91       	pop	r29
    5d90:	cf 91       	pop	r28
    5d92:	1f 91       	pop	r17
    5d94:	0f 91       	pop	r16
    5d96:	ff 90       	pop	r15
    5d98:	ef 90       	pop	r14
    5d9a:	df 90       	pop	r13
    5d9c:	cf 90       	pop	r12
    5d9e:	08 95       	ret

00005da0 <_Z8chkbreakv>:
}

#elif !defined(TINY_BUILD)

// check serial input stream for ^C break
void chkbreak(void) {
    5da0:	cf 93       	push	r28
    5da2:	df 93       	push	r29
    5da4:	00 d0       	rcall	.+0      	; 0x5da6 <_Z8chkbreakv+0x6>
    5da6:	1f 92       	push	r1
    5da8:	cd b7       	in	r28, 0x3d	; 61
    5daa:	de b7       	in	r29, 0x3e	; 62
	if (serialAvailable()) {		// allow ^C to break out
    5dac:	84 e0       	ldi	r24, 0x04	; 4
    5dae:	94 e2       	ldi	r25, 0x24	; 36
    5db0:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <_ZN14HardwareSerial9availableEv>
    5db4:	89 2b       	or	r24, r25
    5db6:	79 f0       	breq	.+30     	; 0x5dd6 <_Z8chkbreakv+0x36>
		if (serialRead() == 3) {	// BUG: this gobblesnarfs input characters! - need serialPeek()
    5db8:	84 e0       	ldi	r24, 0x04	; 4
    5dba:	94 e2       	ldi	r25, 0x24	; 36
    5dbc:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <_ZN14HardwareSerial4readEv>
    5dc0:	03 97       	sbiw	r24, 0x03	; 3
    5dc2:	49 f4       	brne	.+18     	; 0x5dd6 <_Z8chkbreakv+0x36>
			msgpl(M_ctrlc);
    5dc4:	86 e0       	ldi	r24, 0x06	; 6
    5dc6:	0e 94 77 1f 	call	0x3eee	; 0x3eee <_Z5msgplh>
			longjmp(env, X_EXIT);
    5dca:	61 e0       	ldi	r22, 0x01	; 1
    5dcc:	70 e0       	ldi	r23, 0x00	; 0
    5dce:	88 e1       	ldi	r24, 0x18	; 24
    5dd0:	96 e2       	ldi	r25, 0x26	; 38
    5dd2:	0e 94 a6 b4 	call	0x1694c	; 0x1694c <longjmp>
	return 1000L;
#else
	numvar ret;
	// from http://forum.pololu.com/viewtopic.php?f=10&t=989&view=unread#p4218
	extern int __bss_end;
	return ((int)&ret) - ((int)&__bss_end);
    5dd6:	ce 01       	movw	r24, r28
    5dd8:	80 50       	subi	r24, 0x00	; 0
    5dda:	9b 43       	sbci	r25, 0x3B	; 59
		}
	}
	if (func_free() < MINIMUM_FREE_RAM) overflow(M_stack);
    5ddc:	c2 97       	sbiw	r24, 0x32	; 50
    5dde:	1c f4       	brge	.+6      	; 0x5de6 <_Z8chkbreakv+0x46>
    5de0:	85 e1       	ldi	r24, 0x15	; 21
    5de2:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <_Z8overflowh>
}
    5de6:	0f 90       	pop	r0
    5de8:	0f 90       	pop	r0
    5dea:	0f 90       	pop	r0
    5dec:	0f 90       	pop	r0
    5dee:	df 91       	pop	r29
    5df0:	cf 91       	pop	r28
    5df2:	08 95       	ret

00005df4 <_Z12getstatementv>:
	return retval;
}


// Get a statement
numvar getstatement(void) {
    5df4:	cf 92       	push	r12
    5df6:	df 92       	push	r13
    5df8:	ef 92       	push	r14
    5dfa:	ff 92       	push	r15
    5dfc:	cf 93       	push	r28
    5dfe:	df 93       	push	r29
    5e00:	00 d0       	rcall	.+0      	; 0x5e02 <_Z12getstatementv+0xe>
    5e02:	1f 92       	push	r1
    5e04:	1f 92       	push	r1
    5e06:	cd b7       	in	r28, 0x3d	; 61
    5e08:	de b7       	in	r29, 0x3e	; 62
numvar retval = 0;

#if !defined(TINY_BUILD) && !defined(UNIX_BUILD)
	chkbreak();
    5e0a:	ca df       	rcall	.-108    	; 0x5da0 <_Z8chkbreakv>
#endif

	if (sym == s_while) {
    5e0c:	8e b3       	in	r24, 0x1e	; 30
    5e0e:	80 39       	cpi	r24, 0x90	; 144
    5e10:	c9 f4       	brne	.+50     	; 0x5e44 <_Z12getstatementv+0x50>
		// at this point sym is pointing at s_while, before the conditional expression
		// save fetchptr so we can restart parsing from here as the while iterates
		parsepoint fetchmark;
		markparsepoint(&fetchmark);
    5e12:	ce 01       	movw	r24, r28
    5e14:	01 96       	adiw	r24, 0x01	; 1
    5e16:	0e 94 86 20 	call	0x410c	; 0x410c <_Z14markparsepointP10parsepoint>
}


// Get a statement
numvar getstatement(void) {
numvar retval = 0;
    5e1a:	c1 2c       	mov	r12, r1
    5e1c:	d1 2c       	mov	r13, r1
    5e1e:	76 01       	movw	r14, r12
		// at this point sym is pointing at s_while, before the conditional expression
		// save fetchptr so we can restart parsing from here as the while iterates
		parsepoint fetchmark;
		markparsepoint(&fetchmark);
		for (;;) {
			returntoparsepoint(&fetchmark, 0);
    5e20:	60 e0       	ldi	r22, 0x00	; 0
    5e22:	ce 01       	movw	r24, r28
    5e24:	01 96       	adiw	r24, 0x01	; 1
    5e26:	4b dc       	rcall	.-1898   	; 0x56be <_Z18returntoparsepointP10parsepointh>
			getsym(); 						// fetch the start of the conditional
    5e28:	0e 94 47 20 	call	0x408e	; 0x408e <_Z6getsymv>
			if (getnum()) {
    5e2c:	3b d4       	rcall	.+2166   	; 0x66a4 <_Z6getnumv>
    5e2e:	67 2b       	or	r22, r23
    5e30:	68 2b       	or	r22, r24
    5e32:	69 2b       	or	r22, r25
    5e34:	d1 f0       	breq	.+52     	; 0x5e6a <_Z12getstatementv+0x76>
				retval = getstatement();
    5e36:	de df       	rcall	.-68     	; 0x5df4 <_Z12getstatementv>
    5e38:	6b 01       	movw	r12, r22
    5e3a:	7c 01       	movw	r14, r24
				if (sym == s_returning) break;	// exit if we caught a return
    5e3c:	8e b3       	in	r24, 0x1e	; 30
    5e3e:	80 3a       	cpi	r24, 0xA0	; 160
    5e40:	79 f7       	brne	.-34     	; 0x5e20 <_Z12getstatementv+0x2c>
    5e42:	c5 c0       	rjmp	.+394    	; 0x5fce <_Z12getstatementv+0x1da>
				break;
			}
		}
	}
	
	else if (sym == s_if) {
    5e44:	8e b3       	in	r24, 0x1e	; 30
    5e46:	8f 38       	cpi	r24, 0x8F	; 143
    5e48:	d9 f4       	brne	.+54     	; 0x5e80 <_Z12getstatementv+0x8c>
		getsym();			// eat "if"
    5e4a:	0e 94 47 20 	call	0x408e	; 0x408e <_Z6getsymv>
		if (getnum()) {
    5e4e:	2a d4       	rcall	.+2132   	; 0x66a4 <_Z6getnumv>
    5e50:	67 2b       	or	r22, r23
    5e52:	68 2b       	or	r22, r24
    5e54:	69 2b       	or	r22, r25
    5e56:	59 f0       	breq	.+22     	; 0x5e6e <_Z12getstatementv+0x7a>
			retval = getstatement();
    5e58:	cd df       	rcall	.-102    	; 0x5df4 <_Z12getstatementv>
    5e5a:	6b 01       	movw	r12, r22
    5e5c:	7c 01       	movw	r14, r24
			if (sym == s_else) {
    5e5e:	8e b3       	in	r24, 0x1e	; 30
    5e60:	82 3a       	cpi	r24, 0xA2	; 162
    5e62:	09 f0       	breq	.+2      	; 0x5e66 <_Z12getstatementv+0x72>
    5e64:	b4 c0       	rjmp	.+360    	; 0x5fce <_Z12getstatementv+0x1da>
				getsym();	// eat "else"
    5e66:	0e 94 47 20 	call	0x408e	; 0x408e <_Z6getsymv>
				skipstatement();
    5e6a:	4f de       	rcall	.-866    	; 0x5b0a <_Z13skipstatementv>
    5e6c:	b0 c0       	rjmp	.+352    	; 0x5fce <_Z12getstatementv+0x1da>
			}
		} else {
			skipstatement();
    5e6e:	4d de       	rcall	.-870    	; 0x5b0a <_Z13skipstatementv>
			if (sym == s_else) {
    5e70:	8e b3       	in	r24, 0x1e	; 30
    5e72:	82 3a       	cpi	r24, 0xA2	; 162
    5e74:	09 f0       	breq	.+2      	; 0x5e78 <_Z12getstatementv+0x84>
    5e76:	fc c0       	rjmp	.+504    	; 0x6070 <_Z12getstatementv+0x27c>
				getsym();	// eat "else"
    5e78:	0e 94 47 20 	call	0x408e	; 0x408e <_Z6getsymv>
				retval = getstatement();
    5e7c:	bb df       	rcall	.-138    	; 0x5df4 <_Z12getstatementv>
    5e7e:	2b c0       	rjmp	.+86     	; 0x5ed6 <_Z12getstatementv+0xe2>
			}
		}
	}
	else if (sym == s_lcurly) {
    5e80:	8e b3       	in	r24, 0x1e	; 30
    5e82:	8b 37       	cpi	r24, 0x7B	; 123
    5e84:	91 f4       	brne	.+36     	; 0x5eaa <_Z12getstatementv+0xb6>
		getsym(); 	// eat "{"
    5e86:	0e 94 47 20 	call	0x408e	; 0x408e <_Z6getsymv>
}


// Get a statement
numvar getstatement(void) {
numvar retval = 0;
    5e8a:	c1 2c       	mov	r12, r1
    5e8c:	d1 2c       	mov	r13, r1
    5e8e:	76 01       	movw	r14, r12
			}
		}
	}
	else if (sym == s_lcurly) {
		getsym(); 	// eat "{"
		while ((sym != s_eof) && (sym != s_returning) && (sym != s_rcurly)) retval = getstatement();
    5e90:	8e b3       	in	r24, 0x1e	; 30
    5e92:	88 23       	and	r24, r24
    5e94:	09 f4       	brne	.+2      	; 0x5e98 <_Z12getstatementv+0xa4>
    5e96:	a2 c0       	rjmp	.+324    	; 0x5fdc <_Z12getstatementv+0x1e8>
    5e98:	8e b3       	in	r24, 0x1e	; 30
    5e9a:	80 3a       	cpi	r24, 0xA0	; 160
    5e9c:	09 f4       	brne	.+2      	; 0x5ea0 <_Z12getstatementv+0xac>
    5e9e:	9e c0       	rjmp	.+316    	; 0x5fdc <_Z12getstatementv+0x1e8>
    5ea0:	8e b3       	in	r24, 0x1e	; 30
    5ea2:	8d 37       	cpi	r24, 0x7D	; 125
    5ea4:	09 f0       	breq	.+2      	; 0x5ea8 <_Z12getstatementv+0xb4>
    5ea6:	a0 c0       	rjmp	.+320    	; 0x5fe8 <_Z12getstatementv+0x1f4>
    5ea8:	99 c0       	rjmp	.+306    	; 0x5fdc <_Z12getstatementv+0x1e8>
		if (sym == s_rcurly) getsym();	// eat "}"
	}
	else if (sym == s_return) {
    5eaa:	8e b3       	in	r24, 0x1e	; 30
    5eac:	8f 39       	cpi	r24, 0x9F	; 159
    5eae:	79 f4       	brne	.+30     	; 0x5ece <_Z12getstatementv+0xda>
		getsym();	// eat "return"
    5eb0:	0e 94 47 20 	call	0x408e	; 0x408e <_Z6getsymv>
		if ((sym != s_eof) && (sym != s_semi)) retval = getnum();
    5eb4:	8e b3       	in	r24, 0x1e	; 30
    5eb6:	88 23       	and	r24, r24
    5eb8:	21 f0       	breq	.+8      	; 0x5ec2 <_Z12getstatementv+0xce>
    5eba:	8e b3       	in	r24, 0x1e	; 30
    5ebc:	8b 33       	cpi	r24, 0x3B	; 59
    5ebe:	09 f0       	breq	.+2      	; 0x5ec2 <_Z12getstatementv+0xce>
    5ec0:	97 c0       	rjmp	.+302    	; 0x5ff0 <_Z12getstatementv+0x1fc>
}


// Get a statement
numvar getstatement(void) {
numvar retval = 0;
    5ec2:	c1 2c       	mov	r12, r1
    5ec4:	d1 2c       	mov	r13, r1
    5ec6:	76 01       	movw	r14, r12
		if (sym == s_rcurly) getsym();	// eat "}"
	}
	else if (sym == s_return) {
		getsym();	// eat "return"
		if ((sym != s_eof) && (sym != s_semi)) retval = getnum();
		sym = s_returning;		// signal we're returning up the line
    5ec8:	80 ea       	ldi	r24, 0xA0	; 160
    5eca:	8e bb       	out	0x1e, r24	; 30
    5ecc:	80 c0       	rjmp	.+256    	; 0x5fce <_Z12getstatementv+0x1da>
	}

#if !defined(TINY_BUILD)
	else if (sym == s_switch) retval = getswitchstatement();
    5ece:	8e b3       	in	r24, 0x1e	; 30
    5ed0:	8e 39       	cpi	r24, 0x9E	; 158
    5ed2:	21 f4       	brne	.+8      	; 0x5edc <_Z12getstatementv+0xe8>
    5ed4:	3c d6       	rcall	.+3192   	; 0x6b4e <_Z18getswitchstatementv>
    5ed6:	6b 01       	movw	r12, r22
    5ed8:	7c 01       	movw	r14, r24
    5eda:	79 c0       	rjmp	.+242    	; 0x5fce <_Z12getstatementv+0x1da>
#endif

	else if (sym == s_function) cmd_function();
    5edc:	8e b3       	in	r24, 0x1e	; 30
    5ede:	84 39       	cpi	r24, 0x94	; 148
    5ee0:	11 f4       	brne	.+4      	; 0x5ee6 <_Z12getstatementv+0xf2>
    5ee2:	e4 d9       	rcall	.-3128   	; 0x52ac <_Z12cmd_functionv>
    5ee4:	c5 c0       	rjmp	.+394    	; 0x6070 <_Z12getstatementv+0x27c>

	else if (sym == s_run) {	// run macroname
    5ee6:	8e b3       	in	r24, 0x1e	; 30
    5ee8:	86 39       	cpi	r24, 0x96	; 150
    5eea:	79 f4       	brne	.+30     	; 0x5f0a <_Z12getstatementv+0x116>
		getsym();
    5eec:	0e 94 47 20 	call	0x408e	; 0x408e <_Z6getsymv>
		if ((sym != s_script_eeprom) && (sym != s_script_progmem) &&
    5ef0:	8e b3       	in	r24, 0x1e	; 30
    5ef2:	83 3a       	cpi	r24, 0xA3	; 163
    5ef4:	09 f4       	brne	.+2      	; 0x5ef8 <_Z12getstatementv+0x104>
    5ef6:	80 c0       	rjmp	.+256    	; 0x5ff8 <_Z12getstatementv+0x204>
    5ef8:	8e b3       	in	r24, 0x1e	; 30
    5efa:	84 3a       	cpi	r24, 0xA4	; 164
    5efc:	09 f4       	brne	.+2      	; 0x5f00 <_Z12getstatementv+0x10c>
    5efe:	7c c0       	rjmp	.+248    	; 0x5ff8 <_Z12getstatementv+0x204>
			(sym != s_script_file)) unexpected(M_id);
    5f00:	8e b3       	in	r24, 0x1e	; 30

	else if (sym == s_function) cmd_function();

	else if (sym == s_run) {	// run macroname
		getsym();
		if ((sym != s_script_eeprom) && (sym != s_script_progmem) &&
    5f02:	85 3a       	cpi	r24, 0xA5	; 165
    5f04:	09 f0       	breq	.+2      	; 0x5f08 <_Z12getstatementv+0x114>
    5f06:	a3 c0       	rjmp	.+326    	; 0x604e <_Z12getstatementv+0x25a>
    5f08:	77 c0       	rjmp	.+238    	; 0x5ff8 <_Z12getstatementv+0x204>
			startTask(vpop(), expval);
		}
		else startTask(symval, 0);
	}

	else if (sym == s_stop) {
    5f0a:	8e b3       	in	r24, 0x1e	; 30
    5f0c:	88 39       	cpi	r24, 0x98	; 152
    5f0e:	81 f4       	brne	.+32     	; 0x5f30 <_Z12getstatementv+0x13c>
		getsym();
    5f10:	0e 94 47 20 	call	0x408e	; 0x408e <_Z6getsymv>
#if !defined(TINY_BUILD)
		if (sym == s_mul) {						// stop * stops all tasks
    5f14:	8e b3       	in	r24, 0x1e	; 30
    5f16:	8a 32       	cpi	r24, 0x2A	; 42
    5f18:	11 f4       	brne	.+4      	; 0x5f1e <_Z12getstatementv+0x12a>
			initTaskList();
    5f1a:	0e d8       	rcall	.-4068   	; 0x4f38 <_Z12initTaskListv>
    5f1c:	20 c0       	rjmp	.+64     	; 0x5f5e <_Z12getstatementv+0x16a>
			getsym();
		}
		else if ((sym == s_semi) || (sym == s_eof)) {
    5f1e:	8e b3       	in	r24, 0x1e	; 30
    5f20:	8b 33       	cpi	r24, 0x3B	; 59
    5f22:	09 f4       	brne	.+2      	; 0x5f26 <_Z12getstatementv+0x132>
    5f24:	97 c0       	rjmp	.+302    	; 0x6054 <_Z12getstatementv+0x260>
    5f26:	8e b3       	in	r24, 0x1e	; 30
    5f28:	88 23       	and	r24, r24
    5f2a:	09 f4       	brne	.+2      	; 0x5f2e <_Z12getstatementv+0x13a>
    5f2c:	93 c0       	rjmp	.+294    	; 0x6054 <_Z12getstatementv+0x260>
    5f2e:	9c c0       	rjmp	.+312    	; 0x6068 <_Z12getstatementv+0x274>
		else 
#endif
			stopTask(getnum());
	}

	else if (sym == s_rm) {		// rm "sym" or rm *
    5f30:	8e b3       	in	r24, 0x1e	; 30
    5f32:	85 39       	cpi	r24, 0x95	; 149
    5f34:	b9 f4       	brne	.+46     	; 0x5f64 <_Z12getstatementv+0x170>
		getsym();
    5f36:	0e 94 47 20 	call	0x408e	; 0x408e <_Z6getsymv>
		if (sym == s_script_eeprom) {
    5f3a:	8e b3       	in	r24, 0x1e	; 30
    5f3c:	83 3a       	cpi	r24, 0xA3	; 163
    5f3e:	21 f4       	brne	.+8      	; 0x5f48 <_Z12getstatementv+0x154>
			eraseentry(idbuf);
    5f40:	88 e4       	ldi	r24, 0x48	; 72
    5f42:	9b e2       	ldi	r25, 0x2B	; 43
    5f44:	ad d9       	rcall	.-3238   	; 0x52a0 <_Z10eraseentryPc>
    5f46:	0b c0       	rjmp	.+22     	; 0x5f5e <_Z12getstatementv+0x16a>
		} 
#if !defined(TINY_BUILD)
		else if (sym == s_mul) nukeeeprom();
    5f48:	8e b3       	in	r24, 0x1e	; 30
    5f4a:	8a 32       	cpi	r24, 0x2A	; 42
    5f4c:	11 f4       	brne	.+4      	; 0x5f52 <_Z12getstatementv+0x15e>
    5f4e:	21 db       	rcall	.-2494   	; 0x5592 <_Z10nukeeepromv>
    5f50:	06 c0       	rjmp	.+12     	; 0x5f5e <_Z12getstatementv+0x16a>
#endif
		else if (sym != s_undef) expected(M_id);
    5f52:	8e b3       	in	r24, 0x1e	; 30
    5f54:	80 38       	cpi	r24, 0x80	; 128
    5f56:	19 f0       	breq	.+6      	; 0x5f5e <_Z12getstatementv+0x16a>
    5f58:	87 e1       	ldi	r24, 0x17	; 23
    5f5a:	0e 94 f5 20 	call	0x41ea	; 0x41ea <_Z8expectedh>
		getsym();
    5f5e:	0e 94 47 20 	call	0x408e	; 0x408e <_Z6getsymv>
    5f62:	86 c0       	rjmp	.+268    	; 0x6070 <_Z12getstatementv+0x27c>
	}
	else if (sym == s_ls) 	{ getsym(); cmd_ls(); }
    5f64:	8e b3       	in	r24, 0x1e	; 30
    5f66:	8c 39       	cpi	r24, 0x9C	; 156
    5f68:	21 f4       	brne	.+8      	; 0x5f72 <_Z12getstatementv+0x17e>
    5f6a:	0e 94 47 20 	call	0x408e	; 0x408e <_Z6getsymv>
    5f6e:	48 da       	rcall	.-2928   	; 0x5400 <_Z6cmd_lsv>
    5f70:	7f c0       	rjmp	.+254    	; 0x6070 <_Z12getstatementv+0x27c>
#if !defined(TINY_BUILD)
	else if (sym == s_boot) cmd_boot();
    5f72:	8e b3       	in	r24, 0x1e	; 30
    5f74:	89 39       	cpi	r24, 0x99	; 153
    5f76:	11 f4       	brne	.+4      	; 0x5f7c <_Z12getstatementv+0x188>
    5f78:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <_Z8cmd_bootv>
	else if (sym == s_ps) 	{ getsym();	showTaskList(); }
    5f7c:	8e b3       	in	r24, 0x1e	; 30
    5f7e:	87 39       	cpi	r24, 0x97	; 151
    5f80:	21 f4       	brne	.+8      	; 0x5f8a <_Z12getstatementv+0x196>
    5f82:	0e 94 47 20 	call	0x408e	; 0x408e <_Z6getsymv>
    5f86:	66 da       	rcall	.-2868   	; 0x5454 <_Z12showTaskListv>
    5f88:	73 c0       	rjmp	.+230    	; 0x6070 <_Z12getstatementv+0x27c>
	else if (sym == s_peep) { getsym(); cmd_peep(); }
    5f8a:	8e b3       	in	r24, 0x1e	; 30
    5f8c:	8a 39       	cpi	r24, 0x9A	; 154
    5f8e:	21 f4       	brne	.+8      	; 0x5f98 <_Z12getstatementv+0x1a4>
    5f90:	0e 94 47 20 	call	0x408e	; 0x408e <_Z6getsymv>
    5f94:	96 da       	rcall	.-2772   	; 0x54c2 <_Z8cmd_peepv>
    5f96:	6c c0       	rjmp	.+216    	; 0x6070 <_Z12getstatementv+0x27c>
	else if (sym == s_help) { getsym(); cmd_help(); }
    5f98:	8e b3       	in	r24, 0x1e	; 30
    5f9a:	8b 39       	cpi	r24, 0x9B	; 155
    5f9c:	21 f4       	brne	.+8      	; 0x5fa6 <_Z12getstatementv+0x1b2>
    5f9e:	0e 94 47 20 	call	0x408e	; 0x408e <_Z6getsymv>
    5fa2:	bd d5       	rcall	.+2938   	; 0x6b1e <_Z8cmd_helpv>
    5fa4:	65 c0       	rjmp	.+202    	; 0x6070 <_Z12getstatementv+0x27c>
#endif
	else if (sym == s_print) { getsym(); cmd_print(); }
    5fa6:	8e b3       	in	r24, 0x1e	; 30
    5fa8:	8d 39       	cpi	r24, 0x9D	; 157
    5faa:	21 f4       	brne	.+8      	; 0x5fb4 <_Z12getstatementv+0x1c0>
    5fac:	0e 94 47 20 	call	0x408e	; 0x408e <_Z6getsymv>
    5fb0:	55 d4       	rcall	.+2218   	; 0x685c <_Z9cmd_printv>
    5fb2:	5e c0       	rjmp	.+188    	; 0x6070 <_Z12getstatementv+0x27c>
	else if (sym == s_semi)	{ ; }	// ;)
    5fb4:	8e b3       	in	r24, 0x1e	; 30
    5fb6:	8b 33       	cpi	r24, 0x3B	; 59
    5fb8:	09 f4       	brne	.+2      	; 0x5fbc <_Z12getstatementv+0x1c8>
    5fba:	5a c0       	rjmp	.+180    	; 0x6070 <_Z12getstatementv+0x27c>
		getsym();						// and re-prime the parser
	}
#endif

	else {
	    getexpression();
    5fbc:	4d d3       	rcall	.+1690   	; 0x6658 <_Z13getexpressionv>
	    retval = expval;
    5fbe:	c0 90 61 2b 	lds	r12, 0x2B61
    5fc2:	d0 90 62 2b 	lds	r13, 0x2B62
    5fc6:	e0 90 63 2b 	lds	r14, 0x2B63
    5fca:	f0 90 64 2b 	lds	r15, 0x2B64
	}

	if (sym == s_semi) getsym();		// eat trailing ';'
    5fce:	8e b3       	in	r24, 0x1e	; 30
    5fd0:	8b 33       	cpi	r24, 0x3B	; 59
    5fd2:	09 f0       	breq	.+2      	; 0x5fd6 <_Z12getstatementv+0x1e2>
    5fd4:	51 c0       	rjmp	.+162    	; 0x6078 <_Z12getstatementv+0x284>
    5fd6:	0e 94 47 20 	call	0x408e	; 0x408e <_Z6getsymv>
    5fda:	4e c0       	rjmp	.+156    	; 0x6078 <_Z12getstatementv+0x284>
		}
	}
	else if (sym == s_lcurly) {
		getsym(); 	// eat "{"
		while ((sym != s_eof) && (sym != s_returning) && (sym != s_rcurly)) retval = getstatement();
		if (sym == s_rcurly) getsym();	// eat "}"
    5fdc:	8e b3       	in	r24, 0x1e	; 30
    5fde:	8d 37       	cpi	r24, 0x7D	; 125
    5fe0:	b1 f7       	brne	.-20     	; 0x5fce <_Z12getstatementv+0x1da>
    5fe2:	0e 94 47 20 	call	0x408e	; 0x408e <_Z6getsymv>
    5fe6:	f3 cf       	rjmp	.-26     	; 0x5fce <_Z12getstatementv+0x1da>
			}
		}
	}
	else if (sym == s_lcurly) {
		getsym(); 	// eat "{"
		while ((sym != s_eof) && (sym != s_returning) && (sym != s_rcurly)) retval = getstatement();
    5fe8:	05 df       	rcall	.-502    	; 0x5df4 <_Z12getstatementv>
    5fea:	6b 01       	movw	r12, r22
    5fec:	7c 01       	movw	r14, r24
    5fee:	50 cf       	rjmp	.-352    	; 0x5e90 <_Z12getstatementv+0x9c>
		if (sym == s_rcurly) getsym();	// eat "}"
	}
	else if (sym == s_return) {
		getsym();	// eat "return"
		if ((sym != s_eof) && (sym != s_semi)) retval = getnum();
    5ff0:	59 d3       	rcall	.+1714   	; 0x66a4 <_Z6getnumv>
    5ff2:	6b 01       	movw	r12, r22
    5ff4:	7c 01       	movw	r14, r24
    5ff6:	68 cf       	rjmp	.-304    	; 0x5ec8 <_Z12getstatementv+0xd4>
		if ((sym != s_script_eeprom) && (sym != s_script_progmem) &&
			(sym != s_script_file)) unexpected(M_id);

		// address of macroid is in symval via parseid
		// check for [,snoozeintervalms]
		getsym();	// eat macroid to check for comma; symval untouched
    5ff8:	0e 94 47 20 	call	0x408e	; 0x408e <_Z6getsymv>
		if (sym == s_comma) {
    5ffc:	8e b3       	in	r24, 0x1e	; 30
    5ffe:	8c 32       	cpi	r24, 0x2C	; 44
    6000:	e1 f4       	brne	.+56     	; 0x603a <_Z12getstatementv+0x246>
			vpush(symval);
    6002:	60 91 66 2b 	lds	r22, 0x2B66
    6006:	70 91 67 2b 	lds	r23, 0x2B67
    600a:	80 91 68 2b 	lds	r24, 0x2B68
    600e:	90 91 69 2b 	lds	r25, 0x2B69
    6012:	0e 94 0b 25 	call	0x4a16	; 0x4a16 <_Z5vpushl>
			getsym();			// eat the comma
    6016:	0e 94 47 20 	call	0x408e	; 0x408e <_Z6getsymv>
			getnum();			// get a number or else
    601a:	44 d3       	rcall	.+1672   	; 0x66a4 <_Z6getnumv>
			startTask(vpop(), expval);
    601c:	c0 90 61 2b 	lds	r12, 0x2B61
    6020:	d0 90 62 2b 	lds	r13, 0x2B62
    6024:	e0 90 63 2b 	lds	r14, 0x2B63
    6028:	f0 90 64 2b 	lds	r15, 0x2B64
    602c:	0e 94 a5 24 	call	0x494a	; 0x494a <_Z4vpopv>
    6030:	dc 01       	movw	r26, r24
    6032:	cb 01       	movw	r24, r22
    6034:	b7 01       	movw	r22, r14
    6036:	a6 01       	movw	r20, r12
    6038:	07 c0       	rjmp	.+14     	; 0x6048 <_Z12getstatementv+0x254>
		}
		else startTask(symval, 0);
    603a:	40 e0       	ldi	r20, 0x00	; 0
    603c:	50 e0       	ldi	r21, 0x00	; 0
    603e:	ba 01       	movw	r22, r20
    6040:	80 91 66 2b 	lds	r24, 0x2B66
    6044:	90 91 67 2b 	lds	r25, 0x2B67
    6048:	0e 94 b1 27 	call	0x4f62	; 0x4f62 <_Z9startTaskil>
    604c:	11 c0       	rjmp	.+34     	; 0x6070 <_Z12getstatementv+0x27c>
	else if (sym == s_function) cmd_function();

	else if (sym == s_run) {	// run macroname
		getsym();
		if ((sym != s_script_eeprom) && (sym != s_script_progmem) &&
			(sym != s_script_file)) unexpected(M_id);
    604e:	87 e1       	ldi	r24, 0x17	; 23
    6050:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <_Z10unexpectedh>
		if (sym == s_mul) {						// stop * stops all tasks
			initTaskList();
			getsym();
		}
		else if ((sym == s_semi) || (sym == s_eof)) {
			if (background) stopTask(curtask);	// stop with no args stops the current task IF we're in back
    6054:	80 91 96 26 	lds	r24, 0x2696
    6058:	88 23       	and	r24, r24
    605a:	19 f0       	breq	.+6      	; 0x6062 <_Z12getstatementv+0x26e>
    605c:	80 91 94 26 	lds	r24, 0x2694
    6060:	05 c0       	rjmp	.+10     	; 0x606c <_Z12getstatementv+0x278>
			else initTaskList();				// in foreground, stop all
    6062:	0e 94 9c 27 	call	0x4f38	; 0x4f38 <_Z12initTaskListv>
    6066:	04 c0       	rjmp	.+8      	; 0x6070 <_Z12getstatementv+0x27c>
		}
		else 
#endif
			stopTask(getnum());
    6068:	1d d3       	rcall	.+1594   	; 0x66a4 <_Z6getnumv>
    606a:	86 2f       	mov	r24, r22
    606c:	0e 94 a4 27 	call	0x4f48	; 0x4f48 <_Z8stopTaskh>
}


// Get a statement
numvar getstatement(void) {
numvar retval = 0;
    6070:	c1 2c       	mov	r12, r1
    6072:	d1 2c       	mov	r13, r1
    6074:	76 01       	movw	r14, r12
    6076:	ab cf       	rjmp	.-170    	; 0x5fce <_Z12getstatementv+0x1da>
	    retval = expval;
	}

	if (sym == s_semi) getsym();		// eat trailing ';'
	return retval;
}
    6078:	c7 01       	movw	r24, r14
    607a:	b6 01       	movw	r22, r12
    607c:	0f 90       	pop	r0
    607e:	0f 90       	pop	r0
    6080:	0f 90       	pop	r0
    6082:	0f 90       	pop	r0
    6084:	0f 90       	pop	r0
    6086:	df 91       	pop	r29
    6088:	cf 91       	pop	r28
    608a:	ff 90       	pop	r15
    608c:	ef 90       	pop	r14
    608e:	df 90       	pop	r13
    6090:	cf 90       	pop	r12
    6092:	08 95       	ret

00006094 <_Z16getstatementlistv>:

// Parse and execute a list of statements separated by semicolons
//
//
numvar getstatementlist(void) {
numvar retval = 0;
    6094:	60 e0       	ldi	r22, 0x00	; 0
    6096:	70 e0       	ldi	r23, 0x00	; 0
    6098:	cb 01       	movw	r24, r22
	while ((sym != s_eof) && (sym != s_returning)) retval = getstatement();
    609a:	2e b3       	in	r18, 0x1e	; 30
    609c:	22 23       	and	r18, r18
    609e:	29 f0       	breq	.+10     	; 0x60aa <_Z16getstatementlistv+0x16>
    60a0:	2e b3       	in	r18, 0x1e	; 30
    60a2:	20 3a       	cpi	r18, 0xA0	; 160
    60a4:	11 f0       	breq	.+4      	; 0x60aa <_Z16getstatementlistv+0x16>
    60a6:	a6 de       	rcall	.-692    	; 0x5df4 <_Z12getstatementv>
    60a8:	f8 cf       	rjmp	.-16     	; 0x609a <_Z16getstatementlistv+0x6>
	return retval;
}
    60aa:	08 95       	ret

000060ac <_Z10execscripthlPc>:
//	This is used in doCommand to execute a passed-in or collected text command,
// in domacrocommand() when a macro/function is called from within a parse stream,
//	and in runBackgroundTasks to kick off the background run.
//
//
numvar execscript(byte scripttype, numvar scriptaddress, char *scriptname) {
    60ac:	ef 92       	push	r14
    60ae:	ff 92       	push	r15
    60b0:	0f 93       	push	r16
    60b2:	1f 93       	push	r17
    60b4:	cf 93       	push	r28
    60b6:	df 93       	push	r29
    60b8:	cd b7       	in	r28, 0x3d	; 61
    60ba:	de b7       	in	r29, 0x3e	; 62
    60bc:	2d 97       	sbiw	r28, 0x0d	; 13
    60be:	0f b6       	in	r0, 0x3f	; 63
    60c0:	f8 94       	cli
    60c2:	de bf       	out	0x3e, r29	; 62
    60c4:	0f be       	out	0x3f, r0	; 63
    60c6:	cd bf       	out	0x3d, r28	; 61
    60c8:	8f 83       	std	Y+7, r24	; 0x07
    60ca:	48 87       	std	Y+8, r20	; 0x08
    60cc:	59 87       	std	Y+9, r21	; 0x09
    60ce:	6a 87       	std	Y+10, r22	; 0x0a
    60d0:	7b 87       	std	Y+11, r23	; 0x0b
    60d2:	3d 87       	std	Y+13, r19	; 0x0d
    60d4:	2c 87       	std	Y+12, r18	; 0x0c

	// save parse context
	parsepoint fetchmark;
	markparsepoint(&fetchmark);
    60d6:	ce 01       	movw	r24, r28
    60d8:	01 96       	adiw	r24, 0x01	; 1
    60da:	0e 94 86 20 	call	0x410c	; 0x410c <_Z14markparsepointP10parsepoint>
	byte thesym = sym;
    60de:	8e b3       	in	r24, 0x1e	; 30
    60e0:	8e 83       	std	Y+6, r24	; 0x06
	vpush(symval);
    60e2:	60 91 66 2b 	lds	r22, 0x2B66
    60e6:	70 91 67 2b 	lds	r23, 0x2B67
    60ea:	80 91 68 2b 	lds	r24, 0x2B68
    60ee:	90 91 69 2b 	lds	r25, 0x2B69
    60f2:	0e 94 0b 25 	call	0x4a16	; 0x4a16 <_Z5vpushl>
	// if this is the first stream context in this invocation,
	// set up our error recovery point and init the value stack
	// otherwise we skip this to allow nested execution calls 
	// to properly return to top
	//
	if (fetchtype == SCRIPT_NONE) {
    60f6:	80 91 6e 2b 	lds	r24, 0x2B6E
    60fa:	81 11       	cpse	r24, r1
    60fc:	1b c0       	rjmp	.+54     	; 0x6134 <_Z10execscripthlPc+0x88>

		// Exceptions come here via longjmp; see bitlash-error.c
		switch(setjmp(env)) {
    60fe:	88 e1       	ldi	r24, 0x18	; 24
    6100:	96 e2       	ldi	r25, 0x26	; 38
    6102:	0e 94 84 b4 	call	0x16908	; 0x16908 <setjmp>
    6106:	01 97       	sbiw	r24, 0x01	; 1
    6108:	a9 f4       	brne	.+42     	; 0x6134 <_Z10execscripthlPc+0x88>
				//	
				// TODO: if the macro "onerror" exists, call it here instead.  Let it "stop *".
				//
				// -br
				//
				initTaskList();		// stop all pending tasks
    610a:	0e 94 9c 27 	call	0x4f38	; 0x4f38 <_Z12initTaskListv>
#define NUMPINS 32				// default to Arduino Diecimila/168..328
#endif
int bittime[NUMPINS];			// bit times (1000000/baud) per pin, 0 = uninitialized

// set output back to 'stdout' ;)
void resetOutput(void) { outpin = DEFAULT_OUTPIN; }
    610e:	10 92 d9 26 	sts	0x26D9, r1

#ifdef SOFTWARE_SERIAL_TX
				resetOutput();		// clean up print module
#endif
				// Other cleanups here
				vinit();			// initialize the expression stack
    6112:	0e 94 24 25 	call	0x4a48	; 0x4a48 <_Z5vinitv>
				fetchtype = SCRIPT_NONE;	// reset parse context
    6116:	10 92 6e 2b 	sts	0x2B6E, r1
				fetchptr = 0L;				// reset parse location
    611a:	10 92 6a 2b 	sts	0x2B6A, r1
    611e:	10 92 6b 2b 	sts	0x2B6B, r1
    6122:	10 92 6c 2b 	sts	0x2B6C, r1
    6126:	10 92 6d 2b 	sts	0x2B6D, r1
				// sd_up = 0;				// TODO: reset file system
				return (numvar) -1;
    612a:	6f ef       	ldi	r22, 0xFF	; 255
    612c:	7f ef       	ldi	r23, 0xFF	; 255
    612e:	8f ef       	ldi	r24, 0xFF	; 255
    6130:	9f ef       	ldi	r25, 0xFF	; 255
    6132:	1f c0       	rjmp	.+62     	; 0x6172 <_Z10execscripthlPc+0xc6>
			}							// X_EXIT case
		}								// switch
	}
	initparsepoint(scripttype, scriptaddress, scriptname);
    6134:	2c 85       	ldd	r18, Y+12	; 0x0c
    6136:	3d 85       	ldd	r19, Y+13	; 0x0d
    6138:	48 85       	ldd	r20, Y+8	; 0x08
    613a:	59 85       	ldd	r21, Y+9	; 0x09
    613c:	6a 85       	ldd	r22, Y+10	; 0x0a
    613e:	7b 85       	ldd	r23, Y+11	; 0x0b
    6140:	8f 81       	ldd	r24, Y+7	; 0x07
    6142:	75 da       	rcall	.-2838   	; 0x562e <_Z14initparsepointhlPc>
	getsym();
    6144:	0e 94 47 20 	call	0x408e	; 0x408e <_Z6getsymv>

	// interpret the function text and collect its result
	numvar ret = getstatementlist();
    6148:	a5 df       	rcall	.-182    	; 0x6094 <_Z16getstatementlistv>
    614a:	7b 01       	movw	r14, r22
    614c:	8c 01       	movw	r16, r24
	returntoparsepoint(&fetchmark, 1);		// now where were we?
    614e:	61 e0       	ldi	r22, 0x01	; 1
    6150:	ce 01       	movw	r24, r28
    6152:	01 96       	adiw	r24, 0x01	; 1
    6154:	b4 da       	rcall	.-2712   	; 0x56be <_Z18returntoparsepointP10parsepointh>
	sym = thesym;
    6156:	8e 81       	ldd	r24, Y+6	; 0x06
    6158:	8e bb       	out	0x1e, r24	; 30
	symval = vpop();
    615a:	0e 94 a5 24 	call	0x494a	; 0x494a <_Z4vpopv>
    615e:	60 93 66 2b 	sts	0x2B66, r22
    6162:	70 93 67 2b 	sts	0x2B67, r23
    6166:	80 93 68 2b 	sts	0x2B68, r24
    616a:	90 93 69 2b 	sts	0x2B69, r25
	return ret;
    616e:	b7 01       	movw	r22, r14
    6170:	c8 01       	movw	r24, r16
}
    6172:	2d 96       	adiw	r28, 0x0d	; 13
    6174:	0f b6       	in	r0, 0x3f	; 63
    6176:	f8 94       	cli
    6178:	de bf       	out	0x3e, r29	; 62
    617a:	0f be       	out	0x3f, r0	; 63
    617c:	cd bf       	out	0x3d, r28	; 61
    617e:	df 91       	pop	r29
    6180:	cf 91       	pop	r28
    6182:	1f 91       	pop	r17
    6184:	0f 91       	pop	r16
    6186:	ff 90       	pop	r15
    6188:	ef 90       	pop	r14
    618a:	08 95       	ret

0000618c <_Z18callscriptfunctionhl>:

/////////
//
// Call a Bitlash script function and push its return value on the stack
//
void callscriptfunction(byte scripttype, numvar scriptaddress) {
    618c:	cf 93       	push	r28
    618e:	df 93       	push	r29
    6190:	00 d0       	rcall	.+0      	; 0x6192 <_Z18callscriptfunctionhl+0x6>
    6192:	1f 92       	push	r1
    6194:	1f 92       	push	r1
    6196:	cd b7       	in	r28, 0x3d	; 61
    6198:	de b7       	in	r29, 0x3e	; 62
	// the function's name is the first data in the string pool slab
	// that will be deallocated when the function returns
	//
	// we can refer to this copy of the function's name via the callername macro
	//
	parsearglist();
    619a:	49 83       	std	Y+1, r20	; 0x01
    619c:	5a 83       	std	Y+2, r21	; 0x02
    619e:	6c 83       	std	Y+4, r22	; 0x04
    61a0:	7d 83       	std	Y+5, r23	; 0x05
    61a2:	8b 83       	std	Y+3, r24	; 0x03
    61a4:	90 d2       	rcall	.+1312   	; 0x66c6 <_Z12parsearglistv>
	numvar ret = execscript(scripttype, scriptaddress, calleename);
    61a6:	e0 91 44 2b 	lds	r30, 0x2B44
    61aa:	f0 91 45 2b 	lds	r31, 0x2B45
    61ae:	24 81       	ldd	r18, Z+4	; 0x04
    61b0:	35 81       	ldd	r19, Z+5	; 0x05
    61b2:	49 81       	ldd	r20, Y+1	; 0x01
    61b4:	5a 81       	ldd	r21, Y+2	; 0x02
    61b6:	6c 81       	ldd	r22, Y+4	; 0x04
    61b8:	7d 81       	ldd	r23, Y+5	; 0x05
    61ba:	8b 81       	ldd	r24, Y+3	; 0x03
    61bc:	77 df       	rcall	.-274    	; 0x60ac <_Z10execscripthlPc>
	releaseargblock();
    61be:	6c 83       	std	Y+4, r22	; 0x04
    61c0:	7d 83       	std	Y+5, r23	; 0x05
    61c2:	8b 83       	std	Y+3, r24	; 0x03
    61c4:	99 83       	std	Y+1, r25	; 0x01
    61c6:	0e 94 b9 24 	call	0x4972	; 0x4972 <_Z15releaseargblockv>
	vpush(ret);
    61ca:	6c 81       	ldd	r22, Y+4	; 0x04
    61cc:	7d 81       	ldd	r23, Y+5	; 0x05
    61ce:	8b 81       	ldd	r24, Y+3	; 0x03
    61d0:	99 81       	ldd	r25, Y+1	; 0x01
}
    61d2:	0f 90       	pop	r0
    61d4:	0f 90       	pop	r0
    61d6:	0f 90       	pop	r0
    61d8:	0f 90       	pop	r0
    61da:	0f 90       	pop	r0
    61dc:	df 91       	pop	r29
    61de:	cf 91       	pop	r28
	// we can refer to this copy of the function's name via the callername macro
	//
	parsearglist();
	numvar ret = execscript(scripttype, scriptaddress, calleename);
	releaseargblock();
	vpush(ret);
    61e0:	0c 94 0b 25 	jmp	0x4a16	; 0x4a16 <_Z5vpushl>

000061e4 <_Z9getfactorv>:
void getexpression(void);

//
//	Recursive descent parser, old-school style.
//
void getfactor(void) {
    61e4:	0f 93       	push	r16
    61e6:	1f 93       	push	r17
    61e8:	cf 93       	push	r28
    61ea:	df 93       	push	r29
    61ec:	00 d0       	rcall	.+0      	; 0x61ee <_Z9getfactorv+0xa>
    61ee:	cd b7       	in	r28, 0x3d	; 61
    61f0:	de b7       	in	r29, 0x3e	; 62
numvar thesymval = symval;
    61f2:	10 91 66 2b 	lds	r17, 0x2B66
    61f6:	50 91 67 2b 	lds	r21, 0x2B67
    61fa:	80 91 68 2b 	lds	r24, 0x2B68
    61fe:	90 91 69 2b 	lds	r25, 0x2B69
byte thesym = sym;
    6202:	0e b3       	in	r16, 0x1e	; 30
	getsym();		// eat the sym we just saved
    6204:	59 83       	std	Y+1, r21	; 0x01
    6206:	8a 83       	std	Y+2, r24	; 0x02
    6208:	9b 83       	std	Y+3, r25	; 0x03
    620a:	0e 94 47 20 	call	0x408e	; 0x408e <_Z6getsymv>

	switch (thesym) {
    620e:	59 81       	ldd	r21, Y+1	; 0x01
    6210:	8a 81       	ldd	r24, Y+2	; 0x02
    6212:	9b 81       	ldd	r25, Y+3	; 0x03
    6214:	03 38       	cpi	r16, 0x83	; 131
    6216:	09 f4       	brne	.+2      	; 0x621a <_Z9getfactorv+0x36>
    6218:	45 c0       	rjmp	.+138    	; 0x62a4 <_Z9getfactorv+0xc0>
    621a:	f0 f4       	brcc	.+60     	; 0x6258 <_Z9getfactorv+0x74>
    621c:	0a 32       	cpi	r16, 0x2A	; 42
    621e:	09 f4       	brne	.+2      	; 0x6222 <_Z9getfactorv+0x3e>
    6220:	86 c1       	rjmp	.+780    	; 0x652e <_Z9getfactorv+0x34a>
    6222:	50 f4       	brcc	.+20     	; 0x6238 <_Z9getfactorv+0x54>
    6224:	06 32       	cpi	r16, 0x26	; 38
    6226:	09 f4       	brne	.+2      	; 0x622a <_Z9getfactorv+0x46>
    6228:	63 c1       	rjmp	.+710    	; 0x64f0 <_Z9getfactorv+0x30c>
    622a:	08 32       	cpi	r16, 0x28	; 40
    622c:	09 f4       	brne	.+2      	; 0x6230 <_Z9getfactorv+0x4c>
    622e:	23 c1       	rjmp	.+582    	; 0x6476 <_Z9getfactorv+0x292>
    6230:	01 32       	cpi	r16, 0x21	; 33
    6232:	09 f0       	breq	.+2      	; 0x6236 <_Z9getfactorv+0x52>
    6234:	8d c1       	rjmp	.+794    	; 0x6550 <_Z9getfactorv+0x36c>
    6236:	4b c1       	rjmp	.+662    	; 0x64ce <_Z9getfactorv+0x2ea>
    6238:	0d 32       	cpi	r16, 0x2D	; 45
    623a:	09 f4       	brne	.+2      	; 0x623e <_Z9getfactorv+0x5a>
    623c:	35 c1       	rjmp	.+618    	; 0x64a8 <_Z9getfactorv+0x2c4>
    623e:	18 f4       	brcc	.+6      	; 0x6246 <_Z9getfactorv+0x62>
    6240:	0b 32       	cpi	r16, 0x2B	; 43
    6242:	b9 f2       	breq	.-82     	; 0x61f2 <_Z9getfactorv+0xe>
    6244:	85 c1       	rjmp	.+778    	; 0x6550 <_Z9getfactorv+0x36c>
    6246:	0e 37       	cpi	r16, 0x7E	; 126
    6248:	09 f4       	brne	.+2      	; 0x624c <_Z9getfactorv+0x68>
    624a:	39 c1       	rjmp	.+626    	; 0x64be <_Z9getfactorv+0x2da>
    624c:	01 38       	cpi	r16, 0x81	; 129
    624e:	09 f0       	breq	.+2      	; 0x6252 <_Z9getfactorv+0x6e>
    6250:	7f c1       	rjmp	.+766    	; 0x6550 <_Z9getfactorv+0x36c>
		case s_nval:
			vpush(thesymval);
    6252:	61 2f       	mov	r22, r17
    6254:	75 2f       	mov	r23, r21
    6256:	73 c1       	rjmp	.+742    	; 0x653e <_Z9getfactorv+0x35a>
void getfactor(void) {
numvar thesymval = symval;
byte thesym = sym;
	getsym();		// eat the sym we just saved

	switch (thesym) {
    6258:	02 39       	cpi	r16, 0x92	; 146
    625a:	09 f4       	brne	.+2      	; 0x625e <_Z9getfactorv+0x7a>
    625c:	b0 c0       	rjmp	.+352    	; 0x63be <_Z9getfactorv+0x1da>
    625e:	78 f4       	brcc	.+30     	; 0x627e <_Z9getfactorv+0x9a>
    6260:	0d 38       	cpi	r16, 0x8D	; 141
    6262:	09 f4       	brne	.+2      	; 0x6266 <_Z9getfactorv+0x82>
    6264:	dd c0       	rjmp	.+442    	; 0x6420 <_Z9getfactorv+0x23c>
    6266:	20 f4       	brcc	.+8      	; 0x6270 <_Z9getfactorv+0x8c>
    6268:	0c 38       	cpi	r16, 0x8C	; 140
    626a:	09 f4       	brne	.+2      	; 0x626e <_Z9getfactorv+0x8a>
    626c:	c3 c0       	rjmp	.+390    	; 0x63f4 <_Z9getfactorv+0x210>
    626e:	70 c1       	rjmp	.+736    	; 0x6550 <_Z9getfactorv+0x36c>
    6270:	0e 38       	cpi	r16, 0x8E	; 142
    6272:	09 f4       	brne	.+2      	; 0x6276 <_Z9getfactorv+0x92>
    6274:	77 c0       	rjmp	.+238    	; 0x6364 <_Z9getfactorv+0x180>
    6276:	01 39       	cpi	r16, 0x91	; 145
    6278:	09 f4       	brne	.+2      	; 0x627c <_Z9getfactorv+0x98>
    627a:	93 c0       	rjmp	.+294    	; 0x63a2 <_Z9getfactorv+0x1be>
    627c:	69 c1       	rjmp	.+722    	; 0x6550 <_Z9getfactorv+0x36c>
    627e:	03 3a       	cpi	r16, 0xA3	; 163
    6280:	09 f4       	brne	.+2      	; 0x6284 <_Z9getfactorv+0xa0>
    6282:	79 c0       	rjmp	.+242    	; 0x6376 <_Z9getfactorv+0x192>
    6284:	20 f4       	brcc	.+8      	; 0x628e <_Z9getfactorv+0xaa>
    6286:	01 3a       	cpi	r16, 0xA1	; 161
    6288:	09 f4       	brne	.+2      	; 0x628c <_Z9getfactorv+0xa8>
    628a:	e2 c0       	rjmp	.+452    	; 0x6450 <_Z9getfactorv+0x26c>
    628c:	61 c1       	rjmp	.+706    	; 0x6550 <_Z9getfactorv+0x36c>
    628e:	04 3a       	cpi	r16, 0xA4	; 164
    6290:	09 f4       	brne	.+2      	; 0x6294 <_Z9getfactorv+0xb0>
    6292:	7c c0       	rjmp	.+248    	; 0x638c <_Z9getfactorv+0x1a8>
    6294:	05 3a       	cpi	r16, 0xA5	; 165
    6296:	09 f0       	breq	.+2      	; 0x629a <_Z9getfactorv+0xb6>
    6298:	5b c1       	rjmp	.+694    	; 0x6550 <_Z9getfactorv+0x36c>
		case s_script_progmem:
			callscriptfunction(SCRIPT_PROGMEM, thesymval);
			break;

		case s_script_file:
			callscriptfunction(SCRIPT_FILE, (numvar) 0);	// name implicitly in idbuf!
    629a:	40 e0       	ldi	r20, 0x00	; 0
    629c:	50 e0       	ldi	r21, 0x00	; 0
    629e:	ba 01       	movw	r22, r20
    62a0:	84 e0       	ldi	r24, 0x04	; 4
    62a2:	77 c0       	rjmp	.+238    	; 0x6392 <_Z9getfactorv+0x1ae>
		case s_nval:
			vpush(thesymval);
			break;
			
		case s_nvar:
			if (sym == s_equals) {		// assignment, push is after the break;
    62a4:	8e b3       	in	r24, 0x1e	; 30
    62a6:	01 2f       	mov	r16, r17
    62a8:	10 e0       	ldi	r17, 0x00	; 0
    62aa:	8d 33       	cpi	r24, 0x3D	; 61
    62ac:	79 f4       	brne	.+30     	; 0x62cc <_Z9getfactorv+0xe8>
				getsym();
    62ae:	0e 94 47 20 	call	0x408e	; 0x408e <_Z6getsymv>
				assignVar(thesymval, getnum());
    62b2:	f8 d1       	rcall	.+1008   	; 0x66a4 <_Z6getnumv>
// Numeric variables
#ifndef NUMVARS
#define NUMVARS 26
#endif
numvar vars[NUMVARS];		// 'a' through 'z'
void assignVar(byte id, numvar value) { vars[id] = value; }
    62b4:	f8 01       	movw	r30, r16
    62b6:	ee 0f       	add	r30, r30
    62b8:	ff 1f       	adc	r31, r31
    62ba:	ee 0f       	add	r30, r30
    62bc:	ff 1f       	adc	r31, r31
    62be:	e6 52       	subi	r30, 0x26	; 38
    62c0:	f9 4d       	sbci	r31, 0xD9	; 217
    62c2:	60 83       	st	Z, r22
    62c4:	71 83       	std	Z+1, r23	; 0x01
    62c6:	82 83       	std	Z+2, r24	; 0x02
    62c8:	93 83       	std	Z+3, r25	; 0x03
    62ca:	40 c0       	rjmp	.+128    	; 0x634c <_Z9getfactorv+0x168>
		case s_nvar:
			if (sym == s_equals) {		// assignment, push is after the break;
				getsym();
				assignVar(thesymval, getnum());
			}
			else if (sym == s_incr) {	// postincrement nvar++
    62cc:	8e b3       	in	r24, 0x1e	; 30
    62ce:	8c 38       	cpi	r24, 0x8C	; 140
    62d0:	b9 f4       	brne	.+46     	; 0x6300 <_Z9getfactorv+0x11c>
#ifndef NUMVARS
#define NUMVARS 26
#endif
numvar vars[NUMVARS];		// 'a' through 'z'
void assignVar(byte id, numvar value) { vars[id] = value; }
numvar getVar(byte id) { return vars[id]; }
    62d2:	00 0f       	add	r16, r16
    62d4:	11 1f       	adc	r17, r17
    62d6:	00 0f       	add	r16, r16
    62d8:	11 1f       	adc	r17, r17
    62da:	06 52       	subi	r16, 0x26	; 38
    62dc:	19 4d       	sbci	r17, 0xD9	; 217
			if (sym == s_equals) {		// assignment, push is after the break;
				getsym();
				assignVar(thesymval, getnum());
			}
			else if (sym == s_incr) {	// postincrement nvar++
				vpush(getVar(thesymval));
    62de:	f8 01       	movw	r30, r16
    62e0:	60 81       	ld	r22, Z
    62e2:	71 81       	ldd	r23, Z+1	; 0x01
    62e4:	82 81       	ldd	r24, Z+2	; 0x02
    62e6:	93 81       	ldd	r25, Z+3	; 0x03
    62e8:	0e 94 0b 25 	call	0x4a16	; 0x4a16 <_Z5vpushl>
				assignVar(thesymval, getVar(thesymval) + 1);
    62ec:	f8 01       	movw	r30, r16
    62ee:	40 81       	ld	r20, Z
    62f0:	51 81       	ldd	r21, Z+1	; 0x01
    62f2:	62 81       	ldd	r22, Z+2	; 0x02
    62f4:	73 81       	ldd	r23, Z+3	; 0x03
    62f6:	4f 5f       	subi	r20, 0xFF	; 255
    62f8:	5f 4f       	sbci	r21, 0xFF	; 255
    62fa:	6f 4f       	sbci	r22, 0xFF	; 255
    62fc:	7f 4f       	sbci	r23, 0xFF	; 255
    62fe:	19 c0       	rjmp	.+50     	; 0x6332 <_Z9getfactorv+0x14e>
				getsym();
				break;
			}
			else if (sym == s_decr) {	// postdecrement nvar--
    6300:	8e b3       	in	r24, 0x1e	; 30
    6302:	8d 38       	cpi	r24, 0x8D	; 141
    6304:	19 f5       	brne	.+70     	; 0x634c <_Z9getfactorv+0x168>
#ifndef NUMVARS
#define NUMVARS 26
#endif
numvar vars[NUMVARS];		// 'a' through 'z'
void assignVar(byte id, numvar value) { vars[id] = value; }
numvar getVar(byte id) { return vars[id]; }
    6306:	00 0f       	add	r16, r16
    6308:	11 1f       	adc	r17, r17
    630a:	00 0f       	add	r16, r16
    630c:	11 1f       	adc	r17, r17
    630e:	06 52       	subi	r16, 0x26	; 38
    6310:	19 4d       	sbci	r17, 0xD9	; 217
				assignVar(thesymval, getVar(thesymval) + 1);
				getsym();
				break;
			}
			else if (sym == s_decr) {	// postdecrement nvar--
				vpush(getVar(thesymval));
    6312:	f8 01       	movw	r30, r16
    6314:	60 81       	ld	r22, Z
    6316:	71 81       	ldd	r23, Z+1	; 0x01
    6318:	82 81       	ldd	r24, Z+2	; 0x02
    631a:	93 81       	ldd	r25, Z+3	; 0x03
    631c:	0e 94 0b 25 	call	0x4a16	; 0x4a16 <_Z5vpushl>
				assignVar(thesymval, getVar(thesymval) - 1);
    6320:	f8 01       	movw	r30, r16
    6322:	40 81       	ld	r20, Z
    6324:	51 81       	ldd	r21, Z+1	; 0x01
    6326:	62 81       	ldd	r22, Z+2	; 0x02
    6328:	73 81       	ldd	r23, Z+3	; 0x03
    632a:	41 50       	subi	r20, 0x01	; 1
    632c:	51 09       	sbc	r21, r1
    632e:	61 09       	sbc	r22, r1
    6330:	71 09       	sbc	r23, r1
// Numeric variables
#ifndef NUMVARS
#define NUMVARS 26
#endif
numvar vars[NUMVARS];		// 'a' through 'z'
void assignVar(byte id, numvar value) { vars[id] = value; }
    6332:	40 83       	st	Z, r20
    6334:	51 83       	std	Z+1, r21	; 0x01
    6336:	62 83       	std	Z+2, r22	; 0x02
    6338:	73 83       	std	Z+3, r23	; 0x03

		default: 
			unexpected(M_number);
	}

}
    633a:	0f 90       	pop	r0
    633c:	0f 90       	pop	r0
    633e:	0f 90       	pop	r0
    6340:	df 91       	pop	r29
    6342:	cf 91       	pop	r28
    6344:	1f 91       	pop	r17
    6346:	0f 91       	pop	r16
				break;
			}
			else if (sym == s_decr) {	// postdecrement nvar--
				vpush(getVar(thesymval));
				assignVar(thesymval, getVar(thesymval) - 1);
				getsym();
    6348:	0c 94 47 20 	jmp	0x408e	; 0x408e <_Z6getsymv>
#ifndef NUMVARS
#define NUMVARS 26
#endif
numvar vars[NUMVARS];		// 'a' through 'z'
void assignVar(byte id, numvar value) { vars[id] = value; }
numvar getVar(byte id) { return vars[id]; }
    634c:	f8 01       	movw	r30, r16
    634e:	ee 0f       	add	r30, r30
    6350:	ff 1f       	adc	r31, r31
    6352:	ee 0f       	add	r30, r30
    6354:	ff 1f       	adc	r31, r31
    6356:	e6 52       	subi	r30, 0x26	; 38
    6358:	f9 4d       	sbci	r31, 0xD9	; 217
				vpush(getVar(thesymval));
				assignVar(thesymval, getVar(thesymval) - 1);
				getsym();
				break;
			}
			vpush(getVar(thesymval));			// both assignment and reference get pushed here
    635a:	60 81       	ld	r22, Z
    635c:	71 81       	ldd	r23, Z+1	; 0x01
    635e:	82 81       	ldd	r24, Z+2	; 0x02
    6360:	93 81       	ldd	r25, Z+3	; 0x03
    6362:	ed c0       	rjmp	.+474    	; 0x653e <_Z9getfactorv+0x35a>
			break;

		case s_nfunct:
			dofunctioncall(thesymval);			// get its value onto the stack
    6364:	81 2f       	mov	r24, r17

		default: 
			unexpected(M_number);
	}

}
    6366:	0f 90       	pop	r0
    6368:	0f 90       	pop	r0
    636a:	0f 90       	pop	r0
    636c:	df 91       	pop	r29
    636e:	cf 91       	pop	r28
    6370:	1f 91       	pop	r17
    6372:	0f 91       	pop	r16
			}
			vpush(getVar(thesymval));			// both assignment and reference get pushed here
			break;

		case s_nfunct:
			dofunctioncall(thesymval);			// get its value onto the stack
    6374:	40 c2       	rjmp	.+1152   	; 0x67f6 <_Z14dofunctioncallh>
			break;

		// Script-function-returning-value used as a factor
		case s_script_eeprom:				// macro returning value
			callscriptfunction(SCRIPT_EEPROM, findend(thesymval));
    6376:	81 2f       	mov	r24, r17
    6378:	95 2f       	mov	r25, r21
    637a:	0e 94 ac 28 	call	0x5158	; 0x5158 <_Z7findendi>
    637e:	ac 01       	movw	r20, r24
    6380:	66 27       	eor	r22, r22
    6382:	57 fd       	sbrc	r21, 7
    6384:	60 95       	com	r22
    6386:	76 2f       	mov	r23, r22
    6388:	83 e0       	ldi	r24, 0x03	; 3
    638a:	03 c0       	rjmp	.+6      	; 0x6392 <_Z9getfactorv+0x1ae>
			break;

		case s_script_progmem:
			callscriptfunction(SCRIPT_PROGMEM, thesymval);
    638c:	41 2f       	mov	r20, r17
    638e:	bc 01       	movw	r22, r24
    6390:	82 e0       	ldi	r24, 0x02	; 2

		default: 
			unexpected(M_number);
	}

}
    6392:	0f 90       	pop	r0
    6394:	0f 90       	pop	r0
    6396:	0f 90       	pop	r0
    6398:	df 91       	pop	r29
    639a:	cf 91       	pop	r28
    639c:	1f 91       	pop	r17
    639e:	0f 91       	pop	r16
		case s_script_eeprom:				// macro returning value
			callscriptfunction(SCRIPT_EEPROM, findend(thesymval));
			break;

		case s_script_progmem:
			callscriptfunction(SCRIPT_PROGMEM, thesymval);
    63a0:	f5 ce       	rjmp	.-534    	; 0x618c <_Z18callscriptfunctionhl>
		case s_script_file:
			callscriptfunction(SCRIPT_FILE, (numvar) 0);	// name implicitly in idbuf!
			break;

		case s_apin:					// analog pin reference like a0
			if (sym == s_equals) { 		// digitalWrite or analogWrite
    63a2:	8e b3       	in	r24, 0x1e	; 30
    63a4:	8d 33       	cpi	r24, 0x3D	; 61
    63a6:	39 f4       	brne	.+14     	; 0x63b6 <_Z9getfactorv+0x1d2>
				getsym();
    63a8:	0e 94 47 20 	call	0x408e	; 0x408e <_Z6getsymv>
				analogWrite(thesymval, getnum());
    63ac:	7b d1       	rcall	.+758    	; 0x66a4 <_Z6getnumv>
    63ae:	81 2f       	mov	r24, r17
    63b0:	0e 94 02 15 	call	0x2a04	; 0x2a04 <analogWrite>
    63b4:	0d c0       	rjmp	.+26     	; 0x63d0 <_Z9getfactorv+0x1ec>
				vpush(expval);
			}
			else vpush(analogRead(thesymval));
    63b6:	81 2f       	mov	r24, r17
    63b8:	0e 94 de 14 	call	0x29bc	; 0x29bc <analogRead>
    63bc:	15 c0       	rjmp	.+42     	; 0x63e8 <_Z9getfactorv+0x204>
			break;

		case s_dpin:					// digital pin reference like d1
			if (sym == s_equals) { 		// digitalWrite or analogWrite
    63be:	8e b3       	in	r24, 0x1e	; 30
    63c0:	8d 33       	cpi	r24, 0x3D	; 61
    63c2:	79 f4       	brne	.+30     	; 0x63e2 <_Z9getfactorv+0x1fe>
				getsym();
    63c4:	0e 94 47 20 	call	0x408e	; 0x408e <_Z6getsymv>
				digitalWrite(thesymval, getnum());
    63c8:	6d d1       	rcall	.+730    	; 0x66a4 <_Z6getnumv>
    63ca:	81 2f       	mov	r24, r17
    63cc:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <digitalWrite>
				vpush(expval);
    63d0:	60 91 61 2b 	lds	r22, 0x2B61
    63d4:	70 91 62 2b 	lds	r23, 0x2B62
    63d8:	80 91 63 2b 	lds	r24, 0x2B63
    63dc:	90 91 64 2b 	lds	r25, 0x2B64
    63e0:	ae c0       	rjmp	.+348    	; 0x653e <_Z9getfactorv+0x35a>
			}
			else vpush(digitalRead(thesymval));
    63e2:	81 2f       	mov	r24, r17
    63e4:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <digitalRead>
    63e8:	bc 01       	movw	r22, r24
    63ea:	88 27       	eor	r24, r24
    63ec:	77 fd       	sbrc	r23, 7
    63ee:	80 95       	com	r24
    63f0:	98 2f       	mov	r25, r24
    63f2:	a5 c0       	rjmp	.+330    	; 0x653e <_Z9getfactorv+0x35a>
			break;

		case s_incr:
			if (sym != s_nvar) expected(M_var);
    63f4:	8e b3       	in	r24, 0x1e	; 30
    63f6:	83 38       	cpi	r24, 0x83	; 131
    63f8:	11 f0       	breq	.+4      	; 0x63fe <_Z9getfactorv+0x21a>
    63fa:	8d e0       	ldi	r24, 0x0D	; 13
    63fc:	42 c0       	rjmp	.+132    	; 0x6482 <_Z9getfactorv+0x29e>
#ifndef NUMVARS
#define NUMVARS 26
#endif
numvar vars[NUMVARS];		// 'a' through 'z'
void assignVar(byte id, numvar value) { vars[id] = value; }
numvar getVar(byte id) { return vars[id]; }
    63fe:	e0 91 66 2b 	lds	r30, 0x2B66
    6402:	84 e0       	ldi	r24, 0x04	; 4
    6404:	e8 9f       	mul	r30, r24
    6406:	f0 01       	movw	r30, r0
    6408:	11 24       	eor	r1, r1
    640a:	e6 52       	subi	r30, 0x26	; 38
    640c:	f9 4d       	sbci	r31, 0xD9	; 217
			else vpush(digitalRead(thesymval));
			break;

		case s_incr:
			if (sym != s_nvar) expected(M_var);
			assignVar(symval, getVar(symval) + 1);
    640e:	60 81       	ld	r22, Z
    6410:	71 81       	ldd	r23, Z+1	; 0x01
    6412:	82 81       	ldd	r24, Z+2	; 0x02
    6414:	93 81       	ldd	r25, Z+3	; 0x03
    6416:	6f 5f       	subi	r22, 0xFF	; 255
    6418:	7f 4f       	sbci	r23, 0xFF	; 255
    641a:	8f 4f       	sbci	r24, 0xFF	; 255
    641c:	9f 4f       	sbci	r25, 0xFF	; 255
    641e:	13 c0       	rjmp	.+38     	; 0x6446 <_Z9getfactorv+0x262>
			vpush(getVar(symval));
			getsym();
			break;

		case s_decr:		// pre decrement
			if (sym != s_nvar) expected(M_var);
    6420:	8e b3       	in	r24, 0x1e	; 30
    6422:	83 38       	cpi	r24, 0x83	; 131
    6424:	51 f7       	brne	.-44     	; 0x63fa <_Z9getfactorv+0x216>
#ifndef NUMVARS
#define NUMVARS 26
#endif
numvar vars[NUMVARS];		// 'a' through 'z'
void assignVar(byte id, numvar value) { vars[id] = value; }
numvar getVar(byte id) { return vars[id]; }
    6426:	e0 91 66 2b 	lds	r30, 0x2B66
    642a:	84 e0       	ldi	r24, 0x04	; 4
    642c:	e8 9f       	mul	r30, r24
    642e:	f0 01       	movw	r30, r0
    6430:	11 24       	eor	r1, r1
    6432:	e6 52       	subi	r30, 0x26	; 38
    6434:	f9 4d       	sbci	r31, 0xD9	; 217
			getsym();
			break;

		case s_decr:		// pre decrement
			if (sym != s_nvar) expected(M_var);
			assignVar(symval, getVar(symval) - 1);
    6436:	60 81       	ld	r22, Z
    6438:	71 81       	ldd	r23, Z+1	; 0x01
    643a:	82 81       	ldd	r24, Z+2	; 0x02
    643c:	93 81       	ldd	r25, Z+3	; 0x03
    643e:	61 50       	subi	r22, 0x01	; 1
    6440:	71 09       	sbc	r23, r1
    6442:	81 09       	sbc	r24, r1
    6444:	91 09       	sbc	r25, r1
// Numeric variables
#ifndef NUMVARS
#define NUMVARS 26
#endif
numvar vars[NUMVARS];		// 'a' through 'z'
void assignVar(byte id, numvar value) { vars[id] = value; }
    6446:	60 83       	st	Z, r22
    6448:	71 83       	std	Z+1, r23	; 0x01
    644a:	82 83       	std	Z+2, r24	; 0x02
    644c:	93 83       	std	Z+3, r25	; 0x03
    644e:	29 c0       	rjmp	.+82     	; 0x64a2 <_Z9getfactorv+0x2be>
			vpush(getVar(symval));
			getsym();
			break;

		case s_arg:			// arg(n) - argument value
			if (sym != s_lparen) expectedchar(s_lparen);
    6450:	8e b3       	in	r24, 0x1e	; 30
    6452:	88 32       	cpi	r24, 0x28	; 40
    6454:	11 f0       	breq	.+4      	; 0x645a <_Z9getfactorv+0x276>
    6456:	88 e2       	ldi	r24, 0x28	; 40
    6458:	0c c0       	rjmp	.+24     	; 0x6472 <_Z9getfactorv+0x28e>
			getsym(); 		// eat '('
    645a:	0e 94 47 20 	call	0x408e	; 0x408e <_Z6getsymv>
			vpush(getarg(getnum()));
    645e:	22 d1       	rcall	.+580    	; 0x66a4 <_Z6getnumv>
    6460:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
    6464:	0e 94 0b 25 	call	0x4a16	; 0x4a16 <_Z5vpushl>
			if (sym != s_rparen) expectedchar(s_rparen);
    6468:	8e b3       	in	r24, 0x1e	; 30
    646a:	89 32       	cpi	r24, 0x29	; 41
    646c:	09 f4       	brne	.+2      	; 0x6470 <_Z9getfactorv+0x28c>
    646e:	65 cf       	rjmp	.-310    	; 0x633a <_Z9getfactorv+0x156>
    6470:	89 e2       	ldi	r24, 0x29	; 41
    6472:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <_Z12expectedcharh>
			getsym();		// eat ')'
			break;

		case s_lparen:  // expression in parens
			getexpression();
    6476:	f0 d0       	rcall	.+480    	; 0x6658 <_Z13getexpressionv>
			if (exptype != s_nval) expected(M_number);
    6478:	80 91 65 2b 	lds	r24, 0x2B65
    647c:	81 38       	cpi	r24, 0x81	; 129
    647e:	19 f0       	breq	.+6      	; 0x6486 <_Z9getfactorv+0x2a2>
    6480:	8e e0       	ldi	r24, 0x0E	; 14
    6482:	0e 94 f5 20 	call	0x41ea	; 0x41ea <_Z8expectedh>
			if (sym != s_rparen) missing(M_rparen);
    6486:	8e b3       	in	r24, 0x1e	; 30
    6488:	89 32       	cpi	r24, 0x29	; 41
    648a:	19 f0       	breq	.+6      	; 0x6492 <_Z9getfactorv+0x2ae>
    648c:	8f e0       	ldi	r24, 0x0F	; 15
    648e:	0e 94 6d 21 	call	0x42da	; 0x42da <_Z7missingh>
			vpush(expval);
    6492:	60 91 61 2b 	lds	r22, 0x2B61
    6496:	70 91 62 2b 	lds	r23, 0x2B62
    649a:	80 91 63 2b 	lds	r24, 0x2B63
    649e:	90 91 64 2b 	lds	r25, 0x2B64
    64a2:	0e 94 0b 25 	call	0x4a16	; 0x4a16 <_Z5vpushl>
    64a6:	49 cf       	rjmp	.-366    	; 0x633a <_Z9getfactorv+0x156>
		case s_add:			// unary plus (like +3) is kind of a no-op
			getfactor();	// scan a factor and leave its result on the stack
			break;			// done
	
		case s_sub:			// unary minus (like -3)
			getfactor();
    64a8:	9d de       	rcall	.-710    	; 0x61e4 <_Z9getfactorv>
			vpush(-vpop());	// similar to above but we adjust the stack value
    64aa:	0e 94 a5 24 	call	0x494a	; 0x494a <_Z4vpopv>
    64ae:	90 95       	com	r25
    64b0:	80 95       	com	r24
    64b2:	70 95       	com	r23
    64b4:	61 95       	neg	r22
    64b6:	7f 4f       	sbci	r23, 0xFF	; 255
    64b8:	8f 4f       	sbci	r24, 0xFF	; 255
    64ba:	9f 4f       	sbci	r25, 0xFF	; 255
    64bc:	40 c0       	rjmp	.+128    	; 0x653e <_Z9getfactorv+0x35a>
			break;
	
		case s_bitnot:
			getfactor();
    64be:	92 de       	rcall	.-732    	; 0x61e4 <_Z9getfactorv>
			vpush(~vpop());
    64c0:	0e 94 a5 24 	call	0x494a	; 0x494a <_Z4vpopv>
    64c4:	60 95       	com	r22
    64c6:	70 95       	com	r23
    64c8:	80 95       	com	r24
    64ca:	90 95       	com	r25
    64cc:	38 c0       	rjmp	.+112    	; 0x653e <_Z9getfactorv+0x35a>
			break;
	
		case s_logicalnot:
			getfactor();
    64ce:	8a de       	rcall	.-748    	; 0x61e4 <_Z9getfactorv>
			vpush(!vpop());
    64d0:	0e 94 a5 24 	call	0x494a	; 0x494a <_Z4vpopv>
    64d4:	8b 01       	movw	r16, r22
    64d6:	9c 01       	movw	r18, r24
    64d8:	61 e0       	ldi	r22, 0x01	; 1
    64da:	70 e0       	ldi	r23, 0x00	; 0
    64dc:	80 e0       	ldi	r24, 0x00	; 0
    64de:	90 e0       	ldi	r25, 0x00	; 0
    64e0:	01 2b       	or	r16, r17
    64e2:	02 2b       	or	r16, r18
    64e4:	03 2b       	or	r16, r19
    64e6:	59 f1       	breq	.+86     	; 0x653e <_Z9getfactorv+0x35a>
    64e8:	60 e0       	ldi	r22, 0x00	; 0
    64ea:	70 e0       	ldi	r23, 0x00	; 0
    64ec:	cb 01       	movw	r24, r22
    64ee:	27 c0       	rjmp	.+78     	; 0x653e <_Z9getfactorv+0x35a>
			break;

		case s_bitand:		// &var gives address-of-var; &macro gives eeprom address of macro
			if (sym == s_nvar) vpush((numvar) &vars[symval]);
    64f0:	8e b3       	in	r24, 0x1e	; 30
    64f2:	83 38       	cpi	r24, 0x83	; 131
    64f4:	79 f4       	brne	.+30     	; 0x6514 <_Z9getfactorv+0x330>
    64f6:	60 91 66 2b 	lds	r22, 0x2B66
    64fa:	70 91 67 2b 	lds	r23, 0x2B67
    64fe:	66 0f       	add	r22, r22
    6500:	77 1f       	adc	r23, r23
    6502:	66 0f       	add	r22, r22
    6504:	77 1f       	adc	r23, r23
    6506:	66 52       	subi	r22, 0x26	; 38
    6508:	79 4d       	sbci	r23, 0xD9	; 217
    650a:	88 27       	eor	r24, r24
    650c:	77 fd       	sbrc	r23, 7
    650e:	80 95       	com	r24
    6510:	98 2f       	mov	r25, r24
    6512:	c7 cf       	rjmp	.-114    	; 0x64a2 <_Z9getfactorv+0x2be>
			else if (sym == s_script_eeprom) vpush(symval);
    6514:	8e b3       	in	r24, 0x1e	; 30
    6516:	83 3a       	cpi	r24, 0xA3	; 163
    6518:	09 f0       	breq	.+2      	; 0x651c <_Z9getfactorv+0x338>
    651a:	6f cf       	rjmp	.-290    	; 0x63fa <_Z9getfactorv+0x216>
    651c:	60 91 66 2b 	lds	r22, 0x2B66
    6520:	70 91 67 2b 	lds	r23, 0x2B67
    6524:	80 91 68 2b 	lds	r24, 0x2B68
    6528:	90 91 69 2b 	lds	r25, 0x2B69
    652c:	ba cf       	rjmp	.-140    	; 0x64a2 <_Z9getfactorv+0x2be>
// what is really acceptable for an lvalue here? ;)
//	*y = 5 is failing now by assigning 5 to y before the * is dereferenced
//	due to calling getfactor
//	everything else works :(
*****/
			getfactor();
    652e:	5a de       	rcall	.-844    	; 0x61e4 <_Z9getfactorv>
				* (volatile byte *) vpop() = (byte) expval;
				vpush((numvar) (byte) expval);
			} 
			else 
#endif
			vpush((numvar) (* (volatile byte *) vpop()));
    6530:	0e 94 a5 24 	call	0x494a	; 0x494a <_Z4vpopv>
    6534:	fb 01       	movw	r30, r22
    6536:	60 81       	ld	r22, Z
    6538:	70 e0       	ldi	r23, 0x00	; 0
    653a:	80 e0       	ldi	r24, 0x00	; 0
    653c:	90 e0       	ldi	r25, 0x00	; 0

		default: 
			unexpected(M_number);
	}

}
    653e:	0f 90       	pop	r0
    6540:	0f 90       	pop	r0
    6542:	0f 90       	pop	r0
    6544:	df 91       	pop	r29
    6546:	cf 91       	pop	r28
    6548:	1f 91       	pop	r17
    654a:	0f 91       	pop	r16
				* (volatile byte *) vpop() = (byte) expval;
				vpush((numvar) (byte) expval);
			} 
			else 
#endif
			vpush((numvar) (* (volatile byte *) vpop()));
    654c:	0c 94 0b 25 	jmp	0x4a16	; 0x4a16 <_Z5vpushl>
			break;

		default: 
			unexpected(M_number);
    6550:	8e e0       	ldi	r24, 0x0E	; 14
    6552:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <_Z10unexpectedh>

00006556 <_Z7gettermv>:
	}
}
#endif


void getterm(void) {
    6556:	cf 93       	push	r28
    6558:	df 93       	push	r29
    655a:	1f 92       	push	r1
    655c:	cd b7       	in	r28, 0x3d	; 61
    655e:	de b7       	in	r29, 0x3e	; 62
#ifdef USE_PARSEREDUCE
	parseReduce(&getfactor, s_mul, s_div, s_mod);
#else
	getfactor();
    6560:	41 de       	rcall	.-894    	; 0x61e4 <_Z9getfactorv>
	while ((sym == s_mul) || (sym == s_div) || (sym == s_mod)) {
    6562:	8e b3       	in	r24, 0x1e	; 30
    6564:	8a 32       	cpi	r24, 0x2A	; 42
    6566:	31 f0       	breq	.+12     	; 0x6574 <_Z7gettermv+0x1e>
    6568:	8e b3       	in	r24, 0x1e	; 30
    656a:	8f 32       	cpi	r24, 0x2F	; 47
    656c:	19 f0       	breq	.+6      	; 0x6574 <_Z7gettermv+0x1e>
    656e:	8e b3       	in	r24, 0x1e	; 30
    6570:	85 32       	cpi	r24, 0x25	; 37
    6572:	49 f4       	brne	.+18     	; 0x6586 <_Z7gettermv+0x30>
		byte op = sym;
    6574:	8e b3       	in	r24, 0x1e	; 30
		getsym();
    6576:	89 83       	std	Y+1, r24	; 0x01
    6578:	0e 94 47 20 	call	0x408e	; 0x408e <_Z6getsymv>
		getfactor();
    657c:	33 de       	rcall	.-922    	; 0x61e4 <_Z9getfactorv>
		vop(op);
    657e:	89 81       	ldd	r24, Y+1	; 0x01
    6580:	0e 94 39 25 	call	0x4a72	; 0x4a72 <_Z3voph>
    6584:	ee cf       	rjmp	.-36     	; 0x6562 <_Z7gettermv+0xc>
	}
#endif
}
    6586:	0f 90       	pop	r0
    6588:	df 91       	pop	r29
    658a:	cf 91       	pop	r28
    658c:	08 95       	ret

0000658e <_Z10getsimpexpv>:

void getsimpexp(void) {
    658e:	cf 93       	push	r28
    6590:	df 93       	push	r29
    6592:	1f 92       	push	r1
    6594:	cd b7       	in	r28, 0x3d	; 61
    6596:	de b7       	in	r29, 0x3e	; 62
#ifdef USE_PARSEREDUCE
	parseReduce(&getterm, s_add, s_sub, s_sub);
#else
	getterm();
    6598:	de df       	rcall	.-68     	; 0x6556 <_Z7gettermv>
	while ((sym == s_add) || (sym == s_sub)) {
    659a:	8e b3       	in	r24, 0x1e	; 30
    659c:	8b 32       	cpi	r24, 0x2B	; 43
    659e:	19 f0       	breq	.+6      	; 0x65a6 <_Z10getsimpexpv+0x18>
    65a0:	8e b3       	in	r24, 0x1e	; 30
    65a2:	8d 32       	cpi	r24, 0x2D	; 45
    65a4:	49 f4       	brne	.+18     	; 0x65b8 <_Z10getsimpexpv+0x2a>
		byte op = sym;
    65a6:	8e b3       	in	r24, 0x1e	; 30
		getsym();
    65a8:	89 83       	std	Y+1, r24	; 0x01
    65aa:	0e 94 47 20 	call	0x408e	; 0x408e <_Z6getsymv>
		getterm();
    65ae:	d3 df       	rcall	.-90     	; 0x6556 <_Z7gettermv>
		vop(op);
    65b0:	89 81       	ldd	r24, Y+1	; 0x01
    65b2:	0e 94 39 25 	call	0x4a72	; 0x4a72 <_Z3voph>
    65b6:	f1 cf       	rjmp	.-30     	; 0x659a <_Z10getsimpexpv+0xc>
	}
#endif
}
    65b8:	0f 90       	pop	r0
    65ba:	df 91       	pop	r29
    65bc:	cf 91       	pop	r28
    65be:	08 95       	ret

000065c0 <_Z11getshiftexpv>:

void getshiftexp(void) {
    65c0:	cf 93       	push	r28
    65c2:	df 93       	push	r29
    65c4:	1f 92       	push	r1
    65c6:	cd b7       	in	r28, 0x3d	; 61
    65c8:	de b7       	in	r29, 0x3e	; 62
#ifdef USE_PARSEREDUCE
	parseReduce(&getsimpexp, s_shiftright, s_shiftleft, s_shiftleft);
#else
	getsimpexp();
    65ca:	e1 df       	rcall	.-62     	; 0x658e <_Z10getsimpexpv>
	while ((sym == s_shiftright) || (sym == s_shiftleft)) {
    65cc:	8e b3       	in	r24, 0x1e	; 30
    65ce:	8b 38       	cpi	r24, 0x8B	; 139
    65d0:	19 f0       	breq	.+6      	; 0x65d8 <_Z11getshiftexpv+0x18>
    65d2:	8e b3       	in	r24, 0x1e	; 30
    65d4:	8a 38       	cpi	r24, 0x8A	; 138
    65d6:	49 f4       	brne	.+18     	; 0x65ea <_Z11getshiftexpv+0x2a>
		byte op = sym;
    65d8:	8e b3       	in	r24, 0x1e	; 30
		getsym();
    65da:	89 83       	std	Y+1, r24	; 0x01
    65dc:	0e 94 47 20 	call	0x408e	; 0x408e <_Z6getsymv>
		getsimpexp();
    65e0:	d6 df       	rcall	.-84     	; 0x658e <_Z10getsimpexpv>
		vop(op);
    65e2:	89 81       	ldd	r24, Y+1	; 0x01
    65e4:	0e 94 39 25 	call	0x4a72	; 0x4a72 <_Z3voph>
    65e8:	f1 cf       	rjmp	.-30     	; 0x65cc <_Z11getshiftexpv+0xc>
	}
#endif
}
    65ea:	0f 90       	pop	r0
    65ec:	df 91       	pop	r29
    65ee:	cf 91       	pop	r28
    65f0:	08 95       	ret

000065f2 <_Z9getrelexpv>:

void getrelexp(void) {
    65f2:	cf 93       	push	r28
    65f4:	df 93       	push	r29
    65f6:	1f 92       	push	r1
    65f8:	cd b7       	in	r28, 0x3d	; 61
    65fa:	de b7       	in	r29, 0x3e	; 62
	getshiftexp();
    65fc:	e1 df       	rcall	.-62     	; 0x65c0 <_Z11getshiftexpv>
	while (isrelop()) {
    65fe:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <_Z7isrelopv>
    6602:	88 23       	and	r24, r24
    6604:	49 f0       	breq	.+18     	; 0x6618 <_Z9getrelexpv+0x26>
		byte op = sym;
    6606:	8e b3       	in	r24, 0x1e	; 30
		getsym();
    6608:	89 83       	std	Y+1, r24	; 0x01
    660a:	0e 94 47 20 	call	0x408e	; 0x408e <_Z6getsymv>
		getshiftexp();
    660e:	d8 df       	rcall	.-80     	; 0x65c0 <_Z11getshiftexpv>
		vop(op);
    6610:	89 81       	ldd	r24, Y+1	; 0x01
    6612:	0e 94 39 25 	call	0x4a72	; 0x4a72 <_Z3voph>
    6616:	f3 cf       	rjmp	.-26     	; 0x65fe <_Z9getrelexpv+0xc>
	}
}
    6618:	0f 90       	pop	r0
    661a:	df 91       	pop	r29
    661c:	cf 91       	pop	r28
    661e:	08 95       	ret

00006620 <_Z11getbitopexpv>:

void getbitopexp(void) {
    6620:	cf 93       	push	r28
    6622:	df 93       	push	r29
    6624:	1f 92       	push	r1
    6626:	cd b7       	in	r28, 0x3d	; 61
    6628:	de b7       	in	r29, 0x3e	; 62
#ifdef USE_PARSEREDUCE
	parseReduce(&getrelexp, s_bitand, s_bitor, s_xor);
#else
	getrelexp();
    662a:	e3 df       	rcall	.-58     	; 0x65f2 <_Z9getrelexpv>
	while ((sym == s_bitand) || (sym == s_bitor) || (sym == s_xor)) {
    662c:	8e b3       	in	r24, 0x1e	; 30
    662e:	86 32       	cpi	r24, 0x26	; 38
    6630:	31 f0       	breq	.+12     	; 0x663e <_Z11getbitopexpv+0x1e>
    6632:	8e b3       	in	r24, 0x1e	; 30
    6634:	8c 37       	cpi	r24, 0x7C	; 124
    6636:	19 f0       	breq	.+6      	; 0x663e <_Z11getbitopexpv+0x1e>
    6638:	8e b3       	in	r24, 0x1e	; 30
    663a:	8e 35       	cpi	r24, 0x5E	; 94
    663c:	49 f4       	brne	.+18     	; 0x6650 <_Z11getbitopexpv+0x30>
		byte op = sym;
    663e:	8e b3       	in	r24, 0x1e	; 30
		getsym();
    6640:	89 83       	std	Y+1, r24	; 0x01
    6642:	0e 94 47 20 	call	0x408e	; 0x408e <_Z6getsymv>
		getrelexp();
    6646:	d5 df       	rcall	.-86     	; 0x65f2 <_Z9getrelexpv>
		vop(op);
    6648:	89 81       	ldd	r24, Y+1	; 0x01
    664a:	0e 94 39 25 	call	0x4a72	; 0x4a72 <_Z3voph>
    664e:	ee cf       	rjmp	.-36     	; 0x662c <_Z11getbitopexpv+0xc>
	}
#endif
}
    6650:	0f 90       	pop	r0
    6652:	df 91       	pop	r29
    6654:	cf 91       	pop	r28
    6656:	08 95       	ret

00006658 <_Z13getexpressionv>:

// Parse an expression.  Result to expval.
void getexpression(void) {
    6658:	cf 93       	push	r28
    665a:	df 93       	push	r29
    665c:	1f 92       	push	r1
    665e:	cd b7       	in	r28, 0x3d	; 61
    6660:	de b7       	in	r29, 0x3e	; 62

#ifdef USE_PARSEREDUCE
	parseReduce(&getbitopexp, s_logicaland, s_logicalor, s_logicalor);
#else
	getbitopexp();
    6662:	de df       	rcall	.-68     	; 0x6620 <_Z11getbitopexpv>
	while ((sym == s_logicaland) || (sym == s_logicalor)) {
    6664:	8e b3       	in	r24, 0x1e	; 30
    6666:	86 38       	cpi	r24, 0x86	; 134
    6668:	a1 f0       	breq	.+40     	; 0x6692 <_Z13getexpressionv+0x3a>
    666a:	8e b3       	in	r24, 0x1e	; 30
    666c:	87 38       	cpi	r24, 0x87	; 135
    666e:	89 f0       	breq	.+34     	; 0x6692 <_Z13getexpressionv+0x3a>
		getsym();
		getbitopexp();
		vop(op);
	}
#endif
	exptype = s_nval;
    6670:	81 e8       	ldi	r24, 0x81	; 129
    6672:	80 93 65 2b 	sts	0x2B65, r24
	expval = vpop();
    6676:	0e 94 a5 24 	call	0x494a	; 0x494a <_Z4vpopv>
    667a:	60 93 61 2b 	sts	0x2B61, r22
    667e:	70 93 62 2b 	sts	0x2B62, r23
    6682:	80 93 63 2b 	sts	0x2B63, r24
    6686:	90 93 64 2b 	sts	0x2B64, r25
}
    668a:	0f 90       	pop	r0
    668c:	df 91       	pop	r29
    668e:	cf 91       	pop	r28
    6690:	08 95       	ret
#ifdef USE_PARSEREDUCE
	parseReduce(&getbitopexp, s_logicaland, s_logicalor, s_logicalor);
#else
	getbitopexp();
	while ((sym == s_logicaland) || (sym == s_logicalor)) {
		byte op = sym;
    6692:	8e b3       	in	r24, 0x1e	; 30
		getsym();
    6694:	89 83       	std	Y+1, r24	; 0x01
    6696:	0e 94 47 20 	call	0x408e	; 0x408e <_Z6getsymv>
		getbitopexp();
    669a:	c2 df       	rcall	.-124    	; 0x6620 <_Z11getbitopexpv>
		vop(op);
    669c:	89 81       	ldd	r24, Y+1	; 0x01
    669e:	0e 94 39 25 	call	0x4a72	; 0x4a72 <_Z3voph>
    66a2:	e0 cf       	rjmp	.-64     	; 0x6664 <_Z13getexpressionv+0xc>

000066a4 <_Z6getnumv>:
}


// Get a number from the input stream.  Result to expval.
numvar getnum(void) {
	getexpression();
    66a4:	d9 df       	rcall	.-78     	; 0x6658 <_Z13getexpressionv>
	if (exptype != s_nval) expected(M_number);
    66a6:	80 91 65 2b 	lds	r24, 0x2B65
    66aa:	81 38       	cpi	r24, 0x81	; 129
    66ac:	19 f0       	breq	.+6      	; 0x66b4 <_Z6getnumv+0x10>
    66ae:	8e e0       	ldi	r24, 0x0E	; 14
    66b0:	0e 94 f5 20 	call	0x41ea	; 0x41ea <_Z8expectedh>
	return expval;
    66b4:	60 91 61 2b 	lds	r22, 0x2B61
    66b8:	70 91 62 2b 	lds	r23, 0x2B62
    66bc:	80 91 63 2b 	lds	r24, 0x2B63
    66c0:	90 91 64 2b 	lds	r25, 0x2B64
}
    66c4:	08 95       	ret

000066c6 <_Z12parsearglistv>:
	return getarg(which);
}
#endif


void parsearglist(void) {
    66c6:	ef 92       	push	r14
    66c8:	ff 92       	push	r15
    66ca:	0f 93       	push	r16
    66cc:	1f 93       	push	r17
    66ce:	cf 93       	push	r28
    66d0:	df 93       	push	r29
	vpush((numvar) arg);				// save base of current argblock
    66d2:	60 91 44 2b 	lds	r22, 0x2B44
    66d6:	70 91 45 2b 	lds	r23, 0x2B45
    66da:	88 27       	eor	r24, r24
    66dc:	77 fd       	sbrc	r23, 7
    66de:	80 95       	com	r24
    66e0:	98 2f       	mov	r25, r24
    66e2:	0e 94 0b 25 	call	0x4a16	; 0x4a16 <_Z5vpushl>
#if defined(STRING_POOL)
	vpush(0);							// argtype: argument type vector, initially 0
    66e6:	60 e0       	ldi	r22, 0x00	; 0
    66e8:	70 e0       	ldi	r23, 0x00	; 0
    66ea:	cb 01       	movw	r24, r22
    66ec:	0e 94 0b 25 	call	0x4a16	; 0x4a16 <_Z5vpushl>
	vpush((numvar) stringPool);			// save stringPool base for later release
    66f0:	60 91 42 27 	lds	r22, 0x2742
    66f4:	70 91 43 27 	lds	r23, 0x2743
    66f8:	88 27       	eor	r24, r24
    66fa:	77 fd       	sbrc	r23, 7
    66fc:	80 95       	com	r24
    66fe:	98 2f       	mov	r25, r24
    6700:	0e 94 0b 25 	call	0x4a16	; 0x4a16 <_Z5vpushl>
	strpush(idbuf);						// save called function's name as arg[-1]
    6704:	88 e4       	ldi	r24, 0x48	; 72
    6706:	9b e2       	ldi	r25, 0x2B	; 43
    6708:	0e 94 00 25 	call	0x4a00	; 0x4a00 <_Z7strpushPc>
#endif
	numvar *newarg = &vstack[vsptr];	// move global arg pointer to base of new block
    670c:	c0 91 46 2b 	lds	r28, 0x2B46
    6710:	84 e0       	ldi	r24, 0x04	; 4
    6712:	c8 9f       	mul	r28, r24
    6714:	e0 01       	movw	r28, r0
    6716:	11 24       	eor	r1, r1
    6718:	cc 5b       	subi	r28, 0xBC	; 188
    671a:	d8 4d       	sbci	r29, 0xD8	; 216
	vpush(0);							// initialize new arg(0) (a/k/a argc) to 0
    671c:	60 e0       	ldi	r22, 0x00	; 0
    671e:	70 e0       	ldi	r23, 0x00	; 0
    6720:	cb 01       	movw	r24, r22
    6722:	0e 94 0b 25 	call	0x4a16	; 0x4a16 <_Z5vpushl>

	if (sym == s_lparen) {
    6726:	8e b3       	in	r24, 0x1e	; 30
    6728:	88 32       	cpi	r24, 0x28	; 40
    672a:	09 f0       	breq	.+2      	; 0x672e <_Z12parsearglistv+0x68>
    672c:	55 c0       	rjmp	.+170    	; 0x67d8 <_Z12parsearglistv+0x112>
				parsestring(&spush);		// parse it into the pool
				spush(0);					// and terminate it
				getsym();					// eat closing "

				// bug: more than 32 args fails here
				newarg[2] |= (1 << newarg[0]);	// argtype: set string bit for this arg
    672e:	8e 01       	movw	r16, r28
    6730:	ee 24       	eor	r14, r14
    6732:	e3 94       	inc	r14
    6734:	f1 2c       	mov	r15, r1
#endif
	numvar *newarg = &vstack[vsptr];	// move global arg pointer to base of new block
	vpush(0);							// initialize new arg(0) (a/k/a argc) to 0

	if (sym == s_lparen) {
		getsym();		// eat arglist '('
    6736:	0e 94 47 20 	call	0x408e	; 0x408e <_Z6getsymv>
		while ((sym != s_rparen) && (sym != s_eof)) {
    673a:	8e b3       	in	r24, 0x1e	; 30
    673c:	89 32       	cpi	r24, 0x29	; 41
    673e:	09 f4       	brne	.+2      	; 0x6742 <_Z12parsearglistv+0x7c>
    6740:	42 c0       	rjmp	.+132    	; 0x67c6 <_Z12parsearglistv+0x100>
    6742:	8e b3       	in	r24, 0x1e	; 30
    6744:	88 23       	and	r24, r24
    6746:	09 f4       	brne	.+2      	; 0x674a <_Z12parsearglistv+0x84>
    6748:	3e c0       	rjmp	.+124    	; 0x67c6 <_Z12parsearglistv+0x100>

#if defined(STRING_POOL)
			if (sym == s_quote) {
    674a:	8e b3       	in	r24, 0x1e	; 30
    674c:	82 32       	cpi	r24, 0x22	; 34
    674e:	09 f0       	breq	.+2      	; 0x6752 <_Z12parsearglistv+0x8c>
    6750:	4e c0       	rjmp	.+156    	; 0x67ee <_Z12parsearglistv+0x128>
				vpush((numvar) stringPool);	// push the string pointer
    6752:	60 91 42 27 	lds	r22, 0x2742
    6756:	70 91 43 27 	lds	r23, 0x2743
    675a:	88 27       	eor	r24, r24
    675c:	77 fd       	sbrc	r23, 7
    675e:	80 95       	com	r24
    6760:	98 2f       	mov	r25, r24
    6762:	0e 94 0b 25 	call	0x4a16	; 0x4a16 <_Z5vpushl>
				parsestring(&spush);		// parse it into the pool
    6766:	86 ee       	ldi	r24, 0xE6	; 230
    6768:	94 e2       	ldi	r25, 0x24	; 36
    676a:	80 d9       	rcall	.-3328   	; 0x5a6c <_Z11parsestringPFvcE>
				spush(0);					// and terminate it
    676c:	80 e0       	ldi	r24, 0x00	; 0
    676e:	0e 94 e6 24 	call	0x49cc	; 0x49cc <_Z5spushc>
				getsym();					// eat closing "
    6772:	0e 94 47 20 	call	0x408e	; 0x408e <_Z6getsymv>

				// bug: more than 32 args fails here
				newarg[2] |= (1 << newarg[0]);	// argtype: set string bit for this arg
    6776:	a7 01       	movw	r20, r14
    6778:	f8 01       	movw	r30, r16
    677a:	00 80       	ld	r0, Z
    677c:	02 c0       	rjmp	.+4      	; 0x6782 <_Z12parsearglistv+0xbc>
    677e:	44 0f       	add	r20, r20
    6780:	55 1f       	adc	r21, r21
    6782:	0a 94       	dec	r0
    6784:	e2 f7       	brpl	.-8      	; 0x677e <_Z12parsearglistv+0xb8>
    6786:	66 27       	eor	r22, r22
    6788:	57 fd       	sbrc	r21, 7
    678a:	60 95       	com	r22
    678c:	76 2f       	mov	r23, r22
    678e:	88 85       	ldd	r24, Y+8	; 0x08
    6790:	99 85       	ldd	r25, Y+9	; 0x09
    6792:	aa 85       	ldd	r26, Y+10	; 0x0a
    6794:	bb 85       	ldd	r27, Y+11	; 0x0b
    6796:	84 2b       	or	r24, r20
    6798:	95 2b       	or	r25, r21
    679a:	a6 2b       	or	r26, r22
    679c:	b7 2b       	or	r27, r23
    679e:	88 87       	std	Y+8, r24	; 0x08
    67a0:	99 87       	std	Y+9, r25	; 0x09
    67a2:	aa 87       	std	Y+10, r26	; 0x0a
    67a4:	bb 87       	std	Y+11, r27	; 0x0b
			} else 
#endif
			vpush(getnum());				// push the value
			newarg[0]++;					// bump the count
    67a6:	f8 01       	movw	r30, r16
    67a8:	80 81       	ld	r24, Z
    67aa:	91 81       	ldd	r25, Z+1	; 0x01
    67ac:	a2 81       	ldd	r26, Z+2	; 0x02
    67ae:	b3 81       	ldd	r27, Z+3	; 0x03
    67b0:	01 96       	adiw	r24, 0x01	; 1
    67b2:	a1 1d       	adc	r26, r1
    67b4:	b1 1d       	adc	r27, r1
    67b6:	80 83       	st	Z, r24
    67b8:	91 83       	std	Z+1, r25	; 0x01
    67ba:	a2 83       	std	Z+2, r26	; 0x02
    67bc:	b3 83       	std	Z+3, r27	; 0x03
			if (sym == s_comma) getsym();	// eat arglist ',' and go around
    67be:	8e b3       	in	r24, 0x1e	; 30
    67c0:	8c 32       	cpi	r24, 0x2C	; 44
    67c2:	09 f4       	brne	.+2      	; 0x67c6 <_Z12parsearglistv+0x100>
    67c4:	b8 cf       	rjmp	.-144    	; 0x6736 <_Z12parsearglistv+0x70>
			else break;
		}
		if (sym == s_rparen) getsym();		// eat the ')'
    67c6:	8e b3       	in	r24, 0x1e	; 30
    67c8:	89 32       	cpi	r24, 0x29	; 41
    67ca:	19 f4       	brne	.+6      	; 0x67d2 <_Z12parsearglistv+0x10c>
    67cc:	0e 94 47 20 	call	0x408e	; 0x408e <_Z6getsymv>
    67d0:	03 c0       	rjmp	.+6      	; 0x67d8 <_Z12parsearglistv+0x112>
		else expected(M_rparen);
    67d2:	8f e0       	ldi	r24, 0x0F	; 15
    67d4:	0e 94 f5 20 	call	0x41ea	; 0x41ea <_Z8expectedh>
	}
	arg = newarg;		// activate new argument frame
    67d8:	d0 93 45 2b 	sts	0x2B45, r29
    67dc:	c0 93 44 2b 	sts	0x2B44, r28
}
    67e0:	df 91       	pop	r29
    67e2:	cf 91       	pop	r28
    67e4:	1f 91       	pop	r17
    67e6:	0f 91       	pop	r16
    67e8:	ff 90       	pop	r15
    67ea:	ef 90       	pop	r14
    67ec:	08 95       	ret

				// bug: more than 32 args fails here
				newarg[2] |= (1 << newarg[0]);	// argtype: set string bit for this arg
			} else 
#endif
			vpush(getnum());				// push the value
    67ee:	5a df       	rcall	.-332    	; 0x66a4 <_Z6getnumv>
    67f0:	0e 94 0b 25 	call	0x4a16	; 0x4a16 <_Z5vpushl>
    67f4:	d8 cf       	rjmp	.-80     	; 0x67a6 <_Z12parsearglistv+0xe0>

000067f6 <_Z14dofunctioncallh>:
// dofunctioncall(): evaluate a function reference
//
// parse the argument list, marshall the arguments and call the function,
// and push its return value, if any, on the value stack
//
void dofunctioncall(byte entry) {
    67f6:	0f 93       	push	r16
    67f8:	1f 93       	push	r17
    67fa:	cf 93       	push	r28
    67fc:	df 93       	push	r29
    67fe:	00 d0       	rcall	.+0      	; 0x6800 <_Z14dofunctioncallh+0xa>
    6800:	1f 92       	push	r1
    6802:	cd b7       	in	r28, 0x3d	; 61
    6804:	de b7       	in	r29, 0x3e	; 62
bitlash_function fp;

#ifdef USER_FUNCTIONS
	// Detect and handle a user function: its id has the high bit set
	// we set nargs and fp and fall through to masquerade as a built-in
	if (entry & USER_FUNCTION_FLAG) {
    6806:	87 ff       	sbrs	r24, 7
    6808:	0a c0       	rjmp	.+20     	; 0x681e <_Z14dofunctioncallh+0x28>
		fp = (bitlash_function) user_functions[entry & 0x7f].func_ptr;
    680a:	8f 77       	andi	r24, 0x7F	; 127
    680c:	94 e0       	ldi	r25, 0x04	; 4
    680e:	89 9f       	mul	r24, r25
    6810:	f0 01       	movw	r30, r0
    6812:	11 24       	eor	r1, r1
    6814:	e1 59       	subi	r30, 0x91	; 145
    6816:	f4 4d       	sbci	r31, 0xD4	; 212
    6818:	02 81       	ldd	r16, Z+2	; 0x02
    681a:	13 81       	ldd	r17, Z+3	; 0x03
    681c:	08 c0       	rjmp	.+16     	; 0x682e <_Z14dofunctioncallh+0x38>
#endif
	// built-in function
#ifdef UNIX_BUILD
	fp = function_table[entry];
#else
	fp = (bitlash_function) pgm_read_word(&function_table[entry]);
    681e:	e8 2f       	mov	r30, r24
    6820:	f0 e0       	ldi	r31, 0x00	; 0
    6822:	ee 0f       	add	r30, r30
    6824:	ff 1f       	adc	r31, r31
    6826:	e5 59       	subi	r30, 0x95	; 149
    6828:	fa 4f       	sbci	r31, 0xFA	; 250
    682a:	05 91       	lpm	r16, Z+
    682c:	14 91       	lpm	r17, Z
#endif

	parsearglist();			// parse the arguments
    682e:	4b df       	rcall	.-362    	; 0x66c6 <_Z12parsearglistv>
	numvar ret = (*fp)();	// call the function 
    6830:	f8 01       	movw	r30, r16
    6832:	19 95       	eicall
	releaseargblock();		// peel off the arguments
    6834:	69 83       	std	Y+1, r22	; 0x01
    6836:	7a 83       	std	Y+2, r23	; 0x02
    6838:	8b 83       	std	Y+3, r24	; 0x03
    683a:	9c 83       	std	Y+4, r25	; 0x04
    683c:	0e 94 b9 24 	call	0x4972	; 0x4972 <_Z15releaseargblockv>
	vpush(ret);				// and push the return value
    6840:	69 81       	ldd	r22, Y+1	; 0x01
    6842:	7a 81       	ldd	r23, Y+2	; 0x02
    6844:	8b 81       	ldd	r24, Y+3	; 0x03
    6846:	9c 81       	ldd	r25, Y+4	; 0x04
}
    6848:	0f 90       	pop	r0
    684a:	0f 90       	pop	r0
    684c:	0f 90       	pop	r0
    684e:	0f 90       	pop	r0
    6850:	df 91       	pop	r29
    6852:	cf 91       	pop	r28
    6854:	1f 91       	pop	r17
    6856:	0f 91       	pop	r16
#endif

	parsearglist();			// parse the arguments
	numvar ret = (*fp)();	// call the function 
	releaseargblock();		// peel off the arguments
	vpush(ret);				// and push the return value
    6858:	0c 94 0b 25 	jmp	0x4a16	; 0x4a16 <_Z5vpushl>

0000685c <_Z9cmd_printv>:

#if 1	// !defined(TINY_BUILD)

// Print command handler
// 	print exprlist
void cmd_print(void) {
    685c:	0f 93       	push	r16
    685e:	cf 93       	push	r28
    6860:	df 93       	push	r29
    6862:	1f 92       	push	r1
    6864:	cd b7       	in	r28, 0x3d	; 61
    6866:	de b7       	in	r29, 0x3e	; 62
	for (;;) {

#ifdef SOFTWARE_SERIAL_TX
		// print #2: expr,expr,...
		if (sym == s_pound) {
    6868:	8e b3       	in	r24, 0x1e	; 30
    686a:	83 32       	cpi	r24, 0x23	; 35
    686c:	79 f4       	brne	.+30     	; 0x688c <_Z9cmd_printv+0x30>
			getsym();
    686e:	0e 94 47 20 	call	0x408e	; 0x408e <_Z6getsymv>
			byte pin = getnum();		// pin to print to
    6872:	18 df       	rcall	.-464    	; 0x66a4 <_Z6getnumv>
			if (sym != s_colon) expectedchar(':');
    6874:	9e b3       	in	r25, 0x1e	; 30
    6876:	9a 33       	cpi	r25, 0x3A	; 58
    6878:	19 f0       	breq	.+6      	; 0x6880 <_Z9cmd_printv+0x24>
    687a:	8a e3       	ldi	r24, 0x3A	; 58
    687c:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <_Z12expectedcharh>
			getsym();					// eat :
    6880:	69 83       	std	Y+1, r22	; 0x01
    6882:	0e 94 47 20 	call	0x408e	; 0x408e <_Z6getsymv>
			setOutput(pin);
    6886:	89 81       	ldd	r24, Y+1	; 0x01
    6888:	0e 94 4e 21 	call	0x429c	; 0x429c <_Z9setOutputh>
		}
#endif

		// Special handling for quoted strings
		if (sym == s_quote) {	// parse it and push it out the output hole (spb)
    688c:	8e b3       	in	r24, 0x1e	; 30
    688e:	82 32       	cpi	r24, 0x22	; 34
    6890:	21 f4       	brne	.+8      	; 0x689a <_Z9cmd_printv+0x3e>
			parsestring(&spb);	// munch through the string (incl. closing quote) spewing it via spb
    6892:	8b e3       	ldi	r24, 0x3B	; 59
    6894:	9e e1       	ldi	r25, 0x1E	; 30
    6896:	ea d8       	rcall	.-3628   	; 0x5a6c <_Z11parsestringPFvcE>
    6898:	27 c0       	rjmp	.+78     	; 0x68e8 <_Z9cmd_printv+0x8c>
			getsym();			// and prime up the next symbol after for the comma check
		} 
		else if ((sym != s_semi) && (sym != s_eof))  {
    689a:	8e b3       	in	r24, 0x1e	; 30
    689c:	8b 33       	cpi	r24, 0x3B	; 59
    689e:	a9 f1       	breq	.+106    	; 0x690a <_Z9cmd_printv+0xae>
    68a0:	8e b3       	in	r24, 0x1e	; 30
    68a2:	88 23       	and	r24, r24
    68a4:	91 f1       	breq	.+100    	; 0x690a <_Z9cmd_printv+0xae>
			getexpression();
    68a6:	d8 de       	rcall	.-592    	; 0x6658 <_Z13getexpressionv>

			// format specifier: :x :b
			if (sym == s_colon) {
    68a8:	8e b3       	in	r24, 0x1e	; 30
    68aa:	8a 33       	cpi	r24, 0x3A	; 58
    68ac:	01 f5       	brne	.+64     	; 0x68ee <_Z9cmd_printv+0x92>
				getsym();		// cheat and look for var ref to x or b
    68ae:	0e 94 47 20 	call	0x408e	; 0x408e <_Z6getsymv>
				if (sym == s_nvar) {
    68b2:	8e b3       	in	r24, 0x1e	; 30
    68b4:	83 38       	cpi	r24, 0x83	; 131
    68b6:	09 f0       	breq	.+2      	; 0x68ba <_Z9cmd_printv+0x5e>
    68b8:	55 c0       	rjmp	.+170    	; 0x6964 <_Z9cmd_printv+0x108>
					if 		(symval == 'x'-'a') printHex((unumvar) expval);		// :x print hex
    68ba:	80 91 66 2b 	lds	r24, 0x2B66
    68be:	90 91 67 2b 	lds	r25, 0x2B67
    68c2:	a0 91 68 2b 	lds	r26, 0x2B68
    68c6:	b0 91 69 2b 	lds	r27, 0x2B69
    68ca:	87 31       	cpi	r24, 0x17	; 23
    68cc:	91 05       	cpc	r25, r1
    68ce:	a1 05       	cpc	r26, r1
    68d0:	b1 05       	cpc	r27, r1
    68d2:	19 f5       	brne	.+70     	; 0x691a <_Z9cmd_printv+0xbe>
    68d4:	60 91 61 2b 	lds	r22, 0x2B61
    68d8:	70 91 62 2b 	lds	r23, 0x2B62
    68dc:	80 91 63 2b 	lds	r24, 0x2B63
    68e0:	90 91 64 2b 	lds	r25, 0x2B64
    68e4:	0e 94 78 20 	call	0x40f0	; 0x40f0 <_Z8printHexm>
					else if (symval == 'y'-'a') spb(expval);					// :y print byte
					else if (symval == 's'-'a') sp((char *)expval);				// :s print string
				}
				else if (sym > ' ') while (expval-- > 0) spb(sym);	// any litsym
				else expected(M_pfmts);
				getsym();
    68e8:	0e 94 47 20 	call	0x408e	; 0x408e <_Z6getsymv>
    68ec:	0e c0       	rjmp	.+28     	; 0x690a <_Z9cmd_printv+0xae>
			}
			else printInteger(expval, 0, 0);
    68ee:	60 91 61 2b 	lds	r22, 0x2B61
    68f2:	70 91 62 2b 	lds	r23, 0x2B62
    68f6:	80 91 63 2b 	lds	r24, 0x2B63
    68fa:	90 91 64 2b 	lds	r25, 0x2B64
    68fe:	00 e0       	ldi	r16, 0x00	; 0
    6900:	20 e0       	ldi	r18, 0x00	; 0
    6902:	30 e0       	ldi	r19, 0x00	; 0
    6904:	a9 01       	movw	r20, r18
    6906:	0e 94 0b 20 	call	0x4016	; 0x4016 <_Z12printIntegerllh>
		}
		if ((sym == s_semi) || (sym == s_eof)) {
    690a:	8e b3       	in	r24, 0x1e	; 30
    690c:	8b 33       	cpi	r24, 0x3B	; 59
    690e:	09 f4       	brne	.+2      	; 0x6912 <_Z9cmd_printv+0xb6>
    6910:	4f c0       	rjmp	.+158    	; 0x69b0 <_Z9cmd_printv+0x154>
    6912:	8e b3       	in	r24, 0x1e	; 30
    6914:	81 11       	cpse	r24, r1
    6916:	55 c0       	rjmp	.+170    	; 0x69c2 <_Z9cmd_printv+0x166>
    6918:	4b c0       	rjmp	.+150    	; 0x69b0 <_Z9cmd_printv+0x154>
			if (sym == s_colon) {
				getsym();		// cheat and look for var ref to x or b
				if (sym == s_nvar) {
					if 		(symval == 'x'-'a') printHex((unumvar) expval);		// :x print hex
#if !defined(TINY_BUILD)
					else if (symval == 'b'-'a') printBinary((unumvar) expval);	// :b print binary
    691a:	81 30       	cpi	r24, 0x01	; 1
    691c:	91 05       	cpc	r25, r1
    691e:	a1 05       	cpc	r26, r1
    6920:	b1 05       	cpc	r27, r1
    6922:	59 f4       	brne	.+22     	; 0x693a <_Z9cmd_printv+0xde>
    6924:	60 91 61 2b 	lds	r22, 0x2B61
    6928:	70 91 62 2b 	lds	r23, 0x2B62
    692c:	80 91 63 2b 	lds	r24, 0x2B63
    6930:	90 91 64 2b 	lds	r25, 0x2B64
    6934:	0e 94 19 26 	call	0x4c32	; 0x4c32 <_Z11printBinarym>
    6938:	d7 cf       	rjmp	.-82     	; 0x68e8 <_Z9cmd_printv+0x8c>
#endif
					else if (symval == 'y'-'a') spb(expval);					// :y print byte
    693a:	88 31       	cpi	r24, 0x18	; 24
    693c:	91 05       	cpc	r25, r1
    693e:	a1 05       	cpc	r26, r1
    6940:	b1 05       	cpc	r27, r1
    6942:	29 f4       	brne	.+10     	; 0x694e <_Z9cmd_printv+0xf2>
    6944:	80 91 61 2b 	lds	r24, 0x2B61
    6948:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <_Z3spbc>
    694c:	cd cf       	rjmp	.-102    	; 0x68e8 <_Z9cmd_printv+0x8c>
					else if (symval == 's'-'a') sp((char *)expval);				// :s print string
    694e:	42 97       	sbiw	r24, 0x12	; 18
    6950:	a1 05       	cpc	r26, r1
    6952:	b1 05       	cpc	r27, r1
    6954:	49 f6       	brne	.-110    	; 0x68e8 <_Z9cmd_printv+0x8c>
    6956:	80 91 61 2b 	lds	r24, 0x2B61
    695a:	90 91 62 2b 	lds	r25, 0x2B62
    695e:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <_Z2spPKc>
    6962:	c2 cf       	rjmp	.-124    	; 0x68e8 <_Z9cmd_printv+0x8c>
				}
				else if (sym > ' ') while (expval-- > 0) spb(sym);	// any litsym
    6964:	8e b3       	in	r24, 0x1e	; 30
    6966:	81 32       	cpi	r24, 0x21	; 33
    6968:	00 f1       	brcs	.+64     	; 0x69aa <_Z9cmd_printv+0x14e>
    696a:	80 91 61 2b 	lds	r24, 0x2B61
    696e:	90 91 62 2b 	lds	r25, 0x2B62
    6972:	a0 91 63 2b 	lds	r26, 0x2B63
    6976:	b0 91 64 2b 	lds	r27, 0x2B64
    697a:	ac 01       	movw	r20, r24
    697c:	bd 01       	movw	r22, r26
    697e:	41 50       	subi	r20, 0x01	; 1
    6980:	51 09       	sbc	r21, r1
    6982:	61 09       	sbc	r22, r1
    6984:	71 09       	sbc	r23, r1
    6986:	40 93 61 2b 	sts	0x2B61, r20
    698a:	50 93 62 2b 	sts	0x2B62, r21
    698e:	60 93 63 2b 	sts	0x2B63, r22
    6992:	70 93 64 2b 	sts	0x2B64, r23
    6996:	18 16       	cp	r1, r24
    6998:	19 06       	cpc	r1, r25
    699a:	1a 06       	cpc	r1, r26
    699c:	1b 06       	cpc	r1, r27
    699e:	0c f0       	brlt	.+2      	; 0x69a2 <_Z9cmd_printv+0x146>
    69a0:	a3 cf       	rjmp	.-186    	; 0x68e8 <_Z9cmd_printv+0x8c>
    69a2:	8e b3       	in	r24, 0x1e	; 30
    69a4:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <_Z3spbc>
    69a8:	e0 cf       	rjmp	.-64     	; 0x696a <_Z9cmd_printv+0x10e>
				else expected(M_pfmts);
    69aa:	8b e0       	ldi	r24, 0x0B	; 11
    69ac:	0e 94 f5 20 	call	0x41ea	; 0x41ea <_Z8expectedh>
				getsym();
			}
			else printInteger(expval, 0, 0);
		}
		if ((sym == s_semi) || (sym == s_eof)) {
			speol();
    69b0:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <_Z5speolv>
#define NUMPINS 32				// default to Arduino Diecimila/168..328
#endif
int bittime[NUMPINS];			// bit times (1000000/baud) per pin, 0 = uninitialized

// set output back to 'stdout' ;)
void resetOutput(void) { outpin = DEFAULT_OUTPIN; }
    69b4:	10 92 d9 26 	sts	0x26D9, r1
		}
	}
#ifdef SOFTWARE_SERIAL_TX
	resetOutput();
#endif
}
    69b8:	0f 90       	pop	r0
    69ba:	df 91       	pop	r29
    69bc:	cf 91       	pop	r28
    69be:	0f 91       	pop	r16
    69c0:	08 95       	ret
		}
		if ((sym == s_semi) || (sym == s_eof)) {
			speol();
			break;
		}
		if (sym == s_comma) {
    69c2:	8e b3       	in	r24, 0x1e	; 30
    69c4:	8c 32       	cpi	r24, 0x2C	; 44
    69c6:	09 f0       	breq	.+2      	; 0x69ca <_Z9cmd_printv+0x16e>
    69c8:	4f cf       	rjmp	.-354    	; 0x6868 <_Z9cmd_printv+0xc>
			//if (inchar ==' ') 	// significant whitespace?! ha ha ha ha ha!
			getsym();
    69ca:	0e 94 47 20 	call	0x408e	; 0x408e <_Z6getsymv>
			if ((sym == s_semi) || (sym == s_eof)) break;	// trailing comma: no crlf
    69ce:	8e b3       	in	r24, 0x1e	; 30
    69d0:	8b 33       	cpi	r24, 0x3B	; 59
    69d2:	81 f3       	breq	.-32     	; 0x69b4 <_Z9cmd_printv+0x158>
    69d4:	8e b3       	in	r24, 0x1e	; 30
    69d6:	88 23       	and	r24, r24
    69d8:	69 f3       	breq	.-38     	; 0x69b4 <_Z9cmd_printv+0x158>
			spb(' ');
    69da:	80 e2       	ldi	r24, 0x20	; 32
    69dc:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <_Z3spbc>
    69e0:	43 cf       	rjmp	.-378    	; 0x6868 <_Z9cmd_printv+0xc>

000069e2 <_Z18runBackgroundTasksv>:
//	runBackgroundTasks
//
//	Runs one eligible background task per invocation
//	Returns true if a task was run
//
void runBackgroundTasks(void) {
    69e2:	0f 93       	push	r16
    69e4:	1f 93       	push	r17
    69e6:	cf 93       	push	r28
    69e8:	ca e0       	ldi	r28, 0x0A	; 10
	if (suspendBackground) return;
#endif

	for (i=0; i<NUMTASKS; i++) {
		// run one task per call on a round robin basis
		if (++curtask >= NUMTASKS) curtask = 0;
    69ea:	80 91 94 26 	lds	r24, 0x2694
    69ee:	8f 5f       	subi	r24, 0xFF	; 255
    69f0:	8a 30       	cpi	r24, 0x0A	; 10
    69f2:	18 f4       	brcc	.+6      	; 0x69fa <_Z18runBackgroundTasksv+0x18>
    69f4:	80 93 94 26 	sts	0x2694, r24
    69f8:	02 c0       	rjmp	.+4      	; 0x69fe <_Z18runBackgroundTasksv+0x1c>
    69fa:	10 92 94 26 	sts	0x2694, r1
		if ((tasklist[curtask] != SLOT_FREE) && 
    69fe:	e0 91 94 26 	lds	r30, 0x2694
    6a02:	f0 e0       	ldi	r31, 0x00	; 0
    6a04:	ee 0f       	add	r30, r30
    6a06:	ff 1f       	adc	r31, r31
    6a08:	e0 58       	subi	r30, 0x80	; 128
    6a0a:	f9 4d       	sbci	r31, 0xD9	; 217
    6a0c:	80 81       	ld	r24, Z
    6a0e:	91 81       	ldd	r25, Z+1	; 0x01
    6a10:	01 96       	adiw	r24, 0x01	; 1
    6a12:	09 f4       	brne	.+2      	; 0x6a16 <_Z18runBackgroundTasksv+0x34>
    6a14:	47 c0       	rjmp	.+142    	; 0x6aa4 <_Z18runBackgroundTasksv+0xc2>
			(((signed long) millis() - (signed long) waketime[curtask])) >= 0) {
    6a16:	0e 94 16 14 	call	0x282c	; 0x282c <millis>
    6a1a:	e0 91 94 26 	lds	r30, 0x2694
    6a1e:	f0 e0       	ldi	r31, 0x00	; 0
    6a20:	df 01       	movw	r26, r30
    6a22:	aa 0f       	add	r26, r26
    6a24:	bb 1f       	adc	r27, r27
    6a26:	aa 0f       	add	r26, r26
    6a28:	bb 1f       	adc	r27, r27
    6a2a:	a0 5d       	subi	r26, 0xD0	; 208
    6a2c:	b9 4d       	sbci	r27, 0xD9	; 217
    6a2e:	0d 91       	ld	r16, X+
    6a30:	1d 91       	ld	r17, X+
    6a32:	2d 91       	ld	r18, X+
    6a34:	3c 91       	ld	r19, X
    6a36:	60 1b       	sub	r22, r16
    6a38:	71 0b       	sbc	r23, r17
    6a3a:	82 0b       	sbc	r24, r18
    6a3c:	93 0b       	sbc	r25, r19
#endif

	for (i=0; i<NUMTASKS; i++) {
		// run one task per call on a round robin basis
		if (++curtask >= NUMTASKS) curtask = 0;
		if ((tasklist[curtask] != SLOT_FREE) && 
    6a3e:	97 fd       	sbrc	r25, 7
    6a40:	31 c0       	rjmp	.+98     	; 0x6aa4 <_Z18runBackgroundTasksv+0xc2>
			(((signed long) millis() - (signed long) waketime[curtask])) >= 0) {

			// run it with the background flag set
			background = 1;
    6a42:	81 e0       	ldi	r24, 0x01	; 1
    6a44:	80 93 96 26 	sts	0x2696, r24
			execscript(SCRIPT_EEPROM, findend(tasklist[curtask]), 0);
    6a48:	ee 0f       	add	r30, r30
    6a4a:	ff 1f       	adc	r31, r31
    6a4c:	e0 58       	subi	r30, 0x80	; 128
    6a4e:	f9 4d       	sbci	r31, 0xD9	; 217
    6a50:	80 81       	ld	r24, Z
    6a52:	91 81       	ldd	r25, Z+1	; 0x01
    6a54:	0e 94 ac 28 	call	0x5158	; 0x5158 <_Z7findendi>
    6a58:	ac 01       	movw	r20, r24
    6a5a:	66 27       	eor	r22, r22
    6a5c:	57 fd       	sbrc	r21, 7
    6a5e:	60 95       	com	r22
    6a60:	76 2f       	mov	r23, r22
    6a62:	20 e0       	ldi	r18, 0x00	; 0
    6a64:	30 e0       	ldi	r19, 0x00	; 0
    6a66:	83 e0       	ldi	r24, 0x03	; 3
    6a68:	21 db       	rcall	.-2494   	; 0x60ac <_Z10execscripthlPc>

			// schedule the next time quantum for this task
			waketime[curtask] = millis() + snoozetime[curtask];
    6a6a:	0e 94 16 14 	call	0x282c	; 0x282c <millis>
    6a6e:	20 91 94 26 	lds	r18, 0x2694
    6a72:	44 e0       	ldi	r20, 0x04	; 4
    6a74:	24 9f       	mul	r18, r20
    6a76:	90 01       	movw	r18, r0
    6a78:	11 24       	eor	r1, r1
    6a7a:	f9 01       	movw	r30, r18
    6a7c:	e0 5d       	subi	r30, 0xD0	; 208
    6a7e:	f9 4d       	sbci	r31, 0xD9	; 217
    6a80:	d9 01       	movw	r26, r18
    6a82:	a8 5a       	subi	r26, 0xA8	; 168
    6a84:	b9 4d       	sbci	r27, 0xD9	; 217
    6a86:	0d 91       	ld	r16, X+
    6a88:	1d 91       	ld	r17, X+
    6a8a:	2d 91       	ld	r18, X+
    6a8c:	3c 91       	ld	r19, X
    6a8e:	60 0f       	add	r22, r16
    6a90:	71 1f       	adc	r23, r17
    6a92:	82 1f       	adc	r24, r18
    6a94:	93 1f       	adc	r25, r19
    6a96:	60 83       	st	Z, r22
    6a98:	71 83       	std	Z+1, r23	; 0x01
    6a9a:	82 83       	std	Z+2, r24	; 0x02
    6a9c:	93 83       	std	Z+3, r25	; 0x03
			background = 0;
    6a9e:	10 92 96 26 	sts	0x2696, r1
			break;
    6aa2:	03 c0       	rjmp	.+6      	; 0x6aaa <_Z18runBackgroundTasksv+0xc8>
    6aa4:	c1 50       	subi	r28, 0x01	; 1

#ifdef suspendBackground
	if (suspendBackground) return;
#endif

	for (i=0; i<NUMTASKS; i++) {
    6aa6:	09 f0       	breq	.+2      	; 0x6aaa <_Z18runBackgroundTasksv+0xc8>
    6aa8:	a0 cf       	rjmp	.-192    	; 0x69ea <_Z18runBackgroundTasksv+0x8>
			waketime[curtask] = millis() + snoozetime[curtask];
			background = 0;
			break;
		}
	}
}
    6aaa:	cf 91       	pop	r28
    6aac:	1f 91       	pop	r17
    6aae:	0f 91       	pop	r16
    6ab0:	08 95       	ret

00006ab2 <_Z9doCommandPc>:
/////////
//
// doCommand: main entry point to execute a bitlash command
//
numvar doCommand(char *cmd) {
	return execscript(SCRIPT_RAM, (numvar) cmd, 0);
    6ab2:	ac 01       	movw	r20, r24
    6ab4:	66 27       	eor	r22, r22
    6ab6:	57 fd       	sbrc	r21, 7
    6ab8:	60 95       	com	r22
    6aba:	76 2f       	mov	r23, r22
    6abc:	20 e0       	ldi	r18, 0x00	; 0
    6abe:	30 e0       	ldi	r19, 0x00	; 0
    6ac0:	81 e0       	ldi	r24, 0x01	; 1
    6ac2:	f4 ca       	rjmp	.-2584   	; 0x60ac <_Z10execscripthlPc>

00006ac4 <_Z6promptv>:
	void cmd_ls(void);
	cmd_ls();
}


void prompt(void) {
    6ac4:	cf 93       	push	r28
    6ac6:	df 93       	push	r29
    6ac8:	cd b7       	in	r28, 0x3d	; 61
    6aca:	de b7       	in	r29, 0x3e	; 62
    6acc:	69 97       	sbiw	r28, 0x19	; 25
    6ace:	0f b6       	in	r0, 0x3f	; 63
    6ad0:	f8 94       	cli
    6ad2:	de bf       	out	0x3e, r29	; 62
    6ad4:	0f be       	out	0x3f, r0	; 63
    6ad6:	cd bf       	out	0x3d, r28	; 61

#if defined(TINY_BUILD)
	msgp(M_prompt);
#else
	// Run the script named "prompt" if there is one else print "> "
	strncpy_P(buf, getmsg(M_promptid), IDLEN);	// get the name "prompt" in our cmd buf
    6ad8:	88 e1       	ldi	r24, 0x18	; 24
    6ada:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <_Z6getmsgh>
    6ade:	48 e1       	ldi	r20, 0x18	; 24
    6ae0:	50 e0       	ldi	r21, 0x00	; 0
    6ae2:	bc 01       	movw	r22, r24
    6ae4:	ce 01       	movw	r24, r28
    6ae6:	01 96       	adiw	r24, 0x01	; 1
    6ae8:	0e 94 1b b5 	call	0x16a36	; 0x16a36 <strncpy_P>
	if (findscript(buf)) doCommand(buf);
    6aec:	ce 01       	movw	r24, r28
    6aee:	01 96       	adiw	r24, 0x01	; 1
    6af0:	0e 94 0d 29 	call	0x521a	; 0x521a <_Z10findscriptPc>
    6af4:	88 23       	and	r24, r24
    6af6:	21 f0       	breq	.+8      	; 0x6b00 <_Z6promptv+0x3c>
    6af8:	ce 01       	movw	r24, r28
    6afa:	01 96       	adiw	r24, 0x01	; 1
    6afc:	da df       	rcall	.-76     	; 0x6ab2 <_Z9doCommandPc>
    6afe:	03 c0       	rjmp	.+6      	; 0x6b06 <_Z6promptv+0x42>
	else msgp(M_prompt);							// else print default prompt
    6b00:	83 e1       	ldi	r24, 0x13	; 19
    6b02:	0e 94 81 1e 	call	0x3d02	; 0x3d02 <_Z4msgph>
#endif
}
    6b06:	69 96       	adiw	r28, 0x19	; 25
    6b08:	0f b6       	in	r0, 0x3f	; 63
    6b0a:	f8 94       	cli
    6b0c:	de bf       	out	0x3e, r29	; 62
    6b0e:	0f be       	out	0x3f, r0	; 63
    6b10:	cd bf       	out	0x3d, r28	; 61
    6b12:	df 91       	pop	r29
    6b14:	cf 91       	pop	r28
    6b16:	08 95       	ret

00006b18 <_Z13displayBannerv>:
void displayBanner(void) {
	// print the banner and copyright notice
	// please note the license requires that you maintain this notice
	// TODO: This uses global memory, should use PROGMEM instead (or       
	// possibly be solved differently altogether).                         
	doCommand("banner");
    6b18:	86 ea       	ldi	r24, 0xA6	; 166
    6b1a:	9c e0       	ldi	r25, 0x0C	; 12
    6b1c:	ca cf       	rjmp	.-108    	; 0x6ab2 <_Z9doCommandPc>

00006b1e <_Z8cmd_helpv>:
}

void displayBanner(void);

void cmd_help(void) {
	displayBanner();
    6b1e:	fc df       	rcall	.-8      	; 0x6b18 <_Z13displayBannerv>
	showdict(helptext);
    6b20:	87 ea       	ldi	r24, 0xA7	; 167
    6b22:	95 e0       	ldi	r25, 0x05	; 5
    6b24:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <_Z8showdictPKc>
	showdict(reservedwords);
    6b28:	88 e5       	ldi	r24, 0x58	; 88
    6b2a:	96 e0       	ldi	r25, 0x06	; 6
    6b2c:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <_Z8showdictPKc>
	msgp(M_functions);
    6b30:	89 e1       	ldi	r24, 0x19	; 25
    6b32:	0e 94 81 1e 	call	0x3d02	; 0x3d02 <_Z4msgph>
#ifdef LONG_ALIASES
	showdict(aliasdict);
	speol();
#endif
	showdict(functiondict);
    6b36:	89 ea       	ldi	r24, 0xA9	; 169
    6b38:	96 e0       	ldi	r25, 0x06	; 6
    6b3a:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <_Z8showdictPKc>
	speol();
    6b3e:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <_Z5speolv>
	show_user_functions();
    6b42:	0e 94 62 1f 	call	0x3ec4	; 0x3ec4 <_Z19show_user_functionsv>
	speol();
    6b46:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <_Z5speolv>
	void cmd_ls(void);
	cmd_ls();
    6b4a:	0c 94 00 2a 	jmp	0x5400	; 0x5400 <_Z6cmd_lsv>

00006b4e <_Z18getswitchstatementv>:
// The switch statement: execute one of N statements based on a selector value
// switch <numval> { stmt0; stmt1;...;stmtN }
// numval < 0: treated as numval == 0
// numval > N: treated as numval == N
//
numvar getswitchstatement(void) {
    6b4e:	cf 92       	push	r12
    6b50:	df 92       	push	r13
    6b52:	ef 92       	push	r14
    6b54:	ff 92       	push	r15
    6b56:	0f 93       	push	r16
    6b58:	1f 93       	push	r17
    6b5a:	cf 93       	push	r28
    6b5c:	df 93       	push	r29
    6b5e:	cd b7       	in	r28, 0x3d	; 61
    6b60:	de b7       	in	r29, 0x3e	; 62
    6b62:	29 97       	sbiw	r28, 0x09	; 9
    6b64:	0f b6       	in	r0, 0x3f	; 63
    6b66:	f8 94       	cli
    6b68:	de bf       	out	0x3e, r29	; 62
    6b6a:	0f be       	out	0x3f, r0	; 63
    6b6c:	cd bf       	out	0x3d, r28	; 61
numvar thesymval = symval;
    6b6e:	c0 90 66 2b 	lds	r12, 0x2B66
    6b72:	d0 90 67 2b 	lds	r13, 0x2B67
    6b76:	e0 90 68 2b 	lds	r14, 0x2B68
    6b7a:	f0 90 69 2b 	lds	r15, 0x2B69
numvar retval = 0;
byte thesym = sym;
    6b7e:	0e b3       	in	r16, 0x1e	; 30
parsepoint fetchmark;

	getsym();						// eat "switch"
    6b80:	0e 94 47 20 	call	0x408e	; 0x408e <_Z6getsymv>
	getnum();						// evaluate the switch selector
    6b84:	8f dd       	rcall	.-1250   	; 0x66a4 <_Z6getnumv>
	if (expval < 0) expval = 0;		// map negative values to zero
    6b86:	80 91 61 2b 	lds	r24, 0x2B61
    6b8a:	90 91 62 2b 	lds	r25, 0x2B62
    6b8e:	a0 91 63 2b 	lds	r26, 0x2B63
    6b92:	b0 91 64 2b 	lds	r27, 0x2B64
    6b96:	b7 ff       	sbrs	r27, 7
    6b98:	08 c0       	rjmp	.+16     	; 0x6baa <_Z18getswitchstatementv+0x5c>
    6b9a:	10 92 61 2b 	sts	0x2B61, r1
    6b9e:	10 92 62 2b 	sts	0x2B62, r1
    6ba2:	10 92 63 2b 	sts	0x2B63, r1
    6ba6:	10 92 64 2b 	sts	0x2B64, r1
	byte which = (byte) expval;		// and stash it for reference
    6baa:	10 91 61 2b 	lds	r17, 0x2B61
	if (sym != s_lcurly) expectedchar('{');
    6bae:	8e b3       	in	r24, 0x1e	; 30
    6bb0:	8b 37       	cpi	r24, 0x7B	; 123
    6bb2:	19 f0       	breq	.+6      	; 0x6bba <_Z18getswitchstatementv+0x6c>
    6bb4:	8b e7       	ldi	r24, 0x7B	; 123
    6bb6:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <_Z12expectedcharh>
	getsym();		// eat "{"
    6bba:	0e 94 47 20 	call	0x408e	; 0x408e <_Z6getsymv>

	// we sit before the first statement
	// scan and discard the <selector>'s worth of statements 
	// that sit before the one we want
	while ((which > 0) && (sym != s_eof) && (sym != s_rcurly)) {
    6bbe:	11 23       	and	r17, r17
    6bc0:	b1 f0       	breq	.+44     	; 0x6bee <_Z18getswitchstatementv+0xa0>
    6bc2:	8e b3       	in	r24, 0x1e	; 30
    6bc4:	81 11       	cpse	r24, r1
    6bc6:	0f c0       	rjmp	.+30     	; 0x6be6 <_Z18getswitchstatementv+0x98>
	}

	// If the selector is greater than the number of statements,
	// back up and execute the last one
	if (which > 0) {					// oops ran out of piddys
		returntoparsepoint(&fetchmark, 0);
    6bc8:	60 e0       	ldi	r22, 0x00	; 0
    6bca:	ce 01       	movw	r24, r28
    6bcc:	01 96       	adiw	r24, 0x01	; 1
    6bce:	0e 94 5f 2b 	call	0x56be	; 0x56be <_Z18returntoparsepointP10parsepointh>
		sym = thesym;
    6bd2:	0e bb       	out	0x1e, r16	; 30
		symval = thesymval;
    6bd4:	c0 92 66 2b 	sts	0x2B66, r12
    6bd8:	d0 92 67 2b 	sts	0x2B67, r13
    6bdc:	e0 92 68 2b 	sts	0x2B68, r14
    6be0:	f0 92 69 2b 	sts	0x2B69, r15
    6be4:	04 c0       	rjmp	.+8      	; 0x6bee <_Z18getswitchstatementv+0xa0>
	getsym();		// eat "{"

	// we sit before the first statement
	// scan and discard the <selector>'s worth of statements 
	// that sit before the one we want
	while ((which > 0) && (sym != s_eof) && (sym != s_rcurly)) {
    6be6:	8e b3       	in	r24, 0x1e	; 30
    6be8:	8d 37       	cpi	r24, 0x7D	; 125
    6bea:	99 f4       	brne	.+38     	; 0x6c12 <_Z18getswitchstatementv+0xc4>
    6bec:	ed cf       	rjmp	.-38     	; 0x6bc8 <_Z18getswitchstatementv+0x7a>
		symval = thesymval;
	}
	//unexpected(M_number);

	// execute the statement we're pointing at
	retval = getstatement();
    6bee:	02 d9       	rcall	.-3580   	; 0x5df4 <_Z12getstatementv>

	// eat the rest of the statement block to "}"
	while ((sym != s_eof) && (sym != s_rcurly)) skipstatement();
    6bf0:	2e b3       	in	r18, 0x1e	; 30
    6bf2:	22 23       	and	r18, r18
    6bf4:	31 f1       	breq	.+76     	; 0x6c42 <_Z18getswitchstatementv+0xf4>
    6bf6:	2e b3       	in	r18, 0x1e	; 30
    6bf8:	2d 37       	cpi	r18, 0x7D	; 125
    6bfa:	19 f1       	breq	.+70     	; 0x6c42 <_Z18getswitchstatementv+0xf4>
    6bfc:	6e 83       	std	Y+6, r22	; 0x06
    6bfe:	7f 83       	std	Y+7, r23	; 0x07
    6c00:	88 87       	std	Y+8, r24	; 0x08
    6c02:	99 87       	std	Y+9, r25	; 0x09
    6c04:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <_Z13skipstatementv>
    6c08:	6e 81       	ldd	r22, Y+6	; 0x06
    6c0a:	7f 81       	ldd	r23, Y+7	; 0x07
    6c0c:	88 85       	ldd	r24, Y+8	; 0x08
    6c0e:	99 85       	ldd	r25, Y+9	; 0x09
    6c10:	ef cf       	rjmp	.-34     	; 0x6bf0 <_Z18getswitchstatementv+0xa2>

	// we sit before the first statement
	// scan and discard the <selector>'s worth of statements 
	// that sit before the one we want
	while ((which > 0) && (sym != s_eof) && (sym != s_rcurly)) {
		markparsepoint(&fetchmark);
    6c12:	ce 01       	movw	r24, r28
    6c14:	01 96       	adiw	r24, 0x01	; 1
    6c16:	0e 94 86 20 	call	0x410c	; 0x410c <_Z14markparsepointP10parsepoint>
		thesym = sym;
    6c1a:	0e b3       	in	r16, 0x1e	; 30
		thesymval = symval;
    6c1c:	c0 90 66 2b 	lds	r12, 0x2B66
    6c20:	d0 90 67 2b 	lds	r13, 0x2B67
    6c24:	e0 90 68 2b 	lds	r14, 0x2B68
    6c28:	f0 90 69 2b 	lds	r15, 0x2B69
		skipstatement();
    6c2c:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <_Z13skipstatementv>
		if ((sym != s_eof) && (sym != s_rcurly)) --which;
    6c30:	8e b3       	in	r24, 0x1e	; 30
    6c32:	88 23       	and	r24, r24
    6c34:	21 f2       	breq	.-120    	; 0x6bbe <_Z18getswitchstatementv+0x70>
    6c36:	8e b3       	in	r24, 0x1e	; 30
    6c38:	8d 37       	cpi	r24, 0x7D	; 125
    6c3a:	09 f4       	brne	.+2      	; 0x6c3e <_Z18getswitchstatementv+0xf0>
    6c3c:	c0 cf       	rjmp	.-128    	; 0x6bbe <_Z18getswitchstatementv+0x70>
    6c3e:	11 50       	subi	r17, 0x01	; 1
    6c40:	be cf       	rjmp	.-132    	; 0x6bbe <_Z18getswitchstatementv+0x70>
	// execute the statement we're pointing at
	retval = getstatement();

	// eat the rest of the statement block to "}"
	while ((sym != s_eof) && (sym != s_rcurly)) skipstatement();
	if (sym == s_rcurly) getsym();		// eat "}"
    6c42:	2e b3       	in	r18, 0x1e	; 30
    6c44:	2d 37       	cpi	r18, 0x7D	; 125
    6c46:	51 f4       	brne	.+20     	; 0x6c5c <_Z18getswitchstatementv+0x10e>
    6c48:	6e 83       	std	Y+6, r22	; 0x06
    6c4a:	7f 83       	std	Y+7, r23	; 0x07
    6c4c:	88 87       	std	Y+8, r24	; 0x08
    6c4e:	99 87       	std	Y+9, r25	; 0x09
    6c50:	0e 94 47 20 	call	0x408e	; 0x408e <_Z6getsymv>
    6c54:	6e 81       	ldd	r22, Y+6	; 0x06
    6c56:	7f 81       	ldd	r23, Y+7	; 0x07
    6c58:	88 85       	ldd	r24, Y+8	; 0x08
    6c5a:	99 85       	ldd	r25, Y+9	; 0x09
	return retval;
}
    6c5c:	29 96       	adiw	r28, 0x09	; 9
    6c5e:	0f b6       	in	r0, 0x3f	; 63
    6c60:	f8 94       	cli
    6c62:	de bf       	out	0x3e, r29	; 62
    6c64:	0f be       	out	0x3f, r0	; 63
    6c66:	cd bf       	out	0x3d, r28	; 61
    6c68:	df 91       	pop	r29
    6c6a:	cf 91       	pop	r28
    6c6c:	1f 91       	pop	r17
    6c6e:	0f 91       	pop	r16
    6c70:	ff 90       	pop	r15
    6c72:	ef 90       	pop	r14
    6c74:	df 90       	pop	r13
    6c76:	cf 90       	pop	r12
    6c78:	08 95       	ret

00006c7a <_Z8initlbufv>:
	else msgp(M_prompt);							// else print default prompt
#endif
}

void initlbuf(void) {
	lbufptr = lbuf;
    6c7a:	88 ec       	ldi	r24, 0xC8	; 200
    6c7c:	9d e2       	ldi	r25, 0x2D	; 45
    6c7e:	90 93 c9 2f 	sts	0x2FC9, r25
    6c82:	80 93 c8 2f 	sts	0x2FC8, r24
#if defined(SERIAL_OVERRIDE) && 0
	// don't do the prompt in serialIsOverridden mode
	if (serialIsOverridden()) return;
#endif

	prompt();
    6c86:	1e df       	rcall	.-452    	; 0x6ac4 <_Z6promptv>
	
	// flush any pending serial input
	while (serialAvailable()) serialRead();
    6c88:	84 e0       	ldi	r24, 0x04	; 4
    6c8a:	94 e2       	ldi	r25, 0x24	; 36
    6c8c:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <_ZN14HardwareSerial9availableEv>
    6c90:	89 2b       	or	r24, r25
    6c92:	29 f0       	breq	.+10     	; 0x6c9e <_Z8initlbufv+0x24>
    6c94:	84 e0       	ldi	r24, 0x04	; 4
    6c96:	94 e2       	ldi	r25, 0x24	; 36
    6c98:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <_ZN14HardwareSerial4readEv>
    6c9c:	f5 cf       	rjmp	.-22     	; 0x6c88 <_Z8initlbufv+0xe>
}
    6c9e:	08 95       	ret

00006ca0 <_Z11doCharacterc>:
//	handle a character from the input stream
// 	may execute the command, etc.
//
void doCharacter(char c) {

	if ((c == '\r') || (c == '\n')) {
    6ca0:	8d 30       	cpi	r24, 0x0D	; 13
    6ca2:	11 f0       	breq	.+4      	; 0x6ca8 <_Z11doCharacterc+0x8>
    6ca4:	8a 30       	cpi	r24, 0x0A	; 10
    6ca6:	59 f4       	brne	.+22     	; 0x6cbe <_Z11doCharacterc+0x1e>
		speol();
    6ca8:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <_Z5speolv>
		*lbufptr = 0;
    6cac:	e0 91 c8 2f 	lds	r30, 0x2FC8
    6cb0:	f0 91 c9 2f 	lds	r31, 0x2FC9
    6cb4:	10 82       	st	Z, r1
		doCommand(lbuf);
    6cb6:	88 ec       	ldi	r24, 0xC8	; 200
    6cb8:	9d e2       	ldi	r25, 0x2D	; 45
    6cba:	fb de       	rcall	.-522    	; 0x6ab2 <_Z9doCommandPc>
    6cbc:	07 c0       	rjmp	.+14     	; 0x6ccc <_Z11doCharacterc+0x2c>
		initlbuf();
	}
	else if (c == 3) {		// ^C break/stop
    6cbe:	83 30       	cpi	r24, 0x03	; 3
    6cc0:	31 f4       	brne	.+12     	; 0x6cce <_Z11doCharacterc+0x2e>
		msgpl(M_ctrlc);
    6cc2:	86 e0       	ldi	r24, 0x06	; 6
    6cc4:	0e 94 77 1f 	call	0x3eee	; 0x3eee <_Z5msgplh>
		initTaskList();
    6cc8:	0e 94 9c 27 	call	0x4f38	; 0x4f38 <_Z12initTaskListv>
		initlbuf();
    6ccc:	d6 cf       	rjmp	.-84     	; 0x6c7a <_Z8initlbufv>
	}
#if !defined(TINY_BUILD)
	else if (c == 2) {			// ^B suspend Background macros
    6cce:	82 30       	cpi	r24, 0x02	; 2
    6cd0:	41 f4       	brne	.+16     	; 0x6ce2 <_Z11doCharacterc+0x42>
		suspendBackground = !suspendBackground;
    6cd2:	81 e0       	ldi	r24, 0x01	; 1
    6cd4:	90 91 95 26 	lds	r25, 0x2695
    6cd8:	91 11       	cpse	r25, r1
    6cda:	80 e0       	ldi	r24, 0x00	; 0
    6cdc:	80 93 95 26 	sts	0x2695, r24
    6ce0:	08 95       	ret
	}
#endif
	else if ((c == 8) || (c == 0x7f)) {
    6ce2:	88 30       	cpi	r24, 0x08	; 8
    6ce4:	11 f0       	breq	.+4      	; 0x6cea <_Z11doCharacterc+0x4a>
    6ce6:	8f 37       	cpi	r24, 0x7F	; 127
    6ce8:	f1 f4       	brne	.+60     	; 0x6d26 <_Z11doCharacterc+0x86>
		if (lbufptr == lbuf) spb(7);		// bell
    6cea:	80 91 c8 2f 	lds	r24, 0x2FC8
    6cee:	90 91 c9 2f 	lds	r25, 0x2FC9
    6cf2:	88 5c       	subi	r24, 0xC8	; 200
    6cf4:	9d 42       	sbci	r25, 0x2D	; 45
    6cf6:	19 f4       	brne	.+6      	; 0x6cfe <_Z11doCharacterc+0x5e>
    6cf8:	87 e0       	ldi	r24, 0x07	; 7
    6cfa:	0c 94 3b 1e 	jmp	0x3c76	; 0x3c76 <_Z3spbc>
		else {
			spb(8); spb(' '); spb(8);
    6cfe:	88 e0       	ldi	r24, 0x08	; 8
    6d00:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <_Z3spbc>
    6d04:	80 e2       	ldi	r24, 0x20	; 32
    6d06:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <_Z3spbc>
    6d0a:	88 e0       	ldi	r24, 0x08	; 8
    6d0c:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <_Z3spbc>
			*(--lbufptr) = 0;
    6d10:	e0 91 c8 2f 	lds	r30, 0x2FC8
    6d14:	f0 91 c9 2f 	lds	r31, 0x2FC9
    6d18:	31 97       	sbiw	r30, 0x01	; 1
    6d1a:	f0 93 c9 2f 	sts	0x2FC9, r31
    6d1e:	e0 93 c8 2f 	sts	0x2FC8, r30
    6d22:	10 82       	st	Z, r1
    6d24:	08 95       	ret
		}
	} 
#ifdef PARSER_TRACE
	else if (c == 20) {		// ^T toggle trace
    6d26:	84 31       	cpi	r24, 0x14	; 20
    6d28:	41 f4       	brne	.+16     	; 0x6d3a <_Z11doCharacterc+0x9a>
		trace = !trace;
    6d2a:	81 e0       	ldi	r24, 0x01	; 1
    6d2c:	90 91 47 2b 	lds	r25, 0x2B47
    6d30:	91 11       	cpse	r25, r1
    6d32:	80 e0       	ldi	r24, 0x00	; 0
    6d34:	80 93 47 2b 	sts	0x2B47, r24
    6d38:	08 95       	ret
		//spb(7);
	}
#endif
#if !defined(TINY_BUILD)
	else if (c == 21) {		// ^U to get last line
    6d3a:	85 31       	cpi	r24, 0x15	; 21
    6d3c:	99 f4       	brne	.+38     	; 0x6d64 <_Z11doCharacterc+0xc4>
		msgpl(M_ctrlu);
    6d3e:	88 e0       	ldi	r24, 0x08	; 8
    6d40:	0e 94 77 1f 	call	0x3eee	; 0x3eee <_Z5msgplh>
		prompt();
    6d44:	bf de       	rcall	.-642    	; 0x6ac4 <_Z6promptv>
		sp(lbuf);
    6d46:	88 ec       	ldi	r24, 0xC8	; 200
    6d48:	9d e2       	ldi	r25, 0x2D	; 45
    6d4a:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <_Z2spPKc>
		lbufptr = lbuf + strlen(lbuf);
    6d4e:	e8 ec       	ldi	r30, 0xC8	; 200
    6d50:	fd e2       	ldi	r31, 0x2D	; 45
    6d52:	01 90       	ld	r0, Z+
    6d54:	00 20       	and	r0, r0
    6d56:	e9 f7       	brne	.-6      	; 0x6d52 <_Z11doCharacterc+0xb2>
    6d58:	31 97       	sbiw	r30, 0x01	; 1
    6d5a:	f0 93 c9 2f 	sts	0x2FC9, r31
    6d5e:	e0 93 c8 2f 	sts	0x2FC8, r30
    6d62:	08 95       	ret
	}
#endif
	else putlbuf(c);
    6d64:	0c 94 6a 1e 	jmp	0x3cd4	; 0x3cd4 <_Z7putlbufc>

00006d68 <_Z11initBitlashm>:
}


void initBitlash(unsigned long baud) {
    6d68:	ab 01       	movw	r20, r22
    6d6a:	bc 01       	movw	r22, r24
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    6d6c:	26 e0       	ldi	r18, 0x06	; 6
    6d6e:	84 e0       	ldi	r24, 0x04	; 4
    6d70:	94 e2       	ldi	r25, 0x24	; 36
    6d72:	0e 94 cd 0c 	call	0x199a	; 0x199a <_ZN14HardwareSerial5beginEmh>

#if defined(ARM_BUILD)
	eeinit();
#endif

	initTaskList();
    6d76:	0e 94 9c 27 	call	0x4f38	; 0x4f38 <_Z12initTaskListv>
	vinit();
    6d7a:	0e 94 24 25 	call	0x4a48	; 0x4a48 <_Z5vinitv>
	displayBanner();
    6d7e:	cc de       	rcall	.-616    	; 0x6b18 <_Z13displayBannerv>

#if !defined(TINY_BUILD)
	// Run the script named "startup" if there is one
	strncpy_P(lbuf, getmsg(M_startup), STRVALLEN);	// get the name "startup" in our cmd buf
    6d80:	86 e1       	ldi	r24, 0x16	; 22
    6d82:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <_Z6getmsgh>
    6d86:	4f ef       	ldi	r20, 0xFF	; 255
    6d88:	51 e0       	ldi	r21, 0x01	; 1
    6d8a:	bc 01       	movw	r22, r24
    6d8c:	88 ec       	ldi	r24, 0xC8	; 200
    6d8e:	9d e2       	ldi	r25, 0x2D	; 45
    6d90:	0e 94 1b b5 	call	0x16a36	; 0x16a36 <strncpy_P>
	//if (findKey(lbuf) >= 0) doCommand(lbuf);		// look it up.  exists?  call it.
	if (findscript(lbuf)) doCommand(lbuf);			// look it up.  exists?  call it.
    6d94:	88 ec       	ldi	r24, 0xC8	; 200
    6d96:	9d e2       	ldi	r25, 0x2D	; 45
    6d98:	0e 94 0d 29 	call	0x521a	; 0x521a <_Z10findscriptPc>
    6d9c:	88 23       	and	r24, r24
    6d9e:	19 f0       	breq	.+6      	; 0x6da6 <_Z11initBitlashm+0x3e>
    6da0:	88 ec       	ldi	r24, 0xC8	; 200
    6da2:	9d e2       	ldi	r25, 0x2D	; 45
    6da4:	86 de       	rcall	.-756    	; 0x6ab2 <_Z9doCommandPc>
#endif

	initlbuf();
    6da6:	69 cf       	rjmp	.-302    	; 0x6c7a <_Z8initlbufv>

00006da8 <_Z10runBitlashv>:
//	runBitlash
//
//	This is the main entry point where the main loop gives Bitlash cycles
//	Call this frequently from loop()
//
void runBitlash(void) {
    6da8:	cf 93       	push	r28
	// bytes, which is as much as can be sent over at 115200 bps in
	// one millisecond. This means that when runBitlash is called
	// at least once every millisecond, the receive buffer will not
	// overflow.
	uint8_t times = 12;
	while (times-- && serialAvailable()) doCharacter(serialRead());
    6daa:	cd e0       	ldi	r28, 0x0D	; 13
    6dac:	c1 50       	subi	r28, 0x01	; 1
    6dae:	11 f4       	brne	.+4      	; 0x6db4 <_Z10runBitlashv+0xc>

	// Background macro handler: feed it one call each time through
	runBackgroundTasks();
}
    6db0:	cf 91       	pop	r28
	// overflow.
	uint8_t times = 12;
	while (times-- && serialAvailable()) doCharacter(serialRead());

	// Background macro handler: feed it one call each time through
	runBackgroundTasks();
    6db2:	17 ce       	rjmp	.-978    	; 0x69e2 <_Z18runBackgroundTasksv>
	// bytes, which is as much as can be sent over at 115200 bps in
	// one millisecond. This means that when runBitlash is called
	// at least once every millisecond, the receive buffer will not
	// overflow.
	uint8_t times = 12;
	while (times-- && serialAvailable()) doCharacter(serialRead());
    6db4:	84 e0       	ldi	r24, 0x04	; 4
    6db6:	94 e2       	ldi	r25, 0x24	; 36
    6db8:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <_ZN14HardwareSerial9availableEv>
    6dbc:	89 2b       	or	r24, r25
    6dbe:	c1 f3       	breq	.-16     	; 0x6db0 <_Z10runBitlashv+0x8>
    6dc0:	84 e0       	ldi	r24, 0x04	; 4
    6dc2:	94 e2       	ldi	r25, 0x24	; 36
    6dc4:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <_ZN14HardwareSerial4readEv>
    6dc8:	6b df       	rcall	.-298    	; 0x6ca0 <_Z11doCharacterc>
    6dca:	f0 cf       	rjmp	.-32     	; 0x6dac <_Z10runBitlashv+0x4>

00006dcc <_ZN8GSClient5writeEh>:

#include "GSClient.h"
#include "util.h"

size_t GSClient::write(uint8_t c)
{
    6dcc:	cf 93       	push	r28
    6dce:	df 93       	push	r29
    6dd0:	1f 92       	push	r1
    6dd2:	cd b7       	in	r28, 0x3d	; 61
    6dd4:	de b7       	in	r29, 0x3e	; 62
    6dd6:	69 83       	std	Y+1, r22	; 0x01
  return write(&c, sizeof(c));
    6dd8:	dc 01       	movw	r26, r24
    6dda:	ed 91       	ld	r30, X+
    6ddc:	fc 91       	ld	r31, X
    6dde:	02 80       	ldd	r0, Z+2	; 0x02
    6de0:	f3 81       	ldd	r31, Z+3	; 0x03
    6de2:	e0 2d       	mov	r30, r0
    6de4:	41 e0       	ldi	r20, 0x01	; 1
    6de6:	50 e0       	ldi	r21, 0x00	; 0
    6de8:	be 01       	movw	r22, r28
    6dea:	6f 5f       	subi	r22, 0xFF	; 255
    6dec:	7f 4f       	sbci	r23, 0xFF	; 255
    6dee:	19 95       	eicall
}
    6df0:	0f 90       	pop	r0
    6df2:	df 91       	pop	r29
    6df4:	cf 91       	pop	r28
    6df6:	08 95       	ret

00006df8 <_ZN8GSClient5flushEv>:
{
  return gs.peekData(this->cid);
}

void GSClient::flush()
{
    6df8:	08 95       	ret

00006dfa <_ZN8GSClientcvbEv>:
  return gs.getConnectionInfo(this->cid).connected;
}

GSClient::operator bool()
{
  return (this->cid != GSModule::INVALID_CID);
    6dfa:	21 e0       	ldi	r18, 0x01	; 1
    6dfc:	fc 01       	movw	r30, r24
    6dfe:	86 85       	ldd	r24, Z+14	; 0x0e
    6e00:	8f 3f       	cpi	r24, 0xFF	; 255
    6e02:	09 f4       	brne	.+2      	; 0x6e06 <_ZN8GSClientcvbEv+0xc>
    6e04:	20 e0       	ldi	r18, 0x00	; 0
}
    6e06:	82 2f       	mov	r24, r18
    6e08:	08 95       	ret

00006e0a <_ZN8GSClient5writeEPKhj>:
{
  return write(&c, sizeof(c));
}

size_t GSClient::write(const uint8_t *buf, size_t size)
{
    6e0a:	cf 93       	push	r28
    6e0c:	df 93       	push	r29
    6e0e:	fc 01       	movw	r30, r24
    6e10:	d4 2f       	mov	r29, r20
    6e12:	c5 2f       	mov	r28, r21
  if (!gs.writeData(this->cid, buf, size))
    6e14:	24 2f       	mov	r18, r20
    6e16:	35 2f       	mov	r19, r21
    6e18:	ab 01       	movw	r20, r22
    6e1a:	66 85       	ldd	r22, Z+14	; 0x0e
    6e1c:	84 85       	ldd	r24, Z+12	; 0x0c
    6e1e:	95 85       	ldd	r25, Z+13	; 0x0d
    6e20:	af d6       	rcall	.+3422   	; 0x7b80 <_ZN6GSCore9writeDataEhPKhj>
    6e22:	81 11       	cpse	r24, r1
    6e24:	02 c0       	rjmp	.+4      	; 0x6e2a <_ZN8GSClient5writeEPKhj+0x20>
    return 0;
    6e26:	90 e0       	ldi	r25, 0x00	; 0
    6e28:	02 c0       	rjmp	.+4      	; 0x6e2e <_ZN8GSClient5writeEPKhj+0x24>
  return size;
    6e2a:	8d 2f       	mov	r24, r29
    6e2c:	9c 2f       	mov	r25, r28
}
    6e2e:	df 91       	pop	r29
    6e30:	cf 91       	pop	r28
    6e32:	08 95       	ret

00006e34 <_ZN8GSClient9availableEv>:

int GSClient::available()
{
  return gs.availableData(this->cid);
    6e34:	fc 01       	movw	r30, r24
    6e36:	66 85       	ldd	r22, Z+14	; 0x0e
    6e38:	84 85       	ldd	r24, Z+12	; 0x0c
    6e3a:	95 85       	ldd	r25, Z+13	; 0x0d
    6e3c:	0c 94 fe 40 	jmp	0x81fc	; 0x81fc <_ZN6GSCore13availableDataEh>

00006e40 <_ZN8GSClient4readEv>:
}

int GSClient::read()
{
  return gs.readData(this->cid);
    6e40:	fc 01       	movw	r30, r24
    6e42:	66 85       	ldd	r22, Z+14	; 0x0e
    6e44:	84 85       	ldd	r24, Z+12	; 0x0c
    6e46:	95 85       	ldd	r25, Z+13	; 0x0d
    6e48:	d7 c7       	rjmp	.+4014   	; 0x7df8 <_ZN6GSCore8readDataEh>

00006e4a <_ZN8GSClient4readEPhj>:
}

int GSClient::read(uint8_t *buf, size_t size)
{
    6e4a:	9a 01       	movw	r18, r20
  return gs.readData(this->cid, buf, size);
    6e4c:	ab 01       	movw	r20, r22
    6e4e:	fc 01       	movw	r30, r24
    6e50:	66 85       	ldd	r22, Z+14	; 0x0e
    6e52:	84 85       	ldd	r24, Z+12	; 0x0c
    6e54:	95 85       	ldd	r25, Z+13	; 0x0d
    6e56:	f6 c7       	rjmp	.+4076   	; 0x7e44 <_ZN6GSCore8readDataEhPhj>

00006e58 <_ZN8GSClient4peekEv>:
}

int GSClient::peek()
{
  return gs.peekData(this->cid);
    6e58:	fc 01       	movw	r30, r24
    6e5a:	66 85       	ldd	r22, Z+14	; 0x0e
    6e5c:	84 85       	ldd	r24, Z+12	; 0x0c
    6e5e:	95 85       	ldd	r25, Z+13	; 0x0d
    6e60:	0c 94 56 41 	jmp	0x82ac	; 0x82ac <_ZN6GSCore8peekDataEh>

00006e64 <_ZN8GSClient4stopEv>:
  // Nothing todo, we don't keep any buffers
}

void GSClient::stop()
{
  gs.disconnect(this->cid);
    6e64:	fc 01       	movw	r30, r24
    6e66:	66 85       	ldd	r22, Z+14	; 0x0e
    6e68:	84 85       	ldd	r24, Z+12	; 0x0c
    6e6a:	95 85       	ldd	r25, Z+13	; 0x0d
    6e6c:	0c 94 14 46 	jmp	0x8c28	; 0x8c28 <_ZN8GSModule10disconnectEh>

00006e70 <_ZN8GSClient9connectedEv>:
}

uint8_t GSClient::connected()
{
    6e70:	1f 93       	push	r17
    6e72:	cf 93       	push	r28
    6e74:	df 93       	push	r29
  if (this->cid == GSModule::INVALID_CID)
    6e76:	fc 01       	movw	r30, r24
    6e78:	16 85       	ldd	r17, Z+14	; 0x0e
    6e7a:	1f 3f       	cpi	r17, 0xFF	; 255
    6e7c:	81 f0       	breq	.+32     	; 0x6e9e <_ZN8GSClient9connectedEv+0x2e>
    return false;
  return gs.getConnectionInfo(this->cid).connected;
    6e7e:	c4 85       	ldd	r28, Z+12	; 0x0c
    6e80:	d5 85       	ldd	r29, Z+13	; 0x0d
   * Return information about the given cid.
   * Only valid cids should be passed.
   */
  const ConnectionInfo& getConnectionInfo(cid_t cid)
  {
    readAndProcessAsync();
    6e82:	ce 01       	movw	r24, r28
    6e84:	0e 94 6c 41 	call	0x82d8	; 0x82d8 <_ZN6GSCore19readAndProcessAsyncEv>
    6e88:	fe 01       	movw	r30, r28
    6e8a:	89 e0       	ldi	r24, 0x09	; 9
    6e8c:	18 9f       	mul	r17, r24
    6e8e:	e0 0d       	add	r30, r0
    6e90:	f1 1d       	adc	r31, r1
    6e92:	11 24       	eor	r1, r1
    6e94:	e2 5b       	subi	r30, 0xB2	; 178
    6e96:	fd 4f       	sbci	r31, 0xFD	; 253
    6e98:	80 81       	ld	r24, Z
    6e9a:	81 70       	andi	r24, 0x01	; 1
    6e9c:	01 c0       	rjmp	.+2      	; 0x6ea0 <_ZN8GSClient9connectedEv+0x30>
}

uint8_t GSClient::connected()
{
  if (this->cid == GSModule::INVALID_CID)
    return false;
    6e9e:	80 e0       	ldi	r24, 0x00	; 0
  return gs.getConnectionInfo(this->cid).connected;
}
    6ea0:	df 91       	pop	r29
    6ea2:	cf 91       	pop	r28
    6ea4:	1f 91       	pop	r17
    6ea6:	08 95       	ret

00006ea8 <_ZN8GSClientaSEh>:
  return (this->cid != GSModule::INVALID_CID);
}

GSClient& GSClient::operator =(GSCore::cid_t cid)
{
  this->cid = cid;
    6ea8:	fc 01       	movw	r30, r24
    6eaa:	66 87       	std	Z+14, r22	; 0x0e
  return *this;
}
    6eac:	08 95       	ret

00006eae <_GLOBAL__sub_I__ZN8GSClient5writeEh>:
    6eae:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    6eb0:	00 e0       	ldi	r16, 0x00	; 0
    6eb2:	20 e0       	ldi	r18, 0x00	; 0
    6eb4:	40 e0       	ldi	r20, 0x00	; 0
    6eb6:	60 e0       	ldi	r22, 0x00	; 0
    6eb8:	8a ec       	ldi	r24, 0xCA	; 202
    6eba:	9f e2       	ldi	r25, 0x2F	; 47
    6ebc:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <_ZN9IPAddressC1Ehhhh>
    6ec0:	0f 91       	pop	r16
    6ec2:	08 95       	ret

00006ec4 <_ZN6GSCore11parseNumberEPjPKhhh.part.6>:
  this->initializing = true;
  this->serial = &serial;
  bool res = _begin();
  this->initializing = false;
  return res;
}
    6ec4:	db 01       	movw	r26, r22
    6ec6:	e0 e0       	ldi	r30, 0x00	; 0
    6ec8:	f0 e0       	ldi	r31, 0x00	; 0
    6eca:	46 0f       	add	r20, r22
    6ecc:	30 e0       	ldi	r19, 0x00	; 0
    6ece:	4a 17       	cp	r20, r26
    6ed0:	21 f1       	breq	.+72     	; 0x6f1a <_ZN6GSCore11parseNumberEPjPKhhh.part.6+0x56>
    6ed2:	ea 39       	cpi	r30, 0x9A	; 154
    6ed4:	59 e1       	ldi	r21, 0x19	; 25
    6ed6:	f5 07       	cpc	r31, r21
    6ed8:	28 f5       	brcc	.+74     	; 0x6f24 <_ZN6GSCore11parseNumberEPjPKhhh.part.6+0x60>
    6eda:	e2 9f       	mul	r30, r18
    6edc:	b0 01       	movw	r22, r0
    6ede:	e3 9f       	mul	r30, r19
    6ee0:	70 0d       	add	r23, r0
    6ee2:	f2 9f       	mul	r31, r18
    6ee4:	70 0d       	add	r23, r0
    6ee6:	11 24       	eor	r1, r1
    6ee8:	5d 91       	ld	r21, X+
    6eea:	e0 ed       	ldi	r30, 0xD0	; 208
    6eec:	e5 0f       	add	r30, r21
    6eee:	ea 30       	cpi	r30, 0x0A	; 10
    6ef0:	18 f4       	brcc	.+6      	; 0x6ef8 <_ZN6GSCore11parseNumberEPjPKhhh.part.6+0x34>
    6ef2:	fb 01       	movw	r30, r22
    6ef4:	f0 97       	sbiw	r30, 0x30	; 48
    6ef6:	0e c0       	rjmp	.+28     	; 0x6f14 <_ZN6GSCore11parseNumberEPjPKhhh.part.6+0x50>
    6ef8:	ef e9       	ldi	r30, 0x9F	; 159
    6efa:	e5 0f       	add	r30, r21
    6efc:	ea 31       	cpi	r30, 0x1A	; 26
    6efe:	20 f4       	brcc	.+8      	; 0x6f08 <_ZN6GSCore11parseNumberEPjPKhhh.part.6+0x44>
    6f00:	fb 01       	movw	r30, r22
    6f02:	e7 55       	subi	r30, 0x57	; 87
    6f04:	f1 09       	sbc	r31, r1
    6f06:	06 c0       	rjmp	.+12     	; 0x6f14 <_ZN6GSCore11parseNumberEPjPKhhh.part.6+0x50>
    6f08:	ef eb       	ldi	r30, 0xBF	; 191
    6f0a:	e5 0f       	add	r30, r21
    6f0c:	ea 31       	cpi	r30, 0x1A	; 26
    6f0e:	50 f4       	brcc	.+20     	; 0x6f24 <_ZN6GSCore11parseNumberEPjPKhhh.part.6+0x60>
    6f10:	fb 01       	movw	r30, r22
    6f12:	f7 97       	sbiw	r30, 0x37	; 55
    6f14:	e5 0f       	add	r30, r21
    6f16:	f1 1d       	adc	r31, r1
    6f18:	da cf       	rjmp	.-76     	; 0x6ece <_ZN6GSCore11parseNumberEPjPKhhh.part.6+0xa>
    6f1a:	dc 01       	movw	r26, r24
    6f1c:	ed 93       	st	X+, r30
    6f1e:	fc 93       	st	X, r31
    6f20:	81 e0       	ldi	r24, 0x01	; 1
    6f22:	08 95       	ret
    6f24:	80 e0       	ldi	r24, 0x00	; 0
    6f26:	08 95       	ret

00006f28 <_ZN14HardwareSerial5writeEi>:
    6f28:	dc 01       	movw	r26, r24
    6f2a:	ed 91       	ld	r30, X+
    6f2c:	fc 91       	ld	r31, X
    6f2e:	01 90       	ld	r0, Z+
    6f30:	f0 81       	ld	r31, Z
    6f32:	e0 2d       	mov	r30, r0
    6f34:	19 94       	eijmp

00006f36 <_ZN6GSCoreC1Ev>:
    6f36:	cf 93       	push	r28
    6f38:	df 93       	push	r29
    6f3a:	ec 01       	movw	r28, r24
    6f3c:	86 5c       	subi	r24, 0xC6	; 198
    6f3e:	9d 4f       	sbci	r25, 0xFD	; 253
    6f40:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <_ZN9IPAddressC1Ev>
    6f44:	ce 01       	movw	r24, r28
    6f46:	8a 5b       	subi	r24, 0xBA	; 186
    6f48:	9d 4f       	sbci	r25, 0xFD	; 253
    6f4a:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <_ZN9IPAddressC1Ev>
    6f4e:	8f ef       	ldi	r24, 0xFF	; 255
    6f50:	8c 87       	std	Y+12, r24	; 0x0c
    6f52:	19 82       	std	Y+1, r1	; 0x01
    6f54:	18 82       	st	Y, r1
    6f56:	1b 82       	std	Y+3, r1	; 0x03
    6f58:	1a 82       	std	Y+2, r1	; 0x02
    6f5a:	1d 82       	std	Y+5, r1	; 0x05
    6f5c:	1c 82       	std	Y+4, r1	; 0x04
    6f5e:	1f 82       	std	Y+7, r1	; 0x07
    6f60:	1e 82       	std	Y+6, r1	; 0x06
    6f62:	18 8a       	std	Y+16, r1	; 0x10
    6f64:	df 91       	pop	r29
    6f66:	cf 91       	pop	r28
    6f68:	08 95       	ret

00006f6a <_ZN6GSCore11transferSpiEh>:
    6f6a:	1f 93       	push	r17
    6f6c:	cf 93       	push	r28
    6f6e:	df 93       	push	r29
    6f70:	ec 01       	movw	r28, r24
    6f72:	16 2f       	mov	r17, r22
    6f74:	60 e0       	ldi	r22, 0x00	; 0
    6f76:	8c 85       	ldd	r24, Y+12	; 0x0c
    6f78:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <digitalWrite>
    6f7c:	1e bd       	out	0x2e, r17	; 46
    6f7e:	0d b4       	in	r0, 0x2d	; 45
    6f80:	07 fe       	sbrs	r0, 7
    6f82:	fd cf       	rjmp	.-6      	; 0x6f7e <_ZN6GSCore11transferSpiEh+0x14>
    6f84:	1e b5       	in	r17, 0x2e	; 46
    6f86:	61 e0       	ldi	r22, 0x01	; 1
    6f88:	8c 85       	ldd	r24, Y+12	; 0x0c
    6f8a:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <digitalWrite>
    6f8e:	81 2f       	mov	r24, r17
    6f90:	df 91       	pop	r29
    6f92:	cf 91       	pop	r28
    6f94:	1f 91       	pop	r17
    6f96:	08 95       	ret

00006f98 <_ZN6GSCore14parseIpAddressEP9IPAddressPKcj>:
    6f98:	ef 92       	push	r14
    6f9a:	ff 92       	push	r15
    6f9c:	0f 93       	push	r16
    6f9e:	1f 93       	push	r17
    6fa0:	cf 93       	push	r28
    6fa2:	df 93       	push	r29
    6fa4:	8c 01       	movw	r16, r24
    6fa6:	eb 01       	movw	r28, r22
    6fa8:	7a 01       	movw	r14, r20
    6faa:	40 e0       	ldi	r20, 0x00	; 0
    6fac:	50 e0       	ldi	r21, 0x00	; 0
    6fae:	ba 01       	movw	r22, r20
    6fb0:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <_ZN9IPAddressaSEm>
    6fb4:	e1 14       	cp	r14, r1
    6fb6:	f1 04       	cpc	r15, r1
    6fb8:	21 f0       	breq	.+8      	; 0x6fc2 <_ZN6GSCore14parseIpAddressEP9IPAddressPKcj+0x2a>
    6fba:	ae 01       	movw	r20, r28
    6fbc:	4e 0d       	add	r20, r14
    6fbe:	5f 1d       	adc	r21, r15
    6fc0:	02 c0       	rjmp	.+4      	; 0x6fc6 <_ZN6GSCore14parseIpAddressEP9IPAddressPKcj+0x2e>
    6fc2:	40 e0       	ldi	r20, 0x00	; 0
    6fc4:	50 e0       	ldi	r21, 0x00	; 0
    6fc6:	20 e0       	ldi	r18, 0x00	; 0
    6fc8:	30 e0       	ldi	r19, 0x00	; 0
    6fca:	88 81       	ld	r24, Y
    6fcc:	88 23       	and	r24, r24
    6fce:	81 f1       	breq	.+96     	; 0x7030 <_ZN6GSCore14parseIpAddressEP9IPAddressPKcj+0x98>
    6fd0:	41 15       	cp	r20, r1
    6fd2:	51 05       	cpc	r21, r1
    6fd4:	39 f5       	brne	.+78     	; 0x7024 <_ZN6GSCore14parseIpAddressEP9IPAddressPKcj+0x8c>
    6fd6:	8e 32       	cpi	r24, 0x2E	; 46
    6fd8:	51 f4       	brne	.+20     	; 0x6fee <_ZN6GSCore14parseIpAddressEP9IPAddressPKcj+0x56>
    6fda:	2f 5f       	subi	r18, 0xFF	; 255
    6fdc:	3f 4f       	sbci	r19, 0xFF	; 255
    6fde:	24 30       	cpi	r18, 0x04	; 4
    6fe0:	31 05       	cpc	r19, r1
    6fe2:	24 f5       	brge	.+72     	; 0x702c <_ZN6GSCore14parseIpAddressEP9IPAddressPKcj+0x94>
    6fe4:	f8 01       	movw	r30, r16
    6fe6:	e2 0f       	add	r30, r18
    6fe8:	f3 1f       	adc	r31, r19
    6fea:	12 82       	std	Z+2, r1	; 0x02
    6fec:	19 c0       	rjmp	.+50     	; 0x7020 <_ZN6GSCore14parseIpAddressEP9IPAddressPKcj+0x88>
    6fee:	90 ed       	ldi	r25, 0xD0	; 208
    6ff0:	98 0f       	add	r25, r24
    6ff2:	9a 30       	cpi	r25, 0x0A	; 10
    6ff4:	d8 f4       	brcc	.+54     	; 0x702c <_ZN6GSCore14parseIpAddressEP9IPAddressPKcj+0x94>
    6ff6:	f8 01       	movw	r30, r16
    6ff8:	e2 0f       	add	r30, r18
    6ffa:	f3 1f       	adc	r31, r19
    6ffc:	92 81       	ldd	r25, Z+2	; 0x02
    6ffe:	94 36       	cpi	r25, 0x64	; 100
    7000:	a8 f4       	brcc	.+42     	; 0x702c <_ZN6GSCore14parseIpAddressEP9IPAddressPKcj+0x94>
    7002:	99 31       	cpi	r25, 0x19	; 25
    7004:	11 f4       	brne	.+4      	; 0x700a <_ZN6GSCore14parseIpAddressEP9IPAddressPKcj+0x72>
    7006:	86 33       	cpi	r24, 0x36	; 54
    7008:	88 f4       	brcc	.+34     	; 0x702c <_ZN6GSCore14parseIpAddressEP9IPAddressPKcj+0x94>
    700a:	89 2f       	mov	r24, r25
    700c:	88 0f       	add	r24, r24
    700e:	98 2f       	mov	r25, r24
    7010:	99 0f       	add	r25, r25
    7012:	99 0f       	add	r25, r25
    7014:	98 0f       	add	r25, r24
    7016:	92 83       	std	Z+2, r25	; 0x02
    7018:	88 81       	ld	r24, Y
    701a:	80 53       	subi	r24, 0x30	; 48
    701c:	89 0f       	add	r24, r25
    701e:	82 83       	std	Z+2, r24	; 0x02
    7020:	21 96       	adiw	r28, 0x01	; 1
    7022:	d3 cf       	rjmp	.-90     	; 0x6fca <_ZN6GSCore14parseIpAddressEP9IPAddressPKcj+0x32>
    7024:	c4 17       	cp	r28, r20
    7026:	d5 07       	cpc	r29, r21
    7028:	b0 f2       	brcs	.-84     	; 0x6fd6 <_ZN6GSCore14parseIpAddressEP9IPAddressPKcj+0x3e>
    702a:	02 c0       	rjmp	.+4      	; 0x7030 <_ZN6GSCore14parseIpAddressEP9IPAddressPKcj+0x98>
    702c:	80 e0       	ldi	r24, 0x00	; 0
    702e:	01 c0       	rjmp	.+2      	; 0x7032 <_ZN6GSCore14parseIpAddressEP9IPAddressPKcj+0x9a>
    7030:	81 e0       	ldi	r24, 0x01	; 1
    7032:	df 91       	pop	r29
    7034:	cf 91       	pop	r28
    7036:	1f 91       	pop	r17
    7038:	0f 91       	pop	r16
    703a:	ff 90       	pop	r15
    703c:	ef 90       	pop	r14
    703e:	08 95       	ret

00007040 <_ZN6GSCore17processSpiSpecialEh>:
    7040:	fc 01       	movw	r30, r24
    7042:	87 85       	ldd	r24, Z+15	; 0x0f
    7044:	88 23       	and	r24, r24
    7046:	21 f0       	breq	.+8      	; 0x7050 <_ZN6GSCore17processSpiSpecialEh+0x10>
    7048:	17 86       	std	Z+15, r1	; 0x0f
    704a:	80 e2       	ldi	r24, 0x20	; 32
    704c:	86 27       	eor	r24, r22
    704e:	23 c0       	rjmp	.+70     	; 0x7096 <_ZN6GSCore17processSpiSpecialEh+0x56>
    7050:	6a 3f       	cpi	r22, 0xFA	; 250
    7052:	d9 f0       	breq	.+54     	; 0x708a <_ZN6GSCore17processSpiSpecialEh+0x4a>
    7054:	38 f4       	brcc	.+14     	; 0x7064 <_ZN6GSCore17processSpiSpecialEh+0x24>
    7056:	63 3f       	cpi	r22, 0xF3	; 243
    7058:	89 f0       	breq	.+34     	; 0x707c <_ZN6GSCore17processSpiSpecialEh+0x3c>
    705a:	65 3f       	cpi	r22, 0xF5	; 245
    705c:	f1 f0       	breq	.+60     	; 0x709a <_ZN6GSCore17processSpiSpecialEh+0x5a>
    705e:	61 11       	cpse	r22, r1
    7060:	19 c0       	rjmp	.+50     	; 0x7094 <_ZN6GSCore17processSpiSpecialEh+0x54>
    7062:	1b c0       	rjmp	.+54     	; 0x709a <_ZN6GSCore17processSpiSpecialEh+0x5a>
    7064:	6d 3f       	cpi	r22, 0xFD	; 253
    7066:	a1 f0       	breq	.+40     	; 0x7090 <_ZN6GSCore17processSpiSpecialEh+0x50>
    7068:	6f 3f       	cpi	r22, 0xFF	; 255
    706a:	29 f0       	breq	.+10     	; 0x7076 <_ZN6GSCore17processSpiSpecialEh+0x36>
    706c:	6b 3f       	cpi	r22, 0xFB	; 251
    706e:	91 f4       	brne	.+36     	; 0x7094 <_ZN6GSCore17processSpiSpecialEh+0x54>
    7070:	81 e0       	ldi	r24, 0x01	; 1
    7072:	87 87       	std	Z+15, r24	; 0x0f
    7074:	12 c0       	rjmp	.+36     	; 0x709a <_ZN6GSCore17processSpiSpecialEh+0x5a>
    7076:	6d ea       	ldi	r22, 0xAD	; 173
    7078:	7c e0       	ldi	r23, 0x0C	; 12
    707a:	02 c0       	rjmp	.+4      	; 0x7080 <_ZN6GSCore17processSpiSpecialEh+0x40>
    707c:	67 eb       	ldi	r22, 0xB7	; 183
    707e:	7c e0       	ldi	r23, 0x0C	; 12
    7080:	84 e0       	ldi	r24, 0x04	; 4
    7082:	94 e2       	ldi	r25, 0x24	; 36
    7084:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <_ZN5Print7printlnEPKc>
    7088:	08 c0       	rjmp	.+16     	; 0x709a <_ZN6GSCore17processSpiSpecialEh+0x5a>
    708a:	81 e0       	ldi	r24, 0x01	; 1
    708c:	86 87       	std	Z+14, r24	; 0x0e
    708e:	05 c0       	rjmp	.+10     	; 0x709a <_ZN6GSCore17processSpiSpecialEh+0x5a>
    7090:	16 86       	std	Z+14, r1	; 0x0e
    7092:	03 c0       	rjmp	.+6      	; 0x709a <_ZN6GSCore17processSpiSpecialEh+0x5a>
    7094:	86 2f       	mov	r24, r22
    7096:	90 e0       	ldi	r25, 0x00	; 0
    7098:	08 95       	ret
    709a:	8f ef       	ldi	r24, 0xFF	; 255
    709c:	9f ef       	ldi	r25, 0xFF	; 255
    709e:	08 95       	ret

000070a0 <_ZN6GSCore7readRawEv>:
    70a0:	0f 93       	push	r16
    70a2:	1f 93       	push	r17
    70a4:	cf 93       	push	r28
    70a6:	df 93       	push	r29
    70a8:	ec 01       	movw	r28, r24
    70aa:	8a 85       	ldd	r24, Y+10	; 0x0a
    70ac:	9b 85       	ldd	r25, Y+11	; 0x0b
    70ae:	00 97       	sbiw	r24, 0x00	; 0
    70b0:	59 f0       	breq	.+22     	; 0x70c8 <_ZN6GSCore7readRawEv+0x28>
    70b2:	dc 01       	movw	r26, r24
    70b4:	ed 91       	ld	r30, X+
    70b6:	fc 91       	ld	r31, X
    70b8:	06 80       	ldd	r0, Z+6	; 0x06
    70ba:	f7 81       	ldd	r31, Z+7	; 0x07
    70bc:	e0 2d       	mov	r30, r0
    70be:	df 91       	pop	r29
    70c0:	cf 91       	pop	r28
    70c2:	1f 91       	pop	r17
    70c4:	0f 91       	pop	r16
    70c6:	19 94       	eijmp
    70c8:	8c 85       	ldd	r24, Y+12	; 0x0c
    70ca:	8f 3f       	cpi	r24, 0xFF	; 255
    70cc:	41 f0       	breq	.+16     	; 0x70de <_ZN6GSCore7readRawEv+0x3e>
    70ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    70d0:	8f 3f       	cpi	r24, 0xFF	; 255
    70d2:	71 f0       	breq	.+28     	; 0x70f0 <_ZN6GSCore7readRawEv+0x50>
    70d4:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <digitalRead>
    70d8:	89 2b       	or	r24, r25
    70da:	51 f4       	brne	.+20     	; 0x70f0 <_ZN6GSCore7readRawEv+0x50>
    70dc:	06 c0       	rjmp	.+12     	; 0x70ea <_ZN6GSCore7readRawEv+0x4a>
    70de:	69 ec       	ldi	r22, 0xC9	; 201
    70e0:	7c e0       	ldi	r23, 0x0C	; 12
    70e2:	84 e0       	ldi	r24, 0x04	; 4
    70e4:	94 e2       	ldi	r25, 0x24	; 36
    70e6:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <_ZN5Print7printlnEPKc>
    70ea:	8f ef       	ldi	r24, 0xFF	; 255
    70ec:	9f ef       	ldi	r25, 0xFF	; 255
    70ee:	2f c0       	rjmp	.+94     	; 0x714e <_ZN6GSCore7readRawEv+0xae>
    70f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    70f2:	8f 3f       	cpi	r24, 0xFF	; 255
    70f4:	d1 f4       	brne	.+52     	; 0x712a <_ZN6GSCore7readRawEv+0x8a>
    70f6:	0e 94 22 14 	call	0x2844	; 0x2844 <micros>
    70fa:	29 89       	ldd	r18, Y+17	; 0x11
    70fc:	3a 89       	ldd	r19, Y+18	; 0x12
    70fe:	ab 01       	movw	r20, r22
    7100:	42 1b       	sub	r20, r18
    7102:	53 0b       	sbc	r21, r19
    7104:	40 31       	cpi	r20, 0x10	; 16
    7106:	b7 e2       	ldi	r27, 0x27	; 39
    7108:	5b 07       	cpc	r21, r27
    710a:	68 f4       	brcc	.+26     	; 0x7126 <_ZN6GSCore7readRawEv+0x86>
    710c:	4c 39       	cpi	r20, 0x9C	; 156
    710e:	51 05       	cpc	r21, r1
    7110:	18 f4       	brcc	.+6      	; 0x7118 <_ZN6GSCore7readRawEv+0x78>
    7112:	7a 8b       	std	Y+18, r23	; 0x12
    7114:	69 8b       	std	Y+17, r22	; 0x11
    7116:	04 c0       	rjmp	.+8      	; 0x7120 <_ZN6GSCore7readRawEv+0x80>
    7118:	24 56       	subi	r18, 0x64	; 100
    711a:	3f 4f       	sbci	r19, 0xFF	; 255
    711c:	3a 8b       	std	Y+18, r19	; 0x12
    711e:	29 8b       	std	Y+17, r18	; 0x11
    7120:	01 e0       	ldi	r16, 0x01	; 1
    7122:	10 e0       	ldi	r17, 0x00	; 0
    7124:	04 c0       	rjmp	.+8      	; 0x712e <_ZN6GSCore7readRawEv+0x8e>
    7126:	7a 8b       	std	Y+18, r23	; 0x12
    7128:	69 8b       	std	Y+17, r22	; 0x11
    712a:	00 e4       	ldi	r16, 0x40	; 64
    712c:	10 e0       	ldi	r17, 0x00	; 0
    712e:	65 ef       	ldi	r22, 0xF5	; 245
    7130:	ce 01       	movw	r24, r28
    7132:	1b df       	rcall	.-458    	; 0x6f6a <_ZN6GSCore11transferSpiEh>
    7134:	68 2f       	mov	r22, r24
    7136:	ce 01       	movw	r24, r28
    7138:	83 df       	rcall	.-250    	; 0x7040 <_ZN6GSCore17processSpiSpecialEh>
    713a:	8f 3f       	cpi	r24, 0xFF	; 255
    713c:	ef ef       	ldi	r30, 0xFF	; 255
    713e:	9e 07       	cpc	r25, r30
    7140:	31 f4       	brne	.+12     	; 0x714e <_ZN6GSCore7readRawEv+0xae>
    7142:	01 50       	subi	r16, 0x01	; 1
    7144:	11 09       	sbc	r17, r1
    7146:	10 16       	cp	r1, r16
    7148:	11 06       	cpc	r1, r17
    714a:	8c f3       	brlt	.-30     	; 0x712e <_ZN6GSCore7readRawEv+0x8e>
    714c:	ce cf       	rjmp	.-100    	; 0x70ea <_ZN6GSCore7readRawEv+0x4a>
    714e:	df 91       	pop	r29
    7150:	cf 91       	pop	r28
    7152:	1f 91       	pop	r17
    7154:	0f 91       	pop	r16
    7156:	08 95       	ret

00007158 <_ZN6GSCore12isSpiSpecialEh>:
    7158:	6c 3f       	cpi	r22, 0xFC	; 252
    715a:	48 f4       	brcc	.+18     	; 0x716e <_ZN6GSCore12isSpiSpecialEh+0x16>
    715c:	6a 3f       	cpi	r22, 0xFA	; 250
    715e:	58 f4       	brcc	.+22     	; 0x7176 <_ZN6GSCore12isSpiSpecialEh+0x1e>
    7160:	63 3f       	cpi	r22, 0xF3	; 243
    7162:	49 f0       	breq	.+18     	; 0x7176 <_ZN6GSCore12isSpiSpecialEh+0x1e>
    7164:	65 3f       	cpi	r22, 0xF5	; 245
    7166:	39 f0       	breq	.+14     	; 0x7176 <_ZN6GSCore12isSpiSpecialEh+0x1e>
    7168:	61 11       	cpse	r22, r1
    716a:	07 c0       	rjmp	.+14     	; 0x717a <_ZN6GSCore12isSpiSpecialEh+0x22>
    716c:	04 c0       	rjmp	.+8      	; 0x7176 <_ZN6GSCore12isSpiSpecialEh+0x1e>
    716e:	6d 3f       	cpi	r22, 0xFD	; 253
    7170:	11 f0       	breq	.+4      	; 0x7176 <_ZN6GSCore12isSpiSpecialEh+0x1e>
    7172:	6f 3f       	cpi	r22, 0xFF	; 255
    7174:	11 f4       	brne	.+4      	; 0x717a <_ZN6GSCore12isSpiSpecialEh+0x22>
    7176:	81 e0       	ldi	r24, 0x01	; 1
    7178:	08 95       	ret
    717a:	80 e0       	ldi	r24, 0x00	; 0
    717c:	08 95       	ret

0000717e <_ZN6GSCore15loadFrameHeaderEPNS_7RXFrameE>:
    717e:	cf 93       	push	r28
    7180:	df 93       	push	r29
    7182:	ec 01       	movw	r28, r24
    7184:	cc 5c       	subi	r28, 0xCC	; 204
    7186:	dd 4f       	sbci	r29, 0xFD	; 253
    7188:	20 e0       	ldi	r18, 0x00	; 0
    718a:	32 e0       	ldi	r19, 0x02	; 2
    718c:	48 81       	ld	r20, Y
    718e:	59 81       	ldd	r21, Y+1	; 0x01
    7190:	24 1b       	sub	r18, r20
    7192:	35 0b       	sbc	r19, r21
    7194:	2c 30       	cpi	r18, 0x0C	; 12
    7196:	31 05       	cpc	r19, r1
    7198:	10 f4       	brcc	.+4      	; 0x719e <_ZN6GSCore15loadFrameHeaderEPNS_7RXFrameE+0x20>
    719a:	19 82       	std	Y+1, r1	; 0x01
    719c:	18 82       	st	Y, r1
    719e:	e8 81       	ld	r30, Y
    71a0:	f9 81       	ldd	r31, Y+1	; 0x01
    71a2:	f1 96       	adiw	r30, 0x31	; 49
    71a4:	e8 0f       	add	r30, r24
    71a6:	f9 1f       	adc	r31, r25
    71a8:	8c e0       	ldi	r24, 0x0C	; 12
    71aa:	db 01       	movw	r26, r22
    71ac:	01 90       	ld	r0, Z+
    71ae:	0d 92       	st	X+, r0
    71b0:	8a 95       	dec	r24
    71b2:	e1 f7       	brne	.-8      	; 0x71ac <_ZN6GSCore15loadFrameHeaderEPNS_7RXFrameE+0x2e>
    71b4:	88 81       	ld	r24, Y
    71b6:	99 81       	ldd	r25, Y+1	; 0x01
    71b8:	0c 96       	adiw	r24, 0x0c	; 12
    71ba:	99 83       	std	Y+1, r25	; 0x01
    71bc:	88 83       	st	Y, r24
    71be:	df 91       	pop	r29
    71c0:	cf 91       	pop	r28
    71c2:	08 95       	ret

000071c4 <_ZN6GSCore7getDataEv>:
    71c4:	cf 93       	push	r28
    71c6:	df 93       	push	r29
    71c8:	ec 01       	movw	r28, r24
    71ca:	fc 01       	movw	r30, r24
    71cc:	ec 5c       	subi	r30, 0xCC	; 204
    71ce:	fd 4f       	sbci	r31, 0xFD	; 253
    71d0:	20 81       	ld	r18, Z
    71d2:	31 81       	ldd	r19, Z+1	; 0x01
    71d4:	dc 01       	movw	r26, r24
    71d6:	ae 5c       	subi	r26, 0xCE	; 206
    71d8:	bd 4f       	sbci	r27, 0xFD	; 253
    71da:	8d 91       	ld	r24, X+
    71dc:	9c 91       	ld	r25, X
    71de:	28 17       	cp	r18, r24
    71e0:	39 07       	cpc	r19, r25
    71e2:	a1 f0       	breq	.+40     	; 0x720c <_ZN6GSCore7getDataEv+0x48>
    71e4:	de 01       	movw	r26, r28
    71e6:	a2 0f       	add	r26, r18
    71e8:	b3 1f       	adc	r27, r19
    71ea:	d1 96       	adiw	r26, 0x31	; 49
    71ec:	8c 91       	ld	r24, X
    71ee:	2f 5f       	subi	r18, 0xFF	; 255
    71f0:	3f 4f       	sbci	r19, 0xFF	; 255
    71f2:	31 70       	andi	r19, 0x01	; 1
    71f4:	31 83       	std	Z+1, r19	; 0x01
    71f6:	20 83       	st	Z, r18
    71f8:	cc 5b       	subi	r28, 0xBC	; 188
    71fa:	dd 4f       	sbci	r29, 0xFD	; 253
    71fc:	28 81       	ld	r18, Y
    71fe:	39 81       	ldd	r19, Y+1	; 0x01
    7200:	21 50       	subi	r18, 0x01	; 1
    7202:	31 09       	sbc	r19, r1
    7204:	39 83       	std	Y+1, r19	; 0x01
    7206:	28 83       	st	Y, r18
    7208:	90 e0       	ldi	r25, 0x00	; 0
    720a:	19 c0       	rjmp	.+50     	; 0x723e <_ZN6GSCore7getDataEv+0x7a>
    720c:	ce 01       	movw	r24, r28
    720e:	48 df       	rcall	.-368    	; 0x70a0 <_ZN6GSCore7readRawEv>
    7210:	97 fd       	sbrc	r25, 7
    7212:	15 c0       	rjmp	.+42     	; 0x723e <_ZN6GSCore7getDataEv+0x7a>
    7214:	fe 01       	movw	r30, r28
    7216:	ec 5b       	subi	r30, 0xBC	; 188
    7218:	fd 4f       	sbci	r31, 0xFD	; 253
    721a:	20 81       	ld	r18, Z
    721c:	31 81       	ldd	r19, Z+1	; 0x01
    721e:	21 50       	subi	r18, 0x01	; 1
    7220:	31 09       	sbc	r19, r1
    7222:	31 83       	std	Z+1, r19	; 0x01
    7224:	20 83       	st	Z, r18
    7226:	3c 97       	sbiw	r30, 0x0c	; 12
    7228:	20 81       	ld	r18, Z
    722a:	31 81       	ldd	r19, Z+1	; 0x01
    722c:	21 50       	subi	r18, 0x01	; 1
    722e:	31 09       	sbc	r19, r1
    7230:	31 83       	std	Z+1, r19	; 0x01
    7232:	20 83       	st	Z, r18
    7234:	23 2b       	or	r18, r19
    7236:	19 f4       	brne	.+6      	; 0x723e <_ZN6GSCore7getDataEv+0x7a>
    7238:	cf 5c       	subi	r28, 0xCF	; 207
    723a:	dd 4f       	sbci	r29, 0xFD	; 253
    723c:	18 82       	st	Y, r1
    723e:	df 91       	pop	r29
    7240:	cf 91       	pop	r28
    7242:	08 95       	ret

00007244 <_ZN6GSCore17processDisconnectEh>:
    7244:	fc 01       	movw	r30, r24
    7246:	29 e0       	ldi	r18, 0x09	; 9
    7248:	62 9f       	mul	r22, r18
    724a:	e0 0d       	add	r30, r0
    724c:	f1 1d       	adc	r31, r1
    724e:	11 24       	eor	r1, r1
    7250:	e2 5b       	subi	r30, 0xB2	; 178
    7252:	fd 4f       	sbci	r31, 0xFD	; 253
    7254:	20 81       	ld	r18, Z
    7256:	20 ff       	sbrs	r18, 0
    7258:	13 c0       	rjmp	.+38     	; 0x7280 <_ZN6GSCore17processDisconnectEh+0x3c>
    725a:	2e 7f       	andi	r18, 0xFE	; 254
    725c:	2d 7f       	andi	r18, 0xFD	; 253
    725e:	20 83       	st	Z, r18
    7260:	fc 01       	movw	r30, r24
    7262:	e2 52       	subi	r30, 0x22	; 34
    7264:	fd 4f       	sbci	r31, 0xFD	; 253
    7266:	20 81       	ld	r18, Z
    7268:	62 13       	cpse	r22, r18
    726a:	0a c0       	rjmp	.+20     	; 0x7280 <_ZN6GSCore17processDisconnectEh+0x3c>
    726c:	2f ef       	ldi	r18, 0xFF	; 255
    726e:	20 83       	st	Z, r18
    7270:	32 96       	adiw	r30, 0x02	; 2
    7272:	80 81       	ld	r24, Z
    7274:	80 ff       	sbrs	r24, 0
    7276:	02 c0       	rjmp	.+4      	; 0x727c <_ZN6GSCore17processDisconnectEh+0x38>
    7278:	8e 7f       	andi	r24, 0xFE	; 254
    727a:	01 c0       	rjmp	.+2      	; 0x727e <_ZN6GSCore17processDisconnectEh+0x3a>
    727c:	82 60       	ori	r24, 0x02	; 2
    727e:	80 83       	st	Z, r24
    7280:	08 95       	ret

00007282 <_ZN6GSCore21processDisassociationEv>:
    7282:	ff 92       	push	r15
    7284:	0f 93       	push	r16
    7286:	1f 93       	push	r17
    7288:	cf 93       	push	r28
    728a:	df 93       	push	r29
    728c:	8c 01       	movw	r16, r24
    728e:	dc 01       	movw	r26, r24
    7290:	a1 52       	subi	r26, 0x21	; 33
    7292:	bd 4f       	sbci	r27, 0xFD	; 253
    7294:	8c 91       	ld	r24, X
    7296:	88 23       	and	r24, r24
    7298:	29 f1       	breq	.+74     	; 0x72e4 <_ZN6GSCore21processDisassociationEv+0x62>
    729a:	f8 01       	movw	r30, r16
    729c:	e0 52       	subi	r30, 0x20	; 32
    729e:	fd 4f       	sbci	r31, 0xFD	; 253
    72a0:	80 81       	ld	r24, Z
    72a2:	82 ff       	sbrs	r24, 2
    72a4:	02 c0       	rjmp	.+4      	; 0x72aa <_ZN6GSCore21processDisassociationEv+0x28>
    72a6:	8b 7f       	andi	r24, 0xFB	; 251
    72a8:	01 c0       	rjmp	.+2      	; 0x72ac <_ZN6GSCore21processDisassociationEv+0x2a>
    72aa:	88 60       	ori	r24, 0x08	; 8
    72ac:	80 83       	st	Z, r24
    72ae:	1c 92       	st	X, r1
    72b0:	c0 e0       	ldi	r28, 0x00	; 0
    72b2:	d0 e0       	ldi	r29, 0x00	; 0
    72b4:	89 e0       	ldi	r24, 0x09	; 9
    72b6:	f8 2e       	mov	r15, r24
    72b8:	fc 9e       	mul	r15, r28
    72ba:	c0 01       	movw	r24, r0
    72bc:	fd 9e       	mul	r15, r29
    72be:	90 0d       	add	r25, r0
    72c0:	11 24       	eor	r1, r1
    72c2:	80 0f       	add	r24, r16
    72c4:	91 1f       	adc	r25, r17
    72c6:	fc 01       	movw	r30, r24
    72c8:	e2 5b       	subi	r30, 0xB2	; 178
    72ca:	fd 4f       	sbci	r31, 0xFD	; 253
    72cc:	80 81       	ld	r24, Z
    72ce:	80 ff       	sbrs	r24, 0
    72d0:	05 c0       	rjmp	.+10     	; 0x72dc <_ZN6GSCore21processDisassociationEv+0x5a>
    72d2:	84 60       	ori	r24, 0x04	; 4
    72d4:	80 83       	st	Z, r24
    72d6:	6c 2f       	mov	r22, r28
    72d8:	c8 01       	movw	r24, r16
    72da:	b4 df       	rcall	.-152    	; 0x7244 <_ZN6GSCore17processDisconnectEh>
    72dc:	21 96       	adiw	r28, 0x01	; 1
    72de:	c0 31       	cpi	r28, 0x10	; 16
    72e0:	d1 05       	cpc	r29, r1
    72e2:	51 f7       	brne	.-44     	; 0x72b8 <_ZN6GSCore21processDisassociationEv+0x36>
    72e4:	df 91       	pop	r29
    72e6:	cf 91       	pop	r28
    72e8:	1f 91       	pop	r17
    72ea:	0f 91       	pop	r16
    72ec:	ff 90       	pop	r15
    72ee:	08 95       	ret

000072f0 <_ZN6GSCore18processAssociationEv>:
    72f0:	0f 93       	push	r16
    72f2:	1f 93       	push	r17
    72f4:	cf 93       	push	r28
    72f6:	df 93       	push	r29
    72f8:	ec 01       	movw	r28, r24
    72fa:	8c 01       	movw	r16, r24
    72fc:	01 52       	subi	r16, 0x21	; 33
    72fe:	1d 4f       	sbci	r17, 0xFD	; 253
    7300:	f8 01       	movw	r30, r16
    7302:	80 81       	ld	r24, Z
    7304:	88 23       	and	r24, r24
    7306:	11 f0       	breq	.+4      	; 0x730c <_ZN6GSCore18processAssociationEv+0x1c>
    7308:	ce 01       	movw	r24, r28
    730a:	bb df       	rcall	.-138    	; 0x7282 <_ZN6GSCore21processDisassociationEv>
    730c:	81 e0       	ldi	r24, 0x01	; 1
    730e:	f8 01       	movw	r30, r16
    7310:	80 83       	st	Z, r24
    7312:	c0 52       	subi	r28, 0x20	; 32
    7314:	dd 4f       	sbci	r29, 0xFD	; 253
    7316:	88 81       	ld	r24, Y
    7318:	84 60       	ori	r24, 0x04	; 4
    731a:	88 83       	st	Y, r24
    731c:	df 91       	pop	r29
    731e:	cf 91       	pop	r28
    7320:	1f 91       	pop	r17
    7322:	0f 91       	pop	r16
    7324:	08 95       	ret

00007326 <_ZN6GSCore14processConnectEhmjjb>:
    7326:	8f 92       	push	r8
    7328:	9f 92       	push	r9
    732a:	af 92       	push	r10
    732c:	bf 92       	push	r11
    732e:	cf 92       	push	r12
    7330:	df 92       	push	r13
    7332:	ef 92       	push	r14
    7334:	ff 92       	push	r15
    7336:	0f 93       	push	r16
    7338:	1f 93       	push	r17
    733a:	cf 93       	push	r28
    733c:	df 93       	push	r29
    733e:	00 d0       	rcall	.+0      	; 0x7340 <_ZN6GSCore14processConnectEhmjjb+0x1a>
    7340:	1f 92       	push	r1
    7342:	cd b7       	in	r28, 0x3d	; 61
    7344:	de b7       	in	r29, 0x3e	; 62
    7346:	4c 01       	movw	r8, r24
    7348:	d6 2e       	mov	r13, r22
    734a:	a6 2e       	mov	r10, r22
    734c:	b1 2c       	mov	r11, r1
    734e:	fc 01       	movw	r30, r24
    7350:	89 e0       	ldi	r24, 0x09	; 9
    7352:	68 9f       	mul	r22, r24
    7354:	e0 0d       	add	r30, r0
    7356:	f1 1d       	adc	r31, r1
    7358:	11 24       	eor	r1, r1
    735a:	e2 5b       	subi	r30, 0xB2	; 178
    735c:	fd 4f       	sbci	r31, 0xFD	; 253
    735e:	80 81       	ld	r24, Z
    7360:	80 ff       	sbrs	r24, 0
    7362:	0a c0       	rjmp	.+20     	; 0x7378 <_ZN6GSCore14processConnectEhmjjb+0x52>
    7364:	c4 01       	movw	r24, r8
    7366:	29 83       	std	Y+1, r18	; 0x01
    7368:	3a 83       	std	Y+2, r19	; 0x02
    736a:	4b 83       	std	Y+3, r20	; 0x03
    736c:	5c 83       	std	Y+4, r21	; 0x04
    736e:	6a df       	rcall	.-300    	; 0x7244 <_ZN6GSCore17processDisconnectEh>
    7370:	5c 81       	ldd	r21, Y+4	; 0x04
    7372:	4b 81       	ldd	r20, Y+3	; 0x03
    7374:	3a 81       	ldd	r19, Y+2	; 0x02
    7376:	29 81       	ldd	r18, Y+1	; 0x01
    7378:	cc 20       	and	r12, r12
    737a:	41 f0       	breq	.+16     	; 0x738c <_ZN6GSCore14processConnectEhmjjb+0x66>
    737c:	f4 01       	movw	r30, r8
    737e:	e2 52       	subi	r30, 0x22	; 34
    7380:	fd 4f       	sbci	r31, 0xFD	; 253
    7382:	d0 82       	st	Z, r13
    7384:	32 96       	adiw	r30, 0x02	; 2
    7386:	80 81       	ld	r24, Z
    7388:	81 60       	ori	r24, 0x01	; 1
    738a:	80 83       	st	Z, r24
    738c:	69 e0       	ldi	r22, 0x09	; 9
    738e:	6a 9d       	mul	r22, r10
    7390:	c0 01       	movw	r24, r0
    7392:	6b 9d       	mul	r22, r11
    7394:	90 0d       	add	r25, r0
    7396:	11 24       	eor	r1, r1
    7398:	88 0d       	add	r24, r8
    739a:	99 1d       	adc	r25, r9
    739c:	fc 01       	movw	r30, r24
    739e:	e1 5b       	subi	r30, 0xB1	; 177
    73a0:	fd 4f       	sbci	r31, 0xFD	; 253
    73a2:	20 83       	st	Z, r18
    73a4:	31 83       	std	Z+1, r19	; 0x01
    73a6:	42 83       	std	Z+2, r20	; 0x02
    73a8:	53 83       	std	Z+3, r21	; 0x03
    73aa:	36 96       	adiw	r30, 0x06	; 6
    73ac:	11 83       	std	Z+1, r17	; 0x01
    73ae:	00 83       	st	Z, r16
    73b0:	32 97       	sbiw	r30, 0x02	; 2
    73b2:	f1 82       	std	Z+1, r15	; 0x01
    73b4:	e0 82       	st	Z, r14
    73b6:	35 97       	sbiw	r30, 0x05	; 5
    73b8:	80 81       	ld	r24, Z
    73ba:	8b 7f       	andi	r24, 0xFB	; 251
    73bc:	81 60       	ori	r24, 0x01	; 1
    73be:	80 83       	st	Z, r24
    73c0:	0f 90       	pop	r0
    73c2:	0f 90       	pop	r0
    73c4:	0f 90       	pop	r0
    73c6:	0f 90       	pop	r0
    73c8:	df 91       	pop	r29
    73ca:	cf 91       	pop	r28
    73cc:	1f 91       	pop	r17
    73ce:	0f 91       	pop	r16
    73d0:	ff 90       	pop	r15
    73d2:	ef 90       	pop	r14
    73d4:	df 90       	pop	r13
    73d6:	cf 90       	pop	r12
    73d8:	bf 90       	pop	r11
    73da:	af 90       	pop	r10
    73dc:	9f 90       	pop	r9
    73de:	8f 90       	pop	r8
    73e0:	08 95       	ret

000073e2 <_ZN6GSCore11parseNumberEPjPKhhh>:
    73e2:	3e ef       	ldi	r19, 0xFE	; 254
    73e4:	32 0f       	add	r19, r18
    73e6:	33 32       	cpi	r19, 0x23	; 35
    73e8:	08 f4       	brcc	.+2      	; 0x73ec <_ZN6GSCore11parseNumberEPjPKhhh+0xa>
    73ea:	6c cd       	rjmp	.-1320   	; 0x6ec4 <_ZN6GSCore11parseNumberEPjPKhhh.part.6>
    73ec:	80 e0       	ldi	r24, 0x00	; 0
    73ee:	08 95       	ret

000073f0 <_ZN6GSCore11parseNumberEPhPKhhh>:
    73f0:	0f 93       	push	r16
    73f2:	1f 93       	push	r17
    73f4:	cf 93       	push	r28
    73f6:	df 93       	push	r29
    73f8:	1f 92       	push	r1
    73fa:	1f 92       	push	r1
    73fc:	cd b7       	in	r28, 0x3d	; 61
    73fe:	de b7       	in	r29, 0x3e	; 62
    7400:	8c 01       	movw	r16, r24
    7402:	ce 01       	movw	r24, r28
    7404:	01 96       	adiw	r24, 0x01	; 1
    7406:	ed df       	rcall	.-38     	; 0x73e2 <_ZN6GSCore11parseNumberEPjPKhhh>
    7408:	88 23       	and	r24, r24
    740a:	51 f0       	breq	.+20     	; 0x7420 <_ZN6GSCore11parseNumberEPhPKhhh+0x30>
    740c:	29 81       	ldd	r18, Y+1	; 0x01
    740e:	3a 81       	ldd	r19, Y+2	; 0x02
    7410:	2f 3f       	cpi	r18, 0xFF	; 255
    7412:	31 05       	cpc	r19, r1
    7414:	09 f0       	breq	.+2      	; 0x7418 <_ZN6GSCore11parseNumberEPhPKhhh+0x28>
    7416:	18 f4       	brcc	.+6      	; 0x741e <_ZN6GSCore11parseNumberEPhPKhhh+0x2e>
    7418:	f8 01       	movw	r30, r16
    741a:	20 83       	st	Z, r18
    741c:	01 c0       	rjmp	.+2      	; 0x7420 <_ZN6GSCore11parseNumberEPhPKhhh+0x30>
    741e:	80 e0       	ldi	r24, 0x00	; 0
    7420:	0f 90       	pop	r0
    7422:	0f 90       	pop	r0
    7424:	df 91       	pop	r29
    7426:	cf 91       	pop	r28
    7428:	1f 91       	pop	r17
    742a:	0f 91       	pop	r16
    742c:	08 95       	ret

0000742e <_ZN6GSCore19processResponseLineEPKhhPh>:
    742e:	ef 92       	push	r14
    7430:	ff 92       	push	r15
    7432:	0f 93       	push	r16
    7434:	1f 93       	push	r17
    7436:	cf 93       	push	r28
    7438:	df 93       	push	r29
    743a:	eb 01       	movw	r28, r22
    743c:	c9 01       	movw	r24, r18
    743e:	42 30       	cpi	r20, 0x02	; 2
    7440:	60 f0       	brcs	.+24     	; 0x745a <_ZN6GSCore19processResponseLineEPKhhPh+0x2c>
    7442:	28 81       	ld	r18, Y
    7444:	21 33       	cpi	r18, 0x31	; 49
    7446:	61 f4       	brne	.+24     	; 0x7460 <_ZN6GSCore19processResponseLineEPKhhPh+0x32>
    7448:	59 81       	ldd	r21, Y+1	; 0x01
    744a:	20 ed       	ldi	r18, 0xD0	; 208
    744c:	25 0f       	add	r18, r21
    744e:	29 30       	cpi	r18, 0x09	; 9
    7450:	38 f4       	brcc	.+14     	; 0x7460 <_ZN6GSCore19processResponseLineEPKhhPh+0x32>
    7452:	6e 5f       	subi	r22, 0xFE	; 254
    7454:	7f 4f       	sbci	r23, 0xFF	; 255
    7456:	56 52       	subi	r21, 0x26	; 38
    7458:	1a c0       	rjmp	.+52     	; 0x748e <_ZN6GSCore19processResponseLineEPKhhPh+0x60>
    745a:	44 23       	and	r20, r20
    745c:	09 f4       	brne	.+2      	; 0x7460 <_ZN6GSCore19processResponseLineEPKhhPh+0x32>
    745e:	5a c0       	rjmp	.+180    	; 0x7514 <_ZN6GSCore19processResponseLineEPKhhPh+0xe6>
    7460:	28 81       	ld	r18, Y
    7462:	50 ed       	ldi	r21, 0xD0	; 208
    7464:	52 0f       	add	r21, r18
    7466:	5a 30       	cpi	r21, 0x0A	; 10
    7468:	20 f4       	brcc	.+8      	; 0x7472 <_ZN6GSCore19processResponseLineEPKhhPh+0x44>
    746a:	be 01       	movw	r22, r28
    746c:	6f 5f       	subi	r22, 0xFF	; 255
    746e:	7f 4f       	sbci	r23, 0xFF	; 255
    7470:	0e c0       	rjmp	.+28     	; 0x748e <_ZN6GSCore19processResponseLineEPKhhPh+0x60>
    7472:	42 30       	cpi	r20, 0x02	; 2
    7474:	09 f0       	breq	.+2      	; 0x7478 <_ZN6GSCore19processResponseLineEPKhhPh+0x4a>
    7476:	4e c0       	rjmp	.+156    	; 0x7514 <_ZN6GSCore19processResponseLineEPKhhPh+0xe6>
    7478:	2f 34       	cpi	r18, 0x4F	; 79
    747a:	09 f0       	breq	.+2      	; 0x747e <_ZN6GSCore19processResponseLineEPKhhPh+0x50>
    747c:	4b c0       	rjmp	.+150    	; 0x7514 <_ZN6GSCore19processResponseLineEPKhhPh+0xe6>
    747e:	29 81       	ldd	r18, Y+1	; 0x01
    7480:	2b 34       	cpi	r18, 0x4B	; 75
    7482:	09 f0       	breq	.+2      	; 0x7486 <_ZN6GSCore19processResponseLineEPKhhPh+0x58>
    7484:	47 c0       	rjmp	.+142    	; 0x7514 <_ZN6GSCore19processResponseLineEPKhhPh+0xe6>
    7486:	be 01       	movw	r22, r28
    7488:	6e 5f       	subi	r22, 0xFE	; 254
    748a:	7f 4f       	sbci	r23, 0xFF	; 255
    748c:	50 e0       	ldi	r21, 0x00	; 0
    748e:	e4 2e       	mov	r14, r20
    7490:	f1 2c       	mov	r15, r1
    7492:	9e 01       	movw	r18, r28
    7494:	2e 0d       	add	r18, r14
    7496:	3f 1d       	adc	r19, r15
    7498:	42 2f       	mov	r20, r18
    749a:	46 1b       	sub	r20, r22
    749c:	21 f0       	breq	.+8      	; 0x74a6 <_ZN6GSCore19processResponseLineEPKhhPh+0x78>
    749e:	fb 01       	movw	r30, r22
    74a0:	20 81       	ld	r18, Z
    74a2:	20 32       	cpi	r18, 0x20	; 32
    74a4:	b9 f5       	brne	.+110    	; 0x7514 <_ZN6GSCore19processResponseLineEPKhhPh+0xe6>
    74a6:	05 2f       	mov	r16, r21
    74a8:	10 e0       	ldi	r17, 0x00	; 0
    74aa:	03 50       	subi	r16, 0x03	; 3
    74ac:	11 09       	sbc	r17, r1
    74ae:	00 31       	cpi	r16, 0x10	; 16
    74b0:	11 05       	cpc	r17, r1
    74b2:	28 f4       	brcc	.+10     	; 0x74be <_ZN6GSCore19processResponseLineEPKhhPh+0x90>
    74b4:	0b 57       	subi	r16, 0x7B	; 123
    74b6:	1e 4f       	sbci	r17, 0xFE	; 254
    74b8:	f8 01       	movw	r30, r16
    74ba:	0c 94 86 b2 	jmp	0x1650c	; 0x1650c <__tablejump2__>
    74be:	41 11       	cpse	r20, r1
    74c0:	29 c0       	rjmp	.+82     	; 0x7514 <_ZN6GSCore19processResponseLineEPKhhPh+0xe6>
    74c2:	85 2f       	mov	r24, r21
    74c4:	2a c0       	rjmp	.+84     	; 0x751a <_ZN6GSCore19processResponseLineEPKhhPh+0xec>
    74c6:	42 30       	cpi	r20, 0x02	; 2
    74c8:	29 f5       	brne	.+74     	; 0x7514 <_ZN6GSCore19processResponseLineEPKhhPh+0xe6>
    74ca:	00 97       	sbiw	r24, 0x00	; 0
    74cc:	19 f1       	breq	.+70     	; 0x7514 <_ZN6GSCore19processResponseLineEPKhhPh+0xe6>
    74ce:	6f 5f       	subi	r22, 0xFF	; 255
    74d0:	7f 4f       	sbci	r23, 0xFF	; 255
    74d2:	20 e1       	ldi	r18, 0x10	; 16
    74d4:	41 e0       	ldi	r20, 0x01	; 1
    74d6:	8c df       	rcall	.-232    	; 0x73f0 <_ZN6GSCore11parseNumberEPhPKhhh>
    74d8:	88 23       	and	r24, r24
    74da:	e1 f0       	breq	.+56     	; 0x7514 <_ZN6GSCore19processResponseLineEPKhhPh+0xe6>
    74dc:	1d c0       	rjmp	.+58     	; 0x7518 <_ZN6GSCore19processResponseLineEPKhhPh+0xea>
    74de:	41 11       	cpse	r20, r1
    74e0:	19 c0       	rjmp	.+50     	; 0x7514 <_ZN6GSCore19processResponseLineEPKhhPh+0xe6>
    74e2:	02 c0       	rjmp	.+4      	; 0x74e8 <_ZN6GSCore19processResponseLineEPKhhPh+0xba>
    74e4:	43 30       	cpi	r20, 0x03	; 3
    74e6:	b0 f4       	brcc	.+44     	; 0x7514 <_ZN6GSCore19processResponseLineEPKhhPh+0xe6>
    74e8:	6d ed       	ldi	r22, 0xDD	; 221
    74ea:	7c e0       	ldi	r23, 0x0C	; 12
    74ec:	84 e0       	ldi	r24, 0x04	; 4
    74ee:	94 e2       	ldi	r25, 0x24	; 36
    74f0:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_ZN5Print5printEPKc>
    74f4:	e0 91 04 24 	lds	r30, 0x2404
    74f8:	f0 91 05 24 	lds	r31, 0x2405
    74fc:	02 80       	ldd	r0, Z+2	; 0x02
    74fe:	f3 81       	ldd	r31, Z+3	; 0x03
    7500:	e0 2d       	mov	r30, r0
    7502:	a7 01       	movw	r20, r14
    7504:	be 01       	movw	r22, r28
    7506:	84 e0       	ldi	r24, 0x04	; 4
    7508:	94 e2       	ldi	r25, 0x24	; 36
    750a:	19 95       	eicall
    750c:	84 e0       	ldi	r24, 0x04	; 4
    750e:	94 e2       	ldi	r25, 0x24	; 36
    7510:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <_ZN5Print7printlnEv>
    7514:	85 e1       	ldi	r24, 0x15	; 21
    7516:	01 c0       	rjmp	.+2      	; 0x751a <_ZN6GSCore19processResponseLineEPKhhPh+0xec>
    7518:	87 e0       	ldi	r24, 0x07	; 7
    751a:	df 91       	pop	r29
    751c:	cf 91       	pop	r28
    751e:	1f 91       	pop	r17
    7520:	0f 91       	pop	r16
    7522:	ff 90       	pop	r15
    7524:	ef 90       	pop	r14
    7526:	08 95       	ret

00007528 <_ZN6GSCore12processAsyncEv>:
    7528:	af 92       	push	r10
    752a:	bf 92       	push	r11
    752c:	cf 92       	push	r12
    752e:	df 92       	push	r13
    7530:	ef 92       	push	r14
    7532:	ff 92       	push	r15
    7534:	0f 93       	push	r16
    7536:	1f 93       	push	r17
    7538:	cf 93       	push	r28
    753a:	df 93       	push	r29
    753c:	1f 92       	push	r1
    753e:	1f 92       	push	r1
    7540:	cd b7       	in	r28, 0x3d	; 61
    7542:	de b7       	in	r29, 0x3e	; 62
    7544:	5c 01       	movw	r10, r24
    7546:	fc 01       	movw	r30, r24
    7548:	80 a9       	ldd	r24, Z+48	; 0x30
    754a:	8d 30       	cpi	r24, 0x0D	; 13
    754c:	08 f0       	brcs	.+2      	; 0x7550 <_ZN6GSCore12processAsyncEv+0x28>
    754e:	86 c0       	rjmp	.+268    	; 0x765c <_ZN6GSCore12processAsyncEv+0x134>
    7550:	f5 01       	movw	r30, r10
    7552:	86 a5       	ldd	r24, Z+46	; 0x2e
    7554:	88 23       	and	r24, r24
    7556:	09 f4       	brne	.+2      	; 0x755a <_ZN6GSCore12processAsyncEv+0x32>
    7558:	81 c0       	rjmp	.+258    	; 0x765c <_ZN6GSCore12processAsyncEv+0x134>
    755a:	20 e1       	ldi	r18, 0x10	; 16
    755c:	41 e0       	ldi	r20, 0x01	; 1
    755e:	b5 01       	movw	r22, r10
    7560:	6d 5e       	subi	r22, 0xED	; 237
    7562:	7f 4f       	sbci	r23, 0xFF	; 255
    7564:	ce 01       	movw	r24, r28
    7566:	01 96       	adiw	r24, 0x01	; 1
    7568:	43 df       	rcall	.-378    	; 0x73f0 <_ZN6GSCore11parseNumberEPhPKhhh>
    756a:	d8 2e       	mov	r13, r24
    756c:	88 23       	and	r24, r24
    756e:	09 f4       	brne	.+2      	; 0x7572 <_ZN6GSCore12processAsyncEv+0x4a>
    7570:	75 c0       	rjmp	.+234    	; 0x765c <_ZN6GSCore12processAsyncEv+0x134>
    7572:	99 81       	ldd	r25, Y+1	; 0x01
    7574:	f5 01       	movw	r30, r10
    7576:	80 a9       	ldd	r24, Z+48	; 0x30
    7578:	98 13       	cpse	r25, r24
    757a:	70 c0       	rjmp	.+224    	; 0x765c <_ZN6GSCore12processAsyncEv+0x134>
    757c:	86 a5       	ldd	r24, Z+46	; 0x2e
    757e:	81 50       	subi	r24, 0x01	; 1
    7580:	21 f0       	breq	.+8      	; 0x758a <_ZN6GSCore12processAsyncEv+0x62>
    7582:	24 89       	ldd	r18, Z+20	; 0x14
    7584:	20 32       	cpi	r18, 0x20	; 32
    7586:	09 f0       	breq	.+2      	; 0x758a <_ZN6GSCore12processAsyncEv+0x62>
    7588:	69 c0       	rjmp	.+210    	; 0x765c <_ZN6GSCore12processAsyncEv+0x134>
    758a:	91 30       	cpi	r25, 0x01	; 1
    758c:	29 f0       	breq	.+10     	; 0x7598 <_ZN6GSCore12processAsyncEv+0x70>
    758e:	00 f1       	brcs	.+64     	; 0x75d0 <_ZN6GSCore12processAsyncEv+0xa8>
    7590:	92 30       	cpi	r25, 0x02	; 2
    7592:	09 f0       	breq	.+2      	; 0x7596 <_ZN6GSCore12processAsyncEv+0x6e>
    7594:	4c c0       	rjmp	.+152    	; 0x762e <_ZN6GSCore12processAsyncEv+0x106>
    7596:	1c c0       	rjmp	.+56     	; 0x75d0 <_ZN6GSCore12processAsyncEv+0xa8>
    7598:	82 30       	cpi	r24, 0x02	; 2
    759a:	09 f0       	breq	.+2      	; 0x759e <_ZN6GSCore12processAsyncEv+0x76>
    759c:	5f c0       	rjmp	.+190    	; 0x765c <_ZN6GSCore12processAsyncEv+0x134>
    759e:	20 e1       	ldi	r18, 0x10	; 16
    75a0:	41 e0       	ldi	r20, 0x01	; 1
    75a2:	b5 01       	movw	r22, r10
    75a4:	6b 5e       	subi	r22, 0xEB	; 235
    75a6:	7f 4f       	sbci	r23, 0xFF	; 255
    75a8:	ce 01       	movw	r24, r28
    75aa:	02 96       	adiw	r24, 0x02	; 2
    75ac:	21 df       	rcall	.-446    	; 0x73f0 <_ZN6GSCore11parseNumberEPhPKhhh>
    75ae:	d8 2e       	mov	r13, r24
    75b0:	88 23       	and	r24, r24
    75b2:	09 f4       	brne	.+2      	; 0x75b6 <_ZN6GSCore12processAsyncEv+0x8e>
    75b4:	53 c0       	rjmp	.+166    	; 0x765c <_ZN6GSCore12processAsyncEv+0x134>
    75b6:	cc 24       	eor	r12, r12
    75b8:	c3 94       	inc	r12
    75ba:	e1 2c       	mov	r14, r1
    75bc:	f1 2c       	mov	r15, r1
    75be:	00 e0       	ldi	r16, 0x00	; 0
    75c0:	10 e0       	ldi	r17, 0x00	; 0
    75c2:	20 e0       	ldi	r18, 0x00	; 0
    75c4:	30 e0       	ldi	r19, 0x00	; 0
    75c6:	a9 01       	movw	r20, r18
    75c8:	6a 81       	ldd	r22, Y+2	; 0x02
    75ca:	c5 01       	movw	r24, r10
    75cc:	ac de       	rcall	.-680    	; 0x7326 <_ZN6GSCore14processConnectEhmjjb>
    75ce:	47 c0       	rjmp	.+142    	; 0x765e <_ZN6GSCore12processAsyncEv+0x136>
    75d0:	82 30       	cpi	r24, 0x02	; 2
    75d2:	09 f0       	breq	.+2      	; 0x75d6 <_ZN6GSCore12processAsyncEv+0xae>
    75d4:	43 c0       	rjmp	.+134    	; 0x765c <_ZN6GSCore12processAsyncEv+0x134>
    75d6:	20 e1       	ldi	r18, 0x10	; 16
    75d8:	41 e0       	ldi	r20, 0x01	; 1
    75da:	b5 01       	movw	r22, r10
    75dc:	6b 5e       	subi	r22, 0xEB	; 235
    75de:	7f 4f       	sbci	r23, 0xFF	; 255
    75e0:	ce 01       	movw	r24, r28
    75e2:	02 96       	adiw	r24, 0x02	; 2
    75e4:	05 df       	rcall	.-502    	; 0x73f0 <_ZN6GSCore11parseNumberEPhPKhhh>
    75e6:	d8 2e       	mov	r13, r24
    75e8:	88 23       	and	r24, r24
    75ea:	c1 f1       	breq	.+112    	; 0x765c <_ZN6GSCore12processAsyncEv+0x134>
    75ec:	f5 01       	movw	r30, r10
    75ee:	80 a9       	ldd	r24, Z+48	; 0x30
    75f0:	83 30       	cpi	r24, 0x03	; 3
    75f2:	c9 f4       	brne	.+50     	; 0x7626 <_ZN6GSCore12processAsyncEv+0xfe>
    75f4:	6c e0       	ldi	r22, 0x0C	; 12
    75f6:	7d e0       	ldi	r23, 0x0D	; 13
    75f8:	84 e0       	ldi	r24, 0x04	; 4
    75fa:	94 e2       	ldi	r25, 0x24	; 36
    75fc:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_ZN5Print5printEPKc>
    7600:	4a e0       	ldi	r20, 0x0A	; 10
    7602:	50 e0       	ldi	r21, 0x00	; 0
    7604:	6a 81       	ldd	r22, Y+2	; 0x02
    7606:	84 e0       	ldi	r24, 0x04	; 4
    7608:	94 e2       	ldi	r25, 0x24	; 36
    760a:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <_ZN5Print7printlnEhi>
    760e:	8a 81       	ldd	r24, Y+2	; 0x02
    7610:	f5 01       	movw	r30, r10
    7612:	99 e0       	ldi	r25, 0x09	; 9
    7614:	89 9f       	mul	r24, r25
    7616:	e0 0d       	add	r30, r0
    7618:	f1 1d       	adc	r31, r1
    761a:	11 24       	eor	r1, r1
    761c:	e2 5b       	subi	r30, 0xB2	; 178
    761e:	fd 4f       	sbci	r31, 0xFD	; 253
    7620:	80 81       	ld	r24, Z
    7622:	84 60       	ori	r24, 0x04	; 4
    7624:	80 83       	st	Z, r24
    7626:	6a 81       	ldd	r22, Y+2	; 0x02
    7628:	c5 01       	movw	r24, r10
    762a:	0c de       	rcall	.-1000   	; 0x7244 <_ZN6GSCore17processDisconnectEh>
    762c:	18 c0       	rjmp	.+48     	; 0x765e <_ZN6GSCore12processAsyncEv+0x136>
    762e:	81 11       	cpse	r24, r1
    7630:	15 c0       	rjmp	.+42     	; 0x765c <_ZN6GSCore12processAsyncEv+0x134>
    7632:	98 30       	cpi	r25, 0x08	; 8
    7634:	81 f0       	breq	.+32     	; 0x7656 <_ZN6GSCore12processAsyncEv+0x12e>
    7636:	28 f4       	brcc	.+10     	; 0x7642 <_ZN6GSCore12processAsyncEv+0x11a>
    7638:	93 30       	cpi	r25, 0x03	; 3
    763a:	69 f0       	breq	.+26     	; 0x7656 <_ZN6GSCore12processAsyncEv+0x12e>
    763c:	97 30       	cpi	r25, 0x07	; 7
    763e:	41 f0       	breq	.+16     	; 0x7650 <_ZN6GSCore12processAsyncEv+0x128>
    7640:	0d c0       	rjmp	.+26     	; 0x765c <_ZN6GSCore12processAsyncEv+0x134>
    7642:	9b 30       	cpi	r25, 0x0B	; 11
    7644:	28 f0       	brcs	.+10     	; 0x7650 <_ZN6GSCore12processAsyncEv+0x128>
    7646:	9c 30       	cpi	r25, 0x0C	; 12
    7648:	49 f4       	brne	.+18     	; 0x765c <_ZN6GSCore12processAsyncEv+0x134>
    764a:	c5 01       	movw	r24, r10
    764c:	51 de       	rcall	.-862    	; 0x72f0 <_ZN6GSCore18processAssociationEv>
    764e:	07 c0       	rjmp	.+14     	; 0x765e <_ZN6GSCore12processAsyncEv+0x136>
    7650:	f5 01       	movw	r30, r10
    7652:	d0 88       	ldd	r13, Z+16	; 0x10
    7654:	04 c0       	rjmp	.+8      	; 0x765e <_ZN6GSCore12processAsyncEv+0x136>
    7656:	c5 01       	movw	r24, r10
    7658:	14 de       	rcall	.-984    	; 0x7282 <_ZN6GSCore21processDisassociationEv>
    765a:	01 c0       	rjmp	.+2      	; 0x765e <_ZN6GSCore12processAsyncEv+0x136>
    765c:	d1 2c       	mov	r13, r1
    765e:	8d 2d       	mov	r24, r13
    7660:	0f 90       	pop	r0
    7662:	0f 90       	pop	r0
    7664:	df 91       	pop	r29
    7666:	cf 91       	pop	r28
    7668:	1f 91       	pop	r17
    766a:	0f 91       	pop	r16
    766c:	ff 90       	pop	r15
    766e:	ef 90       	pop	r14
    7670:	df 90       	pop	r13
    7672:	cf 90       	pop	r12
    7674:	bf 90       	pop	r11
    7676:	af 90       	pop	r10
    7678:	08 95       	ret

0000767a <_ZN6GSCore15processIncomingEi>:
    767a:	2f 92       	push	r2
    767c:	3f 92       	push	r3
    767e:	5f 92       	push	r5
    7680:	6f 92       	push	r6
    7682:	7f 92       	push	r7
    7684:	8f 92       	push	r8
    7686:	9f 92       	push	r9
    7688:	af 92       	push	r10
    768a:	bf 92       	push	r11
    768c:	cf 92       	push	r12
    768e:	df 92       	push	r13
    7690:	ef 92       	push	r14
    7692:	ff 92       	push	r15
    7694:	0f 93       	push	r16
    7696:	1f 93       	push	r17
    7698:	cf 93       	push	r28
    769a:	df 93       	push	r29
    769c:	1f 92       	push	r1
    769e:	cd b7       	in	r28, 0x3d	; 61
    76a0:	de b7       	in	r29, 0x3e	; 62
    76a2:	1c 01       	movw	r2, r24
    76a4:	7b 01       	movw	r14, r22
    76a6:	77 fd       	sbrc	r23, 7
    76a8:	70 c1       	rjmp	.+736    	; 0x798a <_ZN6GSCore15processIncomingEi+0x310>
    76aa:	8c 01       	movw	r16, r24
    76ac:	0f 5c       	subi	r16, 0xCF	; 207
    76ae:	1d 4f       	sbci	r17, 0xFD	; 253
    76b0:	d8 01       	movw	r26, r16
    76b2:	4c 91       	ld	r20, X
    76b4:	50 e0       	ldi	r21, 0x00	; 0
    76b6:	49 30       	cpi	r20, 0x09	; 9
    76b8:	51 05       	cpc	r21, r1
    76ba:	08 f0       	brcs	.+2      	; 0x76be <_ZN6GSCore15processIncomingEi+0x44>
    76bc:	a6 c1       	rjmp	.+844    	; 0x7a0a <_ZN6GSCore15processIncomingEi+0x390>
    76be:	fa 01       	movw	r30, r20
    76c0:	eb 56       	subi	r30, 0x6B	; 107
    76c2:	fe 4f       	sbci	r31, 0xFE	; 254
    76c4:	0c 94 86 b2 	jmp	0x1650c	; 0x1650c <__tablejump2__>
    76c8:	6b 31       	cpi	r22, 0x1B	; 27
    76ca:	71 05       	cpc	r23, r1
    76cc:	09 f0       	breq	.+2      	; 0x76d0 <_ZN6GSCore15processIncomingEi+0x56>
    76ce:	9d c1       	rjmp	.+826    	; 0x7a0a <_ZN6GSCore15processIncomingEi+0x390>
    76d0:	81 e0       	ldi	r24, 0x01	; 1
    76d2:	f8 01       	movw	r30, r16
    76d4:	80 83       	st	Z, r24
    76d6:	99 c1       	rjmp	.+818    	; 0x7a0a <_ZN6GSCore15processIncomingEi+0x390>
    76d8:	6a 35       	cpi	r22, 0x5A	; 90
    76da:	71 05       	cpc	r23, r1
    76dc:	59 f0       	breq	.+22     	; 0x76f4 <_ZN6GSCore15processIncomingEi+0x7a>
    76de:	69 37       	cpi	r22, 0x79	; 121
    76e0:	71 05       	cpc	r23, r1
    76e2:	79 f0       	breq	.+30     	; 0x7702 <_ZN6GSCore15processIncomingEi+0x88>
    76e4:	61 34       	cpi	r22, 0x41	; 65
    76e6:	71 05       	cpc	r23, r1
    76e8:	91 f4       	brne	.+36     	; 0x770e <_ZN6GSCore15processIncomingEi+0x94>
    76ea:	87 e0       	ldi	r24, 0x07	; 7
    76ec:	d8 01       	movw	r26, r16
    76ee:	8c 93       	st	X, r24
    76f0:	83 e0       	ldi	r24, 0x03	; 3
    76f2:	04 c0       	rjmp	.+8      	; 0x76fc <_ZN6GSCore15processIncomingEi+0x82>
    76f4:	82 e0       	ldi	r24, 0x02	; 2
    76f6:	d8 01       	movw	r26, r16
    76f8:	8c 93       	st	X, r24
    76fa:	85 e0       	ldi	r24, 0x05	; 5
    76fc:	f1 01       	movw	r30, r2
    76fe:	87 a7       	std	Z+47, r24	; 0x2f
    7700:	04 c0       	rjmp	.+8      	; 0x770a <_ZN6GSCore15processIncomingEi+0x90>
    7702:	83 e0       	ldi	r24, 0x03	; 3
    7704:	d8 01       	movw	r26, r16
    7706:	8c 93       	st	X, r24
    7708:	f1 01       	movw	r30, r2
    770a:	16 a6       	std	Z+46, r1	; 0x2e
    770c:	7e c1       	rjmp	.+764    	; 0x7a0a <_ZN6GSCore15processIncomingEi+0x390>
    770e:	d8 01       	movw	r26, r16
    7710:	1c 92       	st	X, r1
    7712:	61 e2       	ldi	r22, 0x21	; 33
    7714:	7d e0       	ldi	r23, 0x0D	; 13
    7716:	84 e0       	ldi	r24, 0x04	; 4
    7718:	94 e2       	ldi	r25, 0x24	; 36
    771a:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_ZN5Print5printEPKc>
    771e:	b7 01       	movw	r22, r14
    7720:	84 e0       	ldi	r24, 0x04	; 4
    7722:	94 e2       	ldi	r25, 0x24	; 36
    7724:	01 dc       	rcall	.-2046   	; 0x6f28 <_ZN14HardwareSerial5writeEi>
    7726:	1f c1       	rjmp	.+574    	; 0x7966 <_ZN6GSCore15processIncomingEi+0x2ec>
    7728:	fc 01       	movw	r30, r24
    772a:	86 a5       	ldd	r24, Z+46	; 0x2e
    772c:	8b 31       	cpi	r24, 0x1B	; 27
    772e:	38 f4       	brcc	.+14     	; 0x773e <_ZN6GSCore15processIncomingEi+0xc4>
    7730:	91 e0       	ldi	r25, 0x01	; 1
    7732:	98 0f       	add	r25, r24
    7734:	96 a7       	std	Z+46, r25	; 0x2e
    7736:	e8 0f       	add	r30, r24
    7738:	f1 1d       	adc	r31, r1
    773a:	63 8b       	std	Z+19, r22	; 0x13
    773c:	06 c0       	rjmp	.+12     	; 0x774a <_ZN6GSCore15processIncomingEi+0xd0>
    773e:	60 e4       	ldi	r22, 0x40	; 64
    7740:	7d e0       	ldi	r23, 0x0D	; 13
    7742:	84 e0       	ldi	r24, 0x04	; 4
    7744:	94 e2       	ldi	r25, 0x24	; 36
    7746:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <_ZN5Print7printlnEPKc>
    774a:	d8 01       	movw	r26, r16
    774c:	8c 91       	ld	r24, X
    774e:	84 30       	cpi	r24, 0x04	; 4
    7750:	d1 f1       	breq	.+116    	; 0x77c6 <_ZN6GSCore15processIncomingEi+0x14c>
    7752:	28 f4       	brcc	.+10     	; 0x775e <_ZN6GSCore15processIncomingEi+0xe4>
    7754:	82 30       	cpi	r24, 0x02	; 2
    7756:	69 f0       	breq	.+26     	; 0x7772 <_ZN6GSCore15processIncomingEi+0xf8>
    7758:	83 30       	cpi	r24, 0x03	; 3
    775a:	61 f1       	breq	.+88     	; 0x77b4 <_ZN6GSCore15processIncomingEi+0x13a>
    775c:	56 c1       	rjmp	.+684    	; 0x7a0a <_ZN6GSCore15processIncomingEi+0x390>
    775e:	87 30       	cpi	r24, 0x07	; 7
    7760:	09 f4       	brne	.+2      	; 0x7764 <_ZN6GSCore15processIncomingEi+0xea>
    7762:	99 c0       	rjmp	.+306    	; 0x7896 <_ZN6GSCore15processIncomingEi+0x21c>
    7764:	88 30       	cpi	r24, 0x08	; 8
    7766:	09 f4       	brne	.+2      	; 0x776a <_ZN6GSCore15processIncomingEi+0xf0>
    7768:	be c0       	rjmp	.+380    	; 0x78e6 <_ZN6GSCore15processIncomingEi+0x26c>
    776a:	85 30       	cpi	r24, 0x05	; 5
    776c:	09 f0       	breq	.+2      	; 0x7770 <_ZN6GSCore15processIncomingEi+0xf6>
    776e:	4d c1       	rjmp	.+666    	; 0x7a0a <_ZN6GSCore15processIncomingEi+0x390>
    7770:	36 c0       	rjmp	.+108    	; 0x77de <_ZN6GSCore15processIncomingEi+0x164>
    7772:	f1 01       	movw	r30, r2
    7774:	87 a5       	ldd	r24, Z+47	; 0x2f
    7776:	81 50       	subi	r24, 0x01	; 1
    7778:	87 a7       	std	Z+47, r24	; 0x2f
    777a:	81 11       	cpse	r24, r1
    777c:	46 c1       	rjmp	.+652    	; 0x7a0a <_ZN6GSCore15processIncomingEi+0x390>
    777e:	71 01       	movw	r14, r2
    7780:	f3 e1       	ldi	r31, 0x13	; 19
    7782:	ef 0e       	add	r14, r31
    7784:	f1 1c       	adc	r15, r1
    7786:	20 e1       	ldi	r18, 0x10	; 16
    7788:	41 e0       	ldi	r20, 0x01	; 1
    778a:	b7 01       	movw	r22, r14
    778c:	c1 01       	movw	r24, r2
    778e:	89 5c       	subi	r24, 0xC9	; 201
    7790:	9d 4f       	sbci	r25, 0xFD	; 253
    7792:	2e de       	rcall	.-932    	; 0x73f0 <_ZN6GSCore11parseNumberEPhPKhhh>
    7794:	88 23       	and	r24, r24
    7796:	09 f4       	brne	.+2      	; 0x779a <_ZN6GSCore15processIncomingEi+0x120>
    7798:	fa c0       	rjmp	.+500    	; 0x798e <_ZN6GSCore15processIncomingEi+0x314>
    779a:	2a e0       	ldi	r18, 0x0A	; 10
    779c:	44 e0       	ldi	r20, 0x04	; 4
    779e:	b1 01       	movw	r22, r2
    77a0:	6c 5e       	subi	r22, 0xEC	; 236
    77a2:	7f 4f       	sbci	r23, 0xFF	; 255
    77a4:	c1 01       	movw	r24, r2
    77a6:	88 5c       	subi	r24, 0xC8	; 200
    77a8:	9d 4f       	sbci	r25, 0xFD	; 253
    77aa:	8c db       	rcall	.-2280   	; 0x6ec4 <_ZN6GSCore11parseNumberEPjPKhhh.part.6>
    77ac:	28 2f       	mov	r18, r24
    77ae:	81 11       	cpse	r24, r1
    77b0:	f1 c0       	rjmp	.+482    	; 0x7994 <_ZN6GSCore15processIncomingEi+0x31a>
    77b2:	ed c0       	rjmp	.+474    	; 0x798e <_ZN6GSCore15processIncomingEi+0x314>
    77b4:	80 e2       	ldi	r24, 0x20	; 32
    77b6:	e8 16       	cp	r14, r24
    77b8:	f1 04       	cpc	r15, r1
    77ba:	09 f0       	breq	.+2      	; 0x77be <_ZN6GSCore15processIncomingEi+0x144>
    77bc:	26 c1       	rjmp	.+588    	; 0x7a0a <_ZN6GSCore15processIncomingEi+0x390>
    77be:	84 e0       	ldi	r24, 0x04	; 4
    77c0:	d8 01       	movw	r26, r16
    77c2:	8c 93       	st	X, r24
    77c4:	22 c1       	rjmp	.+580    	; 0x7a0a <_ZN6GSCore15processIncomingEi+0x390>
    77c6:	b9 e0       	ldi	r27, 0x09	; 9
    77c8:	eb 16       	cp	r14, r27
    77ca:	f1 04       	cpc	r15, r1
    77cc:	09 f0       	breq	.+2      	; 0x77d0 <_ZN6GSCore15processIncomingEi+0x156>
    77ce:	1d c1       	rjmp	.+570    	; 0x7a0a <_ZN6GSCore15processIncomingEi+0x390>
    77d0:	95 e0       	ldi	r25, 0x05	; 5
    77d2:	f8 01       	movw	r30, r16
    77d4:	90 83       	st	Z, r25
    77d6:	d1 01       	movw	r26, r2
    77d8:	9f 96       	adiw	r26, 0x2f	; 47
    77da:	8c 93       	st	X, r24
    77dc:	16 c1       	rjmp	.+556    	; 0x7a0a <_ZN6GSCore15processIncomingEi+0x390>
    77de:	f1 01       	movw	r30, r2
    77e0:	87 a5       	ldd	r24, Z+47	; 0x2f
    77e2:	81 50       	subi	r24, 0x01	; 1
    77e4:	87 a7       	std	Z+47, r24	; 0x2f
    77e6:	81 11       	cpse	r24, r1
    77e8:	10 c1       	rjmp	.+544    	; 0x7a0a <_ZN6GSCore15processIncomingEi+0x390>
    77ea:	61 01       	movw	r12, r2
    77ec:	f4 e1       	ldi	r31, 0x14	; 20
    77ee:	cf 0e       	add	r12, r31
    77f0:	d1 1c       	adc	r13, r1
    77f2:	68 2e       	mov	r6, r24
    77f4:	71 2c       	mov	r7, r1
    77f6:	f6 01       	movw	r30, r12
    77f8:	e6 0d       	add	r30, r6
    77fa:	f7 1d       	adc	r31, r7
    77fc:	90 81       	ld	r25, Z
    77fe:	90 32       	cpi	r25, 0x20	; 32
    7800:	11 f0       	breq	.+4      	; 0x7806 <_ZN6GSCore15processIncomingEi+0x18c>
    7802:	8f 5f       	subi	r24, 0xFF	; 255
    7804:	f6 cf       	rjmp	.-20     	; 0x77f2 <_ZN6GSCore15processIncomingEi+0x178>
    7806:	73 01       	movw	r14, r6
    7808:	8f ef       	ldi	r24, 0xFF	; 255
    780a:	e8 1a       	sub	r14, r24
    780c:	f8 0a       	sbc	r15, r24
    780e:	ec 0c       	add	r14, r12
    7810:	fd 1c       	adc	r15, r13
    7812:	51 2c       	mov	r5, r1
    7814:	85 2c       	mov	r8, r5
    7816:	91 2c       	mov	r9, r1
    7818:	f7 01       	movw	r30, r14
    781a:	e8 0d       	add	r30, r8
    781c:	f9 1d       	adc	r31, r9
    781e:	80 81       	ld	r24, Z
    7820:	89 30       	cpi	r24, 0x09	; 9
    7822:	11 f0       	breq	.+4      	; 0x7828 <_ZN6GSCore15processIncomingEi+0x1ae>
    7824:	53 94       	inc	r5
    7826:	f6 cf       	rjmp	.-20     	; 0x7814 <_ZN6GSCore15processIncomingEi+0x19a>
    7828:	51 01       	movw	r10, r2
    782a:	93 e1       	ldi	r25, 0x13	; 19
    782c:	a9 0e       	add	r10, r25
    782e:	b1 1c       	adc	r11, r1
    7830:	20 e1       	ldi	r18, 0x10	; 16
    7832:	41 e0       	ldi	r20, 0x01	; 1
    7834:	b5 01       	movw	r22, r10
    7836:	c1 01       	movw	r24, r2
    7838:	89 5c       	subi	r24, 0xC9	; 201
    783a:	9d 4f       	sbci	r25, 0xFD	; 253
    783c:	d9 dd       	rcall	.-1102   	; 0x73f0 <_ZN6GSCore11parseNumberEPhPKhhh>
    783e:	88 23       	and	r24, r24
    7840:	09 f4       	brne	.+2      	; 0x7844 <_ZN6GSCore15processIncomingEi+0x1ca>
    7842:	b5 c0       	rjmp	.+362    	; 0x79ae <_ZN6GSCore15processIncomingEi+0x334>
    7844:	a3 01       	movw	r20, r6
    7846:	b6 01       	movw	r22, r12
    7848:	c1 01       	movw	r24, r2
    784a:	86 5c       	subi	r24, 0xC6	; 198
    784c:	9d 4f       	sbci	r25, 0xFD	; 253
    784e:	a4 db       	rcall	.-2232   	; 0x6f98 <_ZN6GSCore14parseIpAddressEP9IPAddressPKcj>
    7850:	88 23       	and	r24, r24
    7852:	09 f4       	brne	.+2      	; 0x7856 <_ZN6GSCore15processIncomingEi+0x1dc>
    7854:	ac c0       	rjmp	.+344    	; 0x79ae <_ZN6GSCore15processIncomingEi+0x334>
    7856:	2a e0       	ldi	r18, 0x0A	; 10
    7858:	45 2d       	mov	r20, r5
    785a:	b7 01       	movw	r22, r14
    785c:	c1 01       	movw	r24, r2
    785e:	80 5c       	subi	r24, 0xC0	; 192
    7860:	9d 4f       	sbci	r25, 0xFD	; 253
    7862:	30 db       	rcall	.-2464   	; 0x6ec4 <_ZN6GSCore11parseNumberEPjPKhhh.part.6>
    7864:	88 23       	and	r24, r24
    7866:	09 f4       	brne	.+2      	; 0x786a <_ZN6GSCore15processIncomingEi+0x1f0>
    7868:	a2 c0       	rjmp	.+324    	; 0x79ae <_ZN6GSCore15processIncomingEi+0x334>
    786a:	b4 01       	movw	r22, r8
    786c:	6f 5f       	subi	r22, 0xFF	; 255
    786e:	7f 4f       	sbci	r23, 0xFF	; 255
    7870:	6e 0d       	add	r22, r14
    7872:	7f 1d       	adc	r23, r15
    7874:	2a e0       	ldi	r18, 0x0A	; 10
    7876:	44 e0       	ldi	r20, 0x04	; 4
    7878:	c1 01       	movw	r24, r2
    787a:	88 5c       	subi	r24, 0xC8	; 200
    787c:	9d 4f       	sbci	r25, 0xFD	; 253
    787e:	22 db       	rcall	.-2492   	; 0x6ec4 <_ZN6GSCore11parseNumberEPjPKhhh.part.6>
    7880:	28 2f       	mov	r18, r24
    7882:	88 23       	and	r24, r24
    7884:	09 f4       	brne	.+2      	; 0x7888 <_ZN6GSCore15processIncomingEi+0x20e>
    7886:	93 c0       	rjmp	.+294    	; 0x79ae <_ZN6GSCore15processIncomingEi+0x334>
    7888:	b1 01       	movw	r22, r2
    788a:	6a 5c       	subi	r22, 0xCA	; 202
    788c:	7d 4f       	sbci	r23, 0xFD	; 253
    788e:	81 e0       	ldi	r24, 0x01	; 1
    7890:	db 01       	movw	r26, r22
    7892:	8c 93       	st	X, r24
    7894:	84 c0       	rjmp	.+264    	; 0x799e <_ZN6GSCore15processIncomingEi+0x324>
    7896:	d1 01       	movw	r26, r2
    7898:	9f 96       	adiw	r26, 0x2f	; 47
    789a:	8c 91       	ld	r24, X
    789c:	9f 97       	sbiw	r26, 0x2f	; 47
    789e:	81 50       	subi	r24, 0x01	; 1
    78a0:	9f 96       	adiw	r26, 0x2f	; 47
    78a2:	8c 93       	st	X, r24
    78a4:	81 11       	cpse	r24, r1
    78a6:	b1 c0       	rjmp	.+354    	; 0x7a0a <_ZN6GSCore15processIncomingEi+0x390>
    78a8:	71 01       	movw	r14, r2
    78aa:	b3 e1       	ldi	r27, 0x13	; 19
    78ac:	eb 0e       	add	r14, r27
    78ae:	f1 1c       	adc	r15, r1
    78b0:	20 e1       	ldi	r18, 0x10	; 16
    78b2:	41 e0       	ldi	r20, 0x01	; 1
    78b4:	b7 01       	movw	r22, r14
    78b6:	c1 01       	movw	r24, r2
    78b8:	c0 96       	adiw	r24, 0x30	; 48
    78ba:	9a dd       	rcall	.-1228   	; 0x73f0 <_ZN6GSCore11parseNumberEPhPKhhh>
    78bc:	88 23       	and	r24, r24
    78be:	09 f4       	brne	.+2      	; 0x78c2 <_ZN6GSCore15processIncomingEi+0x248>
    78c0:	89 c0       	rjmp	.+274    	; 0x79d4 <_ZN6GSCore15processIncomingEi+0x35a>
    78c2:	2a e0       	ldi	r18, 0x0A	; 10
    78c4:	42 e0       	ldi	r20, 0x02	; 2
    78c6:	b1 01       	movw	r22, r2
    78c8:	6c 5e       	subi	r22, 0xEC	; 236
    78ca:	7f 4f       	sbci	r23, 0xFF	; 255
    78cc:	c1 01       	movw	r24, r2
    78ce:	8f 96       	adiw	r24, 0x2f	; 47
    78d0:	8f dd       	rcall	.-1250   	; 0x73f0 <_ZN6GSCore11parseNumberEPhPKhhh>
    78d2:	28 2f       	mov	r18, r24
    78d4:	88 23       	and	r24, r24
    78d6:	09 f4       	brne	.+2      	; 0x78da <_ZN6GSCore15processIncomingEi+0x260>
    78d8:	7d c0       	rjmp	.+250    	; 0x79d4 <_ZN6GSCore15processIncomingEi+0x35a>
    78da:	88 e0       	ldi	r24, 0x08	; 8
    78dc:	d8 01       	movw	r26, r16
    78de:	8c 93       	st	X, r24
    78e0:	f1 01       	movw	r30, r2
    78e2:	16 a6       	std	Z+46, r1	; 0x2e
    78e4:	93 c0       	rjmp	.+294    	; 0x7a0c <_ZN6GSCore15processIncomingEi+0x392>
    78e6:	f1 01       	movw	r30, r2
    78e8:	87 a5       	ldd	r24, Z+47	; 0x2f
    78ea:	81 50       	subi	r24, 0x01	; 1
    78ec:	87 a7       	std	Z+47, r24	; 0x2f
    78ee:	81 11       	cpse	r24, r1
    78f0:	8c c0       	rjmp	.+280    	; 0x7a0a <_ZN6GSCore15processIncomingEi+0x390>
    78f2:	d8 01       	movw	r26, r16
    78f4:	1c 92       	st	X, r1
    78f6:	c1 01       	movw	r24, r2
    78f8:	17 de       	rcall	.-978    	; 0x7528 <_ZN6GSCore12processAsyncEv>
    78fa:	81 11       	cpse	r24, r1
    78fc:	86 c0       	rjmp	.+268    	; 0x7a0a <_ZN6GSCore15processIncomingEi+0x390>
    78fe:	61 e5       	ldi	r22, 0x51	; 81
    7900:	7d e0       	ldi	r23, 0x0D	; 13
    7902:	84 e0       	ldi	r24, 0x04	; 4
    7904:	94 e2       	ldi	r25, 0x24	; 36
    7906:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_ZN5Print5printEPKc>
    790a:	4a e0       	ldi	r20, 0x0A	; 10
    790c:	50 e0       	ldi	r21, 0x00	; 0
    790e:	f1 01       	movw	r30, r2
    7910:	60 a9       	ldd	r22, Z+48	; 0x30
    7912:	84 e0       	ldi	r24, 0x04	; 4
    7914:	94 e2       	ldi	r25, 0x24	; 36
    7916:	0e 94 76 10 	call	0x20ec	; 0x20ec <_ZN5Print5printEhi>
    791a:	61 e7       	ldi	r22, 0x71	; 113
    791c:	7d e0       	ldi	r23, 0x0D	; 13
    791e:	84 e0       	ldi	r24, 0x04	; 4
    7920:	94 e2       	ldi	r25, 0x24	; 36
    7922:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_ZN5Print5printEPKc>
    7926:	4a e0       	ldi	r20, 0x0A	; 10
    7928:	50 e0       	ldi	r21, 0x00	; 0
    792a:	d1 01       	movw	r26, r2
    792c:	9e 96       	adiw	r26, 0x2e	; 46
    792e:	6c 91       	ld	r22, X
    7930:	84 e0       	ldi	r24, 0x04	; 4
    7932:	94 e2       	ldi	r25, 0x24	; 36
    7934:	0e 94 76 10 	call	0x20ec	; 0x20ec <_ZN5Print5printEhi>
    7938:	6b e7       	ldi	r22, 0x7B	; 123
    793a:	7d e0       	ldi	r23, 0x0D	; 13
    793c:	84 e0       	ldi	r24, 0x04	; 4
    793e:	94 e2       	ldi	r25, 0x24	; 36
    7940:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_ZN5Print5printEPKc>
    7944:	e0 91 04 24 	lds	r30, 0x2404
    7948:	f0 91 05 24 	lds	r31, 0x2405
    794c:	d1 01       	movw	r26, r2
    794e:	9e 96       	adiw	r26, 0x2e	; 46
    7950:	4c 91       	ld	r20, X
    7952:	50 e0       	ldi	r21, 0x00	; 0
    7954:	b1 01       	movw	r22, r2
    7956:	6d 5e       	subi	r22, 0xED	; 237
    7958:	7f 4f       	sbci	r23, 0xFF	; 255
    795a:	02 80       	ldd	r0, Z+2	; 0x02
    795c:	f3 81       	ldd	r31, Z+3	; 0x03
    795e:	e0 2d       	mov	r30, r0
    7960:	84 e0       	ldi	r24, 0x04	; 4
    7962:	94 e2       	ldi	r25, 0x24	; 36
    7964:	19 95       	eicall
    7966:	84 e0       	ldi	r24, 0x04	; 4
    7968:	94 e2       	ldi	r25, 0x24	; 36
    796a:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <_ZN5Print7printlnEv>
    796e:	4d c0       	rjmp	.+154    	; 0x7a0a <_ZN6GSCore15processIncomingEi+0x390>
    7970:	94 d3       	rcall	.+1832   	; 0x809a <_ZN6GSCore18bufferIncomingDataEh>
    7972:	f1 01       	movw	r30, r2
    7974:	e8 5c       	subi	r30, 0xC8	; 200
    7976:	fd 4f       	sbci	r31, 0xFD	; 253
    7978:	80 81       	ld	r24, Z
    797a:	91 81       	ldd	r25, Z+1	; 0x01
    797c:	01 97       	sbiw	r24, 0x01	; 1
    797e:	91 83       	std	Z+1, r25	; 0x01
    7980:	80 83       	st	Z, r24
    7982:	89 2b       	or	r24, r25
    7984:	09 f4       	brne	.+2      	; 0x7988 <_ZN6GSCore15processIncomingEi+0x30e>
    7986:	3f c0       	rjmp	.+126    	; 0x7a06 <_ZN6GSCore15processIncomingEi+0x38c>
    7988:	40 c0       	rjmp	.+128    	; 0x7a0a <_ZN6GSCore15processIncomingEi+0x390>
    798a:	20 e0       	ldi	r18, 0x00	; 0
    798c:	3f c0       	rjmp	.+126    	; 0x7a0c <_ZN6GSCore15processIncomingEi+0x392>
    798e:	63 e8       	ldi	r22, 0x83	; 131
    7990:	7d e0       	ldi	r23, 0x0D	; 13
    7992:	22 c0       	rjmp	.+68     	; 0x79d8 <_ZN6GSCore15processIncomingEi+0x35e>
    7994:	b1 01       	movw	r22, r2
    7996:	6a 5c       	subi	r22, 0xCA	; 202
    7998:	7d 4f       	sbci	r23, 0xFD	; 253
    799a:	db 01       	movw	r26, r22
    799c:	1c 92       	st	X, r1
    799e:	c1 01       	movw	r24, r2
    79a0:	29 83       	std	Y+1, r18	; 0x01
    79a2:	aa d3       	rcall	.+1876   	; 0x80f8 <_ZN6GSCore17bufferFrameHeaderEPKNS_7RXFrameE>
    79a4:	86 e0       	ldi	r24, 0x06	; 6
    79a6:	f8 01       	movw	r30, r16
    79a8:	80 83       	st	Z, r24
    79aa:	29 81       	ldd	r18, Y+1	; 0x01
    79ac:	2f c0       	rjmp	.+94     	; 0x7a0c <_ZN6GSCore15processIncomingEi+0x392>
    79ae:	63 ea       	ldi	r22, 0xA3	; 163
    79b0:	7d e0       	ldi	r23, 0x0D	; 13
    79b2:	84 e0       	ldi	r24, 0x04	; 4
    79b4:	94 e2       	ldi	r25, 0x24	; 36
    79b6:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_ZN5Print5printEPKc>
    79ba:	e0 91 04 24 	lds	r30, 0x2404
    79be:	f0 91 05 24 	lds	r31, 0x2405
    79c2:	d1 01       	movw	r26, r2
    79c4:	9e 96       	adiw	r26, 0x2e	; 46
    79c6:	4c 91       	ld	r20, X
    79c8:	50 e0       	ldi	r21, 0x00	; 0
    79ca:	02 80       	ldd	r0, Z+2	; 0x02
    79cc:	f3 81       	ldd	r31, Z+3	; 0x03
    79ce:	e0 2d       	mov	r30, r0
    79d0:	b5 01       	movw	r22, r10
    79d2:	12 c0       	rjmp	.+36     	; 0x79f8 <_ZN6GSCore15processIncomingEi+0x37e>
    79d4:	63 ec       	ldi	r22, 0xC3	; 195
    79d6:	7d e0       	ldi	r23, 0x0D	; 13
    79d8:	84 e0       	ldi	r24, 0x04	; 4
    79da:	94 e2       	ldi	r25, 0x24	; 36
    79dc:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_ZN5Print5printEPKc>
    79e0:	e0 91 04 24 	lds	r30, 0x2404
    79e4:	f0 91 05 24 	lds	r31, 0x2405
    79e8:	d1 01       	movw	r26, r2
    79ea:	9e 96       	adiw	r26, 0x2e	; 46
    79ec:	4c 91       	ld	r20, X
    79ee:	50 e0       	ldi	r21, 0x00	; 0
    79f0:	02 80       	ldd	r0, Z+2	; 0x02
    79f2:	f3 81       	ldd	r31, Z+3	; 0x03
    79f4:	e0 2d       	mov	r30, r0
    79f6:	b7 01       	movw	r22, r14
    79f8:	84 e0       	ldi	r24, 0x04	; 4
    79fa:	94 e2       	ldi	r25, 0x24	; 36
    79fc:	19 95       	eicall
    79fe:	84 e0       	ldi	r24, 0x04	; 4
    7a00:	94 e2       	ldi	r25, 0x24	; 36
    7a02:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <_ZN5Print7printlnEv>
    7a06:	f8 01       	movw	r30, r16
    7a08:	10 82       	st	Z, r1
    7a0a:	21 e0       	ldi	r18, 0x01	; 1
    7a0c:	82 2f       	mov	r24, r18
    7a0e:	0f 90       	pop	r0
    7a10:	df 91       	pop	r29
    7a12:	cf 91       	pop	r28
    7a14:	1f 91       	pop	r17
    7a16:	0f 91       	pop	r16
    7a18:	ff 90       	pop	r15
    7a1a:	ef 90       	pop	r14
    7a1c:	df 90       	pop	r13
    7a1e:	cf 90       	pop	r12
    7a20:	bf 90       	pop	r11
    7a22:	af 90       	pop	r10
    7a24:	9f 90       	pop	r9
    7a26:	8f 90       	pop	r8
    7a28:	7f 90       	pop	r7
    7a2a:	6f 90       	pop	r6
    7a2c:	5f 90       	pop	r5
    7a2e:	3f 90       	pop	r3
    7a30:	2f 90       	pop	r2
    7a32:	08 95       	ret

00007a34 <_ZN6GSCore16readDataResponseEv>:
    7a34:	cf 92       	push	r12
    7a36:	df 92       	push	r13
    7a38:	ef 92       	push	r14
    7a3a:	ff 92       	push	r15
    7a3c:	0f 93       	push	r16
    7a3e:	1f 93       	push	r17
    7a40:	cf 93       	push	r28
    7a42:	df 93       	push	r29
    7a44:	ec 01       	movw	r28, r24
    7a46:	0e 94 16 14 	call	0x282c	; 0x282c <millis>
    7a4a:	6b 01       	movw	r12, r22
    7a4c:	7c 01       	movw	r14, r24
    7a4e:	8e 01       	movw	r16, r28
    7a50:	0f 5c       	subi	r16, 0xCF	; 207
    7a52:	1d 4f       	sbci	r17, 0xFD	; 253
    7a54:	ce 01       	movw	r24, r28
    7a56:	24 db       	rcall	.-2488   	; 0x70a0 <_ZN6GSCore7readRawEv>
    7a58:	8f 3f       	cpi	r24, 0xFF	; 255
    7a5a:	2f ef       	ldi	r18, 0xFF	; 255
    7a5c:	92 07       	cpc	r25, r18
    7a5e:	91 f4       	brne	.+36     	; 0x7a84 <_ZN6GSCore16readDataResponseEv+0x50>
    7a60:	0e 94 16 14 	call	0x282c	; 0x282c <millis>
    7a64:	6c 19       	sub	r22, r12
    7a66:	7d 09       	sbc	r23, r13
    7a68:	8e 09       	sbc	r24, r14
    7a6a:	9f 09       	sbc	r25, r15
    7a6c:	61 32       	cpi	r22, 0x21	; 33
    7a6e:	7e 44       	sbci	r23, 0x4E	; 78
    7a70:	81 05       	cpc	r24, r1
    7a72:	91 05       	cpc	r25, r1
    7a74:	78 f3       	brcs	.-34     	; 0x7a54 <_ZN6GSCore16readDataResponseEv+0x20>
    7a76:	63 ee       	ldi	r22, 0xE3	; 227
    7a78:	7d e0       	ldi	r23, 0x0D	; 13
    7a7a:	84 e0       	ldi	r24, 0x04	; 4
    7a7c:	94 e2       	ldi	r25, 0x24	; 36
    7a7e:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <_ZN5Print7printlnEPKc>
    7a82:	0f c0       	rjmp	.+30     	; 0x7aa2 <_ZN6GSCore16readDataResponseEv+0x6e>
    7a84:	f8 01       	movw	r30, r16
    7a86:	20 81       	ld	r18, Z
    7a88:	21 30       	cpi	r18, 0x01	; 1
    7a8a:	69 f4       	brne	.+26     	; 0x7aa6 <_ZN6GSCore16readDataResponseEv+0x72>
    7a8c:	8f 34       	cpi	r24, 0x4F	; 79
    7a8e:	91 05       	cpc	r25, r1
    7a90:	19 f4       	brne	.+6      	; 0x7a98 <_ZN6GSCore16readDataResponseEv+0x64>
    7a92:	10 82       	st	Z, r1
    7a94:	81 e0       	ldi	r24, 0x01	; 1
    7a96:	0b c0       	rjmp	.+22     	; 0x7aae <_ZN6GSCore16readDataResponseEv+0x7a>
    7a98:	86 34       	cpi	r24, 0x46	; 70
    7a9a:	91 05       	cpc	r25, r1
    7a9c:	21 f4       	brne	.+8      	; 0x7aa6 <_ZN6GSCore16readDataResponseEv+0x72>
    7a9e:	f8 01       	movw	r30, r16
    7aa0:	10 82       	st	Z, r1
    7aa2:	80 e0       	ldi	r24, 0x00	; 0
    7aa4:	04 c0       	rjmp	.+8      	; 0x7aae <_ZN6GSCore16readDataResponseEv+0x7a>
    7aa6:	bc 01       	movw	r22, r24
    7aa8:	ce 01       	movw	r24, r28
    7aaa:	e7 dd       	rcall	.-1074   	; 0x767a <_ZN6GSCore15processIncomingEi>
    7aac:	d3 cf       	rjmp	.-90     	; 0x7a54 <_ZN6GSCore16readDataResponseEv+0x20>
    7aae:	df 91       	pop	r29
    7ab0:	cf 91       	pop	r28
    7ab2:	1f 91       	pop	r17
    7ab4:	0f 91       	pop	r16
    7ab6:	ff 90       	pop	r15
    7ab8:	ef 90       	pop	r14
    7aba:	df 90       	pop	r13
    7abc:	cf 90       	pop	r12
    7abe:	08 95       	ret

00007ac0 <_ZN6GSCore8writeRawEPKhj>:
    7ac0:	cf 92       	push	r12
    7ac2:	df 92       	push	r13
    7ac4:	ef 92       	push	r14
    7ac6:	ff 92       	push	r15
    7ac8:	0f 93       	push	r16
    7aca:	1f 93       	push	r17
    7acc:	cf 93       	push	r28
    7ace:	df 93       	push	r29
    7ad0:	ec 01       	movw	r28, r24
    7ad2:	8b 01       	movw	r16, r22
    7ad4:	7a 01       	movw	r14, r20
    7ad6:	8a 85       	ldd	r24, Y+10	; 0x0a
    7ad8:	9b 85       	ldd	r25, Y+11	; 0x0b
    7ada:	00 97       	sbiw	r24, 0x00	; 0
    7adc:	79 f0       	breq	.+30     	; 0x7afc <_ZN6GSCore8writeRawEPKhj+0x3c>
    7ade:	dc 01       	movw	r26, r24
    7ae0:	ed 91       	ld	r30, X+
    7ae2:	fc 91       	ld	r31, X
    7ae4:	02 80       	ldd	r0, Z+2	; 0x02
    7ae6:	f3 81       	ldd	r31, Z+3	; 0x03
    7ae8:	e0 2d       	mov	r30, r0
    7aea:	df 91       	pop	r29
    7aec:	cf 91       	pop	r28
    7aee:	1f 91       	pop	r17
    7af0:	0f 91       	pop	r16
    7af2:	ff 90       	pop	r15
    7af4:	ef 90       	pop	r14
    7af6:	df 90       	pop	r13
    7af8:	cf 90       	pop	r12
    7afa:	19 94       	eijmp
    7afc:	8c 85       	ldd	r24, Y+12	; 0x0c
    7afe:	88 23       	and	r24, r24
    7b00:	09 f4       	brne	.+2      	; 0x7b04 <_ZN6GSCore8writeRawEPKhj+0x44>
    7b02:	35 c0       	rjmp	.+106    	; 0x7b6e <_ZN6GSCore8writeRawEPKhj+0xae>
    7b04:	90 e2       	ldi	r25, 0x20	; 32
    7b06:	c9 2e       	mov	r12, r25
    7b08:	e1 14       	cp	r14, r1
    7b0a:	f1 04       	cpc	r15, r1
    7b0c:	81 f1       	breq	.+96     	; 0x7b6e <_ZN6GSCore8writeRawEPKhj+0xae>
    7b0e:	8e 85       	ldd	r24, Y+14	; 0x0e
    7b10:	88 23       	and	r24, r24
    7b12:	51 f0       	breq	.+20     	; 0x7b28 <_ZN6GSCore8writeRawEPKhj+0x68>
    7b14:	65 ef       	ldi	r22, 0xF5	; 245
    7b16:	ce 01       	movw	r24, r28
    7b18:	28 da       	rcall	.-2992   	; 0x6f6a <_ZN6GSCore11transferSpiEh>
    7b1a:	68 2f       	mov	r22, r24
    7b1c:	ce 01       	movw	r24, r28
    7b1e:	90 da       	rcall	.-2784   	; 0x7040 <_ZN6GSCore17processSpiSpecialEh>
    7b20:	bc 01       	movw	r22, r24
    7b22:	ce 01       	movw	r24, r28
    7b24:	aa dd       	rcall	.-1196   	; 0x767a <_ZN6GSCore15processIncomingEi>
    7b26:	f0 cf       	rjmp	.-32     	; 0x7b08 <_ZN6GSCore8writeRawEPKhj+0x48>
    7b28:	f8 01       	movw	r30, r16
    7b2a:	d0 80       	ld	r13, Z
    7b2c:	6d 2d       	mov	r22, r13
    7b2e:	ce 01       	movw	r24, r28
    7b30:	13 db       	rcall	.-2522   	; 0x7158 <_ZN6GSCore12isSpiSpecialEh>
    7b32:	88 23       	and	r24, r24
    7b34:	69 f0       	breq	.+26     	; 0x7b50 <_ZN6GSCore8writeRawEPKhj+0x90>
    7b36:	6b ef       	ldi	r22, 0xFB	; 251
    7b38:	ce 01       	movw	r24, r28
    7b3a:	17 da       	rcall	.-3026   	; 0x6f6a <_ZN6GSCore11transferSpiEh>
    7b3c:	68 2f       	mov	r22, r24
    7b3e:	ce 01       	movw	r24, r28
    7b40:	7f da       	rcall	.-2818   	; 0x7040 <_ZN6GSCore17processSpiSpecialEh>
    7b42:	bc 01       	movw	r22, r24
    7b44:	ce 01       	movw	r24, r28
    7b46:	99 dd       	rcall	.-1230   	; 0x767a <_ZN6GSCore15processIncomingEi>
    7b48:	d8 01       	movw	r26, r16
    7b4a:	6c 91       	ld	r22, X
    7b4c:	6c 25       	eor	r22, r12
    7b4e:	01 c0       	rjmp	.+2      	; 0x7b52 <_ZN6GSCore8writeRawEPKhj+0x92>
    7b50:	6d 2d       	mov	r22, r13
    7b52:	ce 01       	movw	r24, r28
    7b54:	0a da       	rcall	.-3052   	; 0x6f6a <_ZN6GSCore11transferSpiEh>
    7b56:	68 2f       	mov	r22, r24
    7b58:	ce 01       	movw	r24, r28
    7b5a:	72 da       	rcall	.-2844   	; 0x7040 <_ZN6GSCore17processSpiSpecialEh>
    7b5c:	bc 01       	movw	r22, r24
    7b5e:	ce 01       	movw	r24, r28
    7b60:	8c dd       	rcall	.-1256   	; 0x767a <_ZN6GSCore15processIncomingEi>
    7b62:	0f 5f       	subi	r16, 0xFF	; 255
    7b64:	1f 4f       	sbci	r17, 0xFF	; 255
    7b66:	b1 e0       	ldi	r27, 0x01	; 1
    7b68:	eb 1a       	sub	r14, r27
    7b6a:	f1 08       	sbc	r15, r1
    7b6c:	cd cf       	rjmp	.-102    	; 0x7b08 <_ZN6GSCore8writeRawEPKhj+0x48>
    7b6e:	df 91       	pop	r29
    7b70:	cf 91       	pop	r28
    7b72:	1f 91       	pop	r17
    7b74:	0f 91       	pop	r16
    7b76:	ff 90       	pop	r15
    7b78:	ef 90       	pop	r14
    7b7a:	df 90       	pop	r13
    7b7c:	cf 90       	pop	r12
    7b7e:	08 95       	ret

00007b80 <_ZN6GSCore9writeDataEhPKhj>:
    7b80:	af 92       	push	r10
    7b82:	bf 92       	push	r11
    7b84:	cf 92       	push	r12
    7b86:	df 92       	push	r13
    7b88:	ef 92       	push	r14
    7b8a:	ff 92       	push	r15
    7b8c:	0f 93       	push	r16
    7b8e:	1f 93       	push	r17
    7b90:	cf 93       	push	r28
    7b92:	df 93       	push	r29
    7b94:	cd b7       	in	r28, 0x3d	; 61
    7b96:	de b7       	in	r29, 0x3e	; 62
    7b98:	28 97       	sbiw	r28, 0x08	; 8
    7b9a:	0f b6       	in	r0, 0x3f	; 63
    7b9c:	f8 94       	cli
    7b9e:	de bf       	out	0x3e, r29	; 62
    7ba0:	0f be       	out	0x3f, r0	; 63
    7ba2:	cd bf       	out	0x3d, r28	; 61
    7ba4:	8c 01       	movw	r16, r24
    7ba6:	b6 2e       	mov	r11, r22
    7ba8:	6a 01       	movw	r12, r20
    7baa:	79 01       	movw	r14, r18
    7bac:	8f e0       	ldi	r24, 0x0F	; 15
    7bae:	86 17       	cp	r24, r22
    7bb0:	10 f4       	brcc	.+4      	; 0x7bb6 <_ZN6GSCore9writeDataEhPKhj+0x36>
    7bb2:	b1 2c       	mov	r11, r1
    7bb4:	41 c0       	rjmp	.+130    	; 0x7c38 <_ZN6GSCore9writeDataEhPKhj+0xb8>
    7bb6:	29 37       	cpi	r18, 0x79	; 121
    7bb8:	95 e0       	ldi	r25, 0x05	; 5
    7bba:	39 07       	cpc	r19, r25
    7bbc:	88 f0       	brcs	.+34     	; 0x7be0 <_ZN6GSCore9writeDataEhPKhj+0x60>
    7bbe:	28 e7       	ldi	r18, 0x78	; 120
    7bc0:	35 e0       	ldi	r19, 0x05	; 5
    7bc2:	c8 01       	movw	r24, r16
    7bc4:	dd df       	rcall	.-70     	; 0x7b80 <_ZN6GSCore9writeDataEhPKhj>
    7bc6:	88 23       	and	r24, r24
    7bc8:	a1 f3       	breq	.-24     	; 0x7bb2 <_ZN6GSCore9writeDataEhPKhj+0x32>
    7bca:	97 01       	movw	r18, r14
    7bcc:	28 57       	subi	r18, 0x78	; 120
    7bce:	35 40       	sbci	r19, 0x05	; 5
    7bd0:	a6 01       	movw	r20, r12
    7bd2:	48 58       	subi	r20, 0x88	; 136
    7bd4:	5a 4f       	sbci	r21, 0xFA	; 250
    7bd6:	6b 2d       	mov	r22, r11
    7bd8:	c8 01       	movw	r24, r16
    7bda:	d2 df       	rcall	.-92     	; 0x7b80 <_ZN6GSCore9writeDataEhPKhj>
    7bdc:	b8 2e       	mov	r11, r24
    7bde:	2c c0       	rjmp	.+88     	; 0x7c38 <_ZN6GSCore9writeDataEhPKhj+0xb8>
    7be0:	ff 92       	push	r15
    7be2:	2f 93       	push	r18
    7be4:	1f 92       	push	r1
    7be6:	6f 93       	push	r22
    7be8:	89 ef       	ldi	r24, 0xF9	; 249
    7bea:	9d e0       	ldi	r25, 0x0D	; 13
    7bec:	9f 93       	push	r25
    7bee:	8f 93       	push	r24
    7bf0:	1f 92       	push	r1
    7bf2:	88 e0       	ldi	r24, 0x08	; 8
    7bf4:	8f 93       	push	r24
    7bf6:	ce 01       	movw	r24, r28
    7bf8:	01 96       	adiw	r24, 0x01	; 1
    7bfa:	5c 01       	movw	r10, r24
    7bfc:	bf 92       	push	r11
    7bfe:	8f 93       	push	r24
    7c00:	0e 94 1d b6 	call	0x16c3a	; 0x16c3a <snprintf>
    7c04:	43 e0       	ldi	r20, 0x03	; 3
    7c06:	50 e0       	ldi	r21, 0x00	; 0
    7c08:	b5 01       	movw	r22, r10
    7c0a:	c8 01       	movw	r24, r16
    7c0c:	59 df       	rcall	.-334    	; 0x7ac0 <_ZN6GSCore8writeRawEPKhj>
    7c0e:	c8 01       	movw	r24, r16
    7c10:	11 df       	rcall	.-478    	; 0x7a34 <_ZN6GSCore16readDataResponseEv>
    7c12:	b8 2e       	mov	r11, r24
    7c14:	0f b6       	in	r0, 0x3f	; 63
    7c16:	f8 94       	cli
    7c18:	de bf       	out	0x3e, r29	; 62
    7c1a:	0f be       	out	0x3f, r0	; 63
    7c1c:	cd bf       	out	0x3d, r28	; 61
    7c1e:	bb 20       	and	r11, r11
    7c20:	41 f2       	breq	.-112    	; 0x7bb2 <_ZN6GSCore9writeDataEhPKhj+0x32>
    7c22:	44 e0       	ldi	r20, 0x04	; 4
    7c24:	50 e0       	ldi	r21, 0x00	; 0
    7c26:	be 01       	movw	r22, r28
    7c28:	6c 5f       	subi	r22, 0xFC	; 252
    7c2a:	7f 4f       	sbci	r23, 0xFF	; 255
    7c2c:	c8 01       	movw	r24, r16
    7c2e:	48 df       	rcall	.-368    	; 0x7ac0 <_ZN6GSCore8writeRawEPKhj>
    7c30:	a7 01       	movw	r20, r14
    7c32:	b6 01       	movw	r22, r12
    7c34:	c8 01       	movw	r24, r16
    7c36:	44 df       	rcall	.-376    	; 0x7ac0 <_ZN6GSCore8writeRawEPKhj>
    7c38:	8b 2d       	mov	r24, r11
    7c3a:	28 96       	adiw	r28, 0x08	; 8
    7c3c:	0f b6       	in	r0, 0x3f	; 63
    7c3e:	f8 94       	cli
    7c40:	de bf       	out	0x3e, r29	; 62
    7c42:	0f be       	out	0x3f, r0	; 63
    7c44:	cd bf       	out	0x3d, r28	; 61
    7c46:	df 91       	pop	r29
    7c48:	cf 91       	pop	r28
    7c4a:	1f 91       	pop	r17
    7c4c:	0f 91       	pop	r16
    7c4e:	ff 90       	pop	r15
    7c50:	ef 90       	pop	r14
    7c52:	df 90       	pop	r13
    7c54:	cf 90       	pop	r12
    7c56:	bf 90       	pop	r11
    7c58:	af 90       	pop	r10
    7c5a:	08 95       	ret

00007c5c <_ZN6GSCore12writeCommandEPKcPv>:
    7c5c:	0f 93       	push	r16
    7c5e:	1f 93       	push	r17
    7c60:	cf 93       	push	r28
    7c62:	df 93       	push	r29
    7c64:	cd b7       	in	r28, 0x3d	; 61
    7c66:	de b7       	in	r29, 0x3e	; 62
    7c68:	c0 58       	subi	r28, 0x80	; 128
    7c6a:	d1 09       	sbc	r29, r1
    7c6c:	0f b6       	in	r0, 0x3f	; 63
    7c6e:	f8 94       	cli
    7c70:	de bf       	out	0x3e, r29	; 62
    7c72:	0f be       	out	0x3f, r0	; 63
    7c74:	cd bf       	out	0x3d, r28	; 61
    7c76:	8c 01       	movw	r16, r24
    7c78:	9a 01       	movw	r18, r20
    7c7a:	ab 01       	movw	r20, r22
    7c7c:	6e e7       	ldi	r22, 0x7E	; 126
    7c7e:	70 e0       	ldi	r23, 0x00	; 0
    7c80:	ce 01       	movw	r24, r28
    7c82:	01 96       	adiw	r24, 0x01	; 1
    7c84:	0e 94 87 b6 	call	0x16d0e	; 0x16d0e <vsnprintf>
    7c88:	ac 01       	movw	r20, r24
    7c8a:	8f 37       	cpi	r24, 0x7F	; 127
    7c8c:	91 05       	cpc	r25, r1
    7c8e:	d8 f0       	brcs	.+54     	; 0x7cc6 <_ZN6GSCore12writeCommandEPKcPv+0x6a>
    7c90:	6d e1       	ldi	r22, 0x1D	; 29
    7c92:	7e e0       	ldi	r23, 0x0E	; 14
    7c94:	84 e0       	ldi	r24, 0x04	; 4
    7c96:	94 e2       	ldi	r25, 0x24	; 36
    7c98:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_ZN5Print5printEPKc>
    7c9c:	e0 91 04 24 	lds	r30, 0x2404
    7ca0:	f0 91 05 24 	lds	r31, 0x2405
    7ca4:	02 80       	ldd	r0, Z+2	; 0x02
    7ca6:	f3 81       	ldd	r31, Z+3	; 0x03
    7ca8:	e0 2d       	mov	r30, r0
    7caa:	4e e7       	ldi	r20, 0x7E	; 126
    7cac:	50 e0       	ldi	r21, 0x00	; 0
    7cae:	be 01       	movw	r22, r28
    7cb0:	6f 5f       	subi	r22, 0xFF	; 255
    7cb2:	7f 4f       	sbci	r23, 0xFF	; 255
    7cb4:	84 e0       	ldi	r24, 0x04	; 4
    7cb6:	94 e2       	ldi	r25, 0x24	; 36
    7cb8:	19 95       	eicall
    7cba:	84 e0       	ldi	r24, 0x04	; 4
    7cbc:	94 e2       	ldi	r25, 0x24	; 36
    7cbe:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <_ZN5Print7printlnEv>
    7cc2:	4e e7       	ldi	r20, 0x7E	; 126
    7cc4:	50 e0       	ldi	r21, 0x00	; 0
    7cc6:	e1 e0       	ldi	r30, 0x01	; 1
    7cc8:	f0 e0       	ldi	r31, 0x00	; 0
    7cca:	ec 0f       	add	r30, r28
    7ccc:	fd 1f       	adc	r31, r29
    7cce:	e4 0f       	add	r30, r20
    7cd0:	f5 1f       	adc	r31, r21
    7cd2:	8d e0       	ldi	r24, 0x0D	; 13
    7cd4:	80 83       	st	Z, r24
    7cd6:	fe 01       	movw	r30, r28
    7cd8:	e4 0f       	add	r30, r20
    7cda:	f5 1f       	adc	r31, r21
    7cdc:	8a e0       	ldi	r24, 0x0A	; 10
    7cde:	82 83       	std	Z+2, r24	; 0x02
    7ce0:	4e 5f       	subi	r20, 0xFE	; 254
    7ce2:	5f 4f       	sbci	r21, 0xFF	; 255
    7ce4:	be 01       	movw	r22, r28
    7ce6:	6f 5f       	subi	r22, 0xFF	; 255
    7ce8:	7f 4f       	sbci	r23, 0xFF	; 255
    7cea:	c8 01       	movw	r24, r16
    7cec:	e9 de       	rcall	.-558    	; 0x7ac0 <_ZN6GSCore8writeRawEPKhj>
    7cee:	c0 58       	subi	r28, 0x80	; 128
    7cf0:	df 4f       	sbci	r29, 0xFF	; 255
    7cf2:	0f b6       	in	r0, 0x3f	; 63
    7cf4:	f8 94       	cli
    7cf6:	de bf       	out	0x3e, r29	; 62
    7cf8:	0f be       	out	0x3f, r0	; 63
    7cfa:	cd bf       	out	0x3d, r28	; 61
    7cfc:	df 91       	pop	r29
    7cfe:	cf 91       	pop	r28
    7d00:	1f 91       	pop	r17
    7d02:	0f 91       	pop	r16
    7d04:	08 95       	ret

00007d06 <_ZN6GSCore12writeCommandEPKcz>:
    7d06:	cf 93       	push	r28
    7d08:	df 93       	push	r29
    7d0a:	cd b7       	in	r28, 0x3d	; 61
    7d0c:	de b7       	in	r29, 0x3e	; 62
    7d0e:	ae 01       	movw	r20, r28
    7d10:	46 5f       	subi	r20, 0xF6	; 246
    7d12:	5f 4f       	sbci	r21, 0xFF	; 255
    7d14:	68 85       	ldd	r22, Y+8	; 0x08
    7d16:	79 85       	ldd	r23, Y+9	; 0x09
    7d18:	8e 81       	ldd	r24, Y+6	; 0x06
    7d1a:	9f 81       	ldd	r25, Y+7	; 0x07
    7d1c:	9f df       	rcall	.-194    	; 0x7c5c <_ZN6GSCore12writeCommandEPKcPv>
    7d1e:	df 91       	pop	r29
    7d20:	cf 91       	pop	r28
    7d22:	08 95       	ret

00007d24 <_ZN6GSCore14getFrameHeaderEh>:
    7d24:	df 92       	push	r13
    7d26:	ef 92       	push	r14
    7d28:	ff 92       	push	r15
    7d2a:	0f 93       	push	r16
    7d2c:	1f 93       	push	r17
    7d2e:	cf 93       	push	r28
    7d30:	df 93       	push	r29
    7d32:	ec 01       	movw	r28, r24
    7d34:	8b 01       	movw	r16, r22
    7d36:	d4 2e       	mov	r13, r20
    7d38:	7b 01       	movw	r14, r22
    7d3a:	8c eb       	ldi	r24, 0xBC	; 188
    7d3c:	e8 1a       	sub	r14, r24
    7d3e:	8d ef       	ldi	r24, 0xFD	; 253
    7d40:	f8 0a       	sbc	r15, r24
    7d42:	f7 01       	movw	r30, r14
    7d44:	80 81       	ld	r24, Z
    7d46:	91 81       	ldd	r25, Z+1	; 0x01
    7d48:	89 2b       	or	r24, r25
    7d4a:	d1 f4       	brne	.+52     	; 0x7d80 <_ZN6GSCore14getFrameHeaderEh+0x5c>
    7d4c:	70 97       	sbiw	r30, 0x10	; 16
    7d4e:	20 81       	ld	r18, Z
    7d50:	31 81       	ldd	r19, Z+1	; 0x01
    7d52:	32 97       	sbiw	r30, 0x02	; 2
    7d54:	80 81       	ld	r24, Z
    7d56:	91 81       	ldd	r25, Z+1	; 0x01
    7d58:	28 17       	cp	r18, r24
    7d5a:	39 07       	cpc	r19, r25
    7d5c:	61 f0       	breq	.+24     	; 0x7d76 <_ZN6GSCore14getFrameHeaderEh+0x52>
    7d5e:	6e 5b       	subi	r22, 0xBE	; 190
    7d60:	7d 4f       	sbci	r23, 0xFD	; 253
    7d62:	c8 01       	movw	r24, r16
    7d64:	0c da       	rcall	.-3048   	; 0x717e <_ZN6GSCore15loadFrameHeaderEPNS_7RXFrameE>
    7d66:	0c c0       	rjmp	.+24     	; 0x7d80 <_ZN6GSCore14getFrameHeaderEh+0x5c>
    7d68:	c8 01       	movw	r24, r16
    7d6a:	9a d9       	rcall	.-3276   	; 0x70a0 <_ZN6GSCore7readRawEv>
    7d6c:	bc 01       	movw	r22, r24
    7d6e:	c8 01       	movw	r24, r16
    7d70:	84 dc       	rcall	.-1784   	; 0x767a <_ZN6GSCore15processIncomingEi>
    7d72:	88 23       	and	r24, r24
    7d74:	79 f1       	breq	.+94     	; 0x7dd4 <_ZN6GSCore14getFrameHeaderEh+0xb0>
    7d76:	f7 01       	movw	r30, r14
    7d78:	80 81       	ld	r24, Z
    7d7a:	91 81       	ldd	r25, Z+1	; 0x01
    7d7c:	89 2b       	or	r24, r25
    7d7e:	a1 f3       	breq	.-24     	; 0x7d68 <_ZN6GSCore14getFrameHeaderEh+0x44>
    7d80:	fe ef       	ldi	r31, 0xFE	; 254
    7d82:	df 16       	cp	r13, r31
    7d84:	31 f0       	breq	.+12     	; 0x7d92 <_ZN6GSCore14getFrameHeaderEh+0x6e>
    7d86:	f8 01       	movw	r30, r16
    7d88:	ed 5b       	subi	r30, 0xBD	; 189
    7d8a:	fd 4f       	sbci	r31, 0xFD	; 253
    7d8c:	80 81       	ld	r24, Z
    7d8e:	8d 11       	cpse	r24, r13
    7d90:	21 c0       	rjmp	.+66     	; 0x7dd4 <_ZN6GSCore14getFrameHeaderEh+0xb0>
    7d92:	f8 01       	movw	r30, r16
    7d94:	ee 5b       	subi	r30, 0xBE	; 190
    7d96:	fd 4f       	sbci	r31, 0xFD	; 253
    7d98:	80 81       	ld	r24, Z
    7d9a:	88 83       	st	Y, r24
    7d9c:	81 81       	ldd	r24, Z+1	; 0x01
    7d9e:	89 83       	std	Y+1, r24	; 0x01
    7da0:	82 81       	ldd	r24, Z+2	; 0x02
    7da2:	93 81       	ldd	r25, Z+3	; 0x03
    7da4:	9b 83       	std	Y+3, r25	; 0x03
    7da6:	8a 83       	std	Y+2, r24	; 0x02
    7da8:	84 e6       	ldi	r24, 0x64	; 100
    7daa:	9c e0       	ldi	r25, 0x0C	; 12
    7dac:	9d 83       	std	Y+5, r25	; 0x05
    7dae:	8c 83       	std	Y+4, r24	; 0x04
    7db0:	d8 01       	movw	r26, r16
    7db2:	aa 5b       	subi	r26, 0xBA	; 186
    7db4:	bd 4f       	sbci	r27, 0xFD	; 253
    7db6:	12 96       	adiw	r26, 0x02	; 2
    7db8:	4d 91       	ld	r20, X+
    7dba:	5d 91       	ld	r21, X+
    7dbc:	6d 91       	ld	r22, X+
    7dbe:	7c 91       	ld	r23, X
    7dc0:	15 97       	sbiw	r26, 0x05	; 5
    7dc2:	4e 83       	std	Y+6, r20	; 0x06
    7dc4:	5f 83       	std	Y+7, r21	; 0x07
    7dc6:	68 87       	std	Y+8, r22	; 0x08
    7dc8:	79 87       	std	Y+9, r23	; 0x09
    7dca:	82 85       	ldd	r24, Z+10	; 0x0a
    7dcc:	93 85       	ldd	r25, Z+11	; 0x0b
    7dce:	9b 87       	std	Y+11, r25	; 0x0b
    7dd0:	8a 87       	std	Y+10, r24	; 0x0a
    7dd2:	09 c0       	rjmp	.+18     	; 0x7de6 <_ZN6GSCore14getFrameHeaderEh+0xc2>
    7dd4:	8c e0       	ldi	r24, 0x0C	; 12
    7dd6:	fe 01       	movw	r30, r28
    7dd8:	11 92       	st	Z+, r1
    7dda:	8a 95       	dec	r24
    7ddc:	e9 f7       	brne	.-6      	; 0x7dd8 <_ZN6GSCore14getFrameHeaderEh+0xb4>
    7dde:	ce 01       	movw	r24, r28
    7de0:	04 96       	adiw	r24, 0x04	; 4
    7de2:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <_ZN9IPAddressC1Ev>
    7de6:	ce 01       	movw	r24, r28
    7de8:	df 91       	pop	r29
    7dea:	cf 91       	pop	r28
    7dec:	1f 91       	pop	r17
    7dee:	0f 91       	pop	r16
    7df0:	ff 90       	pop	r15
    7df2:	ef 90       	pop	r14
    7df4:	df 90       	pop	r13
    7df6:	08 95       	ret

00007df8 <_ZN6GSCore8readDataEh>:
    7df8:	0f 93       	push	r16
    7dfa:	1f 93       	push	r17
    7dfc:	cf 93       	push	r28
    7dfe:	df 93       	push	r29
    7e00:	cd b7       	in	r28, 0x3d	; 61
    7e02:	de b7       	in	r29, 0x3e	; 62
    7e04:	2c 97       	sbiw	r28, 0x0c	; 12
    7e06:	0f b6       	in	r0, 0x3f	; 63
    7e08:	f8 94       	cli
    7e0a:	de bf       	out	0x3e, r29	; 62
    7e0c:	0f be       	out	0x3f, r0	; 63
    7e0e:	cd bf       	out	0x3d, r28	; 61
    7e10:	8c 01       	movw	r16, r24
    7e12:	46 2f       	mov	r20, r22
    7e14:	bc 01       	movw	r22, r24
    7e16:	ce 01       	movw	r24, r28
    7e18:	01 96       	adiw	r24, 0x01	; 1
    7e1a:	84 df       	rcall	.-248    	; 0x7d24 <_ZN6GSCore14getFrameHeaderEh>
    7e1c:	8b 81       	ldd	r24, Y+3	; 0x03
    7e1e:	9c 81       	ldd	r25, Y+4	; 0x04
    7e20:	89 2b       	or	r24, r25
    7e22:	19 f0       	breq	.+6      	; 0x7e2a <_ZN6GSCore8readDataEh+0x32>
    7e24:	c8 01       	movw	r24, r16
    7e26:	ce d9       	rcall	.-3172   	; 0x71c4 <_ZN6GSCore7getDataEv>
    7e28:	02 c0       	rjmp	.+4      	; 0x7e2e <_ZN6GSCore8readDataEh+0x36>
    7e2a:	8f ef       	ldi	r24, 0xFF	; 255
    7e2c:	9f ef       	ldi	r25, 0xFF	; 255
    7e2e:	2c 96       	adiw	r28, 0x0c	; 12
    7e30:	0f b6       	in	r0, 0x3f	; 63
    7e32:	f8 94       	cli
    7e34:	de bf       	out	0x3e, r29	; 62
    7e36:	0f be       	out	0x3f, r0	; 63
    7e38:	cd bf       	out	0x3d, r28	; 61
    7e3a:	df 91       	pop	r29
    7e3c:	cf 91       	pop	r28
    7e3e:	1f 91       	pop	r17
    7e40:	0f 91       	pop	r16
    7e42:	08 95       	ret

00007e44 <_ZN6GSCore8readDataEhPhj>:
    7e44:	5f 92       	push	r5
    7e46:	6f 92       	push	r6
    7e48:	7f 92       	push	r7
    7e4a:	8f 92       	push	r8
    7e4c:	9f 92       	push	r9
    7e4e:	af 92       	push	r10
    7e50:	bf 92       	push	r11
    7e52:	cf 92       	push	r12
    7e54:	df 92       	push	r13
    7e56:	ef 92       	push	r14
    7e58:	ff 92       	push	r15
    7e5a:	0f 93       	push	r16
    7e5c:	1f 93       	push	r17
    7e5e:	cf 93       	push	r28
    7e60:	df 93       	push	r29
    7e62:	cd b7       	in	r28, 0x3d	; 61
    7e64:	de b7       	in	r29, 0x3e	; 62
    7e66:	2c 97       	sbiw	r28, 0x0c	; 12
    7e68:	0f b6       	in	r0, 0x3f	; 63
    7e6a:	f8 94       	cli
    7e6c:	de bf       	out	0x3e, r29	; 62
    7e6e:	0f be       	out	0x3f, r0	; 63
    7e70:	cd bf       	out	0x3d, r28	; 61
    7e72:	7c 01       	movw	r14, r24
    7e74:	56 2e       	mov	r5, r22
    7e76:	5a 01       	movw	r10, r20
    7e78:	69 01       	movw	r12, r18
    7e7a:	46 2f       	mov	r20, r22
    7e7c:	bc 01       	movw	r22, r24
    7e7e:	ce 01       	movw	r24, r28
    7e80:	01 96       	adiw	r24, 0x01	; 1
    7e82:	50 df       	rcall	.-352    	; 0x7d24 <_ZN6GSCore14getFrameHeaderEh>
    7e84:	8b 81       	ldd	r24, Y+3	; 0x03
    7e86:	9c 81       	ldd	r25, Y+4	; 0x04
    7e88:	89 2b       	or	r24, r25
    7e8a:	09 f4       	brne	.+2      	; 0x7e8e <_ZN6GSCore8readDataEhPhj+0x4a>
    7e8c:	7e c0       	rjmp	.+252    	; 0x7f8a <_ZN6GSCore8readDataEhPhj+0x146>
    7e8e:	37 01       	movw	r6, r14
    7e90:	2c ec       	ldi	r18, 0xCC	; 204
    7e92:	62 1a       	sub	r6, r18
    7e94:	2d ef       	ldi	r18, 0xFD	; 253
    7e96:	72 0a       	sbc	r7, r18
    7e98:	f3 01       	movw	r30, r6
    7e9a:	60 81       	ld	r22, Z
    7e9c:	71 81       	ldd	r23, Z+1	; 0x01
    7e9e:	32 97       	sbiw	r30, 0x02	; 2
    7ea0:	80 81       	ld	r24, Z
    7ea2:	91 81       	ldd	r25, Z+1	; 0x01
    7ea4:	68 17       	cp	r22, r24
    7ea6:	79 07       	cpc	r23, r25
    7ea8:	09 f4       	brne	.+2      	; 0x7eac <_ZN6GSCore8readDataEhPhj+0x68>
    7eaa:	42 c0       	rjmp	.+132    	; 0x7f30 <_ZN6GSCore8readDataEhPhj+0xec>
    7eac:	68 17       	cp	r22, r24
    7eae:	79 07       	cpc	r23, r25
    7eb0:	10 f0       	brcs	.+4      	; 0x7eb6 <_ZN6GSCore8readDataEhPhj+0x72>
    7eb2:	80 e0       	ldi	r24, 0x00	; 0
    7eb4:	92 e0       	ldi	r25, 0x02	; 2
    7eb6:	86 1b       	sub	r24, r22
    7eb8:	97 0b       	sbc	r25, r23
    7eba:	47 01       	movw	r8, r14
    7ebc:	fc eb       	ldi	r31, 0xBC	; 188
    7ebe:	8f 1a       	sub	r8, r31
    7ec0:	fd ef       	ldi	r31, 0xFD	; 253
    7ec2:	9f 0a       	sbc	r9, r31
    7ec4:	f4 01       	movw	r30, r8
    7ec6:	20 81       	ld	r18, Z
    7ec8:	31 81       	ldd	r19, Z+1	; 0x01
    7eca:	5c 2d       	mov	r21, r12
    7ecc:	4d 2d       	mov	r20, r13
    7ece:	2c 15       	cp	r18, r12
    7ed0:	3d 05       	cpc	r19, r13
    7ed2:	10 f4       	brcc	.+4      	; 0x7ed8 <_ZN6GSCore8readDataEhPhj+0x94>
    7ed4:	52 2f       	mov	r21, r18
    7ed6:	43 2f       	mov	r20, r19
    7ed8:	05 2f       	mov	r16, r21
    7eda:	14 2f       	mov	r17, r20
    7edc:	80 17       	cp	r24, r16
    7ede:	91 07       	cpc	r25, r17
    7ee0:	08 f4       	brcc	.+2      	; 0x7ee4 <_ZN6GSCore8readDataEhPhj+0xa0>
    7ee2:	8c 01       	movw	r16, r24
    7ee4:	6f 5c       	subi	r22, 0xCF	; 207
    7ee6:	7f 4f       	sbci	r23, 0xFF	; 255
    7ee8:	6e 0d       	add	r22, r14
    7eea:	7f 1d       	adc	r23, r15
    7eec:	a8 01       	movw	r20, r16
    7eee:	c5 01       	movw	r24, r10
    7ef0:	0e 94 42 b5 	call	0x16a84	; 0x16a84 <memcpy>
    7ef4:	f3 01       	movw	r30, r6
    7ef6:	80 81       	ld	r24, Z
    7ef8:	91 81       	ldd	r25, Z+1	; 0x01
    7efa:	80 0f       	add	r24, r16
    7efc:	91 1f       	adc	r25, r17
    7efe:	91 70       	andi	r25, 0x01	; 1
    7f00:	91 83       	std	Z+1, r25	; 0x01
    7f02:	80 83       	st	Z, r24
    7f04:	f4 01       	movw	r30, r8
    7f06:	80 81       	ld	r24, Z
    7f08:	91 81       	ldd	r25, Z+1	; 0x01
    7f0a:	80 1b       	sub	r24, r16
    7f0c:	91 0b       	sbc	r25, r17
    7f0e:	91 83       	std	Z+1, r25	; 0x01
    7f10:	80 83       	st	Z, r24
    7f12:	0c 15       	cp	r16, r12
    7f14:	1d 05       	cpc	r17, r13
    7f16:	e1 f1       	breq	.+120    	; 0x7f90 <_ZN6GSCore8readDataEhPhj+0x14c>
    7f18:	96 01       	movw	r18, r12
    7f1a:	20 1b       	sub	r18, r16
    7f1c:	31 0b       	sbc	r19, r17
    7f1e:	a5 01       	movw	r20, r10
    7f20:	40 0f       	add	r20, r16
    7f22:	51 1f       	adc	r21, r17
    7f24:	65 2d       	mov	r22, r5
    7f26:	c7 01       	movw	r24, r14
    7f28:	8d df       	rcall	.-230    	; 0x7e44 <_ZN6GSCore8readDataEhPhj>
    7f2a:	80 0f       	add	r24, r16
    7f2c:	91 1f       	adc	r25, r17
    7f2e:	31 c0       	rjmp	.+98     	; 0x7f92 <_ZN6GSCore8readDataEhPhj+0x14e>
    7f30:	00 e0       	ldi	r16, 0x00	; 0
    7f32:	10 e0       	ldi	r17, 0x00	; 0
    7f34:	47 01       	movw	r8, r14
    7f36:	fc eb       	ldi	r31, 0xBC	; 188
    7f38:	8f 1a       	sub	r8, r31
    7f3a:	fd ef       	ldi	r31, 0xFD	; 253
    7f3c:	9f 0a       	sbc	r9, r31
    7f3e:	37 01       	movw	r6, r14
    7f40:	28 ec       	ldi	r18, 0xC8	; 200
    7f42:	62 1a       	sub	r6, r18
    7f44:	2d ef       	ldi	r18, 0xFD	; 253
    7f46:	72 0a       	sbc	r7, r18
    7f48:	0c 15       	cp	r16, r12
    7f4a:	1d 05       	cpc	r17, r13
    7f4c:	09 f1       	breq	.+66     	; 0x7f90 <_ZN6GSCore8readDataEhPhj+0x14c>
    7f4e:	c7 01       	movw	r24, r14
    7f50:	a7 d8       	rcall	.-3762   	; 0x70a0 <_ZN6GSCore7readRawEv>
    7f52:	8f 3f       	cpi	r24, 0xFF	; 255
    7f54:	ff ef       	ldi	r31, 0xFF	; 255
    7f56:	9f 07       	cpc	r25, r31
    7f58:	d9 f0       	breq	.+54     	; 0x7f90 <_ZN6GSCore8readDataEhPhj+0x14c>
    7f5a:	0f 5f       	subi	r16, 0xFF	; 255
    7f5c:	1f 4f       	sbci	r17, 0xFF	; 255
    7f5e:	f5 01       	movw	r30, r10
    7f60:	81 93       	st	Z+, r24
    7f62:	5f 01       	movw	r10, r30
    7f64:	f4 01       	movw	r30, r8
    7f66:	80 81       	ld	r24, Z
    7f68:	91 81       	ldd	r25, Z+1	; 0x01
    7f6a:	01 97       	sbiw	r24, 0x01	; 1
    7f6c:	91 83       	std	Z+1, r25	; 0x01
    7f6e:	80 83       	st	Z, r24
    7f70:	f3 01       	movw	r30, r6
    7f72:	80 81       	ld	r24, Z
    7f74:	91 81       	ldd	r25, Z+1	; 0x01
    7f76:	01 97       	sbiw	r24, 0x01	; 1
    7f78:	91 83       	std	Z+1, r25	; 0x01
    7f7a:	80 83       	st	Z, r24
    7f7c:	89 2b       	or	r24, r25
    7f7e:	21 f7       	brne	.-56     	; 0x7f48 <_ZN6GSCore8readDataEhPhj+0x104>
    7f80:	f7 01       	movw	r30, r14
    7f82:	ef 5c       	subi	r30, 0xCF	; 207
    7f84:	fd 4f       	sbci	r31, 0xFD	; 253
    7f86:	10 82       	st	Z, r1
    7f88:	03 c0       	rjmp	.+6      	; 0x7f90 <_ZN6GSCore8readDataEhPhj+0x14c>
    7f8a:	80 e0       	ldi	r24, 0x00	; 0
    7f8c:	90 e0       	ldi	r25, 0x00	; 0
    7f8e:	01 c0       	rjmp	.+2      	; 0x7f92 <_ZN6GSCore8readDataEhPhj+0x14e>
    7f90:	c8 01       	movw	r24, r16
    7f92:	2c 96       	adiw	r28, 0x0c	; 12
    7f94:	0f b6       	in	r0, 0x3f	; 63
    7f96:	f8 94       	cli
    7f98:	de bf       	out	0x3e, r29	; 62
    7f9a:	0f be       	out	0x3f, r0	; 63
    7f9c:	cd bf       	out	0x3d, r28	; 61
    7f9e:	df 91       	pop	r29
    7fa0:	cf 91       	pop	r28
    7fa2:	1f 91       	pop	r17
    7fa4:	0f 91       	pop	r16
    7fa6:	ff 90       	pop	r15
    7fa8:	ef 90       	pop	r14
    7faa:	df 90       	pop	r13
    7fac:	cf 90       	pop	r12
    7fae:	bf 90       	pop	r11
    7fb0:	af 90       	pop	r10
    7fb2:	9f 90       	pop	r9
    7fb4:	8f 90       	pop	r8
    7fb6:	7f 90       	pop	r7
    7fb8:	6f 90       	pop	r6
    7fba:	5f 90       	pop	r5
    7fbc:	08 95       	ret

00007fbe <_ZN6GSCore8readDataEPh>:
    7fbe:	ef 92       	push	r14
    7fc0:	ff 92       	push	r15
    7fc2:	0f 93       	push	r16
    7fc4:	1f 93       	push	r17
    7fc6:	cf 93       	push	r28
    7fc8:	df 93       	push	r29
    7fca:	cd b7       	in	r28, 0x3d	; 61
    7fcc:	de b7       	in	r29, 0x3e	; 62
    7fce:	2c 97       	sbiw	r28, 0x0c	; 12
    7fd0:	0f b6       	in	r0, 0x3f	; 63
    7fd2:	f8 94       	cli
    7fd4:	de bf       	out	0x3e, r29	; 62
    7fd6:	0f be       	out	0x3f, r0	; 63
    7fd8:	cd bf       	out	0x3d, r28	; 61
    7fda:	8c 01       	movw	r16, r24
    7fdc:	7b 01       	movw	r14, r22
    7fde:	4e ef       	ldi	r20, 0xFE	; 254
    7fe0:	bc 01       	movw	r22, r24
    7fe2:	ce 01       	movw	r24, r28
    7fe4:	01 96       	adiw	r24, 0x01	; 1
    7fe6:	9e de       	rcall	.-708    	; 0x7d24 <_ZN6GSCore14getFrameHeaderEh>
    7fe8:	8b 81       	ldd	r24, Y+3	; 0x03
    7fea:	9c 81       	ldd	r25, Y+4	; 0x04
    7fec:	89 2b       	or	r24, r25
    7fee:	61 f0       	breq	.+24     	; 0x8008 <_ZN6GSCore8readDataEPh+0x4a>
    7ff0:	c8 01       	movw	r24, r16
    7ff2:	e8 d8       	rcall	.-3632   	; 0x71c4 <_ZN6GSCore7getDataEv>
    7ff4:	9c 01       	movw	r18, r24
    7ff6:	97 fd       	sbrc	r25, 7
    7ff8:	0a c0       	rjmp	.+20     	; 0x800e <_ZN6GSCore8readDataEPh+0x50>
    7ffa:	f8 01       	movw	r30, r16
    7ffc:	ed 5b       	subi	r30, 0xBD	; 189
    7ffe:	fd 4f       	sbci	r31, 0xFD	; 253
    8000:	80 81       	ld	r24, Z
    8002:	f7 01       	movw	r30, r14
    8004:	80 83       	st	Z, r24
    8006:	03 c0       	rjmp	.+6      	; 0x800e <_ZN6GSCore8readDataEPh+0x50>
    8008:	8f ef       	ldi	r24, 0xFF	; 255
    800a:	9f ef       	ldi	r25, 0xFF	; 255
    800c:	01 c0       	rjmp	.+2      	; 0x8010 <_ZN6GSCore8readDataEPh+0x52>
    800e:	c9 01       	movw	r24, r18
    8010:	2c 96       	adiw	r28, 0x0c	; 12
    8012:	0f b6       	in	r0, 0x3f	; 63
    8014:	f8 94       	cli
    8016:	de bf       	out	0x3e, r29	; 62
    8018:	0f be       	out	0x3f, r0	; 63
    801a:	cd bf       	out	0x3d, r28	; 61
    801c:	df 91       	pop	r29
    801e:	cf 91       	pop	r28
    8020:	1f 91       	pop	r17
    8022:	0f 91       	pop	r16
    8024:	ff 90       	pop	r15
    8026:	ef 90       	pop	r14
    8028:	08 95       	ret

0000802a <_ZN6GSCore8dropDataEh>:
    802a:	ef 92       	push	r14
    802c:	ff 92       	push	r15
    802e:	0f 93       	push	r16
    8030:	1f 93       	push	r17
    8032:	cf 93       	push	r28
    8034:	df 93       	push	r29
    8036:	1f 92       	push	r1
    8038:	cd b7       	in	r28, 0x3d	; 61
    803a:	de b7       	in	r29, 0x3e	; 62
    803c:	8c 01       	movw	r16, r24
    803e:	f6 2e       	mov	r15, r22
    8040:	29 e0       	ldi	r18, 0x09	; 9
    8042:	e2 2e       	mov	r14, r18
    8044:	ff 20       	and	r15, r15
    8046:	09 f1       	breq	.+66     	; 0x808a <_ZN6GSCore8dropDataEh+0x60>
    8048:	be 01       	movw	r22, r28
    804a:	6f 5f       	subi	r22, 0xFF	; 255
    804c:	7f 4f       	sbci	r23, 0xFF	; 255
    804e:	c8 01       	movw	r24, r16
    8050:	b6 df       	rcall	.-148    	; 0x7fbe <_ZN6GSCore8readDataEPh>
    8052:	97 fd       	sbrc	r25, 7
    8054:	18 c0       	rjmp	.+48     	; 0x8086 <_ZN6GSCore8dropDataEh+0x5c>
    8056:	61 e3       	ldi	r22, 0x31	; 49
    8058:	7e e0       	ldi	r23, 0x0E	; 14
    805a:	84 e0       	ldi	r24, 0x04	; 4
    805c:	94 e2       	ldi	r25, 0x24	; 36
    805e:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_ZN5Print5printEPKc>
    8062:	4a e0       	ldi	r20, 0x0A	; 10
    8064:	50 e0       	ldi	r21, 0x00	; 0
    8066:	69 81       	ldd	r22, Y+1	; 0x01
    8068:	84 e0       	ldi	r24, 0x04	; 4
    806a:	94 e2       	ldi	r25, 0x24	; 36
    806c:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <_ZN5Print7printlnEhi>
    8070:	89 81       	ldd	r24, Y+1	; 0x01
    8072:	f8 01       	movw	r30, r16
    8074:	e8 9e       	mul	r14, r24
    8076:	e0 0d       	add	r30, r0
    8078:	f1 1d       	adc	r31, r1
    807a:	11 24       	eor	r1, r1
    807c:	e2 5b       	subi	r30, 0xB2	; 178
    807e:	fd 4f       	sbci	r31, 0xFD	; 253
    8080:	80 81       	ld	r24, Z
    8082:	84 60       	ori	r24, 0x04	; 4
    8084:	80 83       	st	Z, r24
    8086:	fa 94       	dec	r15
    8088:	dd cf       	rjmp	.-70     	; 0x8044 <_ZN6GSCore8dropDataEh+0x1a>
    808a:	0f 90       	pop	r0
    808c:	df 91       	pop	r29
    808e:	cf 91       	pop	r28
    8090:	1f 91       	pop	r17
    8092:	0f 91       	pop	r16
    8094:	ff 90       	pop	r15
    8096:	ef 90       	pop	r14
    8098:	08 95       	ret

0000809a <_ZN6GSCore18bufferIncomingDataEh>:
    809a:	df 92       	push	r13
    809c:	ef 92       	push	r14
    809e:	ff 92       	push	r15
    80a0:	0f 93       	push	r16
    80a2:	1f 93       	push	r17
    80a4:	cf 93       	push	r28
    80a6:	df 93       	push	r29
    80a8:	8c 01       	movw	r16, r24
    80aa:	d6 2e       	mov	r13, r22
    80ac:	7c 01       	movw	r14, r24
    80ae:	8e ec       	ldi	r24, 0xCE	; 206
    80b0:	e8 1a       	sub	r14, r24
    80b2:	8d ef       	ldi	r24, 0xFD	; 253
    80b4:	f8 0a       	sbc	r15, r24
    80b6:	d7 01       	movw	r26, r14
    80b8:	cd 91       	ld	r28, X+
    80ba:	dc 91       	ld	r29, X
    80bc:	21 96       	adiw	r28, 0x01	; 1
    80be:	d1 70       	andi	r29, 0x01	; 1
    80c0:	f8 01       	movw	r30, r16
    80c2:	ec 5c       	subi	r30, 0xCC	; 204
    80c4:	fd 4f       	sbci	r31, 0xFD	; 253
    80c6:	80 81       	ld	r24, Z
    80c8:	91 81       	ldd	r25, Z+1	; 0x01
    80ca:	c8 17       	cp	r28, r24
    80cc:	d9 07       	cpc	r29, r25
    80ce:	19 f4       	brne	.+6      	; 0x80d6 <_ZN6GSCore18bufferIncomingDataEh+0x3c>
    80d0:	61 e0       	ldi	r22, 0x01	; 1
    80d2:	c8 01       	movw	r24, r16
    80d4:	aa df       	rcall	.-172    	; 0x802a <_ZN6GSCore8dropDataEh>
    80d6:	d7 01       	movw	r26, r14
    80d8:	ed 91       	ld	r30, X+
    80da:	fc 91       	ld	r31, X
    80dc:	11 97       	sbiw	r26, 0x01	; 1
    80de:	e0 0f       	add	r30, r16
    80e0:	f1 1f       	adc	r31, r17
    80e2:	d1 aa       	std	Z+49, r13	; 0x31
    80e4:	cd 93       	st	X+, r28
    80e6:	dc 93       	st	X, r29
    80e8:	df 91       	pop	r29
    80ea:	cf 91       	pop	r28
    80ec:	1f 91       	pop	r17
    80ee:	0f 91       	pop	r16
    80f0:	ff 90       	pop	r15
    80f2:	ef 90       	pop	r14
    80f4:	df 90       	pop	r13
    80f6:	08 95       	ret

000080f8 <_ZN6GSCore17bufferFrameHeaderEPKNS_7RXFrameE>:
    80f8:	cf 92       	push	r12
    80fa:	df 92       	push	r13
    80fc:	ef 92       	push	r14
    80fe:	ff 92       	push	r15
    8100:	0f 93       	push	r16
    8102:	1f 93       	push	r17
    8104:	cf 93       	push	r28
    8106:	df 93       	push	r29
    8108:	ec 01       	movw	r28, r24
    810a:	6b 01       	movw	r12, r22
    810c:	8c 01       	movw	r16, r24
    810e:	0e 5c       	subi	r16, 0xCE	; 206
    8110:	1d 4f       	sbci	r17, 0xFD	; 253
    8112:	d8 01       	movw	r26, r16
    8114:	8d 91       	ld	r24, X+
    8116:	9c 91       	ld	r25, X
    8118:	7e 01       	movw	r14, r28
    811a:	bc ec       	ldi	r27, 0xCC	; 204
    811c:	eb 1a       	sub	r14, r27
    811e:	bd ef       	ldi	r27, 0xFD	; 253
    8120:	fb 0a       	sbc	r15, r27
    8122:	f7 01       	movw	r30, r14
    8124:	20 81       	ld	r18, Z
    8126:	31 81       	ldd	r19, Z+1	; 0x01
    8128:	82 17       	cp	r24, r18
    812a:	93 07       	cpc	r25, r19
    812c:	39 f5       	brne	.+78     	; 0x817c <_ZN6GSCore17bufferFrameHeaderEPKNS_7RXFrameE+0x84>
    812e:	3e 96       	adiw	r30, 0x0e	; 14
    8130:	9e 01       	movw	r18, r28
    8132:	2a 5c       	subi	r18, 0xCA	; 202
    8134:	3d 4f       	sbci	r19, 0xFD	; 253
    8136:	d9 01       	movw	r26, r18
    8138:	8c 91       	ld	r24, X
    813a:	80 83       	st	Z, r24
    813c:	11 96       	adiw	r26, 0x01	; 1
    813e:	8c 91       	ld	r24, X
    8140:	11 97       	sbiw	r26, 0x01	; 1
    8142:	81 83       	std	Z+1, r24	; 0x01
    8144:	12 96       	adiw	r26, 0x02	; 2
    8146:	8d 91       	ld	r24, X+
    8148:	9c 91       	ld	r25, X
    814a:	13 97       	sbiw	r26, 0x03	; 3
    814c:	93 83       	std	Z+3, r25	; 0x03
    814e:	82 83       	std	Z+2, r24	; 0x02
    8150:	ae 01       	movw	r20, r28
    8152:	4a 5b       	subi	r20, 0xBA	; 186
    8154:	5d 4f       	sbci	r21, 0xFD	; 253
    8156:	c6 5c       	subi	r28, 0xC6	; 198
    8158:	dd 4f       	sbci	r29, 0xFD	; 253
    815a:	8a 81       	ldd	r24, Y+2	; 0x02
    815c:	9b 81       	ldd	r25, Y+3	; 0x03
    815e:	ac 81       	ldd	r26, Y+4	; 0x04
    8160:	bd 81       	ldd	r27, Y+5	; 0x05
    8162:	ea 01       	movw	r28, r20
    8164:	8a 83       	std	Y+2, r24	; 0x02
    8166:	9b 83       	std	Y+3, r25	; 0x03
    8168:	ac 83       	std	Y+4, r26	; 0x04
    816a:	bd 83       	std	Y+5, r27	; 0x05
    816c:	d9 01       	movw	r26, r18
    816e:	1a 96       	adiw	r26, 0x0a	; 10
    8170:	8d 91       	ld	r24, X+
    8172:	9c 91       	ld	r25, X
    8174:	1b 97       	sbiw	r26, 0x0b	; 11
    8176:	93 87       	std	Z+11, r25	; 0x0b
    8178:	82 87       	std	Z+10, r24	; 0x0a
    817a:	37 c0       	rjmp	.+110    	; 0x81ea <_ZN6GSCore17bufferFrameHeaderEPKNS_7RXFrameE+0xf2>
    817c:	85 3f       	cpi	r24, 0xF5	; 245
    817e:	b1 e0       	ldi	r27, 0x01	; 1
    8180:	9b 07       	cpc	r25, r27
    8182:	88 f0       	brcs	.+34     	; 0x81a6 <_ZN6GSCore17bufferFrameHeaderEPKNS_7RXFrameE+0xae>
    8184:	82 17       	cp	r24, r18
    8186:	93 07       	cpc	r25, r19
    8188:	18 f4       	brcc	.+6      	; 0x8190 <_ZN6GSCore17bufferFrameHeaderEPKNS_7RXFrameE+0x98>
    818a:	60 e0       	ldi	r22, 0x00	; 0
    818c:	ce 01       	movw	r24, r28
    818e:	4d df       	rcall	.-358    	; 0x802a <_ZN6GSCore8dropDataEh>
    8190:	f7 01       	movw	r30, r14
    8192:	80 81       	ld	r24, Z
    8194:	91 81       	ldd	r25, Z+1	; 0x01
    8196:	89 2b       	or	r24, r25
    8198:	19 f4       	brne	.+6      	; 0x81a0 <_ZN6GSCore17bufferFrameHeaderEPKNS_7RXFrameE+0xa8>
    819a:	61 e0       	ldi	r22, 0x01	; 1
    819c:	ce 01       	movw	r24, r28
    819e:	45 df       	rcall	.-374    	; 0x802a <_ZN6GSCore8dropDataEh>
    81a0:	d8 01       	movw	r26, r16
    81a2:	1d 92       	st	X+, r1
    81a4:	1c 92       	st	X, r1
    81a6:	f7 01       	movw	r30, r14
    81a8:	80 81       	ld	r24, Z
    81aa:	91 81       	ldd	r25, Z+1	; 0x01
    81ac:	01 97       	sbiw	r24, 0x01	; 1
    81ae:	d8 01       	movw	r26, r16
    81b0:	2d 91       	ld	r18, X+
    81b2:	3c 91       	ld	r19, X
    81b4:	82 1b       	sub	r24, r18
    81b6:	93 0b       	sbc	r25, r19
    81b8:	8c 30       	cpi	r24, 0x0C	; 12
    81ba:	20 f4       	brcc	.+8      	; 0x81c4 <_ZN6GSCore17bufferFrameHeaderEPKNS_7RXFrameE+0xcc>
    81bc:	6c e0       	ldi	r22, 0x0C	; 12
    81be:	68 1b       	sub	r22, r24
    81c0:	ce 01       	movw	r24, r28
    81c2:	33 df       	rcall	.-410    	; 0x802a <_ZN6GSCore8dropDataEh>
    81c4:	f8 01       	movw	r30, r16
    81c6:	a0 81       	ld	r26, Z
    81c8:	b1 81       	ldd	r27, Z+1	; 0x01
    81ca:	d1 96       	adiw	r26, 0x31	; 49
    81cc:	ac 0f       	add	r26, r28
    81ce:	bd 1f       	adc	r27, r29
    81d0:	8c e0       	ldi	r24, 0x0C	; 12
    81d2:	f6 01       	movw	r30, r12
    81d4:	01 90       	ld	r0, Z+
    81d6:	0d 92       	st	X+, r0
    81d8:	8a 95       	dec	r24
    81da:	e1 f7       	brne	.-8      	; 0x81d4 <_ZN6GSCore17bufferFrameHeaderEPKNS_7RXFrameE+0xdc>
    81dc:	d8 01       	movw	r26, r16
    81de:	8d 91       	ld	r24, X+
    81e0:	9c 91       	ld	r25, X
    81e2:	11 97       	sbiw	r26, 0x01	; 1
    81e4:	0c 96       	adiw	r24, 0x0c	; 12
    81e6:	8d 93       	st	X+, r24
    81e8:	9c 93       	st	X, r25
    81ea:	df 91       	pop	r29
    81ec:	cf 91       	pop	r28
    81ee:	1f 91       	pop	r17
    81f0:	0f 91       	pop	r16
    81f2:	ff 90       	pop	r15
    81f4:	ef 90       	pop	r14
    81f6:	df 90       	pop	r13
    81f8:	cf 90       	pop	r12
    81fa:	08 95       	ret

000081fc <_ZN6GSCore13availableDataEh>:
    81fc:	cf 92       	push	r12
    81fe:	df 92       	push	r13
    8200:	ef 92       	push	r14
    8202:	ff 92       	push	r15
    8204:	0f 93       	push	r16
    8206:	1f 93       	push	r17
    8208:	cf 93       	push	r28
    820a:	df 93       	push	r29
    820c:	cd b7       	in	r28, 0x3d	; 61
    820e:	de b7       	in	r29, 0x3e	; 62
    8210:	2c 97       	sbiw	r28, 0x0c	; 12
    8212:	0f b6       	in	r0, 0x3f	; 63
    8214:	f8 94       	cli
    8216:	de bf       	out	0x3e, r29	; 62
    8218:	0f be       	out	0x3f, r0	; 63
    821a:	cd bf       	out	0x3d, r28	; 61
    821c:	8c 01       	movw	r16, r24
    821e:	46 2f       	mov	r20, r22
    8220:	bc 01       	movw	r22, r24
    8222:	ce 01       	movw	r24, r28
    8224:	01 96       	adiw	r24, 0x01	; 1
    8226:	7e dd       	rcall	.-1284   	; 0x7d24 <_ZN6GSCore14getFrameHeaderEh>
    8228:	8b 81       	ldd	r24, Y+3	; 0x03
    822a:	9c 81       	ldd	r25, Y+4	; 0x04
    822c:	89 2b       	or	r24, r25
    822e:	61 f1       	breq	.+88     	; 0x8288 <__stack+0x89>
    8230:	68 01       	movw	r12, r16
    8232:	8e ec       	ldi	r24, 0xCE	; 206
    8234:	c8 1a       	sub	r12, r24
    8236:	8d ef       	ldi	r24, 0xFD	; 253
    8238:	d8 0a       	sbc	r13, r24
    823a:	78 01       	movw	r14, r16
    823c:	ec ec       	ldi	r30, 0xCC	; 204
    823e:	ee 1a       	sub	r14, r30
    8240:	ed ef       	ldi	r30, 0xFD	; 253
    8242:	fe 0a       	sbc	r15, r30
    8244:	f6 01       	movw	r30, r12
    8246:	20 81       	ld	r18, Z
    8248:	31 81       	ldd	r19, Z+1	; 0x01
    824a:	f7 01       	movw	r30, r14
    824c:	80 81       	ld	r24, Z
    824e:	91 81       	ldd	r25, Z+1	; 0x01
    8250:	28 17       	cp	r18, r24
    8252:	39 07       	cpc	r19, r25
    8254:	31 f4       	brne	.+12     	; 0x8262 <__stack+0x63>
    8256:	c8 01       	movw	r24, r16
    8258:	0e 94 50 38 	call	0x70a0	; 0x70a0 <_ZN6GSCore7readRawEv>
    825c:	bc 01       	movw	r22, r24
    825e:	c8 01       	movw	r24, r16
    8260:	0c da       	rcall	.-3048   	; 0x767a <_ZN6GSCore15processIncomingEi>
    8262:	f6 01       	movw	r30, r12
    8264:	20 81       	ld	r18, Z
    8266:	31 81       	ldd	r19, Z+1	; 0x01
    8268:	f7 01       	movw	r30, r14
    826a:	80 81       	ld	r24, Z
    826c:	91 81       	ldd	r25, Z+1	; 0x01
    826e:	28 1b       	sub	r18, r24
    8270:	39 0b       	sbc	r19, r25
    8272:	f8 01       	movw	r30, r16
    8274:	ec 5b       	subi	r30, 0xBC	; 188
    8276:	fd 4f       	sbci	r31, 0xFD	; 253
    8278:	80 81       	ld	r24, Z
    827a:	91 81       	ldd	r25, Z+1	; 0x01
    827c:	31 70       	andi	r19, 0x01	; 1
    827e:	82 17       	cp	r24, r18
    8280:	93 07       	cpc	r25, r19
    8282:	20 f4       	brcc	.+8      	; 0x828c <__stack+0x8d>
    8284:	9c 01       	movw	r18, r24
    8286:	02 c0       	rjmp	.+4      	; 0x828c <__stack+0x8d>
    8288:	20 e0       	ldi	r18, 0x00	; 0
    828a:	30 e0       	ldi	r19, 0x00	; 0
    828c:	c9 01       	movw	r24, r18
    828e:	2c 96       	adiw	r28, 0x0c	; 12
    8290:	0f b6       	in	r0, 0x3f	; 63
    8292:	f8 94       	cli
    8294:	de bf       	out	0x3e, r29	; 62
    8296:	0f be       	out	0x3f, r0	; 63
    8298:	cd bf       	out	0x3d, r28	; 61
    829a:	df 91       	pop	r29
    829c:	cf 91       	pop	r28
    829e:	1f 91       	pop	r17
    82a0:	0f 91       	pop	r16
    82a2:	ff 90       	pop	r15
    82a4:	ef 90       	pop	r14
    82a6:	df 90       	pop	r13
    82a8:	cf 90       	pop	r12
    82aa:	08 95       	ret

000082ac <_ZN6GSCore8peekDataEh>:
    82ac:	cf 93       	push	r28
    82ae:	df 93       	push	r29
    82b0:	ec 01       	movw	r28, r24
    82b2:	a4 df       	rcall	.-184    	; 0x81fc <_ZN6GSCore13availableDataEh>
    82b4:	89 2b       	or	r24, r25
    82b6:	59 f0       	breq	.+22     	; 0x82ce <_ZN6GSCore8peekDataEh+0x22>
    82b8:	fe 01       	movw	r30, r28
    82ba:	ec 5c       	subi	r30, 0xCC	; 204
    82bc:	fd 4f       	sbci	r31, 0xFD	; 253
    82be:	01 90       	ld	r0, Z+
    82c0:	f0 81       	ld	r31, Z
    82c2:	e0 2d       	mov	r30, r0
    82c4:	ec 0f       	add	r30, r28
    82c6:	fd 1f       	adc	r31, r29
    82c8:	81 a9       	ldd	r24, Z+49	; 0x31
    82ca:	90 e0       	ldi	r25, 0x00	; 0
    82cc:	02 c0       	rjmp	.+4      	; 0x82d2 <_ZN6GSCore8peekDataEh+0x26>
    82ce:	8f ef       	ldi	r24, 0xFF	; 255
    82d0:	9f ef       	ldi	r25, 0xFF	; 255
    82d2:	df 91       	pop	r29
    82d4:	cf 91       	pop	r28
    82d6:	08 95       	ret

000082d8 <_ZN6GSCore19readAndProcessAsyncEv>:
    82d8:	0f 93       	push	r16
    82da:	1f 93       	push	r17
    82dc:	cf 93       	push	r28
    82de:	df 93       	push	r29
    82e0:	ec 01       	movw	r28, r24
    82e2:	8c 01       	movw	r16, r24
    82e4:	0f 5c       	subi	r16, 0xCF	; 207
    82e6:	1d 4f       	sbci	r17, 0xFD	; 253
    82e8:	ce 01       	movw	r24, r28
    82ea:	0e 94 50 38 	call	0x70a0	; 0x70a0 <_ZN6GSCore7readRawEv>
    82ee:	bc 01       	movw	r22, r24
    82f0:	ce 01       	movw	r24, r28
    82f2:	c3 d9       	rcall	.-3194   	; 0x767a <_ZN6GSCore15processIncomingEi>
    82f4:	88 23       	and	r24, r24
    82f6:	31 f0       	breq	.+12     	; 0x8304 <_ZN6GSCore19readAndProcessAsyncEv+0x2c>
    82f8:	f8 01       	movw	r30, r16
    82fa:	80 81       	ld	r24, Z
    82fc:	82 30       	cpi	r24, 0x02	; 2
    82fe:	11 f0       	breq	.+4      	; 0x8304 <_ZN6GSCore19readAndProcessAsyncEv+0x2c>
    8300:	86 30       	cpi	r24, 0x06	; 6
    8302:	91 f7       	brne	.-28     	; 0x82e8 <_ZN6GSCore19readAndProcessAsyncEv+0x10>
    8304:	df 91       	pop	r29
    8306:	cf 91       	pop	r28
    8308:	1f 91       	pop	r17
    830a:	0f 91       	pop	r16
    830c:	08 95       	ret

0000830e <_ZN6GSCore4loopEv>:
    830e:	cf 93       	push	r28
    8310:	df 93       	push	r29
    8312:	ec 01       	movw	r28, r24
    8314:	e1 df       	rcall	.-62     	; 0x82d8 <_ZN6GSCore19readAndProcessAsyncEv>
    8316:	ea 81       	ldd	r30, Y+2	; 0x02
    8318:	fb 81       	ldd	r31, Y+3	; 0x03
    831a:	30 97       	sbiw	r30, 0x00	; 0
    831c:	59 f0       	breq	.+22     	; 0x8334 <_ZN6GSCore4loopEv+0x26>
    831e:	de 01       	movw	r26, r28
    8320:	a0 52       	subi	r26, 0x20	; 32
    8322:	bd 4f       	sbci	r27, 0xFD	; 253
    8324:	8c 91       	ld	r24, X
    8326:	81 ff       	sbrs	r24, 1
    8328:	05 c0       	rjmp	.+10     	; 0x8334 <_ZN6GSCore4loopEv+0x26>
    832a:	8d 7f       	andi	r24, 0xFD	; 253
    832c:	8c 93       	st	X, r24
    832e:	88 85       	ldd	r24, Y+8	; 0x08
    8330:	99 85       	ldd	r25, Y+9	; 0x09
    8332:	19 95       	eicall
    8334:	ee 81       	ldd	r30, Y+6	; 0x06
    8336:	ff 81       	ldd	r31, Y+7	; 0x07
    8338:	30 97       	sbiw	r30, 0x00	; 0
    833a:	59 f0       	breq	.+22     	; 0x8352 <_ZN6GSCore4loopEv+0x44>
    833c:	de 01       	movw	r26, r28
    833e:	a0 52       	subi	r26, 0x20	; 32
    8340:	bd 4f       	sbci	r27, 0xFD	; 253
    8342:	8c 91       	ld	r24, X
    8344:	83 ff       	sbrs	r24, 3
    8346:	05 c0       	rjmp	.+10     	; 0x8352 <_ZN6GSCore4loopEv+0x44>
    8348:	87 7f       	andi	r24, 0xF7	; 247
    834a:	8c 93       	st	X, r24
    834c:	88 85       	ldd	r24, Y+8	; 0x08
    834e:	99 85       	ldd	r25, Y+9	; 0x09
    8350:	19 95       	eicall
    8352:	ec 81       	ldd	r30, Y+4	; 0x04
    8354:	fd 81       	ldd	r31, Y+5	; 0x05
    8356:	30 97       	sbiw	r30, 0x00	; 0
    8358:	59 f0       	breq	.+22     	; 0x8370 <_ZN6GSCore4loopEv+0x62>
    835a:	de 01       	movw	r26, r28
    835c:	a0 52       	subi	r26, 0x20	; 32
    835e:	bd 4f       	sbci	r27, 0xFD	; 253
    8360:	8c 91       	ld	r24, X
    8362:	82 ff       	sbrs	r24, 2
    8364:	05 c0       	rjmp	.+10     	; 0x8370 <_ZN6GSCore4loopEv+0x62>
    8366:	8b 7f       	andi	r24, 0xFB	; 251
    8368:	8c 93       	st	X, r24
    836a:	88 85       	ldd	r24, Y+8	; 0x08
    836c:	99 85       	ldd	r25, Y+9	; 0x09
    836e:	19 95       	eicall
    8370:	e8 81       	ld	r30, Y
    8372:	f9 81       	ldd	r31, Y+1	; 0x01
    8374:	30 97       	sbiw	r30, 0x00	; 0
    8376:	79 f0       	breq	.+30     	; 0x8396 <_ZN6GSCore4loopEv+0x88>
    8378:	de 01       	movw	r26, r28
    837a:	a0 52       	subi	r26, 0x20	; 32
    837c:	bd 4f       	sbci	r27, 0xFD	; 253
    837e:	8c 91       	ld	r24, X
    8380:	80 ff       	sbrs	r24, 0
    8382:	09 c0       	rjmp	.+18     	; 0x8396 <_ZN6GSCore4loopEv+0x88>
    8384:	8e 7f       	andi	r24, 0xFE	; 254
    8386:	8c 93       	st	X, r24
    8388:	12 97       	sbiw	r26, 0x02	; 2
    838a:	6c 91       	ld	r22, X
    838c:	88 85       	ldd	r24, Y+8	; 0x08
    838e:	99 85       	ldd	r25, Y+9	; 0x09
    8390:	df 91       	pop	r29
    8392:	cf 91       	pop	r28
    8394:	19 94       	eijmp
    8396:	df 91       	pop	r29
    8398:	cf 91       	pop	r28
    839a:	08 95       	ret

0000839c <_GLOBAL__sub_I__ZN6GSCoreC2Ev>:
    839c:	0f 93       	push	r16
    839e:	00 e0       	ldi	r16, 0x00	; 0
    83a0:	20 e0       	ldi	r18, 0x00	; 0
    83a2:	40 e0       	ldi	r20, 0x00	; 0
    83a4:	60 e0       	ldi	r22, 0x00	; 0
    83a6:	80 ed       	ldi	r24, 0xD0	; 208
    83a8:	9f e2       	ldi	r25, 0x2F	; 47
    83aa:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <_ZN9IPAddressC1Ehhhh>
    83ae:	0f 91       	pop	r16
    83b0:	08 95       	ret

000083b2 <_ZL9dump_bytePKcib.constprop.12>:
    83b2:	cf 93       	push	r28
    83b4:	df 93       	push	r29
    83b6:	eb 01       	movw	r28, r22
    83b8:	77 fd       	sbrc	r23, 7
    83ba:	3b c0       	rjmp	.+118    	; 0x8432 <_ZL9dump_bytePKcib.constprop.12+0x80>
    83bc:	bc 01       	movw	r22, r24
    83be:	84 e0       	ldi	r24, 0x04	; 4
    83c0:	94 e2       	ldi	r25, 0x24	; 36
    83c2:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_ZN5Print5printEPKc>
    83c6:	66 e5       	ldi	r22, 0x56	; 86
    83c8:	71 e1       	ldi	r23, 0x11	; 17
    83ca:	84 e0       	ldi	r24, 0x04	; 4
    83cc:	94 e2       	ldi	r25, 0x24	; 36
    83ce:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_ZN5Print5printEPKc>
    83d2:	c0 31       	cpi	r28, 0x10	; 16
    83d4:	d1 05       	cpc	r29, r1
    83d6:	34 f4       	brge	.+12     	; 0x83e4 <_ZL9dump_bytePKcib.constprop.12+0x32>
    83d8:	60 ec       	ldi	r22, 0xC0	; 192
    83da:	7f e0       	ldi	r23, 0x0F	; 15
    83dc:	84 e0       	ldi	r24, 0x04	; 4
    83de:	94 e2       	ldi	r25, 0x24	; 36
    83e0:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_ZN5Print5printEPKc>
    83e4:	40 e1       	ldi	r20, 0x10	; 16
    83e6:	50 e0       	ldi	r21, 0x00	; 0
    83e8:	be 01       	movw	r22, r28
    83ea:	84 e0       	ldi	r24, 0x04	; 4
    83ec:	94 e2       	ldi	r25, 0x24	; 36
    83ee:	0e 94 4d 10 	call	0x209a	; 0x209a <_ZN5Print5printEii>
    83f2:	ce 01       	movw	r24, r28
    83f4:	0e 94 ec b4 	call	0x169d8	; 0x169d8 <isprint>
    83f8:	89 2b       	or	r24, r25
    83fa:	89 f0       	breq	.+34     	; 0x841e <_ZL9dump_bytePKcib.constprop.12+0x6c>
    83fc:	68 e5       	ldi	r22, 0x58	; 88
    83fe:	7e e0       	ldi	r23, 0x0E	; 14
    8400:	84 e0       	ldi	r24, 0x04	; 4
    8402:	94 e2       	ldi	r25, 0x24	; 36
    8404:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_ZN5Print5printEPKc>
    8408:	be 01       	movw	r22, r28
    840a:	84 e0       	ldi	r24, 0x04	; 4
    840c:	94 e2       	ldi	r25, 0x24	; 36
    840e:	0e 94 94 37 	call	0x6f28	; 0x6f28 <_ZN14HardwareSerial5writeEi>
    8412:	65 e6       	ldi	r22, 0x65	; 101
    8414:	7d e1       	ldi	r23, 0x1D	; 29
    8416:	84 e0       	ldi	r24, 0x04	; 4
    8418:	94 e2       	ldi	r25, 0x24	; 36
    841a:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_ZN5Print5printEPKc>
    841e:	84 e0       	ldi	r24, 0x04	; 4
    8420:	94 e2       	ldi	r25, 0x24	; 36
    8422:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <_ZN5Print7printlnEv>
    8426:	84 e0       	ldi	r24, 0x04	; 4
    8428:	94 e2       	ldi	r25, 0x24	; 36
    842a:	df 91       	pop	r29
    842c:	cf 91       	pop	r28
    842e:	0c 94 48 0c 	jmp	0x1890	; 0x1890 <_ZN14HardwareSerial5flushEv>
    8432:	df 91       	pop	r29
    8434:	cf 91       	pop	r28
    8436:	08 95       	ret

00008438 <_ZN6GSCore20readResponseInternalEPhPjS0_bPFvPKhjPvES4_>:
    8438:	2f 92       	push	r2
    843a:	3f 92       	push	r3
    843c:	4f 92       	push	r4
    843e:	5f 92       	push	r5
    8440:	6f 92       	push	r6
    8442:	7f 92       	push	r7
    8444:	8f 92       	push	r8
    8446:	9f 92       	push	r9
    8448:	af 92       	push	r10
    844a:	bf 92       	push	r11
    844c:	cf 92       	push	r12
    844e:	df 92       	push	r13
    8450:	ef 92       	push	r14
    8452:	ff 92       	push	r15
    8454:	0f 93       	push	r16
    8456:	1f 93       	push	r17
    8458:	cf 93       	push	r28
    845a:	df 93       	push	r29
    845c:	cd b7       	in	r28, 0x3d	; 61
    845e:	de b7       	in	r29, 0x3e	; 62
    8460:	2e 97       	sbiw	r28, 0x0e	; 14
    8462:	0f b6       	in	r0, 0x3f	; 63
    8464:	f8 94       	cli
    8466:	de bf       	out	0x3e, r29	; 62
    8468:	0f be       	out	0x3f, r0	; 63
    846a:	cd bf       	out	0x3d, r28	; 61
    846c:	1c 01       	movw	r2, r24
    846e:	4b 01       	movw	r8, r22
    8470:	5a 83       	std	Y+2, r21	; 0x02
    8472:	49 83       	std	Y+1, r20	; 0x01
    8474:	3e 83       	std	Y+6, r19	; 0x06
    8476:	2d 83       	std	Y+5, r18	; 0x05
    8478:	fc 82       	std	Y+4, r15	; 0x04
    847a:	eb 82       	std	Y+3, r14	; 0x03
    847c:	d8 86       	std	Y+8, r13	; 0x08
    847e:	cf 82       	std	Y+7, r12	; 0x07
    8480:	0e 94 16 14 	call	0x282c	; 0x282c <millis>
    8484:	2b 01       	movw	r4, r22
    8486:	3c 01       	movw	r6, r24
    8488:	10 e0       	ldi	r17, 0x00	; 0
    848a:	b1 2c       	mov	r11, r1
    848c:	e1 2c       	mov	r14, r1
    848e:	f1 2c       	mov	r15, r1
    8490:	1e 86       	std	Y+14, r1	; 0x0e
    8492:	1d 86       	std	Y+13, r1	; 0x0d
    8494:	91 01       	movw	r18, r2
    8496:	2f 5c       	subi	r18, 0xCF	; 207
    8498:	3d 4f       	sbci	r19, 0xFD	; 253
    849a:	3a 87       	std	Y+10, r19	; 0x0a
    849c:	29 87       	std	Y+9, r18	; 0x09
    849e:	c1 01       	movw	r24, r2
    84a0:	0e 94 50 38 	call	0x70a0	; 0x70a0 <_ZN6GSCore7readRawEv>
    84a4:	6c 01       	movw	r12, r24
    84a6:	8f 3f       	cpi	r24, 0xFF	; 255
    84a8:	3f ef       	ldi	r19, 0xFF	; 255
    84aa:	93 07       	cpc	r25, r19
    84ac:	99 f4       	brne	.+38     	; 0x84d4 <_ZN6GSCore20readResponseInternalEPhPjS0_bPFvPKhjPvES4_+0x9c>
    84ae:	0e 94 16 14 	call	0x282c	; 0x282c <millis>
    84b2:	64 19       	sub	r22, r4
    84b4:	75 09       	sbc	r23, r5
    84b6:	86 09       	sbc	r24, r6
    84b8:	97 09       	sbc	r25, r7
    84ba:	61 32       	cpi	r22, 0x21	; 33
    84bc:	7e 44       	sbci	r23, 0x4E	; 78
    84be:	81 05       	cpc	r24, r1
    84c0:	91 05       	cpc	r25, r1
    84c2:	68 f3       	brcs	.-38     	; 0x849e <_ZN6GSCore20readResponseInternalEPhPjS0_bPFvPKhjPvES4_+0x66>
    84c4:	6b e5       	ldi	r22, 0x5B	; 91
    84c6:	7e e0       	ldi	r23, 0x0E	; 14
    84c8:	84 e0       	ldi	r24, 0x04	; 4
    84ca:	94 e2       	ldi	r25, 0x24	; 36
    84cc:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <_ZN5Print7printlnEPKc>
    84d0:	86 e1       	ldi	r24, 0x16	; 22
    84d2:	cf c0       	rjmp	.+414    	; 0x8672 <_ZN6GSCore20readResponseInternalEPhPjS0_bPFvPKhjPvES4_+0x23a>
    84d4:	e9 85       	ldd	r30, Y+9	; 0x09
    84d6:	fa 85       	ldd	r31, Y+10	; 0x0a
    84d8:	80 81       	ld	r24, Z
    84da:	81 11       	cpse	r24, r1
    84dc:	04 c0       	rjmp	.+8      	; 0x84e6 <_ZN6GSCore20readResponseInternalEPhPjS0_bPFvPKhjPvES4_+0xae>
    84de:	fb e1       	ldi	r31, 0x1B	; 27
    84e0:	cf 16       	cp	r12, r31
    84e2:	d1 04       	cpc	r13, r1
    84e4:	21 f4       	brne	.+8      	; 0x84ee <_ZN6GSCore20readResponseInternalEPhPjS0_bPFvPKhjPvES4_+0xb6>
    84e6:	b6 01       	movw	r22, r12
    84e8:	c1 01       	movw	r24, r2
    84ea:	c7 d8       	rcall	.-3698   	; 0x767a <_ZN6GSCore15processIncomingEi>
    84ec:	d8 cf       	rjmp	.-80     	; 0x849e <_ZN6GSCore20readResponseInternalEPhPjS0_bPFvPKhjPvES4_+0x66>
    84ee:	2d e0       	ldi	r18, 0x0D	; 13
    84f0:	c2 16       	cp	r12, r18
    84f2:	d1 04       	cpc	r13, r1
    84f4:	29 f0       	breq	.+10     	; 0x8500 <_ZN6GSCore20readResponseInternalEPhPjS0_bPFvPKhjPvES4_+0xc8>
    84f6:	3a e0       	ldi	r19, 0x0A	; 10
    84f8:	c3 16       	cp	r12, r19
    84fa:	d1 04       	cpc	r13, r1
    84fc:	09 f0       	breq	.+2      	; 0x8500 <_ZN6GSCore20readResponseInternalEPhPjS0_bPFvPKhjPvES4_+0xc8>
    84fe:	6c c0       	rjmp	.+216    	; 0x85d8 <_ZN6GSCore20readResponseInternalEPhPjS0_bPFvPKhjPvES4_+0x1a0>
    8500:	8d 85       	ldd	r24, Y+13	; 0x0d
    8502:	9e 85       	ldd	r25, Y+14	; 0x0e
    8504:	8e 15       	cp	r24, r14
    8506:	9f 05       	cpc	r25, r15
    8508:	51 f2       	breq	.-108    	; 0x849e <_ZN6GSCore20readResponseInternalEPhPjS0_bPFvPKhjPvES4_+0x66>
    850a:	11 23       	and	r17, r17
    850c:	21 f0       	breq	.+8      	; 0x8516 <_ZN6GSCore20readResponseInternalEPhPjS0_bPFvPKhjPvES4_+0xde>
    850e:	fe 86       	std	Y+14, r15	; 0x0e
    8510:	ed 86       	std	Y+13, r14	; 0x0d
    8512:	10 e0       	ldi	r17, 0x00	; 0
    8514:	c4 cf       	rjmp	.-120    	; 0x849e <_ZN6GSCore20readResponseInternalEPhPjS0_bPFvPKhjPvES4_+0x66>
    8516:	64 01       	movw	r12, r8
    8518:	ce 0c       	add	r12, r14
    851a:	df 1c       	adc	r13, r15
    851c:	2d 81       	ldd	r18, Y+5	; 0x05
    851e:	3e 81       	ldd	r19, Y+6	; 0x06
    8520:	48 2f       	mov	r20, r24
    8522:	4e 19       	sub	r20, r14
    8524:	b6 01       	movw	r22, r12
    8526:	c1 01       	movw	r24, r2
    8528:	0e 94 17 3a 	call	0x742e	; 0x742e <_ZN6GSCore19processResponseLineEPKhhPh>
    852c:	28 2f       	mov	r18, r24
    852e:	89 30       	cpi	r24, 0x09	; 9
    8530:	29 f4       	brne	.+10     	; 0x853c <_ZN6GSCore20readResponseInternalEPhPjS0_bPFvPKhjPvES4_+0x104>
    8532:	c1 01       	movw	r24, r2
    8534:	2b 87       	std	Y+11, r18	; 0x0b
    8536:	0e 94 41 39 	call	0x7282	; 0x7282 <_ZN6GSCore21processDisassociationEv>
    853a:	2b 85       	ldd	r18, Y+11	; 0x0b
    853c:	00 23       	and	r16, r16
    853e:	09 f4       	brne	.+2      	; 0x8542 <_ZN6GSCore20readResponseInternalEPhPjS0_bPFvPKhjPvES4_+0x10a>
    8540:	41 c0       	rjmp	.+130    	; 0x85c4 <_ZN6GSCore20readResponseInternalEPhPjS0_bPFvPKhjPvES4_+0x18c>
    8542:	eb 81       	ldd	r30, Y+3	; 0x03
    8544:	fc 81       	ldd	r31, Y+4	; 0x04
    8546:	ef 2b       	or	r30, r31
    8548:	71 f5       	brne	.+92     	; 0x85a6 <_ZN6GSCore20readResponseInternalEPhPjS0_bPFvPKhjPvES4_+0x16e>
    854a:	b1 10       	cpse	r11, r1
    854c:	3b c0       	rjmp	.+118    	; 0x85c4 <_ZN6GSCore20readResponseInternalEPhPjS0_bPFvPKhjPvES4_+0x18c>
    854e:	25 31       	cpi	r18, 0x15	; 21
    8550:	d9 f5       	brne	.+118    	; 0x85c8 <_ZN6GSCore20readResponseInternalEPhPjS0_bPFvPKhjPvES4_+0x190>
    8552:	e9 81       	ldd	r30, Y+1	; 0x01
    8554:	fa 81       	ldd	r31, Y+2	; 0x02
    8556:	80 81       	ld	r24, Z
    8558:	91 81       	ldd	r25, Z+1	; 0x01
    855a:	2d 85       	ldd	r18, Y+13	; 0x0d
    855c:	3e 85       	ldd	r19, Y+14	; 0x0e
    855e:	28 17       	cp	r18, r24
    8560:	39 07       	cpc	r19, r25
    8562:	50 f4       	brcc	.+20     	; 0x8578 <_ZN6GSCore20readResponseInternalEPhPjS0_bPFvPKhjPvES4_+0x140>
    8564:	f9 01       	movw	r30, r18
    8566:	e8 0d       	add	r30, r8
    8568:	f9 1d       	adc	r31, r9
    856a:	3d e0       	ldi	r19, 0x0D	; 13
    856c:	30 83       	st	Z, r19
    856e:	8d 85       	ldd	r24, Y+13	; 0x0d
    8570:	9e 85       	ldd	r25, Y+14	; 0x0e
    8572:	01 96       	adiw	r24, 0x01	; 1
    8574:	9e 87       	std	Y+14, r25	; 0x0e
    8576:	8d 87       	std	Y+13, r24	; 0x0d
    8578:	e9 81       	ldd	r30, Y+1	; 0x01
    857a:	fa 81       	ldd	r31, Y+2	; 0x02
    857c:	80 81       	ld	r24, Z
    857e:	91 81       	ldd	r25, Z+1	; 0x01
    8580:	2d 85       	ldd	r18, Y+13	; 0x0d
    8582:	3e 85       	ldd	r19, Y+14	; 0x0e
    8584:	28 17       	cp	r18, r24
    8586:	39 07       	cpc	r19, r25
    8588:	18 f0       	brcs	.+6      	; 0x8590 <_ZN6GSCore20readResponseInternalEPhPjS0_bPFvPKhjPvES4_+0x158>
    858a:	ed 84       	ldd	r14, Y+13	; 0x0d
    858c:	fe 84       	ldd	r15, Y+14	; 0x0e
    858e:	87 cf       	rjmp	.-242    	; 0x849e <_ZN6GSCore20readResponseInternalEPhPjS0_bPFvPKhjPvES4_+0x66>
    8590:	79 01       	movw	r14, r18
    8592:	3f ef       	ldi	r19, 0xFF	; 255
    8594:	e3 1a       	sub	r14, r19
    8596:	f3 0a       	sbc	r15, r19
    8598:	ed 85       	ldd	r30, Y+13	; 0x0d
    859a:	fe 85       	ldd	r31, Y+14	; 0x0e
    859c:	e8 0d       	add	r30, r8
    859e:	f9 1d       	adc	r31, r9
    85a0:	8a e0       	ldi	r24, 0x0A	; 10
    85a2:	80 83       	st	Z, r24
    85a4:	0c c0       	rjmp	.+24     	; 0x85be <_ZN6GSCore20readResponseInternalEPhPjS0_bPFvPKhjPvES4_+0x186>
    85a6:	25 31       	cpi	r18, 0x15	; 21
    85a8:	79 f4       	brne	.+30     	; 0x85c8 <_ZN6GSCore20readResponseInternalEPhPjS0_bPFvPKhjPvES4_+0x190>
    85aa:	6d 85       	ldd	r22, Y+13	; 0x0d
    85ac:	7e 85       	ldd	r23, Y+14	; 0x0e
    85ae:	6e 19       	sub	r22, r14
    85b0:	7f 09       	sbc	r23, r15
    85b2:	4f 81       	ldd	r20, Y+7	; 0x07
    85b4:	58 85       	ldd	r21, Y+8	; 0x08
    85b6:	c6 01       	movw	r24, r12
    85b8:	eb 81       	ldd	r30, Y+3	; 0x03
    85ba:	fc 81       	ldd	r31, Y+4	; 0x04
    85bc:	19 95       	eicall
    85be:	fe 86       	std	Y+14, r15	; 0x0e
    85c0:	ed 86       	std	Y+13, r14	; 0x0d
    85c2:	6d cf       	rjmp	.-294    	; 0x849e <_ZN6GSCore20readResponseInternalEPhPjS0_bPFvPKhjPvES4_+0x66>
    85c4:	25 31       	cpi	r18, 0x15	; 21
    85c6:	d9 f3       	breq	.-10     	; 0x85be <_ZN6GSCore20readResponseInternalEPhPjS0_bPFvPKhjPvES4_+0x186>
    85c8:	27 30       	cpi	r18, 0x07	; 7
    85ca:	c9 f3       	breq	.-14     	; 0x85be <_ZN6GSCore20readResponseInternalEPhPjS0_bPFvPKhjPvES4_+0x186>
    85cc:	e9 81       	ldd	r30, Y+1	; 0x01
    85ce:	fa 81       	ldd	r31, Y+2	; 0x02
    85d0:	f1 82       	std	Z+1, r15	; 0x01
    85d2:	e0 82       	st	Z, r14
    85d4:	82 2f       	mov	r24, r18
    85d6:	4d c0       	rjmp	.+154    	; 0x8672 <_ZN6GSCore20readResponseInternalEPhPjS0_bPFvPKhjPvES4_+0x23a>
    85d8:	e9 81       	ldd	r30, Y+1	; 0x01
    85da:	fa 81       	ldd	r31, Y+2	; 0x02
    85dc:	80 81       	ld	r24, Z
    85de:	91 81       	ldd	r25, Z+1	; 0x01
    85e0:	2d 85       	ldd	r18, Y+13	; 0x0d
    85e2:	3e 85       	ldd	r19, Y+14	; 0x0e
    85e4:	28 17       	cp	r18, r24
    85e6:	39 07       	cpc	r19, r25
    85e8:	48 f4       	brcc	.+18     	; 0x85fc <_ZN6GSCore20readResponseInternalEPhPjS0_bPFvPKhjPvES4_+0x1c4>
    85ea:	f9 01       	movw	r30, r18
    85ec:	e8 0d       	add	r30, r8
    85ee:	f9 1d       	adc	r31, r9
    85f0:	c0 82       	st	Z, r12
    85f2:	2f 5f       	subi	r18, 0xFF	; 255
    85f4:	3f 4f       	sbci	r19, 0xFF	; 255
    85f6:	3e 87       	std	Y+14, r19	; 0x0e
    85f8:	2d 87       	std	Y+13, r18	; 0x0d
    85fa:	51 cf       	rjmp	.-350    	; 0x849e <_ZN6GSCore20readResponseInternalEPhPjS0_bPFvPKhjPvES4_+0x66>
    85fc:	4d 85       	ldd	r20, Y+13	; 0x0d
    85fe:	5e 85       	ldd	r21, Y+14	; 0x0e
    8600:	4e 19       	sub	r20, r14
    8602:	5f 09       	sbc	r21, r15
    8604:	43 30       	cpi	r20, 0x03	; 3
    8606:	51 05       	cpc	r21, r1
    8608:	58 f0       	brcs	.+22     	; 0x8620 <_ZN6GSCore20readResponseInternalEPhPjS0_bPFvPKhjPvES4_+0x1e8>
    860a:	01 11       	cpse	r16, r1
    860c:	04 c0       	rjmp	.+8      	; 0x8616 <_ZN6GSCore20readResponseInternalEPhPjS0_bPFvPKhjPvES4_+0x1de>
    860e:	11 e0       	ldi	r17, 0x01	; 1
    8610:	bb 24       	eor	r11, r11
    8612:	b3 94       	inc	r11
    8614:	44 cf       	rjmp	.-376    	; 0x849e <_ZN6GSCore20readResponseInternalEPhPjS0_bPFvPKhjPvES4_+0x66>
    8616:	b6 01       	movw	r22, r12
    8618:	8c e6       	ldi	r24, 0x6C	; 108
    861a:	9e e0       	ldi	r25, 0x0E	; 14
    861c:	ca de       	rcall	.-620    	; 0x83b2 <_ZL9dump_bytePKcib.constprop.12>
    861e:	f7 cf       	rjmp	.-18     	; 0x860e <_ZN6GSCore20readResponseInternalEPhPjS0_bPFvPKhjPvES4_+0x1d6>
    8620:	e1 14       	cp	r14, r1
    8622:	f1 04       	cpc	r15, r1
    8624:	f9 f0       	breq	.+62     	; 0x8664 <_ZN6GSCore20readResponseInternalEPhPjS0_bPFvPKhjPvES4_+0x22c>
    8626:	54 01       	movw	r10, r8
    8628:	ae 0c       	add	r10, r14
    862a:	bf 1c       	adc	r11, r15
    862c:	00 23       	and	r16, r16
    862e:	59 f0       	breq	.+22     	; 0x8646 <_ZN6GSCore20readResponseInternalEPhPjS0_bPFvPKhjPvES4_+0x20e>
    8630:	f5 01       	movw	r30, r10
    8632:	31 97       	sbiw	r30, 0x01	; 1
    8634:	60 81       	ld	r22, Z
    8636:	70 e0       	ldi	r23, 0x00	; 0
    8638:	86 e9       	ldi	r24, 0x96	; 150
    863a:	9e e0       	ldi	r25, 0x0E	; 14
    863c:	4b 87       	std	Y+11, r20	; 0x0b
    863e:	5c 87       	std	Y+12, r21	; 0x0c
    8640:	b8 de       	rcall	.-656    	; 0x83b2 <_ZL9dump_bytePKcib.constprop.12>
    8642:	5c 85       	ldd	r21, Y+12	; 0x0c
    8644:	4b 85       	ldd	r20, Y+11	; 0x0b
    8646:	31 e0       	ldi	r19, 0x01	; 1
    8648:	e3 1a       	sub	r14, r19
    864a:	f1 08       	sbc	r15, r1
    864c:	b5 01       	movw	r22, r10
    864e:	c4 01       	movw	r24, r8
    8650:	8e 0d       	add	r24, r14
    8652:	9f 1d       	adc	r25, r15
    8654:	0e 94 4b b5 	call	0x16a96	; 0x16a96 <memmove>
    8658:	ed 85       	ldd	r30, Y+13	; 0x0d
    865a:	fe 85       	ldd	r31, Y+14	; 0x0e
    865c:	e8 0d       	add	r30, r8
    865e:	f9 1d       	adc	r31, r9
    8660:	c0 82       	st	Z, r12
    8662:	d6 cf       	rjmp	.-84     	; 0x8610 <_ZN6GSCore20readResponseInternalEPhPjS0_bPFvPKhjPvES4_+0x1d8>
    8664:	00 23       	and	r16, r16
    8666:	a1 f2       	breq	.-88     	; 0x8610 <_ZN6GSCore20readResponseInternalEPhPjS0_bPFvPKhjPvES4_+0x1d8>
    8668:	b6 01       	movw	r22, r12
    866a:	80 ec       	ldi	r24, 0xC0	; 192
    866c:	9e e0       	ldi	r25, 0x0E	; 14
    866e:	a1 de       	rcall	.-702    	; 0x83b2 <_ZL9dump_bytePKcib.constprop.12>
    8670:	cf cf       	rjmp	.-98     	; 0x8610 <_ZN6GSCore20readResponseInternalEPhPjS0_bPFvPKhjPvES4_+0x1d8>
    8672:	2e 96       	adiw	r28, 0x0e	; 14
    8674:	0f b6       	in	r0, 0x3f	; 63
    8676:	f8 94       	cli
    8678:	de bf       	out	0x3e, r29	; 62
    867a:	0f be       	out	0x3f, r0	; 63
    867c:	cd bf       	out	0x3d, r28	; 61
    867e:	df 91       	pop	r29
    8680:	cf 91       	pop	r28
    8682:	1f 91       	pop	r17
    8684:	0f 91       	pop	r16
    8686:	ff 90       	pop	r15
    8688:	ef 90       	pop	r14
    868a:	df 90       	pop	r13
    868c:	cf 90       	pop	r12
    868e:	bf 90       	pop	r11
    8690:	af 90       	pop	r10
    8692:	9f 90       	pop	r9
    8694:	8f 90       	pop	r8
    8696:	7f 90       	pop	r7
    8698:	6f 90       	pop	r6
    869a:	5f 90       	pop	r5
    869c:	4f 90       	pop	r4
    869e:	3f 90       	pop	r3
    86a0:	2f 90       	pop	r2
    86a2:	08 95       	ret

000086a4 <_ZN6GSCore12readResponseEPh>:
    86a4:	cf 92       	push	r12
    86a6:	df 92       	push	r13
    86a8:	ef 92       	push	r14
    86aa:	ff 92       	push	r15
    86ac:	0f 93       	push	r16
    86ae:	cf 93       	push	r28
    86b0:	df 93       	push	r29
    86b2:	00 d0       	rcall	.+0      	; 0x86b4 <_ZN6GSCore12readResponseEPh+0x10>
    86b4:	1f 92       	push	r1
    86b6:	1f 92       	push	r1
    86b8:	cd b7       	in	r28, 0x3d	; 61
    86ba:	de b7       	in	r29, 0x3e	; 62
    86bc:	9b 01       	movw	r18, r22
    86be:	43 e0       	ldi	r20, 0x03	; 3
    86c0:	50 e0       	ldi	r21, 0x00	; 0
    86c2:	5d 83       	std	Y+5, r21	; 0x05
    86c4:	4c 83       	std	Y+4, r20	; 0x04
    86c6:	c1 2c       	mov	r12, r1
    86c8:	d1 2c       	mov	r13, r1
    86ca:	e1 2c       	mov	r14, r1
    86cc:	f1 2c       	mov	r15, r1
    86ce:	00 e0       	ldi	r16, 0x00	; 0
    86d0:	ae 01       	movw	r20, r28
    86d2:	4c 5f       	subi	r20, 0xFC	; 252
    86d4:	5f 4f       	sbci	r21, 0xFF	; 255
    86d6:	be 01       	movw	r22, r28
    86d8:	6f 5f       	subi	r22, 0xFF	; 255
    86da:	7f 4f       	sbci	r23, 0xFF	; 255
    86dc:	ad de       	rcall	.-678    	; 0x8438 <_ZN6GSCore20readResponseInternalEPhPjS0_bPFvPKhjPvES4_>
    86de:	0f 90       	pop	r0
    86e0:	0f 90       	pop	r0
    86e2:	0f 90       	pop	r0
    86e4:	0f 90       	pop	r0
    86e6:	0f 90       	pop	r0
    86e8:	df 91       	pop	r29
    86ea:	cf 91       	pop	r28
    86ec:	0f 91       	pop	r16
    86ee:	ff 90       	pop	r15
    86f0:	ef 90       	pop	r14
    86f2:	df 90       	pop	r13
    86f4:	cf 90       	pop	r12
    86f6:	08 95       	ret

000086f8 <_ZN6GSCore19writeCommandCheckOkEPKcz>:
    86f8:	0f 93       	push	r16
    86fa:	1f 93       	push	r17
    86fc:	cf 93       	push	r28
    86fe:	df 93       	push	r29
    8700:	cd b7       	in	r28, 0x3d	; 61
    8702:	de b7       	in	r29, 0x3e	; 62
    8704:	08 85       	ldd	r16, Y+8	; 0x08
    8706:	19 85       	ldd	r17, Y+9	; 0x09
    8708:	ae 01       	movw	r20, r28
    870a:	44 5f       	subi	r20, 0xF4	; 244
    870c:	5f 4f       	sbci	r21, 0xFF	; 255
    870e:	6a 85       	ldd	r22, Y+10	; 0x0a
    8710:	7b 85       	ldd	r23, Y+11	; 0x0b
    8712:	c8 01       	movw	r24, r16
    8714:	a3 da       	rcall	.-2746   	; 0x7c5c <_ZN6GSCore12writeCommandEPKcPv>
    8716:	60 e0       	ldi	r22, 0x00	; 0
    8718:	70 e0       	ldi	r23, 0x00	; 0
    871a:	c8 01       	movw	r24, r16
    871c:	c3 df       	rcall	.-122    	; 0x86a4 <_ZN6GSCore12readResponseEPh>
    871e:	91 e0       	ldi	r25, 0x01	; 1
    8720:	81 11       	cpse	r24, r1
    8722:	90 e0       	ldi	r25, 0x00	; 0
    8724:	89 2f       	mov	r24, r25
    8726:	df 91       	pop	r29
    8728:	cf 91       	pop	r28
    872a:	1f 91       	pop	r17
    872c:	0f 91       	pop	r16
    872e:	08 95       	ret

00008730 <_ZN6GSCore6_beginEv>:
    8730:	cf 93       	push	r28
    8732:	df 93       	push	r29
    8734:	ec 01       	movw	r28, r24
    8736:	fc 01       	movw	r30, r24
    8738:	ef 5c       	subi	r30, 0xCF	; 207
    873a:	fd 4f       	sbci	r31, 0xFD	; 253
    873c:	10 82       	st	Z, r1
    873e:	33 96       	adiw	r30, 0x03	; 3
    8740:	11 82       	std	Z+1, r1	; 0x01
    8742:	10 82       	st	Z, r1
    8744:	32 97       	sbiw	r30, 0x02	; 2
    8746:	11 82       	std	Z+1, r1	; 0x01
    8748:	10 82       	st	Z, r1
    874a:	72 96       	adiw	r30, 0x12	; 18
    874c:	11 82       	std	Z+1, r1	; 0x01
    874e:	10 82       	st	Z, r1
    8750:	1f 86       	std	Y+15, r1	; 0x0f
    8752:	1e 86       	std	Y+14, r1	; 0x0e
    8754:	e6 56       	subi	r30, 0x66	; 102
    8756:	ff 4f       	sbci	r31, 0xFF	; 255
    8758:	8f ef       	ldi	r24, 0xFF	; 255
    875a:	80 83       	st	Z, r24
    875c:	32 96       	adiw	r30, 0x02	; 2
    875e:	10 82       	st	Z, r1
    8760:	0e 94 22 14 	call	0x2844	; 0x2844 <micros>
    8764:	60 51       	subi	r22, 0x10	; 16
    8766:	77 42       	sbci	r23, 0x27	; 39
    8768:	7a 8b       	std	Y+18, r23	; 0x12
    876a:	69 8b       	std	Y+17, r22	; 0x11
    876c:	fe 01       	movw	r30, r28
    876e:	e1 52       	subi	r30, 0x21	; 33
    8770:	fd 4f       	sbci	r31, 0xFD	; 253
    8772:	10 82       	st	Z, r1
    8774:	ce 01       	movw	r24, r28
    8776:	0e 94 50 38 	call	0x70a0	; 0x70a0 <_ZN6GSCore7readRawEv>
    877a:	01 96       	adiw	r24, 0x01	; 1
    877c:	d9 f7       	brne	.-10     	; 0x8774 <_ZN6GSCore6_beginEv+0x44>
    877e:	85 ee       	ldi	r24, 0xE5	; 229
    8780:	9e e0       	ldi	r25, 0x0E	; 14
    8782:	9f 93       	push	r25
    8784:	8f 93       	push	r24
    8786:	df 93       	push	r29
    8788:	cf 93       	push	r28
    878a:	b6 df       	rcall	.-148    	; 0x86f8 <_ZN6GSCore19writeCommandCheckOkEPKcz>
    878c:	0f 90       	pop	r0
    878e:	0f 90       	pop	r0
    8790:	0f 90       	pop	r0
    8792:	0f 90       	pop	r0
    8794:	88 23       	and	r24, r24
    8796:	d1 f0       	breq	.+52     	; 0x87cc <_ZN6GSCore6_beginEv+0x9c>
    8798:	8a ee       	ldi	r24, 0xEA	; 234
    879a:	9e e0       	ldi	r25, 0x0E	; 14
    879c:	9f 93       	push	r25
    879e:	8f 93       	push	r24
    87a0:	df 93       	push	r29
    87a2:	cf 93       	push	r28
    87a4:	a9 df       	rcall	.-174    	; 0x86f8 <_ZN6GSCore19writeCommandCheckOkEPKcz>
    87a6:	0f 90       	pop	r0
    87a8:	0f 90       	pop	r0
    87aa:	0f 90       	pop	r0
    87ac:	0f 90       	pop	r0
    87ae:	88 23       	and	r24, r24
    87b0:	69 f0       	breq	.+26     	; 0x87cc <_ZN6GSCore6_beginEv+0x9c>
    87b2:	8f ee       	ldi	r24, 0xEF	; 239
    87b4:	9e e0       	ldi	r25, 0x0E	; 14
    87b6:	9f 93       	push	r25
    87b8:	8f 93       	push	r24
    87ba:	df 93       	push	r29
    87bc:	cf 93       	push	r28
    87be:	9c df       	rcall	.-200    	; 0x86f8 <_ZN6GSCore19writeCommandCheckOkEPKcz>
    87c0:	0f 90       	pop	r0
    87c2:	0f 90       	pop	r0
    87c4:	0f 90       	pop	r0
    87c6:	0f 90       	pop	r0
    87c8:	81 11       	cpse	r24, r1
    87ca:	02 c0       	rjmp	.+4      	; 0x87d0 <_ZN6GSCore6_beginEv+0xa0>
    87cc:	80 e0       	ldi	r24, 0x00	; 0
    87ce:	14 c0       	rjmp	.+40     	; 0x87f8 <_ZN6GSCore6_beginEv+0xc8>
    87d0:	8a ef       	ldi	r24, 0xFA	; 250
    87d2:	9e e0       	ldi	r25, 0x0E	; 14
    87d4:	9f 93       	push	r25
    87d6:	8f 93       	push	r24
    87d8:	df 93       	push	r29
    87da:	cf 93       	push	r28
    87dc:	8d df       	rcall	.-230    	; 0x86f8 <_ZN6GSCore19writeCommandCheckOkEPKcz>
    87de:	0f 90       	pop	r0
    87e0:	0f 90       	pop	r0
    87e2:	0f 90       	pop	r0
    87e4:	0f 90       	pop	r0
    87e6:	88 23       	and	r24, r24
    87e8:	89 f3       	breq	.-30     	; 0x87cc <_ZN6GSCore6_beginEv+0x9c>
    87ea:	c2 5b       	subi	r28, 0xB2	; 178
    87ec:	dd 4f       	sbci	r29, 0xFD	; 253
    87ee:	90 e9       	ldi	r25, 0x90	; 144
    87f0:	fe 01       	movw	r30, r28
    87f2:	11 92       	st	Z+, r1
    87f4:	9a 95       	dec	r25
    87f6:	e9 f7       	brne	.-6      	; 0x87f2 <_ZN6GSCore6_beginEv+0xc2>
    87f8:	df 91       	pop	r29
    87fa:	cf 91       	pop	r28
    87fc:	08 95       	ret

000087fe <_ZN6GSCore5beginEhh>:

bool GSCore::begin(uint8_t ss, uint8_t data_ready)
{
    87fe:	1f 93       	push	r17
    8800:	cf 93       	push	r28
    8802:	df 93       	push	r29
    8804:	ec 01       	movw	r28, r24
    8806:	16 2f       	mov	r17, r22
  if (this->serial || this->ss_pin != INVALID_PIN || ss == INVALID_PIN)
    8808:	2a 85       	ldd	r18, Y+10	; 0x0a
    880a:	3b 85       	ldd	r19, Y+11	; 0x0b
    880c:	23 2b       	or	r18, r19
    880e:	a9 f4       	brne	.+42     	; 0x883a <_ZN6GSCore5beginEhh+0x3c>
    8810:	8c 85       	ldd	r24, Y+12	; 0x0c
    8812:	8f 3f       	cpi	r24, 0xFF	; 255
    8814:	91 f4       	brne	.+36     	; 0x883a <_ZN6GSCore5beginEhh+0x3c>
    8816:	6f 3f       	cpi	r22, 0xFF	; 255
    8818:	81 f0       	breq	.+32     	; 0x883a <_ZN6GSCore5beginEhh+0x3c>
    return false;

  this->initializing = true;
    881a:	81 e0       	ldi	r24, 0x01	; 1
    881c:	88 8b       	std	Y+16, r24	; 0x10
  this->ss_pin = ss;
    881e:	6c 87       	std	Y+12, r22	; 0x0c
  this->data_ready_pin = data_ready;
    8820:	4d 87       	std	Y+13, r20	; 0x0d

  pinMode(ss, OUTPUT);
    8822:	61 e0       	ldi	r22, 0x01	; 1
    8824:	81 2f       	mov	r24, r17
    8826:	0e 94 21 16 	call	0x2c42	; 0x2c42 <pinMode>
  digitalWrite(ss, HIGH);
    882a:	61 e0       	ldi	r22, 0x01	; 1
    882c:	81 2f       	mov	r24, r17
    882e:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <digitalWrite>

  bool res = _begin();
    8832:	ce 01       	movw	r24, r28
    8834:	7d df       	rcall	.-262    	; 0x8730 <_ZN6GSCore6_beginEv>
  this->initializing = false;
    8836:	18 8a       	std	Y+16, r1	; 0x10
  return res;
    8838:	01 c0       	rjmp	.+2      	; 0x883c <_ZN6GSCore5beginEhh+0x3e>
}

bool GSCore::begin(uint8_t ss, uint8_t data_ready)
{
  if (this->serial || this->ss_pin != INVALID_PIN || ss == INVALID_PIN)
    return false;
    883a:	80 e0       	ldi	r24, 0x00	; 0
  digitalWrite(ss, HIGH);

  bool res = _begin();
  this->initializing = false;
  return res;
}
    883c:	df 91       	pop	r29
    883e:	cf 91       	pop	r28
    8840:	1f 91       	pop	r17
    8842:	08 95       	ret

00008844 <_ZN6GSCore12readResponseEPFvPKhjPvES2_Ph>:
  uint16_t len = sizeof(buf);
  return readResponseInternal(buf, &len, connect_cid, false, NULL, NULL);
}

GSCore::GSResponse GSCore::readResponse(line_callback_t callback, void *data, cid_t *connect_cid)
{
    8844:	cf 92       	push	r12
    8846:	df 92       	push	r13
    8848:	ef 92       	push	r14
    884a:	ff 92       	push	r15
    884c:	0f 93       	push	r16
    884e:	cf 93       	push	r28
    8850:	df 93       	push	r29
    8852:	cd b7       	in	r28, 0x3d	; 61
    8854:	de b7       	in	r29, 0x3e	; 62
    8856:	c2 58       	subi	r28, 0x82	; 130
    8858:	d1 09       	sbc	r29, r1
    885a:	0f b6       	in	r0, 0x3f	; 63
    885c:	f8 94       	cli
    885e:	de bf       	out	0x3e, r29	; 62
    8860:	0f be       	out	0x3f, r0	; 63
    8862:	cd bf       	out	0x3d, r28	; 61
  uint8_t buf[MAX_DATA_LINE_SIZE];
  uint16_t len = sizeof(buf);
    8864:	e0 e8       	ldi	r30, 0x80	; 128
    8866:	f0 e0       	ldi	r31, 0x00	; 0
    8868:	cf 57       	subi	r28, 0x7F	; 127
    886a:	df 4f       	sbci	r29, 0xFF	; 255
    886c:	f9 83       	std	Y+1, r31	; 0x01
    886e:	e8 83       	st	Y, r30
    8870:	c1 58       	subi	r28, 0x81	; 129
    8872:	d0 40       	sbci	r29, 0x00	; 0
  return readResponseInternal(buf, &len, connect_cid, true, callback, data);
    8874:	6a 01       	movw	r12, r20
    8876:	7b 01       	movw	r14, r22
    8878:	01 e0       	ldi	r16, 0x01	; 1
    887a:	ae 01       	movw	r20, r28
    887c:	4f 57       	subi	r20, 0x7F	; 127
    887e:	5f 4f       	sbci	r21, 0xFF	; 255
    8880:	be 01       	movw	r22, r28
    8882:	6f 5f       	subi	r22, 0xFF	; 255
    8884:	7f 4f       	sbci	r23, 0xFF	; 255
    8886:	d8 dd       	rcall	.-1104   	; 0x8438 <_ZN6GSCore20readResponseInternalEPhPjS0_bPFvPKhjPvES4_>
}
    8888:	ce 57       	subi	r28, 0x7E	; 126
    888a:	df 4f       	sbci	r29, 0xFF	; 255
    888c:	0f b6       	in	r0, 0x3f	; 63
    888e:	f8 94       	cli
    8890:	de bf       	out	0x3e, r29	; 62
    8892:	0f be       	out	0x3f, r0	; 63
    8894:	cd bf       	out	0x3d, r28	; 61
    8896:	df 91       	pop	r29
    8898:	cf 91       	pop	r28
    889a:	0f 91       	pop	r16
    889c:	ff 90       	pop	r15
    889e:	ef 90       	pop	r14
    88a0:	df 90       	pop	r13
    88a2:	cf 90       	pop	r12
    88a4:	08 95       	ret

000088a6 <_ZL17parse_ip_responsePKhjPv>:
}

bool GSModule::setAutoConnectServer(uint16_t port, Protocol protocol)
{
  return writeCommandCheckOk("AT+NAUTO=1,%d,,%d", protocol, port);
}
    88a6:	ef 92       	push	r14
    88a8:	ff 92       	push	r15
    88aa:	0f 93       	push	r16
    88ac:	1f 93       	push	r17
    88ae:	cf 93       	push	r28
    88b0:	df 93       	push	r29
    88b2:	8c 01       	movw	r16, r24
    88b4:	7b 01       	movw	r14, r22
    88b6:	ea 01       	movw	r28, r20
    88b8:	63 30       	cpi	r22, 0x03	; 3
    88ba:	71 05       	cpc	r23, r1
    88bc:	00 f1       	brcs	.+64     	; 0x88fe <_ZL17parse_ip_responsePKhjPv+0x58>
    88be:	43 e0       	ldi	r20, 0x03	; 3
    88c0:	50 e0       	ldi	r21, 0x00	; 0
    88c2:	6b e0       	ldi	r22, 0x0B	; 11
    88c4:	7f e0       	ldi	r23, 0x0F	; 15
    88c6:	c8 01       	movw	r24, r16
    88c8:	0e 94 7e b5 	call	0x16afc	; 0x16afc <strncmp>
    88cc:	89 2b       	or	r24, r25
    88ce:	b9 f4       	brne	.+46     	; 0x88fe <_ZL17parse_ip_responsePKhjPv+0x58>
    88d0:	a7 01       	movw	r20, r14
    88d2:	43 50       	subi	r20, 0x03	; 3
    88d4:	51 09       	sbc	r21, r1
    88d6:	b8 01       	movw	r22, r16
    88d8:	6d 5f       	subi	r22, 0xFD	; 253
    88da:	7f 4f       	sbci	r23, 0xFF	; 255
    88dc:	ce 01       	movw	r24, r28
    88de:	0e 94 cc 37 	call	0x6f98	; 0x6f98 <_ZN6GSCore14parseIpAddressEP9IPAddressPKcj>
    88e2:	81 11       	cpse	r24, r1
    88e4:	0c c0       	rjmp	.+24     	; 0x88fe <_ZL17parse_ip_responsePKhjPv+0x58>
    88e6:	00 91 d8 2f 	lds	r16, 0x2FD8
    88ea:	10 91 d9 2f 	lds	r17, 0x2FD9
    88ee:	20 91 da 2f 	lds	r18, 0x2FDA
    88f2:	30 91 db 2f 	lds	r19, 0x2FDB
    88f6:	0a 83       	std	Y+2, r16	; 0x02
    88f8:	1b 83       	std	Y+3, r17	; 0x03
    88fa:	2c 83       	std	Y+4, r18	; 0x04
    88fc:	3d 83       	std	Y+5, r19	; 0x05
    88fe:	df 91       	pop	r29
    8900:	cf 91       	pop	r28
    8902:	1f 91       	pop	r17
    8904:	0f 91       	pop	r16
    8906:	ff 90       	pop	r15
    8908:	ef 90       	pop	r14
    890a:	08 95       	ret

0000890c <_ZN8GSModule10connectTcpERK9IPAddressj>:
    890c:	af 92       	push	r10
    890e:	bf 92       	push	r11
    8910:	cf 92       	push	r12
    8912:	df 92       	push	r13
    8914:	ef 92       	push	r14
    8916:	ff 92       	push	r15
    8918:	0f 93       	push	r16
    891a:	1f 93       	push	r17
    891c:	cf 93       	push	r28
    891e:	df 93       	push	r29
    8920:	cd b7       	in	r28, 0x3d	; 61
    8922:	de b7       	in	r29, 0x3e	; 62
    8924:	61 97       	sbiw	r28, 0x11	; 17
    8926:	0f b6       	in	r0, 0x3f	; 63
    8928:	f8 94       	cli
    892a:	de bf       	out	0x3e, r29	; 62
    892c:	0f be       	out	0x3f, r0	; 63
    892e:	cd bf       	out	0x3d, r28	; 61
    8930:	5c 01       	movw	r10, r24
    8932:	7b 01       	movw	r14, r22
    8934:	8a 01       	movw	r16, r20
    8936:	fb 01       	movw	r30, r22
    8938:	85 81       	ldd	r24, Z+5	; 0x05
    893a:	1f 92       	push	r1
    893c:	8f 93       	push	r24
    893e:	84 81       	ldd	r24, Z+4	; 0x04
    8940:	1f 92       	push	r1
    8942:	8f 93       	push	r24
    8944:	83 81       	ldd	r24, Z+3	; 0x03
    8946:	1f 92       	push	r1
    8948:	8f 93       	push	r24
    894a:	82 81       	ldd	r24, Z+2	; 0x02
    894c:	1f 92       	push	r1
    894e:	8f 93       	push	r24
    8950:	82 e0       	ldi	r24, 0x02	; 2
    8952:	9e e0       	ldi	r25, 0x0E	; 14
    8954:	9f 93       	push	r25
    8956:	8f 93       	push	r24
    8958:	1f 92       	push	r1
    895a:	80 e1       	ldi	r24, 0x10	; 16
    895c:	8f 93       	push	r24
    895e:	9e 01       	movw	r18, r28
    8960:	2f 5f       	subi	r18, 0xFF	; 255
    8962:	3f 4f       	sbci	r19, 0xFF	; 255
    8964:	69 01       	movw	r12, r18
    8966:	df 92       	push	r13
    8968:	2f 93       	push	r18
    896a:	0e 94 1d b6 	call	0x16c3a	; 0x16c3a <snprintf>
    896e:	1f 93       	push	r17
    8970:	0f 93       	push	r16
    8972:	df 92       	push	r13
    8974:	cf 92       	push	r12
    8976:	8f e0       	ldi	r24, 0x0F	; 15
    8978:	9f e0       	ldi	r25, 0x0F	; 15
    897a:	9f 93       	push	r25
    897c:	8f 93       	push	r24
    897e:	bf 92       	push	r11
    8980:	af 92       	push	r10
    8982:	c1 d9       	rcall	.-3198   	; 0x7d06 <_ZN6GSCore12writeCommandEPKcz>
    8984:	8f ef       	ldi	r24, 0xFF	; 255
    8986:	89 8b       	std	Y+17, r24	; 0x11
    8988:	be 01       	movw	r22, r28
    898a:	6f 5e       	subi	r22, 0xEF	; 239
    898c:	7f 4f       	sbci	r23, 0xFF	; 255
    898e:	c5 01       	movw	r24, r10
    8990:	89 de       	rcall	.-750    	; 0x86a4 <_ZN6GSCore12readResponseEPh>
    8992:	0f b6       	in	r0, 0x3f	; 63
    8994:	f8 94       	cli
    8996:	de bf       	out	0x3e, r29	; 62
    8998:	0f be       	out	0x3f, r0	; 63
    899a:	cd bf       	out	0x3d, r28	; 61
    899c:	81 11       	cpse	r24, r1
    899e:	03 c0       	rjmp	.+6      	; 0x89a6 <_ZN8GSModule10connectTcpERK9IPAddressj+0x9a>
    89a0:	69 89       	ldd	r22, Y+17	; 0x11
    89a2:	60 31       	cpi	r22, 0x10	; 16
    89a4:	10 f0       	brcs	.+4      	; 0x89aa <_ZN8GSModule10connectTcpERK9IPAddressj+0x9e>
    89a6:	8f ef       	ldi	r24, 0xFF	; 255
    89a8:	0c c0       	rjmp	.+24     	; 0x89c2 <_ZN8GSModule10connectTcpERK9IPAddressj+0xb6>
    89aa:	f7 01       	movw	r30, r14
    89ac:	22 81       	ldd	r18, Z+2	; 0x02
    89ae:	33 81       	ldd	r19, Z+3	; 0x03
    89b0:	44 81       	ldd	r20, Z+4	; 0x04
    89b2:	55 81       	ldd	r21, Z+5	; 0x05
    89b4:	c1 2c       	mov	r12, r1
    89b6:	e1 2c       	mov	r14, r1
    89b8:	f1 2c       	mov	r15, r1
    89ba:	c5 01       	movw	r24, r10
    89bc:	0e 94 93 39 	call	0x7326	; 0x7326 <_ZN6GSCore14processConnectEhmjjb>
    89c0:	89 89       	ldd	r24, Y+17	; 0x11
    89c2:	61 96       	adiw	r28, 0x11	; 17
    89c4:	0f b6       	in	r0, 0x3f	; 63
    89c6:	f8 94       	cli
    89c8:	de bf       	out	0x3e, r29	; 62
    89ca:	0f be       	out	0x3f, r0	; 63
    89cc:	cd bf       	out	0x3d, r28	; 61
    89ce:	df 91       	pop	r29
    89d0:	cf 91       	pop	r28
    89d2:	1f 91       	pop	r17
    89d4:	0f 91       	pop	r16
    89d6:	ff 90       	pop	r15
    89d8:	ef 90       	pop	r14
    89da:	df 90       	pop	r13
    89dc:	cf 90       	pop	r12
    89de:	bf 90       	pop	r11
    89e0:	af 90       	pop	r10
    89e2:	08 95       	ret

000089e4 <_ZN8GSModule12disassociateEv>:
    89e4:	0f 93       	push	r16
    89e6:	1f 93       	push	r17
    89e8:	cf 93       	push	r28
    89ea:	df 93       	push	r29
    89ec:	1f 92       	push	r1
    89ee:	cd b7       	in	r28, 0x3d	; 61
    89f0:	de b7       	in	r29, 0x3e	; 62
    89f2:	08 2f       	mov	r16, r24
    89f4:	2d e4       	ldi	r18, 0x4D	; 77
    89f6:	3f e0       	ldi	r19, 0x0F	; 15
    89f8:	3f 93       	push	r19
    89fa:	2f 93       	push	r18
    89fc:	9f 93       	push	r25
    89fe:	8f 93       	push	r24
    8a00:	99 83       	std	Y+1, r25	; 0x01
    8a02:	7a de       	rcall	.-780    	; 0x86f8 <_ZN6GSCore19writeCommandCheckOkEPKcz>
    8a04:	18 2f       	mov	r17, r24
    8a06:	0f 90       	pop	r0
    8a08:	0f 90       	pop	r0
    8a0a:	0f 90       	pop	r0
    8a0c:	0f 90       	pop	r0
    8a0e:	99 81       	ldd	r25, Y+1	; 0x01
    8a10:	88 23       	and	r24, r24
    8a12:	19 f0       	breq	.+6      	; 0x8a1a <_ZN8GSModule12disassociateEv+0x36>
    8a14:	80 2f       	mov	r24, r16
    8a16:	0e 94 41 39 	call	0x7282	; 0x7282 <_ZN6GSCore21processDisassociationEv>
    8a1a:	81 2f       	mov	r24, r17
    8a1c:	0f 90       	pop	r0
    8a1e:	df 91       	pop	r29
    8a20:	cf 91       	pop	r28
    8a22:	1f 91       	pop	r17
    8a24:	0f 91       	pop	r16
    8a26:	08 95       	ret

00008a28 <_ZN8GSModule7setDhcpEbPKc>:
    8a28:	41 15       	cp	r20, r1
    8a2a:	51 05       	cpc	r21, r1
    8a2c:	a9 f0       	breq	.+42     	; 0x8a58 <_ZN8GSModule7setDhcpEbPKc+0x30>
    8a2e:	5f 93       	push	r21
    8a30:	4f 93       	push	r20
    8a32:	1f 92       	push	r1
    8a34:	6f 93       	push	r22
    8a36:	23 e5       	ldi	r18, 0x53	; 83
    8a38:	3f e0       	ldi	r19, 0x0F	; 15
    8a3a:	3f 93       	push	r19
    8a3c:	2f 93       	push	r18
    8a3e:	9f 93       	push	r25
    8a40:	8f 93       	push	r24
    8a42:	5a de       	rcall	.-844    	; 0x86f8 <_ZN6GSCore19writeCommandCheckOkEPKcz>
    8a44:	2d b7       	in	r18, 0x3d	; 61
    8a46:	3e b7       	in	r19, 0x3e	; 62
    8a48:	28 5f       	subi	r18, 0xF8	; 248
    8a4a:	3f 4f       	sbci	r19, 0xFF	; 255
    8a4c:	0f b6       	in	r0, 0x3f	; 63
    8a4e:	f8 94       	cli
    8a50:	3e bf       	out	0x3e, r19	; 62
    8a52:	0f be       	out	0x3f, r0	; 63
    8a54:	2d bf       	out	0x3d, r18	; 61
    8a56:	08 95       	ret
    8a58:	1f 92       	push	r1
    8a5a:	6f 93       	push	r22
    8a5c:	24 e6       	ldi	r18, 0x64	; 100
    8a5e:	3f e0       	ldi	r19, 0x0F	; 15
    8a60:	3f 93       	push	r19
    8a62:	2f 93       	push	r18
    8a64:	9f 93       	push	r25
    8a66:	8f 93       	push	r24
    8a68:	47 de       	rcall	.-882    	; 0x86f8 <_ZN6GSCore19writeCommandCheckOkEPKcz>
    8a6a:	0f 90       	pop	r0
    8a6c:	0f 90       	pop	r0
    8a6e:	0f 90       	pop	r0
    8a70:	0f 90       	pop	r0
    8a72:	0f 90       	pop	r0
    8a74:	0f 90       	pop	r0
    8a76:	08 95       	ret

00008a78 <_ZN8GSModule11setStaticIpERK9IPAddressS2_S2_>:
    8a78:	7f 92       	push	r7
    8a7a:	8f 92       	push	r8
    8a7c:	9f 92       	push	r9
    8a7e:	af 92       	push	r10
    8a80:	bf 92       	push	r11
    8a82:	cf 92       	push	r12
    8a84:	df 92       	push	r13
    8a86:	ef 92       	push	r14
    8a88:	ff 92       	push	r15
    8a8a:	0f 93       	push	r16
    8a8c:	1f 93       	push	r17
    8a8e:	cf 93       	push	r28
    8a90:	df 93       	push	r29
    8a92:	cd b7       	in	r28, 0x3d	; 61
    8a94:	de b7       	in	r29, 0x3e	; 62
    8a96:	e0 97       	sbiw	r28, 0x30	; 48
    8a98:	0f b6       	in	r0, 0x3f	; 63
    8a9a:	f8 94       	cli
    8a9c:	de bf       	out	0x3e, r29	; 62
    8a9e:	0f be       	out	0x3f, r0	; 63
    8aa0:	cd bf       	out	0x3d, r28	; 61
    8aa2:	98 2e       	mov	r9, r24
    8aa4:	89 2e       	mov	r8, r25
    8aa6:	fb 01       	movw	r30, r22
    8aa8:	6a 01       	movw	r12, r20
    8aaa:	59 01       	movw	r10, r18
    8aac:	85 81       	ldd	r24, Z+5	; 0x05
    8aae:	1f 92       	push	r1
    8ab0:	8f 93       	push	r24
    8ab2:	84 81       	ldd	r24, Z+4	; 0x04
    8ab4:	1f 92       	push	r1
    8ab6:	8f 93       	push	r24
    8ab8:	83 81       	ldd	r24, Z+3	; 0x03
    8aba:	1f 92       	push	r1
    8abc:	8f 93       	push	r24
    8abe:	82 81       	ldd	r24, Z+2	; 0x02
    8ac0:	1f 92       	push	r1
    8ac2:	8f 93       	push	r24
    8ac4:	02 e0       	ldi	r16, 0x02	; 2
    8ac6:	1e e0       	ldi	r17, 0x0E	; 14
    8ac8:	1f 93       	push	r17
    8aca:	0f 93       	push	r16
    8acc:	1f 92       	push	r1
    8ace:	80 e1       	ldi	r24, 0x10	; 16
    8ad0:	78 2e       	mov	r7, r24
    8ad2:	7f 92       	push	r7
    8ad4:	7e 01       	movw	r14, r28
    8ad6:	21 e2       	ldi	r18, 0x21	; 33
    8ad8:	e2 0e       	add	r14, r18
    8ada:	f1 1c       	adc	r15, r1
    8adc:	ff 92       	push	r15
    8ade:	ef 92       	push	r14
    8ae0:	0e 94 1d b6 	call	0x16c3a	; 0x16c3a <snprintf>
    8ae4:	f6 01       	movw	r30, r12
    8ae6:	85 81       	ldd	r24, Z+5	; 0x05
    8ae8:	1f 92       	push	r1
    8aea:	8f 93       	push	r24
    8aec:	84 81       	ldd	r24, Z+4	; 0x04
    8aee:	1f 92       	push	r1
    8af0:	8f 93       	push	r24
    8af2:	83 81       	ldd	r24, Z+3	; 0x03
    8af4:	1f 92       	push	r1
    8af6:	8f 93       	push	r24
    8af8:	82 81       	ldd	r24, Z+2	; 0x02
    8afa:	1f 92       	push	r1
    8afc:	8f 93       	push	r24
    8afe:	1f 93       	push	r17
    8b00:	0f 93       	push	r16
    8b02:	1f 92       	push	r1
    8b04:	7f 92       	push	r7
    8b06:	6e 01       	movw	r12, r28
    8b08:	f1 e1       	ldi	r31, 0x11	; 17
    8b0a:	cf 0e       	add	r12, r31
    8b0c:	d1 1c       	adc	r13, r1
    8b0e:	df 92       	push	r13
    8b10:	cf 92       	push	r12
    8b12:	0e 94 1d b6 	call	0x16c3a	; 0x16c3a <snprintf>
    8b16:	f5 01       	movw	r30, r10
    8b18:	85 81       	ldd	r24, Z+5	; 0x05
    8b1a:	1f 92       	push	r1
    8b1c:	8f 93       	push	r24
    8b1e:	84 81       	ldd	r24, Z+4	; 0x04
    8b20:	1f 92       	push	r1
    8b22:	8f 93       	push	r24
    8b24:	83 81       	ldd	r24, Z+3	; 0x03
    8b26:	1f 92       	push	r1
    8b28:	8f 93       	push	r24
    8b2a:	82 81       	ldd	r24, Z+2	; 0x02
    8b2c:	1f 92       	push	r1
    8b2e:	8f 93       	push	r24
    8b30:	1f 93       	push	r17
    8b32:	0f 93       	push	r16
    8b34:	1f 92       	push	r1
    8b36:	7f 92       	push	r7
    8b38:	8e 01       	movw	r16, r28
    8b3a:	0f 5f       	subi	r16, 0xFF	; 255
    8b3c:	1f 4f       	sbci	r17, 0xFF	; 255
    8b3e:	1f 93       	push	r17
    8b40:	0f 93       	push	r16
    8b42:	0e 94 1d b6 	call	0x16c3a	; 0x16c3a <snprintf>
    8b46:	0f b6       	in	r0, 0x3f	; 63
    8b48:	f8 94       	cli
    8b4a:	de bf       	out	0x3e, r29	; 62
    8b4c:	0f be       	out	0x3f, r0	; 63
    8b4e:	cd bf       	out	0x3d, r28	; 61
    8b50:	1f 93       	push	r17
    8b52:	0f 93       	push	r16
    8b54:	df 92       	push	r13
    8b56:	cf 92       	push	r12
    8b58:	ff 92       	push	r15
    8b5a:	ef 92       	push	r14
    8b5c:	80 e7       	ldi	r24, 0x70	; 112
    8b5e:	9f e0       	ldi	r25, 0x0F	; 15
    8b60:	9f 93       	push	r25
    8b62:	8f 93       	push	r24
    8b64:	8f 92       	push	r8
    8b66:	9f 92       	push	r9
    8b68:	c7 dd       	rcall	.-1138   	; 0x86f8 <_ZN6GSCore19writeCommandCheckOkEPKcz>
    8b6a:	0f b6       	in	r0, 0x3f	; 63
    8b6c:	f8 94       	cli
    8b6e:	de bf       	out	0x3e, r29	; 62
    8b70:	0f be       	out	0x3f, r0	; 63
    8b72:	cd bf       	out	0x3d, r28	; 61
    8b74:	e0 96       	adiw	r28, 0x30	; 48
    8b76:	0f b6       	in	r0, 0x3f	; 63
    8b78:	f8 94       	cli
    8b7a:	de bf       	out	0x3e, r29	; 62
    8b7c:	0f be       	out	0x3f, r0	; 63
    8b7e:	cd bf       	out	0x3d, r28	; 61
    8b80:	df 91       	pop	r29
    8b82:	cf 91       	pop	r28
    8b84:	1f 91       	pop	r17
    8b86:	0f 91       	pop	r16
    8b88:	ff 90       	pop	r15
    8b8a:	ef 90       	pop	r14
    8b8c:	df 90       	pop	r13
    8b8e:	cf 90       	pop	r12
    8b90:	bf 90       	pop	r11
    8b92:	af 90       	pop	r10
    8b94:	9f 90       	pop	r9
    8b96:	8f 90       	pop	r8
    8b98:	7f 90       	pop	r7
    8b9a:	08 95       	ret

00008b9c <_ZN8GSModule6setDnsERK9IPAddress>:
    8b9c:	ef 92       	push	r14
    8b9e:	ff 92       	push	r15
    8ba0:	0f 93       	push	r16
    8ba2:	1f 93       	push	r17
    8ba4:	cf 93       	push	r28
    8ba6:	df 93       	push	r29
    8ba8:	cd b7       	in	r28, 0x3d	; 61
    8baa:	de b7       	in	r29, 0x3e	; 62
    8bac:	60 97       	sbiw	r28, 0x10	; 16
    8bae:	0f b6       	in	r0, 0x3f	; 63
    8bb0:	f8 94       	cli
    8bb2:	de bf       	out	0x3e, r29	; 62
    8bb4:	0f be       	out	0x3f, r0	; 63
    8bb6:	cd bf       	out	0x3d, r28	; 61
    8bb8:	f8 2e       	mov	r15, r24
    8bba:	e9 2e       	mov	r14, r25
    8bbc:	fb 01       	movw	r30, r22
    8bbe:	85 81       	ldd	r24, Z+5	; 0x05
    8bc0:	1f 92       	push	r1
    8bc2:	8f 93       	push	r24
    8bc4:	84 81       	ldd	r24, Z+4	; 0x04
    8bc6:	1f 92       	push	r1
    8bc8:	8f 93       	push	r24
    8bca:	83 81       	ldd	r24, Z+3	; 0x03
    8bcc:	1f 92       	push	r1
    8bce:	8f 93       	push	r24
    8bd0:	82 81       	ldd	r24, Z+2	; 0x02
    8bd2:	1f 92       	push	r1
    8bd4:	8f 93       	push	r24
    8bd6:	22 e0       	ldi	r18, 0x02	; 2
    8bd8:	3e e0       	ldi	r19, 0x0E	; 14
    8bda:	3f 93       	push	r19
    8bdc:	2f 93       	push	r18
    8bde:	1f 92       	push	r1
    8be0:	80 e1       	ldi	r24, 0x10	; 16
    8be2:	8f 93       	push	r24
    8be4:	8e 01       	movw	r16, r28
    8be6:	0f 5f       	subi	r16, 0xFF	; 255
    8be8:	1f 4f       	sbci	r17, 0xFF	; 255
    8bea:	1f 93       	push	r17
    8bec:	0f 93       	push	r16
    8bee:	0e 94 1d b6 	call	0x16c3a	; 0x16c3a <snprintf>
    8bf2:	1f 93       	push	r17
    8bf4:	0f 93       	push	r16
    8bf6:	21 e9       	ldi	r18, 0x91	; 145
    8bf8:	3f e0       	ldi	r19, 0x0F	; 15
    8bfa:	3f 93       	push	r19
    8bfc:	2f 93       	push	r18
    8bfe:	ef 92       	push	r14
    8c00:	ff 92       	push	r15
    8c02:	7a dd       	rcall	.-1292   	; 0x86f8 <_ZN6GSCore19writeCommandCheckOkEPKcz>
    8c04:	0f b6       	in	r0, 0x3f	; 63
    8c06:	f8 94       	cli
    8c08:	de bf       	out	0x3e, r29	; 62
    8c0a:	0f be       	out	0x3f, r0	; 63
    8c0c:	cd bf       	out	0x3d, r28	; 61
    8c0e:	60 96       	adiw	r28, 0x10	; 16
    8c10:	0f b6       	in	r0, 0x3f	; 63
    8c12:	f8 94       	cli
    8c14:	de bf       	out	0x3e, r29	; 62
    8c16:	0f be       	out	0x3f, r0	; 63
    8c18:	cd bf       	out	0x3d, r28	; 61
    8c1a:	df 91       	pop	r29
    8c1c:	cf 91       	pop	r28
    8c1e:	1f 91       	pop	r17
    8c20:	0f 91       	pop	r16
    8c22:	ff 90       	pop	r15
    8c24:	ef 90       	pop	r14
    8c26:	08 95       	ret

00008c28 <_ZN8GSModule10disconnectEh>:
    8c28:	60 31       	cpi	r22, 0x10	; 16
    8c2a:	80 f4       	brcc	.+32     	; 0x8c4c <_ZN8GSModule10disconnectEh+0x24>
    8c2c:	1f 92       	push	r1
    8c2e:	6f 93       	push	r22
    8c30:	2e e9       	ldi	r18, 0x9E	; 158
    8c32:	3f e0       	ldi	r19, 0x0F	; 15
    8c34:	3f 93       	push	r19
    8c36:	2f 93       	push	r18
    8c38:	9f 93       	push	r25
    8c3a:	8f 93       	push	r24
    8c3c:	5d dd       	rcall	.-1350   	; 0x86f8 <_ZN6GSCore19writeCommandCheckOkEPKcz>
    8c3e:	0f 90       	pop	r0
    8c40:	0f 90       	pop	r0
    8c42:	0f 90       	pop	r0
    8c44:	0f 90       	pop	r0
    8c46:	0f 90       	pop	r0
    8c48:	0f 90       	pop	r0
    8c4a:	08 95       	ret
    8c4c:	80 e0       	ldi	r24, 0x00	; 0
    8c4e:	08 95       	ret

00008c50 <_ZN8GSModule8timeSyncERK9IPAddressmh>:
    8c50:	df 92       	push	r13
    8c52:	ef 92       	push	r14
    8c54:	ff 92       	push	r15
    8c56:	0f 93       	push	r16
    8c58:	1f 93       	push	r17
    8c5a:	cf 93       	push	r28
    8c5c:	df 93       	push	r29
    8c5e:	cd b7       	in	r28, 0x3d	; 61
    8c60:	de b7       	in	r29, 0x3e	; 62
    8c62:	64 97       	sbiw	r28, 0x14	; 20
    8c64:	0f b6       	in	r0, 0x3f	; 63
    8c66:	f8 94       	cli
    8c68:	de bf       	out	0x3e, r29	; 62
    8c6a:	0f be       	out	0x3f, r0	; 63
    8c6c:	cd bf       	out	0x3d, r28	; 61
    8c6e:	18 2f       	mov	r17, r24
    8c70:	d9 2e       	mov	r13, r25
    8c72:	fb 01       	movw	r30, r22
    8c74:	85 81       	ldd	r24, Z+5	; 0x05
    8c76:	1f 92       	push	r1
    8c78:	8f 93       	push	r24
    8c7a:	84 81       	ldd	r24, Z+4	; 0x04
    8c7c:	1f 92       	push	r1
    8c7e:	8f 93       	push	r24
    8c80:	83 81       	ldd	r24, Z+3	; 0x03
    8c82:	1f 92       	push	r1
    8c84:	8f 93       	push	r24
    8c86:	82 81       	ldd	r24, Z+2	; 0x02
    8c88:	1f 92       	push	r1
    8c8a:	8f 93       	push	r24
    8c8c:	82 e0       	ldi	r24, 0x02	; 2
    8c8e:	9e e0       	ldi	r25, 0x0E	; 14
    8c90:	9f 93       	push	r25
    8c92:	8f 93       	push	r24
    8c94:	1f 92       	push	r1
    8c96:	80 e1       	ldi	r24, 0x10	; 16
    8c98:	8f 93       	push	r24
    8c9a:	be 01       	movw	r22, r28
    8c9c:	6f 5f       	subi	r22, 0xFF	; 255
    8c9e:	7f 4f       	sbci	r23, 0xFF	; 255
    8ca0:	7b 01       	movw	r14, r22
    8ca2:	ff 92       	push	r15
    8ca4:	6f 93       	push	r22
    8ca6:	29 8b       	std	Y+17, r18	; 0x11
    8ca8:	3a 8b       	std	Y+18, r19	; 0x12
    8caa:	4b 8b       	std	Y+19, r20	; 0x13
    8cac:	5c 8b       	std	Y+20, r21	; 0x14
    8cae:	0e 94 1d b6 	call	0x16c3a	; 0x16c3a <snprintf>
    8cb2:	1f 92       	push	r1
    8cb4:	0f 93       	push	r16
    8cb6:	ff 92       	push	r15
    8cb8:	ef 92       	push	r14
    8cba:	6b ea       	ldi	r22, 0xAB	; 171
    8cbc:	7f e0       	ldi	r23, 0x0F	; 15
    8cbe:	7f 93       	push	r23
    8cc0:	6f 93       	push	r22
    8cc2:	df 92       	push	r13
    8cc4:	1f 93       	push	r17
    8cc6:	18 dd       	rcall	.-1488   	; 0x86f8 <_ZN6GSCore19writeCommandCheckOkEPKcz>
    8cc8:	0f b6       	in	r0, 0x3f	; 63
    8cca:	f8 94       	cli
    8ccc:	de bf       	out	0x3e, r29	; 62
    8cce:	0f be       	out	0x3f, r0	; 63
    8cd0:	cd bf       	out	0x3d, r28	; 61
    8cd2:	29 89       	ldd	r18, Y+17	; 0x11
    8cd4:	3a 89       	ldd	r19, Y+18	; 0x12
    8cd6:	4b 89       	ldd	r20, Y+19	; 0x13
    8cd8:	5c 89       	ldd	r21, Y+20	; 0x14
    8cda:	88 23       	and	r24, r24
    8cdc:	c9 f0       	breq	.+50     	; 0x8d10 <_ZN8GSModule8timeSyncERK9IPAddressmh+0xc0>
    8cde:	21 15       	cp	r18, r1
    8ce0:	31 05       	cpc	r19, r1
    8ce2:	41 05       	cpc	r20, r1
    8ce4:	51 05       	cpc	r21, r1
    8ce6:	a1 f0       	breq	.+40     	; 0x8d10 <_ZN8GSModule8timeSyncERK9IPAddressmh+0xc0>
    8ce8:	5f 93       	push	r21
    8cea:	4f 93       	push	r20
    8cec:	3f 93       	push	r19
    8cee:	2f 93       	push	r18
    8cf0:	1f 92       	push	r1
    8cf2:	0f 93       	push	r16
    8cf4:	ff 92       	push	r15
    8cf6:	ef 92       	push	r14
    8cf8:	22 ec       	ldi	r18, 0xC2	; 194
    8cfa:	3f e0       	ldi	r19, 0x0F	; 15
    8cfc:	3f 93       	push	r19
    8cfe:	2f 93       	push	r18
    8d00:	df 92       	push	r13
    8d02:	1f 93       	push	r17
    8d04:	f9 dc       	rcall	.-1550   	; 0x86f8 <_ZN6GSCore19writeCommandCheckOkEPKcz>
    8d06:	0f b6       	in	r0, 0x3f	; 63
    8d08:	f8 94       	cli
    8d0a:	de bf       	out	0x3e, r29	; 62
    8d0c:	0f be       	out	0x3f, r0	; 63
    8d0e:	cd bf       	out	0x3d, r28	; 61
    8d10:	64 96       	adiw	r28, 0x14	; 20
    8d12:	0f b6       	in	r0, 0x3f	; 63
    8d14:	f8 94       	cli
    8d16:	de bf       	out	0x3e, r29	; 62
    8d18:	0f be       	out	0x3f, r0	; 63
    8d1a:	cd bf       	out	0x3d, r28	; 61
    8d1c:	df 91       	pop	r29
    8d1e:	cf 91       	pop	r28
    8d20:	1f 91       	pop	r17
    8d22:	0f 91       	pop	r16
    8d24:	ff 90       	pop	r15
    8d26:	ef 90       	pop	r14
    8d28:	df 90       	pop	r13
    8d2a:	08 95       	ret

00008d2c <_ZN8GSModule9dnsLookupEPKc>:
    8d2c:	ef 92       	push	r14
    8d2e:	ff 92       	push	r15
    8d30:	0f 93       	push	r16
    8d32:	1f 93       	push	r17
    8d34:	cf 93       	push	r28
    8d36:	df 93       	push	r29
    8d38:	1f 92       	push	r1
    8d3a:	1f 92       	push	r1
    8d3c:	cd b7       	in	r28, 0x3d	; 61
    8d3e:	de b7       	in	r29, 0x3e	; 62
    8d40:	7c 01       	movw	r14, r24
    8d42:	cb 01       	movw	r24, r22
    8d44:	24 e6       	ldi	r18, 0x64	; 100
    8d46:	3c e0       	ldi	r19, 0x0C	; 12
    8d48:	f7 01       	movw	r30, r14
    8d4a:	31 83       	std	Z+1, r19	; 0x01
    8d4c:	20 83       	st	Z, r18
    8d4e:	00 91 d8 2f 	lds	r16, 0x2FD8
    8d52:	10 91 d9 2f 	lds	r17, 0x2FD9
    8d56:	20 91 da 2f 	lds	r18, 0x2FDA
    8d5a:	30 91 db 2f 	lds	r19, 0x2FDB
    8d5e:	02 83       	std	Z+2, r16	; 0x02
    8d60:	13 83       	std	Z+3, r17	; 0x03
    8d62:	24 83       	std	Z+4, r18	; 0x04
    8d64:	35 83       	std	Z+5, r19	; 0x05
    8d66:	5f 93       	push	r21
    8d68:	4f 93       	push	r20
    8d6a:	2c ed       	ldi	r18, 0xDC	; 220
    8d6c:	3f e0       	ldi	r19, 0x0F	; 15
    8d6e:	3f 93       	push	r19
    8d70:	2f 93       	push	r18
    8d72:	9f 93       	push	r25
    8d74:	6f 93       	push	r22
    8d76:	69 83       	std	Y+1, r22	; 0x01
    8d78:	9a 83       	std	Y+2, r25	; 0x02
    8d7a:	0e 94 83 3e 	call	0x7d06	; 0x7d06 <_ZN6GSCore12writeCommandEPKcz>
    8d7e:	20 e0       	ldi	r18, 0x00	; 0
    8d80:	30 e0       	ldi	r19, 0x00	; 0
    8d82:	a7 01       	movw	r20, r14
    8d84:	63 e5       	ldi	r22, 0x53	; 83
    8d86:	74 e4       	ldi	r23, 0x44	; 68
    8d88:	89 81       	ldd	r24, Y+1	; 0x01
    8d8a:	9a 81       	ldd	r25, Y+2	; 0x02
    8d8c:	5b dd       	rcall	.-1354   	; 0x8844 <_ZN6GSCore12readResponseEPFvPKhjPvES2_Ph>
    8d8e:	0f 90       	pop	r0
    8d90:	0f 90       	pop	r0
    8d92:	0f 90       	pop	r0
    8d94:	0f 90       	pop	r0
    8d96:	0f 90       	pop	r0
    8d98:	0f 90       	pop	r0
    8d9a:	88 23       	and	r24, r24
    8d9c:	69 f0       	breq	.+26     	; 0x8db8 <_ZN8GSModule9dnsLookupEPKc+0x8c>
    8d9e:	00 91 d8 2f 	lds	r16, 0x2FD8
    8da2:	10 91 d9 2f 	lds	r17, 0x2FD9
    8da6:	20 91 da 2f 	lds	r18, 0x2FDA
    8daa:	30 91 db 2f 	lds	r19, 0x2FDB
    8dae:	f7 01       	movw	r30, r14
    8db0:	02 83       	std	Z+2, r16	; 0x02
    8db2:	13 83       	std	Z+3, r17	; 0x03
    8db4:	24 83       	std	Z+4, r18	; 0x04
    8db6:	35 83       	std	Z+5, r19	; 0x05
    8db8:	c7 01       	movw	r24, r14
    8dba:	0f 90       	pop	r0
    8dbc:	0f 90       	pop	r0
    8dbe:	df 91       	pop	r29
    8dc0:	cf 91       	pop	r28
    8dc2:	1f 91       	pop	r17
    8dc4:	0f 91       	pop	r16
    8dc6:	ff 90       	pop	r15
    8dc8:	ef 90       	pop	r14
    8dca:	08 95       	ret

00008dcc <_ZN8GSModule9enableTlsEhPKc>:
    8dcc:	ef 92       	push	r14
    8dce:	ff 92       	push	r15
    8dd0:	0f 93       	push	r16
    8dd2:	1f 93       	push	r17
    8dd4:	cf 93       	push	r28
    8dd6:	df 93       	push	r29
    8dd8:	1f 92       	push	r1
    8dda:	cd b7       	in	r28, 0x3d	; 61
    8ddc:	de b7       	in	r29, 0x3e	; 62
    8dde:	7c 01       	movw	r14, r24
    8de0:	60 31       	cpi	r22, 0x10	; 16
    8de2:	b0 f5       	brcc	.+108    	; 0x8e50 <_ZN8GSModule9enableTlsEhPKc+0x84>
    8de4:	06 2f       	mov	r16, r22
    8de6:	10 e0       	ldi	r17, 0x00	; 0
    8de8:	5f 93       	push	r21
    8dea:	4f 93       	push	r20
    8dec:	1f 92       	push	r1
    8dee:	6f 93       	push	r22
    8df0:	8c ee       	ldi	r24, 0xEC	; 236
    8df2:	9f e0       	ldi	r25, 0x0F	; 15
    8df4:	9f 93       	push	r25
    8df6:	8f 93       	push	r24
    8df8:	ff 92       	push	r15
    8dfa:	ef 92       	push	r14
    8dfc:	69 83       	std	Y+1, r22	; 0x01
    8dfe:	7c dc       	rcall	.-1800   	; 0x86f8 <_ZN6GSCore19writeCommandCheckOkEPKcz>
    8e00:	0f b6       	in	r0, 0x3f	; 63
    8e02:	f8 94       	cli
    8e04:	de bf       	out	0x3e, r29	; 62
    8e06:	0f be       	out	0x3f, r0	; 63
    8e08:	cd bf       	out	0x3d, r28	; 61
    8e0a:	69 81       	ldd	r22, Y+1	; 0x01
    8e0c:	29 e0       	ldi	r18, 0x09	; 9
    8e0e:	88 23       	and	r24, r24
    8e10:	79 f0       	breq	.+30     	; 0x8e30 <_ZN8GSModule9enableTlsEhPKc+0x64>
    8e12:	20 9f       	mul	r18, r16
    8e14:	c0 01       	movw	r24, r0
    8e16:	21 9f       	mul	r18, r17
    8e18:	90 0d       	add	r25, r0
    8e1a:	11 24       	eor	r1, r1
    8e1c:	8e 0d       	add	r24, r14
    8e1e:	9f 1d       	adc	r25, r15
    8e20:	fc 01       	movw	r30, r24
    8e22:	e2 5b       	subi	r30, 0xB2	; 178
    8e24:	fd 4f       	sbci	r31, 0xFD	; 253
    8e26:	80 81       	ld	r24, Z
    8e28:	82 60       	ori	r24, 0x02	; 2
    8e2a:	80 83       	st	Z, r24
    8e2c:	81 e0       	ldi	r24, 0x01	; 1
    8e2e:	11 c0       	rjmp	.+34     	; 0x8e52 <_ZN8GSModule9enableTlsEhPKc+0x86>
    8e30:	20 9f       	mul	r18, r16
    8e32:	c0 01       	movw	r24, r0
    8e34:	21 9f       	mul	r18, r17
    8e36:	90 0d       	add	r25, r0
    8e38:	11 24       	eor	r1, r1
    8e3a:	8e 0d       	add	r24, r14
    8e3c:	9f 1d       	adc	r25, r15
    8e3e:	fc 01       	movw	r30, r24
    8e40:	e2 5b       	subi	r30, 0xB2	; 178
    8e42:	fd 4f       	sbci	r31, 0xFD	; 253
    8e44:	80 81       	ld	r24, Z
    8e46:	84 60       	ori	r24, 0x04	; 4
    8e48:	80 83       	st	Z, r24
    8e4a:	c7 01       	movw	r24, r14
    8e4c:	0e 94 22 39 	call	0x7244	; 0x7244 <_ZN6GSCore17processDisconnectEh>
    8e50:	80 e0       	ldi	r24, 0x00	; 0
    8e52:	0f 90       	pop	r0
    8e54:	df 91       	pop	r29
    8e56:	cf 91       	pop	r28
    8e58:	1f 91       	pop	r17
    8e5a:	0f 91       	pop	r16
    8e5c:	ff 90       	pop	r15
    8e5e:	ef 90       	pop	r14
    8e60:	08 95       	ret

00008e62 <_ZN8GSModule7addCertEPKcbPKhj>:
    8e62:	cf 92       	push	r12
    8e64:	df 92       	push	r13
    8e66:	ef 92       	push	r14
    8e68:	ff 92       	push	r15
    8e6a:	0f 93       	push	r16
    8e6c:	1f 93       	push	r17
    8e6e:	cf 93       	push	r28
    8e70:	df 93       	push	r29
    8e72:	1f 92       	push	r1
    8e74:	1f 92       	push	r1
    8e76:	cd b7       	in	r28, 0x3d	; 61
    8e78:	de b7       	in	r29, 0x3e	; 62
    8e7a:	6c 01       	movw	r12, r24
    8e7c:	79 01       	movw	r14, r18
    8e7e:	91 e0       	ldi	r25, 0x01	; 1
    8e80:	49 27       	eor	r20, r25
    8e82:	1f 92       	push	r1
    8e84:	4f 93       	push	r20
    8e86:	1f 93       	push	r17
    8e88:	0f 93       	push	r16
    8e8a:	7f 93       	push	r23
    8e8c:	6f 93       	push	r22
    8e8e:	ed ef       	ldi	r30, 0xFD	; 253
    8e90:	ff e0       	ldi	r31, 0x0F	; 15
    8e92:	ff 93       	push	r31
    8e94:	ef 93       	push	r30
    8e96:	df 92       	push	r13
    8e98:	cf 92       	push	r12
    8e9a:	2e dc       	rcall	.-1956   	; 0x86f8 <_ZN6GSCore19writeCommandCheckOkEPKcz>
    8e9c:	98 2f       	mov	r25, r24
    8e9e:	0f b6       	in	r0, 0x3f	; 63
    8ea0:	f8 94       	cli
    8ea2:	de bf       	out	0x3e, r29	; 62
    8ea4:	0f be       	out	0x3f, r0	; 63
    8ea6:	cd bf       	out	0x3d, r28	; 61
    8ea8:	88 23       	and	r24, r24
    8eaa:	c1 f0       	breq	.+48     	; 0x8edc <_ZN8GSModule7addCertEPKcbPKhj+0x7a>
    8eac:	8b e1       	ldi	r24, 0x1B	; 27
    8eae:	89 83       	std	Y+1, r24	; 0x01
    8eb0:	87 e5       	ldi	r24, 0x57	; 87
    8eb2:	8a 83       	std	Y+2, r24	; 0x02
    8eb4:	42 e0       	ldi	r20, 0x02	; 2
    8eb6:	50 e0       	ldi	r21, 0x00	; 0
    8eb8:	be 01       	movw	r22, r28
    8eba:	6f 5f       	subi	r22, 0xFF	; 255
    8ebc:	7f 4f       	sbci	r23, 0xFF	; 255
    8ebe:	c6 01       	movw	r24, r12
    8ec0:	0e 94 60 3d 	call	0x7ac0	; 0x7ac0 <_ZN6GSCore8writeRawEPKhj>
    8ec4:	a8 01       	movw	r20, r16
    8ec6:	b7 01       	movw	r22, r14
    8ec8:	c6 01       	movw	r24, r12
    8eca:	0e 94 60 3d 	call	0x7ac0	; 0x7ac0 <_ZN6GSCore8writeRawEPKhj>
    8ece:	60 e0       	ldi	r22, 0x00	; 0
    8ed0:	70 e0       	ldi	r23, 0x00	; 0
    8ed2:	c6 01       	movw	r24, r12
    8ed4:	e7 db       	rcall	.-2098   	; 0x86a4 <_ZN6GSCore12readResponseEPh>
    8ed6:	91 e0       	ldi	r25, 0x01	; 1
    8ed8:	81 11       	cpse	r24, r1
    8eda:	90 e0       	ldi	r25, 0x00	; 0
    8edc:	89 2f       	mov	r24, r25
    8ede:	0f 90       	pop	r0
    8ee0:	0f 90       	pop	r0
    8ee2:	df 91       	pop	r29
    8ee4:	cf 91       	pop	r28
    8ee6:	1f 91       	pop	r17
    8ee8:	0f 91       	pop	r16
    8eea:	ff 90       	pop	r15
    8eec:	ef 90       	pop	r14
    8eee:	df 90       	pop	r13
    8ef0:	cf 90       	pop	r12
    8ef2:	08 95       	ret

00008ef4 <_ZN8GSModule20setAutoConnectClientEPKcjNS_8ProtocolE>:
    8ef4:	5f 93       	push	r21
    8ef6:	4f 93       	push	r20
    8ef8:	7f 93       	push	r23
    8efa:	6f 93       	push	r22
    8efc:	1f 92       	push	r1
    8efe:	2f 93       	push	r18
    8f00:	24 e1       	ldi	r18, 0x14	; 20
    8f02:	30 e1       	ldi	r19, 0x10	; 16
    8f04:	3f 93       	push	r19
    8f06:	2f 93       	push	r18
    8f08:	9f 93       	push	r25
    8f0a:	8f 93       	push	r24
    8f0c:	f5 db       	rcall	.-2070   	; 0x86f8 <_ZN6GSCore19writeCommandCheckOkEPKcz>
    8f0e:	2d b7       	in	r18, 0x3d	; 61
    8f10:	3e b7       	in	r19, 0x3e	; 62
    8f12:	26 5f       	subi	r18, 0xF6	; 246
    8f14:	3f 4f       	sbci	r19, 0xFF	; 255
    8f16:	0f b6       	in	r0, 0x3f	; 63
    8f18:	f8 94       	cli
    8f1a:	3e bf       	out	0x3e, r19	; 62
    8f1c:	0f be       	out	0x3f, r0	; 63
    8f1e:	2d bf       	out	0x3d, r18	; 61
    8f20:	08 95       	ret

00008f22 <_ZN8GSModule6setNcmEbbbNS_7NCMModeE>:

bool GSModule::setNcm(bool enabled, bool associate_only, bool remember, NCMMode mode)
{
    8f22:	0f 93       	push	r16
    8f24:	1f 93       	push	r17
    8f26:	cf 93       	push	r28
    8f28:	df 93       	push	r29
    8f2a:	1f 92       	push	r1
    8f2c:	1f 92       	push	r1
    8f2e:	cd b7       	in	r28, 0x3d	; 61
    8f30:	de b7       	in	r29, 0x3e	; 62
    8f32:	18 2f       	mov	r17, r24
  bool res = writeCommandCheckOk("AT+NCMAUTO=%d,%d,%d,%d", mode, enabled, !associate_only, !remember);
    8f34:	81 e0       	ldi	r24, 0x01	; 1
    8f36:	28 27       	eor	r18, r24
    8f38:	1f 92       	push	r1
    8f3a:	2f 93       	push	r18
    8f3c:	48 27       	eor	r20, r24
    8f3e:	1f 92       	push	r1
    8f40:	4f 93       	push	r20
    8f42:	1f 92       	push	r1
    8f44:	6f 93       	push	r22
    8f46:	1f 92       	push	r1
    8f48:	0f 93       	push	r16
    8f4a:	2a e3       	ldi	r18, 0x3A	; 58
    8f4c:	30 e1       	ldi	r19, 0x10	; 16
    8f4e:	3f 93       	push	r19
    8f50:	2f 93       	push	r18
    8f52:	9f 93       	push	r25
    8f54:	1f 93       	push	r17
    8f56:	69 83       	std	Y+1, r22	; 0x01
    8f58:	9a 83       	std	Y+2, r25	; 0x02
    8f5a:	ce db       	rcall	.-2148   	; 0x86f8 <_ZN6GSCore19writeCommandCheckOkEPKcz>
    8f5c:	08 2f       	mov	r16, r24
  if (!enabled && res)
    8f5e:	0f b6       	in	r0, 0x3f	; 63
    8f60:	f8 94       	cli
    8f62:	de bf       	out	0x3e, r29	; 62
    8f64:	0f be       	out	0x3f, r0	; 63
    8f66:	cd bf       	out	0x3d, r28	; 61
    8f68:	69 81       	ldd	r22, Y+1	; 0x01
    8f6a:	9a 81       	ldd	r25, Y+2	; 0x02
    8f6c:	61 11       	cpse	r22, r1
    8f6e:	05 c0       	rjmp	.+10     	; 0x8f7a <_ZN8GSModule6setNcmEbbbNS_7NCMModeE+0x58>
    8f70:	88 23       	and	r24, r24
    8f72:	19 f0       	breq	.+6      	; 0x8f7a <_ZN8GSModule6setNcmEbbbNS_7NCMModeE+0x58>
    processDisassociation();
    8f74:	81 2f       	mov	r24, r17
    8f76:	0e 94 41 39 	call	0x7282	; 0x7282 <_ZN6GSCore21processDisassociationEv>
  return res;
}
    8f7a:	80 2f       	mov	r24, r16
    8f7c:	0f 90       	pop	r0
    8f7e:	0f 90       	pop	r0
    8f80:	df 91       	pop	r29
    8f82:	cf 91       	pop	r28
    8f84:	1f 91       	pop	r17
    8f86:	0f 91       	pop	r16
    8f88:	08 95       	ret

00008f8a <_GLOBAL__sub_I__ZN8GSModule10connectTcpERK9IPAddressj>:
    8f8a:	0f 93       	push	r16
    8f8c:	00 e0       	ldi	r16, 0x00	; 0
    8f8e:	20 e0       	ldi	r18, 0x00	; 0
    8f90:	40 e0       	ldi	r20, 0x00	; 0
    8f92:	60 e0       	ldi	r22, 0x00	; 0
    8f94:	86 ed       	ldi	r24, 0xD6	; 214
    8f96:	9f e2       	ldi	r25, 0x2F	; 47
    8f98:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <_ZN9IPAddressC1Ehhhh>
    8f9c:	0f 91       	pop	r16
    8f9e:	08 95       	ret

00008fa0 <_ZN11GSTcpClient7connectEPKcj>:

int GSTcpClient::connect(const char *host, uint16_t port)
{
  // TODO
  return false;
}
    8fa0:	80 e0       	ldi	r24, 0x00	; 0
    8fa2:	90 e0       	ldi	r25, 0x00	; 0
    8fa4:	08 95       	ret

00008fa6 <_ZN11GSTcpClient9enableTlsEPKc>:

bool GSTcpClient::enableTls(const char *certname)
{
    8fa6:	ab 01       	movw	r20, r22
  return gs.enableTls(this->cid, certname);
    8fa8:	fc 01       	movw	r30, r24
    8faa:	66 85       	ldd	r22, Z+14	; 0x0e
    8fac:	84 85       	ldd	r24, Z+12	; 0x0c
    8fae:	95 85       	ldd	r25, Z+13	; 0x0d
    8fb0:	0d cf       	rjmp	.-486    	; 0x8dcc <_ZN8GSModule9enableTlsEhPKc>

00008fb2 <_ZN11GSTcpClient12sslConnectedEv>:
}

uint8_t GSTcpClient::sslConnected()
{
    8fb2:	ef 92       	push	r14
    8fb4:	ff 92       	push	r15
    8fb6:	0f 93       	push	r16
    8fb8:	1f 93       	push	r17
    8fba:	cf 93       	push	r28
    8fbc:	df 93       	push	r29
    8fbe:	ec 01       	movw	r28, r24
  if (this->cid == GSModule::INVALID_CID)
    8fc0:	ee 84       	ldd	r14, Y+14	; 0x0e
    8fc2:	8f ef       	ldi	r24, 0xFF	; 255
    8fc4:	e8 16       	cp	r14, r24
    8fc6:	09 f1       	breq	.+66     	; 0x900a <_ZN11GSTcpClient12sslConnectedEv+0x58>
    return false;
  return gs.getConnectionInfo(this->cid).connected && gs.getConnectionInfo(this->cid).ssl;
    8fc8:	0c 85       	ldd	r16, Y+12	; 0x0c
    8fca:	1d 85       	ldd	r17, Y+13	; 0x0d
    8fcc:	c8 01       	movw	r24, r16
    8fce:	84 d9       	rcall	.-3320   	; 0x82d8 <_ZN6GSCore19readAndProcessAsyncEv>
    8fd0:	89 e0       	ldi	r24, 0x09	; 9
    8fd2:	f8 2e       	mov	r15, r24
    8fd4:	f8 01       	movw	r30, r16
    8fd6:	fe 9c       	mul	r15, r14
    8fd8:	e0 0d       	add	r30, r0
    8fda:	f1 1d       	adc	r31, r1
    8fdc:	11 24       	eor	r1, r1
    8fde:	e2 5b       	subi	r30, 0xB2	; 178
    8fe0:	fd 4f       	sbci	r31, 0xFD	; 253
    8fe2:	80 81       	ld	r24, Z
    8fe4:	80 ff       	sbrs	r24, 0
    8fe6:	11 c0       	rjmp	.+34     	; 0x900a <_ZN11GSTcpClient12sslConnectedEv+0x58>
    8fe8:	1e 85       	ldd	r17, Y+14	; 0x0e
    8fea:	0c 84       	ldd	r0, Y+12	; 0x0c
    8fec:	dd 85       	ldd	r29, Y+13	; 0x0d
    8fee:	c0 2d       	mov	r28, r0
    8ff0:	ce 01       	movw	r24, r28
    8ff2:	72 d9       	rcall	.-3356   	; 0x82d8 <_ZN6GSCore19readAndProcessAsyncEv>
    8ff4:	fe 01       	movw	r30, r28
    8ff6:	f1 9e       	mul	r15, r17
    8ff8:	e0 0d       	add	r30, r0
    8ffa:	f1 1d       	adc	r31, r1
    8ffc:	11 24       	eor	r1, r1
    8ffe:	e2 5b       	subi	r30, 0xB2	; 178
    9000:	fd 4f       	sbci	r31, 0xFD	; 253
    9002:	80 81       	ld	r24, Z
    9004:	86 95       	lsr	r24
    9006:	81 70       	andi	r24, 0x01	; 1
    9008:	01 c0       	rjmp	.+2      	; 0x900c <_ZN11GSTcpClient12sslConnectedEv+0x5a>
}

uint8_t GSTcpClient::sslConnected()
{
  if (this->cid == GSModule::INVALID_CID)
    return false;
    900a:	80 e0       	ldi	r24, 0x00	; 0
  return gs.getConnectionInfo(this->cid).connected && gs.getConnectionInfo(this->cid).ssl;
}
    900c:	df 91       	pop	r29
    900e:	cf 91       	pop	r28
    9010:	1f 91       	pop	r17
    9012:	0f 91       	pop	r16
    9014:	ff 90       	pop	r15
    9016:	ef 90       	pop	r14
    9018:	08 95       	ret

0000901a <_ZN11GSTcpClient7connectE9IPAddressj>:
 */

#include "GSTcpClient.h"

int GSTcpClient::connect(IPAddress ip, uint16_t port)
{
    901a:	0f 93       	push	r16
    901c:	1f 93       	push	r17
    901e:	cf 93       	push	r28
    9020:	df 93       	push	r29
    9022:	00 d0       	rcall	.+0      	; 0x9024 <_ZN11GSTcpClient7connectE9IPAddressj+0xa>
    9024:	1f 92       	push	r1
    9026:	cd b7       	in	r28, 0x3d	; 61
    9028:	de b7       	in	r29, 0x3e	; 62
    902a:	8c 01       	movw	r16, r24
  if (connected())
    902c:	dc 01       	movw	r26, r24
    902e:	ed 91       	ld	r30, X+
    9030:	fc 91       	ld	r31, X
    9032:	04 88       	ldd	r0, Z+20	; 0x14
    9034:	f5 89       	ldd	r31, Z+21	; 0x15
    9036:	e0 2d       	mov	r30, r0
    9038:	4b 83       	std	Y+3, r20	; 0x03
    903a:	5c 83       	std	Y+4, r21	; 0x04
    903c:	69 83       	std	Y+1, r22	; 0x01
    903e:	7a 83       	std	Y+2, r23	; 0x02
    9040:	19 95       	eicall
    9042:	4b 81       	ldd	r20, Y+3	; 0x03
    9044:	5c 81       	ldd	r21, Y+4	; 0x04
    9046:	69 81       	ldd	r22, Y+1	; 0x01
    9048:	7a 81       	ldd	r23, Y+2	; 0x02
    904a:	81 11       	cpse	r24, r1
    904c:	0c c0       	rjmp	.+24     	; 0x9066 <_ZN11GSTcpClient7connectE9IPAddressj+0x4c>
    return false;

  GSModule::cid_t cid = gs.connectTcp(ip, port);
    904e:	f8 01       	movw	r30, r16
    9050:	84 85       	ldd	r24, Z+12	; 0x0c
    9052:	95 85       	ldd	r25, Z+13	; 0x0d
    9054:	5b dc       	rcall	.-1866   	; 0x890c <_ZN8GSModule10connectTcpERK9IPAddressj>
  if (cid == GSModule::INVALID_CID)
    9056:	8f 3f       	cpi	r24, 0xFF	; 255
    9058:	31 f0       	breq	.+12     	; 0x9066 <_ZN11GSTcpClient7connectE9IPAddressj+0x4c>
    return false;

  this->cid = cid;
    905a:	d8 01       	movw	r26, r16
    905c:	1e 96       	adiw	r26, 0x0e	; 14
    905e:	8c 93       	st	X, r24
  return true;
    9060:	81 e0       	ldi	r24, 0x01	; 1
    9062:	90 e0       	ldi	r25, 0x00	; 0
    9064:	02 c0       	rjmp	.+4      	; 0x906a <_ZN11GSTcpClient7connectE9IPAddressj+0x50>
#include "GSTcpClient.h"

int GSTcpClient::connect(IPAddress ip, uint16_t port)
{
  if (connected())
    return false;
    9066:	80 e0       	ldi	r24, 0x00	; 0
    9068:	90 e0       	ldi	r25, 0x00	; 0
  if (cid == GSModule::INVALID_CID)
    return false;

  this->cid = cid;
  return true;
}
    906a:	0f 90       	pop	r0
    906c:	0f 90       	pop	r0
    906e:	0f 90       	pop	r0
    9070:	0f 90       	pop	r0
    9072:	df 91       	pop	r29
    9074:	cf 91       	pop	r28
    9076:	1f 91       	pop	r17
    9078:	0f 91       	pop	r16
    907a:	08 95       	ret

0000907c <_GLOBAL__sub_I__ZN11GSTcpClient7connectE9IPAddressj>:
uint8_t GSTcpClient::sslConnected()
{
  if (this->cid == GSModule::INVALID_CID)
    return false;
  return gs.getConnectionInfo(this->cid).connected && gs.getConnectionInfo(this->cid).ssl;
}
    907c:	0f 93       	push	r16
    907e:	00 e0       	ldi	r16, 0x00	; 0
    9080:	20 e0       	ldi	r18, 0x00	; 0
    9082:	40 e0       	ldi	r20, 0x00	; 0
    9084:	60 e0       	ldi	r22, 0x00	; 0
    9086:	8c ed       	ldi	r24, 0xDC	; 220
    9088:	9f e2       	ldi	r25, 0x2F	; 47
    908a:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <_ZN9IPAddressC1Ehhhh>
    908e:	0f 91       	pop	r16
    9090:	08 95       	ret

00009092 <_GLOBAL__sub_I__ZN11GSUdpClient7connectE9IPAddressj>:

int GSUdpClient::connect(const char *host, uint16_t port)
{
  // TODO
  return false;
}
    9092:	0f 93       	push	r16
    9094:	00 e0       	ldi	r16, 0x00	; 0
    9096:	20 e0       	ldi	r18, 0x00	; 0
    9098:	40 e0       	ldi	r20, 0x00	; 0
    909a:	60 e0       	ldi	r22, 0x00	; 0
    909c:	82 ee       	ldi	r24, 0xE2	; 226
    909e:	9f e2       	ldi	r25, 0x2F	; 47
    90a0:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <_ZN9IPAddressC1Ehhhh>
    90a4:	0f 91       	pop	r16
    90a6:	08 95       	ret

000090a8 <_GLOBAL__sub_I__ZN11GSUdpServer5beginEj>:
}

void GSUdpServer::stop()
{
  gs.disconnect(this->cid);
}
    90a8:	0f 93       	push	r16
    90aa:	00 e0       	ldi	r16, 0x00	; 0
    90ac:	20 e0       	ldi	r18, 0x00	; 0
    90ae:	40 e0       	ldi	r20, 0x00	; 0
    90b0:	60 e0       	ldi	r22, 0x00	; 0
    90b2:	88 ee       	ldi	r24, 0xE8	; 232
    90b4:	9f e2       	ldi	r25, 0x2F	; 47
    90b6:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <_ZN9IPAddressC1Ehhhh>
    90ba:	0f 91       	pop	r16
    90bc:	08 95       	ret

000090be <j0g>:
#include "js0n.h"
#include "j0g.h"

// dumbed down parser, expects null terminated json, if fails the *index is 0 (and safe to pass into j0g_*)
char *j0g(const char *json, unsigned short *index, int ilen)
{
    90be:	0f 93       	push	r16
    90c0:	1f 93       	push	r17
    90c2:	cf 93       	push	r28
    90c4:	df 93       	push	r29
    90c6:	ec 01       	movw	r28, r24
    90c8:	8b 01       	movw	r16, r22
  int ret, len;
  if(!json) return NULL;
    90ca:	00 97       	sbiw	r24, 0x00	; 0
    90cc:	99 f0       	breq	.+38     	; 0x90f4 <j0g+0x36>
  len = strlen(json);
    90ce:	fc 01       	movw	r30, r24
    90d0:	01 90       	ld	r0, Z+
    90d2:	00 20       	and	r0, r0
    90d4:	e9 f7       	brne	.-6      	; 0x90d0 <j0g+0x12>
    90d6:	31 97       	sbiw	r30, 0x01	; 1
    90d8:	bf 01       	movw	r22, r30
    90da:	68 1b       	sub	r22, r24
    90dc:	79 0b       	sbc	r23, r25
  ret = js0n((unsigned char*)json, len, index, ilen);
    90de:	9a 01       	movw	r18, r20
    90e0:	a8 01       	movw	r20, r16
    90e2:	c4 d0       	rcall	.+392    	; 0x926c <js0n>
  if(ret) *index = 0;
    90e4:	89 2b       	or	r24, r25
    90e6:	49 f0       	breq	.+18     	; 0x90fa <j0g+0x3c>
    90e8:	f8 01       	movw	r30, r16
    90ea:	11 82       	std	Z+1, r1	; 0x01
    90ec:	10 82       	st	Z, r1
  return (char*)json;
    90ee:	8c 2f       	mov	r24, r28
    90f0:	9d 2f       	mov	r25, r29
    90f2:	05 c0       	rjmp	.+10     	; 0x90fe <j0g+0x40>

// dumbed down parser, expects null terminated json, if fails the *index is 0 (and safe to pass into j0g_*)
char *j0g(const char *json, unsigned short *index, int ilen)
{
  int ret, len;
  if(!json) return NULL;
    90f4:	80 e0       	ldi	r24, 0x00	; 0
    90f6:	90 e0       	ldi	r25, 0x00	; 0
    90f8:	02 c0       	rjmp	.+4      	; 0x90fe <j0g+0x40>
  len = strlen(json);
  ret = js0n((unsigned char*)json, len, index, ilen);
  if(ret) *index = 0;
  return (char*)json;
    90fa:	8c 2f       	mov	r24, r28
    90fc:	9d 2f       	mov	r25, r29
}
    90fe:	df 91       	pop	r29
    9100:	cf 91       	pop	r28
    9102:	1f 91       	pop	r17
    9104:	0f 91       	pop	r16
    9106:	08 95       	ret

00009108 <j0g_safe>:
  return j0g_safe(val, json, index);
}

// null terminate and unescape any string at this value
char *j0g_safe(int val, char *json, const unsigned short *index)
{
    9108:	cf 93       	push	r28
    910a:	df 93       	push	r29
  char *str, *cursor;
  *(json+(index[val]+index[val+1])) = 0; // null terminate
    910c:	88 0f       	add	r24, r24
    910e:	99 1f       	adc	r25, r25
    9110:	48 0f       	add	r20, r24
    9112:	59 1f       	adc	r21, r25
    9114:	da 01       	movw	r26, r20
    9116:	12 96       	adiw	r26, 0x02	; 2
    9118:	ed 91       	ld	r30, X+
    911a:	fc 91       	ld	r31, X
    911c:	13 97       	sbiw	r26, 0x03	; 3
    911e:	e6 0f       	add	r30, r22
    9120:	f7 1f       	adc	r31, r23
    9122:	8d 91       	ld	r24, X+
    9124:	9c 91       	ld	r25, X
    9126:	11 97       	sbiw	r26, 0x01	; 1
    9128:	e8 0f       	add	r30, r24
    912a:	f9 1f       	adc	r31, r25
    912c:	10 82       	st	Z, r1
  // unescape stuff
  for(cursor=str=json+index[val]; *cursor; cursor++,str++)
    912e:	ed 91       	ld	r30, X+
    9130:	fc 91       	ld	r31, X
    9132:	e6 0f       	add	r30, r22
    9134:	f7 1f       	adc	r31, r23
    9136:	80 81       	ld	r24, Z
    9138:	88 23       	and	r24, r24
    913a:	d9 f0       	breq	.+54     	; 0x9172 <j0g_safe+0x6a>
    913c:	ef 01       	movw	r28, r30
    if(*cursor == '\\' && *(cursor+1) == 'n')
    {
      *str = '\n';
      cursor++;
    }else if(*cursor == '\\' && *(cursor+1) == '"'){
      *str = '"';
    913e:	32 e2       	ldi	r19, 0x22	; 34
  // unescape stuff
  for(cursor=str=json+index[val]; *cursor; cursor++,str++)
  {
    if(*cursor == '\\' && *(cursor+1) == 'n')
    {
      *str = '\n';
    9140:	2a e0       	ldi	r18, 0x0A	; 10
  char *str, *cursor;
  *(json+(index[val]+index[val+1])) = 0; // null terminate
  // unescape stuff
  for(cursor=str=json+index[val]; *cursor; cursor++,str++)
  {
    if(*cursor == '\\' && *(cursor+1) == 'n')
    9142:	8c 35       	cpi	r24, 0x5C	; 92
    9144:	69 f4       	brne	.+26     	; 0x9160 <j0g_safe+0x58>
    9146:	99 81       	ldd	r25, Y+1	; 0x01
    9148:	9e 36       	cpi	r25, 0x6E	; 110
    914a:	21 f4       	brne	.+8      	; 0x9154 <j0g_safe+0x4c>
    {
      *str = '\n';
    914c:	20 83       	st	Z, r18
      cursor++;
    914e:	de 01       	movw	r26, r28
    9150:	11 96       	adiw	r26, 0x01	; 1
    9152:	08 c0       	rjmp	.+16     	; 0x9164 <j0g_safe+0x5c>
    }else if(*cursor == '\\' && *(cursor+1) == '"'){
    9154:	92 32       	cpi	r25, 0x22	; 34
    9156:	21 f4       	brne	.+8      	; 0x9160 <j0g_safe+0x58>
      *str = '"';
    9158:	30 83       	st	Z, r19
      cursor++;
    915a:	de 01       	movw	r26, r28
    915c:	11 96       	adiw	r26, 0x01	; 1
    915e:	02 c0       	rjmp	.+4      	; 0x9164 <j0g_safe+0x5c>
    }else{
      *str = *cursor;
    9160:	80 83       	st	Z, r24
    9162:	de 01       	movw	r26, r28
char *j0g_safe(int val, char *json, const unsigned short *index)
{
  char *str, *cursor;
  *(json+(index[val]+index[val+1])) = 0; // null terminate
  // unescape stuff
  for(cursor=str=json+index[val]; *cursor; cursor++,str++)
    9164:	ed 01       	movw	r28, r26
    9166:	21 96       	adiw	r28, 0x01	; 1
    9168:	31 96       	adiw	r30, 0x01	; 1
    916a:	11 96       	adiw	r26, 0x01	; 1
    916c:	8c 91       	ld	r24, X
    916e:	81 11       	cpse	r24, r1
    9170:	e8 cf       	rjmp	.-48     	; 0x9142 <j0g_safe+0x3a>
      cursor++;
    }else{
      *str = *cursor;
    }
  }
  *str = *cursor; // copy null terminator too
    9172:	80 83       	st	Z, r24
  return (char*)json+index[val];
    9174:	fa 01       	movw	r30, r20
    9176:	80 81       	ld	r24, Z
    9178:	91 81       	ldd	r25, Z+1	; 0x01
}
    917a:	86 0f       	add	r24, r22
    917c:	97 1f       	adc	r25, r23
    917e:	df 91       	pop	r29
    9180:	cf 91       	pop	r28
    9182:	08 95       	ret

00009184 <j0g_val>:
  return 0;
}

// return the index offset of the value matching the given key
int j0g_val(const char *key, char *json, const unsigned short *index)
{
    9184:	8f 92       	push	r8
    9186:	9f 92       	push	r9
    9188:	af 92       	push	r10
    918a:	bf 92       	push	r11
    918c:	cf 92       	push	r12
    918e:	df 92       	push	r13
    9190:	ef 92       	push	r14
    9192:	ff 92       	push	r15
    9194:	0f 93       	push	r16
    9196:	1f 93       	push	r17
    9198:	cf 93       	push	r28
    919a:	df 93       	push	r29
    919c:	5c 01       	movw	r10, r24
    919e:	4b 01       	movw	r8, r22
    91a0:	6a 01       	movw	r12, r20
  if(!key || !json) return 0;
    91a2:	00 97       	sbiw	r24, 0x00	; 0
    91a4:	b9 f1       	breq	.+110    	; 0x9214 <j0g_val+0x90>
    91a6:	61 15       	cp	r22, r1
    91a8:	71 05       	cpc	r23, r1
    91aa:	b9 f1       	breq	.+110    	; 0x921a <j0g_val+0x96>
  int i, klen = strlen(key);
    91ac:	fc 01       	movw	r30, r24
    91ae:	01 90       	ld	r0, Z+
    91b0:	00 20       	and	r0, r0
    91b2:	e9 f7       	brne	.-6      	; 0x91ae <j0g_val+0x2a>
    91b4:	31 97       	sbiw	r30, 0x01	; 1
    91b6:	7f 01       	movw	r14, r30
    91b8:	e8 1a       	sub	r14, r24
    91ba:	f9 0a       	sbc	r15, r25
	for(i=0;index[i];i+=4)
    91bc:	fa 01       	movw	r30, r20
    91be:	60 81       	ld	r22, Z
    91c0:	71 81       	ldd	r23, Z+1	; 0x01
    91c2:	61 15       	cp	r22, r1
    91c4:	71 05       	cpc	r23, r1
    91c6:	61 f1       	breq	.+88     	; 0x9220 <j0g_val+0x9c>
    91c8:	8a 01       	movw	r16, r20
    91ca:	80 e0       	ldi	r24, 0x00	; 0
    91cc:	90 e0       	ldi	r25, 0x00	; 0
    91ce:	c0 e0       	ldi	r28, 0x00	; 0
    91d0:	d0 e0       	ldi	r29, 0x00	; 0
	{
    if(klen == index[i+1] && strncmp(key,(char*)json+index[i],klen) == 0) return i+2;
    91d2:	01 96       	adiw	r24, 0x01	; 1
    91d4:	fc 01       	movw	r30, r24
    91d6:	ee 0f       	add	r30, r30
    91d8:	ff 1f       	adc	r31, r31
    91da:	ec 0d       	add	r30, r12
    91dc:	fd 1d       	adc	r31, r13
    91de:	80 81       	ld	r24, Z
    91e0:	91 81       	ldd	r25, Z+1	; 0x01
    91e2:	e8 16       	cp	r14, r24
    91e4:	f9 06       	cpc	r15, r25
    91e6:	59 f4       	brne	.+22     	; 0x91fe <j0g_val+0x7a>
    91e8:	68 0d       	add	r22, r8
    91ea:	79 1d       	adc	r23, r9
    91ec:	a7 01       	movw	r20, r14
    91ee:	c5 01       	movw	r24, r10
    91f0:	0e 94 7e b5 	call	0x16afc	; 0x16afc <strncmp>
    91f4:	89 2b       	or	r24, r25
    91f6:	19 f4       	brne	.+6      	; 0x91fe <j0g_val+0x7a>
    91f8:	ce 01       	movw	r24, r28
    91fa:	02 96       	adiw	r24, 0x02	; 2
    91fc:	16 c0       	rjmp	.+44     	; 0x922a <j0g_val+0xa6>
// return the index offset of the value matching the given key
int j0g_val(const char *key, char *json, const unsigned short *index)
{
  if(!key || !json) return 0;
  int i, klen = strlen(key);
	for(i=0;index[i];i+=4)
    91fe:	24 96       	adiw	r28, 0x04	; 4
    9200:	ce 01       	movw	r24, r28
    9202:	08 5f       	subi	r16, 0xF8	; 248
    9204:	1f 4f       	sbci	r17, 0xFF	; 255
    9206:	f8 01       	movw	r30, r16
    9208:	60 81       	ld	r22, Z
    920a:	71 81       	ldd	r23, Z+1	; 0x01
    920c:	61 15       	cp	r22, r1
    920e:	71 05       	cpc	r23, r1
    9210:	01 f7       	brne	.-64     	; 0x91d2 <j0g_val+0x4e>
    9212:	09 c0       	rjmp	.+18     	; 0x9226 <j0g_val+0xa2>
}

// return the index offset of the value matching the given key
int j0g_val(const char *key, char *json, const unsigned short *index)
{
  if(!key || !json) return 0;
    9214:	80 e0       	ldi	r24, 0x00	; 0
    9216:	90 e0       	ldi	r25, 0x00	; 0
    9218:	08 c0       	rjmp	.+16     	; 0x922a <j0g_val+0xa6>
    921a:	80 e0       	ldi	r24, 0x00	; 0
    921c:	90 e0       	ldi	r25, 0x00	; 0
    921e:	05 c0       	rjmp	.+10     	; 0x922a <j0g_val+0xa6>
  int i, klen = strlen(key);
	for(i=0;index[i];i+=4)
	{
    if(klen == index[i+1] && strncmp(key,(char*)json+index[i],klen) == 0) return i+2;
	}
  return 0;
    9220:	80 e0       	ldi	r24, 0x00	; 0
    9222:	90 e0       	ldi	r25, 0x00	; 0
    9224:	02 c0       	rjmp	.+4      	; 0x922a <j0g_val+0xa6>
    9226:	80 e0       	ldi	r24, 0x00	; 0
    9228:	90 e0       	ldi	r25, 0x00	; 0
}
    922a:	df 91       	pop	r29
    922c:	cf 91       	pop	r28
    922e:	1f 91       	pop	r17
    9230:	0f 91       	pop	r16
    9232:	ff 90       	pop	r15
    9234:	ef 90       	pop	r14
    9236:	df 90       	pop	r13
    9238:	cf 90       	pop	r12
    923a:	bf 90       	pop	r11
    923c:	af 90       	pop	r10
    923e:	9f 90       	pop	r9
    9240:	8f 90       	pop	r8
    9242:	08 95       	ret

00009244 <j0g_str>:
  return (char*)json;
}

// return the null-terminated string value matching the given key
char *j0g_str(const char *key, char *json, const unsigned short *index)
{
    9244:	0f 93       	push	r16
    9246:	1f 93       	push	r17
    9248:	cf 93       	push	r28
    924a:	df 93       	push	r29
    924c:	eb 01       	movw	r28, r22
    924e:	8a 01       	movw	r16, r20
  int val = j0g_val(key, json, index);
    9250:	99 df       	rcall	.-206    	; 0x9184 <j0g_val>
  if(!val) return NULL;
    9252:	00 97       	sbiw	r24, 0x00	; 0
    9254:	21 f0       	breq	.+8      	; 0x925e <j0g_str+0x1a>
  return j0g_safe(val, json, index);
    9256:	a8 01       	movw	r20, r16
    9258:	be 01       	movw	r22, r28
    925a:	56 df       	rcall	.-340    	; 0x9108 <j0g_safe>
    925c:	02 c0       	rjmp	.+4      	; 0x9262 <j0g_str+0x1e>

// return the null-terminated string value matching the given key
char *j0g_str(const char *key, char *json, const unsigned short *index)
{
  int val = j0g_val(key, json, index);
  if(!val) return NULL;
    925e:	80 e0       	ldi	r24, 0x00	; 0
    9260:	90 e0       	ldi	r25, 0x00	; 0
  return j0g_safe(val, json, index);
}
    9262:	df 91       	pop	r29
    9264:	cf 91       	pop	r28
    9266:	1f 91       	pop	r17
    9268:	0f 91       	pop	r16
    926a:	08 95       	ret

0000926c <js0n>:
// opportunity to further optimize would be having different jump tables for higher depths
#define PUSH(i) if(depth == 1) prev = *out++ = ((cur+i) - js)
#define CAP(i) if(depth == 1) prev = *out++ = ((cur+i) - (js + prev) + 1)

int js0n(const unsigned char *js, unsigned int len, unsigned short *out, unsigned int olen)
{
    926c:	2f 92       	push	r2
    926e:	3f 92       	push	r3
    9270:	4f 92       	push	r4
    9272:	5f 92       	push	r5
    9274:	6f 92       	push	r6
    9276:	7f 92       	push	r7
    9278:	8f 92       	push	r8
    927a:	9f 92       	push	r9
    927c:	af 92       	push	r10
    927e:	bf 92       	push	r11
    9280:	cf 92       	push	r12
    9282:	df 92       	push	r13
    9284:	ef 92       	push	r14
    9286:	ff 92       	push	r15
    9288:	0f 93       	push	r16
    928a:	1f 93       	push	r17
    928c:	cf 93       	push	r28
    928e:	df 93       	push	r29
    9290:	cd b7       	in	r28, 0x3d	; 61
    9292:	de b7       	in	r29, 0x3e	; 62
    9294:	28 97       	sbiw	r28, 0x08	; 8
    9296:	0f b6       	in	r0, 0x3f	; 63
    9298:	f8 94       	cli
    929a:	de bf       	out	0x3e, r29	; 62
    929c:	0f be       	out	0x3f, r0	; 63
    929e:	cd bf       	out	0x3d, r28	; 61
		['"'] = &&l_unesc, ['\\'] = &&l_unesc, ['/'] = &&l_unesc, ['b'] = &&l_unesc,
		['f'] = &&l_unesc, ['n'] = &&l_unesc, ['r'] = &&l_unesc, ['t'] = &&l_unesc, ['u'] = &&l_unesc
	};
	void **go = gostruct;
	
	for(cur=js,end=js+len,oend=out+olen; cur<end && out<oend; cur++)
    92a0:	68 0f       	add	r22, r24
    92a2:	79 1f       	adc	r23, r25
    92a4:	22 0f       	add	r18, r18
    92a6:	33 1f       	adc	r19, r19
    92a8:	d9 01       	movw	r26, r18
    92aa:	a4 0f       	add	r26, r20
    92ac:	b5 1f       	adc	r27, r21
    92ae:	bc 83       	std	Y+4, r27	; 0x04
    92b0:	ab 83       	std	Y+3, r26	; 0x03
    92b2:	86 17       	cp	r24, r22
    92b4:	97 07       	cpc	r25, r23
    92b6:	08 f0       	brcs	.+2      	; 0x92ba <js0n+0x4e>
    92b8:	52 c0       	rjmp	.+164    	; 0x935e <js0n+0xf2>
    92ba:	4a 17       	cp	r20, r26
    92bc:	5b 07       	cpc	r21, r27
    92be:	08 f0       	brcs	.+2      	; 0x92c2 <js0n+0x56>
    92c0:	5d c0       	rjmp	.+186    	; 0x937c <js0n+0x110>
    92c2:	9e 83       	std	Y+6, r25	; 0x06
    92c4:	8d 83       	std	Y+5, r24	; 0x05
    92c6:	a0 e0       	ldi	r26, 0x00	; 0
    92c8:	b0 e0       	ldi	r27, 0x00	; 0
	{
		[0 ... 255] = &&l_bad,
		['"'] = &&l_unesc, ['\\'] = &&l_unesc, ['/'] = &&l_unesc, ['b'] = &&l_unesc,
		['f'] = &&l_unesc, ['n'] = &&l_unesc, ['r'] = &&l_unesc, ['t'] = &&l_unesc, ['u'] = &&l_unesc
	};
	void **go = gostruct;
    92ca:	24 e2       	ldi	r18, 0x24	; 36
    92cc:	3a e0       	ldi	r19, 0x0A	; 10
int js0n(const unsigned char *js, unsigned int len, unsigned short *out, unsigned int olen)
{
	unsigned short prev = 0, *oend;
	const unsigned char *cur, *end;
	int depth=0;
	int utf8_remain=0;
    92ce:	a1 2c       	mov	r10, r1
    92d0:	b1 2c       	mov	r11, r1

int js0n(const unsigned char *js, unsigned int len, unsigned short *out, unsigned int olen)
{
	unsigned short prev = 0, *oend;
	const unsigned char *cur, *end;
	int depth=0;
    92d2:	00 e0       	ldi	r16, 0x00	; 0
    92d4:	10 e0       	ldi	r17, 0x00	; 0
#define PUSH(i) if(depth == 1) prev = *out++ = ((cur+i) - js)
#define CAP(i) if(depth == 1) prev = *out++ = ((cur+i) - (js + prev) + 1)

int js0n(const unsigned char *js, unsigned int len, unsigned short *out, unsigned int olen)
{
	unsigned short prev = 0, *oend;
    92d6:	41 2c       	mov	r4, r1
    92d8:	51 2c       	mov	r5, r1
		go = gobare;
		goto l_loop;

	l_unbare:
		CAP(-1);
		go = gostruct;
    92da:	39 01       	movw	r6, r18
		utf8_remain = 3;
		goto l_loop;

	l_utf_continue:
		if (!--utf8_remain)
			go=gostring;
    92dc:	0f 2e       	mov	r0, r31
    92de:	f4 e2       	ldi	r31, 0x24	; 36
    92e0:	2f 2e       	mov	r2, r31
    92e2:	f8 e0       	ldi	r31, 0x08	; 8
    92e4:	3f 2e       	mov	r3, r31
    92e6:	f0 2d       	mov	r31, r0
		go = goutf8_continue;
		utf8_remain = 2;
		goto l_loop;

	l_utf8_4:
		go = goutf8_continue;
    92e8:	0f 2e       	mov	r0, r31
    92ea:	f4 e2       	ldi	r31, 0x24	; 36
    92ec:	8f 2e       	mov	r8, r31
    92ee:	f2 e0       	ldi	r31, 0x02	; 2
    92f0:	9f 2e       	mov	r9, r31
    92f2:	f0 2d       	mov	r31, r0
		go = gobare;
		goto l_loop;

	l_unbare:
		CAP(-1);
		go = gostruct;
    92f4:	29 83       	std	Y+1, r18	; 0x01
    92f6:	7a 82       	std	Y+2, r7	; 0x02
		CAP(-1);
		go=gostruct;
		goto l_loop;
		
	l_esc:
		go = goesc;
    92f8:	0f 2e       	mov	r0, r31
    92fa:	f4 e2       	ldi	r31, 0x24	; 36
    92fc:	cf 2e       	mov	r12, r31
    92fe:	f6 e0       	ldi	r31, 0x06	; 6
    9300:	df 2e       	mov	r13, r31
    9302:	f0 2d       	mov	r31, r0
    9304:	78 01       	movw	r14, r16
    9306:	8b 01       	movw	r16, r22
    9308:	b8 87       	std	Y+8, r27	; 0x08
    930a:	af 83       	std	Y+7, r26	; 0x07
    930c:	bc 01       	movw	r22, r24
	};
	void **go = gostruct;
	
	for(cur=js,end=js+len,oend=out+olen; cur<end && out<oend; cur++)
	{
			goto *go[*cur];
    930e:	ad 81       	ldd	r26, Y+5	; 0x05
    9310:	be 81       	ldd	r27, Y+6	; 0x06
    9312:	8c 91       	ld	r24, X
    9314:	90 e0       	ldi	r25, 0x00	; 0
    9316:	88 0f       	add	r24, r24
    9318:	99 1f       	adc	r25, r25
    931a:	82 0f       	add	r24, r18
    931c:	93 1f       	adc	r25, r19
    931e:	fc 01       	movw	r30, r24
    9320:	80 81       	ld	r24, Z
    9322:	91 81       	ldd	r25, Z+1	; 0x01
    9324:	fc 01       	movw	r30, r24
    9326:	19 94       	eijmp
		CAP(0);
		goto l_loop;

	l_qup:
		PUSH(1);
		go=gostring;
    9328:	91 01       	movw	r18, r2
    932a:	06 c0       	rjmp	.+12     	; 0x9338 <js0n+0xcc>
		goto l_loop;

	l_qdown:
		CAP(-1);
		go=gostruct;
    932c:	93 01       	movw	r18, r6
    932e:	04 c0       	rjmp	.+8      	; 0x9338 <js0n+0xcc>
		go = gostring;
		goto l_loop;

	l_bare:
		PUSH(0);
		go = gobare;
    9330:	24 e2       	ldi	r18, 0x24	; 36
    9332:	34 e0       	ldi	r19, 0x04	; 4
    9334:	01 c0       	rjmp	.+2      	; 0x9338 <js0n+0xcc>
		utf8_remain = 3;
		goto l_loop;

	l_utf_continue:
		if (!--utf8_remain)
			go=gostring;
    9336:	91 01       	movw	r18, r2
		['"'] = &&l_unesc, ['\\'] = &&l_unesc, ['/'] = &&l_unesc, ['b'] = &&l_unesc,
		['f'] = &&l_unesc, ['n'] = &&l_unesc, ['r'] = &&l_unesc, ['t'] = &&l_unesc, ['u'] = &&l_unesc
	};
	void **go = gostruct;
	
	for(cur=js,end=js+len,oend=out+olen; cur<end && out<oend; cur++)
    9338:	8d 81       	ldd	r24, Y+5	; 0x05
    933a:	9e 81       	ldd	r25, Y+6	; 0x06
    933c:	01 96       	adiw	r24, 0x01	; 1
    933e:	9e 83       	std	Y+6, r25	; 0x06
    9340:	8d 83       	std	Y+5, r24	; 0x05
    9342:	80 17       	cp	r24, r16
    9344:	91 07       	cpc	r25, r17
    9346:	71 f0       	breq	.+28     	; 0x9364 <js0n+0xf8>
    9348:	af 81       	ldd	r26, Y+7	; 0x07
    934a:	b8 85       	ldd	r27, Y+8	; 0x08
    934c:	11 96       	adiw	r26, 0x01	; 1
    934e:	eb 81       	ldd	r30, Y+3	; 0x03
    9350:	fc 81       	ldd	r31, Y+4	; 0x04
    9352:	4e 17       	cp	r20, r30
    9354:	5f 07       	cpc	r21, r31
    9356:	40 f4       	brcc	.+16     	; 0x9368 <js0n+0xfc>
    9358:	b8 87       	std	Y+8, r27	; 0x08
    935a:	af 83       	std	Y+7, r26	; 0x07
    935c:	d8 cf       	rjmp	.-80     	; 0x930e <js0n+0xa2>

int js0n(const unsigned char *js, unsigned int len, unsigned short *out, unsigned int olen)
{
	unsigned short prev = 0, *oend;
	const unsigned char *cur, *end;
	int depth=0;
    935e:	00 e0       	ldi	r16, 0x00	; 0
    9360:	10 e0       	ldi	r17, 0x00	; 0
    9362:	03 c0       	rjmp	.+6      	; 0x936a <js0n+0xfe>
    9364:	87 01       	movw	r16, r14
    9366:	01 c0       	rjmp	.+2      	; 0x936a <js0n+0xfe>
    9368:	87 01       	movw	r16, r14
	{
			goto *go[*cur];
			l_loop:;
	}
	
  if(out < oend) *out = 0;
    936a:	8b 81       	ldd	r24, Y+3	; 0x03
    936c:	9c 81       	ldd	r25, Y+4	; 0x04
    936e:	48 17       	cp	r20, r24
    9370:	59 07       	cpc	r21, r25
    9372:	30 f4       	brcc	.+12     	; 0x9380 <js0n+0x114>
    9374:	da 01       	movw	r26, r20
    9376:	1d 92       	st	X+, r1
    9378:	1c 92       	st	X, r1
    937a:	02 c0       	rjmp	.+4      	; 0x9380 <js0n+0x114>

int js0n(const unsigned char *js, unsigned int len, unsigned short *out, unsigned int olen)
{
	unsigned short prev = 0, *oend;
	const unsigned char *cur, *end;
	int depth=0;
    937c:	00 e0       	ldi	r16, 0x00	; 0
    937e:	10 e0       	ldi	r17, 0x00	; 0
			goto *go[*cur];
			l_loop:;
	}
	
  if(out < oend) *out = 0;
	return depth; // 0 if successful full parse, >0 for incomplete data
    9380:	80 2f       	mov	r24, r16
    9382:	91 2f       	mov	r25, r17
    9384:	95 c0       	rjmp	.+298    	; 0x94b0 <js0n+0x244>
	
	l_bad:
		return 1;
    9386:	81 e0       	ldi	r24, 0x01	; 1
    9388:	90 e0       	ldi	r25, 0x00	; 0
    938a:	92 c0       	rjmp	.+292    	; 0x94b0 <js0n+0x244>
	
	l_up:
		PUSH(0);
    938c:	b1 e0       	ldi	r27, 0x01	; 1
    938e:	eb 16       	cp	r14, r27
    9390:	f1 04       	cpc	r15, r1
    9392:	39 f4       	brne	.+14     	; 0x93a2 <js0n+0x136>
    9394:	4f 80       	ldd	r4, Y+7	; 0x07
    9396:	58 84       	ldd	r5, Y+8	; 0x08
    9398:	fa 01       	movw	r30, r20
    939a:	51 82       	std	Z+1, r5	; 0x01
    939c:	40 82       	st	Z, r4
    939e:	4e 5f       	subi	r20, 0xFE	; 254
    93a0:	5f 4f       	sbci	r21, 0xFF	; 255
		++depth;
    93a2:	ff ef       	ldi	r31, 0xFF	; 255
    93a4:	ef 1a       	sub	r14, r31
    93a6:	ff 0a       	sbc	r15, r31
		goto l_loop;
    93a8:	c7 cf       	rjmp	.-114    	; 0x9338 <js0n+0xcc>

	l_down:
		--depth;
    93aa:	81 e0       	ldi	r24, 0x01	; 1
    93ac:	e8 1a       	sub	r14, r24
    93ae:	f1 08       	sbc	r15, r1
		CAP(0);
    93b0:	91 e0       	ldi	r25, 0x01	; 1
    93b2:	e9 16       	cp	r14, r25
    93b4:	f1 04       	cpc	r15, r1
    93b6:	09 f0       	breq	.+2      	; 0x93ba <js0n+0x14e>
    93b8:	bf cf       	rjmp	.-130    	; 0x9338 <js0n+0xcc>
    93ba:	cb 01       	movw	r24, r22
    93bc:	84 0d       	add	r24, r4
    93be:	95 1d       	adc	r25, r5
    93c0:	ad 81       	ldd	r26, Y+5	; 0x05
    93c2:	be 81       	ldd	r27, Y+6	; 0x06
    93c4:	a8 1b       	sub	r26, r24
    93c6:	b9 0b       	sbc	r27, r25
    93c8:	cd 01       	movw	r24, r26
    93ca:	01 96       	adiw	r24, 0x01	; 1
    93cc:	fa 01       	movw	r30, r20
    93ce:	91 83       	std	Z+1, r25	; 0x01
    93d0:	80 83       	st	Z, r24
    93d2:	4e 5f       	subi	r20, 0xFE	; 254
    93d4:	5f 4f       	sbci	r21, 0xFF	; 255
    93d6:	2c 01       	movw	r4, r24
    93d8:	af cf       	rjmp	.-162    	; 0x9338 <js0n+0xcc>
		goto l_loop;

	l_qup:
		PUSH(1);
    93da:	f1 e0       	ldi	r31, 0x01	; 1
    93dc:	ef 16       	cp	r14, r31
    93de:	f1 04       	cpc	r15, r1
    93e0:	09 f0       	breq	.+2      	; 0x93e4 <js0n+0x178>
    93e2:	a2 cf       	rjmp	.-188    	; 0x9328 <js0n+0xbc>
    93e4:	8f 81       	ldd	r24, Y+7	; 0x07
    93e6:	98 85       	ldd	r25, Y+8	; 0x08
    93e8:	01 96       	adiw	r24, 0x01	; 1
    93ea:	da 01       	movw	r26, r20
    93ec:	8d 93       	st	X+, r24
    93ee:	9c 93       	st	X, r25
    93f0:	4e 5f       	subi	r20, 0xFE	; 254
    93f2:	5f 4f       	sbci	r21, 0xFF	; 255
    93f4:	2c 01       	movw	r4, r24
		go=gostring;
    93f6:	91 01       	movw	r18, r2
    93f8:	9f cf       	rjmp	.-194    	; 0x9338 <js0n+0xcc>
		goto l_loop;

	l_qdown:
		CAP(-1);
    93fa:	b1 e0       	ldi	r27, 0x01	; 1
    93fc:	eb 16       	cp	r14, r27
    93fe:	f1 04       	cpc	r15, r1
    9400:	09 f0       	breq	.+2      	; 0x9404 <js0n+0x198>
    9402:	94 cf       	rjmp	.-216    	; 0x932c <js0n+0xc0>
    9404:	8f 81       	ldd	r24, Y+7	; 0x07
    9406:	98 85       	ldd	r25, Y+8	; 0x08
    9408:	84 19       	sub	r24, r4
    940a:	95 09       	sbc	r25, r5
    940c:	fa 01       	movw	r30, r20
    940e:	91 83       	std	Z+1, r25	; 0x01
    9410:	80 83       	st	Z, r24
    9412:	4e 5f       	subi	r20, 0xFE	; 254
    9414:	5f 4f       	sbci	r21, 0xFF	; 255
    9416:	2c 01       	movw	r4, r24
		go=gostruct;
    9418:	93 01       	movw	r18, r6
    941a:	8e cf       	rjmp	.-228    	; 0x9338 <js0n+0xcc>
		goto l_loop;
		
	l_esc:
		go = goesc;
    941c:	96 01       	movw	r18, r12
		goto l_loop;
    941e:	8c cf       	rjmp	.-232    	; 0x9338 <js0n+0xcc>
		
	l_unesc:
		go = gostring;
    9420:	91 01       	movw	r18, r2
		goto l_loop;
    9422:	8a cf       	rjmp	.-236    	; 0x9338 <js0n+0xcc>

	l_bare:
		PUSH(0);
    9424:	f1 e0       	ldi	r31, 0x01	; 1
    9426:	ef 16       	cp	r14, r31
    9428:	f1 04       	cpc	r15, r1
    942a:	09 f0       	breq	.+2      	; 0x942e <js0n+0x1c2>
    942c:	81 cf       	rjmp	.-254    	; 0x9330 <js0n+0xc4>
    942e:	4f 80       	ldd	r4, Y+7	; 0x07
    9430:	58 84       	ldd	r5, Y+8	; 0x08
    9432:	da 01       	movw	r26, r20
    9434:	4d 92       	st	X+, r4
    9436:	5c 92       	st	X, r5
    9438:	4e 5f       	subi	r20, 0xFE	; 254
    943a:	5f 4f       	sbci	r21, 0xFF	; 255
		go = gobare;
    943c:	24 e2       	ldi	r18, 0x24	; 36
    943e:	34 e0       	ldi	r19, 0x04	; 4
    9440:	7b cf       	rjmp	.-266    	; 0x9338 <js0n+0xcc>
		goto l_loop;

	l_unbare:
		CAP(-1);
    9442:	b1 e0       	ldi	r27, 0x01	; 1
    9444:	eb 16       	cp	r14, r27
    9446:	f1 04       	cpc	r15, r1
    9448:	59 f4       	brne	.+22     	; 0x9460 <js0n+0x1f4>
    944a:	9a 01       	movw	r18, r20
    944c:	4e 5f       	subi	r20, 0xFE	; 254
    944e:	5f 4f       	sbci	r21, 0xFF	; 255
    9450:	8f 81       	ldd	r24, Y+7	; 0x07
    9452:	98 85       	ldd	r25, Y+8	; 0x08
    9454:	84 19       	sub	r24, r4
    9456:	95 09       	sbc	r25, r5
    9458:	2c 01       	movw	r4, r24
    945a:	f9 01       	movw	r30, r18
    945c:	91 83       	std	Z+1, r25	; 0x01
    945e:	80 83       	st	Z, r24
		go = gostruct;
    9460:	29 81       	ldd	r18, Y+1	; 0x01
    9462:	3a 81       	ldd	r19, Y+2	; 0x02
		goto *go[*cur];
    9464:	ad 81       	ldd	r26, Y+5	; 0x05
    9466:	be 81       	ldd	r27, Y+6	; 0x06
    9468:	8c 91       	ld	r24, X
    946a:	90 e0       	ldi	r25, 0x00	; 0
    946c:	88 0f       	add	r24, r24
    946e:	99 1f       	adc	r25, r25
    9470:	8c 5d       	subi	r24, 0xDC	; 220
    9472:	95 4f       	sbci	r25, 0xF5	; 245
    9474:	fc 01       	movw	r30, r24
    9476:	80 81       	ld	r24, Z
    9478:	91 81       	ldd	r25, Z+1	; 0x01
    947a:	54 cf       	rjmp	.-344    	; 0x9324 <js0n+0xb8>

	l_utf8_2:
		go = goutf8_continue;
    947c:	94 01       	movw	r18, r8
		utf8_remain = 1;
    947e:	aa 24       	eor	r10, r10
    9480:	a3 94       	inc	r10
    9482:	b1 2c       	mov	r11, r1
		goto l_loop;
    9484:	59 cf       	rjmp	.-334    	; 0x9338 <js0n+0xcc>

	l_utf8_3:
		go = goutf8_continue;
    9486:	94 01       	movw	r18, r8
		utf8_remain = 2;
    9488:	68 94       	set
    948a:	aa 24       	eor	r10, r10
    948c:	a1 f8       	bld	r10, 1
    948e:	b1 2c       	mov	r11, r1
		goto l_loop;
    9490:	53 cf       	rjmp	.-346    	; 0x9338 <js0n+0xcc>

	l_utf8_4:
		go = goutf8_continue;
    9492:	94 01       	movw	r18, r8
		utf8_remain = 3;
    9494:	0f 2e       	mov	r0, r31
    9496:	f3 e0       	ldi	r31, 0x03	; 3
    9498:	af 2e       	mov	r10, r31
    949a:	f0 2d       	mov	r31, r0
    949c:	b1 2c       	mov	r11, r1
		goto l_loop;
    949e:	4c cf       	rjmp	.-360    	; 0x9338 <js0n+0xcc>

	l_utf_continue:
		if (!--utf8_remain)
    94a0:	f1 e0       	ldi	r31, 0x01	; 1
    94a2:	af 1a       	sub	r10, r31
    94a4:	b1 08       	sbc	r11, r1
    94a6:	a1 14       	cp	r10, r1
    94a8:	b1 04       	cpc	r11, r1
    94aa:	09 f4       	brne	.+2      	; 0x94ae <js0n+0x242>
    94ac:	44 cf       	rjmp	.-376    	; 0x9336 <js0n+0xca>
    94ae:	44 cf       	rjmp	.-376    	; 0x9338 <js0n+0xcc>
			go=gostring;
		goto l_loop;

}
    94b0:	28 96       	adiw	r28, 0x08	; 8
    94b2:	0f b6       	in	r0, 0x3f	; 63
    94b4:	f8 94       	cli
    94b6:	de bf       	out	0x3e, r29	; 62
    94b8:	0f be       	out	0x3f, r0	; 63
    94ba:	cd bf       	out	0x3d, r28	; 61
    94bc:	df 91       	pop	r29
    94be:	cf 91       	pop	r28
    94c0:	1f 91       	pop	r17
    94c2:	0f 91       	pop	r16
    94c4:	ff 90       	pop	r15
    94c6:	ef 90       	pop	r14
    94c8:	df 90       	pop	r13
    94ca:	cf 90       	pop	r12
    94cc:	bf 90       	pop	r11
    94ce:	af 90       	pop	r10
    94d0:	9f 90       	pop	r9
    94d2:	8f 90       	pop	r8
    94d4:	7f 90       	pop	r7
    94d6:	6f 90       	pop	r6
    94d8:	5f 90       	pop	r5
    94da:	4f 90       	pop	r4
    94dc:	3f 90       	pop	r3
    94de:	2f 90       	pop	r2
    94e0:	08 95       	ret

000094e2 <NWK_Init>:
      return val[i];
    cl += 25;
  }

  return 255;
}
    94e2:	10 92 07 3a 	sts	0x3A07, r1
    94e6:	10 92 08 3a 	sts	0x3A08, r1
    94ea:	10 92 04 3a 	sts	0x3A04, r1
    94ee:	10 92 03 3a 	sts	0x3A03, r1
    94f2:	10 92 3a 3a 	sts	0x3A3A, r1
    94f6:	10 92 39 3a 	sts	0x3A39, r1
    94fa:	e9 e0       	ldi	r30, 0x09	; 9
    94fc:	fa e3       	ldi	r31, 0x3A	; 58
    94fe:	89 e2       	ldi	r24, 0x29	; 41
    9500:	9a e3       	ldi	r25, 0x3A	; 58
    9502:	11 92       	st	Z+, r1
    9504:	11 92       	st	Z+, r1
    9506:	e8 17       	cp	r30, r24
    9508:	f9 07       	cpc	r31, r25
    950a:	d9 f7       	brne	.-10     	; 0x9502 <NWK_Init+0x20>
    950c:	0e 94 05 56 	call	0xac0a	; 0xac0a <nwkTxInit>
    9510:	cf d6       	rcall	.+3486   	; 0xa2b0 <nwkRxInit>
    9512:	39 d1       	rcall	.+626    	; 0x9786 <nwkFrameInit>
    9514:	47 d0       	rcall	.+142    	; 0x95a4 <nwkDataReqInit>
    9516:	2d d2       	rcall	.+1114   	; 0x9972 <nwkRouteInit>
    9518:	0e 94 47 54 	call	0xa88e	; 0xa88e <nwkSecurityInit>
    951c:	ba d1       	rcall	.+884    	; 0x9892 <nwkGroupInit>
    951e:	3a c5       	rjmp	.+2676   	; 0x9f94 <nwkRouteDiscoveryInit>
    9520:	08 95       	ret

00009522 <NWK_SetAddr>:
    9522:	90 93 04 3a 	sts	0x3A04, r25
    9526:	80 93 03 3a 	sts	0x3A03, r24
    952a:	0c 94 27 58 	jmp	0xb04e	; 0xb04e <PHY_SetShortAddr>
    952e:	08 95       	ret

00009530 <NWK_SetPanId>:
    9530:	90 93 06 3a 	sts	0x3A06, r25
    9534:	80 93 05 3a 	sts	0x3A05, r24
    9538:	0c 94 15 58 	jmp	0xb02a	; 0xb02a <PHY_SetPanId>
    953c:	08 95       	ret

0000953e <NWK_OpenEndpoint>:
    953e:	e8 2f       	mov	r30, r24
    9540:	f0 e0       	ldi	r31, 0x00	; 0
    9542:	ee 0f       	add	r30, r30
    9544:	ff 1f       	adc	r31, r31
    9546:	e7 5f       	subi	r30, 0xF7	; 247
    9548:	f5 4c       	sbci	r31, 0xC5	; 197
    954a:	71 83       	std	Z+1, r23	; 0x01
    954c:	60 83       	st	Z, r22
    954e:	08 95       	ret

00009550 <NWK_TaskHandler>:
/*************************************************************************//**
  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
  nwkRxTaskHandler();
    9550:	06 d7       	rcall	.+3596   	; 0xa35e <nwkRxTaskHandler>
  nwkTxTaskHandler();
    9552:	0e 94 25 57 	call	0xae4a	; 0xae4a <nwkTxTaskHandler>
  nwkDataReqTaskHandler();
    9556:	4c d0       	rcall	.+152    	; 0x95f0 <nwkDataReqTaskHandler>
#ifdef NWK_ENABLE_SECURITY
  nwkSecurityTaskHandler();
    9558:	0c 94 a2 54 	jmp	0xa944	; 0xa944 <nwkSecurityTaskHandler>
    955c:	08 95       	ret

0000955e <nwkDataReqTxConf>:
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    955e:	e0 91 ee 2f 	lds	r30, 0x2FEE
    9562:	f0 91 ef 2f 	lds	r31, 0x2FEF
    9566:	30 97       	sbiw	r30, 0x00	; 0
    9568:	d9 f0       	breq	.+54     	; 0x95a0 <nwkDataReqTxConf+0x42>
  {
    if (req->frame == frame)
    956a:	22 81       	ldd	r18, Z+2	; 0x02
    956c:	33 81       	ldd	r19, Z+3	; 0x03
    956e:	28 17       	cp	r18, r24
    9570:	39 07       	cpc	r19, r25
    9572:	89 f4       	brne	.+34     	; 0x9596 <nwkDataReqTxConf+0x38>
    9574:	05 c0       	rjmp	.+10     	; 0x9580 <nwkDataReqTxConf+0x22>
    9576:	22 81       	ldd	r18, Z+2	; 0x02
    9578:	33 81       	ldd	r19, Z+3	; 0x03
    957a:	28 17       	cp	r18, r24
    957c:	39 07       	cpc	r19, r25
    957e:	59 f4       	brne	.+22     	; 0x9596 <nwkDataReqTxConf+0x38>
    {
      req->status = frame->tx.status;
    9580:	dc 01       	movw	r26, r24
    9582:	ad 57       	subi	r26, 0x7D	; 125
    9584:	bf 4f       	sbci	r27, 0xFF	; 255
    9586:	2c 91       	ld	r18, X
    9588:	21 8b       	std	Z+17, r18	; 0x11
      req->control = frame->tx.control;
    958a:	13 96       	adiw	r26, 0x03	; 3
    958c:	2c 91       	ld	r18, X
    958e:	22 8b       	std	Z+18, r18	; 0x12
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
    9590:	22 e0       	ldi	r18, 0x02	; 2
    9592:	24 83       	std	Z+4, r18	; 0x04
      break;
    9594:	05 c0       	rjmp	.+10     	; 0x95a0 <nwkDataReqTxConf+0x42>
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    9596:	01 90       	ld	r0, Z+
    9598:	f0 81       	ld	r31, Z
    959a:	e0 2d       	mov	r30, r0
    959c:	30 97       	sbiw	r30, 0x00	; 0
    959e:	59 f7       	brne	.-42     	; 0x9576 <nwkDataReqTxConf+0x18>
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
      break;
    }
  }

  nwkFrameFree(frame);
    95a0:	34 c1       	rjmp	.+616    	; 0x980a <nwkFrameFree>
    95a2:	08 95       	ret

000095a4 <nwkDataReqInit>:
/*************************************************************************//**
  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
  nwkDataReqQueue = NULL;
    95a4:	10 92 ef 2f 	sts	0x2FEF, r1
    95a8:	10 92 ee 2f 	sts	0x2FEE, r1
    95ac:	08 95       	ret

000095ae <NWK_DataReq>:
/*************************************************************************//**
  @brief Adds request @a req to the queue of outgoing requests
  @param[in] req Pointer to the request parameters
*****************************************************************************/
void NWK_DataReq(NWK_DataReq_t *req)
{
    95ae:	fc 01       	movw	r30, r24
  req->state = NWK_DATA_REQ_STATE_INITIAL;
    95b0:	14 82       	std	Z+4, r1	; 0x04
  req->status = NWK_SUCCESS_STATUS;
    95b2:	11 8a       	std	Z+17, r1	; 0x11
  req->frame = NULL;
    95b4:	13 82       	std	Z+3, r1	; 0x03
    95b6:	12 82       	std	Z+2, r1	; 0x02

  nwkIb.lock++;
    95b8:	a9 e3       	ldi	r26, 0x39	; 57
    95ba:	ba e3       	ldi	r27, 0x3A	; 58
    95bc:	8d 91       	ld	r24, X+
    95be:	9c 91       	ld	r25, X
    95c0:	11 97       	sbiw	r26, 0x01	; 1
    95c2:	01 96       	adiw	r24, 0x01	; 1
    95c4:	8d 93       	st	X+, r24
    95c6:	9c 93       	st	X, r25

  if (NULL == nwkDataReqQueue)
    95c8:	80 91 ee 2f 	lds	r24, 0x2FEE
    95cc:	90 91 ef 2f 	lds	r25, 0x2FEF
    95d0:	00 97       	sbiw	r24, 0x00	; 0
    95d2:	39 f4       	brne	.+14     	; 0x95e2 <NWK_DataReq+0x34>
  {
    req->next = NULL;
    95d4:	11 82       	std	Z+1, r1	; 0x01
    95d6:	10 82       	st	Z, r1
    nwkDataReqQueue = req;
    95d8:	f0 93 ef 2f 	sts	0x2FEF, r31
    95dc:	e0 93 ee 2f 	sts	0x2FEE, r30
    95e0:	08 95       	ret
  }
  else
  {
    req->next = nwkDataReqQueue;
    95e2:	91 83       	std	Z+1, r25	; 0x01
    95e4:	80 83       	st	Z, r24
    nwkDataReqQueue = req;
    95e6:	f0 93 ef 2f 	sts	0x2FEF, r31
    95ea:	e0 93 ee 2f 	sts	0x2FEE, r30
    95ee:	08 95       	ret

000095f0 <nwkDataReqTaskHandler>:

/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
    95f0:	0f 93       	push	r16
    95f2:	1f 93       	push	r17
    95f4:	cf 93       	push	r28
    95f6:	df 93       	push	r29
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    95f8:	e0 91 ee 2f 	lds	r30, 0x2FEE
    95fc:	f0 91 ef 2f 	lds	r31, 0x2FEF
    9600:	30 97       	sbiw	r30, 0x00	; 0
    9602:	09 f4       	brne	.+2      	; 0x9606 <nwkDataReqTaskHandler+0x16>
    9604:	bb c0       	rjmp	.+374    	; 0x977c <nwkDataReqTaskHandler+0x18c>
    9606:	ef 01       	movw	r28, r30
  {
    switch (req->state)
    9608:	8c 81       	ldd	r24, Y+4	; 0x04
    960a:	88 23       	and	r24, r24
    960c:	21 f0       	breq	.+8      	; 0x9616 <nwkDataReqTaskHandler+0x26>
    960e:	82 30       	cpi	r24, 0x02	; 2
    9610:	09 f4       	brne	.+2      	; 0x9614 <nwkDataReqTaskHandler+0x24>
    9612:	8d c0       	rjmp	.+282    	; 0x972e <nwkDataReqTaskHandler+0x13e>
    9614:	ad c0       	rjmp	.+346    	; 0x9770 <nwkDataReqTaskHandler+0x180>
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
  NwkFrame_t *frame;

  if (NULL == (frame = nwkFrameAlloc()))
    9616:	c2 d0       	rcall	.+388    	; 0x979c <nwkFrameAlloc>
    9618:	8c 01       	movw	r16, r24
    961a:	00 97       	sbiw	r24, 0x00	; 0
    961c:	21 f4       	brne	.+8      	; 0x9626 <nwkDataReqTaskHandler+0x36>
  {
    req->state = NWK_DATA_REQ_STATE_CONFIRM;
    961e:	82 e0       	ldi	r24, 0x02	; 2
    9620:	8c 83       	std	Y+4, r24	; 0x04
    req->status = NWK_OUT_OF_MEMORY_STATUS;
    9622:	89 8b       	std	Y+17, r24	; 0x11
    9624:	ab c0       	rjmp	.+342    	; 0x977c <nwkDataReqTaskHandler+0x18c>
    return;
  }

  req->frame = frame;
    9626:	9b 83       	std	Y+3, r25	; 0x03
    9628:	8a 83       	std	Y+2, r24	; 0x02
  req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
    962a:	81 e0       	ldi	r24, 0x01	; 1
    962c:	8c 83       	std	Y+4, r24	; 0x04

  frame->tx.confirm = nwkDataReqTxConf;
    962e:	8f ea       	ldi	r24, 0xAF	; 175
    9630:	9a e4       	ldi	r25, 0x4A	; 74
    9632:	f8 01       	movw	r30, r16
    9634:	e9 57       	subi	r30, 0x79	; 121
    9636:	ff 4f       	sbci	r31, 0xFF	; 255
    9638:	91 83       	std	Z+1, r25	; 0x01
    963a:	80 83       	st	Z, r24
  frame->tx.control = req->options & NWK_OPT_BROADCAST_PAN_ID ? NWK_TX_CONTROL_BROADCAST_PAN_ID : 0;
    963c:	31 97       	sbiw	r30, 0x01	; 1
    963e:	89 85       	ldd	r24, Y+9	; 0x09
    9640:	82 fb       	bst	r24, 2
    9642:	88 27       	eor	r24, r24
    9644:	80 f9       	bld	r24, 0
    9646:	80 83       	st	Z, r24

  frame->header.nwkFcf.ackRequest = req->options & NWK_OPT_ACK_REQUEST ? 1 : 0;
    9648:	99 85       	ldd	r25, Y+9	; 0x09
    964a:	f8 01       	movw	r30, r16
    964c:	83 85       	ldd	r24, Z+11	; 0x0b
    964e:	90 fb       	bst	r25, 0
    9650:	80 f9       	bld	r24, 0
    9652:	83 87       	std	Z+11, r24	; 0x0b
  frame->header.nwkFcf.linkLocal = req->options & NWK_OPT_LINK_LOCAL ? 1 : 0;
    9654:	99 85       	ldd	r25, Y+9	; 0x09
    9656:	93 fb       	bst	r25, 3
    9658:	99 27       	eor	r25, r25
    965a:	90 f9       	bld	r25, 0
    965c:	90 fb       	bst	r25, 0
    965e:	82 f9       	bld	r24, 2
    9660:	83 87       	std	Z+11, r24	; 0x0b

#ifdef NWK_ENABLE_SECURITY
  frame->header.nwkFcf.security = req->options & NWK_OPT_ENABLE_SECURITY ? 1 : 0;
    9662:	99 85       	ldd	r25, Y+9	; 0x09
    9664:	96 95       	lsr	r25
    9666:	91 70       	andi	r25, 0x01	; 1
    9668:	90 fb       	bst	r25, 0
    966a:	81 f9       	bld	r24, 1
    966c:	83 87       	std	Z+11, r24	; 0x0b
#endif

#ifdef NWK_ENABLE_MULTICAST
  frame->header.nwkFcf.multicast = req->options & NWK_OPT_MULTICAST ? 1 : 0;
    966e:	99 85       	ldd	r25, Y+9	; 0x09
    9670:	92 95       	swap	r25
    9672:	91 70       	andi	r25, 0x01	; 1
    9674:	90 fb       	bst	r25, 0
    9676:	83 f9       	bld	r24, 3
    9678:	83 87       	std	Z+11, r24	; 0x0b

  if (frame->header.nwkFcf.multicast)
    967a:	83 ff       	sbrs	r24, 3
    967c:	28 c0       	rjmp	.+80     	; 0x96ce <nwkDataReqTaskHandler+0xde>
  {
    NwkFrameMulticastHeader_t *mcHeader = (NwkFrameMulticastHeader_t *)frame->payload;
    967e:	d8 01       	movw	r26, r16
    9680:	af 57       	subi	r26, 0x7F	; 127
    9682:	bf 4f       	sbci	r27, 0xFF	; 255
    9684:	ed 91       	ld	r30, X+
    9686:	fc 91       	ld	r31, X
    9688:	11 97       	sbiw	r26, 0x01	; 1

    mcHeader->memberRadius = req->memberRadius;
    968a:	9a 85       	ldd	r25, Y+10	; 0x0a
    968c:	9f 70       	andi	r25, 0x0F	; 15
    968e:	81 81       	ldd	r24, Z+1	; 0x01
    9690:	80 7f       	andi	r24, 0xF0	; 240
    9692:	89 2b       	or	r24, r25
    9694:	81 83       	std	Z+1, r24	; 0x01
    mcHeader->maxMemberRadius = req->memberRadius;
    9696:	9a 85       	ldd	r25, Y+10	; 0x0a
    9698:	92 95       	swap	r25
    969a:	90 7f       	andi	r25, 0xF0	; 240
    969c:	8f 70       	andi	r24, 0x0F	; 15
    969e:	89 2b       	or	r24, r25
    96a0:	81 83       	std	Z+1, r24	; 0x01
    mcHeader->nonMemberRadius = req->nonMemberRadius;
    96a2:	9b 85       	ldd	r25, Y+11	; 0x0b
    96a4:	9f 70       	andi	r25, 0x0F	; 15
    96a6:	80 81       	ld	r24, Z
    96a8:	80 7f       	andi	r24, 0xF0	; 240
    96aa:	89 2b       	or	r24, r25
    96ac:	80 83       	st	Z, r24
    mcHeader->maxNonMemberRadius = req->nonMemberRadius;
    96ae:	9b 85       	ldd	r25, Y+11	; 0x0b
    96b0:	92 95       	swap	r25
    96b2:	90 7f       	andi	r25, 0xF0	; 240
    96b4:	8f 70       	andi	r24, 0x0F	; 15
    96b6:	89 2b       	or	r24, r25
    96b8:	80 83       	st	Z, r24

    frame->payload += sizeof(NwkFrameMulticastHeader_t);
    96ba:	8d 91       	ld	r24, X+
    96bc:	9c 91       	ld	r25, X
    96be:	11 97       	sbiw	r26, 0x01	; 1
    96c0:	02 96       	adiw	r24, 0x02	; 2
    96c2:	8d 93       	st	X+, r24
    96c4:	9c 93       	st	X, r25
    frame->size += sizeof(NwkFrameMulticastHeader_t);
    96c6:	f8 01       	movw	r30, r16
    96c8:	81 81       	ldd	r24, Z+1	; 0x01
    96ca:	8e 5f       	subi	r24, 0xFE	; 254
    96cc:	81 83       	std	Z+1, r24	; 0x01
  }
#endif

  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    96ce:	e7 e0       	ldi	r30, 0x07	; 7
    96d0:	fa e3       	ldi	r31, 0x3A	; 58
    96d2:	80 81       	ld	r24, Z
    96d4:	8f 5f       	subi	r24, 0xFF	; 255
    96d6:	80 83       	st	Z, r24
    96d8:	f8 01       	movw	r30, r16
    96da:	84 87       	std	Z+12, r24	; 0x0c
  frame->header.nwkSrcAddr = nwkIb.addr;
    96dc:	80 91 03 3a 	lds	r24, 0x3A03
    96e0:	90 91 04 3a 	lds	r25, 0x3A04
    96e4:	96 87       	std	Z+14, r25	; 0x0e
    96e6:	85 87       	std	Z+13, r24	; 0x0d
  frame->header.nwkDstAddr = req->dstAddr;
    96e8:	8d 81       	ldd	r24, Y+5	; 0x05
    96ea:	9e 81       	ldd	r25, Y+6	; 0x06
    96ec:	90 8b       	std	Z+16, r25	; 0x10
    96ee:	87 87       	std	Z+15, r24	; 0x0f
  frame->header.nwkSrcEndpoint = req->srcEndpoint;
    96f0:	98 85       	ldd	r25, Y+8	; 0x08
    96f2:	9f 70       	andi	r25, 0x0F	; 15
    96f4:	81 89       	ldd	r24, Z+17	; 0x11
    96f6:	80 7f       	andi	r24, 0xF0	; 240
    96f8:	89 2b       	or	r24, r25
    96fa:	81 8b       	std	Z+17, r24	; 0x11
  frame->header.nwkDstEndpoint = req->dstEndpoint;
    96fc:	9f 81       	ldd	r25, Y+7	; 0x07
    96fe:	92 95       	swap	r25
    9700:	90 7f       	andi	r25, 0xF0	; 240
    9702:	8f 70       	andi	r24, 0x0F	; 15
    9704:	89 2b       	or	r24, r25
    9706:	81 8b       	std	Z+17, r24	; 0x11

  memcpy(frame->payload, req->data, req->size);
    9708:	ef 57       	subi	r30, 0x7F	; 127
    970a:	ff 4f       	sbci	r31, 0xFF	; 255
    970c:	4e 85       	ldd	r20, Y+14	; 0x0e
    970e:	50 e0       	ldi	r21, 0x00	; 0
    9710:	6c 85       	ldd	r22, Y+12	; 0x0c
    9712:	7d 85       	ldd	r23, Y+13	; 0x0d
    9714:	80 81       	ld	r24, Z
    9716:	91 81       	ldd	r25, Z+1	; 0x01
    9718:	0e 94 42 b5 	call	0x16a84	; 0x16a84 <memcpy>
  frame->size += req->size;
    971c:	f8 01       	movw	r30, r16
    971e:	91 81       	ldd	r25, Z+1	; 0x01
    9720:	8e 85       	ldd	r24, Y+14	; 0x0e
    9722:	89 0f       	add	r24, r25
    9724:	81 83       	std	Z+1, r24	; 0x01

  nwkTxFrame(frame);
    9726:	c8 01       	movw	r24, r16
    9728:	0e 94 32 56 	call	0xac64	; 0xac64 <nwkTxFrame>
    972c:	27 c0       	rjmp	.+78     	; 0x977c <nwkDataReqTaskHandler+0x18c>
  @brief Confirms request @req to the application and remove it from the queue
  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
  if (nwkDataReqQueue == req)
    972e:	ce 17       	cp	r28, r30
    9730:	df 07       	cpc	r29, r31
    9732:	39 f4       	brne	.+14     	; 0x9742 <nwkDataReqTaskHandler+0x152>
  {
    nwkDataReqQueue = nwkDataReqQueue->next;
    9734:	88 81       	ld	r24, Y
    9736:	99 81       	ldd	r25, Y+1	; 0x01
    9738:	90 93 ef 2f 	sts	0x2FEF, r25
    973c:	80 93 ee 2f 	sts	0x2FEE, r24
    9740:	0b c0       	rjmp	.+22     	; 0x9758 <nwkDataReqTaskHandler+0x168>
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
    9742:	80 81       	ld	r24, Z
    9744:	91 81       	ldd	r25, Z+1	; 0x01
    9746:	c8 17       	cp	r28, r24
    9748:	d9 07       	cpc	r29, r25
    974a:	11 f0       	breq	.+4      	; 0x9750 <nwkDataReqTaskHandler+0x160>
      prev = prev->next;
    974c:	fc 01       	movw	r30, r24
    974e:	f9 cf       	rjmp	.-14     	; 0x9742 <nwkDataReqTaskHandler+0x152>
    prev->next = ((NWK_DataReq_t *)prev->next)->next;
    9750:	88 81       	ld	r24, Y
    9752:	99 81       	ldd	r25, Y+1	; 0x01
    9754:	91 83       	std	Z+1, r25	; 0x01
    9756:	80 83       	st	Z, r24
  }

  nwkIb.lock--;
    9758:	e9 e3       	ldi	r30, 0x39	; 57
    975a:	fa e3       	ldi	r31, 0x3A	; 58
    975c:	80 81       	ld	r24, Z
    975e:	91 81       	ldd	r25, Z+1	; 0x01
    9760:	01 97       	sbiw	r24, 0x01	; 1
    9762:	91 83       	std	Z+1, r25	; 0x01
    9764:	80 83       	st	Z, r24
  req->confirm(req);
    9766:	ef 85       	ldd	r30, Y+15	; 0x0f
    9768:	f8 89       	ldd	r31, Y+16	; 0x10
    976a:	ce 01       	movw	r24, r28
    976c:	19 95       	eicall
    976e:	06 c0       	rjmp	.+12     	; 0x977c <nwkDataReqTaskHandler+0x18c>
/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    9770:	09 90       	ld	r0, Y+
    9772:	d8 81       	ld	r29, Y
    9774:	c0 2d       	mov	r28, r0
    9776:	20 97       	sbiw	r28, 0x00	; 0
    9778:	09 f0       	breq	.+2      	; 0x977c <nwkDataReqTaskHandler+0x18c>
    977a:	46 cf       	rjmp	.-372    	; 0x9608 <nwkDataReqTaskHandler+0x18>

      default:
        break;
    };
  }
}
    977c:	df 91       	pop	r29
    977e:	cf 91       	pop	r28
    9780:	1f 91       	pop	r17
    9782:	0f 91       	pop	r16
    9784:	08 95       	ret

00009786 <nwkFrameInit>:
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
    9786:	10 92 f0 2f 	sts	0x2FF0, r1
    978a:	10 92 79 30 	sts	0x3079, r1
    978e:	10 92 02 31 	sts	0x3102, r1
    9792:	10 92 8b 31 	sts	0x318B, r1
    9796:	10 92 14 32 	sts	0x3214, r1
    979a:	08 95       	ret

0000979c <nwkFrameAlloc>:
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
  {
    if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state)
    979c:	80 91 f0 2f 	lds	r24, 0x2FF0
    97a0:	88 23       	and	r24, r24
    97a2:	49 f0       	breq	.+18     	; 0x97b6 <nwkFrameAlloc+0x1a>
    97a4:	e9 e7       	ldi	r30, 0x79	; 121
    97a6:	f0 e3       	ldi	r31, 0x30	; 48
    97a8:	81 e0       	ldi	r24, 0x01	; 1
    97aa:	90 e0       	ldi	r25, 0x00	; 0
    97ac:	9c 01       	movw	r18, r24
    97ae:	40 81       	ld	r20, Z
    97b0:	41 11       	cpse	r20, r1
    97b2:	22 c0       	rjmp	.+68     	; 0x97f8 <nwkFrameAlloc+0x5c>
    97b4:	02 c0       	rjmp	.+4      	; 0x97ba <nwkFrameAlloc+0x1e>
    97b6:	20 e0       	ldi	r18, 0x00	; 0
    97b8:	30 e0       	ldi	r19, 0x00	; 0
    {
      memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
    97ba:	69 e8       	ldi	r22, 0x89	; 137
    97bc:	62 9f       	mul	r22, r18
    97be:	a0 01       	movw	r20, r0
    97c0:	63 9f       	mul	r22, r19
    97c2:	50 0d       	add	r21, r0
    97c4:	11 24       	eor	r1, r1
    97c6:	ca 01       	movw	r24, r20
    97c8:	80 51       	subi	r24, 0x10	; 16
    97ca:	90 4d       	sbci	r25, 0xD0	; 208
    97cc:	fc 01       	movw	r30, r24
    97ce:	11 92       	st	Z+, r1
    97d0:	6a 95       	dec	r22
    97d2:	e9 f7       	brne	.-6      	; 0x97ce <nwkFrameAlloc+0x32>
      nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
    97d4:	20 e1       	ldi	r18, 0x10	; 16
    97d6:	fc 01       	movw	r30, r24
    97d8:	21 83       	std	Z+1, r18	; 0x01
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
    97da:	ef 57       	subi	r30, 0x7F	; 127
    97dc:	ff 4f       	sbci	r31, 0xFF	; 255
    97de:	4e 5f       	subi	r20, 0xFE	; 254
    97e0:	5f 4c       	sbci	r21, 0xCF	; 207
    97e2:	51 83       	std	Z+1, r21	; 0x01
    97e4:	40 83       	st	Z, r20
      nwkIb.lock++;
    97e6:	e9 e3       	ldi	r30, 0x39	; 57
    97e8:	fa e3       	ldi	r31, 0x3A	; 58
    97ea:	20 81       	ld	r18, Z
    97ec:	31 81       	ldd	r19, Z+1	; 0x01
    97ee:	2f 5f       	subi	r18, 0xFF	; 255
    97f0:	3f 4f       	sbci	r19, 0xFF	; 255
    97f2:	31 83       	std	Z+1, r19	; 0x01
    97f4:	20 83       	st	Z, r18
      return &nwkFrameFrames[i];
    97f6:	08 95       	ret
    97f8:	01 96       	adiw	r24, 0x01	; 1
    97fa:	e7 57       	subi	r30, 0x77	; 119
    97fc:	ff 4f       	sbci	r31, 0xFF	; 255
  @brief Allocates an empty frame from the buffer pool
  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    97fe:	85 30       	cpi	r24, 0x05	; 5
    9800:	91 05       	cpc	r25, r1
    9802:	a1 f6       	brne	.-88     	; 0x97ac <nwkFrameAlloc+0x10>
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
      nwkIb.lock++;
      return &nwkFrameFrames[i];
    }
  }
  return NULL;
    9804:	80 e0       	ldi	r24, 0x00	; 0
    9806:	90 e0       	ldi	r25, 0x00	; 0
}
    9808:	08 95       	ret

0000980a <nwkFrameFree>:
  @brief Frees a @a frame and returns it to the buffer pool
  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
  frame->state = NWK_FRAME_STATE_FREE;
    980a:	fc 01       	movw	r30, r24
    980c:	10 82       	st	Z, r1
  nwkIb.lock--;
    980e:	e9 e3       	ldi	r30, 0x39	; 57
    9810:	fa e3       	ldi	r31, 0x3A	; 58
    9812:	80 81       	ld	r24, Z
    9814:	91 81       	ldd	r25, Z+1	; 0x01
    9816:	01 97       	sbiw	r24, 0x01	; 1
    9818:	91 83       	std	Z+1, r25	; 0x01
    981a:	80 83       	st	Z, r24
    981c:	08 95       	ret

0000981e <nwkFrameNext>:
  @param[in] frame Pointer to the current frame or @c NULL for the first frame
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    981e:	00 97       	sbiw	r24, 0x00	; 0
    9820:	41 f0       	breq	.+16     	; 0x9832 <nwkFrameNext+0x14>
    frame = nwkFrameFrames;
  else
    frame++;
    9822:	fc 01       	movw	r30, r24
    9824:	e7 57       	subi	r30, 0x77	; 119
    9826:	ff 4f       	sbci	r31, 0xFF	; 255

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
    9828:	82 e3       	ldi	r24, 0x32	; 50
    982a:	ed 39       	cpi	r30, 0x9D	; 157
    982c:	f8 07       	cpc	r31, r24
    982e:	18 f0       	brcs	.+6      	; 0x9836 <nwkFrameNext+0x18>
    9830:	12 c0       	rjmp	.+36     	; 0x9856 <nwkFrameNext+0x38>
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    frame = nwkFrameFrames;
    9832:	e0 ef       	ldi	r30, 0xF0	; 240
    9834:	ff e2       	ldi	r31, 0x2F	; 47
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
    9836:	80 81       	ld	r24, Z
    9838:	88 23       	and	r24, r24
    983a:	21 f0       	breq	.+8      	; 0x9844 <nwkFrameNext+0x26>
    983c:	0f c0       	rjmp	.+30     	; 0x985c <nwkFrameNext+0x3e>
    983e:	80 81       	ld	r24, Z
    9840:	81 11       	cpse	r24, r1
    9842:	0f c0       	rjmp	.+30     	; 0x9862 <nwkFrameNext+0x44>
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
    9844:	e7 57       	subi	r30, 0x77	; 119
    9846:	ff 4f       	sbci	r31, 0xFF	; 255
    9848:	82 e3       	ldi	r24, 0x32	; 50
    984a:	ed 39       	cpi	r30, 0x9D	; 157
    984c:	f8 07       	cpc	r31, r24
    984e:	b8 f3       	brcs	.-18     	; 0x983e <nwkFrameNext+0x20>
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
    9850:	80 e0       	ldi	r24, 0x00	; 0
    9852:	90 e0       	ldi	r25, 0x00	; 0
    9854:	08 95       	ret
    9856:	80 e0       	ldi	r24, 0x00	; 0
    9858:	90 e0       	ldi	r25, 0x00	; 0
    985a:	08 95       	ret
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
    985c:	8e 2f       	mov	r24, r30
    985e:	9f 2f       	mov	r25, r31
    9860:	08 95       	ret
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
    9862:	8e 2f       	mov	r24, r30
    9864:	9f 2f       	mov	r25, r31
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
}
    9866:	08 95       	ret

00009868 <nwkFrameCommandInit>:
/*************************************************************************//**
  @brief Sets default parameters for the the command @a frame
  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
    9868:	fc 01       	movw	r30, r24
  frame->tx.status = NWK_SUCCESS_STATUS;
    986a:	dc 01       	movw	r26, r24
    986c:	ad 57       	subi	r26, 0x7D	; 125
    986e:	bf 4f       	sbci	r27, 0xFF	; 255
    9870:	1c 92       	st	X, r1
  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    9872:	a7 e0       	ldi	r26, 0x07	; 7
    9874:	ba e3       	ldi	r27, 0x3A	; 58
    9876:	8c 91       	ld	r24, X
    9878:	8f 5f       	subi	r24, 0xFF	; 255
    987a:	8c 93       	st	X, r24
    987c:	84 87       	std	Z+12, r24	; 0x0c
  frame->header.nwkSrcAddr = nwkIb.addr;
    987e:	80 91 03 3a 	lds	r24, 0x3A03
    9882:	90 91 04 3a 	lds	r25, 0x3A04
    9886:	96 87       	std	Z+14, r25	; 0x0e
    9888:	85 87       	std	Z+13, r24	; 0x0d
#ifdef NWK_ENABLE_SECURE_COMMANDS
  frame->header.nwkFcf.security = 1;
    988a:	83 85       	ldd	r24, Z+11	; 0x0b
    988c:	82 60       	ori	r24, 0x02	; 2
    988e:	83 87       	std	Z+11, r24	; 0x0b
    9890:	08 95       	ret

00009892 <nwkGroupInit>:

/*************************************************************************//**
  @brief Initializes the Group module
*****************************************************************************/
void nwkGroupInit(void)
{
    9892:	ed e9       	ldi	r30, 0x9D	; 157
    9894:	f2 e3       	ldi	r31, 0x32	; 50
    9896:	25 ec       	ldi	r18, 0xC5	; 197
    9898:	32 e3       	ldi	r19, 0x32	; 50
  for (uint8_t i = 0; i < NWK_GROUPS_AMOUNT; i++)
    nwkGroups[i] = NWK_GROUP_FREE;
    989a:	8f ef       	ldi	r24, 0xFF	; 255
    989c:	9f ef       	ldi	r25, 0xFF	; 255
    989e:	81 93       	st	Z+, r24
    98a0:	91 93       	st	Z+, r25
/*************************************************************************//**
  @brief Initializes the Group module
*****************************************************************************/
void nwkGroupInit(void)
{
  for (uint8_t i = 0; i < NWK_GROUPS_AMOUNT; i++)
    98a2:	e2 17       	cp	r30, r18
    98a4:	f3 07       	cpc	r31, r19
    98a6:	d9 f7       	brne	.-10     	; 0x989e <nwkGroupInit+0xc>
    nwkGroups[i] = NWK_GROUP_FREE;
}
    98a8:	08 95       	ret

000098aa <NWK_GroupAdd>:
*****************************************************************************/
static bool nwkGroupSwitch(uint16_t from, uint16_t to)
{
  for (uint8_t i = 0; i < NWK_GROUPS_AMOUNT; i++)
  {
    if (from == nwkGroups[i])
    98aa:	20 91 9d 32 	lds	r18, 0x329D
    98ae:	30 91 9e 32 	lds	r19, 0x329E
    98b2:	2f 3f       	cpi	r18, 0xFF	; 255
    98b4:	3f 4f       	sbci	r19, 0xFF	; 255
    98b6:	59 f0       	breq	.+22     	; 0x98ce <NWK_GroupAdd+0x24>
    98b8:	ef e9       	ldi	r30, 0x9F	; 159
    98ba:	f2 e3       	ldi	r31, 0x32	; 50
    98bc:	21 e0       	ldi	r18, 0x01	; 1
    98be:	30 e0       	ldi	r19, 0x00	; 0
    98c0:	b9 01       	movw	r22, r18
    98c2:	41 91       	ld	r20, Z+
    98c4:	51 91       	ld	r21, Z+
    98c6:	4f 3f       	cpi	r20, 0xFF	; 255
    98c8:	5f 4f       	sbci	r21, 0xFF	; 255
    98ca:	61 f4       	brne	.+24     	; 0x98e4 <NWK_GroupAdd+0x3a>
    98cc:	02 c0       	rjmp	.+4      	; 0x98d2 <NWK_GroupAdd+0x28>
    98ce:	60 e0       	ldi	r22, 0x00	; 0
    98d0:	70 e0       	ldi	r23, 0x00	; 0
    {
      nwkGroups[i] = to;
    98d2:	fb 01       	movw	r30, r22
    98d4:	ee 0f       	add	r30, r30
    98d6:	ff 1f       	adc	r31, r31
    98d8:	e3 56       	subi	r30, 0x63	; 99
    98da:	fd 4c       	sbci	r31, 0xCD	; 205
    98dc:	91 83       	std	Z+1, r25	; 0x01
    98de:	80 83       	st	Z, r24
      return true;
    98e0:	81 e0       	ldi	r24, 0x01	; 1
    98e2:	08 95       	ret
    98e4:	2f 5f       	subi	r18, 0xFF	; 255
    98e6:	3f 4f       	sbci	r19, 0xFF	; 255
  @param[in] to   Destination group ID
  @return @c true if @a from entry was found and @c false otherwise
*****************************************************************************/
static bool nwkGroupSwitch(uint16_t from, uint16_t to)
{
  for (uint8_t i = 0; i < NWK_GROUPS_AMOUNT; i++)
    98e8:	24 31       	cpi	r18, 0x14	; 20
    98ea:	31 05       	cpc	r19, r1
    98ec:	49 f7       	brne	.-46     	; 0x98c0 <NWK_GroupAdd+0x16>
    {
      nwkGroups[i] = to;
      return true;
    }
  }
  return false;
    98ee:	80 e0       	ldi	r24, 0x00	; 0
  @return @c true in case of success and @c false otherwise
*****************************************************************************/
bool NWK_GroupAdd(uint16_t group)
{
  return nwkGroupSwitch(NWK_GROUP_FREE, group);
}
    98f0:	08 95       	ret

000098f2 <NWK_GroupRemove>:
*****************************************************************************/
static bool nwkGroupSwitch(uint16_t from, uint16_t to)
{
  for (uint8_t i = 0; i < NWK_GROUPS_AMOUNT; i++)
  {
    if (from == nwkGroups[i])
    98f2:	20 91 9d 32 	lds	r18, 0x329D
    98f6:	30 91 9e 32 	lds	r19, 0x329E
    98fa:	82 17       	cp	r24, r18
    98fc:	93 07       	cpc	r25, r19
    98fe:	59 f0       	breq	.+22     	; 0x9916 <NWK_GroupRemove+0x24>
    9900:	ef e9       	ldi	r30, 0x9F	; 159
    9902:	f2 e3       	ldi	r31, 0x32	; 50
    9904:	21 e0       	ldi	r18, 0x01	; 1
    9906:	30 e0       	ldi	r19, 0x00	; 0
    9908:	b9 01       	movw	r22, r18
    990a:	41 91       	ld	r20, Z+
    990c:	51 91       	ld	r21, Z+
    990e:	84 17       	cp	r24, r20
    9910:	95 07       	cpc	r25, r21
    9912:	71 f4       	brne	.+28     	; 0x9930 <NWK_GroupRemove+0x3e>
    9914:	02 c0       	rjmp	.+4      	; 0x991a <NWK_GroupRemove+0x28>
    9916:	60 e0       	ldi	r22, 0x00	; 0
    9918:	70 e0       	ldi	r23, 0x00	; 0
    {
      nwkGroups[i] = to;
    991a:	fb 01       	movw	r30, r22
    991c:	ee 0f       	add	r30, r30
    991e:	ff 1f       	adc	r31, r31
    9920:	e3 56       	subi	r30, 0x63	; 99
    9922:	fd 4c       	sbci	r31, 0xCD	; 205
    9924:	8f ef       	ldi	r24, 0xFF	; 255
    9926:	9f ef       	ldi	r25, 0xFF	; 255
    9928:	91 83       	std	Z+1, r25	; 0x01
    992a:	80 83       	st	Z, r24
      return true;
    992c:	81 e0       	ldi	r24, 0x01	; 1
    992e:	08 95       	ret
    9930:	2f 5f       	subi	r18, 0xFF	; 255
    9932:	3f 4f       	sbci	r19, 0xFF	; 255
  @param[in] to   Destination group ID
  @return @c true if @a from entry was found and @c false otherwise
*****************************************************************************/
static bool nwkGroupSwitch(uint16_t from, uint16_t to)
{
  for (uint8_t i = 0; i < NWK_GROUPS_AMOUNT; i++)
    9934:	24 31       	cpi	r18, 0x14	; 20
    9936:	31 05       	cpc	r19, r1
    9938:	39 f7       	brne	.-50     	; 0x9908 <NWK_GroupRemove+0x16>
    {
      nwkGroups[i] = to;
      return true;
    }
  }
  return false;
    993a:	80 e0       	ldi	r24, 0x00	; 0
  @return @c true in case of success and @c false otherwise
*****************************************************************************/
bool NWK_GroupRemove(uint16_t group)
{
  return nwkGroupSwitch(group, NWK_GROUP_FREE);
}
    993c:	08 95       	ret

0000993e <NWK_GroupIsMember>:
  @return @c true if node is a member of the group and @c false otherwise
*****************************************************************************/
bool NWK_GroupIsMember(uint16_t group)
{
  for (uint8_t i = 0; i < NWK_GROUPS_AMOUNT; i++)
    if (group == nwkGroups[i])
    993e:	20 91 9d 32 	lds	r18, 0x329D
    9942:	30 91 9e 32 	lds	r19, 0x329E
    9946:	28 17       	cp	r18, r24
    9948:	39 07       	cpc	r19, r25
    994a:	69 f0       	breq	.+26     	; 0x9966 <NWK_GroupIsMember+0x28>
    994c:	ef e9       	ldi	r30, 0x9F	; 159
    994e:	f2 e3       	ldi	r31, 0x32	; 50
    9950:	45 ec       	ldi	r20, 0xC5	; 197
    9952:	52 e3       	ldi	r21, 0x32	; 50
    9954:	21 91       	ld	r18, Z+
    9956:	31 91       	ld	r19, Z+
    9958:	28 17       	cp	r18, r24
    995a:	39 07       	cpc	r19, r25
    995c:	31 f0       	breq	.+12     	; 0x996a <NWK_GroupIsMember+0x2c>
  @param[in] group Group ID
  @return @c true if node is a member of the group and @c false otherwise
*****************************************************************************/
bool NWK_GroupIsMember(uint16_t group)
{
  for (uint8_t i = 0; i < NWK_GROUPS_AMOUNT; i++)
    995e:	e4 17       	cp	r30, r20
    9960:	f5 07       	cpc	r31, r21
    9962:	c1 f7       	brne	.-16     	; 0x9954 <NWK_GroupIsMember+0x16>
    9964:	04 c0       	rjmp	.+8      	; 0x996e <NWK_GroupIsMember+0x30>
    if (group == nwkGroups[i])
      return true;
    9966:	81 e0       	ldi	r24, 0x01	; 1
    9968:	08 95       	ret
    996a:	81 e0       	ldi	r24, 0x01	; 1
    996c:	08 95       	ret
  return false;
    996e:	80 e0       	ldi	r24, 0x00	; 0
}
    9970:	08 95       	ret

00009972 <nwkRouteInit>:

/*************************************************************************//**
  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
    9972:	ea ec       	ldi	r30, 0xCA	; 202
    9974:	f2 e3       	ldi	r31, 0x32	; 50
    9976:	80 e0       	ldi	r24, 0x00	; 0
    9978:	90 e0       	ldi	r25, 0x00	; 0
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
  {
    nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
    997a:	2f ef       	ldi	r18, 0xFF	; 255
    997c:	3f ef       	ldi	r19, 0xFF	; 255
    997e:	df 01       	movw	r26, r30
    9980:	14 97       	sbiw	r26, 0x04	; 4
    9982:	2d 93       	st	X+, r18
    9984:	3c 93       	st	X, r19
    nwkRouteTable[i].fixed = 0;
    9986:	dc 01       	movw	r26, r24
    9988:	aa 0f       	add	r26, r26
    998a:	bb 1f       	adc	r27, r27
    998c:	aa 0f       	add	r26, r26
    998e:	bb 1f       	adc	r27, r27
    9990:	aa 0f       	add	r26, r26
    9992:	bb 1f       	adc	r27, r27
    9994:	a8 1b       	sub	r26, r24
    9996:	b9 0b       	sbc	r27, r25
    9998:	ab 53       	subi	r26, 0x3B	; 59
    999a:	bd 4c       	sbci	r27, 0xCD	; 205
    999c:	4c 91       	ld	r20, X
    999e:	4e 7f       	andi	r20, 0xFE	; 254
    99a0:	4c 93       	st	X, r20
    nwkRouteTable[i].rank = 0;
    99a2:	10 82       	st	Z, r1
    99a4:	01 96       	adiw	r24, 0x01	; 1
    99a6:	37 96       	adiw	r30, 0x07	; 7
/*************************************************************************//**
  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
    99a8:	84 31       	cpi	r24, 0x14	; 20
    99aa:	91 05       	cpc	r25, r1
    99ac:	41 f7       	brne	.-48     	; 0x997e <nwkRouteInit+0xc>
  {
    nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
    nwkRouteTable[i].fixed = 0;
    nwkRouteTable[i].rank = 0;
  }
}
    99ae:	08 95       	ret

000099b0 <NWK_RouteFindEntry>:

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
    99b0:	cf 93       	push	r28
    99b2:	df 93       	push	r29
    99b4:	e6 ec       	ldi	r30, 0xC6	; 198
    99b6:	f2 e3       	ldi	r31, 0x32	; 50
    99b8:	20 e0       	ldi	r18, 0x00	; 0
    99ba:	30 e0       	ldi	r19, 0x00	; 0
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
  {
    if (nwkRouteTable[i].dstAddr == dst &&
        nwkRouteTable[i].multicast == multicast)
    99bc:	70 e0       	ldi	r23, 0x00	; 0
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
  {
    if (nwkRouteTable[i].dstAddr == dst &&
    99be:	40 81       	ld	r20, Z
    99c0:	51 81       	ldd	r21, Z+1	; 0x01
    99c2:	48 17       	cp	r20, r24
    99c4:	59 07       	cpc	r21, r25
    99c6:	09 f5       	brne	.+66     	; 0x9a0a <NWK_RouteFindEntry+0x5a>
        nwkRouteTable[i].multicast == multicast)
    99c8:	a9 01       	movw	r20, r18
    99ca:	44 0f       	add	r20, r20
    99cc:	55 1f       	adc	r21, r21
    99ce:	44 0f       	add	r20, r20
    99d0:	55 1f       	adc	r21, r21
    99d2:	44 0f       	add	r20, r20
    99d4:	55 1f       	adc	r21, r21
    99d6:	42 1b       	sub	r20, r18
    99d8:	53 0b       	sbc	r21, r19
    99da:	4b 53       	subi	r20, 0x3B	; 59
    99dc:	5d 4c       	sbci	r21, 0xCD	; 205
    99de:	ea 01       	movw	r28, r20
    99e0:	48 81       	ld	r20, Y
    99e2:	46 95       	lsr	r20
    99e4:	41 70       	andi	r20, 0x01	; 1
    99e6:	c4 2f       	mov	r28, r20
    99e8:	40 e0       	ldi	r20, 0x00	; 0
    99ea:	d4 2f       	mov	r29, r20
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
  {
    if (nwkRouteTable[i].dstAddr == dst &&
    99ec:	c6 17       	cp	r28, r22
    99ee:	d7 07       	cpc	r29, r23
    99f0:	61 f4       	brne	.+24     	; 0x9a0a <NWK_RouteFindEntry+0x5a>
        nwkRouteTable[i].multicast == multicast)
      return &nwkRouteTable[i];
    99f2:	c9 01       	movw	r24, r18
    99f4:	88 0f       	add	r24, r24
    99f6:	99 1f       	adc	r25, r25
    99f8:	88 0f       	add	r24, r24
    99fa:	99 1f       	adc	r25, r25
    99fc:	88 0f       	add	r24, r24
    99fe:	99 1f       	adc	r25, r25
    9a00:	82 1b       	sub	r24, r18
    9a02:	93 0b       	sbc	r25, r19
    9a04:	8b 53       	subi	r24, 0x3B	; 59
    9a06:	9d 4c       	sbci	r25, 0xCD	; 205
    9a08:	08 c0       	rjmp	.+16     	; 0x9a1a <NWK_RouteFindEntry+0x6a>
    9a0a:	2f 5f       	subi	r18, 0xFF	; 255
    9a0c:	3f 4f       	sbci	r19, 0xFF	; 255
    9a0e:	37 96       	adiw	r30, 0x07	; 7

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
    9a10:	24 31       	cpi	r18, 0x14	; 20
    9a12:	31 05       	cpc	r19, r1
    9a14:	a1 f6       	brne	.-88     	; 0x99be <NWK_RouteFindEntry+0xe>
    if (nwkRouteTable[i].dstAddr == dst &&
        nwkRouteTable[i].multicast == multicast)
      return &nwkRouteTable[i];
  }

  return NULL;
    9a16:	80 e0       	ldi	r24, 0x00	; 0
    9a18:	90 e0       	ldi	r25, 0x00	; 0
}
    9a1a:	df 91       	pop	r29
    9a1c:	cf 91       	pop	r28
    9a1e:	08 95       	ret

00009a20 <NWK_RouteNewEntry>:
/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteNewEntry(void)
{
  NWK_RouteTableEntry_t *iter = nwkRouteTable;
  NWK_RouteTableEntry_t *entry = NULL;
    9a20:	a0 e0       	ldi	r26, 0x00	; 0
    9a22:	b0 e0       	ldi	r27, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteNewEntry(void)
{
  NWK_RouteTableEntry_t *iter = nwkRouteTable;
    9a24:	e5 ec       	ldi	r30, 0xC5	; 197
    9a26:	f2 e3       	ldi	r31, 0x32	; 50
  NWK_RouteTableEntry_t *entry = NULL;

  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++, iter++)
  {
    if (iter->fixed)
    9a28:	80 81       	ld	r24, Z
    9a2a:	80 fd       	sbrc	r24, 0
    9a2c:	0e c0       	rjmp	.+28     	; 0x9a4a <NWK_RouteNewEntry+0x2a>
      continue;

    if (0 == iter->rank)
    9a2e:	85 81       	ldd	r24, Z+5	; 0x05
    9a30:	88 23       	and	r24, r24
    9a32:	89 f0       	breq	.+34     	; 0x9a56 <NWK_RouteNewEntry+0x36>
    {
      entry = iter;
      break;
    }

    if (NULL == entry || iter->rank < entry->rank)
    9a34:	10 97       	sbiw	r26, 0x00	; 0
    9a36:	31 f0       	breq	.+12     	; 0x9a44 <NWK_RouteNewEntry+0x24>
    9a38:	15 96       	adiw	r26, 0x05	; 5
    9a3a:	9c 91       	ld	r25, X
    9a3c:	15 97       	sbiw	r26, 0x05	; 5
    9a3e:	89 17       	cp	r24, r25
    9a40:	18 f0       	brcs	.+6      	; 0x9a48 <NWK_RouteNewEntry+0x28>
    9a42:	03 c0       	rjmp	.+6      	; 0x9a4a <NWK_RouteNewEntry+0x2a>
    9a44:	df 01       	movw	r26, r30
    9a46:	01 c0       	rjmp	.+2      	; 0x9a4a <NWK_RouteNewEntry+0x2a>
    9a48:	df 01       	movw	r26, r30
NWK_RouteTableEntry_t *NWK_RouteNewEntry(void)
{
  NWK_RouteTableEntry_t *iter = nwkRouteTable;
  NWK_RouteTableEntry_t *entry = NULL;

  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++, iter++)
    9a4a:	37 96       	adiw	r30, 0x07	; 7
    9a4c:	83 e3       	ldi	r24, 0x33	; 51
    9a4e:	e1 35       	cpi	r30, 0x51	; 81
    9a50:	f8 07       	cpc	r31, r24
    9a52:	51 f7       	brne	.-44     	; 0x9a28 <NWK_RouteNewEntry+0x8>
    9a54:	01 c0       	rjmp	.+2      	; 0x9a58 <NWK_RouteNewEntry+0x38>
    9a56:	df 01       	movw	r26, r30

    if (NULL == entry || iter->rank < entry->rank)
      entry = iter;
  }

  entry->multicast = 0;
    9a58:	8c 91       	ld	r24, X
  entry->score = NWK_ROUTE_DEFAULT_SCORE;
    9a5a:	8d 70       	andi	r24, 0x0D	; 13
    9a5c:	80 63       	ori	r24, 0x30	; 48
    9a5e:	8c 93       	st	X, r24
  entry->rank = NWK_ROUTE_DEFAULT_RANK;
    9a60:	80 e8       	ldi	r24, 0x80	; 128
    9a62:	15 96       	adiw	r26, 0x05	; 5
    9a64:	8c 93       	st	X, r24
    9a66:	15 97       	sbiw	r26, 0x05	; 5

  return entry;
}
    9a68:	cd 01       	movw	r24, r26
    9a6a:	08 95       	ret

00009a6c <NWK_RouteFreeEntry>:

/*************************************************************************//**
*****************************************************************************/
void NWK_RouteFreeEntry(NWK_RouteTableEntry_t *entry)
{
    9a6c:	fc 01       	movw	r30, r24
  if (entry->fixed)
    9a6e:	80 81       	ld	r24, Z
    9a70:	80 fd       	sbrc	r24, 0
    9a72:	05 c0       	rjmp	.+10     	; 0x9a7e <NWK_RouteFreeEntry+0x12>
    return;
  entry->dstAddr = NWK_ROUTE_UNKNOWN;
    9a74:	8f ef       	ldi	r24, 0xFF	; 255
    9a76:	9f ef       	ldi	r25, 0xFF	; 255
    9a78:	92 83       	std	Z+2, r25	; 0x02
    9a7a:	81 83       	std	Z+1, r24	; 0x01
  entry->rank = 0;
    9a7c:	15 82       	std	Z+5, r1	; 0x05
    9a7e:	08 95       	ret

00009a80 <NWK_RouteNextHop>:
*****************************************************************************/
uint16_t NWK_RouteNextHop(uint16_t dst, uint8_t multicast)
{
  NWK_RouteTableEntry_t *entry;

  entry = NWK_RouteFindEntry(dst, multicast);
    9a80:	97 df       	rcall	.-210    	; 0x99b0 <NWK_RouteFindEntry>
  if (entry)
    9a82:	00 97       	sbiw	r24, 0x00	; 0
    9a84:	21 f0       	breq	.+8      	; 0x9a8e <NWK_RouteNextHop+0xe>
    return entry->nextHopAddr;
    9a86:	fc 01       	movw	r30, r24
    9a88:	83 81       	ldd	r24, Z+3	; 0x03
    9a8a:	94 81       	ldd	r25, Z+4	; 0x04
    9a8c:	08 95       	ret

  return NWK_ROUTE_UNKNOWN;
    9a8e:	8f ef       	ldi	r24, 0xFF	; 255
    9a90:	9f ef       	ldi	r25, 0xFF	; 255
}
    9a92:	08 95       	ret

00009a94 <NWK_RouteTable>:
/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteTable(void)
{
  return nwkRouteTable;
}
    9a94:	85 ec       	ldi	r24, 0xC5	; 197
    9a96:	92 e3       	ldi	r25, 0x32	; 50
    9a98:	08 95       	ret

00009a9a <nwkRouteUpdateEntry>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteUpdateEntry(uint16_t dst, uint8_t multicast, uint16_t nextHop, uint8_t lqi)
{
    9a9a:	ef 92       	push	r14
    9a9c:	ff 92       	push	r15
    9a9e:	0f 93       	push	r16
    9aa0:	1f 93       	push	r17
    9aa2:	cf 93       	push	r28
    9aa4:	df 93       	push	r29
    9aa6:	ec 01       	movw	r28, r24
    9aa8:	f6 2e       	mov	r15, r22
    9aaa:	8a 01       	movw	r16, r20
    9aac:	e2 2e       	mov	r14, r18
  NWK_RouteTableEntry_t *entry;

  entry = NWK_RouteFindEntry(dst, multicast);
    9aae:	80 df       	rcall	.-256    	; 0x99b0 <NWK_RouteFindEntry>
    9ab0:	fc 01       	movw	r30, r24

  if (NULL == entry)
    9ab2:	00 97       	sbiw	r24, 0x00	; 0
    9ab4:	11 f4       	brne	.+4      	; 0x9aba <nwkRouteUpdateEntry+0x20>
    entry = NWK_RouteNewEntry();
    9ab6:	b4 df       	rcall	.-152    	; 0x9a20 <NWK_RouteNewEntry>
    9ab8:	fc 01       	movw	r30, r24

  entry->dstAddr = dst;
    9aba:	d2 83       	std	Z+2, r29	; 0x02
    9abc:	c1 83       	std	Z+1, r28	; 0x01
  entry->nextHopAddr = nextHop;
    9abe:	14 83       	std	Z+4, r17	; 0x04
    9ac0:	03 83       	std	Z+3, r16	; 0x03
  entry->multicast = multicast;
    9ac2:	80 81       	ld	r24, Z
    9ac4:	f0 fa       	bst	r15, 0
    9ac6:	81 f9       	bld	r24, 1
  entry->score = NWK_ROUTE_DEFAULT_SCORE;
    9ac8:	8f 70       	andi	r24, 0x0F	; 15
    9aca:	80 63       	ori	r24, 0x30	; 48
    9acc:	80 83       	st	Z, r24
  entry->rank = NWK_ROUTE_DEFAULT_RANK;
    9ace:	80 e8       	ldi	r24, 0x80	; 128
    9ad0:	85 83       	std	Z+5, r24	; 0x05
  entry->lqi = lqi;
    9ad2:	e6 82       	std	Z+6, r14	; 0x06
}
    9ad4:	df 91       	pop	r29
    9ad6:	cf 91       	pop	r28
    9ad8:	1f 91       	pop	r17
    9ada:	0f 91       	pop	r16
    9adc:	ff 90       	pop	r15
    9ade:	ef 90       	pop	r14
    9ae0:	08 95       	ret

00009ae2 <nwkRouteRemove>:
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
  NWK_RouteTableEntry_t *entry;

  entry = NWK_RouteFindEntry(dst, multicast);
    9ae2:	66 df       	rcall	.-308    	; 0x99b0 <NWK_RouteFindEntry>
  if (entry)
    9ae4:	00 97       	sbiw	r24, 0x00	; 0
    9ae6:	09 f0       	breq	.+2      	; 0x9aea <nwkRouteRemove+0x8>
    NWK_RouteFreeEntry(entry);
    9ae8:	c1 cf       	rjmp	.-126    	; 0x9a6c <NWK_RouteFreeEntry>
    9aea:	08 95       	ret

00009aec <nwkRouteFrameReceived>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameReceived(NwkFrame_t *frame)
{
    9aec:	08 95       	ret

00009aee <nwkRouteFrameSent>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameSent(NwkFrame_t *frame)
{
    9aee:	cf 93       	push	r28
    9af0:	df 93       	push	r29
    9af2:	ec 01       	movw	r28, r24
  NWK_RouteTableEntry_t *entry;

  if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr)
    9af4:	8f 85       	ldd	r24, Y+15	; 0x0f
    9af6:	98 89       	ldd	r25, Y+16	; 0x10
    9af8:	8f 3f       	cpi	r24, 0xFF	; 255
    9afa:	2f ef       	ldi	r18, 0xFF	; 255
    9afc:	92 07       	cpc	r25, r18
    9afe:	b1 f1       	breq	.+108    	; 0x9b6c <nwkRouteFrameSent+0x7e>
    return;

  entry = NWK_RouteFindEntry(frame->header.nwkDstAddr, frame->header.nwkFcf.multicast);
    9b00:	6b 85       	ldd	r22, Y+11	; 0x0b
    9b02:	63 fb       	bst	r22, 3
    9b04:	66 27       	eor	r22, r22
    9b06:	60 f9       	bld	r22, 0
    9b08:	53 df       	rcall	.-346    	; 0x99b0 <NWK_RouteFindEntry>
    9b0a:	fc 01       	movw	r30, r24

  if (NULL == entry || entry->fixed)
    9b0c:	00 97       	sbiw	r24, 0x00	; 0
    9b0e:	71 f1       	breq	.+92     	; 0x9b6c <nwkRouteFrameSent+0x7e>
    9b10:	80 81       	ld	r24, Z
    9b12:	80 fd       	sbrc	r24, 0
    9b14:	2b c0       	rjmp	.+86     	; 0x9b6c <nwkRouteFrameSent+0x7e>
    return;

  if (NWK_SUCCESS_STATUS == frame->tx.status)
    9b16:	cd 57       	subi	r28, 0x7D	; 125
    9b18:	df 4f       	sbci	r29, 0xFF	; 255
    9b1a:	88 81       	ld	r24, Y
    9b1c:	81 11       	cpse	r24, r1
    9b1e:	16 c0       	rjmp	.+44     	; 0x9b4c <nwkRouteFrameSent+0x5e>
  {
    entry->score = NWK_ROUTE_DEFAULT_SCORE;
    9b20:	80 81       	ld	r24, Z
    9b22:	8f 70       	andi	r24, 0x0F	; 15
    9b24:	80 63       	ori	r24, 0x30	; 48
    9b26:	80 83       	st	Z, r24

    if (NWK_ROUTE_MAX_RANK == ++entry->rank)
    9b28:	85 81       	ldd	r24, Z+5	; 0x05
    9b2a:	8f 5f       	subi	r24, 0xFF	; 255
    9b2c:	85 83       	std	Z+5, r24	; 0x05
    9b2e:	8f 3f       	cpi	r24, 0xFF	; 255
    9b30:	e9 f4       	brne	.+58     	; 0x9b6c <nwkRouteFrameSent+0x7e>
    9b32:	ea ec       	ldi	r30, 0xCA	; 202
    9b34:	f2 e3       	ldi	r31, 0x32	; 50
    9b36:	86 e5       	ldi	r24, 0x56	; 86
    9b38:	93 e3       	ldi	r25, 0x33	; 51
/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
    nwkRouteTable[i].rank = (nwkRouteTable[i].rank >> 1) + 1;
    9b3a:	20 81       	ld	r18, Z
    9b3c:	26 95       	lsr	r18
    9b3e:	2f 5f       	subi	r18, 0xFF	; 255
    9b40:	20 83       	st	Z, r18
    9b42:	37 96       	adiw	r30, 0x07	; 7

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
    9b44:	e8 17       	cp	r30, r24
    9b46:	f9 07       	cpc	r31, r25
    9b48:	c1 f7       	brne	.-16     	; 0x9b3a <nwkRouteFrameSent+0x4c>
    9b4a:	10 c0       	rjmp	.+32     	; 0x9b6c <nwkRouteFrameSent+0x7e>
    if (NWK_ROUTE_MAX_RANK == ++entry->rank)
      nwkRouteNormalizeRanks();
  }
  else
  {
    if (0 == --entry->score)
    9b4c:	90 81       	ld	r25, Z
    9b4e:	89 2f       	mov	r24, r25
    9b50:	82 95       	swap	r24
    9b52:	8f 70       	andi	r24, 0x0F	; 15
    9b54:	81 5f       	subi	r24, 0xF1	; 241
    9b56:	8f 70       	andi	r24, 0x0F	; 15
    9b58:	28 2f       	mov	r18, r24
    9b5a:	22 95       	swap	r18
    9b5c:	20 7f       	andi	r18, 0xF0	; 240
    9b5e:	9f 70       	andi	r25, 0x0F	; 15
    9b60:	92 2b       	or	r25, r18
    9b62:	90 83       	st	Z, r25
    9b64:	81 11       	cpse	r24, r1
    9b66:	02 c0       	rjmp	.+4      	; 0x9b6c <nwkRouteFrameSent+0x7e>
      NWK_RouteFreeEntry(entry);
    9b68:	cf 01       	movw	r24, r30
    9b6a:	80 df       	rcall	.-256    	; 0x9a6c <NWK_RouteFreeEntry>
  }
}
    9b6c:	df 91       	pop	r29
    9b6e:	cf 91       	pop	r28
    9b70:	08 95       	ret

00009b72 <nwkRoutePrepareTx>:

/*************************************************************************//**
*****************************************************************************/
void nwkRoutePrepareTx(NwkFrame_t *frame)
{
    9b72:	cf 93       	push	r28
    9b74:	df 93       	push	r29
    9b76:	ec 01       	movw	r28, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr)
    9b78:	8f 85       	ldd	r24, Y+15	; 0x0f
    9b7a:	98 89       	ldd	r25, Y+16	; 0x10
    9b7c:	8f 3f       	cpi	r24, 0xFF	; 255
    9b7e:	2f ef       	ldi	r18, 0xFF	; 255
    9b80:	92 07       	cpc	r25, r18
    9b82:	29 f4       	brne	.+10     	; 0x9b8e <nwkRoutePrepareTx+0x1c>
  {
    header->macDstAddr = NWK_BROADCAST_ADDR;
    9b84:	8f ef       	ldi	r24, 0xFF	; 255
    9b86:	9f ef       	ldi	r25, 0xFF	; 255
    9b88:	98 87       	std	Y+8, r25	; 0x08
    9b8a:	8f 83       	std	Y+7, r24	; 0x07
    9b8c:	23 c0       	rjmp	.+70     	; 0x9bd4 <nwkRoutePrepareTx+0x62>
  }

#ifdef NWK_ENABLE_MULTICAST
  else if (header->nwkFcf.multicast && NWK_GroupIsMember(header->nwkDstAddr))
    9b8e:	2b 85       	ldd	r18, Y+11	; 0x0b
    9b90:	23 ff       	sbrs	r18, 3
    9b92:	0b c0       	rjmp	.+22     	; 0x9baa <nwkRoutePrepareTx+0x38>
    9b94:	d4 de       	rcall	.-600    	; 0x993e <NWK_GroupIsMember>
    9b96:	88 23       	and	r24, r24
    9b98:	41 f0       	breq	.+16     	; 0x9baa <nwkRoutePrepareTx+0x38>
  {
    header->macDstAddr = NWK_BROADCAST_ADDR;
    9b9a:	8f ef       	ldi	r24, 0xFF	; 255
    9b9c:	9f ef       	ldi	r25, 0xFF	; 255
    9b9e:	98 87       	std	Y+8, r25	; 0x08
    9ba0:	8f 83       	std	Y+7, r24	; 0x07
    header->nwkFcf.linkLocal = 1;
    9ba2:	8b 85       	ldd	r24, Y+11	; 0x0b
    9ba4:	84 60       	ori	r24, 0x04	; 4
    9ba6:	8b 87       	std	Y+11, r24	; 0x0b
    9ba8:	15 c0       	rjmp	.+42     	; 0x9bd4 <nwkRoutePrepareTx+0x62>
  }
#endif

  else if (header->nwkFcf.linkLocal)
    9baa:	8b 85       	ldd	r24, Y+11	; 0x0b
    9bac:	82 ff       	sbrs	r24, 2
    9bae:	05 c0       	rjmp	.+10     	; 0x9bba <nwkRoutePrepareTx+0x48>
  {
    header->macDstAddr = header->nwkDstAddr;
    9bb0:	8f 85       	ldd	r24, Y+15	; 0x0f
    9bb2:	98 89       	ldd	r25, Y+16	; 0x10
    9bb4:	98 87       	std	Y+8, r25	; 0x08
    9bb6:	8f 83       	std	Y+7, r24	; 0x07
    9bb8:	0d c0       	rjmp	.+26     	; 0x9bd4 <nwkRoutePrepareTx+0x62>
  }

  else
  {
    header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast);
    9bba:	6b 85       	ldd	r22, Y+11	; 0x0b
    9bbc:	63 fb       	bst	r22, 3
    9bbe:	66 27       	eor	r22, r22
    9bc0:	60 f9       	bld	r22, 0
    9bc2:	8f 85       	ldd	r24, Y+15	; 0x0f
    9bc4:	98 89       	ldd	r25, Y+16	; 0x10
    9bc6:	5c df       	rcall	.-328    	; 0x9a80 <NWK_RouteNextHop>
    9bc8:	98 87       	std	Y+8, r25	; 0x08
    9bca:	8f 83       	std	Y+7, r24	; 0x07

  #ifdef NWK_ENABLE_ROUTE_DISCOVERY
    if (NWK_ROUTE_UNKNOWN == header->macDstAddr)
    9bcc:	01 96       	adiw	r24, 0x01	; 1
    9bce:	11 f4       	brne	.+4      	; 0x9bd4 <nwkRoutePrepareTx+0x62>
      nwkRouteDiscoveryRequest(frame);
    9bd0:	ce 01       	movw	r24, r28
    9bd2:	09 d2       	rcall	.+1042   	; 0x9fe6 <nwkRouteDiscoveryRequest>
  #endif
  }
}
    9bd4:	df 91       	pop	r29
    9bd6:	cf 91       	pop	r28
    9bd8:	08 95       	ret

00009bda <nwkRouteFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
    9bda:	bf 92       	push	r11
    9bdc:	cf 92       	push	r12
    9bde:	df 92       	push	r13
    9be0:	ef 92       	push	r14
    9be2:	ff 92       	push	r15
    9be4:	0f 93       	push	r16
    9be6:	1f 93       	push	r17
    9be8:	cf 93       	push	r28
    9bea:	df 93       	push	r29
    9bec:	ec 01       	movw	r28, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_ROUTE_UNKNOWN != NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast))
    9bee:	bb 84       	ldd	r11, Y+11	; 0x0b
    9bf0:	b3 fa       	bst	r11, 3
    9bf2:	bb 24       	eor	r11, r11
    9bf4:	b0 f8       	bld	r11, 0
    9bf6:	ef 84       	ldd	r14, Y+15	; 0x0f
    9bf8:	f8 88       	ldd	r15, Y+16	; 0x10
    9bfa:	6b 2d       	mov	r22, r11
    9bfc:	c7 01       	movw	r24, r14
    9bfe:	40 df       	rcall	.-384    	; 0x9a80 <NWK_RouteNextHop>
    9c00:	01 96       	adiw	r24, 0x01	; 1
    9c02:	61 f0       	breq	.+24     	; 0x9c1c <nwkRouteFrame+0x42>
  {
    frame->tx.confirm = NULL;
    9c04:	fe 01       	movw	r30, r28
    9c06:	e9 57       	subi	r30, 0x79	; 121
    9c08:	ff 4f       	sbci	r31, 0xFF	; 255
    9c0a:	11 82       	std	Z+1, r1	; 0x01
    9c0c:	10 82       	st	Z, r1
    frame->tx.control = NWK_TX_CONTROL_ROUTING;
    9c0e:	31 97       	sbiw	r30, 0x01	; 1
    9c10:	82 e0       	ldi	r24, 0x02	; 2
    9c12:	80 83       	st	Z, r24
    nwkTxFrame(frame);
    9c14:	ce 01       	movw	r24, r28
    9c16:	0e 94 32 56 	call	0xac64	; 0xac64 <nwkTxFrame>
    9c1a:	23 c0       	rjmp	.+70     	; 0x9c62 <nwkRouteFrame+0x88>
  }
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
    9c1c:	cd 84       	ldd	r12, Y+13	; 0x0d
    9c1e:	de 84       	ldd	r13, Y+14	; 0x0e
static void nwkRouteSendRouteError(uint16_t src, uint16_t dst, uint8_t multicast)
{
  NwkFrame_t *frame;
  NwkCommandRouteError_t *command;

  if (NULL == (frame = nwkFrameAlloc()))
    9c20:	bd dd       	rcall	.-1158   	; 0x979c <nwkFrameAlloc>
    9c22:	8c 01       	movw	r16, r24
    9c24:	00 97       	sbiw	r24, 0x00	; 0
    9c26:	d9 f0       	breq	.+54     	; 0x9c5e <nwkRouteFrame+0x84>
    return;

  nwkFrameCommandInit(frame);
    9c28:	1f de       	rcall	.-962    	; 0x9868 <nwkFrameCommandInit>

  frame->size += sizeof(NwkCommandRouteError_t);
    9c2a:	f8 01       	movw	r30, r16
    9c2c:	81 81       	ldd	r24, Z+1	; 0x01
    9c2e:	8a 5f       	subi	r24, 0xFA	; 250
    9c30:	81 83       	std	Z+1, r24	; 0x01
  frame->tx.confirm = NULL;
    9c32:	e9 57       	subi	r30, 0x79	; 121
    9c34:	ff 4f       	sbci	r31, 0xFF	; 255
    9c36:	11 82       	std	Z+1, r1	; 0x01
    9c38:	10 82       	st	Z, r1

  frame->header.nwkDstAddr = src;
    9c3a:	f8 01       	movw	r30, r16
    9c3c:	d0 8a       	std	Z+16, r13	; 0x10
    9c3e:	c7 86       	std	Z+15, r12	; 0x0f

  command = (NwkCommandRouteError_t *)frame->payload;
    9c40:	ef 57       	subi	r30, 0x7F	; 127
    9c42:	ff 4f       	sbci	r31, 0xFF	; 255
    9c44:	01 90       	ld	r0, Z+
    9c46:	f0 81       	ld	r31, Z
    9c48:	e0 2d       	mov	r30, r0
  command->id = NWK_COMMAND_ROUTE_ERROR;
    9c4a:	81 e0       	ldi	r24, 0x01	; 1
    9c4c:	80 83       	st	Z, r24
  command->srcAddr = src;
    9c4e:	d2 82       	std	Z+2, r13	; 0x02
    9c50:	c1 82       	std	Z+1, r12	; 0x01
  command->dstAddr = dst;
    9c52:	f4 82       	std	Z+4, r15	; 0x04
    9c54:	e3 82       	std	Z+3, r14	; 0x03
  command->multicast = multicast;
    9c56:	b5 82       	std	Z+5, r11	; 0x05

  nwkTxFrame(frame);
    9c58:	c8 01       	movw	r24, r16
    9c5a:	0e 94 32 56 	call	0xac64	; 0xac64 <nwkTxFrame>
    nwkTxFrame(frame);
  }
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
    nwkFrameFree(frame);
    9c5e:	ce 01       	movw	r24, r28
    9c60:	d4 dd       	rcall	.-1112   	; 0x980a <nwkFrameFree>
  }
}
    9c62:	df 91       	pop	r29
    9c64:	cf 91       	pop	r28
    9c66:	1f 91       	pop	r17
    9c68:	0f 91       	pop	r16
    9c6a:	ff 90       	pop	r15
    9c6c:	ef 90       	pop	r14
    9c6e:	df 90       	pop	r13
    9c70:	cf 90       	pop	r12
    9c72:	bf 90       	pop	r11
    9c74:	08 95       	ret

00009c76 <nwkRouteErrorReceived>:

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
    9c76:	dc 01       	movw	r26, r24
    9c78:	17 96       	adiw	r26, 0x07	; 7
    9c7a:	ed 91       	ld	r30, X+
    9c7c:	fc 91       	ld	r31, X
    9c7e:	18 97       	sbiw	r26, 0x08	; 8

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    9c80:	19 96       	adiw	r26, 0x09	; 9
    9c82:	8c 91       	ld	r24, X
    9c84:	86 30       	cpi	r24, 0x06	; 6
    9c86:	31 f4       	brne	.+12     	; 0x9c94 <nwkRouteErrorReceived+0x1e>
    return false;

  nwkRouteRemove(command->dstAddr, command->multicast);
    9c88:	65 81       	ldd	r22, Z+5	; 0x05
    9c8a:	83 81       	ldd	r24, Z+3	; 0x03
    9c8c:	94 81       	ldd	r25, Z+4	; 0x04
    9c8e:	29 df       	rcall	.-430    	; 0x9ae2 <nwkRouteRemove>

  return true;
    9c90:	81 e0       	ldi	r24, 0x01	; 1
    9c92:	08 95       	ret
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    return false;
    9c94:	80 e0       	ldi	r24, 0x00	; 0

  nwkRouteRemove(command->dstAddr, command->multicast);

  return true;
}
    9c96:	08 95       	ret

00009c98 <nwkRouteDiscoveryFindEntry>:

/*************************************************************************//**
*****************************************************************************/
static NwkRouteDiscoveryTableEntry_t *nwkRouteDiscoveryFindEntry(uint16_t src,
    uint16_t dst, uint8_t multicast)
{
    9c98:	ef 92       	push	r14
    9c9a:	ff 92       	push	r15
    9c9c:	0f 93       	push	r16
    9c9e:	1f 93       	push	r17
    9ca0:	cf 93       	push	r28
    9ca2:	df 93       	push	r29
    9ca4:	ee e5       	ldi	r30, 0x5E	; 94
    9ca6:	f3 e3       	ldi	r31, 0x33	; 51
    9ca8:	a2 e6       	ldi	r26, 0x62	; 98
    9caa:	b3 e3       	ldi	r27, 0x33	; 51
    9cac:	20 e0       	ldi	r18, 0x00	; 0
    9cae:	30 e0       	ldi	r19, 0x00	; 0
  for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++)
  {
    if (nwkRouteDiscoveryTable[i].timeout > 0 &&
    9cb0:	79 01       	movw	r14, r18
    9cb2:	c1 85       	ldd	r28, Z+9	; 0x09
    9cb4:	d2 85       	ldd	r29, Z+10	; 0x0a
    9cb6:	cd 2b       	or	r28, r29
    9cb8:	b1 f0       	breq	.+44     	; 0x9ce6 <nwkRouteDiscoveryFindEntry+0x4e>
    9cba:	c0 81       	ld	r28, Z
    9cbc:	d1 81       	ldd	r29, Z+1	; 0x01
    9cbe:	c8 17       	cp	r28, r24
    9cc0:	d9 07       	cpc	r29, r25
    9cc2:	89 f4       	brne	.+34     	; 0x9ce6 <nwkRouteDiscoveryFindEntry+0x4e>
        nwkRouteDiscoveryTable[i].srcAddr == src &&
    9cc4:	02 81       	ldd	r16, Z+2	; 0x02
    9cc6:	13 81       	ldd	r17, Z+3	; 0x03
    9cc8:	06 17       	cp	r16, r22
    9cca:	17 07       	cpc	r17, r23
    9ccc:	61 f4       	brne	.+24     	; 0x9ce6 <nwkRouteDiscoveryFindEntry+0x4e>
        nwkRouteDiscoveryTable[i].dstAddr == dst &&
    9cce:	5c 91       	ld	r21, X
    9cd0:	54 13       	cpse	r21, r20
    9cd2:	09 c0       	rjmp	.+18     	; 0x9ce6 <nwkRouteDiscoveryFindEntry+0x4e>
        nwkRouteDiscoveryTable[i].multicast == multicast)
      return &nwkRouteDiscoveryTable[i];
    9cd4:	2b e0       	ldi	r18, 0x0B	; 11
    9cd6:	2e 9d       	mul	r18, r14
    9cd8:	c0 01       	movw	r24, r0
    9cda:	2f 9d       	mul	r18, r15
    9cdc:	90 0d       	add	r25, r0
    9cde:	11 24       	eor	r1, r1
    9ce0:	82 5a       	subi	r24, 0xA2	; 162
    9ce2:	9c 4c       	sbci	r25, 0xCC	; 204
    9ce4:	09 c0       	rjmp	.+18     	; 0x9cf8 <nwkRouteDiscoveryFindEntry+0x60>
    9ce6:	2f 5f       	subi	r18, 0xFF	; 255
    9ce8:	3f 4f       	sbci	r19, 0xFF	; 255
    9cea:	3b 96       	adiw	r30, 0x0b	; 11
    9cec:	1b 96       	adiw	r26, 0x0b	; 11
/*************************************************************************//**
*****************************************************************************/
static NwkRouteDiscoveryTableEntry_t *nwkRouteDiscoveryFindEntry(uint16_t src,
    uint16_t dst, uint8_t multicast)
{
  for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++)
    9cee:	25 30       	cpi	r18, 0x05	; 5
    9cf0:	31 05       	cpc	r19, r1
    9cf2:	f1 f6       	brne	.-68     	; 0x9cb0 <nwkRouteDiscoveryFindEntry+0x18>
        nwkRouteDiscoveryTable[i].dstAddr == dst &&
        nwkRouteDiscoveryTable[i].multicast == multicast)
      return &nwkRouteDiscoveryTable[i];
  }

  return NULL;
    9cf4:	80 e0       	ldi	r24, 0x00	; 0
    9cf6:	90 e0       	ldi	r25, 0x00	; 0
}
    9cf8:	df 91       	pop	r29
    9cfa:	cf 91       	pop	r28
    9cfc:	1f 91       	pop	r17
    9cfe:	0f 91       	pop	r16
    9d00:	ff 90       	pop	r15
    9d02:	ef 90       	pop	r14
    9d04:	08 95       	ret

00009d06 <nwkRouteDiscoveryNewEntry>:

/*************************************************************************//**
*****************************************************************************/
static NwkRouteDiscoveryTableEntry_t *nwkRouteDiscoveryNewEntry(void)
{
    9d06:	cf 93       	push	r28
    9d08:	df 93       	push	r29
  NwkRouteDiscoveryTableEntry_t *entry = NULL;

  for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++)
  {
    if (0 == nwkRouteDiscoveryTable[i].timeout)
    9d0a:	80 91 67 33 	lds	r24, 0x3367
    9d0e:	90 91 68 33 	lds	r25, 0x3368
    9d12:	89 2b       	or	r24, r25
    9d14:	51 f0       	breq	.+20     	; 0x9d2a <nwkRouteDiscoveryNewEntry+0x24>
    9d16:	e2 e7       	ldi	r30, 0x72	; 114
    9d18:	f3 e3       	ldi	r31, 0x33	; 51
    9d1a:	81 e0       	ldi	r24, 0x01	; 1
    9d1c:	90 e0       	ldi	r25, 0x00	; 0
    9d1e:	ac 01       	movw	r20, r24
    9d20:	20 81       	ld	r18, Z
    9d22:	31 81       	ldd	r19, Z+1	; 0x01
    9d24:	23 2b       	or	r18, r19
    9d26:	71 f4       	brne	.+28     	; 0x9d44 <nwkRouteDiscoveryNewEntry+0x3e>
    9d28:	02 c0       	rjmp	.+4      	; 0x9d2e <nwkRouteDiscoveryNewEntry+0x28>
    9d2a:	40 e0       	ldi	r20, 0x00	; 0
    9d2c:	50 e0       	ldi	r21, 0x00	; 0
    {
      entry = &nwkRouteDiscoveryTable[i];
    9d2e:	8b e0       	ldi	r24, 0x0B	; 11
    9d30:	84 9f       	mul	r24, r20
    9d32:	e0 01       	movw	r28, r0
    9d34:	85 9f       	mul	r24, r21
    9d36:	d0 0d       	add	r29, r0
    9d38:	11 24       	eor	r1, r1
    9d3a:	c2 5a       	subi	r28, 0xA2	; 162
    9d3c:	dc 4c       	sbci	r29, 0xCC	; 204
      break;
    }
  }

  if (entry)
    9d3e:	20 97       	sbiw	r28, 0x00	; 0
    9d40:	39 f4       	brne	.+14     	; 0x9d50 <nwkRouteDiscoveryNewEntry+0x4a>
    9d42:	13 c0       	rjmp	.+38     	; 0x9d6a <nwkRouteDiscoveryNewEntry+0x64>
    9d44:	01 96       	adiw	r24, 0x01	; 1
    9d46:	3b 96       	adiw	r30, 0x0b	; 11
*****************************************************************************/
static NwkRouteDiscoveryTableEntry_t *nwkRouteDiscoveryNewEntry(void)
{
  NwkRouteDiscoveryTableEntry_t *entry = NULL;

  for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++)
    9d48:	85 30       	cpi	r24, 0x05	; 5
    9d4a:	91 05       	cpc	r25, r1
    9d4c:	41 f7       	brne	.-48     	; 0x9d1e <nwkRouteDiscoveryNewEntry+0x18>
    9d4e:	0b c0       	rjmp	.+22     	; 0x9d66 <nwkRouteDiscoveryNewEntry+0x60>
    }
  }

  if (entry)
  {
    entry->forwardLinkQuality = NWK_ROUTE_DISCOVERY_NO_LINK;
    9d50:	1f 82       	std	Y+7, r1	; 0x07
    entry->reverseLinkQuality = NWK_ROUTE_DISCOVERY_NO_LINK;
    9d52:	18 86       	std	Y+8, r1	; 0x08
    entry->timeout = NWK_ROUTE_DISCOVERY_TIMEOUT;
    9d54:	88 ee       	ldi	r24, 0xE8	; 232
    9d56:	93 e0       	ldi	r25, 0x03	; 3
    9d58:	9a 87       	std	Y+10, r25	; 0x0a
    9d5a:	89 87       	std	Y+9, r24	; 0x09
    SYS_TimerStart(&nwkRouteDiscoveryTimer);
    9d5c:	81 e5       	ldi	r24, 0x51	; 81
    9d5e:	93 e3       	ldi	r25, 0x33	; 51
    9d60:	0e 94 2f 5a 	call	0xb45e	; 0xb45e <SYS_TimerStart>
    9d64:	02 c0       	rjmp	.+4      	; 0x9d6a <nwkRouteDiscoveryNewEntry+0x64>

/*************************************************************************//**
*****************************************************************************/
static NwkRouteDiscoveryTableEntry_t *nwkRouteDiscoveryNewEntry(void)
{
  NwkRouteDiscoveryTableEntry_t *entry = NULL;
    9d66:	c0 e0       	ldi	r28, 0x00	; 0
    9d68:	d0 e0       	ldi	r29, 0x00	; 0
    entry->timeout = NWK_ROUTE_DISCOVERY_TIMEOUT;
    SYS_TimerStart(&nwkRouteDiscoveryTimer);
  }

  return entry;
}
    9d6a:	ce 01       	movw	r24, r28
    9d6c:	df 91       	pop	r29
    9d6e:	cf 91       	pop	r28
    9d70:	08 95       	ret

00009d72 <nwkRouteDiscoveryTimerHandler>:

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteDiscoveryTimerHandler(SYS_Timer_t *timer)
{
    9d72:	2f 92       	push	r2
    9d74:	3f 92       	push	r3
    9d76:	4f 92       	push	r4
    9d78:	5f 92       	push	r5
    9d7a:	6f 92       	push	r6
    9d7c:	7f 92       	push	r7
    9d7e:	8f 92       	push	r8
    9d80:	9f 92       	push	r9
    9d82:	af 92       	push	r10
    9d84:	bf 92       	push	r11
    9d86:	cf 92       	push	r12
    9d88:	df 92       	push	r13
    9d8a:	ef 92       	push	r14
    9d8c:	ff 92       	push	r15
    9d8e:	0f 93       	push	r16
    9d90:	1f 93       	push	r17
    9d92:	cf 93       	push	r28
    9d94:	df 93       	push	r29
    9d96:	00 d0       	rcall	.+0      	; 0x9d98 <nwkRouteDiscoveryTimerHandler+0x26>
    9d98:	cd b7       	in	r28, 0x3d	; 61
    9d9a:	de b7       	in	r29, 0x3e	; 62
    9d9c:	5c 01       	movw	r10, r24
    9d9e:	8e e5       	ldi	r24, 0x5E	; 94
    9da0:	93 e3       	ldi	r25, 0x33	; 51
    9da2:	9b 83       	std	Y+3, r25	; 0x03
    9da4:	8a 83       	std	Y+2, r24	; 0x02
    9da6:	81 2c       	mov	r8, r1
    9da8:	91 2c       	mov	r9, r1
  NwkRouteDiscoveryTableEntry_t *entry;
  bool restart = false;
    9daa:	51 2c       	mov	r5, r1
    }
    else
    {
      entry->timeout = 0;

      if (entry->srcAddr == nwkIb.addr)
    9dac:	0f 2e       	mov	r0, r31
    9dae:	f3 e0       	ldi	r31, 0x03	; 3
    9db0:	cf 2e       	mov	r12, r31
    9db2:	fa e3       	ldi	r31, 0x3A	; 58
    9db4:	df 2e       	mov	r13, r31
    9db6:	f0 2d       	mov	r31, r0

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteDiscoveryDone(NwkRouteDiscoveryTableEntry_t *entry, bool status)
{
  NwkFrame_t *frame = NULL;
    9db8:	21 2c       	mov	r2, r1
    9dba:	31 2c       	mov	r3, r1
    entry = &nwkRouteDiscoveryTable[i];

    if (entry->timeout > NWK_ROUTE_DISCOVERY_TIMER_INTERVAL)
    {
      entry->timeout -= NWK_ROUTE_DISCOVERY_TIMER_INTERVAL;
      restart = true;
    9dbc:	44 24       	eor	r4, r4
    9dbe:	43 94       	inc	r4
    9dc0:	ea 80       	ldd	r14, Y+2	; 0x02
    9dc2:	fb 80       	ldd	r15, Y+3	; 0x03

  for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++)
  {
    entry = &nwkRouteDiscoveryTable[i];

    if (entry->timeout > NWK_ROUTE_DISCOVERY_TIMER_INTERVAL)
    9dc4:	f7 01       	movw	r30, r14
    9dc6:	81 85       	ldd	r24, Z+9	; 0x09
    9dc8:	92 85       	ldd	r25, Z+10	; 0x0a
    9dca:	85 36       	cpi	r24, 0x65	; 101
    9dcc:	91 05       	cpc	r25, r1
    9dce:	30 f0       	brcs	.+12     	; 0x9ddc <nwkRouteDiscoveryTimerHandler+0x6a>
    {
      entry->timeout -= NWK_ROUTE_DISCOVERY_TIMER_INTERVAL;
    9dd0:	84 56       	subi	r24, 0x64	; 100
    9dd2:	91 09       	sbc	r25, r1
    9dd4:	92 87       	std	Z+10, r25	; 0x0a
    9dd6:	81 87       	std	Z+9, r24	; 0x09
      restart = true;
    9dd8:	54 2c       	mov	r5, r4
    9dda:	39 c0       	rjmp	.+114    	; 0x9e4e <nwkRouteDiscoveryTimerHandler+0xdc>
    }
    else
    {
      entry->timeout = 0;
    9ddc:	ea 81       	ldd	r30, Y+2	; 0x02
    9dde:	fb 81       	ldd	r31, Y+3	; 0x03
    9de0:	12 86       	std	Z+10, r1	; 0x0a
    9de2:	11 86       	std	Z+9, r1	; 0x09

      if (entry->srcAddr == nwkIb.addr)
    9de4:	20 81       	ld	r18, Z
    9de6:	31 81       	ldd	r19, Z+1	; 0x01
    9de8:	f6 01       	movw	r30, r12
    9dea:	80 81       	ld	r24, Z
    9dec:	91 81       	ldd	r25, Z+1	; 0x01
    9dee:	28 17       	cp	r18, r24
    9df0:	39 07       	cpc	r19, r25
    9df2:	69 f5       	brne	.+90     	; 0x9e4e <nwkRouteDiscoveryTimerHandler+0xdc>
    9df4:	c4 01       	movw	r24, r8
    9df6:	82 5a       	subi	r24, 0xA2	; 162
    9df8:	9c 4c       	sbci	r25, 0xCC	; 204
    9dfa:	3c 01       	movw	r6, r24
        nwkRouteDiscoveryDone(entry, entry->reverseLinkQuality > 0);
    9dfc:	fc 01       	movw	r30, r24
    9dfe:	f0 85       	ldd	r31, Z+8	; 0x08
    9e00:	f9 83       	std	Y+1, r31	; 0x01

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteDiscoveryDone(NwkRouteDiscoveryTableEntry_t *entry, bool status)
{
  NwkFrame_t *frame = NULL;
    9e02:	02 2d       	mov	r16, r2
    9e04:	13 2d       	mov	r17, r3
    9e06:	1e c0       	rjmp	.+60     	; 0x9e44 <nwkRouteDiscoveryTimerHandler+0xd2>

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_RD_STATE_WAIT_FOR_ROUTE != frame->state)
    9e08:	f8 01       	movw	r30, r16
    9e0a:	80 81       	ld	r24, Z
    9e0c:	80 34       	cpi	r24, 0x40	; 64
    9e0e:	d1 f4       	brne	.+52     	; 0x9e44 <nwkRouteDiscoveryTimerHandler+0xd2>
      continue;

    if (entry->dstAddr != frame->header.nwkDstAddr ||
    9e10:	f7 01       	movw	r30, r14
    9e12:	22 81       	ldd	r18, Z+2	; 0x02
    9e14:	33 81       	ldd	r19, Z+3	; 0x03
    9e16:	f8 01       	movw	r30, r16
    9e18:	87 85       	ldd	r24, Z+15	; 0x0f
    9e1a:	90 89       	ldd	r25, Z+16	; 0x10
    9e1c:	28 17       	cp	r18, r24
    9e1e:	39 07       	cpc	r19, r25
    9e20:	89 f4       	brne	.+34     	; 0x9e44 <nwkRouteDiscoveryTimerHandler+0xd2>
        entry->multicast != frame->header.nwkFcf.multicast)
    9e22:	83 85       	ldd	r24, Z+11	; 0x0b
    9e24:	83 fb       	bst	r24, 3
    9e26:	88 27       	eor	r24, r24
    9e28:	80 f9       	bld	r24, 0
  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_RD_STATE_WAIT_FOR_ROUTE != frame->state)
      continue;

    if (entry->dstAddr != frame->header.nwkDstAddr ||
    9e2a:	f3 01       	movw	r30, r6
    9e2c:	94 81       	ldd	r25, Z+4	; 0x04
    9e2e:	98 13       	cpse	r25, r24
    9e30:	09 c0       	rjmp	.+18     	; 0x9e44 <nwkRouteDiscoveryTimerHandler+0xd2>
        entry->multicast != frame->header.nwkFcf.multicast)
      continue;

    if (status)
    9e32:	f9 81       	ldd	r31, Y+1	; 0x01
    9e34:	ff 23       	and	r31, r31
    9e36:	19 f0       	breq	.+6      	; 0x9e3e <nwkRouteDiscoveryTimerHandler+0xcc>
      nwkTxFrame(frame);
    9e38:	c8 01       	movw	r24, r16
    9e3a:	14 d7       	rcall	.+3624   	; 0xac64 <nwkTxFrame>
    9e3c:	03 c0       	rjmp	.+6      	; 0x9e44 <nwkRouteDiscoveryTimerHandler+0xd2>
    else
      nwkTxConfirm(frame, NWK_NO_ROUTE_STATUS);
    9e3e:	61 e1       	ldi	r22, 0x11	; 17
    9e40:	c8 01       	movw	r24, r16
    9e42:	d5 d7       	rcall	.+4010   	; 0xadee <nwkTxConfirm>
*****************************************************************************/
static void nwkRouteDiscoveryDone(NwkRouteDiscoveryTableEntry_t *entry, bool status)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    9e44:	c8 01       	movw	r24, r16
    9e46:	eb dc       	rcall	.-1578   	; 0x981e <nwkFrameNext>
    9e48:	8c 01       	movw	r16, r24
    9e4a:	00 97       	sbiw	r24, 0x00	; 0
    9e4c:	e9 f6       	brne	.-70     	; 0x9e08 <nwkRouteDiscoveryTimerHandler+0x96>
    9e4e:	8b e0       	ldi	r24, 0x0B	; 11
    9e50:	88 0e       	add	r8, r24
    9e52:	91 1c       	adc	r9, r1
    9e54:	ea 81       	ldd	r30, Y+2	; 0x02
    9e56:	fb 81       	ldd	r31, Y+3	; 0x03
    9e58:	3b 96       	adiw	r30, 0x0b	; 11
    9e5a:	fb 83       	std	Y+3, r31	; 0x03
    9e5c:	ea 83       	std	Y+2, r30	; 0x02
static void nwkRouteDiscoveryTimerHandler(SYS_Timer_t *timer)
{
  NwkRouteDiscoveryTableEntry_t *entry;
  bool restart = false;

  for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++)
    9e5e:	f7 e3       	ldi	r31, 0x37	; 55
    9e60:	8f 16       	cp	r8, r31
    9e62:	91 04       	cpc	r9, r1
    9e64:	09 f0       	breq	.+2      	; 0x9e68 <nwkRouteDiscoveryTimerHandler+0xf6>
    9e66:	ac cf       	rjmp	.-168    	; 0x9dc0 <nwkRouteDiscoveryTimerHandler+0x4e>
      if (entry->srcAddr == nwkIb.addr)
        nwkRouteDiscoveryDone(entry, entry->reverseLinkQuality > 0);
    }
  }

  if (restart)
    9e68:	55 20       	and	r5, r5
    9e6a:	19 f0       	breq	.+6      	; 0x9e72 <nwkRouteDiscoveryTimerHandler+0x100>
    SYS_TimerStart(timer);
    9e6c:	c5 01       	movw	r24, r10
    9e6e:	0e 94 2f 5a 	call	0xb45e	; 0xb45e <SYS_TimerStart>
}
    9e72:	0f 90       	pop	r0
    9e74:	0f 90       	pop	r0
    9e76:	0f 90       	pop	r0
    9e78:	df 91       	pop	r29
    9e7a:	cf 91       	pop	r28
    9e7c:	1f 91       	pop	r17
    9e7e:	0f 91       	pop	r16
    9e80:	ff 90       	pop	r15
    9e82:	ef 90       	pop	r14
    9e84:	df 90       	pop	r13
    9e86:	cf 90       	pop	r12
    9e88:	bf 90       	pop	r11
    9e8a:	af 90       	pop	r10
    9e8c:	9f 90       	pop	r9
    9e8e:	8f 90       	pop	r8
    9e90:	7f 90       	pop	r7
    9e92:	6f 90       	pop	r6
    9e94:	5f 90       	pop	r5
    9e96:	4f 90       	pop	r4
    9e98:	3f 90       	pop	r3
    9e9a:	2f 90       	pop	r2
    9e9c:	08 95       	ret

00009e9e <nwkRouteDiscoverySendRequest>:

/*************************************************************************//**
*****************************************************************************/
static bool nwkRouteDiscoverySendRequest(NwkRouteDiscoveryTableEntry_t *entry, uint8_t lq)
{
    9e9e:	ff 92       	push	r15
    9ea0:	0f 93       	push	r16
    9ea2:	1f 93       	push	r17
    9ea4:	cf 93       	push	r28
    9ea6:	df 93       	push	r29
    9ea8:	8c 01       	movw	r16, r24
    9eaa:	f6 2e       	mov	r15, r22
  NwkFrame_t *req;
  NwkCommandRouteRequest_t *command;

  if (NULL == (req = nwkFrameAlloc()))
    9eac:	77 dc       	rcall	.-1810   	; 0x979c <nwkFrameAlloc>
    9eae:	ec 01       	movw	r28, r24
    9eb0:	00 97       	sbiw	r24, 0x00	; 0
    9eb2:	51 f1       	breq	.+84     	; 0x9f08 <nwkRouteDiscoverySendRequest+0x6a>
    return false;

  nwkFrameCommandInit(req);
    9eb4:	d9 dc       	rcall	.-1614   	; 0x9868 <nwkFrameCommandInit>

  req->size += sizeof(NwkCommandRouteRequest_t);
    9eb6:	89 81       	ldd	r24, Y+1	; 0x01
    9eb8:	89 5f       	subi	r24, 0xF9	; 249
    9eba:	89 83       	std	Y+1, r24	; 0x01
  req->tx.confirm = NULL;
    9ebc:	fe 01       	movw	r30, r28
    9ebe:	e9 57       	subi	r30, 0x79	; 121
    9ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    9ec2:	11 82       	std	Z+1, r1	; 0x01
    9ec4:	10 82       	st	Z, r1

  req->header.nwkFcf.linkLocal = 1;
    9ec6:	8b 85       	ldd	r24, Y+11	; 0x0b
    9ec8:	84 60       	ori	r24, 0x04	; 4
    9eca:	8b 87       	std	Y+11, r24	; 0x0b
  req->header.nwkDstAddr = NWK_BROADCAST_ADDR;
    9ecc:	8f ef       	ldi	r24, 0xFF	; 255
    9ece:	9f ef       	ldi	r25, 0xFF	; 255
    9ed0:	98 8b       	std	Y+16, r25	; 0x10
    9ed2:	8f 87       	std	Y+15, r24	; 0x0f

  command = (NwkCommandRouteRequest_t *)req->payload;
    9ed4:	36 97       	sbiw	r30, 0x06	; 6
    9ed6:	01 90       	ld	r0, Z+
    9ed8:	f0 81       	ld	r31, Z
    9eda:	e0 2d       	mov	r30, r0
  command->id = NWK_COMMAND_ROUTE_REQUEST;
    9edc:	82 e0       	ldi	r24, 0x02	; 2
    9ede:	80 83       	st	Z, r24
  command->srcAddr = entry->srcAddr;
    9ee0:	d8 01       	movw	r26, r16
    9ee2:	8d 91       	ld	r24, X+
    9ee4:	9c 91       	ld	r25, X
    9ee6:	11 97       	sbiw	r26, 0x01	; 1
    9ee8:	92 83       	std	Z+2, r25	; 0x02
    9eea:	81 83       	std	Z+1, r24	; 0x01
  command->dstAddr = entry->dstAddr;
    9eec:	12 96       	adiw	r26, 0x02	; 2
    9eee:	8d 91       	ld	r24, X+
    9ef0:	9c 91       	ld	r25, X
    9ef2:	13 97       	sbiw	r26, 0x03	; 3
    9ef4:	94 83       	std	Z+4, r25	; 0x04
    9ef6:	83 83       	std	Z+3, r24	; 0x03
  command->multicast = entry->multicast;
    9ef8:	14 96       	adiw	r26, 0x04	; 4
    9efa:	8c 91       	ld	r24, X
    9efc:	85 83       	std	Z+5, r24	; 0x05
  command->linkQuality = lq;
    9efe:	f6 82       	std	Z+6, r15	; 0x06

  nwkTxFrame(req);
    9f00:	ce 01       	movw	r24, r28
    9f02:	b0 d6       	rcall	.+3424   	; 0xac64 <nwkTxFrame>

  return true;
    9f04:	81 e0       	ldi	r24, 0x01	; 1
    9f06:	01 c0       	rjmp	.+2      	; 0x9f0a <nwkRouteDiscoverySendRequest+0x6c>
{
  NwkFrame_t *req;
  NwkCommandRouteRequest_t *command;

  if (NULL == (req = nwkFrameAlloc()))
    return false;
    9f08:	80 e0       	ldi	r24, 0x00	; 0
  command->linkQuality = lq;

  nwkTxFrame(req);

  return true;
}
    9f0a:	df 91       	pop	r29
    9f0c:	cf 91       	pop	r28
    9f0e:	1f 91       	pop	r17
    9f10:	0f 91       	pop	r16
    9f12:	ff 90       	pop	r15
    9f14:	08 95       	ret

00009f16 <nwkRouteDiscoverySendReply>:
}

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteDiscoverySendReply(NwkRouteDiscoveryTableEntry_t *entry, uint8_t flq, uint8_t rlq)
{
    9f16:	ef 92       	push	r14
    9f18:	ff 92       	push	r15
    9f1a:	0f 93       	push	r16
    9f1c:	1f 93       	push	r17
    9f1e:	cf 93       	push	r28
    9f20:	df 93       	push	r29
    9f22:	8c 01       	movw	r16, r24
    9f24:	e6 2e       	mov	r14, r22
    9f26:	f4 2e       	mov	r15, r20
  NwkFrame_t *req;
  NwkCommandRouteReply_t *command;

  if (NULL == (req = nwkFrameAlloc()))
    9f28:	39 dc       	rcall	.-1934   	; 0x979c <nwkFrameAlloc>
    9f2a:	ec 01       	movw	r28, r24
    9f2c:	00 97       	sbiw	r24, 0x00	; 0
    9f2e:	59 f1       	breq	.+86     	; 0x9f86 <nwkRouteDiscoverySendReply+0x70>
    return;

  nwkFrameCommandInit(req);
    9f30:	9b dc       	rcall	.-1738   	; 0x9868 <nwkFrameCommandInit>

  req->size += sizeof(NwkCommandRouteReply_t);
    9f32:	89 81       	ldd	r24, Y+1	; 0x01
    9f34:	88 5f       	subi	r24, 0xF8	; 248
    9f36:	89 83       	std	Y+1, r24	; 0x01
  req->tx.confirm = NULL;
    9f38:	fe 01       	movw	r30, r28
    9f3a:	e9 57       	subi	r30, 0x79	; 121
    9f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    9f3e:	11 82       	std	Z+1, r1	; 0x01
    9f40:	10 82       	st	Z, r1
  req->tx.control = NWK_TX_CONTROL_DIRECT_LINK;
    9f42:	31 97       	sbiw	r30, 0x01	; 1
    9f44:	84 e0       	ldi	r24, 0x04	; 4
    9f46:	80 83       	st	Z, r24

  req->header.nwkDstAddr = entry->senderAddr;
    9f48:	d8 01       	movw	r26, r16
    9f4a:	15 96       	adiw	r26, 0x05	; 5
    9f4c:	8d 91       	ld	r24, X+
    9f4e:	9c 91       	ld	r25, X
    9f50:	16 97       	sbiw	r26, 0x06	; 6
    9f52:	98 8b       	std	Y+16, r25	; 0x10
    9f54:	8f 87       	std	Y+15, r24	; 0x0f

  command = (NwkCommandRouteReply_t *)req->payload;
    9f56:	35 97       	sbiw	r30, 0x05	; 5
    9f58:	01 90       	ld	r0, Z+
    9f5a:	f0 81       	ld	r31, Z
    9f5c:	e0 2d       	mov	r30, r0
  command->id = NWK_COMMAND_ROUTE_REPLY;
    9f5e:	83 e0       	ldi	r24, 0x03	; 3
    9f60:	80 83       	st	Z, r24
  command->srcAddr = entry->srcAddr;
    9f62:	8d 91       	ld	r24, X+
    9f64:	9c 91       	ld	r25, X
    9f66:	11 97       	sbiw	r26, 0x01	; 1
    9f68:	92 83       	std	Z+2, r25	; 0x02
    9f6a:	81 83       	std	Z+1, r24	; 0x01
  command->dstAddr = entry->dstAddr;
    9f6c:	12 96       	adiw	r26, 0x02	; 2
    9f6e:	8d 91       	ld	r24, X+
    9f70:	9c 91       	ld	r25, X
    9f72:	13 97       	sbiw	r26, 0x03	; 3
    9f74:	94 83       	std	Z+4, r25	; 0x04
    9f76:	83 83       	std	Z+3, r24	; 0x03
  command->multicast = entry->multicast;
    9f78:	14 96       	adiw	r26, 0x04	; 4
    9f7a:	8c 91       	ld	r24, X
    9f7c:	85 83       	std	Z+5, r24	; 0x05
  command->forwardLinkQuality = flq;
    9f7e:	e6 82       	std	Z+6, r14	; 0x06
  command->reverseLinkQuality = rlq;
    9f80:	f7 82       	std	Z+7, r15	; 0x07

  nwkTxFrame(req);
    9f82:	ce 01       	movw	r24, r28
    9f84:	6f d6       	rcall	.+3294   	; 0xac64 <nwkTxFrame>
}
    9f86:	df 91       	pop	r29
    9f88:	cf 91       	pop	r28
    9f8a:	1f 91       	pop	r17
    9f8c:	0f 91       	pop	r16
    9f8e:	ff 90       	pop	r15
    9f90:	ef 90       	pop	r14
    9f92:	08 95       	ret

00009f94 <nwkRouteDiscoveryInit>:
  @brief Initializes the Route Discovery module
*****************************************************************************/
void nwkRouteDiscoveryInit(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++)
    nwkRouteDiscoveryTable[i].timeout = 0;
    9f94:	10 92 68 33 	sts	0x3368, r1
    9f98:	10 92 67 33 	sts	0x3367, r1
    9f9c:	10 92 73 33 	sts	0x3373, r1
    9fa0:	10 92 72 33 	sts	0x3372, r1
    9fa4:	10 92 7e 33 	sts	0x337E, r1
    9fa8:	10 92 7d 33 	sts	0x337D, r1
    9fac:	10 92 89 33 	sts	0x3389, r1
    9fb0:	10 92 88 33 	sts	0x3388, r1
    9fb4:	10 92 94 33 	sts	0x3394, r1
    9fb8:	10 92 93 33 	sts	0x3393, r1

  nwkRouteDiscoveryTimer.interval = NWK_ROUTE_DISCOVERY_TIMER_INTERVAL;
    9fbc:	84 e6       	ldi	r24, 0x64	; 100
    9fbe:	90 e0       	ldi	r25, 0x00	; 0
    9fc0:	a0 e0       	ldi	r26, 0x00	; 0
    9fc2:	b0 e0       	ldi	r27, 0x00	; 0
    9fc4:	80 93 57 33 	sts	0x3357, r24
    9fc8:	90 93 58 33 	sts	0x3358, r25
    9fcc:	a0 93 59 33 	sts	0x3359, r26
    9fd0:	b0 93 5a 33 	sts	0x335A, r27
  nwkRouteDiscoveryTimer.mode = SYS_TIMER_INTERVAL_MODE;
    9fd4:	10 92 5b 33 	sts	0x335B, r1
  nwkRouteDiscoveryTimer.handler = nwkRouteDiscoveryTimerHandler;
    9fd8:	89 eb       	ldi	r24, 0xB9	; 185
    9fda:	9e e4       	ldi	r25, 0x4E	; 78
    9fdc:	90 93 5d 33 	sts	0x335D, r25
    9fe0:	80 93 5c 33 	sts	0x335C, r24
    9fe4:	08 95       	ret

00009fe6 <nwkRouteDiscoveryRequest>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteDiscoveryRequest(NwkFrame_t *frame)
{
    9fe6:	cf 93       	push	r28
    9fe8:	df 93       	push	r29
    9fea:	ec 01       	movw	r28, r24
  NwkFrameHeader_t *header = &frame->header;
  NwkRouteDiscoveryTableEntry_t *entry;
  
  entry = nwkRouteDiscoveryFindEntry(nwkIb.addr, header->nwkDstAddr, header->nwkFcf.multicast);
    9fec:	4b 85       	ldd	r20, Y+11	; 0x0b
    9fee:	43 fb       	bst	r20, 3
    9ff0:	44 27       	eor	r20, r20
    9ff2:	40 f9       	bld	r20, 0
    9ff4:	6f 85       	ldd	r22, Y+15	; 0x0f
    9ff6:	78 89       	ldd	r23, Y+16	; 0x10
    9ff8:	80 91 03 3a 	lds	r24, 0x3A03
    9ffc:	90 91 04 3a 	lds	r25, 0x3A04
    a000:	4b de       	rcall	.-874    	; 0x9c98 <nwkRouteDiscoveryFindEntry>

  if (entry)
    a002:	89 2b       	or	r24, r25
    a004:	19 f0       	breq	.+6      	; 0xa00c <nwkRouteDiscoveryRequest+0x26>
  {
    frame->state = NWK_RD_STATE_WAIT_FOR_ROUTE;
    a006:	80 e4       	ldi	r24, 0x40	; 64
    a008:	88 83       	st	Y, r24
    return;
    a00a:	21 c0       	rjmp	.+66     	; 0xa04e <nwkRouteDiscoveryRequest+0x68>
  }

  entry = nwkRouteDiscoveryNewEntry();
    a00c:	7c de       	rcall	.-776    	; 0x9d06 <nwkRouteDiscoveryNewEntry>

  if (entry)
    a00e:	00 97       	sbiw	r24, 0x00	; 0
    a010:	d9 f0       	breq	.+54     	; 0xa048 <nwkRouteDiscoveryRequest+0x62>
  {
    entry->srcAddr = nwkIb.addr;
    a012:	20 91 03 3a 	lds	r18, 0x3A03
    a016:	30 91 04 3a 	lds	r19, 0x3A04
    a01a:	fc 01       	movw	r30, r24
    a01c:	31 83       	std	Z+1, r19	; 0x01
    a01e:	20 83       	st	Z, r18
    entry->dstAddr = header->nwkDstAddr;
    a020:	2f 85       	ldd	r18, Y+15	; 0x0f
    a022:	38 89       	ldd	r19, Y+16	; 0x10
    a024:	33 83       	std	Z+3, r19	; 0x03
    a026:	22 83       	std	Z+2, r18	; 0x02
    entry->multicast = header->nwkFcf.multicast;
    a028:	2b 85       	ldd	r18, Y+11	; 0x0b
    a02a:	23 fb       	bst	r18, 3
    a02c:	22 27       	eor	r18, r18
    a02e:	20 f9       	bld	r18, 0
    a030:	24 83       	std	Z+4, r18	; 0x04
    entry->senderAddr = NWK_BROADCAST_ADDR;
    a032:	2f ef       	ldi	r18, 0xFF	; 255
    a034:	3f ef       	ldi	r19, 0xFF	; 255
    a036:	36 83       	std	Z+6, r19	; 0x06
    a038:	25 83       	std	Z+5, r18	; 0x05

    if (nwkRouteDiscoverySendRequest(entry, NWK_ROUTE_DISCOVERY_BEST_LINK_QUALITY))
    a03a:	6f ef       	ldi	r22, 0xFF	; 255
    a03c:	30 df       	rcall	.-416    	; 0x9e9e <nwkRouteDiscoverySendRequest>
    a03e:	88 23       	and	r24, r24
    a040:	19 f0       	breq	.+6      	; 0xa048 <nwkRouteDiscoveryRequest+0x62>
    {
      frame->state = NWK_RD_STATE_WAIT_FOR_ROUTE;
    a042:	80 e4       	ldi	r24, 0x40	; 64
    a044:	88 83       	st	Y, r24
      return;
    a046:	03 c0       	rjmp	.+6      	; 0xa04e <nwkRouteDiscoveryRequest+0x68>
    }
  }

  nwkTxConfirm(frame, NWK_NO_ROUTE_STATUS);
    a048:	61 e1       	ldi	r22, 0x11	; 17
    a04a:	ce 01       	movw	r24, r28
    a04c:	d0 d6       	rcall	.+3488   	; 0xadee <nwkTxConfirm>
}
    a04e:	df 91       	pop	r29
    a050:	cf 91       	pop	r28
    a052:	08 95       	ret

0000a054 <nwkRouteDiscoveryRequestReceived>:
}

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteDiscoveryRequestReceived(NWK_DataInd_t *ind)
{
    a054:	af 92       	push	r10
    a056:	bf 92       	push	r11
    a058:	cf 92       	push	r12
    a05a:	df 92       	push	r13
    a05c:	ef 92       	push	r14
    a05e:	ff 92       	push	r15
    a060:	0f 93       	push	r16
    a062:	1f 93       	push	r17
    a064:	cf 93       	push	r28
    a066:	df 93       	push	r29
    a068:	ec 01       	movw	r28, r24
  NwkCommandRouteRequest_t *command = (NwkCommandRouteRequest_t *)ind->data;
    a06a:	0f 81       	ldd	r16, Y+7	; 0x07
    a06c:	18 85       	ldd	r17, Y+8	; 0x08
  NwkRouteDiscoveryTableEntry_t *entry;
  uint8_t linkQuality;
  bool reply = false;

  if (sizeof(NwkCommandRouteRequest_t) != ind->size)
    a06e:	89 85       	ldd	r24, Y+9	; 0x09
    a070:	87 30       	cpi	r24, 0x07	; 7
    a072:	09 f0       	breq	.+2      	; 0xa076 <nwkRouteDiscoveryRequestReceived+0x22>
    a074:	67 c0       	rjmp	.+206    	; 0xa144 <nwkRouteDiscoveryRequestReceived+0xf0>
    return false;

#ifdef NWK_ENABLE_MULTICAST
  if (1 == command->multicast && NWK_GroupIsMember(command->dstAddr))
    a076:	f8 01       	movw	r30, r16
    a078:	85 81       	ldd	r24, Z+5	; 0x05
    a07a:	81 30       	cpi	r24, 0x01	; 1
    a07c:	29 f4       	brne	.+10     	; 0xa088 <nwkRouteDiscoveryRequestReceived+0x34>
    a07e:	83 81       	ldd	r24, Z+3	; 0x03
    a080:	94 81       	ldd	r25, Z+4	; 0x04
    a082:	5d dc       	rcall	.-1862   	; 0x993e <NWK_GroupIsMember>
    a084:	b8 2e       	mov	r11, r24
    a086:	01 c0       	rjmp	.+2      	; 0xa08a <nwkRouteDiscoveryRequestReceived+0x36>
bool nwkRouteDiscoveryRequestReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteRequest_t *command = (NwkCommandRouteRequest_t *)ind->data;
  NwkRouteDiscoveryTableEntry_t *entry;
  uint8_t linkQuality;
  bool reply = false;
    a088:	b1 2c       	mov	r11, r1
#ifdef NWK_ENABLE_MULTICAST
  if (1 == command->multicast && NWK_GroupIsMember(command->dstAddr))
    reply = true;
#endif

  if (0 == command->multicast && command->dstAddr == nwkIb.addr)
    a08a:	f8 01       	movw	r30, r16
    a08c:	45 81       	ldd	r20, Z+5	; 0x05
    a08e:	41 11       	cpse	r20, r1
    a090:	0a c0       	rjmp	.+20     	; 0xa0a6 <nwkRouteDiscoveryRequestReceived+0x52>
    a092:	23 81       	ldd	r18, Z+3	; 0x03
    a094:	34 81       	ldd	r19, Z+4	; 0x04
    a096:	80 91 03 3a 	lds	r24, 0x3A03
    a09a:	90 91 04 3a 	lds	r25, 0x3A04
    a09e:	28 17       	cp	r18, r24
    a0a0:	39 07       	cpc	r19, r25
    a0a2:	09 f4       	brne	.+2      	; 0xa0a6 <nwkRouteDiscoveryRequestReceived+0x52>
    a0a4:	5b c0       	rjmp	.+182    	; 0xa15c <nwkRouteDiscoveryRequestReceived+0x108>
    reply = true;

  if (command->srcAddr == nwkIb.addr)
    a0a6:	f8 01       	movw	r30, r16
    a0a8:	81 81       	ldd	r24, Z+1	; 0x01
    a0aa:	92 81       	ldd	r25, Z+2	; 0x02
    a0ac:	20 91 03 3a 	lds	r18, 0x3A03
    a0b0:	30 91 04 3a 	lds	r19, 0x3A04
    a0b4:	82 17       	cp	r24, r18
    a0b6:	93 07       	cpc	r25, r19
    a0b8:	09 f4       	brne	.+2      	; 0xa0bc <nwkRouteDiscoveryRequestReceived+0x68>
    a0ba:	46 c0       	rjmp	.+140    	; 0xa148 <nwkRouteDiscoveryRequestReceived+0xf4>
    return true;

  if (false == reply && nwkIb.addr & NWK_ROUTE_NON_ROUTING)
    a0bc:	b1 10       	cpse	r11, r1
    a0be:	03 c0       	rjmp	.+6      	; 0xa0c6 <nwkRouteDiscoveryRequestReceived+0x72>
    a0c0:	33 23       	and	r19, r19
    a0c2:	0c f4       	brge	.+2      	; 0xa0c6 <nwkRouteDiscoveryRequestReceived+0x72>
    a0c4:	43 c0       	rjmp	.+134    	; 0xa14c <nwkRouteDiscoveryRequestReceived+0xf8>

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkRouteDiscoveryUpdateLq(uint8_t lqa, uint8_t lqb)
{
  return ((uint16_t)lqa * lqb) >> 8;
    a0c6:	ca 84       	ldd	r12, Y+10	; 0x0a
    a0c8:	f8 01       	movw	r30, r16
    a0ca:	26 81       	ldd	r18, Z+6	; 0x06
    a0cc:	c2 9e       	mul	r12, r18
    a0ce:	60 01       	movw	r12, r0
    a0d0:	11 24       	eor	r1, r1
  if (false == reply && nwkIb.addr & NWK_ROUTE_NON_ROUTING)
    return true;

  linkQuality = nwkRouteDiscoveryUpdateLq(command->linkQuality, ind->lqi);

  entry = nwkRouteDiscoveryFindEntry(command->srcAddr, command->dstAddr, command->multicast);
    a0d2:	63 81       	ldd	r22, Z+3	; 0x03
    a0d4:	74 81       	ldd	r23, Z+4	; 0x04
    a0d6:	e0 dd       	rcall	.-1088   	; 0x9c98 <nwkRouteDiscoveryFindEntry>
    a0d8:	7c 01       	movw	r14, r24

  if (entry)
    a0da:	00 97       	sbiw	r24, 0x00	; 0
    a0dc:	29 f0       	breq	.+10     	; 0xa0e8 <nwkRouteDiscoveryRequestReceived+0x94>
  {
    if (linkQuality <= entry->forwardLinkQuality)
    a0de:	fc 01       	movw	r30, r24
    a0e0:	87 81       	ldd	r24, Z+7	; 0x07
    a0e2:	8d 15       	cp	r24, r13
    a0e4:	28 f0       	brcs	.+10     	; 0xa0f0 <nwkRouteDiscoveryRequestReceived+0x9c>
    a0e6:	34 c0       	rjmp	.+104    	; 0xa150 <nwkRouteDiscoveryRequestReceived+0xfc>
      return true;
  }
  else
  {
    if (NULL == (entry = nwkRouteDiscoveryNewEntry()))
    a0e8:	0e de       	rcall	.-996    	; 0x9d06 <nwkRouteDiscoveryNewEntry>
    a0ea:	7c 01       	movw	r14, r24
    a0ec:	00 97       	sbiw	r24, 0x00	; 0
    a0ee:	91 f1       	breq	.+100    	; 0xa154 <nwkRouteDiscoveryRequestReceived+0x100>
      return true;
  }

  entry->srcAddr = command->srcAddr;
    a0f0:	f8 01       	movw	r30, r16
    a0f2:	81 81       	ldd	r24, Z+1	; 0x01
    a0f4:	92 81       	ldd	r25, Z+2	; 0x02
    a0f6:	f7 01       	movw	r30, r14
    a0f8:	91 83       	std	Z+1, r25	; 0x01
    a0fa:	80 83       	st	Z, r24
  entry->dstAddr = command->dstAddr;
    a0fc:	f8 01       	movw	r30, r16
    a0fe:	83 81       	ldd	r24, Z+3	; 0x03
    a100:	94 81       	ldd	r25, Z+4	; 0x04
    a102:	f7 01       	movw	r30, r14
    a104:	93 83       	std	Z+3, r25	; 0x03
    a106:	82 83       	std	Z+2, r24	; 0x02
  entry->multicast = command->multicast;
    a108:	f8 01       	movw	r30, r16
    a10a:	85 81       	ldd	r24, Z+5	; 0x05
    a10c:	f7 01       	movw	r30, r14
    a10e:	84 83       	std	Z+4, r24	; 0x04
  entry->senderAddr = ind->srcAddr;
    a110:	88 81       	ld	r24, Y
    a112:	99 81       	ldd	r25, Y+1	; 0x01
    a114:	96 83       	std	Z+6, r25	; 0x06
    a116:	85 83       	std	Z+5, r24	; 0x05
  entry->forwardLinkQuality = linkQuality;
    a118:	d7 82       	std	Z+7, r13	; 0x07

  if (reply)
    a11a:	bb 20       	and	r11, r11
    a11c:	71 f0       	breq	.+28     	; 0xa13a <nwkRouteDiscoveryRequestReceived+0xe6>
  {
    nwkRouteUpdateEntry(command->srcAddr, 0, ind->srcAddr, linkQuality);
    a11e:	48 81       	ld	r20, Y
    a120:	59 81       	ldd	r21, Y+1	; 0x01
    a122:	2d 2d       	mov	r18, r13
    a124:	60 e0       	ldi	r22, 0x00	; 0
    a126:	f8 01       	movw	r30, r16
    a128:	81 81       	ldd	r24, Z+1	; 0x01
    a12a:	92 81       	ldd	r25, Z+2	; 0x02
    a12c:	b6 dc       	rcall	.-1684   	; 0x9a9a <nwkRouteUpdateEntry>
    nwkRouteDiscoverySendReply(entry, linkQuality, NWK_ROUTE_DISCOVERY_BEST_LINK_QUALITY);
    a12e:	4f ef       	ldi	r20, 0xFF	; 255
    a130:	6d 2d       	mov	r22, r13
    a132:	c7 01       	movw	r24, r14
    a134:	f0 de       	rcall	.-544    	; 0x9f16 <nwkRouteDiscoverySendReply>
  else
  {
    nwkRouteDiscoverySendRequest(entry, linkQuality);
  }

  return true;
    a136:	81 e0       	ldi	r24, 0x01	; 1
    a138:	1a c0       	rjmp	.+52     	; 0xa16e <nwkRouteDiscoveryRequestReceived+0x11a>
    nwkRouteUpdateEntry(command->srcAddr, 0, ind->srcAddr, linkQuality);
    nwkRouteDiscoverySendReply(entry, linkQuality, NWK_ROUTE_DISCOVERY_BEST_LINK_QUALITY);
  }
  else
  {
    nwkRouteDiscoverySendRequest(entry, linkQuality);
    a13a:	6d 2d       	mov	r22, r13
    a13c:	c7 01       	movw	r24, r14
    a13e:	af de       	rcall	.-674    	; 0x9e9e <nwkRouteDiscoverySendRequest>
  }

  return true;
    a140:	81 e0       	ldi	r24, 0x01	; 1
    a142:	15 c0       	rjmp	.+42     	; 0xa16e <nwkRouteDiscoveryRequestReceived+0x11a>
  NwkRouteDiscoveryTableEntry_t *entry;
  uint8_t linkQuality;
  bool reply = false;

  if (sizeof(NwkCommandRouteRequest_t) != ind->size)
    return false;
    a144:	80 e0       	ldi	r24, 0x00	; 0
    a146:	13 c0       	rjmp	.+38     	; 0xa16e <nwkRouteDiscoveryRequestReceived+0x11a>

  if (0 == command->multicast && command->dstAddr == nwkIb.addr)
    reply = true;

  if (command->srcAddr == nwkIb.addr)
    return true;
    a148:	81 e0       	ldi	r24, 0x01	; 1
    a14a:	11 c0       	rjmp	.+34     	; 0xa16e <nwkRouteDiscoveryRequestReceived+0x11a>

  if (false == reply && nwkIb.addr & NWK_ROUTE_NON_ROUTING)
    return true;
    a14c:	81 e0       	ldi	r24, 0x01	; 1
    a14e:	0f c0       	rjmp	.+30     	; 0xa16e <nwkRouteDiscoveryRequestReceived+0x11a>
  entry = nwkRouteDiscoveryFindEntry(command->srcAddr, command->dstAddr, command->multicast);

  if (entry)
  {
    if (linkQuality <= entry->forwardLinkQuality)
      return true;
    a150:	81 e0       	ldi	r24, 0x01	; 1
    a152:	0d c0       	rjmp	.+26     	; 0xa16e <nwkRouteDiscoveryRequestReceived+0x11a>
  }
  else
  {
    if (NULL == (entry = nwkRouteDiscoveryNewEntry()))
      return true;
    a154:	81 e0       	ldi	r24, 0x01	; 1
    a156:	0b c0       	rjmp	.+22     	; 0xa16e <nwkRouteDiscoveryRequestReceived+0x11a>

  if (0 == command->multicast && command->dstAddr == nwkIb.addr)
    reply = true;

  if (command->srcAddr == nwkIb.addr)
    return true;
    a158:	81 e0       	ldi	r24, 0x01	; 1
    a15a:	09 c0       	rjmp	.+18     	; 0xa16e <nwkRouteDiscoveryRequestReceived+0x11a>
#endif

  if (0 == command->multicast && command->dstAddr == nwkIb.addr)
    reply = true;

  if (command->srcAddr == nwkIb.addr)
    a15c:	f8 01       	movw	r30, r16
    a15e:	81 81       	ldd	r24, Z+1	; 0x01
    a160:	92 81       	ldd	r25, Z+2	; 0x02
    a162:	28 17       	cp	r18, r24
    a164:	39 07       	cpc	r19, r25
    a166:	c1 f3       	breq	.-16     	; 0xa158 <nwkRouteDiscoveryRequestReceived+0x104>
  if (1 == command->multicast && NWK_GroupIsMember(command->dstAddr))
    reply = true;
#endif

  if (0 == command->multicast && command->dstAddr == nwkIb.addr)
    reply = true;
    a168:	bb 24       	eor	r11, r11
    a16a:	b3 94       	inc	r11
    a16c:	ac cf       	rjmp	.-168    	; 0xa0c6 <nwkRouteDiscoveryRequestReceived+0x72>
  {
    nwkRouteDiscoverySendRequest(entry, linkQuality);
  }

  return true;
}
    a16e:	df 91       	pop	r29
    a170:	cf 91       	pop	r28
    a172:	1f 91       	pop	r17
    a174:	0f 91       	pop	r16
    a176:	ff 90       	pop	r15
    a178:	ef 90       	pop	r14
    a17a:	df 90       	pop	r13
    a17c:	cf 90       	pop	r12
    a17e:	bf 90       	pop	r11
    a180:	af 90       	pop	r10
    a182:	08 95       	ret

0000a184 <nwkRouteDiscoveryReplyReceived>:
}

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteDiscoveryReplyReceived(NWK_DataInd_t *ind)
{
    a184:	cf 92       	push	r12
    a186:	df 92       	push	r13
    a188:	ef 92       	push	r14
    a18a:	ff 92       	push	r15
    a18c:	0f 93       	push	r16
    a18e:	1f 93       	push	r17
    a190:	cf 93       	push	r28
    a192:	df 93       	push	r29
    a194:	8c 01       	movw	r16, r24
  NwkCommandRouteReply_t *command = (NwkCommandRouteReply_t *)ind->data;
    a196:	fc 01       	movw	r30, r24
    a198:	c7 81       	ldd	r28, Z+7	; 0x07
    a19a:	d0 85       	ldd	r29, Z+8	; 0x08
  NwkRouteDiscoveryTableEntry_t *entry;
  uint8_t linkQuality;

  if (sizeof(NwkCommandRouteReply_t) != ind->size)
    a19c:	81 85       	ldd	r24, Z+9	; 0x09
    a19e:	88 30       	cpi	r24, 0x08	; 8
    a1a0:	09 f0       	breq	.+2      	; 0xa1a4 <nwkRouteDiscoveryReplyReceived+0x20>
    a1a2:	3e c0       	rjmp	.+124    	; 0xa220 <nwkRouteDiscoveryReplyReceived+0x9c>
    return false;

  entry = nwkRouteDiscoveryFindEntry(command->srcAddr, command->dstAddr, command->multicast);
    a1a4:	6b 81       	ldd	r22, Y+3	; 0x03
    a1a6:	7c 81       	ldd	r23, Y+4	; 0x04
    a1a8:	4d 81       	ldd	r20, Y+5	; 0x05
    a1aa:	89 81       	ldd	r24, Y+1	; 0x01
    a1ac:	9a 81       	ldd	r25, Y+2	; 0x02
    a1ae:	74 dd       	rcall	.-1304   	; 0x9c98 <nwkRouteDiscoveryFindEntry>
    a1b0:	7c 01       	movw	r14, r24

  linkQuality = nwkRouteDiscoveryUpdateLq(command->reverseLinkQuality, ind->lqi);
    a1b2:	f8 01       	movw	r30, r16
    a1b4:	c2 84       	ldd	r12, Z+10	; 0x0a
    a1b6:	4f 81       	ldd	r20, Y+7	; 0x07

  if (entry && command->forwardLinkQuality > entry->reverseLinkQuality)
    a1b8:	00 97       	sbiw	r24, 0x00	; 0
    a1ba:	a1 f1       	breq	.+104    	; 0xa224 <nwkRouteDiscoveryReplyReceived+0xa0>
    a1bc:	8e 81       	ldd	r24, Y+6	; 0x06
    a1be:	f7 01       	movw	r30, r14
    a1c0:	90 85       	ldd	r25, Z+8	; 0x08
    a1c2:	98 17       	cp	r25, r24
    a1c4:	88 f5       	brcc	.+98     	; 0xa228 <nwkRouteDiscoveryReplyReceived+0xa4>
  {
    entry->reverseLinkQuality = command->forwardLinkQuality;
    a1c6:	80 87       	std	Z+8, r24	; 0x08

    if (command->srcAddr == nwkIb.addr)
    a1c8:	29 81       	ldd	r18, Y+1	; 0x01
    a1ca:	3a 81       	ldd	r19, Y+2	; 0x02
    a1cc:	80 91 03 3a 	lds	r24, 0x3A03
    a1d0:	90 91 04 3a 	lds	r25, 0x3A04
    a1d4:	28 17       	cp	r18, r24
    a1d6:	39 07       	cpc	r19, r25
    a1d8:	51 f4       	brne	.+20     	; 0xa1ee <nwkRouteDiscoveryReplyReceived+0x6a>
    {
      nwkRouteUpdateEntry(command->dstAddr, command->multicast, ind->srcAddr, command->forwardLinkQuality);
    a1da:	f8 01       	movw	r30, r16
    a1dc:	40 81       	ld	r20, Z
    a1de:	51 81       	ldd	r21, Z+1	; 0x01
    a1e0:	2e 81       	ldd	r18, Y+6	; 0x06
    a1e2:	6d 81       	ldd	r22, Y+5	; 0x05
    a1e4:	8b 81       	ldd	r24, Y+3	; 0x03
    a1e6:	9c 81       	ldd	r25, Y+4	; 0x04
    a1e8:	58 dc       	rcall	.-1872   	; 0x9a9a <nwkRouteUpdateEntry>
      nwkRouteUpdateEntry(command->srcAddr, 0, entry->senderAddr, entry->forwardLinkQuality);
      nwkRouteDiscoverySendReply(entry, command->forwardLinkQuality, linkQuality);
    }
  }

  return true;
    a1ea:	81 e0       	ldi	r24, 0x01	; 1
    a1ec:	1e c0       	rjmp	.+60     	; 0xa22a <nwkRouteDiscoveryReplyReceived+0xa6>

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkRouteDiscoveryUpdateLq(uint8_t lqa, uint8_t lqb)
{
  return ((uint16_t)lqa * lqb) >> 8;
    a1ee:	c4 9e       	mul	r12, r20
    a1f0:	60 01       	movw	r12, r0
    a1f2:	11 24       	eor	r1, r1
      nwkRouteUpdateEntry(command->dstAddr, command->multicast, ind->srcAddr, command->forwardLinkQuality);
      //nwkRouteDiscoveryDone(entry, true);
    }
    else
    {
      nwkRouteUpdateEntry(command->dstAddr, command->multicast,  ind->srcAddr, linkQuality);
    a1f4:	f8 01       	movw	r30, r16
    a1f6:	40 81       	ld	r20, Z
    a1f8:	51 81       	ldd	r21, Z+1	; 0x01
    a1fa:	2d 2d       	mov	r18, r13
    a1fc:	6d 81       	ldd	r22, Y+5	; 0x05
    a1fe:	8b 81       	ldd	r24, Y+3	; 0x03
    a200:	9c 81       	ldd	r25, Y+4	; 0x04
    a202:	4b dc       	rcall	.-1898   	; 0x9a9a <nwkRouteUpdateEntry>
      nwkRouteUpdateEntry(command->srcAddr, 0, entry->senderAddr, entry->forwardLinkQuality);
    a204:	f7 01       	movw	r30, r14
    a206:	45 81       	ldd	r20, Z+5	; 0x05
    a208:	56 81       	ldd	r21, Z+6	; 0x06
    a20a:	27 81       	ldd	r18, Z+7	; 0x07
    a20c:	60 e0       	ldi	r22, 0x00	; 0
    a20e:	89 81       	ldd	r24, Y+1	; 0x01
    a210:	9a 81       	ldd	r25, Y+2	; 0x02
    a212:	43 dc       	rcall	.-1914   	; 0x9a9a <nwkRouteUpdateEntry>
      nwkRouteDiscoverySendReply(entry, command->forwardLinkQuality, linkQuality);
    a214:	4d 2d       	mov	r20, r13
    a216:	6e 81       	ldd	r22, Y+6	; 0x06
    a218:	c7 01       	movw	r24, r14
    a21a:	7d de       	rcall	.-774    	; 0x9f16 <nwkRouteDiscoverySendReply>
    }
  }

  return true;
    a21c:	81 e0       	ldi	r24, 0x01	; 1
    a21e:	05 c0       	rjmp	.+10     	; 0xa22a <nwkRouteDiscoveryReplyReceived+0xa6>
  NwkCommandRouteReply_t *command = (NwkCommandRouteReply_t *)ind->data;
  NwkRouteDiscoveryTableEntry_t *entry;
  uint8_t linkQuality;

  if (sizeof(NwkCommandRouteReply_t) != ind->size)
    return false;
    a220:	80 e0       	ldi	r24, 0x00	; 0
    a222:	03 c0       	rjmp	.+6      	; 0xa22a <nwkRouteDiscoveryReplyReceived+0xa6>
      nwkRouteUpdateEntry(command->srcAddr, 0, entry->senderAddr, entry->forwardLinkQuality);
      nwkRouteDiscoverySendReply(entry, command->forwardLinkQuality, linkQuality);
    }
  }

  return true;
    a224:	81 e0       	ldi	r24, 0x01	; 1
    a226:	01 c0       	rjmp	.+2      	; 0xa22a <nwkRouteDiscoveryReplyReceived+0xa6>
    a228:	81 e0       	ldi	r24, 0x01	; 1
}
    a22a:	df 91       	pop	r29
    a22c:	cf 91       	pop	r28
    a22e:	1f 91       	pop	r17
    a230:	0f 91       	pop	r16
    a232:	ff 90       	pop	r15
    a234:	ef 90       	pop	r14
    a236:	df 90       	pop	r13
    a238:	cf 90       	pop	r12
    a23a:	08 95       	ret

0000a23c <nwkRxSeriveDataInd>:
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxSeriveDataInd(NWK_DataInd_t *ind)
{
#ifdef NWK_ENABLE_SECURE_COMMANDS
  if (0 == (ind->options & NWK_IND_OPT_SECURED))
    a23c:	dc 01       	movw	r26, r24
    a23e:	16 96       	adiw	r26, 0x06	; 6
    a240:	2c 91       	ld	r18, X
    a242:	16 97       	sbiw	r26, 0x06	; 6
    a244:	21 ff       	sbrs	r18, 1
    a246:	1a c0       	rjmp	.+52     	; 0xa27c <nwkRxSeriveDataInd+0x40>
    return false;
#endif

  if (ind->size < 1)
    a248:	19 96       	adiw	r26, 0x09	; 9
    a24a:	2c 91       	ld	r18, X
    a24c:	19 97       	sbiw	r26, 0x09	; 9
    a24e:	22 23       	and	r18, r18
    a250:	b9 f0       	breq	.+46     	; 0xa280 <nwkRxSeriveDataInd+0x44>
    return false;

  switch (ind->data[0])
    a252:	17 96       	adiw	r26, 0x07	; 7
    a254:	ed 91       	ld	r30, X+
    a256:	fc 91       	ld	r31, X
    a258:	18 97       	sbiw	r26, 0x08	; 8
    a25a:	20 81       	ld	r18, Z
    a25c:	21 30       	cpi	r18, 0x01	; 1
    a25e:	41 f0       	breq	.+16     	; 0xa270 <nwkRxSeriveDataInd+0x34>
    a260:	28 f0       	brcs	.+10     	; 0xa26c <nwkRxSeriveDataInd+0x30>
    a262:	22 30       	cpi	r18, 0x02	; 2
    a264:	39 f0       	breq	.+14     	; 0xa274 <nwkRxSeriveDataInd+0x38>
    a266:	23 30       	cpi	r18, 0x03	; 3
    a268:	39 f0       	breq	.+14     	; 0xa278 <nwkRxSeriveDataInd+0x3c>
    a26a:	0c c0       	rjmp	.+24     	; 0xa284 <nwkRxSeriveDataInd+0x48>
  {
    case NWK_COMMAND_ACK:
      return nwkTxAckReceived(ind);
    a26c:	9b c5       	rjmp	.+2870   	; 0xada4 <nwkTxAckReceived>
    a26e:	08 95       	ret

#ifdef NWK_ENABLE_ROUTING
    case NWK_COMMAND_ROUTE_ERROR:
      return nwkRouteErrorReceived(ind);
    a270:	02 cd       	rjmp	.-1532   	; 0x9c76 <nwkRouteErrorReceived>
    a272:	08 95       	ret
#endif

#ifdef NWK_ENABLE_ROUTE_DISCOVERY
    case NWK_COMMAND_ROUTE_REQUEST:
      return nwkRouteDiscoveryRequestReceived(ind);
    a274:	ef ce       	rjmp	.-546    	; 0xa054 <nwkRouteDiscoveryRequestReceived>
    a276:	08 95       	ret

    case NWK_COMMAND_ROUTE_REPLY:
      return nwkRouteDiscoveryReplyReceived(ind);
    a278:	85 cf       	rjmp	.-246    	; 0xa184 <nwkRouteDiscoveryReplyReceived>
    a27a:	08 95       	ret
*****************************************************************************/
static bool nwkRxSeriveDataInd(NWK_DataInd_t *ind)
{
#ifdef NWK_ENABLE_SECURE_COMMANDS
  if (0 == (ind->options & NWK_IND_OPT_SECURED))
    return false;
    a27c:	80 e0       	ldi	r24, 0x00	; 0
    a27e:	08 95       	ret
#endif

  if (ind->size < 1)
    return false;
    a280:	80 e0       	ldi	r24, 0x00	; 0
    a282:	08 95       	ret
    case NWK_COMMAND_ROUTE_REPLY:
      return nwkRouteDiscoveryReplyReceived(ind);
#endif

    default:
      return false;
    a284:	80 e0       	ldi	r24, 0x00	; 0
  }
}
    a286:	08 95       	ret

0000a288 <nwkRxDuplicateRejectionTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
    a288:	e7 ea       	ldi	r30, 0xA7	; 167
    a28a:	f3 e3       	ldi	r31, 0x33	; 51
    a28c:	21 ea       	ldi	r18, 0xA1	; 161
    a28e:	34 e3       	ldi	r19, 0x34	; 52
  bool restart = false;
    a290:	50 e0       	ldi	r21, 0x00	; 0
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    if (nwkRxDuplicateRejectionTable[i].ttl)
    {
      nwkRxDuplicateRejectionTable[i].ttl--;
      restart = true;
    a292:	61 e0       	ldi	r22, 0x01	; 1
{
  bool restart = false;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    if (nwkRxDuplicateRejectionTable[i].ttl)
    a294:	40 81       	ld	r20, Z
    a296:	44 23       	and	r20, r20
    a298:	19 f0       	breq	.+6      	; 0xa2a0 <nwkRxDuplicateRejectionTimerHandler+0x18>
    {
      nwkRxDuplicateRejectionTable[i].ttl--;
    a29a:	41 50       	subi	r20, 0x01	; 1
    a29c:	40 83       	st	Z, r20
      restart = true;
    a29e:	56 2f       	mov	r21, r22
    a2a0:	35 96       	adiw	r30, 0x05	; 5
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
  bool restart = false;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    a2a2:	e2 17       	cp	r30, r18
    a2a4:	f3 07       	cpc	r31, r19
    a2a6:	b1 f7       	brne	.-20     	; 0xa294 <nwkRxDuplicateRejectionTimerHandler+0xc>
      nwkRxDuplicateRejectionTable[i].ttl--;
      restart = true;
    }
  }

  if (restart)
    a2a8:	51 11       	cpse	r21, r1
    SYS_TimerStart(timer);
    a2aa:	0c 94 2f 5a 	jmp	0xb45e	; 0xb45e <SYS_TimerStart>
    a2ae:	08 95       	ret

0000a2b0 <nwkRxInit>:

/*************************************************************************//**
  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
    a2b0:	e7 ea       	ldi	r30, 0xA7	; 167
    a2b2:	f3 e3       	ldi	r31, 0x33	; 51
    a2b4:	81 ea       	ldi	r24, 0xA1	; 161
    a2b6:	94 e3       	ldi	r25, 0x34	; 52
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    nwkRxDuplicateRejectionTable[i].ttl = 0;
    a2b8:	10 82       	st	Z, r1
    a2ba:	35 96       	adiw	r30, 0x05	; 5
/*************************************************************************//**
  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    a2bc:	e8 17       	cp	r30, r24
    a2be:	f9 07       	cpc	r31, r25
    a2c0:	d9 f7       	brne	.-10     	; 0xa2b8 <nwkRxInit+0x8>
    nwkRxDuplicateRejectionTable[i].ttl = 0;

  nwkRxDuplicateRejectionTimer.interval = NWK_RX_DUPLICATE_REJECTION_TIMER_INTERVAL;
    a2c2:	84 e6       	ldi	r24, 0x64	; 100
    a2c4:	90 e0       	ldi	r25, 0x00	; 0
    a2c6:	a0 e0       	ldi	r26, 0x00	; 0
    a2c8:	b0 e0       	ldi	r27, 0x00	; 0
    a2ca:	80 93 9b 33 	sts	0x339B, r24
    a2ce:	90 93 9c 33 	sts	0x339C, r25
    a2d2:	a0 93 9d 33 	sts	0x339D, r26
    a2d6:	b0 93 9e 33 	sts	0x339E, r27
  nwkRxDuplicateRejectionTimer.mode = SYS_TIMER_INTERVAL_MODE;
    a2da:	10 92 9f 33 	sts	0x339F, r1
  nwkRxDuplicateRejectionTimer.handler = nwkRxDuplicateRejectionTimerHandler;
    a2de:	84 e4       	ldi	r24, 0x44	; 68
    a2e0:	91 e5       	ldi	r25, 0x51	; 81
    a2e2:	90 93 a1 33 	sts	0x33A1, r25
    a2e6:	80 93 a0 33 	sts	0x33A0, r24

  NWK_OpenEndpoint(NWK_SERVICE_ENDPOINT_ID, nwkRxSeriveDataInd);
    a2ea:	6e e1       	ldi	r22, 0x1E	; 30
    a2ec:	71 e5       	ldi	r23, 0x51	; 81
    a2ee:	80 e0       	ldi	r24, 0x00	; 0
    a2f0:	26 c9       	rjmp	.-3508   	; 0x953e <NWK_OpenEndpoint>
    a2f2:	08 95       	ret

0000a2f4 <PHY_DataInd>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataInd(PHY_DataInd_t *ind)
{
    a2f4:	cf 93       	push	r28
    a2f6:	df 93       	push	r29
    a2f8:	ec 01       	movw	r28, r24
  NwkFrame_t *frame;

  if (0x88 != ind->data[1] || (0x61 != ind->data[0] && 0x41 != ind->data[0]) ||
    a2fa:	e8 81       	ld	r30, Y
    a2fc:	f9 81       	ldd	r31, Y+1	; 0x01
    a2fe:	81 81       	ldd	r24, Z+1	; 0x01
    a300:	88 38       	cpi	r24, 0x88	; 136
    a302:	e9 f4       	brne	.+58     	; 0xa33e <PHY_DataInd+0x4a>
    a304:	80 81       	ld	r24, Z
    a306:	8f 7d       	andi	r24, 0xDF	; 223
    a308:	81 34       	cpi	r24, 0x41	; 65
    a30a:	c9 f4       	brne	.+50     	; 0xa33e <PHY_DataInd+0x4a>
    a30c:	8a 81       	ldd	r24, Y+2	; 0x02
    a30e:	80 31       	cpi	r24, 0x10	; 16
    a310:	b0 f0       	brcs	.+44     	; 0xa33e <PHY_DataInd+0x4a>
      ind->size < sizeof(NwkFrameHeader_t))
    return;

  if (NULL == (frame = nwkFrameAlloc()))
    a312:	44 da       	rcall	.-2936   	; 0x979c <nwkFrameAlloc>
    a314:	00 97       	sbiw	r24, 0x00	; 0
    a316:	99 f0       	breq	.+38     	; 0xa33e <PHY_DataInd+0x4a>
    return;

  frame->state = NWK_RX_STATE_RECEIVED;
    a318:	20 e2       	ldi	r18, 0x20	; 32
    a31a:	fc 01       	movw	r30, r24
    a31c:	20 83       	st	Z, r18
  frame->size = ind->size;
    a31e:	2a 81       	ldd	r18, Y+2	; 0x02
    a320:	21 83       	std	Z+1, r18	; 0x01
  frame->rx.lqi = ind->lqi;
    a322:	2b 81       	ldd	r18, Y+3	; 0x03
    a324:	ed 57       	subi	r30, 0x7D	; 125
    a326:	ff 4f       	sbci	r31, 0xFF	; 255
    a328:	20 83       	st	Z, r18
  frame->rx.rssi = ind->rssi;
    a32a:	2c 81       	ldd	r18, Y+4	; 0x04
    a32c:	31 96       	adiw	r30, 0x01	; 1
    a32e:	20 83       	st	Z, r18
  memcpy(frame->data, ind->data, ind->size);
    a330:	4a 81       	ldd	r20, Y+2	; 0x02
    a332:	50 e0       	ldi	r21, 0x00	; 0
    a334:	68 81       	ld	r22, Y
    a336:	79 81       	ldd	r23, Y+1	; 0x01
    a338:	02 96       	adiw	r24, 0x02	; 2
    a33a:	0e 94 42 b5 	call	0x16a84	; 0x16a84 <memcpy>
}
    a33e:	df 91       	pop	r29
    a340:	cf 91       	pop	r28
    a342:	08 95       	ret

0000a344 <NWK_SetAckControl>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetAckControl(uint8_t control)
{
  nwkRxAckControl = control;
    a344:	80 93 a2 33 	sts	0x33A2, r24
    a348:	08 95       	ret

0000a34a <nwkRxDecryptConf>:
#ifdef NWK_ENABLE_SECURITY
/*************************************************************************//**
*****************************************************************************/
void nwkRxDecryptConf(NwkFrame_t *frame, bool status)
{
  if (status)
    a34a:	66 23       	and	r22, r22
    a34c:	21 f0       	breq	.+8      	; 0xa356 <nwkRxDecryptConf+0xc>
    frame->state = NWK_RX_STATE_INDICATE;
    a34e:	22 e2       	ldi	r18, 0x22	; 34
    a350:	fc 01       	movw	r30, r24
    a352:	20 83       	st	Z, r18
    a354:	08 95       	ret
  else
    frame->state = NWK_RX_STATE_FINISH;
    a356:	24 e2       	ldi	r18, 0x24	; 36
    a358:	fc 01       	movw	r30, r24
    a35a:	20 83       	st	Z, r18
    a35c:	08 95       	ret

0000a35e <nwkRxTaskHandler>:

/*************************************************************************//**
  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
    a35e:	2f 92       	push	r2
    a360:	3f 92       	push	r3
    a362:	4f 92       	push	r4
    a364:	5f 92       	push	r5
    a366:	6f 92       	push	r6
    a368:	7f 92       	push	r7
    a36a:	8f 92       	push	r8
    a36c:	9f 92       	push	r9
    a36e:	af 92       	push	r10
    a370:	bf 92       	push	r11
    a372:	cf 92       	push	r12
    a374:	df 92       	push	r13
    a376:	ef 92       	push	r14
    a378:	ff 92       	push	r15
    a37a:	0f 93       	push	r16
    a37c:	1f 93       	push	r17
    a37e:	cf 93       	push	r28
    a380:	df 93       	push	r29
    a382:	cd b7       	in	r28, 0x3d	; 61
    a384:	de b7       	in	r29, 0x3e	; 62
    a386:	2d 97       	sbiw	r28, 0x0d	; 13
    a388:	0f b6       	in	r0, 0x3f	; 63
    a38a:	f8 94       	cli
    a38c:	de bf       	out	0x3e, r29	; 62
    a38e:	0f be       	out	0x3f, r0	; 63
    a390:	cd bf       	out	0x3d, r28	; 61
  NwkFrame_t *frame = NULL;
    a392:	00 e0       	ldi	r16, 0x00	; 0
    a394:	10 e0       	ldi	r17, 0x00	; 0
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
    a396:	0f 2e       	mov	r0, r31
    a398:	f4 e2       	ldi	r31, 0x24	; 36
    a39a:	9f 2e       	mov	r9, r31
    a39c:	f0 2d       	mov	r31, r0
    ack = true;

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
    a39e:	0f 2e       	mov	r0, r31
    a3a0:	f3 e0       	ldi	r31, 0x03	; 3
    a3a2:	cf 2e       	mov	r12, r31
    a3a4:	fa e3       	ldi	r31, 0x3A	; 58
    a3a6:	df 2e       	mov	r13, r31
    a3a8:	f0 2d       	mov	r31, r0
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
    a3aa:	68 94       	set
    a3ac:	22 24       	eor	r2, r2
    a3ae:	24 f8       	bld	r2, 4
    a3b0:	0f 2e       	mov	r0, r31
    a3b2:	f3 ea       	ldi	r31, 0xA3	; 163
    a3b4:	af 2e       	mov	r10, r31
    a3b6:	f3 e3       	ldi	r31, 0x33	; 51
    a3b8:	bf 2e       	mov	r11, r31
    a3ba:	f0 2d       	mov	r31, r0
    a3bc:	0f 2e       	mov	r0, r31
    a3be:	fd e9       	ldi	r31, 0x9D	; 157
    a3c0:	ef 2e       	mov	r14, r31
    a3c2:	f4 e3       	ldi	r31, 0x34	; 52
    a3c4:	ff 2e       	mov	r15, r31
    a3c6:	f0 2d       	mov	r31, r0
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;
    a3c8:	81 2c       	mov	r8, r1
    a3ca:	31 2c       	mov	r3, r1
            nwkRouteRemove(header->nwkDstAddr, header->nwkFcf.multicast);
        #endif
          return true;
        }

        entry->mask |= (1 << diff);
    a3cc:	44 24       	eor	r4, r4
    a3ce:	43 94       	inc	r4
    a3d0:	51 2c       	mov	r5, r1
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    a3d2:	37 c2       	rjmp	.+1134   	; 0xa842 <nwkRxTaskHandler+0x4e4>
  {
    switch (frame->state)
    a3d4:	d8 01       	movw	r26, r16
    a3d6:	8c 91       	ld	r24, X
    a3d8:	82 32       	cpi	r24, 0x22	; 34
    a3da:	09 f4       	brne	.+2      	; 0xa3de <nwkRxTaskHandler+0x80>
    a3dc:	62 c1       	rjmp	.+708    	; 0xa6a2 <nwkRxTaskHandler+0x344>
    a3de:	30 f4       	brcc	.+12     	; 0xa3ec <nwkRxTaskHandler+0x8e>
    a3e0:	80 32       	cpi	r24, 0x20	; 32
    a3e2:	59 f0       	breq	.+22     	; 0xa3fa <nwkRxTaskHandler+0x9c>
    a3e4:	81 32       	cpi	r24, 0x21	; 33
    a3e6:	09 f4       	brne	.+2      	; 0xa3ea <nwkRxTaskHandler+0x8c>
    a3e8:	58 c1       	rjmp	.+688    	; 0xa69a <nwkRxTaskHandler+0x33c>
    a3ea:	2b c2       	rjmp	.+1110   	; 0xa842 <nwkRxTaskHandler+0x4e4>
    a3ec:	83 32       	cpi	r24, 0x23	; 35
    a3ee:	09 f4       	brne	.+2      	; 0xa3f2 <nwkRxTaskHandler+0x94>
    a3f0:	22 c2       	rjmp	.+1092   	; 0xa836 <nwkRxTaskHandler+0x4d8>
    a3f2:	84 32       	cpi	r24, 0x24	; 36
    a3f4:	09 f4       	brne	.+2      	; 0xa3f8 <nwkRxTaskHandler+0x9a>
    a3f6:	22 c2       	rjmp	.+1092   	; 0xa83c <nwkRxTaskHandler+0x4de>
    a3f8:	24 c2       	rjmp	.+1096   	; 0xa842 <nwkRxTaskHandler+0x4e4>
*****************************************************************************/
static void nwkRxHandleReceivedFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;

  frame->state = NWK_RX_STATE_FINISH;
    a3fa:	f8 01       	movw	r30, r16
    a3fc:	90 82       	st	Z, r9
  if (header->nwkFcf.security)
    return;
#endif

#ifdef NWK_ENABLE_MULTICAST
  if (header->nwkFcf.multicast && header->nwkFcf.ackRequest)
    a3fe:	43 85       	ldd	r20, Z+11	; 0x0b
    a400:	84 2f       	mov	r24, r20
    a402:	89 70       	andi	r24, 0x09	; 9
    a404:	89 30       	cpi	r24, 0x09	; 9
    a406:	09 f4       	brne	.+2      	; 0xa40a <nwkRxTaskHandler+0xac>
    a408:	1c c2       	rjmp	.+1080   	; 0xa842 <nwkRxTaskHandler+0x4e4>
#else
  if (header->nwkFcf.multicast)
    return;
#endif

  if (NWK_BROADCAST_PANID == header->macDstPanId)
    a40a:	85 81       	ldd	r24, Z+5	; 0x05
    a40c:	96 81       	ldd	r25, Z+6	; 0x06
    a40e:	01 96       	adiw	r24, 0x01	; 1
    a410:	c1 f4       	brne	.+48     	; 0xa442 <nwkRxTaskHandler+0xe4>
  {
    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
    a412:	d8 01       	movw	r26, r16
    a414:	1f 96       	adiw	r26, 0x0f	; 15
    a416:	8d 91       	ld	r24, X+
    a418:	9c 91       	ld	r25, X
    a41a:	50 97       	sbiw	r26, 0x10	; 16
    a41c:	f6 01       	movw	r30, r12
    a41e:	20 81       	ld	r18, Z
    a420:	31 81       	ldd	r19, Z+1	; 0x01
    a422:	28 17       	cp	r18, r24
    a424:	39 07       	cpc	r19, r25
    a426:	19 f0       	breq	.+6      	; 0xa42e <nwkRxTaskHandler+0xd0>
    a428:	01 96       	adiw	r24, 0x01	; 1
    a42a:	09 f0       	breq	.+2      	; 0xa42e <nwkRxTaskHandler+0xd0>
    a42c:	0a c2       	rjmp	.+1044   	; 0xa842 <nwkRxTaskHandler+0x4e4>
    {
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
    a42e:	41 ff       	sbrs	r20, 1
    a430:	04 c0       	rjmp	.+8      	; 0xa43a <nwkRxTaskHandler+0xdc>
        frame->state = NWK_RX_STATE_DECRYPT;
    a432:	e1 e2       	ldi	r30, 0x21	; 33
    a434:	d8 01       	movw	r26, r16
    a436:	ec 93       	st	X, r30
    a438:	04 c2       	rjmp	.+1032   	; 0xa842 <nwkRxTaskHandler+0x4e4>
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
    a43a:	e2 e2       	ldi	r30, 0x22	; 34
    a43c:	d8 01       	movw	r26, r16
    a43e:	ec 93       	st	X, r30
    a440:	00 c2       	rjmp	.+1024   	; 0xa842 <nwkRxTaskHandler+0x4e4>
#ifdef NWK_ENABLE_ADDRESS_FILTER
  if (!NWK_FilterAddress(header->macSrcAddr, &frame->rx.lqi))
    return;
#endif

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr && header->nwkFcf.ackRequest)
    a442:	d8 01       	movw	r26, r16
    a444:	1f 96       	adiw	r26, 0x0f	; 15
    a446:	8d 91       	ld	r24, X+
    a448:	9c 91       	ld	r25, X
    a44a:	50 97       	sbiw	r26, 0x10	; 16
    a44c:	01 96       	adiw	r24, 0x01	; 1
    a44e:	11 f4       	brne	.+4      	; 0xa454 <nwkRxTaskHandler+0xf6>
    a450:	40 fd       	sbrc	r20, 0
    a452:	f7 c1       	rjmp	.+1006   	; 0xa842 <nwkRxTaskHandler+0x4e4>
    return;

  if (nwkIb.addr == header->nwkSrcAddr)
    a454:	f6 01       	movw	r30, r12
    a456:	20 81       	ld	r18, Z
    a458:	31 81       	ldd	r19, Z+1	; 0x01
    a45a:	d8 01       	movw	r26, r16
    a45c:	1d 96       	adiw	r26, 0x0d	; 13
    a45e:	8d 91       	ld	r24, X+
    a460:	9c 91       	ld	r25, X
    a462:	1e 97       	sbiw	r26, 0x0e	; 14
    a464:	28 17       	cp	r18, r24
    a466:	39 07       	cpc	r19, r25
    a468:	09 f4       	brne	.+2      	; 0xa46c <nwkRxTaskHandler+0x10e>
    a46a:	eb c1       	rjmp	.+982    	; 0xa842 <nwkRxTaskHandler+0x4e4>
    return;

#ifdef NWK_ENABLE_ROUTING
  nwkRouteFrameReceived(frame);
    a46c:	c8 01       	movw	r24, r16
    a46e:	3e db       	rcall	.-2436   	; 0x9aec <nwkRouteFrameReceived>
    a470:	f5 01       	movw	r30, r10
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;
    a472:	48 2d       	mov	r20, r8
    a474:	53 2d       	mov	r21, r3

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    entry = &nwkRxDuplicateRejectionTable[i];

    if (entry->ttl && header->nwkSrcAddr == entry->src)
    a476:	84 81       	ldd	r24, Z+4	; 0x04
    a478:	88 23       	and	r24, r24
    a47a:	09 f4       	brne	.+2      	; 0xa47e <nwkRxTaskHandler+0x120>
    a47c:	4c c0       	rjmp	.+152    	; 0xa516 <nwkRxTaskHandler+0x1b8>
    a47e:	d8 01       	movw	r26, r16
    a480:	1d 96       	adiw	r26, 0x0d	; 13
    a482:	2d 91       	ld	r18, X+
    a484:	3c 91       	ld	r19, X
    a486:	1e 97       	sbiw	r26, 0x0e	; 14
    a488:	80 81       	ld	r24, Z
    a48a:	91 81       	ldd	r25, Z+1	; 0x01
    a48c:	28 17       	cp	r18, r24
    a48e:	39 07       	cpc	r19, r25
    a490:	09 f0       	breq	.+2      	; 0xa494 <nwkRxTaskHandler+0x136>
    a492:	42 c0       	rjmp	.+132    	; 0xa518 <nwkRxTaskHandler+0x1ba>
    {
      uint8_t diff = (int8_t)entry->seq - header->nwkSeq;
    a494:	1c 96       	adiw	r26, 0x0c	; 12
    a496:	9c 91       	ld	r25, X
    a498:	1c 97       	sbiw	r26, 0x0c	; 12
    a49a:	42 81       	ldd	r20, Z+2	; 0x02
    a49c:	49 1b       	sub	r20, r25

      if (diff < 8)
    a49e:	48 30       	cpi	r20, 0x08	; 8
    a4a0:	58 f5       	brcc	.+86     	; 0xa4f8 <nwkRxTaskHandler+0x19a>
      {
        if (entry->mask & (1 << diff))
    a4a2:	23 81       	ldd	r18, Z+3	; 0x03
    a4a4:	82 2f       	mov	r24, r18
    a4a6:	90 e0       	ldi	r25, 0x00	; 0
    a4a8:	04 2e       	mov	r0, r20
    a4aa:	02 c0       	rjmp	.+4      	; 0xa4b0 <nwkRxTaskHandler+0x152>
    a4ac:	95 95       	asr	r25
    a4ae:	87 95       	ror	r24
    a4b0:	0a 94       	dec	r0
    a4b2:	e2 f7       	brpl	.-8      	; 0xa4ac <nwkRxTaskHandler+0x14e>
    a4b4:	80 ff       	sbrs	r24, 0
    a4b6:	17 c0       	rjmp	.+46     	; 0xa4e6 <nwkRxTaskHandler+0x188>
        {
        #ifdef NWK_ENABLE_ROUTING
          if (nwkIb.addr == header->macDstAddr)
    a4b8:	f6 01       	movw	r30, r12
    a4ba:	20 81       	ld	r18, Z
    a4bc:	31 81       	ldd	r19, Z+1	; 0x01
    a4be:	17 96       	adiw	r26, 0x07	; 7
    a4c0:	8d 91       	ld	r24, X+
    a4c2:	9c 91       	ld	r25, X
    a4c4:	18 97       	sbiw	r26, 0x08	; 8
    a4c6:	28 17       	cp	r18, r24
    a4c8:	39 07       	cpc	r19, r25
    a4ca:	09 f0       	breq	.+2      	; 0xa4ce <nwkRxTaskHandler+0x170>
    a4cc:	ba c1       	rjmp	.+884    	; 0xa842 <nwkRxTaskHandler+0x4e4>
            nwkRouteRemove(header->nwkDstAddr, header->nwkFcf.multicast);
    a4ce:	1b 96       	adiw	r26, 0x0b	; 11
    a4d0:	6c 91       	ld	r22, X
    a4d2:	1b 97       	sbiw	r26, 0x0b	; 11
    a4d4:	63 fb       	bst	r22, 3
    a4d6:	66 27       	eor	r22, r22
    a4d8:	60 f9       	bld	r22, 0
    a4da:	1f 96       	adiw	r26, 0x0f	; 15
    a4dc:	8d 91       	ld	r24, X+
    a4de:	9c 91       	ld	r25, X
    a4e0:	50 97       	sbiw	r26, 0x10	; 16
    a4e2:	ff da       	rcall	.-2562   	; 0x9ae2 <nwkRouteRemove>
    a4e4:	ae c1       	rjmp	.+860    	; 0xa842 <nwkRxTaskHandler+0x4e4>
        #endif
          return true;
        }

        entry->mask |= (1 << diff);
    a4e6:	c2 01       	movw	r24, r4
    a4e8:	02 c0       	rjmp	.+4      	; 0xa4ee <nwkRxTaskHandler+0x190>
    a4ea:	88 0f       	add	r24, r24
    a4ec:	99 1f       	adc	r25, r25
    a4ee:	4a 95       	dec	r20
    a4f0:	e2 f7       	brpl	.-8      	; 0xa4ea <nwkRxTaskHandler+0x18c>
    a4f2:	82 2b       	or	r24, r18
    a4f4:	83 83       	std	Z+3, r24	; 0x03
    a4f6:	ad c1       	rjmp	.+858    	; 0xa852 <nwkRxTaskHandler+0x4f4>
      }
      else
      {
        uint8_t shift = -(int8_t)diff;

        entry->seq = header->nwkSeq;
    a4f8:	92 83       	std	Z+2, r25	; 0x02
        entry->mask = (entry->mask << shift) | 1;
    a4fa:	23 81       	ldd	r18, Z+3	; 0x03
    a4fc:	30 e0       	ldi	r19, 0x00	; 0
        entry->mask |= (1 << diff);
        return false;
      }
      else
      {
        uint8_t shift = -(int8_t)diff;
    a4fe:	41 95       	neg	r20

        entry->seq = header->nwkSeq;
        entry->mask = (entry->mask << shift) | 1;
    a500:	c9 01       	movw	r24, r18
    a502:	02 c0       	rjmp	.+4      	; 0xa508 <nwkRxTaskHandler+0x1aa>
    a504:	88 0f       	add	r24, r24
    a506:	99 1f       	adc	r25, r25
    a508:	4a 95       	dec	r20
    a50a:	e2 f7       	brpl	.-8      	; 0xa504 <nwkRxTaskHandler+0x1a6>
    a50c:	81 60       	ori	r24, 0x01	; 1
    a50e:	83 83       	std	Z+3, r24	; 0x03
        entry->ttl = DUPLICATE_REJECTION_TTL;
    a510:	82 e0       	ldi	r24, 0x02	; 2
    a512:	84 83       	std	Z+4, r24	; 0x04
    a514:	9e c1       	rjmp	.+828    	; 0xa852 <nwkRxTaskHandler+0x4f4>
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    entry = &nwkRxDuplicateRejectionTable[i];
    a516:	af 01       	movw	r20, r30
    a518:	35 96       	adiw	r30, 0x05	; 5
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    a51a:	ee 15       	cp	r30, r14
    a51c:	ff 05       	cpc	r31, r15
    a51e:	09 f0       	breq	.+2      	; 0xa522 <nwkRxTaskHandler+0x1c4>
    a520:	aa cf       	rjmp	.-172    	; 0xa476 <nwkRxTaskHandler+0x118>

    if (0 == entry->ttl)
      freeEntry = entry;
  }

  if (NULL == freeEntry)
    a522:	41 15       	cp	r20, r1
    a524:	51 05       	cpc	r21, r1
    a526:	09 f4       	brne	.+2      	; 0xa52a <nwkRxTaskHandler+0x1cc>
    a528:	8c c1       	rjmp	.+792    	; 0xa842 <nwkRxTaskHandler+0x4e4>
    return true;

  freeEntry->src = header->nwkSrcAddr;
    a52a:	d8 01       	movw	r26, r16
    a52c:	1d 96       	adiw	r26, 0x0d	; 13
    a52e:	8d 91       	ld	r24, X+
    a530:	9c 91       	ld	r25, X
    a532:	1e 97       	sbiw	r26, 0x0e	; 14
    a534:	fa 01       	movw	r30, r20
    a536:	91 83       	std	Z+1, r25	; 0x01
    a538:	80 83       	st	Z, r24
  freeEntry->seq = header->nwkSeq;
    a53a:	1c 96       	adiw	r26, 0x0c	; 12
    a53c:	8c 91       	ld	r24, X
    a53e:	82 83       	std	Z+2, r24	; 0x02
  freeEntry->mask = 1;
    a540:	21 e0       	ldi	r18, 0x01	; 1
    a542:	23 83       	std	Z+3, r18	; 0x03
  freeEntry->ttl = DUPLICATE_REJECTION_TTL;
    a544:	82 e0       	ldi	r24, 0x02	; 2
    a546:	84 83       	std	Z+4, r24	; 0x04

  SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
    a548:	85 e9       	ldi	r24, 0x95	; 149
    a54a:	93 e3       	ldi	r25, 0x33	; 51
    a54c:	88 d7       	rcall	.+3856   	; 0xb45e <SYS_TimerStart>
    a54e:	81 c1       	rjmp	.+770    	; 0xa852 <nwkRxTaskHandler+0x4f4>
    return;

#ifdef NWK_ENABLE_MULTICAST
  if (header->nwkFcf.multicast)
  {
    NwkFrameMulticastHeader_t *mcHeader = (NwkFrameMulticastHeader_t *)frame->payload;
    a550:	f8 01       	movw	r30, r16
    a552:	ef 57       	subi	r30, 0x7F	; 127
    a554:	ff 4f       	sbci	r31, 0xFF	; 255
    a556:	60 80       	ld	r6, Z
    a558:	71 80       	ldd	r7, Z+1	; 0x01
    bool member = NWK_GroupIsMember(header->nwkDstAddr);
    a55a:	d8 01       	movw	r26, r16
    a55c:	1f 96       	adiw	r26, 0x0f	; 15
    a55e:	8d 91       	ld	r24, X+
    a560:	9c 91       	ld	r25, X
    a562:	50 97       	sbiw	r26, 0x10	; 16
    a564:	ec d9       	rcall	.-3112   	; 0x993e <NWK_GroupIsMember>
    a566:	8d 87       	std	Y+13, r24	; 0x0d
    bool broadcast = false;

    if (NWK_BROADCAST_ADDR == header->macDstAddr)
    a568:	f8 01       	movw	r30, r16
    a56a:	87 81       	ldd	r24, Z+7	; 0x07
    a56c:	90 85       	ldd	r25, Z+8	; 0x08
    a56e:	01 96       	adiw	r24, 0x01	; 1
    a570:	71 f5       	brne	.+92     	; 0xa5ce <nwkRxTaskHandler+0x270>
    {
      if (member)
    a572:	2d 85       	ldd	r18, Y+13	; 0x0d
    a574:	22 23       	and	r18, r18
    a576:	b1 f0       	breq	.+44     	; 0xa5a4 <nwkRxTaskHandler+0x246>
      {
        broadcast = mcHeader->memberRadius > 0;
    a578:	d3 01       	movw	r26, r6
    a57a:	11 96       	adiw	r26, 0x01	; 1
    a57c:	9c 91       	ld	r25, X
    a57e:	9f 70       	andi	r25, 0x0F	; 15
    a580:	81 e0       	ldi	r24, 0x01	; 1
    a582:	09 f4       	brne	.+2      	; 0xa586 <nwkRxTaskHandler+0x228>
    a584:	80 e0       	ldi	r24, 0x00	; 0
        mcHeader->memberRadius--;
    a586:	91 5f       	subi	r25, 0xF1	; 241
    a588:	9f 70       	andi	r25, 0x0F	; 15
    a58a:	f3 01       	movw	r30, r6
    a58c:	21 81       	ldd	r18, Z+1	; 0x01
    a58e:	20 7f       	andi	r18, 0xF0	; 240
    a590:	92 2b       	or	r25, r18
    a592:	91 83       	std	Z+1, r25	; 0x01
        mcHeader->nonMemberRadius = mcHeader->maxNonMemberRadius;
    a594:	90 81       	ld	r25, Z
    a596:	29 2f       	mov	r18, r25
    a598:	22 95       	swap	r18
    a59a:	2f 70       	andi	r18, 0x0F	; 15
    a59c:	90 7f       	andi	r25, 0xF0	; 240
    a59e:	92 2b       	or	r25, r18
    a5a0:	90 83       	st	Z, r25
    a5a2:	24 c0       	rjmp	.+72     	; 0xa5ec <nwkRxTaskHandler+0x28e>
      }
      else
      {
        broadcast = mcHeader->nonMemberRadius > 0;
    a5a4:	d3 01       	movw	r26, r6
    a5a6:	9c 91       	ld	r25, X
    a5a8:	9f 70       	andi	r25, 0x0F	; 15
    a5aa:	81 e0       	ldi	r24, 0x01	; 1
    a5ac:	09 f4       	brne	.+2      	; 0xa5b0 <nwkRxTaskHandler+0x252>
    a5ae:	80 e0       	ldi	r24, 0x00	; 0
        mcHeader->nonMemberRadius--;
    a5b0:	91 5f       	subi	r25, 0xF1	; 241
    a5b2:	9f 70       	andi	r25, 0x0F	; 15
    a5b4:	f3 01       	movw	r30, r6
    a5b6:	20 81       	ld	r18, Z
    a5b8:	20 7f       	andi	r18, 0xF0	; 240
    a5ba:	92 2b       	or	r25, r18
    a5bc:	90 83       	st	Z, r25
        mcHeader->memberRadius = mcHeader->maxMemberRadius;
    a5be:	91 81       	ldd	r25, Z+1	; 0x01
    a5c0:	29 2f       	mov	r18, r25
    a5c2:	22 95       	swap	r18
    a5c4:	2f 70       	andi	r18, 0x0F	; 15
    a5c6:	90 7f       	andi	r25, 0xF0	; 240
    a5c8:	92 2b       	or	r25, r18
    a5ca:	91 83       	std	Z+1, r25	; 0x01
    a5cc:	0f c0       	rjmp	.+30     	; 0xa5ec <nwkRxTaskHandler+0x28e>
      }
    }
    else
    {
      if (member)
    a5ce:	fd 85       	ldd	r31, Y+13	; 0x0d
    a5d0:	ff 23       	and	r31, r31
    a5d2:	41 f0       	breq	.+16     	; 0xa5e4 <nwkRxTaskHandler+0x286>
      {
        broadcast = true;
        header->nwkFcf.linkLocal = 1;
    a5d4:	d8 01       	movw	r26, r16
    a5d6:	1b 96       	adiw	r26, 0x0b	; 11
    a5d8:	8c 91       	ld	r24, X
    a5da:	1b 97       	sbiw	r26, 0x0b	; 11
    a5dc:	84 60       	ori	r24, 0x04	; 4
    a5de:	1b 96       	adiw	r26, 0x0b	; 11
    a5e0:	8c 93       	st	X, r24
    a5e2:	06 c0       	rjmp	.+12     	; 0xa5f0 <nwkRxTaskHandler+0x292>
      }
    #ifdef NWK_ENABLE_ROUTING
      else
      {
        frame->state = NWK_RX_STATE_ROUTE;
    a5e4:	83 e2       	ldi	r24, 0x23	; 35
    a5e6:	f8 01       	movw	r30, r16
    a5e8:	80 83       	st	Z, r24
    a5ea:	2b c1       	rjmp	.+598    	; 0xa842 <nwkRxTaskHandler+0x4e4>
      }
    #endif
    }

    if (broadcast)
    a5ec:	88 23       	and	r24, r24
    a5ee:	11 f0       	breq	.+4      	; 0xa5f4 <nwkRxTaskHandler+0x296>
      nwkTxBroadcastFrame(frame);
    a5f0:	c8 01       	movw	r24, r16
    a5f2:	90 d3       	rcall	.+1824   	; 0xad14 <nwkTxBroadcastFrame>

    if (member)
    a5f4:	fd 85       	ldd	r31, Y+13	; 0x0d
    a5f6:	ff 23       	and	r31, r31
    a5f8:	09 f4       	brne	.+2      	; 0xa5fc <nwkRxTaskHandler+0x29e>
    a5fa:	23 c1       	rjmp	.+582    	; 0xa842 <nwkRxTaskHandler+0x4e4>
    {
      frame->payload += sizeof(NwkFrameMulticastHeader_t);
    a5fc:	f8 01       	movw	r30, r16
    a5fe:	ef 57       	subi	r30, 0x7F	; 127
    a600:	ff 4f       	sbci	r31, 0xFF	; 255
    a602:	80 81       	ld	r24, Z
    a604:	91 81       	ldd	r25, Z+1	; 0x01
    a606:	02 96       	adiw	r24, 0x02	; 2
    a608:	91 83       	std	Z+1, r25	; 0x01
    a60a:	80 83       	st	Z, r24

    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
    a60c:	d8 01       	movw	r26, r16
    a60e:	1b 96       	adiw	r26, 0x0b	; 11
    a610:	8c 91       	ld	r24, X
    a612:	1b 97       	sbiw	r26, 0x0b	; 11
    a614:	81 ff       	sbrs	r24, 1
    a616:	03 c0       	rjmp	.+6      	; 0xa61e <nwkRxTaskHandler+0x2c0>
        frame->state = NWK_RX_STATE_DECRYPT;
    a618:	e1 e2       	ldi	r30, 0x21	; 33
    a61a:	ec 93       	st	X, r30
    a61c:	12 c1       	rjmp	.+548    	; 0xa842 <nwkRxTaskHandler+0x4e4>
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
    a61e:	e2 e2       	ldi	r30, 0x22	; 34
    a620:	d8 01       	movw	r26, r16
    a622:	ec 93       	st	X, r30
    a624:	0e c1       	rjmp	.+540    	; 0xa842 <nwkRxTaskHandler+0x4e4>
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    a626:	d8 01       	movw	r26, r16
    a628:	17 96       	adiw	r26, 0x07	; 7
    a62a:	8d 91       	ld	r24, X+
    a62c:	9c 91       	ld	r25, X
    a62e:	18 97       	sbiw	r26, 0x08	; 8
    a630:	01 96       	adiw	r24, 0x01	; 1
    a632:	79 f4       	brne	.+30     	; 0xa652 <nwkRxTaskHandler+0x2f4>
    a634:	f6 01       	movw	r30, r12
    a636:	20 81       	ld	r18, Z
    a638:	31 81       	ldd	r19, Z+1	; 0x01
    a63a:	d8 01       	movw	r26, r16
    a63c:	1f 96       	adiw	r26, 0x0f	; 15
    a63e:	8d 91       	ld	r24, X+
    a640:	9c 91       	ld	r25, X
    a642:	50 97       	sbiw	r26, 0x10	; 16
    a644:	28 17       	cp	r18, r24
    a646:	39 07       	cpc	r19, r25
    a648:	89 f0       	breq	.+34     	; 0xa66c <nwkRxTaskHandler+0x30e>
    a64a:	42 fd       	sbrc	r20, 2
    a64c:	0d c0       	rjmp	.+26     	; 0xa668 <nwkRxTaskHandler+0x30a>
        0 == header->nwkFcf.linkLocal)
      nwkTxBroadcastFrame(frame);
    a64e:	c8 01       	movw	r24, r16
    a650:	61 d3       	rcall	.+1730   	; 0xad14 <nwkTxBroadcastFrame>

    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
    a652:	f6 01       	movw	r30, r12
    a654:	20 81       	ld	r18, Z
    a656:	31 81       	ldd	r19, Z+1	; 0x01
    a658:	d8 01       	movw	r26, r16
    a65a:	1f 96       	adiw	r26, 0x0f	; 15
    a65c:	8d 91       	ld	r24, X+
    a65e:	9c 91       	ld	r25, X
    a660:	50 97       	sbiw	r26, 0x10	; 16
    a662:	28 17       	cp	r18, r24
    a664:	39 07       	cpc	r19, r25
    a666:	11 f0       	breq	.+4      	; 0xa66c <nwkRxTaskHandler+0x30e>
    a668:	01 96       	adiw	r24, 0x01	; 1
    a66a:	59 f4       	brne	.+22     	; 0xa682 <nwkRxTaskHandler+0x324>
    {
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
    a66c:	f8 01       	movw	r30, r16
    a66e:	83 85       	ldd	r24, Z+11	; 0x0b
    a670:	81 ff       	sbrs	r24, 1
    a672:	03 c0       	rjmp	.+6      	; 0xa67a <nwkRxTaskHandler+0x31c>
        frame->state = NWK_RX_STATE_DECRYPT;
    a674:	21 e2       	ldi	r18, 0x21	; 33
    a676:	20 83       	st	Z, r18
    a678:	e4 c0       	rjmp	.+456    	; 0xa842 <nwkRxTaskHandler+0x4e4>
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
    a67a:	e2 e2       	ldi	r30, 0x22	; 34
    a67c:	d8 01       	movw	r26, r16
    a67e:	ec 93       	st	X, r30
    a680:	e0 c0       	rjmp	.+448    	; 0xa842 <nwkRxTaskHandler+0x4e4>
    }

  #ifdef NWK_ENABLE_ROUTING
    else if (nwkIb.addr == header->macDstAddr)
    a682:	d8 01       	movw	r26, r16
    a684:	17 96       	adiw	r26, 0x07	; 7
    a686:	8d 91       	ld	r24, X+
    a688:	9c 91       	ld	r25, X
    a68a:	18 97       	sbiw	r26, 0x08	; 8
    a68c:	28 17       	cp	r18, r24
    a68e:	39 07       	cpc	r19, r25
    a690:	09 f0       	breq	.+2      	; 0xa694 <nwkRxTaskHandler+0x336>
    a692:	d7 c0       	rjmp	.+430    	; 0xa842 <nwkRxTaskHandler+0x4e4>
    {
      frame->state = NWK_RX_STATE_ROUTE;
    a694:	83 e2       	ldi	r24, 0x23	; 35
    a696:	8c 93       	st	X, r24
    a698:	d4 c0       	rjmp	.+424    	; 0xa842 <nwkRxTaskHandler+0x4e4>
      } break;

#ifdef NWK_ENABLE_SECURITY
      case NWK_RX_STATE_DECRYPT:
      {
        nwkSecurityProcess(frame, false);
    a69a:	60 e0       	ldi	r22, 0x00	; 0
    a69c:	c8 01       	movw	r24, r16
    a69e:	07 d1       	rcall	.+526    	; 0xa8ae <nwkSecurityProcess>
      } break;
    a6a0:	d0 c0       	rjmp	.+416    	; 0xa842 <nwkRxTaskHandler+0x4e4>
*****************************************************************************/
static void nwkRxHandleIndication(NwkFrame_t *frame)
{
  bool ack;

  nwkRxAckControl = 0;
    a6a2:	10 92 a2 33 	sts	0x33A2, r1
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    a6a6:	f8 01       	movw	r30, r16
    a6a8:	41 89       	ldd	r20, Z+17	; 0x11
    a6aa:	42 95       	swap	r20
    a6ac:	4f 70       	andi	r20, 0x0F	; 15
    a6ae:	e4 2f       	mov	r30, r20
    a6b0:	f0 e0       	ldi	r31, 0x00	; 0
    a6b2:	ee 0f       	add	r30, r30
    a6b4:	ff 1f       	adc	r31, r31
    a6b6:	e7 5f       	subi	r30, 0xF7	; 247
    a6b8:	f5 4c       	sbci	r31, 0xC5	; 197
    a6ba:	01 90       	ld	r0, Z+
    a6bc:	f0 81       	ld	r31, Z
    a6be:	e0 2d       	mov	r30, r0
    a6c0:	30 97       	sbiw	r30, 0x00	; 0
    a6c2:	09 f4       	brne	.+2      	; 0xa6c6 <nwkRxTaskHandler+0x368>
    a6c4:	60 c0       	rjmp	.+192    	; 0xa786 <nwkRxTaskHandler+0x428>
    return false;

  ind.srcAddr = header->nwkSrcAddr;
    a6c6:	d8 01       	movw	r26, r16
    a6c8:	1d 96       	adiw	r26, 0x0d	; 13
    a6ca:	8d 91       	ld	r24, X+
    a6cc:	9c 91       	ld	r25, X
    a6ce:	1e 97       	sbiw	r26, 0x0e	; 14
    a6d0:	9a 83       	std	Y+2, r25	; 0x02
    a6d2:	89 83       	std	Y+1, r24	; 0x01
  ind.dstAddr = header->nwkDstAddr;
    a6d4:	1f 96       	adiw	r26, 0x0f	; 15
    a6d6:	2d 91       	ld	r18, X+
    a6d8:	3c 91       	ld	r19, X
    a6da:	50 97       	sbiw	r26, 0x10	; 16
    a6dc:	3c 83       	std	Y+4, r19	; 0x04
    a6de:	2b 83       	std	Y+3, r18	; 0x03
  ind.srcEndpoint = header->nwkSrcEndpoint;
    a6e0:	51 96       	adiw	r26, 0x11	; 17
    a6e2:	5c 91       	ld	r21, X
    a6e4:	51 97       	sbiw	r26, 0x11	; 17
    a6e6:	5f 70       	andi	r21, 0x0F	; 15
    a6e8:	5d 83       	std	Y+5, r21	; 0x05
  ind.dstEndpoint = header->nwkDstEndpoint;
    a6ea:	4e 83       	std	Y+6, r20	; 0x06
  ind.data = frame->payload;
    a6ec:	af 57       	subi	r26, 0x7F	; 127
    a6ee:	bf 4f       	sbci	r27, 0xFF	; 255
    a6f0:	4d 91       	ld	r20, X+
    a6f2:	5c 91       	ld	r21, X
    a6f4:	59 87       	std	Y+9, r21	; 0x09
    a6f6:	48 87       	std	Y+8, r20	; 0x08

/*************************************************************************//**
*****************************************************************************/
static inline uint8_t nwkFramePayloadSize(NwkFrame_t *frame)
{
  return frame->size - (frame->payload - frame->data);
    a6f8:	b8 01       	movw	r22, r16
    a6fa:	6e 5f       	subi	r22, 0xFE	; 254
    a6fc:	7f 4f       	sbci	r23, 0xFF	; 255
    a6fe:	64 1b       	sub	r22, r20
    a700:	75 0b       	sbc	r23, r21
    a702:	d8 01       	movw	r26, r16
    a704:	11 96       	adiw	r26, 0x01	; 1
    a706:	4c 91       	ld	r20, X
    a708:	11 97       	sbiw	r26, 0x01	; 1
    a70a:	64 0f       	add	r22, r20
  ind.size = nwkFramePayloadSize(frame);
    a70c:	6a 87       	std	Y+10, r22	; 0x0a
  ind.lqi = frame->rx.lqi;
    a70e:	ad 57       	subi	r26, 0x7D	; 125
    a710:	bf 4f       	sbci	r27, 0xFF	; 255
    a712:	4c 91       	ld	r20, X
    a714:	4b 87       	std	Y+11, r20	; 0x0b
  ind.rssi = frame->rx.rssi;
    a716:	11 96       	adiw	r26, 0x01	; 1
    a718:	4c 91       	ld	r20, X
    a71a:	4c 87       	std	Y+12, r20	; 0x0c

  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
    a71c:	d8 01       	movw	r26, r16
    a71e:	1b 96       	adiw	r26, 0x0b	; 11
    a720:	4c 91       	ld	r20, X
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
    a722:	54 2f       	mov	r21, r20
    a724:	53 70       	andi	r21, 0x03	; 3
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
    a726:	42 ff       	sbrs	r20, 2
    a728:	02 c0       	rjmp	.+4      	; 0xa72e <nwkRxTaskHandler+0x3d0>
    a72a:	60 e2       	ldi	r22, 0x20	; 32
    a72c:	01 c0       	rjmp	.+2      	; 0xa730 <nwkRxTaskHandler+0x3d2>
    a72e:	60 e0       	ldi	r22, 0x00	; 0
    a730:	56 2b       	or	r21, r22
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
    a732:	43 ff       	sbrs	r20, 3
    a734:	02 c0       	rjmp	.+4      	; 0xa73a <nwkRxTaskHandler+0x3dc>
    a736:	40 e4       	ldi	r20, 0x40	; 64
    a738:	01 c0       	rjmp	.+2      	; 0xa73c <nwkRxTaskHandler+0x3de>
    a73a:	40 e0       	ldi	r20, 0x00	; 0
    a73c:	45 2b       	or	r20, r21
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
    a73e:	2f 3f       	cpi	r18, 0xFF	; 255
    a740:	3f 4f       	sbci	r19, 0xFF	; 255
    a742:	11 f4       	brne	.+4      	; 0xa748 <nwkRxTaskHandler+0x3ea>
    a744:	24 e0       	ldi	r18, 0x04	; 4
    a746:	01 c0       	rjmp	.+2      	; 0xa74a <nwkRxTaskHandler+0x3ec>
    a748:	20 e0       	ldi	r18, 0x00	; 0
    a74a:	42 2b       	or	r20, r18
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
    a74c:	d8 01       	movw	r26, r16
    a74e:	19 96       	adiw	r26, 0x09	; 9
    a750:	2d 91       	ld	r18, X+
    a752:	3c 91       	ld	r19, X
    a754:	1a 97       	sbiw	r26, 0x0a	; 10
    a756:	82 17       	cp	r24, r18
    a758:	93 07       	cpc	r25, r19
    a75a:	11 f4       	brne	.+4      	; 0xa760 <nwkRxTaskHandler+0x402>
    a75c:	28 e0       	ldi	r18, 0x08	; 8
    a75e:	01 c0       	rjmp	.+2      	; 0xa762 <nwkRxTaskHandler+0x404>
    a760:	20 e0       	ldi	r18, 0x00	; 0
    a762:	24 2b       	or	r18, r20
    a764:	2f 83       	std	Y+7, r18	; 0x07
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
    a766:	d8 01       	movw	r26, r16
    a768:	15 96       	adiw	r26, 0x05	; 5
    a76a:	8d 91       	ld	r24, X+
    a76c:	9c 91       	ld	r25, X
    a76e:	16 97       	sbiw	r26, 0x06	; 6
    a770:	01 96       	adiw	r24, 0x01	; 1
    a772:	11 f4       	brne	.+4      	; 0xa778 <nwkRxTaskHandler+0x41a>
    a774:	82 2d       	mov	r24, r2
    a776:	01 c0       	rjmp	.+2      	; 0xa77a <nwkRxTaskHandler+0x41c>
    a778:	80 e0       	ldi	r24, 0x00	; 0
    a77a:	28 2b       	or	r18, r24
    a77c:	2f 83       	std	Y+7, r18	; 0x07

  return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
    a77e:	ce 01       	movw	r24, r28
    a780:	01 96       	adiw	r24, 0x01	; 1
    a782:	19 95       	eicall
    a784:	01 c0       	rjmp	.+2      	; 0xa788 <nwkRxTaskHandler+0x42a>
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    return false;
    a786:	80 e0       	ldi	r24, 0x00	; 0
  bool ack;

  nwkRxAckControl = 0;
  ack = nwkRxIndicateFrame(frame);
  
  if (0 == frame->header.nwkFcf.ackRequest)
    a788:	f8 01       	movw	r30, r16
    a78a:	93 85       	ldd	r25, Z+11	; 0x0b
    a78c:	90 ff       	sbrs	r25, 0
    ack = false;
    a78e:	80 e0       	ldi	r24, 0x00	; 0

  if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    a790:	d8 01       	movw	r26, r16
    a792:	17 96       	adiw	r26, 0x07	; 7
    a794:	2d 91       	ld	r18, X+
    a796:	3c 91       	ld	r19, X
    a798:	18 97       	sbiw	r26, 0x08	; 8
    a79a:	2f 3f       	cpi	r18, 0xFF	; 255
    a79c:	3f 4f       	sbci	r19, 0xFF	; 255
    a79e:	69 f4       	brne	.+26     	; 0xa7ba <nwkRxTaskHandler+0x45c>
    a7a0:	f6 01       	movw	r30, r12
    a7a2:	40 81       	ld	r20, Z
    a7a4:	51 81       	ldd	r21, Z+1	; 0x01
    a7a6:	d8 01       	movw	r26, r16
    a7a8:	1f 96       	adiw	r26, 0x0f	; 15
    a7aa:	2d 91       	ld	r18, X+
    a7ac:	3c 91       	ld	r19, X
    a7ae:	50 97       	sbiw	r26, 0x10	; 16
    a7b0:	42 17       	cp	r20, r18
    a7b2:	53 07       	cpc	r21, r19
    a7b4:	11 f4       	brne	.+4      	; 0xa7ba <nwkRxTaskHandler+0x45c>
      nwkIb.addr == frame->header.nwkDstAddr &&
    a7b6:	93 ff       	sbrs	r25, 3
      0 == frame->header.nwkFcf.multicast)
    ack = true;
    a7b8:	81 e0       	ldi	r24, 0x01	; 1

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
    a7ba:	f8 01       	movw	r30, r16
    a7bc:	25 81       	ldd	r18, Z+5	; 0x05
    a7be:	36 81       	ldd	r19, Z+6	; 0x06
    a7c0:	2f 3f       	cpi	r18, 0xFF	; 255
    a7c2:	3f 4f       	sbci	r19, 0xFF	; 255
    a7c4:	a9 f1       	breq	.+106    	; 0xa830 <nwkRxTaskHandler+0x4d2>
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
    a7c6:	d6 01       	movw	r26, r12
    a7c8:	2d 91       	ld	r18, X+
    a7ca:	3c 91       	ld	r19, X
    a7cc:	2f 3f       	cpi	r18, 0xFF	; 255
    a7ce:	3f 4f       	sbci	r19, 0xFF	; 255
    a7d0:	79 f1       	breq	.+94     	; 0xa830 <nwkRxTaskHandler+0x4d2>
    ack = false;

  if (ack)
    a7d2:	88 23       	and	r24, r24
    a7d4:	69 f1       	breq	.+90     	; 0xa830 <nwkRxTaskHandler+0x4d2>
static void nwkRxSendAck(NwkFrame_t *frame)
{
  NwkFrame_t *ack;
  NwkCommandAck_t *command;

  if (NULL == (ack = nwkFrameAlloc()))
    a7d6:	0e 94 ce 4b 	call	0x979c	; 0x979c <nwkFrameAlloc>
    a7da:	3c 01       	movw	r6, r24
    a7dc:	00 97       	sbiw	r24, 0x00	; 0
    a7de:	41 f1       	breq	.+80     	; 0xa830 <nwkRxTaskHandler+0x4d2>
    return;

  nwkFrameCommandInit(ack);
    a7e0:	43 d8       	rcall	.-3962   	; 0x9868 <nwkFrameCommandInit>

  ack->size += sizeof(NwkCommandAck_t);
    a7e2:	f3 01       	movw	r30, r6
    a7e4:	81 81       	ldd	r24, Z+1	; 0x01
    a7e6:	8d 5f       	subi	r24, 0xFD	; 253
    a7e8:	81 83       	std	Z+1, r24	; 0x01
  ack->tx.confirm = NULL;
    a7ea:	e9 57       	subi	r30, 0x79	; 121
    a7ec:	ff 4f       	sbci	r31, 0xFF	; 255
    a7ee:	11 82       	std	Z+1, r1	; 0x01
    a7f0:	10 82       	st	Z, r1

  ack->header.nwkFcf.security = frame->header.nwkFcf.security;
    a7f2:	d8 01       	movw	r26, r16
    a7f4:	1b 96       	adiw	r26, 0x0b	; 11
    a7f6:	9c 91       	ld	r25, X
    a7f8:	1b 97       	sbiw	r26, 0x0b	; 11
    a7fa:	96 95       	lsr	r25
    a7fc:	91 70       	andi	r25, 0x01	; 1
    a7fe:	f3 01       	movw	r30, r6
    a800:	83 85       	ldd	r24, Z+11	; 0x0b
    a802:	90 fb       	bst	r25, 0
    a804:	81 f9       	bld	r24, 1
    a806:	83 87       	std	Z+11, r24	; 0x0b
  ack->header.nwkDstAddr = frame->header.nwkSrcAddr;
    a808:	1d 96       	adiw	r26, 0x0d	; 13
    a80a:	8d 91       	ld	r24, X+
    a80c:	9c 91       	ld	r25, X
    a80e:	1e 97       	sbiw	r26, 0x0e	; 14
    a810:	90 8b       	std	Z+16, r25	; 0x10
    a812:	87 87       	std	Z+15, r24	; 0x0f

  command = (NwkCommandAck_t *)ack->payload;
    a814:	ef 57       	subi	r30, 0x7F	; 127
    a816:	ff 4f       	sbci	r31, 0xFF	; 255
    a818:	01 90       	ld	r0, Z+
    a81a:	f0 81       	ld	r31, Z
    a81c:	e0 2d       	mov	r30, r0
  command->id = NWK_COMMAND_ACK;
    a81e:	10 82       	st	Z, r1
  command->control = nwkRxAckControl;
    a820:	80 91 a2 33 	lds	r24, 0x33A2
    a824:	82 83       	std	Z+2, r24	; 0x02
  command->seq = frame->header.nwkSeq;
    a826:	1c 96       	adiw	r26, 0x0c	; 12
    a828:	8c 91       	ld	r24, X
    a82a:	81 83       	std	Z+1, r24	; 0x01

  nwkTxFrame(ack);
    a82c:	c3 01       	movw	r24, r6
    a82e:	1a d2       	rcall	.+1076   	; 0xac64 <nwkTxFrame>
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
    a830:	d8 01       	movw	r26, r16
    a832:	9c 92       	st	X, r9
    a834:	06 c0       	rjmp	.+12     	; 0xa842 <nwkRxTaskHandler+0x4e4>
      } break;

#ifdef NWK_ENABLE_ROUTING
      case NWK_RX_STATE_ROUTE:
      {
        nwkRouteFrame(frame);
    a836:	c8 01       	movw	r24, r16
    a838:	d0 d9       	rcall	.-3168   	; 0x9bda <nwkRouteFrame>
      } break;
    a83a:	03 c0       	rjmp	.+6      	; 0xa842 <nwkRxTaskHandler+0x4e4>
#endif

      case NWK_RX_STATE_FINISH:
      {
        nwkFrameFree(frame);
    a83c:	c8 01       	movw	r24, r16
    a83e:	0e 94 05 4c 	call	0x980a	; 0x980a <nwkFrameFree>
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    a842:	c8 01       	movw	r24, r16
    a844:	0e 94 0f 4c 	call	0x981e	; 0x981e <nwkFrameNext>
    a848:	8c 01       	movw	r16, r24
    a84a:	00 97       	sbiw	r24, 0x00	; 0
    a84c:	09 f0       	breq	.+2      	; 0xa850 <nwkRxTaskHandler+0x4f2>
    a84e:	c2 cd       	rjmp	.-1148   	; 0xa3d4 <nwkRxTaskHandler+0x76>
    a850:	05 c0       	rjmp	.+10     	; 0xa85c <nwkRxTaskHandler+0x4fe>

  if (nwkRxRejectDuplicate(header))
    return;

#ifdef NWK_ENABLE_MULTICAST
  if (header->nwkFcf.multicast)
    a852:	f8 01       	movw	r30, r16
    a854:	43 85       	ldd	r20, Z+11	; 0x0b
    a856:	43 ff       	sbrs	r20, 3
    a858:	e6 ce       	rjmp	.-564    	; 0xa626 <nwkRxTaskHandler+0x2c8>
    a85a:	7a ce       	rjmp	.-780    	; 0xa550 <nwkRxTaskHandler+0x1f2>
      {
        nwkFrameFree(frame);
      } break;
    }
  }
}
    a85c:	2d 96       	adiw	r28, 0x0d	; 13
    a85e:	0f b6       	in	r0, 0x3f	; 63
    a860:	f8 94       	cli
    a862:	de bf       	out	0x3e, r29	; 62
    a864:	0f be       	out	0x3f, r0	; 63
    a866:	cd bf       	out	0x3d, r28	; 61
    a868:	df 91       	pop	r29
    a86a:	cf 91       	pop	r28
    a86c:	1f 91       	pop	r17
    a86e:	0f 91       	pop	r16
    a870:	ff 90       	pop	r15
    a872:	ef 90       	pop	r14
    a874:	df 90       	pop	r13
    a876:	cf 90       	pop	r12
    a878:	bf 90       	pop	r11
    a87a:	af 90       	pop	r10
    a87c:	9f 90       	pop	r9
    a87e:	8f 90       	pop	r8
    a880:	7f 90       	pop	r7
    a882:	6f 90       	pop	r6
    a884:	5f 90       	pop	r5
    a886:	4f 90       	pop	r4
    a888:	3f 90       	pop	r3
    a88a:	2f 90       	pop	r2
    a88c:	08 95       	ret

0000a88e <nwkSecurityInit>:
/*************************************************************************//**
  @brief Initializes the Security module
*****************************************************************************/
void nwkSecurityInit(void)
{
  nwkSecurityActiveFrames = 0;
    a88e:	10 92 b2 34 	sts	0x34B2, r1
  nwkSecurityActiveFrame = NULL;
    a892:	10 92 b1 34 	sts	0x34B1, r1
    a896:	10 92 b0 34 	sts	0x34B0, r1
    a89a:	08 95       	ret

0000a89c <NWK_SetSecurityKey>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetSecurityKey(uint8_t *key)
{
  memcpy((uint8_t *)nwkIb.key, key, NWK_SECURITY_KEY_SIZE);
    a89c:	20 e1       	ldi	r18, 0x10	; 16
    a89e:	fc 01       	movw	r30, r24
    a8a0:	a9 e2       	ldi	r26, 0x29	; 41
    a8a2:	ba e3       	ldi	r27, 0x3A	; 58
    a8a4:	01 90       	ld	r0, Z+
    a8a6:	0d 92       	st	X+, r0
    a8a8:	2a 95       	dec	r18
    a8aa:	e1 f7       	brne	.-8      	; 0xa8a4 <NWK_SetSecurityKey+0x8>
    a8ac:	08 95       	ret

0000a8ae <nwkSecurityProcess>:

/*************************************************************************//**
*****************************************************************************/
void nwkSecurityProcess(NwkFrame_t *frame, bool encrypt)
{
  if (encrypt)
    a8ae:	66 23       	and	r22, r22
    a8b0:	21 f0       	breq	.+8      	; 0xa8ba <nwkSecurityProcess+0xc>
    frame->state = NWK_SECURITY_STATE_ENCRYPT_PENDING;
    a8b2:	20 e3       	ldi	r18, 0x30	; 48
    a8b4:	fc 01       	movw	r30, r24
    a8b6:	20 83       	st	Z, r18
    a8b8:	03 c0       	rjmp	.+6      	; 0xa8c0 <nwkSecurityProcess+0x12>
  else
    frame->state = NWK_SECURITY_STATE_DECRYPT_PENDING;
    a8ba:	21 e3       	ldi	r18, 0x31	; 49
    a8bc:	fc 01       	movw	r30, r24
    a8be:	20 83       	st	Z, r18
  ++nwkSecurityActiveFrames;
    a8c0:	80 91 b2 34 	lds	r24, 0x34B2
    a8c4:	8f 5f       	subi	r24, 0xFF	; 255
    a8c6:	80 93 b2 34 	sts	0x34B2, r24
    a8ca:	08 95       	ret

0000a8cc <SYS_EncryptConf>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_EncryptConf(void)
{
    a8cc:	cf 93       	push	r28
    a8ce:	df 93       	push	r29
  uint8_t *vector = (uint8_t *)nwkSecurityVector;
  uint8_t *text = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
    a8d0:	c0 91 b0 34 	lds	r28, 0x34B0
    a8d4:	d0 91 b1 34 	lds	r29, 0x34B1
    a8d8:	70 91 ae 34 	lds	r23, 0x34AE
    a8dc:	fe 01       	movw	r30, r28
    a8de:	ef 57       	subi	r30, 0x7F	; 127
    a8e0:	ff 4f       	sbci	r31, 0xFF	; 255
    a8e2:	a0 81       	ld	r26, Z
    a8e4:	b1 81       	ldd	r27, Z+1	; 0x01
    a8e6:	a7 0f       	add	r26, r23
    a8e8:	b1 1d       	adc	r27, r1
  uint8_t block;

  block = (nwkSecuritySize < NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize : NWK_SECURITY_BLOCK_SIZE;
    a8ea:	60 91 af 34 	lds	r22, 0x34AF
    a8ee:	46 2f       	mov	r20, r22
    a8f0:	61 31       	cpi	r22, 0x11	; 17
    a8f2:	08 f0       	brcs	.+2      	; 0xa8f6 <SYS_EncryptConf+0x2a>
    a8f4:	40 e1       	ldi	r20, 0x10	; 16

  for (uint8_t i = 0; i < block; i++)
    a8f6:	44 23       	and	r20, r20
    a8f8:	a9 f0       	breq	.+42     	; 0xa924 <SYS_EncryptConf+0x58>
  {
    text[i] ^= vector[i];

    if (nwkSecurityEncrypt)
    a8fa:	50 91 ad 34 	lds	r21, 0x34AD
    a8fe:	8d e9       	ldi	r24, 0x9D	; 157
    a900:	94 e3       	ldi	r25, 0x34	; 52
    a902:	fc 01       	movw	r30, r24

  block = (nwkSecuritySize < NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize : NWK_SECURITY_BLOCK_SIZE;

  for (uint8_t i = 0; i < block; i++)
  {
    text[i] ^= vector[i];
    a904:	30 81       	ld	r19, Z
    a906:	2c 91       	ld	r18, X
    a908:	23 27       	eor	r18, r19
    a90a:	2d 93       	st	X+, r18

    if (nwkSecurityEncrypt)
    a90c:	55 23       	and	r21, r21
    a90e:	11 f0       	breq	.+4      	; 0xa914 <SYS_EncryptConf+0x48>
      vector[i] = text[i];
    a910:	20 83       	st	Z, r18
    a912:	03 c0       	rjmp	.+6      	; 0xa91a <SYS_EncryptConf+0x4e>
    else
      vector[i] ^= text[i];
    a914:	30 81       	ld	r19, Z
    a916:	23 27       	eor	r18, r19
    a918:	20 83       	st	Z, r18
    a91a:	31 96       	adiw	r30, 0x01	; 1
    a91c:	2e 2f       	mov	r18, r30
    a91e:	28 1b       	sub	r18, r24
  uint8_t *text = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
  uint8_t block;

  block = (nwkSecuritySize < NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize : NWK_SECURITY_BLOCK_SIZE;

  for (uint8_t i = 0; i < block; i++)
    a920:	24 17       	cp	r18, r20
    a922:	80 f3       	brcs	.-32     	; 0xa904 <SYS_EncryptConf+0x38>
      vector[i] = text[i];
    else
      vector[i] ^= text[i];
  }

  nwkSecurityOffset += block;
    a924:	74 0f       	add	r23, r20
    a926:	70 93 ae 34 	sts	0x34AE, r23
  nwkSecuritySize -= block;
    a92a:	64 1b       	sub	r22, r20
    a92c:	60 93 af 34 	sts	0x34AF, r22

  if (nwkSecuritySize > 0)
    a930:	66 23       	and	r22, r22
    a932:	19 f0       	breq	.+6      	; 0xa93a <SYS_EncryptConf+0x6e>
    nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_PROCESS;
    a934:	82 e3       	ldi	r24, 0x32	; 50
    a936:	88 83       	st	Y, r24
    a938:	02 c0       	rjmp	.+4      	; 0xa93e <SYS_EncryptConf+0x72>
  else
    nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_CONFIRM;
    a93a:	84 e3       	ldi	r24, 0x34	; 52
    a93c:	88 83       	st	Y, r24
}
    a93e:	df 91       	pop	r29
    a940:	cf 91       	pop	r28
    a942:	08 95       	ret

0000a944 <nwkSecurityTaskHandler>:

/*************************************************************************//**
  @brief Security Module task handler
*****************************************************************************/
void nwkSecurityTaskHandler(void)
{
    a944:	cf 92       	push	r12
    a946:	df 92       	push	r13
    a948:	ef 92       	push	r14
    a94a:	ff 92       	push	r15
    a94c:	0f 93       	push	r16
    a94e:	1f 93       	push	r17
  NwkFrame_t *frame = NULL;

  if (0 == nwkSecurityActiveFrames)
    a950:	80 91 b2 34 	lds	r24, 0x34B2
    a954:	88 23       	and	r24, r24
    a956:	09 f4       	brne	.+2      	; 0xa95a <nwkSecurityTaskHandler+0x16>
    a958:	e9 c0       	rjmp	.+466    	; 0xab2c <nwkSecurityTaskHandler+0x1e8>
    return;

  if (nwkSecurityActiveFrame)
    a95a:	e0 91 b0 34 	lds	r30, 0x34B0
    a95e:	f0 91 b1 34 	lds	r31, 0x34B1
    a962:	30 97       	sbiw	r30, 0x00	; 0
    a964:	09 f4       	brne	.+2      	; 0xa968 <nwkSecurityTaskHandler+0x24>
    a966:	db c0       	rjmp	.+438    	; 0xab1e <nwkSecurityTaskHandler+0x1da>
  {
    if (NWK_SECURITY_STATE_CONFIRM == nwkSecurityActiveFrame->state)
    a968:	80 81       	ld	r24, Z
    a96a:	84 33       	cpi	r24, 0x34	; 52
    a96c:	09 f0       	breq	.+2      	; 0xa970 <nwkSecurityTaskHandler+0x2c>
    a96e:	5e c0       	rjmp	.+188    	; 0xaa2c <nwkSecurityTaskHandler+0xe8>

/*************************************************************************//**
*****************************************************************************/
static bool nwkSecurityProcessMic(void)
{
  uint8_t *mic = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
    a970:	80 91 ae 34 	lds	r24, 0x34AE
    a974:	df 01       	movw	r26, r30
    a976:	af 57       	subi	r26, 0x7F	; 127
    a978:	bf 4f       	sbci	r27, 0xFF	; 255
    a97a:	0d 90       	ld	r0, X+
    a97c:	bc 91       	ld	r27, X
    a97e:	a0 2d       	mov	r26, r0
    a980:	a8 0f       	add	r26, r24
    a982:	b1 1d       	adc	r27, r1
  uint32_t vmic = nwkSecurityVector[0] ^ nwkSecurityVector[1] ^
    a984:	00 91 a1 34 	lds	r16, 0x34A1
    a988:	10 91 a2 34 	lds	r17, 0x34A2
    a98c:	20 91 a3 34 	lds	r18, 0x34A3
    a990:	30 91 a4 34 	lds	r19, 0x34A4
    a994:	40 91 9d 34 	lds	r20, 0x349D
    a998:	50 91 9e 34 	lds	r21, 0x349E
    a99c:	60 91 9f 34 	lds	r22, 0x349F
    a9a0:	70 91 a0 34 	lds	r23, 0x34A0
    a9a4:	04 27       	eor	r16, r20
    a9a6:	15 27       	eor	r17, r21
    a9a8:	26 27       	eor	r18, r22
    a9aa:	37 27       	eor	r19, r23
    a9ac:	c0 90 a5 34 	lds	r12, 0x34A5
    a9b0:	d0 90 a6 34 	lds	r13, 0x34A6
    a9b4:	e0 90 a7 34 	lds	r14, 0x34A7
    a9b8:	f0 90 a8 34 	lds	r15, 0x34A8
    a9bc:	0c 25       	eor	r16, r12
    a9be:	1d 25       	eor	r17, r13
    a9c0:	2e 25       	eor	r18, r14
    a9c2:	3f 25       	eor	r19, r15
                  nwkSecurityVector[2] ^ nwkSecurityVector[3];
    a9c4:	40 91 a9 34 	lds	r20, 0x34A9
    a9c8:	50 91 aa 34 	lds	r21, 0x34AA
    a9cc:	60 91 ab 34 	lds	r22, 0x34AB
    a9d0:	70 91 ac 34 	lds	r23, 0x34AC
    a9d4:	40 27       	eor	r20, r16
    a9d6:	51 27       	eor	r21, r17
    a9d8:	62 27       	eor	r22, r18
    a9da:	73 27       	eor	r23, r19
  uint32_t tmic;

  if (nwkSecurityEncrypt)
    a9dc:	80 91 ad 34 	lds	r24, 0x34AD
    a9e0:	88 23       	and	r24, r24
    a9e2:	59 f0       	breq	.+22     	; 0xa9fa <nwkSecurityTaskHandler+0xb6>
  {
    memcpy(mic, (uint8_t *)&vmic, NWK_SECURITY_MIC_SIZE);
    a9e4:	4d 93       	st	X+, r20
    a9e6:	5d 93       	st	X+, r21
    a9e8:	6d 93       	st	X+, r22
    a9ea:	7c 93       	st	X, r23
    a9ec:	13 97       	sbiw	r26, 0x03	; 3
    nwkSecurityActiveFrame->size += NWK_SECURITY_MIC_SIZE;
    a9ee:	81 81       	ldd	r24, Z+1	; 0x01
    a9f0:	8c 5f       	subi	r24, 0xFC	; 252
    a9f2:	81 83       	std	Z+1, r24	; 0x01
    if (NWK_SECURITY_STATE_CONFIRM == nwkSecurityActiveFrame->state)
    {
      bool micStatus = nwkSecurityProcessMic();

      if (nwkSecurityEncrypt)
        nwkTxEncryptConf(nwkSecurityActiveFrame);
    a9f4:	cf 01       	movw	r24, r30
    a9f6:	02 d2       	rcall	.+1028   	; 0xadfc <nwkTxEncryptConf>
    a9f8:	0f c0       	rjmp	.+30     	; 0xaa18 <nwkSecurityTaskHandler+0xd4>
    return true;
  }
  else
  {
    memcpy((uint8_t *)&tmic, mic, NWK_SECURITY_MIC_SIZE);
    return vmic == tmic;
    a9fa:	21 e0       	ldi	r18, 0x01	; 1
    a9fc:	8d 91       	ld	r24, X+
    a9fe:	9d 91       	ld	r25, X+
    aa00:	0d 90       	ld	r0, X+
    aa02:	bc 91       	ld	r27, X
    aa04:	a0 2d       	mov	r26, r0
    aa06:	48 17       	cp	r20, r24
    aa08:	59 07       	cpc	r21, r25
    aa0a:	6a 07       	cpc	r22, r26
    aa0c:	7b 07       	cpc	r23, r27
    aa0e:	09 f0       	breq	.+2      	; 0xaa12 <nwkSecurityTaskHandler+0xce>
    aa10:	20 e0       	ldi	r18, 0x00	; 0
      bool micStatus = nwkSecurityProcessMic();

      if (nwkSecurityEncrypt)
        nwkTxEncryptConf(nwkSecurityActiveFrame);
      else
        nwkRxDecryptConf(nwkSecurityActiveFrame, micStatus);
    aa12:	62 2f       	mov	r22, r18
    aa14:	cf 01       	movw	r24, r30
    aa16:	99 dc       	rcall	.-1742   	; 0xa34a <nwkRxDecryptConf>

      nwkSecurityActiveFrame = NULL;
    aa18:	10 92 b1 34 	sts	0x34B1, r1
    aa1c:	10 92 b0 34 	sts	0x34B0, r1
      --nwkSecurityActiveFrames;
    aa20:	80 91 b2 34 	lds	r24, 0x34B2
    aa24:	81 50       	subi	r24, 0x01	; 1
    aa26:	80 93 b2 34 	sts	0x34B2, r24
    aa2a:	80 c0       	rjmp	.+256    	; 0xab2c <nwkSecurityTaskHandler+0x1e8>
    }
    else if (NWK_SECURITY_STATE_PROCESS == nwkSecurityActiveFrame->state)
    aa2c:	82 33       	cpi	r24, 0x32	; 50
    aa2e:	09 f0       	breq	.+2      	; 0xaa32 <nwkSecurityTaskHandler+0xee>
    aa30:	7d c0       	rjmp	.+250    	; 0xab2c <nwkSecurityTaskHandler+0x1e8>
    {
      nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_WAIT;
    aa32:	83 e3       	ldi	r24, 0x33	; 51
    aa34:	80 83       	st	Z, r24
      SYS_EncryptReq((uint8_t *)nwkSecurityVector, (uint8_t *)nwkIb.key);
    aa36:	69 e2       	ldi	r22, 0x29	; 41
    aa38:	7a e3       	ldi	r23, 0x3A	; 58
    aa3a:	8d e9       	ldi	r24, 0x9D	; 157
    aa3c:	94 e3       	ldi	r25, 0x34	; 52
    aa3e:	49 d4       	rcall	.+2194   	; 0xb2d2 <SYS_EncryptReq>
    aa40:	75 c0       	rjmp	.+234    	; 0xab2c <nwkSecurityTaskHandler+0x1e8>
    return;
  }

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_SECURITY_STATE_ENCRYPT_PENDING == frame->state ||
    aa42:	fc 01       	movw	r30, r24
    aa44:	20 81       	ld	r18, Z
    aa46:	20 53       	subi	r18, 0x30	; 48
    aa48:	22 30       	cpi	r18, 0x02	; 2
    aa4a:	08 f0       	brcs	.+2      	; 0xaa4e <nwkSecurityTaskHandler+0x10a>
    aa4c:	6a c0       	rjmp	.+212    	; 0xab22 <nwkSecurityTaskHandler+0x1de>
        NWK_SECURITY_STATE_DECRYPT_PENDING == frame->state)
    {
      nwkSecurityActiveFrame = frame;
    aa4e:	90 93 b1 34 	sts	0x34B1, r25
    aa52:	80 93 b0 34 	sts	0x34B0, r24
*****************************************************************************/
static void nwkSecurityStart(void)
{
  NwkFrameHeader_t *header = &nwkSecurityActiveFrame->header;

  nwkSecurityVector[0] = header->nwkSeq;
    aa56:	44 85       	ldd	r20, Z+12	; 0x0c
    aa58:	50 e0       	ldi	r21, 0x00	; 0
    aa5a:	60 e0       	ldi	r22, 0x00	; 0
    aa5c:	70 e0       	ldi	r23, 0x00	; 0
    aa5e:	40 93 9d 34 	sts	0x349D, r20
    aa62:	50 93 9e 34 	sts	0x349E, r21
    aa66:	60 93 9f 34 	sts	0x349F, r22
    aa6a:	70 93 a0 34 	sts	0x34A0, r23
  nwkSecurityVector[1] = ((uint32_t)header->nwkDstAddr << 16) | header->nwkDstEndpoint;
    aa6e:	47 85       	ldd	r20, Z+15	; 0x0f
    aa70:	50 89       	ldd	r21, Z+16	; 0x10
    aa72:	60 e0       	ldi	r22, 0x00	; 0
    aa74:	70 e0       	ldi	r23, 0x00	; 0
    aa76:	ba 01       	movw	r22, r20
    aa78:	55 27       	eor	r21, r21
    aa7a:	44 27       	eor	r20, r20
    aa7c:	21 89       	ldd	r18, Z+17	; 0x11
    aa7e:	22 95       	swap	r18
    aa80:	2f 70       	andi	r18, 0x0F	; 15
    aa82:	42 2b       	or	r20, r18
    aa84:	40 93 a1 34 	sts	0x34A1, r20
    aa88:	50 93 a2 34 	sts	0x34A2, r21
    aa8c:	60 93 a3 34 	sts	0x34A3, r22
    aa90:	70 93 a4 34 	sts	0x34A4, r23
  nwkSecurityVector[2] = ((uint32_t)header->nwkSrcAddr << 16) | header->nwkSrcEndpoint;
    aa94:	45 85       	ldd	r20, Z+13	; 0x0d
    aa96:	56 85       	ldd	r21, Z+14	; 0x0e
    aa98:	60 e0       	ldi	r22, 0x00	; 0
    aa9a:	70 e0       	ldi	r23, 0x00	; 0
    aa9c:	ba 01       	movw	r22, r20
    aa9e:	55 27       	eor	r21, r21
    aaa0:	44 27       	eor	r20, r20
    aaa2:	21 89       	ldd	r18, Z+17	; 0x11
    aaa4:	2f 70       	andi	r18, 0x0F	; 15
    aaa6:	42 2b       	or	r20, r18
    aaa8:	40 93 a5 34 	sts	0x34A5, r20
    aaac:	50 93 a6 34 	sts	0x34A6, r21
    aab0:	60 93 a7 34 	sts	0x34A7, r22
    aab4:	70 93 a8 34 	sts	0x34A8, r23
  nwkSecurityVector[3] = ((uint32_t)header->macDstPanId << 16) | *(uint8_t *)&header->nwkFcf;
    aab8:	23 85       	ldd	r18, Z+11	; 0x0b
    aaba:	45 81       	ldd	r20, Z+5	; 0x05
    aabc:	56 81       	ldd	r21, Z+6	; 0x06
    aabe:	60 e0       	ldi	r22, 0x00	; 0
    aac0:	70 e0       	ldi	r23, 0x00	; 0
    aac2:	ba 01       	movw	r22, r20
    aac4:	55 27       	eor	r21, r21
    aac6:	44 27       	eor	r20, r20
    aac8:	42 2b       	or	r20, r18
    aaca:	40 93 a9 34 	sts	0x34A9, r20
    aace:	50 93 aa 34 	sts	0x34AA, r21
    aad2:	60 93 ab 34 	sts	0x34AB, r22
    aad6:	70 93 ac 34 	sts	0x34AC, r23

  if (NWK_SECURITY_STATE_DECRYPT_PENDING == nwkSecurityActiveFrame->state)
    aada:	20 81       	ld	r18, Z
    aadc:	21 33       	cpi	r18, 0x31	; 49
    aade:	19 f4       	brne	.+6      	; 0xaae6 <nwkSecurityTaskHandler+0x1a2>
    nwkSecurityActiveFrame->size -= NWK_SECURITY_MIC_SIZE;
    aae0:	21 81       	ldd	r18, Z+1	; 0x01
    aae2:	24 50       	subi	r18, 0x04	; 4
    aae4:	21 83       	std	Z+1, r18	; 0x01
    aae6:	fc 01       	movw	r30, r24
    aae8:	ef 57       	subi	r30, 0x7F	; 127
    aaea:	ff 4f       	sbci	r31, 0xFF	; 255
    aaec:	40 81       	ld	r20, Z
    aaee:	51 81       	ldd	r21, Z+1	; 0x01
    aaf0:	9c 01       	movw	r18, r24
    aaf2:	2e 5f       	subi	r18, 0xFE	; 254
    aaf4:	3f 4f       	sbci	r19, 0xFF	; 255
    aaf6:	24 1b       	sub	r18, r20
    aaf8:	35 0b       	sbc	r19, r21
    aafa:	fc 01       	movw	r30, r24
    aafc:	31 81       	ldd	r19, Z+1	; 0x01
    aafe:	23 0f       	add	r18, r19

  nwkSecuritySize = nwkFramePayloadSize(nwkSecurityActiveFrame);
    ab00:	20 93 af 34 	sts	0x34AF, r18
  nwkSecurityOffset = 0;
    ab04:	10 92 ae 34 	sts	0x34AE, r1
  nwkSecurityEncrypt = (NWK_SECURITY_STATE_ENCRYPT_PENDING == nwkSecurityActiveFrame->state);
    ab08:	21 e0       	ldi	r18, 0x01	; 1
    ab0a:	30 81       	ld	r19, Z
    ab0c:	30 33       	cpi	r19, 0x30	; 48
    ab0e:	09 f0       	breq	.+2      	; 0xab12 <nwkSecurityTaskHandler+0x1ce>
    ab10:	20 e0       	ldi	r18, 0x00	; 0
    ab12:	20 93 ad 34 	sts	0x34AD, r18

  nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_PROCESS;
    ab16:	22 e3       	ldi	r18, 0x32	; 50
    ab18:	fc 01       	movw	r30, r24
    ab1a:	20 83       	st	Z, r18
    ab1c:	07 c0       	rjmp	.+14     	; 0xab2c <nwkSecurityTaskHandler+0x1e8>
  NwkFrame_t *frame = NULL;

  if (0 == nwkSecurityActiveFrames)
    return;

  if (nwkSecurityActiveFrame)
    ab1e:	80 e0       	ldi	r24, 0x00	; 0
    ab20:	90 e0       	ldi	r25, 0x00	; 0
    }

    return;
  }

  while (NULL != (frame = nwkFrameNext(frame)))
    ab22:	0e 94 0f 4c 	call	0x981e	; 0x981e <nwkFrameNext>
    ab26:	00 97       	sbiw	r24, 0x00	; 0
    ab28:	09 f0       	breq	.+2      	; 0xab2c <nwkSecurityTaskHandler+0x1e8>
    ab2a:	8b cf       	rjmp	.-234    	; 0xaa42 <nwkSecurityTaskHandler+0xfe>
      nwkSecurityActiveFrame = frame;
      nwkSecurityStart();
      return;
    }
  }
}
    ab2c:	1f 91       	pop	r17
    ab2e:	0f 91       	pop	r16
    ab30:	ff 90       	pop	r15
    ab32:	ef 90       	pop	r14
    ab34:	df 90       	pop	r13
    ab36:	cf 90       	pop	r12
    ab38:	08 95       	ret

0000ab3a <nwkTxDelayTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
    ab3a:	ff 92       	push	r15
    ab3c:	0f 93       	push	r16
    ab3e:	1f 93       	push	r17
    ab40:	cf 93       	push	r28
    ab42:	df 93       	push	r29
    ab44:	ec 01       	movw	r28, r24
  NwkFrame_t *frame = NULL;
  bool restart = false;
    ab46:	10 e0       	ldi	r17, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
    ab48:	80 e0       	ldi	r24, 0x00	; 0
    ab4a:	90 e0       	ldi	r25, 0x00	; 0

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
    {
      restart = true;
    ab4c:	01 e0       	ldi	r16, 0x01	; 1

      if (0 == --frame->tx.timeout)
        frame->state = NWK_TX_STATE_SEND;
    ab4e:	0f 2e       	mov	r0, r31
    ab50:	f3 e1       	ldi	r31, 0x13	; 19
    ab52:	ff 2e       	mov	r15, r31
    ab54:	f0 2d       	mov	r31, r0
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    ab56:	13 c0       	rjmp	.+38     	; 0xab7e <nwkTxDelayTimerHandler+0x44>
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
    ab58:	fc 01       	movw	r30, r24
    ab5a:	20 81       	ld	r18, Z
    ab5c:	21 31       	cpi	r18, 0x11	; 17
    ab5e:	79 f4       	brne	.+30     	; 0xab7e <nwkTxDelayTimerHandler+0x44>
    {
      restart = true;

      if (0 == --frame->tx.timeout)
    ab60:	ec 57       	subi	r30, 0x7C	; 124
    ab62:	ff 4f       	sbci	r31, 0xFF	; 255
    ab64:	20 81       	ld	r18, Z
    ab66:	31 81       	ldd	r19, Z+1	; 0x01
    ab68:	21 50       	subi	r18, 0x01	; 1
    ab6a:	31 09       	sbc	r19, r1
    ab6c:	31 83       	std	Z+1, r19	; 0x01
    ab6e:	20 83       	st	Z, r18
    ab70:	23 2b       	or	r18, r19
    ab72:	21 f4       	brne	.+8      	; 0xab7c <nwkTxDelayTimerHandler+0x42>
        frame->state = NWK_TX_STATE_SEND;
    ab74:	fc 01       	movw	r30, r24
    ab76:	f0 82       	st	Z, r15

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
    {
      restart = true;
    ab78:	10 2f       	mov	r17, r16
    ab7a:	01 c0       	rjmp	.+2      	; 0xab7e <nwkTxDelayTimerHandler+0x44>
    ab7c:	10 2f       	mov	r17, r16
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    ab7e:	0e 94 0f 4c 	call	0x981e	; 0x981e <nwkFrameNext>
    ab82:	00 97       	sbiw	r24, 0x00	; 0
    ab84:	49 f7       	brne	.-46     	; 0xab58 <nwkTxDelayTimerHandler+0x1e>
      if (0 == --frame->tx.timeout)
        frame->state = NWK_TX_STATE_SEND;
    }
  }

  if (restart)
    ab86:	11 23       	and	r17, r17
    ab88:	11 f0       	breq	.+4      	; 0xab8e <nwkTxDelayTimerHandler+0x54>
    SYS_TimerStart(timer);
    ab8a:	ce 01       	movw	r24, r28
    ab8c:	68 d4       	rcall	.+2256   	; 0xb45e <SYS_TimerStart>
}
    ab8e:	df 91       	pop	r29
    ab90:	cf 91       	pop	r28
    ab92:	1f 91       	pop	r17
    ab94:	0f 91       	pop	r16
    ab96:	ff 90       	pop	r15
    ab98:	08 95       	ret

0000ab9a <nwkTxAckWaitTimerHandler>:
}

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
    ab9a:	ef 92       	push	r14
    ab9c:	ff 92       	push	r15
    ab9e:	0f 93       	push	r16
    aba0:	1f 93       	push	r17
    aba2:	cf 93       	push	r28
    aba4:	df 93       	push	r29
    aba6:	ec 01       	movw	r28, r24
  NwkFrame_t *frame = NULL;
  bool restart = false;
    aba8:	10 e0       	ldi	r17, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
    abaa:	80 e0       	ldi	r24, 0x00	; 0
    abac:	90 e0       	ldi	r25, 0x00	; 0

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
    {
      restart = true;
    abae:	01 e0       	ldi	r16, 0x01	; 1

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
    abb0:	0f 2e       	mov	r0, r31
    abb2:	f7 e1       	ldi	r31, 0x17	; 23
    abb4:	ef 2e       	mov	r14, r31
    abb6:	f0 2d       	mov	r31, r0
  frame->tx.status = status;
    abb8:	68 94       	set
    abba:	ff 24       	eor	r15, r15
    abbc:	f4 f8       	bld	r15, 4
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    abbe:	16 c0       	rjmp	.+44     	; 0xabec <nwkTxAckWaitTimerHandler+0x52>
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
    abc0:	fc 01       	movw	r30, r24
    abc2:	20 81       	ld	r18, Z
    abc4:	26 31       	cpi	r18, 0x16	; 22
    abc6:	91 f4       	brne	.+36     	; 0xabec <nwkTxAckWaitTimerHandler+0x52>
    {
      restart = true;

      if (0 == --frame->tx.timeout)
    abc8:	ec 57       	subi	r30, 0x7C	; 124
    abca:	ff 4f       	sbci	r31, 0xFF	; 255
    abcc:	20 81       	ld	r18, Z
    abce:	31 81       	ldd	r19, Z+1	; 0x01
    abd0:	21 50       	subi	r18, 0x01	; 1
    abd2:	31 09       	sbc	r19, r1
    abd4:	31 83       	std	Z+1, r19	; 0x01
    abd6:	20 83       	st	Z, r18
    abd8:	23 2b       	or	r18, r19
    abda:	39 f4       	brne	.+14     	; 0xabea <nwkTxAckWaitTimerHandler+0x50>

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
    abdc:	fc 01       	movw	r30, r24
    abde:	e0 82       	st	Z, r14
  frame->tx.status = status;
    abe0:	ed 57       	subi	r30, 0x7D	; 125
    abe2:	ff 4f       	sbci	r31, 0xFF	; 255
    abe4:	f0 82       	st	Z, r15

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
    {
      restart = true;
    abe6:	10 2f       	mov	r17, r16
    abe8:	01 c0       	rjmp	.+2      	; 0xabec <nwkTxAckWaitTimerHandler+0x52>
    abea:	10 2f       	mov	r17, r16
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    abec:	0e 94 0f 4c 	call	0x981e	; 0x981e <nwkFrameNext>
    abf0:	00 97       	sbiw	r24, 0x00	; 0
    abf2:	31 f7       	brne	.-52     	; 0xabc0 <nwkTxAckWaitTimerHandler+0x26>
      if (0 == --frame->tx.timeout)
        nwkTxConfirm(frame, NWK_NO_ACK_STATUS);
    }
  }

  if (restart)
    abf4:	11 23       	and	r17, r17
    abf6:	11 f0       	breq	.+4      	; 0xabfc <nwkTxAckWaitTimerHandler+0x62>
    SYS_TimerStart(timer);
    abf8:	ce 01       	movw	r24, r28
    abfa:	31 d4       	rcall	.+2146   	; 0xb45e <SYS_TimerStart>
}
    abfc:	df 91       	pop	r29
    abfe:	cf 91       	pop	r28
    ac00:	1f 91       	pop	r17
    ac02:	0f 91       	pop	r16
    ac04:	ff 90       	pop	r15
    ac06:	ef 90       	pop	r14
    ac08:	08 95       	ret

0000ac0a <nwkTxInit>:
/*************************************************************************//**
  @brief Initializes the Tx module
*****************************************************************************/
void nwkTxInit(void)
{
  nwkTxPhyActiveFrame = NULL;
    ac0a:	10 92 ce 34 	sts	0x34CE, r1
    ac0e:	10 92 cd 34 	sts	0x34CD, r1

  nwkTxAckWaitTimer.interval = NWK_TX_ACK_WAIT_TIMER_INTERVAL;
    ac12:	82 e3       	ldi	r24, 0x32	; 50
    ac14:	90 e0       	ldi	r25, 0x00	; 0
    ac16:	a0 e0       	ldi	r26, 0x00	; 0
    ac18:	b0 e0       	ldi	r27, 0x00	; 0
    ac1a:	80 93 c6 34 	sts	0x34C6, r24
    ac1e:	90 93 c7 34 	sts	0x34C7, r25
    ac22:	a0 93 c8 34 	sts	0x34C8, r26
    ac26:	b0 93 c9 34 	sts	0x34C9, r27
  nwkTxAckWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
    ac2a:	10 92 ca 34 	sts	0x34CA, r1
  nwkTxAckWaitTimer.handler = nwkTxAckWaitTimerHandler;
    ac2e:	8d ec       	ldi	r24, 0xCD	; 205
    ac30:	95 e5       	ldi	r25, 0x55	; 85
    ac32:	90 93 cc 34 	sts	0x34CC, r25
    ac36:	80 93 cb 34 	sts	0x34CB, r24

  nwkTxDelayTimer.interval = NWK_TX_DELAY_TIMER_INTERVAL;
    ac3a:	8a e0       	ldi	r24, 0x0A	; 10
    ac3c:	90 e0       	ldi	r25, 0x00	; 0
    ac3e:	a0 e0       	ldi	r26, 0x00	; 0
    ac40:	b0 e0       	ldi	r27, 0x00	; 0
    ac42:	80 93 b9 34 	sts	0x34B9, r24
    ac46:	90 93 ba 34 	sts	0x34BA, r25
    ac4a:	a0 93 bb 34 	sts	0x34BB, r26
    ac4e:	b0 93 bc 34 	sts	0x34BC, r27
  nwkTxDelayTimer.mode = SYS_TIMER_INTERVAL_MODE;
    ac52:	10 92 bd 34 	sts	0x34BD, r1
  nwkTxDelayTimer.handler = nwkTxDelayTimerHandler;
    ac56:	8d e9       	ldi	r24, 0x9D	; 157
    ac58:	95 e5       	ldi	r25, 0x55	; 85
    ac5a:	90 93 bf 34 	sts	0x34BF, r25
    ac5e:	80 93 be 34 	sts	0x34BE, r24
    ac62:	08 95       	ret

0000ac64 <nwkTxFrame>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkTxFrame(NwkFrame_t *frame)
{
    ac64:	cf 93       	push	r28
    ac66:	df 93       	push	r29
    ac68:	ec 01       	movw	r28, r24
  NwkFrameHeader_t *header = &frame->header;

  if (frame->tx.control & NWK_TX_CONTROL_ROUTING)
    ac6a:	fc 01       	movw	r30, r24
    ac6c:	ea 57       	subi	r30, 0x7A	; 122
    ac6e:	ff 4f       	sbci	r31, 0xFF	; 255
    ac70:	20 81       	ld	r18, Z
    ac72:	21 ff       	sbrs	r18, 1
    ac74:	03 c0       	rjmp	.+6      	; 0xac7c <nwkTxFrame+0x18>
  {
    frame->state = NWK_TX_STATE_DELAY;
    ac76:	82 e1       	ldi	r24, 0x12	; 18
    ac78:	88 83       	st	Y, r24
    ac7a:	08 c0       	rjmp	.+16     	; 0xac8c <nwkTxFrame+0x28>
  }
  else
  {
  #ifdef NWK_ENABLE_SECURITY
    if (header->nwkFcf.security)
    ac7c:	8b 85       	ldd	r24, Y+11	; 0x0b
    ac7e:	81 ff       	sbrs	r24, 1
    ac80:	03 c0       	rjmp	.+6      	; 0xac88 <nwkTxFrame+0x24>
      frame->state = NWK_TX_STATE_ENCRYPT;
    ac82:	80 e1       	ldi	r24, 0x10	; 16
    ac84:	88 83       	st	Y, r24
    ac86:	02 c0       	rjmp	.+4      	; 0xac8c <nwkTxFrame+0x28>
    else
  #endif
      frame->state = NWK_TX_STATE_DELAY;
    ac88:	82 e1       	ldi	r24, 0x12	; 18
    ac8a:	88 83       	st	Y, r24
  }

  frame->tx.status = NWK_SUCCESS_STATUS;
    ac8c:	fe 01       	movw	r30, r28
    ac8e:	ed 57       	subi	r30, 0x7D	; 125
    ac90:	ff 4f       	sbci	r31, 0xFF	; 255
    ac92:	10 82       	st	Z, r1

  if (frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID)
    ac94:	20 ff       	sbrs	r18, 0
    ac96:	05 c0       	rjmp	.+10     	; 0xaca2 <nwkTxFrame+0x3e>
    header->macDstPanId = NWK_BROADCAST_PANID;
    ac98:	8f ef       	ldi	r24, 0xFF	; 255
    ac9a:	9f ef       	ldi	r25, 0xFF	; 255
    ac9c:	9e 83       	std	Y+6, r25	; 0x06
    ac9e:	8d 83       	std	Y+5, r24	; 0x05
    aca0:	06 c0       	rjmp	.+12     	; 0xacae <nwkTxFrame+0x4a>
  else
    header->macDstPanId = nwkIb.panId;
    aca2:	80 91 05 3a 	lds	r24, 0x3A05
    aca6:	90 91 06 3a 	lds	r25, 0x3A06
    acaa:	9e 83       	std	Y+6, r25	; 0x06
    acac:	8d 83       	std	Y+5, r24	; 0x05
    acae:	25 70       	andi	r18, 0x05	; 5

#ifdef NWK_ENABLE_ROUTING
  if (0 == (frame->tx.control & NWK_TX_CONTROL_DIRECT_LINK) && 
    acb0:	21 f4       	brne	.+8      	; 0xacba <nwkTxFrame+0x56>
      0 == (frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID))
    nwkRoutePrepareTx(frame);
    acb2:	ce 01       	movw	r24, r28
    acb4:	0e 94 b9 4d 	call	0x9b72	; 0x9b72 <nwkRoutePrepareTx>
    acb8:	04 c0       	rjmp	.+8      	; 0xacc2 <nwkTxFrame+0x5e>
  else
#endif
    header->macDstAddr = header->nwkDstAddr;
    acba:	8f 85       	ldd	r24, Y+15	; 0x0f
    acbc:	98 89       	ldd	r25, Y+16	; 0x10
    acbe:	98 87       	std	Y+8, r25	; 0x08
    acc0:	8f 83       	std	Y+7, r24	; 0x07

  header->macSrcAddr = nwkIb.addr;
    acc2:	80 91 03 3a 	lds	r24, 0x3A03
    acc6:	90 91 04 3a 	lds	r25, 0x3A04
    acca:	9a 87       	std	Y+10, r25	; 0x0a
    accc:	89 87       	std	Y+9, r24	; 0x09
  header->macSeq = ++nwkIb.macSeqNum;
    acce:	e8 e0       	ldi	r30, 0x08	; 8
    acd0:	fa e3       	ldi	r31, 0x3A	; 58
    acd2:	80 81       	ld	r24, Z
    acd4:	8f 5f       	subi	r24, 0xFF	; 255
    acd6:	80 83       	st	Z, r24
    acd8:	8c 83       	std	Y+4, r24	; 0x04

  if (NWK_BROADCAST_ADDR == header->macDstAddr)
    acda:	8f 81       	ldd	r24, Y+7	; 0x07
    acdc:	98 85       	ldd	r25, Y+8	; 0x08
    acde:	01 96       	adiw	r24, 0x01	; 1
    ace0:	71 f4       	brne	.+28     	; 0xacfe <nwkTxFrame+0x9a>
  {
    header->macFcf = 0x8841;
    ace2:	81 e4       	ldi	r24, 0x41	; 65
    ace4:	98 e8       	ldi	r25, 0x88	; 136
    ace6:	9b 83       	std	Y+3, r25	; 0x03
    ace8:	8a 83       	std	Y+2, r24	; 0x02
    frame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    acea:	0e 94 f2 b2 	call	0x165e4	; 0x165e4 <rand>
    acee:	cc 57       	subi	r28, 0x7C	; 124
    acf0:	df 4f       	sbci	r29, 0xFF	; 255
    acf2:	87 70       	andi	r24, 0x07	; 7
    acf4:	99 27       	eor	r25, r25
    acf6:	01 96       	adiw	r24, 0x01	; 1
    acf8:	99 83       	std	Y+1, r25	; 0x01
    acfa:	88 83       	st	Y, r24
    acfc:	08 c0       	rjmp	.+16     	; 0xad0e <nwkTxFrame+0xaa>
  }
  else
  {
    header->macFcf = 0x8861;
    acfe:	81 e6       	ldi	r24, 0x61	; 97
    ad00:	98 e8       	ldi	r25, 0x88	; 136
    ad02:	9b 83       	std	Y+3, r25	; 0x03
    ad04:	8a 83       	std	Y+2, r24	; 0x02
    frame->tx.timeout = 0;
    ad06:	cc 57       	subi	r28, 0x7C	; 124
    ad08:	df 4f       	sbci	r29, 0xFF	; 255
    ad0a:	19 82       	std	Y+1, r1	; 0x01
    ad0c:	18 82       	st	Y, r1
  }
}
    ad0e:	df 91       	pop	r29
    ad10:	cf 91       	pop	r28
    ad12:	08 95       	ret

0000ad14 <nwkTxBroadcastFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxBroadcastFrame(NwkFrame_t *frame)
{
    ad14:	0f 93       	push	r16
    ad16:	1f 93       	push	r17
    ad18:	cf 93       	push	r28
    ad1a:	df 93       	push	r29
    ad1c:	8c 01       	movw	r16, r24
  NwkFrame_t *newFrame;

  if (NULL == (newFrame = nwkFrameAlloc()))
    ad1e:	0e 94 ce 4b 	call	0x979c	; 0x979c <nwkFrameAlloc>
    ad22:	ec 01       	movw	r28, r24
    ad24:	00 97       	sbiw	r24, 0x00	; 0
    ad26:	c9 f1       	breq	.+114    	; 0xad9a <nwkTxBroadcastFrame+0x86>
    return;

  newFrame->state = NWK_TX_STATE_DELAY;
    ad28:	82 e1       	ldi	r24, 0x12	; 18
    ad2a:	88 83       	st	Y, r24
  newFrame->size = frame->size;
    ad2c:	f8 01       	movw	r30, r16
    ad2e:	81 81       	ldd	r24, Z+1	; 0x01
    ad30:	89 83       	std	Y+1, r24	; 0x01
  newFrame->tx.status = NWK_SUCCESS_STATUS;
    ad32:	fe 01       	movw	r30, r28
    ad34:	ed 57       	subi	r30, 0x7D	; 125
    ad36:	ff 4f       	sbci	r31, 0xFF	; 255
    ad38:	10 82       	st	Z, r1
  newFrame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    ad3a:	0e 94 f2 b2 	call	0x165e4	; 0x165e4 <rand>
    ad3e:	fe 01       	movw	r30, r28
    ad40:	ec 57       	subi	r30, 0x7C	; 124
    ad42:	ff 4f       	sbci	r31, 0xFF	; 255
    ad44:	87 70       	andi	r24, 0x07	; 7
    ad46:	99 27       	eor	r25, r25
    ad48:	01 96       	adiw	r24, 0x01	; 1
    ad4a:	91 83       	std	Z+1, r25	; 0x01
    ad4c:	80 83       	st	Z, r24
  newFrame->tx.confirm = NULL;
    ad4e:	33 96       	adiw	r30, 0x03	; 3
    ad50:	11 82       	std	Z+1, r1	; 0x01
    ad52:	10 82       	st	Z, r1
  memcpy(newFrame->data, frame->data, frame->size);
    ad54:	f8 01       	movw	r30, r16
    ad56:	41 81       	ldd	r20, Z+1	; 0x01
    ad58:	50 e0       	ldi	r21, 0x00	; 0
    ad5a:	b8 01       	movw	r22, r16
    ad5c:	6e 5f       	subi	r22, 0xFE	; 254
    ad5e:	7f 4f       	sbci	r23, 0xFF	; 255
    ad60:	ce 01       	movw	r24, r28
    ad62:	02 96       	adiw	r24, 0x02	; 2
    ad64:	0e 94 42 b5 	call	0x16a84	; 0x16a84 <memcpy>

  newFrame->header.macFcf = 0x8841;
    ad68:	81 e4       	ldi	r24, 0x41	; 65
    ad6a:	98 e8       	ldi	r25, 0x88	; 136
    ad6c:	9b 83       	std	Y+3, r25	; 0x03
    ad6e:	8a 83       	std	Y+2, r24	; 0x02
  newFrame->header.macDstAddr = NWK_BROADCAST_ADDR;
    ad70:	8f ef       	ldi	r24, 0xFF	; 255
    ad72:	9f ef       	ldi	r25, 0xFF	; 255
    ad74:	98 87       	std	Y+8, r25	; 0x08
    ad76:	8f 83       	std	Y+7, r24	; 0x07
  newFrame->header.macDstPanId = frame->header.macDstPanId;
    ad78:	f8 01       	movw	r30, r16
    ad7a:	85 81       	ldd	r24, Z+5	; 0x05
    ad7c:	96 81       	ldd	r25, Z+6	; 0x06
    ad7e:	9e 83       	std	Y+6, r25	; 0x06
    ad80:	8d 83       	std	Y+5, r24	; 0x05
  newFrame->header.macSrcAddr = nwkIb.addr;
    ad82:	80 91 03 3a 	lds	r24, 0x3A03
    ad86:	90 91 04 3a 	lds	r25, 0x3A04
    ad8a:	9a 87       	std	Y+10, r25	; 0x0a
    ad8c:	89 87       	std	Y+9, r24	; 0x09
  newFrame->header.macSeq = ++nwkIb.macSeqNum;
    ad8e:	e8 e0       	ldi	r30, 0x08	; 8
    ad90:	fa e3       	ldi	r31, 0x3A	; 58
    ad92:	80 81       	ld	r24, Z
    ad94:	8f 5f       	subi	r24, 0xFF	; 255
    ad96:	80 83       	st	Z, r24
    ad98:	8c 83       	std	Y+4, r24	; 0x04
}
    ad9a:	df 91       	pop	r29
    ad9c:	cf 91       	pop	r28
    ad9e:	1f 91       	pop	r17
    ada0:	0f 91       	pop	r16
    ada2:	08 95       	ret

0000ada4 <nwkTxAckReceived>:

/*************************************************************************//**
*****************************************************************************/
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
    ada4:	cf 93       	push	r28
    ada6:	df 93       	push	r29
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
    ada8:	fc 01       	movw	r30, r24
    adaa:	c7 81       	ldd	r28, Z+7	; 0x07
    adac:	d0 85       	ldd	r29, Z+8	; 0x08
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    adae:	81 85       	ldd	r24, Z+9	; 0x09
    adb0:	83 30       	cpi	r24, 0x03	; 3
    adb2:	c9 f4       	brne	.+50     	; 0xade6 <nwkTxAckReceived+0x42>
    adb4:	10 c0       	rjmp	.+32     	; 0xadd6 <nwkTxAckReceived+0x32>
    return false;

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state && frame->header.nwkSeq == command->seq)
    adb6:	fc 01       	movw	r30, r24
    adb8:	20 81       	ld	r18, Z
    adba:	26 31       	cpi	r18, 0x16	; 22
    adbc:	71 f4       	brne	.+28     	; 0xadda <nwkTxAckReceived+0x36>
    adbe:	34 85       	ldd	r19, Z+12	; 0x0c
    adc0:	29 81       	ldd	r18, Y+1	; 0x01
    adc2:	32 13       	cpse	r19, r18
    adc4:	0a c0       	rjmp	.+20     	; 0xadda <nwkTxAckReceived+0x36>
    {
      frame->state = NWK_TX_STATE_CONFIRM;
    adc6:	27 e1       	ldi	r18, 0x17	; 23
    adc8:	20 83       	st	Z, r18
      frame->tx.control = command->control;
    adca:	2a 81       	ldd	r18, Y+2	; 0x02
    adcc:	ea 57       	subi	r30, 0x7A	; 122
    adce:	ff 4f       	sbci	r31, 0xFF	; 255
    add0:	20 83       	st	Z, r18
      return true;
    add2:	81 e0       	ldi	r24, 0x01	; 1
    add4:	09 c0       	rjmp	.+18     	; 0xade8 <nwkTxAckReceived+0x44>
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    add6:	80 e0       	ldi	r24, 0x00	; 0
    add8:	90 e0       	ldi	r25, 0x00	; 0
    return false;

  while (NULL != (frame = nwkFrameNext(frame)))
    adda:	0e 94 0f 4c 	call	0x981e	; 0x981e <nwkFrameNext>
    adde:	00 97       	sbiw	r24, 0x00	; 0
    ade0:	51 f7       	brne	.-44     	; 0xadb6 <nwkTxAckReceived+0x12>
      frame->tx.control = command->control;
      return true;
    }
  }

  return false;
    ade2:	80 e0       	ldi	r24, 0x00	; 0
    ade4:	01 c0       	rjmp	.+2      	; 0xade8 <nwkTxAckReceived+0x44>
{
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    return false;
    ade6:	80 e0       	ldi	r24, 0x00	; 0
      return true;
    }
  }

  return false;
}
    ade8:	df 91       	pop	r29
    adea:	cf 91       	pop	r28
    adec:	08 95       	ret

0000adee <nwkTxConfirm>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
    adee:	27 e1       	ldi	r18, 0x17	; 23
    adf0:	fc 01       	movw	r30, r24
    adf2:	20 83       	st	Z, r18
  frame->tx.status = status;
    adf4:	ed 57       	subi	r30, 0x7D	; 125
    adf6:	ff 4f       	sbci	r31, 0xFF	; 255
    adf8:	60 83       	st	Z, r22
    adfa:	08 95       	ret

0000adfc <nwkTxEncryptConf>:
#ifdef NWK_ENABLE_SECURITY
/*************************************************************************//**
*****************************************************************************/
void nwkTxEncryptConf(NwkFrame_t *frame)
{
  frame->state = NWK_TX_STATE_DELAY;
    adfc:	22 e1       	ldi	r18, 0x12	; 18
    adfe:	fc 01       	movw	r30, r24
    ae00:	20 83       	st	Z, r18
    ae02:	08 95       	ret

0000ae04 <PHY_DataConf>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    ae04:	e0 91 cd 34 	lds	r30, 0x34CD
    ae08:	f0 91 ce 34 	lds	r31, 0x34CE

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
    ae0c:	81 30       	cpi	r24, 0x01	; 1
    ae0e:	51 f0       	breq	.+20     	; 0xae24 <PHY_DataConf+0x20>
    ae10:	18 f0       	brcs	.+6      	; 0xae18 <PHY_DataConf+0x14>
    ae12:	82 30       	cpi	r24, 0x02	; 2
    ae14:	19 f0       	breq	.+6      	; 0xae1c <PHY_DataConf+0x18>
    ae16:	04 c0       	rjmp	.+8      	; 0xae20 <PHY_DataConf+0x1c>
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;
    ae18:	80 e0       	ldi	r24, 0x00	; 0
    ae1a:	05 c0       	rjmp	.+10     	; 0xae26 <PHY_DataConf+0x22>

    case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
      return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;

    case PHY_STATUS_NO_ACK:
      return NWK_PHY_NO_ACK_STATUS;
    ae1c:	81 e2       	ldi	r24, 0x21	; 33
    ae1e:	03 c0       	rjmp	.+6      	; 0xae26 <PHY_DataConf+0x22>

    default:
      return NWK_ERROR_STATUS;
    ae20:	81 e0       	ldi	r24, 0x01	; 1
    ae22:	01 c0       	rjmp	.+2      	; 0xae26 <PHY_DataConf+0x22>
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;

    case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
      return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    ae24:	80 e2       	ldi	r24, 0x20	; 32

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    ae26:	df 01       	movw	r26, r30
    ae28:	ad 57       	subi	r26, 0x7D	; 125
    ae2a:	bf 4f       	sbci	r27, 0xFF	; 255
    ae2c:	8c 93       	st	X, r24
  nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    ae2e:	85 e1       	ldi	r24, 0x15	; 21
    ae30:	80 83       	st	Z, r24
  nwkTxPhyActiveFrame = NULL;
    ae32:	10 92 ce 34 	sts	0x34CE, r1
    ae36:	10 92 cd 34 	sts	0x34CD, r1
  nwkIb.lock--;
    ae3a:	e9 e3       	ldi	r30, 0x39	; 57
    ae3c:	fa e3       	ldi	r31, 0x3A	; 58
    ae3e:	80 81       	ld	r24, Z
    ae40:	91 81       	ldd	r25, Z+1	; 0x01
    ae42:	01 97       	sbiw	r24, 0x01	; 1
    ae44:	91 83       	std	Z+1, r25	; 0x01
    ae46:	80 83       	st	Z, r24
    ae48:	08 95       	ret

0000ae4a <nwkTxTaskHandler>:

/*************************************************************************//**
  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    ae4a:	7f 92       	push	r7
    ae4c:	8f 92       	push	r8
    ae4e:	9f 92       	push	r9
    ae50:	af 92       	push	r10
    ae52:	bf 92       	push	r11
    ae54:	cf 92       	push	r12
    ae56:	df 92       	push	r13
    ae58:	ef 92       	push	r14
    ae5a:	ff 92       	push	r15
    ae5c:	0f 93       	push	r16
    ae5e:	1f 93       	push	r17
    ae60:	cf 93       	push	r28
    ae62:	df 93       	push	r29
  NwkFrame_t *frame = NULL;
    ae64:	c0 e0       	ldi	r28, 0x00	; 0
    ae66:	d0 e0       	ldi	r29, 0x00	; 0
      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
        {
          nwkTxPhyActiveFrame = frame;
          frame->state = NWK_TX_STATE_WAIT_CONF;
    ae68:	0f 2e       	mov	r0, r31
    ae6a:	f4 e1       	ldi	r31, 0x14	; 20
    ae6c:	8f 2e       	mov	r8, r31
    ae6e:	f0 2d       	mov	r31, r0
          PHY_DataReq(frame->data, frame->size);
          nwkIb.lock++;
    ae70:	0f 2e       	mov	r0, r31
    ae72:	f9 e3       	ldi	r31, 0x39	; 57
    ae74:	ef 2e       	mov	r14, r31
    ae76:	fa e3       	ldi	r31, 0x3A	; 58
    ae78:	ff 2e       	mov	r15, r31
    ae7a:	f0 2d       	mov	r31, r0
            frame->state = NWK_TX_STATE_CONFIRM;
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    ae7c:	0f 2e       	mov	r0, r31
    ae7e:	f7 e1       	ldi	r31, 0x17	; 23
    ae80:	bf 2e       	mov	r11, r31
    ae82:	f0 2d       	mov	r31, r0

      case NWK_TX_STATE_SENT:
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
    ae84:	03 e0       	ldi	r16, 0x03	; 3
    ae86:	1a e3       	ldi	r17, 0x3A	; 58
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    ae88:	0f 2e       	mov	r0, r31
    ae8a:	f6 e1       	ldi	r31, 0x16	; 22
    ae8c:	7f 2e       	mov	r7, r31
    ae8e:	f0 2d       	mov	r31, r0
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    ae90:	0f 2e       	mov	r0, r31
    ae92:	f5 e1       	ldi	r31, 0x15	; 21
    ae94:	cf 2e       	mov	r12, r31
    ae96:	d1 2c       	mov	r13, r1
    ae98:	f0 2d       	mov	r31, r0
          frame->state = NWK_TX_STATE_WAIT_DELAY;
          SYS_TimerStart(&nwkTxDelayTimer);
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    ae9a:	0f 2e       	mov	r0, r31
    ae9c:	f3 e1       	ldi	r31, 0x13	; 19
    ae9e:	af 2e       	mov	r10, r31
    aea0:	f0 2d       	mov	r31, r0

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    aea2:	0f 2e       	mov	r0, r31
    aea4:	f1 e1       	ldi	r31, 0x11	; 17
    aea6:	9f 2e       	mov	r9, r31
    aea8:	f0 2d       	mov	r31, r0
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    aeaa:	68 c0       	rjmp	.+208    	; 0xaf7c <nwkTxTaskHandler+0x132>
  {
    switch (frame->state)
    aeac:	88 81       	ld	r24, Y
    aeae:	83 31       	cpi	r24, 0x13	; 19
    aeb0:	f1 f0       	breq	.+60     	; 0xaeee <nwkTxTaskHandler+0xa4>
    aeb2:	28 f4       	brcc	.+10     	; 0xaebe <nwkTxTaskHandler+0x74>
    aeb4:	80 31       	cpi	r24, 0x10	; 16
    aeb6:	49 f0       	breq	.+18     	; 0xaeca <nwkTxTaskHandler+0x80>
    aeb8:	82 31       	cpi	r24, 0x12	; 18
    aeba:	59 f0       	breq	.+22     	; 0xaed2 <nwkTxTaskHandler+0x88>
    aebc:	5f c0       	rjmp	.+190    	; 0xaf7c <nwkTxTaskHandler+0x132>
    aebe:	85 31       	cpi	r24, 0x15	; 21
    aec0:	69 f1       	breq	.+90     	; 0xaf1c <nwkTxTaskHandler+0xd2>
    aec2:	87 31       	cpi	r24, 0x17	; 23
    aec4:	09 f4       	brne	.+2      	; 0xaec8 <nwkTxTaskHandler+0x7e>
    aec6:	49 c0       	rjmp	.+146    	; 0xaf5a <nwkTxTaskHandler+0x110>
    aec8:	59 c0       	rjmp	.+178    	; 0xaf7c <nwkTxTaskHandler+0x132>
    {
#ifdef NWK_ENABLE_SECURITY
      case NWK_TX_STATE_ENCRYPT:
      {
        nwkSecurityProcess(frame, true);
    aeca:	61 e0       	ldi	r22, 0x01	; 1
    aecc:	ce 01       	movw	r24, r28
    aece:	ef dc       	rcall	.-1570   	; 0xa8ae <nwkSecurityProcess>
      } break;
    aed0:	55 c0       	rjmp	.+170    	; 0xaf7c <nwkTxTaskHandler+0x132>
#endif

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
    aed2:	fe 01       	movw	r30, r28
    aed4:	ec 57       	subi	r30, 0x7C	; 124
    aed6:	ff 4f       	sbci	r31, 0xFF	; 255
    aed8:	80 81       	ld	r24, Z
    aeda:	91 81       	ldd	r25, Z+1	; 0x01
    aedc:	89 2b       	or	r24, r25
    aede:	29 f0       	breq	.+10     	; 0xaeea <nwkTxTaskHandler+0xa0>
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    aee0:	98 82       	st	Y, r9
          SYS_TimerStart(&nwkTxDelayTimer);
    aee2:	83 eb       	ldi	r24, 0xB3	; 179
    aee4:	94 e3       	ldi	r25, 0x34	; 52
    aee6:	bb d2       	rcall	.+1398   	; 0xb45e <SYS_TimerStart>
    aee8:	49 c0       	rjmp	.+146    	; 0xaf7c <nwkTxTaskHandler+0x132>
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    aeea:	a8 82       	st	Y, r10
    aeec:	47 c0       	rjmp	.+142    	; 0xaf7c <nwkTxTaskHandler+0x132>
        }
      } break;

      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
    aeee:	80 91 cd 34 	lds	r24, 0x34CD
    aef2:	90 91 ce 34 	lds	r25, 0x34CE
    aef6:	89 2b       	or	r24, r25
    aef8:	09 f0       	breq	.+2      	; 0xaefc <nwkTxTaskHandler+0xb2>
    aefa:	40 c0       	rjmp	.+128    	; 0xaf7c <nwkTxTaskHandler+0x132>
        {
          nwkTxPhyActiveFrame = frame;
    aefc:	d0 93 ce 34 	sts	0x34CE, r29
    af00:	c0 93 cd 34 	sts	0x34CD, r28
          frame->state = NWK_TX_STATE_WAIT_CONF;
    af04:	88 82       	st	Y, r8
          PHY_DataReq(frame->data, frame->size);
    af06:	69 81       	ldd	r22, Y+1	; 0x01
    af08:	ce 01       	movw	r24, r28
    af0a:	02 96       	adiw	r24, 0x02	; 2
    af0c:	ba d0       	rcall	.+372    	; 0xb082 <PHY_DataReq>
          nwkIb.lock++;
    af0e:	f7 01       	movw	r30, r14
    af10:	80 81       	ld	r24, Z
    af12:	91 81       	ldd	r25, Z+1	; 0x01
    af14:	01 96       	adiw	r24, 0x01	; 1
    af16:	91 83       	std	Z+1, r25	; 0x01
    af18:	80 83       	st	Z, r24
    af1a:	30 c0       	rjmp	.+96     	; 0xaf7c <nwkTxTaskHandler+0x132>
      case NWK_TX_STATE_WAIT_CONF:
        break;

      case NWK_TX_STATE_SENT:
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
    af1c:	fe 01       	movw	r30, r28
    af1e:	ed 57       	subi	r30, 0x7D	; 125
    af20:	ff 4f       	sbci	r31, 0xFF	; 255
    af22:	80 81       	ld	r24, Z
    af24:	81 11       	cpse	r24, r1
    af26:	17 c0       	rjmp	.+46     	; 0xaf56 <nwkTxTaskHandler+0x10c>
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
    af28:	2d 85       	ldd	r18, Y+13	; 0x0d
    af2a:	3e 85       	ldd	r19, Y+14	; 0x0e
    af2c:	f8 01       	movw	r30, r16
    af2e:	80 81       	ld	r24, Z
    af30:	91 81       	ldd	r25, Z+1	; 0x01
    af32:	28 17       	cp	r18, r24
    af34:	39 07       	cpc	r19, r25
    af36:	69 f4       	brne	.+26     	; 0xaf52 <nwkTxTaskHandler+0x108>
    af38:	8b 85       	ldd	r24, Y+11	; 0x0b
    af3a:	80 ff       	sbrs	r24, 0
    af3c:	0a c0       	rjmp	.+20     	; 0xaf52 <nwkTxTaskHandler+0x108>
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    af3e:	78 82       	st	Y, r7
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    af40:	fe 01       	movw	r30, r28
    af42:	ec 57       	subi	r30, 0x7C	; 124
    af44:	ff 4f       	sbci	r31, 0xFF	; 255
    af46:	d1 82       	std	Z+1, r13	; 0x01
    af48:	c0 82       	st	Z, r12
            SYS_TimerStart(&nwkTxAckWaitTimer);
    af4a:	80 ec       	ldi	r24, 0xC0	; 192
    af4c:	94 e3       	ldi	r25, 0x34	; 52
    af4e:	87 d2       	rcall	.+1294   	; 0xb45e <SYS_TimerStart>
    af50:	15 c0       	rjmp	.+42     	; 0xaf7c <nwkTxTaskHandler+0x132>
          }
          else
          {
            frame->state = NWK_TX_STATE_CONFIRM;
    af52:	b8 82       	st	Y, r11
    af54:	13 c0       	rjmp	.+38     	; 0xaf7c <nwkTxTaskHandler+0x132>
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    af56:	b8 82       	st	Y, r11
    af58:	11 c0       	rjmp	.+34     	; 0xaf7c <nwkTxTaskHandler+0x132>
        break;

      case NWK_TX_STATE_CONFIRM:
      {
#ifdef NWK_ENABLE_ROUTING
        nwkRouteFrameSent(frame);
    af5a:	ce 01       	movw	r24, r28
    af5c:	0e 94 77 4d 	call	0x9aee	; 0x9aee <nwkRouteFrameSent>
#endif
        if (NULL == frame->tx.confirm)
    af60:	fe 01       	movw	r30, r28
    af62:	e9 57       	subi	r30, 0x79	; 121
    af64:	ff 4f       	sbci	r31, 0xFF	; 255
    af66:	01 90       	ld	r0, Z+
    af68:	f0 81       	ld	r31, Z
    af6a:	e0 2d       	mov	r30, r0
    af6c:	30 97       	sbiw	r30, 0x00	; 0
    af6e:	21 f4       	brne	.+8      	; 0xaf78 <nwkTxTaskHandler+0x12e>
          nwkFrameFree(frame);
    af70:	ce 01       	movw	r24, r28
    af72:	0e 94 05 4c 	call	0x980a	; 0x980a <nwkFrameFree>
    af76:	02 c0       	rjmp	.+4      	; 0xaf7c <nwkTxTaskHandler+0x132>
        else
          frame->tx.confirm(frame);
    af78:	ce 01       	movw	r24, r28
    af7a:	19 95       	eicall
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    af7c:	ce 01       	movw	r24, r28
    af7e:	0e 94 0f 4c 	call	0x981e	; 0x981e <nwkFrameNext>
    af82:	ec 01       	movw	r28, r24
    af84:	00 97       	sbiw	r24, 0x00	; 0
    af86:	09 f0       	breq	.+2      	; 0xaf8a <nwkTxTaskHandler+0x140>
    af88:	91 cf       	rjmp	.-222    	; 0xaeac <nwkTxTaskHandler+0x62>

      default:
        break;
    };
  }
}
    af8a:	df 91       	pop	r29
    af8c:	cf 91       	pop	r28
    af8e:	1f 91       	pop	r17
    af90:	0f 91       	pop	r16
    af92:	ff 90       	pop	r15
    af94:	ef 90       	pop	r14
    af96:	df 90       	pop	r13
    af98:	cf 90       	pop	r12
    af9a:	bf 90       	pop	r11
    af9c:	af 90       	pop	r10
    af9e:	9f 90       	pop	r9
    afa0:	8f 90       	pop	r8
    afa2:	7f 90       	pop	r7
    afa4:	08 95       	ret

0000afa6 <phySetChannel>:
*****************************************************************************/
void PHY_Wakeup(void)
{
  TRXPR_REG_s.slptr = 0;
  phySetRxState();
  phyState = PHY_STATE_IDLE;
    afa6:	90 91 cf 34 	lds	r25, 0x34CF
    afaa:	9f 70       	andi	r25, 0x0F	; 15
    afac:	e4 e5       	ldi	r30, 0x54	; 84
    afae:	f1 e0       	ldi	r31, 0x01	; 1
    afb0:	80 81       	ld	r24, Z
    afb2:	80 7f       	andi	r24, 0xF0	; 240
    afb4:	89 2b       	or	r24, r25
    afb6:	80 83       	st	Z, r24
    afb8:	80 91 cf 34 	lds	r24, 0x34CF
    afbc:	88 23       	and	r24, r24
    afbe:	29 f0       	breq	.+10     	; 0xafca <phySetChannel+0x24>
    afc0:	80 91 d0 34 	lds	r24, 0x34D0
    afc4:	80 93 53 01 	sts	0x0153, r24
    afc8:	08 95       	ret
    afca:	90 91 d0 34 	lds	r25, 0x34D0
    afce:	9f 71       	andi	r25, 0x1F	; 31
    afd0:	e8 e4       	ldi	r30, 0x48	; 72
    afd2:	f1 e0       	ldi	r31, 0x01	; 1
    afd4:	80 81       	ld	r24, Z
    afd6:	80 7e       	andi	r24, 0xE0	; 224
    afd8:	89 2b       	or	r24, r25
    afda:	80 83       	st	Z, r24
    afdc:	08 95       	ret

0000afde <phyTrxSetState>:
    afde:	93 e0       	ldi	r25, 0x03	; 3
    afe0:	90 93 42 01 	sts	0x0142, r25
    afe4:	e1 e4       	ldi	r30, 0x41	; 65
    afe6:	f1 e0       	ldi	r31, 0x01	; 1
    afe8:	90 81       	ld	r25, Z
    afea:	9f 71       	andi	r25, 0x1F	; 31
    afec:	98 30       	cpi	r25, 0x08	; 8
    afee:	e1 f7       	brne	.-8      	; 0xafe8 <phyTrxSetState+0xa>
    aff0:	80 93 42 01 	sts	0x0142, r24
    aff4:	e1 e4       	ldi	r30, 0x41	; 65
    aff6:	f1 e0       	ldi	r31, 0x01	; 1
    aff8:	90 81       	ld	r25, Z
    affa:	9f 71       	andi	r25, 0x1F	; 31
    affc:	98 13       	cpse	r25, r24
    affe:	fc cf       	rjmp	.-8      	; 0xaff8 <phyTrxSetState+0x1a>
    b000:	08 95       	ret

0000b002 <phySetRxState>:
    b002:	88 e0       	ldi	r24, 0x08	; 8
    b004:	ec df       	rcall	.-40     	; 0xafde <phyTrxSetState>
    b006:	8f ef       	ldi	r24, 0xFF	; 255
    b008:	80 93 4f 01 	sts	0x014F, r24
    b00c:	80 91 d1 34 	lds	r24, 0x34D1
    b010:	88 23       	and	r24, r24
    b012:	11 f0       	breq	.+4      	; 0xb018 <phySetRxState+0x16>
    b014:	86 e1       	ldi	r24, 0x16	; 22
    b016:	e3 cf       	rjmp	.-58     	; 0xafde <phyTrxSetState>
    b018:	08 95       	ret

0000b01a <PHY_SetRxState>:
    b01a:	80 93 d1 34 	sts	0x34D1, r24
    b01e:	f1 cf       	rjmp	.-30     	; 0xb002 <phySetRxState>
    b020:	08 95       	ret

0000b022 <PHY_SetChannel>:
    b022:	80 93 d0 34 	sts	0x34D0, r24
    b026:	bf cf       	rjmp	.-130    	; 0xafa6 <phySetChannel>
    b028:	08 95       	ret

0000b02a <PHY_SetPanId>:
    b02a:	cf 93       	push	r28
    b02c:	df 93       	push	r29
    b02e:	1f 92       	push	r1
    b030:	1f 92       	push	r1
    b032:	cd b7       	in	r28, 0x3d	; 61
    b034:	de b7       	in	r29, 0x3e	; 62
    b036:	9a 83       	std	Y+2, r25	; 0x02
    b038:	89 83       	std	Y+1, r24	; 0x01
    b03a:	80 93 62 01 	sts	0x0162, r24
    b03e:	8a 81       	ldd	r24, Y+2	; 0x02
    b040:	80 93 63 01 	sts	0x0163, r24
    b044:	0f 90       	pop	r0
    b046:	0f 90       	pop	r0
    b048:	df 91       	pop	r29
    b04a:	cf 91       	pop	r28
    b04c:	08 95       	ret

0000b04e <PHY_SetShortAddr>:
    b04e:	cf 93       	push	r28
    b050:	df 93       	push	r29
    b052:	1f 92       	push	r1
    b054:	1f 92       	push	r1
    b056:	cd b7       	in	r28, 0x3d	; 61
    b058:	de b7       	in	r29, 0x3e	; 62
    b05a:	9a 83       	std	Y+2, r25	; 0x02
    b05c:	89 83       	std	Y+1, r24	; 0x01
    b05e:	80 93 60 01 	sts	0x0160, r24
    b062:	8a 81       	ldd	r24, Y+2	; 0x02
    b064:	80 93 61 01 	sts	0x0161, r24
    b068:	0f 90       	pop	r0
    b06a:	0f 90       	pop	r0
    b06c:	df 91       	pop	r29
    b06e:	cf 91       	pop	r28
    b070:	08 95       	ret

0000b072 <PHY_SetTxPower>:
    b072:	8f 70       	andi	r24, 0x0F	; 15
    b074:	e5 e4       	ldi	r30, 0x45	; 69
    b076:	f1 e0       	ldi	r31, 0x01	; 1
    b078:	90 81       	ld	r25, Z
    b07a:	90 7f       	andi	r25, 0xF0	; 240
    b07c:	89 2b       	or	r24, r25
    b07e:	80 83       	st	Z, r24
    b080:	08 95       	ret

0000b082 <PHY_DataReq>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataReq(uint8_t *data, uint8_t size)
{
    b082:	1f 93       	push	r17
    b084:	cf 93       	push	r28
    b086:	df 93       	push	r29
    b088:	d8 2f       	mov	r29, r24
    b08a:	19 2f       	mov	r17, r25
    b08c:	c6 2f       	mov	r28, r22
  phyTrxSetState(TRX_CMD_TX_ARET_ON);
    b08e:	89 e1       	ldi	r24, 0x19	; 25
    b090:	a6 df       	rcall	.-180    	; 0xafde <phyTrxSetState>

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;
    b092:	8f ef       	ldi	r24, 0xFF	; 255
    b094:	80 93 4f 01 	sts	0x014F, r24

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
    b098:	82 e0       	ldi	r24, 0x02	; 2
    b09a:	8c 0f       	add	r24, r28
    b09c:	80 93 80 01 	sts	0x0180, r24
  for (uint8_t i = 0; i < size; i++)
    b0a0:	cc 23       	and	r28, r28
    b0a2:	59 f0       	breq	.+22     	; 0xb0ba <PHY_DataReq+0x38>
    b0a4:	2d 2f       	mov	r18, r29
    b0a6:	ed 2f       	mov	r30, r29
    b0a8:	f1 2f       	mov	r31, r17
    b0aa:	a1 e8       	ldi	r26, 0x81	; 129
    b0ac:	b1 e0       	ldi	r27, 0x01	; 1
    TRX_FRAME_BUFFER(i+1) = data[i];
    b0ae:	81 91       	ld	r24, Z+
    b0b0:	8d 93       	st	X+, r24
    b0b2:	8e 2f       	mov	r24, r30
    b0b4:	82 1b       	sub	r24, r18
  phyTrxSetState(TRX_CMD_TX_ARET_ON);

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
  for (uint8_t i = 0; i < size; i++)
    b0b6:	8c 17       	cp	r24, r28
    b0b8:	d0 f3       	brcs	.-12     	; 0xb0ae <PHY_DataReq+0x2c>
    TRX_FRAME_BUFFER(i+1) = data[i];

  phyState = PHY_STATE_TX_WAIT_END;
    b0ba:	83 e0       	ldi	r24, 0x03	; 3
    b0bc:	80 93 52 35 	sts	0x3552, r24
  TRX_STATE_REG = TRX_CMD_TX_START;
    b0c0:	82 e0       	ldi	r24, 0x02	; 2
    b0c2:	80 93 42 01 	sts	0x0142, r24
}
    b0c6:	df 91       	pop	r29
    b0c8:	cf 91       	pop	r28
    b0ca:	1f 91       	pop	r17
    b0cc:	08 95       	ret

0000b0ce <PHY_RandomReq>:

#ifdef PHY_ENABLE_RANDOM_NUMBER_GENERATOR
/*************************************************************************//**
*****************************************************************************/
uint16_t PHY_RandomReq(void)
{
    b0ce:	ef 92       	push	r14
    b0d0:	ff 92       	push	r15
    b0d2:	0f 93       	push	r16
    b0d4:	1f 93       	push	r17
    b0d6:	cf 93       	push	r28
    b0d8:	df 93       	push	r29
  uint16_t rnd = 0;

  TRX_RPC_REG = 0x00;
    b0da:	10 92 56 01 	sts	0x0156, r1

  phyTrxSetState(TRX_CMD_RX_ON);
    b0de:	86 e0       	ldi	r24, 0x06	; 6
    b0e0:	7e df       	rcall	.-260    	; 0xafde <phyTrxSetState>
    b0e2:	c0 e0       	ldi	r28, 0x00	; 0
    b0e4:	d0 e0       	ldi	r29, 0x00	; 0
#ifdef PHY_ENABLE_RANDOM_NUMBER_GENERATOR
/*************************************************************************//**
*****************************************************************************/
uint16_t PHY_RandomReq(void)
{
  uint16_t rnd = 0;
    b0e6:	00 e0       	ldi	r16, 0x00	; 0
    b0e8:	10 e0       	ldi	r17, 0x00	; 0
  phyTrxSetState(TRX_CMD_RX_ON);

  for (uint8_t i = 0; i < 16; i += 2)
  {
    HAL_Delay(RANDOM_NUMBER_UPDATE_INTERVAL);
    rnd |= PHY_RSSI_REG_s.rndValue << i;
    b0ea:	0f 2e       	mov	r0, r31
    b0ec:	f6 e4       	ldi	r31, 0x46	; 70
    b0ee:	ef 2e       	mov	r14, r31
    b0f0:	ff 24       	eor	r15, r15
    b0f2:	f3 94       	inc	r15
    b0f4:	f0 2d       	mov	r31, r0
#define _HAL_H_

#include <Arduino.h>

inline void HAL_Init(void) { /* Nothing to do */ }
inline void HAL_Delay(uint8_t us) { delay(us); }
    b0f6:	61 e0       	ldi	r22, 0x01	; 1
    b0f8:	70 e0       	ldi	r23, 0x00	; 0
    b0fa:	80 e0       	ldi	r24, 0x00	; 0
    b0fc:	90 e0       	ldi	r25, 0x00	; 0
    b0fe:	0e 94 48 14 	call	0x2890	; 0x2890 <delay>
    b102:	f7 01       	movw	r30, r14
    b104:	80 81       	ld	r24, Z
    b106:	82 95       	swap	r24
    b108:	86 95       	lsr	r24
    b10a:	87 70       	andi	r24, 0x07	; 7
    b10c:	83 70       	andi	r24, 0x03	; 3
    b10e:	90 e0       	ldi	r25, 0x00	; 0
    b110:	0c 2e       	mov	r0, r28
    b112:	02 c0       	rjmp	.+4      	; 0xb118 <PHY_RandomReq+0x4a>
    b114:	88 0f       	add	r24, r24
    b116:	99 1f       	adc	r25, r25
    b118:	0a 94       	dec	r0
    b11a:	e2 f7       	brpl	.-8      	; 0xb114 <PHY_RandomReq+0x46>
    b11c:	08 2b       	or	r16, r24
    b11e:	19 2b       	or	r17, r25
    b120:	22 96       	adiw	r28, 0x02	; 2

  TRX_RPC_REG = 0x00;

  phyTrxSetState(TRX_CMD_RX_ON);

  for (uint8_t i = 0; i < 16; i += 2)
    b122:	c0 31       	cpi	r28, 0x10	; 16
    b124:	d1 05       	cpc	r29, r1
    b126:	39 f7       	brne	.-50     	; 0xb0f6 <PHY_RandomReq+0x28>
  {
    HAL_Delay(RANDOM_NUMBER_UPDATE_INTERVAL);
    rnd |= PHY_RSSI_REG_s.rndValue << i;
  }

  phyTrxSetState(TRX_CMD_TRX_OFF);
    b128:	88 e0       	ldi	r24, 0x08	; 8
    b12a:	59 df       	rcall	.-334    	; 0xafde <phyTrxSetState>

  TRX_RPC_REG = TRX_RPC_REG_VALUE;
    b12c:	8b ee       	ldi	r24, 0xEB	; 235
    b12e:	80 93 56 01 	sts	0x0156, r24

  phySetRxState();
    b132:	67 df       	rcall	.-306    	; 0xb002 <phySetRxState>

  return rnd;
}
    b134:	c8 01       	movw	r24, r16
    b136:	df 91       	pop	r29
    b138:	cf 91       	pop	r28
    b13a:	1f 91       	pop	r17
    b13c:	0f 91       	pop	r16
    b13e:	ff 90       	pop	r15
    b140:	ef 90       	pop	r14
    b142:	08 95       	ret

0000b144 <PHY_Init>:

/*************************************************************************//**
*****************************************************************************/
void PHY_Init(void)
{
  TRXPR_REG_s.trxrst = 1;
    b144:	e9 e3       	ldi	r30, 0x39	; 57
    b146:	f1 e0       	ldi	r31, 0x01	; 1
    b148:	80 81       	ld	r24, Z
    b14a:	81 60       	ori	r24, 0x01	; 1
    b14c:	80 83       	st	Z, r24

  phyRxState = false;
    b14e:	10 92 d1 34 	sts	0x34D1, r1
  phyBand = 0;
    b152:	10 92 cf 34 	sts	0x34CF, r1
  phyState = PHY_STATE_IDLE;
    b156:	81 e0       	ldi	r24, 0x01	; 1
    b158:	80 93 52 35 	sts	0x3552, r24

  phyTrxSetState(TRX_CMD_TRX_OFF);
    b15c:	88 e0       	ldi	r24, 0x08	; 8
    b15e:	3f df       	rcall	.-386    	; 0xafde <phyTrxSetState>

  TRX_RPC_REG = TRX_RPC_REG_VALUE;
    b160:	8b ee       	ldi	r24, 0xEB	; 235
    b162:	80 93 56 01 	sts	0x0156, r24

  TRX_CTRL_2_REG_s.rxSafeMode = 1;
    b166:	ec e4       	ldi	r30, 0x4C	; 76
    b168:	f1 e0       	ldi	r31, 0x01	; 1
    b16a:	80 81       	ld	r24, Z
    b16c:	80 68       	ori	r24, 0x80	; 128
    b16e:	80 83       	st	Z, r24

#ifdef PHY_ENABLE_RANDOM_NUMBER_GENERATOR
  CSMA_SEED_0_REG = (uint8_t)PHY_RandomReq();
    b170:	ae df       	rcall	.-164    	; 0xb0ce <PHY_RandomReq>
    b172:	80 93 6d 01 	sts	0x016D, r24
    b176:	08 95       	ret

0000b178 <PHY_EncryptReq>:

#ifdef PHY_ENABLE_AES_MODULE
/*************************************************************************//**
*****************************************************************************/
void PHY_EncryptReq(uint8_t *text, uint8_t *key)
{
    b178:	fb 01       	movw	r30, r22
  for (uint8_t i = 0; i < AES_BLOCK_SIZE; i++)
    b17a:	20 e0       	ldi	r18, 0x00	; 0
    AES_KEY = key[i];
    b17c:	af e3       	ldi	r26, 0x3F	; 63
    b17e:	b1 e0       	ldi	r27, 0x01	; 1
    b180:	31 91       	ld	r19, Z+
    b182:	3c 93       	st	X, r19
#ifdef PHY_ENABLE_AES_MODULE
/*************************************************************************//**
*****************************************************************************/
void PHY_EncryptReq(uint8_t *text, uint8_t *key)
{
  for (uint8_t i = 0; i < AES_BLOCK_SIZE; i++)
    b184:	2f 5f       	subi	r18, 0xFF	; 255
    b186:	20 31       	cpi	r18, 0x10	; 16
    b188:	d9 f7       	brne	.-10     	; 0xb180 <PHY_EncryptReq+0x8>
    AES_KEY = key[i];

  AES_CTRL = (0<<AES_CTRL_DIR) | (0<<AES_CTRL_MODE);
    b18a:	10 92 3c 01 	sts	0x013C, r1
    b18e:	e8 2f       	mov	r30, r24
    b190:	f9 2f       	mov	r31, r25

  for (uint8_t i = 0; i < AES_BLOCK_SIZE; i++)
    AES_STATE = text[i];
    b192:	ae e3       	ldi	r26, 0x3E	; 62
    b194:	b1 e0       	ldi	r27, 0x01	; 1
    b196:	31 91       	ld	r19, Z+
    b198:	3c 93       	st	X, r19
    b19a:	21 50       	subi	r18, 0x01	; 1
  for (uint8_t i = 0; i < AES_BLOCK_SIZE; i++)
    AES_KEY = key[i];

  AES_CTRL = (0<<AES_CTRL_DIR) | (0<<AES_CTRL_MODE);

  for (uint8_t i = 0; i < AES_BLOCK_SIZE; i++)
    b19c:	e1 f7       	brne	.-8      	; 0xb196 <PHY_EncryptReq+0x1e>
    AES_STATE = text[i];

  AES_CTRL |= (1<<AES_CTRL_REQUEST);
    b19e:	ec e3       	ldi	r30, 0x3C	; 60
    b1a0:	f1 e0       	ldi	r31, 0x01	; 1
    b1a2:	20 81       	ld	r18, Z
    b1a4:	20 68       	ori	r18, 0x80	; 128
    b1a6:	20 83       	st	Z, r18

  while (0 == (AES_STATUS & (1<<AES_STATUS_RY)));
    b1a8:	ed e3       	ldi	r30, 0x3D	; 61
    b1aa:	f1 e0       	ldi	r31, 0x01	; 1
    b1ac:	20 81       	ld	r18, Z
    b1ae:	20 ff       	sbrs	r18, 0
    b1b0:	fd cf       	rjmp	.-6      	; 0xb1ac <PHY_EncryptReq+0x34>
    b1b2:	e8 2f       	mov	r30, r24
    b1b4:	f9 2f       	mov	r31, r25
    b1b6:	80 e0       	ldi	r24, 0x00	; 0

  for (uint8_t i = 0; i < AES_BLOCK_SIZE; i++)
    text[i] = AES_STATE;
    b1b8:	ae e3       	ldi	r26, 0x3E	; 62
    b1ba:	b1 e0       	ldi	r27, 0x01	; 1
    b1bc:	9c 91       	ld	r25, X
    b1be:	91 93       	st	Z+, r25

  AES_CTRL |= (1<<AES_CTRL_REQUEST);

  while (0 == (AES_STATUS & (1<<AES_STATUS_RY)));

  for (uint8_t i = 0; i < AES_BLOCK_SIZE; i++)
    b1c0:	8f 5f       	subi	r24, 0xFF	; 255
    b1c2:	80 31       	cpi	r24, 0x10	; 16
    b1c4:	d9 f7       	brne	.-10     	; 0xb1bc <PHY_EncryptReq+0x44>
    text[i] = AES_STATE;
}
    b1c6:	08 95       	ret

0000b1c8 <PHY_TaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    b1c8:	1f 93       	push	r17
    b1ca:	cf 93       	push	r28
    b1cc:	df 93       	push	r29
    b1ce:	00 d0       	rcall	.+0      	; 0xb1d0 <PHY_TaskHandler+0x8>
    b1d0:	1f 92       	push	r1
    b1d2:	1f 92       	push	r1
    b1d4:	cd b7       	in	r28, 0x3d	; 61
    b1d6:	de b7       	in	r29, 0x3e	; 62
  if (PHY_STATE_SLEEP == phyState)
    b1d8:	80 91 52 35 	lds	r24, 0x3552
    b1dc:	82 30       	cpi	r24, 0x02	; 2
    b1de:	09 f4       	brne	.+2      	; 0xb1e2 <PHY_TaskHandler+0x1a>
    b1e0:	65 c0       	rjmp	.+202    	; 0xb2ac <PHY_TaskHandler+0xe4>
    return;

  if (IRQ_STATUS_REG_s.rxEnd)
    b1e2:	80 91 4f 01 	lds	r24, 0x014F
    b1e6:	83 ff       	sbrs	r24, 3
    b1e8:	3e c0       	rjmp	.+124    	; 0xb266 <PHY_TaskHandler+0x9e>
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;
    b1ea:	a0 91 7b 01 	lds	r26, 0x017B

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    b1ee:	4a 2f       	mov	r20, r26
    b1f0:	50 e0       	ldi	r21, 0x00	; 0
    b1f2:	9a 01       	movw	r18, r20
    b1f4:	2f 5f       	subi	r18, 0xFF	; 255
    b1f6:	3f 4f       	sbci	r19, 0xFF	; 255
    b1f8:	80 e0       	ldi	r24, 0x00	; 0
    b1fa:	90 e0       	ldi	r25, 0x00	; 0
    b1fc:	60 e0       	ldi	r22, 0x00	; 0
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
    b1fe:	fc 01       	movw	r30, r24
    b200:	e0 58       	subi	r30, 0x80	; 128
    b202:	fe 4f       	sbci	r31, 0xFE	; 254
    b204:	70 81       	ld	r23, Z
    b206:	fc 01       	movw	r30, r24
    b208:	ee 52       	subi	r30, 0x2E	; 46
    b20a:	fb 4c       	sbci	r31, 0xCB	; 203
    b20c:	70 83       	st	Z, r23
  if (IRQ_STATUS_REG_s.rxEnd)
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    b20e:	6f 5f       	subi	r22, 0xFF	; 255
    b210:	86 2f       	mov	r24, r22
    b212:	90 e0       	ldi	r25, 0x00	; 0
    b214:	82 17       	cp	r24, r18
    b216:	93 07       	cpc	r25, r19
    b218:	94 f3       	brlt	.-28     	; 0xb1fe <PHY_TaskHandler+0x36>
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);

    ind.data = phyRxBuffer;
    b21a:	82 ed       	ldi	r24, 0xD2	; 210
    b21c:	94 e3       	ldi	r25, 0x34	; 52
    b21e:	9a 83       	std	Y+2, r25	; 0x02
    b220:	89 83       	std	Y+1, r24	; 0x01
    ind.size = size - PHY_CRC_SIZE;
    b222:	a2 50       	subi	r26, 0x02	; 2
    b224:	ab 83       	std	Y+3, r26	; 0x03
    ind.lqi  = phyRxBuffer[size];
    b226:	fa 01       	movw	r30, r20
    b228:	ee 52       	subi	r30, 0x2E	; 46
    b22a:	fb 4c       	sbci	r31, 0xCB	; 203
    b22c:	80 81       	ld	r24, Z
    b22e:	8c 83       	std	Y+4, r24	; 0x04
    ind.rssi = (int8_t)PHY_ED_LEVEL_REG + PHY_RSSI_BASE_VAL;
    b230:	80 91 47 01 	lds	r24, 0x0147
    b234:	8a 55       	subi	r24, 0x5A	; 90
    b236:	8d 83       	std	Y+5, r24	; 0x05
    PHY_DataInd(&ind);
    b238:	ce 01       	movw	r24, r28
    b23a:	01 96       	adiw	r24, 0x01	; 1
    b23c:	5b d8       	rcall	.-3914   	; 0xa2f4 <PHY_DataInd>

    while (TRX_STATUS_RX_AACK_ON != TRX_STATUS_REG_s.trxStatus);
    b23e:	e1 e4       	ldi	r30, 0x41	; 65
    b240:	f1 e0       	ldi	r31, 0x01	; 1
    b242:	80 81       	ld	r24, Z
    b244:	8f 71       	andi	r24, 0x1F	; 31
    b246:	86 31       	cpi	r24, 0x16	; 22
    b248:	e1 f7       	brne	.-8      	; 0xb242 <PHY_TaskHandler+0x7a>

    IRQ_STATUS_REG_s.rxEnd = 1;
    b24a:	ef e4       	ldi	r30, 0x4F	; 79
    b24c:	f1 e0       	ldi	r31, 0x01	; 1
    b24e:	80 81       	ld	r24, Z
    b250:	88 60       	ori	r24, 0x08	; 8
    b252:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 0;
    b254:	ec e4       	ldi	r30, 0x4C	; 76
    b256:	f1 e0       	ldi	r31, 0x01	; 1
    b258:	80 81       	ld	r24, Z
    b25a:	8f 77       	andi	r24, 0x7F	; 127
    b25c:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 1;
    b25e:	80 81       	ld	r24, Z
    b260:	80 68       	ori	r24, 0x80	; 128
    b262:	80 83       	st	Z, r24
    b264:	23 c0       	rjmp	.+70     	; 0xb2ac <PHY_TaskHandler+0xe4>
  }

  else if (IRQ_STATUS_REG_s.txEnd)
    b266:	80 91 4f 01 	lds	r24, 0x014F
    b26a:	86 ff       	sbrs	r24, 6
    b26c:	1f c0       	rjmp	.+62     	; 0xb2ac <PHY_TaskHandler+0xe4>
  {
    if (TRX_STATUS_TX_ARET_ON == TRX_STATUS_REG_s.trxStatus)
    b26e:	80 91 41 01 	lds	r24, 0x0141
    b272:	8f 71       	andi	r24, 0x1F	; 31
    b274:	89 31       	cpi	r24, 0x19	; 25
    b276:	a9 f4       	brne	.+42     	; 0xb2a2 <PHY_TaskHandler+0xda>
    {
      uint8_t status = TRX_STATE_REG_s.tracStatus;
    b278:	10 91 42 01 	lds	r17, 0x0142
    b27c:	12 95       	swap	r17
    b27e:	16 95       	lsr	r17
    b280:	17 70       	andi	r17, 0x07	; 7

      if (TRAC_STATUS_SUCCESS == status)
    b282:	49 f0       	breq	.+18     	; 0xb296 <PHY_TaskHandler+0xce>
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
    b284:	13 30       	cpi	r17, 0x03	; 3
    b286:	21 f0       	breq	.+8      	; 0xb290 <PHY_TaskHandler+0xc8>
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
      else if (TRAC_STATUS_NO_ACK == status)
    b288:	15 30       	cpi	r17, 0x05	; 5
    b28a:	21 f4       	brne	.+8      	; 0xb294 <PHY_TaskHandler+0xcc>
        status = PHY_STATUS_NO_ACK;
    b28c:	12 e0       	ldi	r17, 0x02	; 2
    b28e:	03 c0       	rjmp	.+6      	; 0xb296 <PHY_TaskHandler+0xce>
      uint8_t status = TRX_STATE_REG_s.tracStatus;

      if (TRAC_STATUS_SUCCESS == status)
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    b290:	11 e0       	ldi	r17, 0x01	; 1
    b292:	01 c0       	rjmp	.+2      	; 0xb296 <PHY_TaskHandler+0xce>
      else if (TRAC_STATUS_NO_ACK == status)
        status = PHY_STATUS_NO_ACK;
      else
        status = PHY_STATUS_ERROR;
    b294:	13 e0       	ldi	r17, 0x03	; 3

      phySetRxState();
    b296:	b5 de       	rcall	.-662    	; 0xb002 <phySetRxState>
      phyState = PHY_STATE_IDLE;
    b298:	81 e0       	ldi	r24, 0x01	; 1
    b29a:	80 93 52 35 	sts	0x3552, r24

      PHY_DataConf(status);
    b29e:	81 2f       	mov	r24, r17
    b2a0:	b1 dd       	rcall	.-1182   	; 0xae04 <PHY_DataConf>
    }

    IRQ_STATUS_REG_s.txEnd = 1;
    b2a2:	ef e4       	ldi	r30, 0x4F	; 79
    b2a4:	f1 e0       	ldi	r31, 0x01	; 1
    b2a6:	80 81       	ld	r24, Z
    b2a8:	80 64       	ori	r24, 0x40	; 64
    b2aa:	80 83       	st	Z, r24
  }
}
    b2ac:	0f 90       	pop	r0
    b2ae:	0f 90       	pop	r0
    b2b0:	0f 90       	pop	r0
    b2b2:	0f 90       	pop	r0
    b2b4:	0f 90       	pop	r0
    b2b6:	df 91       	pop	r29
    b2b8:	cf 91       	pop	r28
    b2ba:	1f 91       	pop	r17
    b2bc:	08 95       	ret

0000b2be <SYS_Init>:
/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
  HAL_Init();
  SYS_TimerInit();
    b2be:	70 d0       	rcall	.+224    	; 0xb3a0 <SYS_TimerInit>
  PHY_Init();
    b2c0:	41 df       	rcall	.-382    	; 0xb144 <PHY_Init>
  NWK_Init();
    b2c2:	0c 94 71 4a 	jmp	0x94e2	; 0x94e2 <NWK_Init>
    b2c6:	08 95       	ret

0000b2c8 <SYS_TaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
  PHY_TaskHandler();
    b2c8:	7f df       	rcall	.-258    	; 0xb1c8 <PHY_TaskHandler>
  NWK_TaskHandler();
    b2ca:	0e 94 a8 4a 	call	0x9550	; 0x9550 <NWK_TaskHandler>
  SYS_TimerTaskHandler();
    b2ce:	d2 c0       	rjmp	.+420    	; 0xb474 <SYS_TimerTaskHandler>
    b2d0:	08 95       	ret

0000b2d2 <SYS_EncryptReq>:
/*************************************************************************//**
*****************************************************************************/
void SYS_EncryptReq(uint8_t *text, uint8_t *key)
{
#if SYS_SECURITY_MODE == 0
  PHY_EncryptReq(text, key);
    b2d2:	52 df       	rcall	.-348    	; 0xb178 <PHY_EncryptReq>
  text[3] ^= text[1];
  xtea(&text[2], key);

#endif

  SYS_EncryptConf();
    b2d4:	fb ca       	rjmp	.-2570   	; 0xa8cc <SYS_EncryptConf>
    b2d6:	08 95       	ret

0000b2d8 <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    b2d8:	0f 93       	push	r16
    b2da:	1f 93       	push	r17
    b2dc:	cf 93       	push	r28
    b2de:	df 93       	push	r29
    b2e0:	ec 01       	movw	r28, r24
  if (timers)
    b2e2:	80 91 54 35 	lds	r24, 0x3554
    b2e6:	90 91 55 35 	lds	r25, 0x3555
    b2ea:	00 97       	sbiw	r24, 0x00	; 0
    b2ec:	09 f4       	brne	.+2      	; 0xb2f0 <placeTimer+0x18>
    b2ee:	45 c0       	rjmp	.+138    	; 0xb37a <placeTimer+0xa2>
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;
    b2f0:	4e 81       	ldd	r20, Y+6	; 0x06
    b2f2:	5f 81       	ldd	r21, Y+7	; 0x07
    b2f4:	68 85       	ldd	r22, Y+8	; 0x08
    b2f6:	79 85       	ldd	r23, Y+9	; 0x09

    for (SYS_Timer_t *t = timers; t; t = t->next)
    {
      if (timeout < t->timeout)
    b2f8:	fc 01       	movw	r30, r24
    b2fa:	02 81       	ldd	r16, Z+2	; 0x02
    b2fc:	13 81       	ldd	r17, Z+3	; 0x03
    b2fe:	24 81       	ldd	r18, Z+4	; 0x04
    b300:	35 81       	ldd	r19, Z+5	; 0x05
    b302:	40 17       	cp	r20, r16
    b304:	51 07       	cpc	r21, r17
    b306:	62 07       	cpc	r22, r18
    b308:	73 07       	cpc	r23, r19
    b30a:	c0 f4       	brcc	.+48     	; 0xb33c <placeTimer+0x64>
    b30c:	0b c0       	rjmp	.+22     	; 0xb324 <placeTimer+0x4c>
    b30e:	02 81       	ldd	r16, Z+2	; 0x02
    b310:	13 81       	ldd	r17, Z+3	; 0x03
    b312:	24 81       	ldd	r18, Z+4	; 0x04
    b314:	35 81       	ldd	r19, Z+5	; 0x05
    b316:	40 17       	cp	r20, r16
    b318:	51 07       	cpc	r21, r17
    b31a:	62 07       	cpc	r22, r18
    b31c:	73 07       	cpc	r23, r19
    b31e:	28 f0       	brcs	.+10     	; 0xb32a <placeTimer+0x52>
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    b320:	df 01       	movw	r26, r30
    b322:	0d c0       	rjmp	.+26     	; 0xb33e <placeTimer+0x66>
    b324:	fc 01       	movw	r30, r24
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    b326:	a0 e0       	ldi	r26, 0x00	; 0
    b328:	b0 e0       	ldi	r27, 0x00	; 0

    for (SYS_Timer_t *t = timers; t; t = t->next)
    {
      if (timeout < t->timeout)
      {
         t->timeout -= timeout;
    b32a:	04 1b       	sub	r16, r20
    b32c:	15 0b       	sbc	r17, r21
    b32e:	26 0b       	sbc	r18, r22
    b330:	37 0b       	sbc	r19, r23
    b332:	02 83       	std	Z+2, r16	; 0x02
    b334:	13 83       	std	Z+3, r17	; 0x03
    b336:	24 83       	std	Z+4, r18	; 0x04
    b338:	35 83       	std	Z+5, r19	; 0x05
         break;
    b33a:	0a c0       	rjmp	.+20     	; 0xb350 <placeTimer+0x78>
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    b33c:	dc 01       	movw	r26, r24
      {
         t->timeout -= timeout;
         break;
      }
      else
        timeout -= t->timeout;
    b33e:	40 1b       	sub	r20, r16
    b340:	51 0b       	sbc	r21, r17
    b342:	62 0b       	sbc	r22, r18
    b344:	73 0b       	sbc	r23, r19
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    b346:	ed 91       	ld	r30, X+
    b348:	fc 91       	ld	r31, X
    b34a:	11 97       	sbiw	r26, 0x01	; 1
    b34c:	30 97       	sbiw	r30, 0x00	; 0
    b34e:	f9 f6       	brne	.-66     	; 0xb30e <placeTimer+0x36>
        timeout -= t->timeout;

      prev = t;
    }

    timer->timeout = timeout;
    b350:	4a 83       	std	Y+2, r20	; 0x02
    b352:	5b 83       	std	Y+3, r21	; 0x03
    b354:	6c 83       	std	Y+4, r22	; 0x04
    b356:	7d 83       	std	Y+5, r23	; 0x05

    if (prev)
    b358:	10 97       	sbiw	r26, 0x00	; 0
    b35a:	41 f0       	breq	.+16     	; 0xb36c <placeTimer+0x94>
    {
      timer->next = prev->next;
    b35c:	8d 91       	ld	r24, X+
    b35e:	9c 91       	ld	r25, X
    b360:	11 97       	sbiw	r26, 0x01	; 1
    b362:	99 83       	std	Y+1, r25	; 0x01
    b364:	88 83       	st	Y, r24
      prev->next = timer;
    b366:	cd 93       	st	X+, r28
    b368:	dc 93       	st	X, r29
    b36a:	15 c0       	rjmp	.+42     	; 0xb396 <placeTimer+0xbe>
    }
    else
    {
      timer->next = timers;
    b36c:	99 83       	std	Y+1, r25	; 0x01
    b36e:	88 83       	st	Y, r24
      timers = timer;
    b370:	d0 93 55 35 	sts	0x3555, r29
    b374:	c0 93 54 35 	sts	0x3554, r28
    b378:	0e c0       	rjmp	.+28     	; 0xb396 <placeTimer+0xbe>
    }
  }
  else
  {
    timer->next = NULL;
    b37a:	19 82       	std	Y+1, r1	; 0x01
    b37c:	18 82       	st	Y, r1
    timer->timeout = timer->interval;
    b37e:	8e 81       	ldd	r24, Y+6	; 0x06
    b380:	9f 81       	ldd	r25, Y+7	; 0x07
    b382:	a8 85       	ldd	r26, Y+8	; 0x08
    b384:	b9 85       	ldd	r27, Y+9	; 0x09
    b386:	8a 83       	std	Y+2, r24	; 0x02
    b388:	9b 83       	std	Y+3, r25	; 0x03
    b38a:	ac 83       	std	Y+4, r26	; 0x04
    b38c:	bd 83       	std	Y+5, r27	; 0x05
    timers = timer;
    b38e:	d0 93 55 35 	sts	0x3555, r29
    b392:	c0 93 54 35 	sts	0x3554, r28
  }
}
    b396:	df 91       	pop	r29
    b398:	cf 91       	pop	r28
    b39a:	1f 91       	pop	r17
    b39c:	0f 91       	pop	r16
    b39e:	08 95       	ret

0000b3a0 <SYS_TimerInit>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerInit(void)
{
  timers = NULL;
    b3a0:	10 92 55 35 	sts	0x3555, r1
    b3a4:	10 92 54 35 	sts	0x3554, r1
    b3a8:	08 95       	ret

0000b3aa <SYS_TimerStop>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
    b3aa:	cf 93       	push	r28
    b3ac:	df 93       	push	r29
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    b3ae:	a0 91 54 35 	lds	r26, 0x3554
    b3b2:	b0 91 55 35 	lds	r27, 0x3555
    b3b6:	10 97       	sbiw	r26, 0x00	; 0
    b3b8:	a9 f1       	breq	.+106    	; 0xb424 <SYS_TimerStop+0x7a>
  {
    if (t == timer)
    b3ba:	a8 17       	cp	r26, r24
    b3bc:	b9 07       	cpc	r27, r25
    b3be:	69 f5       	brne	.+90     	; 0xb41a <SYS_TimerStop+0x70>
    b3c0:	0d c0       	rjmp	.+26     	; 0xb3dc <SYS_TimerStop+0x32>
    b3c2:	8e 17       	cp	r24, r30
    b3c4:	9f 07       	cpc	r25, r31
    b3c6:	11 f0       	breq	.+4      	; 0xb3cc <SYS_TimerStop+0x22>
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    b3c8:	df 01       	movw	r26, r30
    b3ca:	27 c0       	rjmp	.+78     	; 0xb41a <SYS_TimerStop+0x70>
  {
    if (t == timer)
    {
      if (prev)
    b3cc:	10 97       	sbiw	r26, 0x00	; 0
    b3ce:	29 f0       	breq	.+10     	; 0xb3da <SYS_TimerStop+0x30>
        prev->next = t->next;
    b3d0:	20 81       	ld	r18, Z
    b3d2:	31 81       	ldd	r19, Z+1	; 0x01
    b3d4:	2d 93       	st	X+, r18
    b3d6:	3c 93       	st	X, r19
    b3d8:	09 c0       	rjmp	.+18     	; 0xb3ec <SYS_TimerStop+0x42>
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    b3da:	df 01       	movw	r26, r30
    if (t == timer)
    {
      if (prev)
        prev->next = t->next;
      else
        timers = t->next;
    b3dc:	2d 91       	ld	r18, X+
    b3de:	3c 91       	ld	r19, X
    b3e0:	11 97       	sbiw	r26, 0x01	; 1
    b3e2:	30 93 55 35 	sts	0x3555, r19
    b3e6:	20 93 54 35 	sts	0x3554, r18
    b3ea:	fd 01       	movw	r30, r26

      if (t->next)
    b3ec:	01 90       	ld	r0, Z+
    b3ee:	f0 81       	ld	r31, Z
    b3f0:	e0 2d       	mov	r30, r0
    b3f2:	30 97       	sbiw	r30, 0x00	; 0
    b3f4:	b9 f0       	breq	.+46     	; 0xb424 <SYS_TimerStop+0x7a>
        t->next->timeout += timer->timeout;
    b3f6:	42 81       	ldd	r20, Z+2	; 0x02
    b3f8:	53 81       	ldd	r21, Z+3	; 0x03
    b3fa:	64 81       	ldd	r22, Z+4	; 0x04
    b3fc:	75 81       	ldd	r23, Z+5	; 0x05
    b3fe:	ec 01       	movw	r28, r24
    b400:	8a 81       	ldd	r24, Y+2	; 0x02
    b402:	9b 81       	ldd	r25, Y+3	; 0x03
    b404:	ac 81       	ldd	r26, Y+4	; 0x04
    b406:	bd 81       	ldd	r27, Y+5	; 0x05
    b408:	84 0f       	add	r24, r20
    b40a:	95 1f       	adc	r25, r21
    b40c:	a6 1f       	adc	r26, r22
    b40e:	b7 1f       	adc	r27, r23
    b410:	82 83       	std	Z+2, r24	; 0x02
    b412:	93 83       	std	Z+3, r25	; 0x03
    b414:	a4 83       	std	Z+4, r26	; 0x04
    b416:	b5 83       	std	Z+5, r27	; 0x05
    b418:	05 c0       	rjmp	.+10     	; 0xb424 <SYS_TimerStop+0x7a>
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    b41a:	ed 91       	ld	r30, X+
    b41c:	fc 91       	ld	r31, X
    b41e:	11 97       	sbiw	r26, 0x01	; 1
    b420:	30 97       	sbiw	r30, 0x00	; 0
    b422:	79 f6       	brne	.-98     	; 0xb3c2 <SYS_TimerStop+0x18>

      break;
    }
    prev = t;
  }
}
    b424:	df 91       	pop	r29
    b426:	cf 91       	pop	r28
    b428:	08 95       	ret

0000b42a <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    b42a:	e0 91 54 35 	lds	r30, 0x3554
    b42e:	f0 91 55 35 	lds	r31, 0x3555
    b432:	30 97       	sbiw	r30, 0x00	; 0
    b434:	71 f0       	breq	.+28     	; 0xb452 <SYS_TimerStarted+0x28>
    if (t == timer)
    b436:	e8 17       	cp	r30, r24
    b438:	f9 07       	cpc	r31, r25
    b43a:	21 f4       	brne	.+8      	; 0xb444 <SYS_TimerStarted+0x1a>
    b43c:	0c c0       	rjmp	.+24     	; 0xb456 <SYS_TimerStarted+0x2c>
    b43e:	8e 17       	cp	r24, r30
    b440:	9f 07       	cpc	r25, r31
    b442:	59 f0       	breq	.+22     	; 0xb45a <SYS_TimerStarted+0x30>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    b444:	01 90       	ld	r0, Z+
    b446:	f0 81       	ld	r31, Z
    b448:	e0 2d       	mov	r30, r0
    b44a:	30 97       	sbiw	r30, 0x00	; 0
    b44c:	c1 f7       	brne	.-16     	; 0xb43e <SYS_TimerStarted+0x14>
    if (t == timer)
      return true;
  return false;
    b44e:	80 e0       	ldi	r24, 0x00	; 0
    b450:	08 95       	ret
    b452:	80 e0       	ldi	r24, 0x00	; 0
    b454:	08 95       	ret
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    if (t == timer)
      return true;
    b456:	81 e0       	ldi	r24, 0x01	; 1
    b458:	08 95       	ret
    b45a:	81 e0       	ldi	r24, 0x01	; 1
  return false;
}
    b45c:	08 95       	ret

0000b45e <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    b45e:	cf 93       	push	r28
    b460:	df 93       	push	r29
    b462:	ec 01       	movw	r28, r24
  if (!SYS_TimerStarted(timer))
    b464:	e2 df       	rcall	.-60     	; 0xb42a <SYS_TimerStarted>
    b466:	81 11       	cpse	r24, r1
    b468:	02 c0       	rjmp	.+4      	; 0xb46e <SYS_TimerStart+0x10>
    placeTimer(timer);
    b46a:	ce 01       	movw	r24, r28
    b46c:	35 df       	rcall	.-406    	; 0xb2d8 <placeTimer>
}
    b46e:	df 91       	pop	r29
    b470:	cf 91       	pop	r28
    b472:	08 95       	ret

0000b474 <SYS_TimerTaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerTaskHandler(void)
{
    b474:	cf 92       	push	r12
    b476:	df 92       	push	r13
    b478:	ef 92       	push	r14
    b47a:	ff 92       	push	r15
    b47c:	cf 93       	push	r28
    b47e:	df 93       	push	r29
  uint32_t elapsed;
  static uint8_t prev;
  uint8_t new;

  if (halTimerIrqCount == prev)
    b480:	0e 94 16 14 	call	0x282c	; 0x282c <millis>
    b484:	20 91 53 35 	lds	r18, 0x3553
    b488:	c2 2e       	mov	r12, r18
    b48a:	d1 2c       	mov	r13, r1
    b48c:	e1 2c       	mov	r14, r1
    b48e:	f1 2c       	mov	r15, r1
    b490:	6c 15       	cp	r22, r12
    b492:	7d 05       	cpc	r23, r13
    b494:	8e 05       	cpc	r24, r14
    b496:	9f 05       	cpc	r25, r15
    b498:	09 f4       	brne	.+2      	; 0xb49c <SYS_TimerTaskHandler+0x28>
    b49a:	48 c0       	rjmp	.+144    	; 0xb52c <SYS_TimerTaskHandler+0xb8>
    return;

  new = halTimerIrqCount;
    b49c:	0e 94 16 14 	call	0x282c	; 0x282c <millis>
  // note that this uint8_t cast is needed since subtraction performs
  // "integral promotion", which convers new and prev to (signed) int,
  // making the result a signed int as well.
  elapsed = (uint8_t)(new - prev) * HAL_TIMER_INTERVAL;
    b4a0:	80 91 53 35 	lds	r24, 0x3553
    b4a4:	c6 2e       	mov	r12, r22
    b4a6:	c8 1a       	sub	r12, r24
    b4a8:	d1 2c       	mov	r13, r1
    b4aa:	e1 2c       	mov	r14, r1
    b4ac:	f1 2c       	mov	r15, r1
  prev = new;
    b4ae:	60 93 53 35 	sts	0x3553, r22

  while (timers && (timers->timeout <= elapsed))
    b4b2:	c0 91 54 35 	lds	r28, 0x3554
    b4b6:	d0 91 55 35 	lds	r29, 0x3555
    b4ba:	20 97       	sbiw	r28, 0x00	; 0
    b4bc:	b9 f1       	breq	.+110    	; 0xb52c <SYS_TimerTaskHandler+0xb8>
    b4be:	4a 81       	ldd	r20, Y+2	; 0x02
    b4c0:	5b 81       	ldd	r21, Y+3	; 0x03
    b4c2:	6c 81       	ldd	r22, Y+4	; 0x04
    b4c4:	7d 81       	ldd	r23, Y+5	; 0x05
    b4c6:	c4 16       	cp	r12, r20
    b4c8:	d5 06       	cpc	r13, r21
    b4ca:	e6 06       	cpc	r14, r22
    b4cc:	f7 06       	cpc	r15, r23
    b4ce:	10 f1       	brcs	.+68     	; 0xb514 <SYS_TimerTaskHandler+0xa0>
  {
    SYS_Timer_t *timer = timers;

    elapsed -= timers->timeout;
    b4d0:	c4 1a       	sub	r12, r20
    b4d2:	d5 0a       	sbc	r13, r21
    b4d4:	e6 0a       	sbc	r14, r22
    b4d6:	f7 0a       	sbc	r15, r23
    timers = timers->next;
    b4d8:	88 81       	ld	r24, Y
    b4da:	99 81       	ldd	r25, Y+1	; 0x01
    b4dc:	90 93 55 35 	sts	0x3555, r25
    b4e0:	80 93 54 35 	sts	0x3554, r24
    if (SYS_TIMER_PERIODIC_MODE == timer->mode)
    b4e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    b4e6:	81 30       	cpi	r24, 0x01	; 1
    b4e8:	11 f4       	brne	.+4      	; 0xb4ee <SYS_TimerTaskHandler+0x7a>
      placeTimer(timer);
    b4ea:	ce 01       	movw	r24, r28
    b4ec:	f5 de       	rcall	.-534    	; 0xb2d8 <placeTimer>
    timer->handler(timer);
    b4ee:	eb 85       	ldd	r30, Y+11	; 0x0b
    b4f0:	fc 85       	ldd	r31, Y+12	; 0x0c
    b4f2:	ce 01       	movw	r24, r28
    b4f4:	19 95       	eicall
  // "integral promotion", which convers new and prev to (signed) int,
  // making the result a signed int as well.
  elapsed = (uint8_t)(new - prev) * HAL_TIMER_INTERVAL;
  prev = new;

  while (timers && (timers->timeout <= elapsed))
    b4f6:	c0 91 54 35 	lds	r28, 0x3554
    b4fa:	d0 91 55 35 	lds	r29, 0x3555
    b4fe:	20 97       	sbiw	r28, 0x00	; 0
    b500:	a9 f0       	breq	.+42     	; 0xb52c <SYS_TimerTaskHandler+0xb8>
    b502:	4a 81       	ldd	r20, Y+2	; 0x02
    b504:	5b 81       	ldd	r21, Y+3	; 0x03
    b506:	6c 81       	ldd	r22, Y+4	; 0x04
    b508:	7d 81       	ldd	r23, Y+5	; 0x05
    b50a:	c4 16       	cp	r12, r20
    b50c:	d5 06       	cpc	r13, r21
    b50e:	e6 06       	cpc	r14, r22
    b510:	f7 06       	cpc	r15, r23
    b512:	f0 f6       	brcc	.-68     	; 0xb4d0 <SYS_TimerTaskHandler+0x5c>
      placeTimer(timer);
    timer->handler(timer);
  }

  if (timers)
    timers->timeout -= elapsed;
    b514:	4a 81       	ldd	r20, Y+2	; 0x02
    b516:	5b 81       	ldd	r21, Y+3	; 0x03
    b518:	6c 81       	ldd	r22, Y+4	; 0x04
    b51a:	7d 81       	ldd	r23, Y+5	; 0x05
    b51c:	4c 19       	sub	r20, r12
    b51e:	5d 09       	sbc	r21, r13
    b520:	6e 09       	sbc	r22, r14
    b522:	7f 09       	sbc	r23, r15
    b524:	4a 83       	std	Y+2, r20	; 0x02
    b526:	5b 83       	std	Y+3, r21	; 0x03
    b528:	6c 83       	std	Y+4, r22	; 0x04
    b52a:	7d 83       	std	Y+5, r23	; 0x05
}
    b52c:	df 91       	pop	r29
    b52e:	cf 91       	pop	r28
    b530:	ff 90       	pop	r15
    b532:	ef 90       	pop	r14
    b534:	df 90       	pop	r13
    b536:	cf 90       	pop	r12
    b538:	08 95       	ret

0000b53a <_ZN4Pbbe12stringLengthEPKNS_6EepromEj>:
}

uint8_t Pbbe::uniqueIdChecksum(uint8_t *buf)
{
  return pinoccio_crc_generate<uint8_t>(PBBP::UNIQUE_ID_CRC_POLY, 0, buf, PBBP::UNIQUE_ID_LENGTH - 1);
}
    b53a:	fc 01       	movw	r30, r24
    b53c:	40 81       	ld	r20, Z
    b53e:	50 e0       	ldi	r21, 0x00	; 0
    b540:	9b 01       	movw	r18, r22
    b542:	2d 5f       	subi	r18, 0xFD	; 253
    b544:	3f 4f       	sbci	r19, 0xFF	; 255
    b546:	42 17       	cp	r20, r18
    b548:	53 07       	cpc	r21, r19
    b54a:	b0 f0       	brcs	.+44     	; 0xb578 <_ZN4Pbbe12stringLengthEPKNS_6EepromEj+0x3e>
    b54c:	42 50       	subi	r20, 0x02	; 2
    b54e:	51 09       	sbc	r21, r1
    b550:	46 1b       	sub	r20, r22
    b552:	57 0b       	sbc	r21, r23
    b554:	fb 01       	movw	r30, r22
    b556:	31 96       	adiw	r30, 0x01	; 1
    b558:	e8 0f       	add	r30, r24
    b55a:	f9 1f       	adc	r31, r25
    b55c:	21 e0       	ldi	r18, 0x01	; 1
    b55e:	30 e0       	ldi	r19, 0x00	; 0
    b560:	81 91       	ld	r24, Z+
    b562:	87 fd       	sbrc	r24, 7
    b564:	07 c0       	rjmp	.+14     	; 0xb574 <_ZN4Pbbe12stringLengthEPKNS_6EepromEj+0x3a>
    b566:	c9 01       	movw	r24, r18
    b568:	01 96       	adiw	r24, 0x01	; 1
    b56a:	42 17       	cp	r20, r18
    b56c:	53 07       	cpc	r21, r19
    b56e:	20 f0       	brcs	.+8      	; 0xb578 <_ZN4Pbbe12stringLengthEPKNS_6EepromEj+0x3e>
    b570:	9c 01       	movw	r18, r24
    b572:	f6 cf       	rjmp	.-20     	; 0xb560 <_ZN4Pbbe12stringLengthEPKNS_6EepromEj+0x26>
    b574:	c9 01       	movw	r24, r18
    b576:	08 95       	ret
    b578:	80 e0       	ldi	r24, 0x00	; 0
    b57a:	90 e0       	ldi	r25, 0x00	; 0
    b57c:	08 95       	ret

0000b57e <_ZN4Pbbe18parseMinimalHeaderEPKNS_6EepromEPNS_13MinimalHeaderE>:
    b57e:	cf 93       	push	r28
    b580:	df 93       	push	r29
    b582:	eb 01       	movw	r28, r22
    b584:	00 97       	sbiw	r24, 0x00	; 0
    b586:	c1 f0       	breq	.+48     	; 0xb5b8 <_ZN4Pbbe18parseMinimalHeaderEPKNS_6EepromEPNS_13MinimalHeaderE+0x3a>
    b588:	fc 01       	movw	r30, r24
    b58a:	20 81       	ld	r18, Z
    b58c:	23 30       	cpi	r18, 0x03	; 3
    b58e:	a0 f0       	brcs	.+40     	; 0xb5b8 <_ZN4Pbbe18parseMinimalHeaderEPKNS_6EepromEPNS_13MinimalHeaderE+0x3a>
    b590:	31 81       	ldd	r19, Z+1	; 0x01
    b592:	38 83       	st	Y, r19
    b594:	4c e0       	ldi	r20, 0x0C	; 12
    b596:	49 83       	std	Y+1, r20	; 0x01
    b598:	31 30       	cpi	r19, 0x01	; 1
    b59a:	71 f4       	brne	.+28     	; 0xb5b8 <_ZN4Pbbe18parseMinimalHeaderEPKNS_6EepromEPNS_13MinimalHeaderE+0x3a>
    b59c:	30 e0       	ldi	r19, 0x00	; 0
    b59e:	22 50       	subi	r18, 0x02	; 2
    b5a0:	31 09       	sbc	r19, r1
    b5a2:	2d 30       	cpi	r18, 0x0D	; 13
    b5a4:	31 05       	cpc	r19, r1
    b5a6:	40 f0       	brcs	.+16     	; 0xb5b8 <_ZN4Pbbe18parseMinimalHeaderEPKNS_6EepromEPNS_13MinimalHeaderE+0x3a>
    b5a8:	6c e0       	ldi	r22, 0x0C	; 12
    b5aa:	70 e0       	ldi	r23, 0x00	; 0
    b5ac:	c6 df       	rcall	.-116    	; 0xb53a <_ZN4Pbbe12stringLengthEPKNS_6EepromEj>
    b5ae:	98 2f       	mov	r25, r24
    b5b0:	8a 83       	std	Y+2, r24	; 0x02
    b5b2:	81 e0       	ldi	r24, 0x01	; 1
    b5b4:	91 11       	cpse	r25, r1
    b5b6:	01 c0       	rjmp	.+2      	; 0xb5ba <_ZN4Pbbe18parseMinimalHeaderEPKNS_6EepromEPNS_13MinimalHeaderE+0x3c>
    b5b8:	80 e0       	ldi	r24, 0x00	; 0
    b5ba:	df 91       	pop	r29
    b5bc:	cf 91       	pop	r28
    b5be:	08 95       	ret

0000b5c0 <_ZN4Pbbe13extractStringEPKNS_6EepromEjPcj>:
    b5c0:	cf 93       	push	r28
    b5c2:	df 93       	push	r29
    b5c4:	fa 01       	movw	r30, r20
    b5c6:	e2 0f       	add	r30, r18
    b5c8:	f3 1f       	adc	r31, r19
    b5ca:	10 82       	st	Z, r1
    b5cc:	f9 01       	movw	r30, r18
    b5ce:	31 97       	sbiw	r30, 0x01	; 1
    b5d0:	da 01       	movw	r26, r20
    b5d2:	ae 0f       	add	r26, r30
    b5d4:	bf 1f       	adc	r27, r31
    b5d6:	68 0f       	add	r22, r24
    b5d8:	79 1f       	adc	r23, r25
    b5da:	eb 01       	movw	r28, r22
    b5dc:	c2 0f       	add	r28, r18
    b5de:	d3 1f       	adc	r29, r19
    b5e0:	88 81       	ld	r24, Y
    b5e2:	8f 77       	andi	r24, 0x7F	; 127
    b5e4:	8c 93       	st	X, r24
    b5e6:	9f 01       	movw	r18, r30
    b5e8:	21 50       	subi	r18, 0x01	; 1
    b5ea:	31 09       	sbc	r19, r1
    b5ec:	48 f0       	brcs	.+18     	; 0xb600 <_ZN4Pbbe13extractStringEPKNS_6EepromEjPcj+0x40>
    b5ee:	fb 01       	movw	r30, r22
    b5f0:	e2 0f       	add	r30, r18
    b5f2:	f3 1f       	adc	r31, r19
    b5f4:	81 81       	ldd	r24, Z+1	; 0x01
    b5f6:	fa 01       	movw	r30, r20
    b5f8:	e2 0f       	add	r30, r18
    b5fa:	f3 1f       	adc	r31, r19
    b5fc:	80 83       	st	Z, r24
    b5fe:	f4 cf       	rjmp	.-24     	; 0xb5e8 <_ZN4Pbbe13extractStringEPKNS_6EepromEjPcj+0x28>
    b600:	df 91       	pop	r29
    b602:	cf 91       	pop	r28
    b604:	08 95       	ret

0000b606 <_ZN4Pbbe12parseHeaderAEPKNS_6EepromE>:
    b606:	cf 92       	push	r12
    b608:	df 92       	push	r13
    b60a:	ef 92       	push	r14
    b60c:	ff 92       	push	r15
    b60e:	0f 93       	push	r16
    b610:	1f 93       	push	r17
    b612:	cf 93       	push	r28
    b614:	df 93       	push	r29
    b616:	00 d0       	rcall	.+0      	; 0xb618 <_ZN4Pbbe12parseHeaderAEPKNS_6EepromE+0x12>
    b618:	cd b7       	in	r28, 0x3d	; 61
    b61a:	de b7       	in	r29, 0x3e	; 62
    b61c:	7c 01       	movw	r14, r24
    b61e:	be 01       	movw	r22, r28
    b620:	6f 5f       	subi	r22, 0xFF	; 255
    b622:	7f 4f       	sbci	r23, 0xFF	; 255
    b624:	ac df       	rcall	.-168    	; 0xb57e <_ZN4Pbbe18parseMinimalHeaderEPKNS_6EepromEPNS_13MinimalHeaderE>
    b626:	88 23       	and	r24, r24
    b628:	29 f1       	breq	.+74     	; 0xb674 <_ZN4Pbbe12parseHeaderAEPKNS_6EepromE+0x6e>
    b62a:	cb 80       	ldd	r12, Y+3	; 0x03
    b62c:	d1 2c       	mov	r13, r1
    b62e:	c6 01       	movw	r24, r12
    b630:	06 96       	adiw	r24, 0x06	; 6
    b632:	0e 94 2e b0 	call	0x1605c	; 0x1605c <malloc>
    b636:	8c 01       	movw	r16, r24
    b638:	89 81       	ldd	r24, Y+1	; 0x01
    b63a:	f8 01       	movw	r30, r16
    b63c:	80 83       	st	Z, r24
    b63e:	f7 01       	movw	r30, r14
    b640:	82 81       	ldd	r24, Z+2	; 0x02
    b642:	f8 01       	movw	r30, r16
    b644:	81 83       	std	Z+1, r24	; 0x01
    b646:	f7 01       	movw	r30, r14
    b648:	83 81       	ldd	r24, Z+3	; 0x03
    b64a:	f8 01       	movw	r30, r16
    b64c:	82 83       	std	Z+2, r24	; 0x02
    b64e:	f7 01       	movw	r30, r14
    b650:	84 85       	ldd	r24, Z+12	; 0x0c
    b652:	f8 01       	movw	r30, r16
    b654:	83 83       	std	Z+3, r24	; 0x03
    b656:	a8 01       	movw	r20, r16
    b658:	4b 5f       	subi	r20, 0xFB	; 251
    b65a:	5f 4f       	sbci	r21, 0xFF	; 255
    b65c:	6a 81       	ldd	r22, Y+2	; 0x02
    b65e:	70 e0       	ldi	r23, 0x00	; 0
    b660:	96 01       	movw	r18, r12
    b662:	c7 01       	movw	r24, r14
    b664:	ad df       	rcall	.-166    	; 0xb5c0 <_ZN4Pbbe13extractStringEPKNS_6EepromEjPcj>
    b666:	8b 81       	ldd	r24, Y+3	; 0x03
    b668:	9a 81       	ldd	r25, Y+2	; 0x02
    b66a:	89 0f       	add	r24, r25
    b66c:	f8 01       	movw	r30, r16
    b66e:	84 83       	std	Z+4, r24	; 0x04
    b670:	c8 01       	movw	r24, r16
    b672:	02 c0       	rjmp	.+4      	; 0xb678 <_ZN4Pbbe12parseHeaderAEPKNS_6EepromE+0x72>
    b674:	80 e0       	ldi	r24, 0x00	; 0
    b676:	90 e0       	ldi	r25, 0x00	; 0
    b678:	0f 90       	pop	r0
    b67a:	0f 90       	pop	r0
    b67c:	0f 90       	pop	r0
    b67e:	df 91       	pop	r29
    b680:	cf 91       	pop	r28
    b682:	1f 91       	pop	r17
    b684:	0f 91       	pop	r16
    b686:	ff 90       	pop	r15
    b688:	ef 90       	pop	r14
    b68a:	df 90       	pop	r13
    b68c:	cf 90       	pop	r12
    b68e:	08 95       	ret

0000b690 <_ZN4Pbbe22parseMinimalDescriptorEPKNS_6EepromEjPNS_17MinimalDescriptorE>:
    b690:	0f 93       	push	r16
    b692:	1f 93       	push	r17
    b694:	cf 93       	push	r28
    b696:	df 93       	push	r29
    b698:	ea 01       	movw	r28, r20
    b69a:	fc 01       	movw	r30, r24
    b69c:	20 81       	ld	r18, Z
    b69e:	30 e0       	ldi	r19, 0x00	; 0
    b6a0:	ab 01       	movw	r20, r22
    b6a2:	4d 5f       	subi	r20, 0xFD	; 253
    b6a4:	5f 4f       	sbci	r21, 0xFF	; 255
    b6a6:	24 17       	cp	r18, r20
    b6a8:	35 07       	cpc	r19, r21
    b6aa:	08 f4       	brcc	.+2      	; 0xb6ae <_ZN4Pbbe22parseMinimalDescriptorEPKNS_6EepromEjPNS_17MinimalDescriptorE+0x1e>
    b6ac:	4e c0       	rjmp	.+156    	; 0xb74a <_ZN4Pbbe22parseMinimalDescriptorEPKNS_6EepromEjPNS_17MinimalDescriptorE+0xba>
    b6ae:	fc 01       	movw	r30, r24
    b6b0:	e6 0f       	add	r30, r22
    b6b2:	f7 1f       	adc	r31, r23
    b6b4:	11 81       	ldd	r17, Z+1	; 0x01
    b6b6:	18 83       	st	Y, r17
    b6b8:	4f ef       	ldi	r20, 0xFF	; 255
    b6ba:	41 0f       	add	r20, r17
    b6bc:	48 30       	cpi	r20, 0x08	; 8
    b6be:	08 f0       	brcs	.+2      	; 0xb6c2 <_ZN4Pbbe22parseMinimalDescriptorEPKNS_6EepromEjPNS_17MinimalDescriptorE+0x32>
    b6c0:	44 c0       	rjmp	.+136    	; 0xb74a <_ZN4Pbbe22parseMinimalDescriptorEPKNS_6EepromEjPNS_17MinimalDescriptorE+0xba>
    b6c2:	22 50       	subi	r18, 0x02	; 2
    b6c4:	31 09       	sbc	r19, r1
    b6c6:	26 1b       	sub	r18, r22
    b6c8:	37 0b       	sbc	r19, r23
    b6ca:	41 2f       	mov	r20, r17
    b6cc:	50 e0       	ldi	r21, 0x00	; 0
    b6ce:	ab e0       	ldi	r26, 0x0B	; 11
    b6d0:	1a 9f       	mul	r17, r26
    b6d2:	f0 01       	movw	r30, r0
    b6d4:	11 24       	eor	r1, r1
    b6d6:	ed 5e       	subi	r30, 0xED	; 237
    b6d8:	f7 4f       	sbci	r31, 0xF7	; 247
    b6da:	04 91       	lpm	r16, Z
    b6dc:	09 83       	std	Y+1, r16	; 0x01
    b6de:	ab e0       	ldi	r26, 0x0B	; 11
    b6e0:	a4 9f       	mul	r26, r20
    b6e2:	f0 01       	movw	r30, r0
    b6e4:	a5 9f       	mul	r26, r21
    b6e6:	f0 0d       	add	r31, r0
    b6e8:	11 24       	eor	r1, r1
    b6ea:	ec 5e       	subi	r30, 0xEC	; 236
    b6ec:	f7 4f       	sbci	r31, 0xF7	; 247
    b6ee:	e4 91       	lpm	r30, Z
    b6f0:	40 2f       	mov	r20, r16
    b6f2:	50 e0       	ldi	r21, 0x00	; 0
    b6f4:	24 17       	cp	r18, r20
    b6f6:	35 07       	cpc	r19, r21
    b6f8:	40 f1       	brcs	.+80     	; 0xb74a <_ZN4Pbbe22parseMinimalDescriptorEPKNS_6EepromEjPNS_17MinimalDescriptorE+0xba>
    b6fa:	db 01       	movw	r26, r22
    b6fc:	11 96       	adiw	r26, 0x01	; 1
    b6fe:	a8 0f       	add	r26, r24
    b700:	b9 1f       	adc	r27, r25
    b702:	15 30       	cpi	r17, 0x05	; 5
    b704:	99 f0       	breq	.+38     	; 0xb72c <_ZN4Pbbe22parseMinimalDescriptorEPKNS_6EepromEjPNS_17MinimalDescriptorE+0x9c>
    b706:	18 f4       	brcc	.+6      	; 0xb70e <_ZN4Pbbe22parseMinimalDescriptorEPKNS_6EepromEjPNS_17MinimalDescriptorE+0x7e>
    b708:	13 30       	cpi	r17, 0x03	; 3
    b70a:	21 f0       	breq	.+8      	; 0xb714 <_ZN4Pbbe22parseMinimalDescriptorEPKNS_6EepromEjPNS_17MinimalDescriptorE+0x84>
    b70c:	13 c0       	rjmp	.+38     	; 0xb734 <_ZN4Pbbe22parseMinimalDescriptorEPKNS_6EepromEjPNS_17MinimalDescriptorE+0xa4>
    b70e:	18 30       	cpi	r17, 0x08	; 8
    b710:	50 f0       	brcs	.+20     	; 0xb726 <_ZN4Pbbe22parseMinimalDescriptorEPKNS_6EepromEjPNS_17MinimalDescriptorE+0x96>
    b712:	10 c0       	rjmp	.+32     	; 0xb734 <_ZN4Pbbe22parseMinimalDescriptorEPKNS_6EepromEjPNS_17MinimalDescriptorE+0xa4>
    b714:	11 96       	adiw	r26, 0x01	; 1
    b716:	4c 91       	ld	r20, X
    b718:	11 97       	sbiw	r26, 0x01	; 1
    b71a:	40 0f       	add	r20, r16
    b71c:	49 83       	std	Y+1, r20	; 0x01
    b71e:	50 e0       	ldi	r21, 0x00	; 0
    b720:	24 17       	cp	r18, r20
    b722:	35 07       	cpc	r19, r21
    b724:	90 f0       	brcs	.+36     	; 0xb74a <_ZN4Pbbe22parseMinimalDescriptorEPKNS_6EepromEjPNS_17MinimalDescriptorE+0xba>
    b726:	11 96       	adiw	r26, 0x01	; 1
    b728:	2c 91       	ld	r18, X
    b72a:	02 c0       	rjmp	.+4      	; 0xb730 <_ZN4Pbbe22parseMinimalDescriptorEPKNS_6EepromEjPNS_17MinimalDescriptorE+0xa0>
    b72c:	13 96       	adiw	r26, 0x03	; 3
    b72e:	2c 91       	ld	r18, X
    b730:	27 ff       	sbrs	r18, 7
    b732:	0d c0       	rjmp	.+26     	; 0xb74e <_ZN4Pbbe22parseMinimalDescriptorEPKNS_6EepromEjPNS_17MinimalDescriptorE+0xbe>
    b734:	ee 23       	and	r30, r30
    b736:	59 f0       	breq	.+22     	; 0xb74e <_ZN4Pbbe22parseMinimalDescriptorEPKNS_6EepromEjPNS_17MinimalDescriptorE+0xbe>
    b738:	29 81       	ldd	r18, Y+1	; 0x01
    b73a:	62 0f       	add	r22, r18
    b73c:	71 1d       	adc	r23, r1
    b73e:	fd de       	rcall	.-518    	; 0xb53a <_ZN4Pbbe12stringLengthEPKNS_6EepromEj>
    b740:	98 2f       	mov	r25, r24
    b742:	8a 83       	std	Y+2, r24	; 0x02
    b744:	81 e0       	ldi	r24, 0x01	; 1
    b746:	91 11       	cpse	r25, r1
    b748:	04 c0       	rjmp	.+8      	; 0xb752 <_ZN4Pbbe22parseMinimalDescriptorEPKNS_6EepromEjPNS_17MinimalDescriptorE+0xc2>
    b74a:	80 e0       	ldi	r24, 0x00	; 0
    b74c:	02 c0       	rjmp	.+4      	; 0xb752 <_ZN4Pbbe22parseMinimalDescriptorEPKNS_6EepromEjPNS_17MinimalDescriptorE+0xc2>
    b74e:	1a 82       	std	Y+2, r1	; 0x02
    b750:	81 e0       	ldi	r24, 0x01	; 1
    b752:	df 91       	pop	r29
    b754:	cf 91       	pop	r28
    b756:	1f 91       	pop	r17
    b758:	0f 91       	pop	r16
    b75a:	08 95       	ret

0000b75c <_ZN4Pbbe20parseDescriptorListAEPKNS_6EepromEPKNS_6HeaderE>:
    b75c:	7f 92       	push	r7
    b75e:	8f 92       	push	r8
    b760:	9f 92       	push	r9
    b762:	af 92       	push	r10
    b764:	bf 92       	push	r11
    b766:	cf 92       	push	r12
    b768:	df 92       	push	r13
    b76a:	ef 92       	push	r14
    b76c:	ff 92       	push	r15
    b76e:	0f 93       	push	r16
    b770:	1f 93       	push	r17
    b772:	cf 93       	push	r28
    b774:	df 93       	push	r29
    b776:	00 d0       	rcall	.+0      	; 0xb778 <_ZN4Pbbe20parseDescriptorListAEPKNS_6EepromEPKNS_6HeaderE+0x1c>
    b778:	cd b7       	in	r28, 0x3d	; 61
    b77a:	de b7       	in	r29, 0x3e	; 62
    b77c:	8c 01       	movw	r16, r24
    b77e:	61 15       	cp	r22, r1
    b780:	71 05       	cpc	r23, r1
    b782:	19 f0       	breq	.+6      	; 0xb78a <_ZN4Pbbe20parseDescriptorListAEPKNS_6EepromEPKNS_6HeaderE+0x2e>
    b784:	fb 01       	movw	r30, r22
    b786:	b4 80       	ldd	r11, Z+4	; 0x04
    b788:	09 c0       	rjmp	.+18     	; 0xb79c <_ZN4Pbbe20parseDescriptorListAEPKNS_6EepromEPKNS_6HeaderE+0x40>
    b78a:	be 01       	movw	r22, r28
    b78c:	6f 5f       	subi	r22, 0xFF	; 255
    b78e:	7f 4f       	sbci	r23, 0xFF	; 255
    b790:	f6 de       	rcall	.-532    	; 0xb57e <_ZN4Pbbe18parseMinimalHeaderEPKNS_6EepromEPNS_13MinimalHeaderE>
    b792:	88 23       	and	r24, r24
    b794:	d9 f1       	breq	.+118    	; 0xb80c <_ZN4Pbbe20parseDescriptorListAEPKNS_6EepromEPKNS_6HeaderE+0xb0>
    b796:	bb 80       	ldd	r11, Y+3	; 0x03
    b798:	8a 81       	ldd	r24, Y+2	; 0x02
    b79a:	b8 0e       	add	r11, r24
    b79c:	fb 2c       	mov	r15, r11
    b79e:	d1 2c       	mov	r13, r1
    b7a0:	6f 2d       	mov	r22, r15
    b7a2:	70 e0       	ldi	r23, 0x00	; 0
    b7a4:	f8 01       	movw	r30, r16
    b7a6:	80 81       	ld	r24, Z
    b7a8:	90 e0       	ldi	r25, 0x00	; 0
    b7aa:	02 97       	sbiw	r24, 0x02	; 2
    b7ac:	68 17       	cp	r22, r24
    b7ae:	79 07       	cpc	r23, r25
    b7b0:	ac f4       	brge	.+42     	; 0xb7dc <_ZN4Pbbe20parseDescriptorListAEPKNS_6EepromEPKNS_6HeaderE+0x80>
    b7b2:	f8 01       	movw	r30, r16
    b7b4:	e6 0f       	add	r30, r22
    b7b6:	f7 1f       	adc	r31, r23
    b7b8:	81 81       	ldd	r24, Z+1	; 0x01
    b7ba:	8f 3f       	cpi	r24, 0xFF	; 255
    b7bc:	11 f4       	brne	.+4      	; 0xb7c2 <_ZN4Pbbe20parseDescriptorListAEPKNS_6EepromEPKNS_6HeaderE+0x66>
    b7be:	f3 94       	inc	r15
    b7c0:	ef cf       	rjmp	.-34     	; 0xb7a0 <_ZN4Pbbe20parseDescriptorListAEPKNS_6EepromEPKNS_6HeaderE+0x44>
    b7c2:	ae 01       	movw	r20, r28
    b7c4:	4f 5f       	subi	r20, 0xFF	; 255
    b7c6:	5f 4f       	sbci	r21, 0xFF	; 255
    b7c8:	c8 01       	movw	r24, r16
    b7ca:	62 df       	rcall	.-316    	; 0xb690 <_ZN4Pbbe22parseMinimalDescriptorEPKNS_6EepromEjPNS_17MinimalDescriptorE>
    b7cc:	88 23       	and	r24, r24
    b7ce:	f1 f0       	breq	.+60     	; 0xb80c <_ZN4Pbbe20parseDescriptorListAEPKNS_6EepromEPKNS_6HeaderE+0xb0>
    b7d0:	d3 94       	inc	r13
    b7d2:	8b 81       	ldd	r24, Y+3	; 0x03
    b7d4:	9a 81       	ldd	r25, Y+2	; 0x02
    b7d6:	89 0f       	add	r24, r25
    b7d8:	f8 0e       	add	r15, r24
    b7da:	e2 cf       	rjmp	.-60     	; 0xb7a0 <_ZN4Pbbe20parseDescriptorListAEPKNS_6EepromEPKNS_6HeaderE+0x44>
    b7dc:	f7 e0       	ldi	r31, 0x07	; 7
    b7de:	df 9e       	mul	r13, r31
    b7e0:	c0 01       	movw	r24, r0
    b7e2:	11 24       	eor	r1, r1
    b7e4:	01 96       	adiw	r24, 0x01	; 1
    b7e6:	0e 94 2e b0 	call	0x1605c	; 0x1605c <malloc>
    b7ea:	7c 01       	movw	r14, r24
    b7ec:	fc 01       	movw	r30, r24
    b7ee:	d0 82       	st	Z, r13
    b7f0:	91 2c       	mov	r9, r1
    b7f2:	81 2c       	mov	r8, r1
    b7f4:	a1 2c       	mov	r10, r1
    b7f6:	87 e0       	ldi	r24, 0x07	; 7
    b7f8:	78 2e       	mov	r7, r24
    b7fa:	11 c0       	rjmp	.+34     	; 0xb81e <_ZN4Pbbe20parseDescriptorListAEPKNS_6EepromEPKNS_6HeaderE+0xc2>
    b7fc:	ae 01       	movw	r20, r28
    b7fe:	4f 5f       	subi	r20, 0xFF	; 255
    b800:	5f 4f       	sbci	r21, 0xFF	; 255
    b802:	b6 01       	movw	r22, r12
    b804:	c8 01       	movw	r24, r16
    b806:	44 df       	rcall	.-376    	; 0xb690 <_ZN4Pbbe22parseMinimalDescriptorEPKNS_6EepromEjPNS_17MinimalDescriptorE>
    b808:	81 11       	cpse	r24, r1
    b80a:	13 c0       	rjmp	.+38     	; 0xb832 <_ZN4Pbbe20parseDescriptorListAEPKNS_6EepromEPKNS_6HeaderE+0xd6>
    b80c:	90 e0       	ldi	r25, 0x00	; 0
    b80e:	2d c0       	rjmp	.+90     	; 0xb86a <_ZN4Pbbe20parseDescriptorListAEPKNS_6EepromEPKNS_6HeaderE+0x10e>
    b810:	f8 01       	movw	r30, r16
    b812:	ec 0d       	add	r30, r12
    b814:	fd 1d       	adc	r31, r13
    b816:	81 81       	ldd	r24, Z+1	; 0x01
    b818:	8f 3f       	cpi	r24, 0xFF	; 255
    b81a:	81 f7       	brne	.-32     	; 0xb7fc <_ZN4Pbbe20parseDescriptorListAEPKNS_6EepromEPKNS_6HeaderE+0xa0>
    b81c:	b3 94       	inc	r11
    b81e:	cb 2c       	mov	r12, r11
    b820:	d1 2c       	mov	r13, r1
    b822:	f8 01       	movw	r30, r16
    b824:	80 81       	ld	r24, Z
    b826:	90 e0       	ldi	r25, 0x00	; 0
    b828:	02 97       	sbiw	r24, 0x02	; 2
    b82a:	c8 16       	cp	r12, r24
    b82c:	d9 06       	cpc	r13, r25
    b82e:	84 f3       	brlt	.-32     	; 0xb810 <_ZN4Pbbe20parseDescriptorListAEPKNS_6EepromEPKNS_6HeaderE+0xb4>
    b830:	1b c0       	rjmp	.+54     	; 0xb868 <_ZN4Pbbe20parseDescriptorListAEPKNS_6EepromEPKNS_6HeaderE+0x10c>
    b832:	f7 01       	movw	r30, r14
    b834:	7a 9c       	mul	r7, r10
    b836:	e0 0d       	add	r30, r0
    b838:	f1 1d       	adc	r31, r1
    b83a:	11 24       	eor	r1, r1
    b83c:	31 96       	adiw	r30, 0x01	; 1
    b83e:	89 81       	ldd	r24, Y+1	; 0x01
    b840:	80 83       	st	Z, r24
    b842:	d2 82       	std	Z+2, r13	; 0x02
    b844:	c1 82       	std	Z+1, r12	; 0x01
    b846:	16 82       	std	Z+6, r1	; 0x06
    b848:	15 82       	std	Z+5, r1	; 0x05
    b84a:	81 30       	cpi	r24, 0x01	; 1
    b84c:	29 f4       	brne	.+10     	; 0xb858 <_ZN4Pbbe20parseDescriptorListAEPKNS_6EepromEPKNS_6HeaderE+0xfc>
    b84e:	14 82       	std	Z+4, r1	; 0x04
    b850:	13 82       	std	Z+3, r1	; 0x03
    b852:	9e 2e       	mov	r9, r30
    b854:	8f 2e       	mov	r8, r31
    b856:	02 c0       	rjmp	.+4      	; 0xb85c <_ZN4Pbbe20parseDescriptorListAEPKNS_6EepromEPKNS_6HeaderE+0x100>
    b858:	93 82       	std	Z+3, r9	; 0x03
    b85a:	84 82       	std	Z+4, r8	; 0x04
    b85c:	a3 94       	inc	r10
    b85e:	8b 81       	ldd	r24, Y+3	; 0x03
    b860:	9a 81       	ldd	r25, Y+2	; 0x02
    b862:	89 0f       	add	r24, r25
    b864:	b8 0e       	add	r11, r24
    b866:	db cf       	rjmp	.-74     	; 0xb81e <_ZN4Pbbe20parseDescriptorListAEPKNS_6EepromEPKNS_6HeaderE+0xc2>
    b868:	c7 01       	movw	r24, r14
    b86a:	0f 90       	pop	r0
    b86c:	0f 90       	pop	r0
    b86e:	0f 90       	pop	r0
    b870:	df 91       	pop	r29
    b872:	cf 91       	pop	r28
    b874:	1f 91       	pop	r17
    b876:	0f 91       	pop	r16
    b878:	ff 90       	pop	r15
    b87a:	ef 90       	pop	r14
    b87c:	df 90       	pop	r13
    b87e:	cf 90       	pop	r12
    b880:	bf 90       	pop	r11
    b882:	af 90       	pop	r10
    b884:	9f 90       	pop	r9
    b886:	8f 90       	pop	r8
    b888:	7f 90       	pop	r7
    b88a:	08 95       	ret

0000b88c <_ZN4Pbbe16parseDescriptorAEPKNS_6EepromEPNS_14DescriptorInfoE>:
    b88c:	5f 92       	push	r5
    b88e:	6f 92       	push	r6
    b890:	7f 92       	push	r7
    b892:	8f 92       	push	r8
    b894:	9f 92       	push	r9
    b896:	af 92       	push	r10
    b898:	bf 92       	push	r11
    b89a:	cf 92       	push	r12
    b89c:	df 92       	push	r13
    b89e:	ef 92       	push	r14
    b8a0:	ff 92       	push	r15
    b8a2:	0f 93       	push	r16
    b8a4:	1f 93       	push	r17
    b8a6:	cf 93       	push	r28
    b8a8:	df 93       	push	r29
    b8aa:	00 d0       	rcall	.+0      	; 0xb8ac <_ZN4Pbbe16parseDescriptorAEPKNS_6EepromEPNS_14DescriptorInfoE+0x20>
    b8ac:	1f 92       	push	r1
    b8ae:	cd b7       	in	r28, 0x3d	; 61
    b8b0:	de b7       	in	r29, 0x3e	; 62
    b8b2:	5c 01       	movw	r10, r24
    b8b4:	7b 01       	movw	r14, r22
    b8b6:	fb 01       	movw	r30, r22
    b8b8:	61 81       	ldd	r22, Z+1	; 0x01
    b8ba:	72 81       	ldd	r23, Z+2	; 0x02
    b8bc:	ae 01       	movw	r20, r28
    b8be:	4f 5f       	subi	r20, 0xFF	; 255
    b8c0:	5f 4f       	sbci	r21, 0xFF	; 255
    b8c2:	e6 de       	rcall	.-564    	; 0xb690 <_ZN4Pbbe22parseMinimalDescriptorEPKNS_6EepromEjPNS_17MinimalDescriptorE>
    b8c4:	78 2e       	mov	r7, r24
    b8c6:	88 23       	and	r24, r24
    b8c8:	09 f4       	brne	.+2      	; 0xb8cc <_ZN4Pbbe16parseDescriptorAEPKNS_6EepromEPNS_14DescriptorInfoE+0x40>
    b8ca:	d7 c0       	rjmp	.+430    	; 0xba7a <_ZN4Pbbe16parseDescriptorAEPKNS_6EepromEPNS_14DescriptorInfoE+0x1ee>
    b8cc:	39 81       	ldd	r19, Y+1	; 0x01
    b8ce:	fb e0       	ldi	r31, 0x0B	; 11
    b8d0:	3f 9f       	mul	r19, r31
    b8d2:	60 01       	movw	r12, r0
    b8d4:	11 24       	eor	r1, r1
    b8d6:	c6 01       	movw	r24, r12
    b8d8:	8d 5e       	subi	r24, 0xED	; 237
    b8da:	97 4f       	sbci	r25, 0xF7	; 247
    b8dc:	6c 01       	movw	r12, r24
    b8de:	f7 01       	movw	r30, r14
    b8e0:	01 81       	ldd	r16, Z+1	; 0x01
    b8e2:	12 81       	ldd	r17, Z+2	; 0x02
    b8e4:	0f 5f       	subi	r16, 0xFF	; 255
    b8e6:	1f 4f       	sbci	r17, 0xFF	; 255
    b8e8:	0a 0d       	add	r16, r10
    b8ea:	1b 1d       	adc	r17, r11
    b8ec:	fc 01       	movw	r30, r24
    b8ee:	32 96       	adiw	r30, 0x02	; 2
    b8f0:	54 90       	lpm	r5, Z
    b8f2:	31 97       	sbiw	r30, 0x01	; 1
    b8f4:	e4 91       	lpm	r30, Z
    b8f6:	66 24       	eor	r6, r6
    b8f8:	63 94       	inc	r6
    b8fa:	e1 11       	cpse	r30, r1
    b8fc:	01 c0       	rjmp	.+2      	; 0xb900 <_ZN4Pbbe16parseDescriptorAEPKNS_6EepromEPNS_14DescriptorInfoE+0x74>
    b8fe:	61 2c       	mov	r6, r1
    b900:	33 30       	cpi	r19, 0x03	; 3
    b902:	21 f4       	brne	.+8      	; 0xb90c <_ZN4Pbbe16parseDescriptorAEPKNS_6EepromEPNS_14DescriptorInfoE+0x80>
    b904:	f8 01       	movw	r30, r16
    b906:	81 80       	ldd	r8, Z+1	; 0x01
    b908:	85 0c       	add	r8, r5
    b90a:	01 c0       	rjmp	.+2      	; 0xb90e <_ZN4Pbbe16parseDescriptorAEPKNS_6EepromEPNS_14DescriptorInfoE+0x82>
    b90c:	85 2c       	mov	r8, r5
    b90e:	66 20       	and	r6, r6
    b910:	81 f0       	breq	.+32     	; 0xb932 <_ZN4Pbbe16parseDescriptorAEPKNS_6EepromEPNS_14DescriptorInfoE+0xa6>
    b912:	2b 81       	ldd	r18, Y+3	; 0x03
    b914:	22 23       	and	r18, r18
    b916:	19 f0       	breq	.+6      	; 0xb91e <_ZN4Pbbe16parseDescriptorAEPKNS_6EepromEPNS_14DescriptorInfoE+0x92>
    b918:	88 2d       	mov	r24, r8
    b91a:	82 0f       	add	r24, r18
    b91c:	07 c0       	rjmp	.+14     	; 0xb92c <_ZN4Pbbe16parseDescriptorAEPKNS_6EepromEPNS_14DescriptorInfoE+0xa0>
    b91e:	c6 01       	movw	r24, r12
    b920:	03 96       	adiw	r24, 0x03	; 3
    b922:	3c 83       	std	Y+4, r19	; 0x04
    b924:	0e 94 12 b5 	call	0x16a24	; 0x16a24 <__strlen_P>
    b928:	88 0d       	add	r24, r8
    b92a:	3c 81       	ldd	r19, Y+4	; 0x04
    b92c:	88 24       	eor	r8, r8
    b92e:	83 94       	inc	r8
    b930:	88 0e       	add	r8, r24
    b932:	91 2c       	mov	r9, r1
    b934:	c4 01       	movw	r24, r8
    b936:	3c 83       	std	Y+4, r19	; 0x04
    b938:	0e 94 2e b0 	call	0x1605c	; 0x1605c <malloc>
    b93c:	dc 01       	movw	r26, r24
    b93e:	f7 01       	movw	r30, r14
    b940:	96 83       	std	Z+6, r25	; 0x06
    b942:	85 83       	std	Z+5, r24	; 0x05
    b944:	3c 81       	ldd	r19, Y+4	; 0x04
    b946:	00 97       	sbiw	r24, 0x00	; 0
    b948:	39 f4       	brne	.+14     	; 0xb958 <_ZN4Pbbe16parseDescriptorAEPKNS_6EepromEPNS_14DescriptorInfoE+0xcc>
    b94a:	6f ea       	ldi	r22, 0xAF	; 175
    b94c:	77 e0       	ldi	r23, 0x07	; 7
    b94e:	84 e0       	ldi	r24, 0x04	; 4
    b950:	94 e2       	ldi	r25, 0x24	; 36
    b952:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <_ZN5Print7printlnEPK19__FlashStringHelper>
    b956:	90 c0       	rjmp	.+288    	; 0xba78 <_ZN4Pbbe16parseDescriptorAEPKNS_6EepromEPNS_14DescriptorInfoE+0x1ec>
    b958:	34 30       	cpi	r19, 0x04	; 4
    b95a:	09 f4       	brne	.+2      	; 0xb95e <_ZN4Pbbe16parseDescriptorAEPKNS_6EepromEPNS_14DescriptorInfoE+0xd2>
    b95c:	46 c0       	rjmp	.+140    	; 0xb9ea <_ZN4Pbbe16parseDescriptorAEPKNS_6EepromEPNS_14DescriptorInfoE+0x15e>
    b95e:	c8 f4       	brcc	.+50     	; 0xb992 <_ZN4Pbbe16parseDescriptorAEPKNS_6EepromEPNS_14DescriptorInfoE+0x106>
    b960:	32 30       	cpi	r19, 0x02	; 2
    b962:	09 f4       	brne	.+2      	; 0xb966 <_ZN4Pbbe16parseDescriptorAEPKNS_6EepromEPNS_14DescriptorInfoE+0xda>
    b964:	47 c0       	rjmp	.+142    	; 0xb9f4 <_ZN4Pbbe16parseDescriptorAEPKNS_6EepromEPNS_14DescriptorInfoE+0x168>
    b966:	33 30       	cpi	r19, 0x03	; 3
    b968:	09 f0       	breq	.+2      	; 0xb96c <_ZN4Pbbe16parseDescriptorAEPKNS_6EepromEPNS_14DescriptorInfoE+0xe0>
    b96a:	66 c0       	rjmp	.+204    	; 0xba38 <_ZN4Pbbe16parseDescriptorAEPKNS_6EepromEPNS_14DescriptorInfoE+0x1ac>
    b96c:	f8 01       	movw	r30, r16
    b96e:	41 81       	ldd	r20, Z+1	; 0x01
    b970:	4c 93       	st	X, r20
    b972:	50 e0       	ldi	r21, 0x00	; 0
    b974:	c4 01       	movw	r24, r8
    b976:	84 1b       	sub	r24, r20
    b978:	95 0b       	sbc	r25, r21
    b97a:	8a 0f       	add	r24, r26
    b97c:	9b 1f       	adc	r25, r27
    b97e:	12 96       	adiw	r26, 0x02	; 2
    b980:	9c 93       	st	X, r25
    b982:	8e 93       	st	-X, r24
    b984:	11 97       	sbiw	r26, 0x01	; 1
    b986:	b8 01       	movw	r22, r16
    b988:	6e 5f       	subi	r22, 0xFE	; 254
    b98a:	7f 4f       	sbci	r23, 0xFF	; 255
    b98c:	0e 94 42 b5 	call	0x16a84	; 0x16a84 <memcpy>
    b990:	53 c0       	rjmp	.+166    	; 0xba38 <_ZN4Pbbe16parseDescriptorAEPKNS_6EepromEPNS_14DescriptorInfoE+0x1ac>
    b992:	36 30       	cpi	r19, 0x06	; 6
    b994:	09 f4       	brne	.+2      	; 0xb998 <_ZN4Pbbe16parseDescriptorAEPKNS_6EepromEPNS_14DescriptorInfoE+0x10c>
    b996:	3e c0       	rjmp	.+124    	; 0xba14 <_ZN4Pbbe16parseDescriptorAEPKNS_6EepromEPNS_14DescriptorInfoE+0x188>
    b998:	58 f0       	brcs	.+22     	; 0xb9b0 <_ZN4Pbbe16parseDescriptorAEPKNS_6EepromEPNS_14DescriptorInfoE+0x124>
    b99a:	37 30       	cpi	r19, 0x07	; 7
    b99c:	09 f0       	breq	.+2      	; 0xb9a0 <_ZN4Pbbe16parseDescriptorAEPKNS_6EepromEPNS_14DescriptorInfoE+0x114>
    b99e:	4c c0       	rjmp	.+152    	; 0xba38 <_ZN4Pbbe16parseDescriptorAEPKNS_6EepromEPNS_14DescriptorInfoE+0x1ac>
    b9a0:	f8 01       	movw	r30, r16
    b9a2:	81 81       	ldd	r24, Z+1	; 0x01
    b9a4:	8f 73       	andi	r24, 0x3F	; 63
    b9a6:	8c 93       	st	X, r24
    b9a8:	82 81       	ldd	r24, Z+2	; 0x02
    b9aa:	11 96       	adiw	r26, 0x01	; 1
    b9ac:	8c 93       	st	X, r24
    b9ae:	44 c0       	rjmp	.+136    	; 0xba38 <_ZN4Pbbe16parseDescriptorAEPKNS_6EepromEPNS_14DescriptorInfoE+0x1ac>
    b9b0:	f8 01       	movw	r30, r16
    b9b2:	81 81       	ldd	r24, Z+1	; 0x01
    b9b4:	8f 73       	andi	r24, 0x3F	; 63
    b9b6:	8c 93       	st	X, r24
    b9b8:	82 81       	ldd	r24, Z+2	; 0x02
    b9ba:	8f 73       	andi	r24, 0x3F	; 63
    b9bc:	8c 93       	st	X, r24
    b9be:	93 81       	ldd	r25, Z+3	; 0x03
    b9c0:	9f 70       	andi	r25, 0x0F	; 15
    b9c2:	9b 30       	cpi	r25, 0x0B	; 11
    b9c4:	08 f0       	brcs	.+2      	; 0xb9c8 <_ZN4Pbbe16parseDescriptorAEPKNS_6EepromEPNS_14DescriptorInfoE+0x13c>
    b9c6:	52 c0       	rjmp	.+164    	; 0xba6c <_ZN4Pbbe16parseDescriptorAEPKNS_6EepromEPNS_14DescriptorInfoE+0x1e0>
    b9c8:	84 e0       	ldi	r24, 0x04	; 4
    b9ca:	98 9f       	mul	r25, r24
    b9cc:	f0 01       	movw	r30, r0
    b9ce:	11 24       	eor	r1, r1
    b9d0:	e1 52       	subi	r30, 0x21	; 33
    b9d2:	f8 4f       	sbci	r31, 0xF8	; 248
    b9d4:	45 91       	lpm	r20, Z+
    b9d6:	55 91       	lpm	r21, Z+
    b9d8:	65 91       	lpm	r22, Z+
    b9da:	74 91       	lpm	r23, Z
    b9dc:	12 96       	adiw	r26, 0x02	; 2
    b9de:	4d 93       	st	X+, r20
    b9e0:	5d 93       	st	X+, r21
    b9e2:	6d 93       	st	X+, r22
    b9e4:	7c 93       	st	X, r23
    b9e6:	15 97       	sbiw	r26, 0x05	; 5
    b9e8:	27 c0       	rjmp	.+78     	; 0xba38 <_ZN4Pbbe16parseDescriptorAEPKNS_6EepromEPNS_14DescriptorInfoE+0x1ac>
    b9ea:	f8 01       	movw	r30, r16
    b9ec:	81 81       	ldd	r24, Z+1	; 0x01
    b9ee:	8f 73       	andi	r24, 0x3F	; 63
    b9f0:	8c 93       	st	X, r24
    b9f2:	22 c0       	rjmp	.+68     	; 0xba38 <_ZN4Pbbe16parseDescriptorAEPKNS_6EepromEPNS_14DescriptorInfoE+0x1ac>
    b9f4:	f8 01       	movw	r30, r16
    b9f6:	81 81       	ldd	r24, Z+1	; 0x01
    b9f8:	8f 73       	andi	r24, 0x3F	; 63
    b9fa:	8c 93       	st	X, r24
    b9fc:	82 81       	ldd	r24, Z+2	; 0x02
    b9fe:	11 96       	adiw	r26, 0x01	; 1
    ba00:	8c 93       	st	X, r24
    ba02:	11 97       	sbiw	r26, 0x01	; 1
    ba04:	83 81       	ldd	r24, Z+3	; 0x03
    ba06:	12 96       	adiw	r26, 0x02	; 2
    ba08:	8c 93       	st	X, r24
    ba0a:	12 97       	sbiw	r26, 0x02	; 2
    ba0c:	84 81       	ldd	r24, Z+4	; 0x04
    ba0e:	13 96       	adiw	r26, 0x03	; 3
    ba10:	8c 93       	st	X, r24
    ba12:	12 c0       	rjmp	.+36     	; 0xba38 <_ZN4Pbbe16parseDescriptorAEPKNS_6EepromEPNS_14DescriptorInfoE+0x1ac>
    ba14:	f8 01       	movw	r30, r16
    ba16:	81 81       	ldd	r24, Z+1	; 0x01
    ba18:	8f 77       	andi	r24, 0x7F	; 127
    ba1a:	8c 93       	st	X, r24
    ba1c:	82 81       	ldd	r24, Z+2	; 0x02
    ba1e:	83 70       	andi	r24, 0x03	; 3
    ba20:	e8 2f       	mov	r30, r24
    ba22:	f0 e0       	ldi	r31, 0x00	; 0
    ba24:	ee 0f       	add	r30, r30
    ba26:	ff 1f       	adc	r31, r31
    ba28:	e5 5f       	subi	r30, 0xF5	; 245
    ba2a:	f7 4f       	sbci	r31, 0xF7	; 247
    ba2c:	85 91       	lpm	r24, Z+
    ba2e:	94 91       	lpm	r25, Z
    ba30:	12 96       	adiw	r26, 0x02	; 2
    ba32:	9c 93       	st	X, r25
    ba34:	8e 93       	st	-X, r24
    ba36:	11 97       	sbiw	r26, 0x01	; 1
    ba38:	f7 01       	movw	r30, r14
    ba3a:	85 81       	ldd	r24, Z+5	; 0x05
    ba3c:	96 81       	ldd	r25, Z+6	; 0x06
    ba3e:	66 20       	and	r6, r6
    ba40:	e1 f0       	breq	.+56     	; 0xba7a <_ZN4Pbbe16parseDescriptorAEPKNS_6EepromEPNS_14DescriptorInfoE+0x1ee>
    ba42:	85 0d       	add	r24, r5
    ba44:	91 1d       	adc	r25, r1
    ba46:	2b 81       	ldd	r18, Y+3	; 0x03
    ba48:	22 23       	and	r18, r18
    ba4a:	51 f0       	breq	.+20     	; 0xba60 <_ZN4Pbbe16parseDescriptorAEPKNS_6EepromEPNS_14DescriptorInfoE+0x1d4>
    ba4c:	30 e0       	ldi	r19, 0x00	; 0
    ba4e:	4a 81       	ldd	r20, Y+2	; 0x02
    ba50:	61 81       	ldd	r22, Z+1	; 0x01
    ba52:	72 81       	ldd	r23, Z+2	; 0x02
    ba54:	64 0f       	add	r22, r20
    ba56:	71 1d       	adc	r23, r1
    ba58:	ac 01       	movw	r20, r24
    ba5a:	c5 01       	movw	r24, r10
    ba5c:	b1 dd       	rcall	.-1182   	; 0xb5c0 <_ZN4Pbbe13extractStringEPKNS_6EepromEjPcj>
    ba5e:	0d c0       	rjmp	.+26     	; 0xba7a <_ZN4Pbbe16parseDescriptorAEPKNS_6EepromEPNS_14DescriptorInfoE+0x1ee>
    ba60:	b6 01       	movw	r22, r12
    ba62:	6d 5f       	subi	r22, 0xFD	; 253
    ba64:	7f 4f       	sbci	r23, 0xFF	; 255
    ba66:	0e 94 0b b5 	call	0x16a16	; 0x16a16 <strcpy_P>
    ba6a:	07 c0       	rjmp	.+14     	; 0xba7a <_ZN4Pbbe16parseDescriptorAEPKNS_6EepromEPNS_14DescriptorInfoE+0x1ee>
    ba6c:	cd 01       	movw	r24, r26
    ba6e:	0e 94 c6 b0 	call	0x1618c	; 0x1618c <free>
    ba72:	f7 01       	movw	r30, r14
    ba74:	16 82       	std	Z+6, r1	; 0x06
    ba76:	15 82       	std	Z+5, r1	; 0x05
    ba78:	71 2c       	mov	r7, r1
    ba7a:	87 2d       	mov	r24, r7
    ba7c:	0f 90       	pop	r0
    ba7e:	0f 90       	pop	r0
    ba80:	0f 90       	pop	r0
    ba82:	0f 90       	pop	r0
    ba84:	df 91       	pop	r29
    ba86:	cf 91       	pop	r28
    ba88:	1f 91       	pop	r17
    ba8a:	0f 91       	pop	r16
    ba8c:	ff 90       	pop	r15
    ba8e:	ef 90       	pop	r14
    ba90:	df 90       	pop	r13
    ba92:	cf 90       	pop	r12
    ba94:	bf 90       	pop	r11
    ba96:	af 90       	pop	r10
    ba98:	9f 90       	pop	r9
    ba9a:	8f 90       	pop	r8
    ba9c:	7f 90       	pop	r7
    ba9e:	6f 90       	pop	r6
    baa0:	5f 90       	pop	r5
    baa2:	08 95       	ret

0000baa4 <_ZN4Pbbe11writeEepromER4PBBPhPKNS_6EepromE>:
    baa4:	0f 93       	push	r16
    baa6:	1f 93       	push	r17
    baa8:	cf 93       	push	r28
    baaa:	df 93       	push	r29
    baac:	ec 01       	movw	r28, r24
    baae:	9a 01       	movw	r18, r20
    bab0:	2f 5f       	subi	r18, 0xFF	; 255
    bab2:	3f 4f       	sbci	r19, 0xFF	; 255
    bab4:	fa 01       	movw	r30, r20
    bab6:	00 81       	ld	r16, Z
    bab8:	40 e0       	ldi	r20, 0x00	; 0
    baba:	c5 d3       	rcall	.+1930   	; 0xc246 <_ZN4PBBP11writeEepromEhhPKhh>
    babc:	18 2f       	mov	r17, r24
    babe:	81 11       	cpse	r24, r1
    bac0:	0a c0       	rjmp	.+20     	; 0xbad6 <_ZN4Pbbe11writeEepromER4PBBPhPKNS_6EepromE+0x32>
    bac2:	61 e7       	ldi	r22, 0x71	; 113
    bac4:	70 e1       	ldi	r23, 0x10	; 16
    bac6:	84 e0       	ldi	r24, 0x04	; 4
    bac8:	94 e2       	ldi	r25, 0x24	; 36
    baca:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <_ZN5Print7printlnEPKc>
    bace:	64 e0       	ldi	r22, 0x04	; 4
    bad0:	74 e2       	ldi	r23, 0x24	; 36
    bad2:	ce 01       	movw	r24, r28
    bad4:	f2 d4       	rcall	.+2532   	; 0xc4ba <_ZN4PBBP14printLastErrorER5Print>
    bad6:	81 2f       	mov	r24, r17
    bad8:	df 91       	pop	r29
    bada:	cf 91       	pop	r28
    badc:	1f 91       	pop	r17
    bade:	0f 91       	pop	r16
    bae0:	08 95       	ret

0000bae2 <_ZN4Pbbe14eepromChecksumEPhj>:

uint16_t Pbbe::eepromChecksum(uint8_t *buf, size_t length)
{
    bae2:	cf 93       	push	r28
    bae4:	fc 01       	movw	r30, r24
    bae6:	68 0f       	add	r22, r24
    bae8:	79 1f       	adc	r23, r25
}

template<typename T>
T pinoccio_crc_generate(T poly, T initial_crc, uint8_t *data, size_t length)
{
    T crc = initial_crc;
    baea:	80 e0       	ldi	r24, 0x00	; 0
    baec:	90 e0       	ldi	r25, 0x00	; 0
    // e.g., 0x80 for bits = 8
    const T msb_mask = 1 << (bits - 1);
    for (uint8_t i = 0x80; i > 0; i >>= 1) {
        bool bit = crc & msb_mask;
        if (c & i) {
            bit = !bit;
    baee:	a1 e0       	ldi	r26, 0x01	; 1

template<typename T>
T pinoccio_crc_generate(T poly, T initial_crc, uint8_t *data, size_t length)
{
    T crc = initial_crc;
    while (length--)
    baf0:	e6 17       	cp	r30, r22
    baf2:	f7 07       	cpc	r31, r23
    baf4:	d9 f0       	breq	.+54     	; 0xbb2c <_ZN4Pbbe14eepromChecksumEPhj+0x4a>
	crc = pinoccio_crc_update(poly, crc, *data++);
    baf6:	b1 91       	ld	r27, Z+
    baf8:	28 e0       	ldi	r18, 0x08	; 8
    bafa:	30 e0       	ldi	r19, 0x00	; 0
T pinoccio_crc_update(T poly, T crc, uint8_t c)
{
    const size_t bits = sizeof(T) * 8;
    // e.g., 0x80 for bits = 8
    const T msb_mask = 1 << (bits - 1);
    for (uint8_t i = 0x80; i > 0; i >>= 1) {
    bafc:	40 e8       	ldi	r20, 0x80	; 128
        bool bit = crc & msb_mask;
    bafe:	59 2f       	mov	r21, r25
    bb00:	55 1f       	adc	r21, r21
    bb02:	55 27       	eor	r21, r21
    bb04:	55 1f       	adc	r21, r21
        if (c & i) {
    bb06:	c4 2f       	mov	r28, r20
    bb08:	cb 23       	and	r28, r27
    bb0a:	09 f0       	breq	.+2      	; 0xbb0e <_ZN4Pbbe14eepromChecksumEPhj+0x2c>
            bit = !bit;
    bb0c:	5a 27       	eor	r21, r26
        }
        crc <<= 1;
    bb0e:	88 0f       	add	r24, r24
    bb10:	99 1f       	adc	r25, r25
        if (bit) {
    bb12:	55 23       	and	r21, r21
    bb14:	21 f0       	breq	.+8      	; 0xbb1e <_ZN4Pbbe14eepromChecksumEPhj+0x3c>
            crc ^= poly;
    bb16:	53 ed       	ldi	r21, 0xD3	; 211
    bb18:	85 27       	eor	r24, r21
    bb1a:	57 ea       	ldi	r21, 0xA7	; 167
    bb1c:	95 27       	eor	r25, r21
T pinoccio_crc_update(T poly, T crc, uint8_t c)
{
    const size_t bits = sizeof(T) * 8;
    // e.g., 0x80 for bits = 8
    const T msb_mask = 1 << (bits - 1);
    for (uint8_t i = 0x80; i > 0; i >>= 1) {
    bb1e:	46 95       	lsr	r20
    bb20:	21 50       	subi	r18, 0x01	; 1
    bb22:	31 09       	sbc	r19, r1
    bb24:	21 15       	cp	r18, r1
    bb26:	31 05       	cpc	r19, r1
    bb28:	51 f7       	brne	.-44     	; 0xbafe <_ZN4Pbbe14eepromChecksumEPhj+0x1c>
    bb2a:	e2 cf       	rjmp	.-60     	; 0xbaf0 <_ZN4Pbbe14eepromChecksumEPhj+0xe>
  return pinoccio_crc_generate<uint16_t>(EEPROM_CRC_POLY, 0, buf, length);
}
    bb2c:	cf 91       	pop	r28
    bb2e:	08 95       	ret

0000bb30 <_ZN4Pbbe9getEepromER4PBBPh>:
  info->parsed = NULL;
  return false;
}

Pbbe::Eeprom *Pbbe::getEeprom(PBBP &pbbp, uint8_t addr)
{
    bb30:	8f 92       	push	r8
    bb32:	9f 92       	push	r9
    bb34:	af 92       	push	r10
    bb36:	bf 92       	push	r11
    bb38:	cf 92       	push	r12
    bb3a:	df 92       	push	r13
    bb3c:	ef 92       	push	r14
    bb3e:	ff 92       	push	r15
    bb40:	0f 93       	push	r16
    bb42:	1f 93       	push	r17
    bb44:	cf 93       	push	r28
    bb46:	df 93       	push	r29
    bb48:	00 d0       	rcall	.+0      	; 0xbb4a <_ZN4Pbbe9getEepromER4PBBPh+0x1a>
    bb4a:	cd b7       	in	r28, 0x3d	; 61
    bb4c:	de b7       	in	r29, 0x3e	; 62
    bb4e:	5c 01       	movw	r10, r24
    bb50:	16 2f       	mov	r17, r22
  uint8_t buf[3];
  // Read the first 3 bytes
  if (!pbbp.readEeprom(addr, 0, buf, sizeof(buf))) {
    bb52:	03 e0       	ldi	r16, 0x03	; 3
    bb54:	9e 01       	movw	r18, r28
    bb56:	2f 5f       	subi	r18, 0xFF	; 255
    bb58:	3f 4f       	sbci	r19, 0xFF	; 255
    bb5a:	40 e0       	ldi	r20, 0x00	; 0
    bb5c:	0e d4       	rcall	.+2076   	; 0xc37a <_ZN4PBBP10readEepromEhhPhh>
    bb5e:	81 11       	cpse	r24, r1
    bb60:	0b c0       	rjmp	.+22     	; 0xbb78 <_ZN4Pbbe9getEepromER4PBBPh+0x48>
    Serial.println("EEPROM read failed: ");
    bb62:	67 e8       	ldi	r22, 0x87	; 135
    bb64:	70 e1       	ldi	r23, 0x10	; 16
    bb66:	84 e0       	ldi	r24, 0x04	; 4
    bb68:	94 e2       	ldi	r25, 0x24	; 36
    bb6a:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <_ZN5Print7printlnEPKc>
    pbbp.printLastError(Serial);
    bb6e:	64 e0       	ldi	r22, 0x04	; 4
    bb70:	74 e2       	ldi	r23, 0x24	; 36
    bb72:	c5 01       	movw	r24, r10
    bb74:	a2 d4       	rcall	.+2372   	; 0xc4ba <_ZN4PBBP14printLastErrorER5Print>
    bb76:	56 c0       	rjmp	.+172    	; 0xbc24 <_ZN4Pbbe9getEepromER4PBBPh+0xf4>
    return NULL;
  }

  // Check EEPROM version
  if (buf[0] == 0 || buf[0] > 1) {
    bb78:	89 81       	ldd	r24, Y+1	; 0x01
    bb7a:	81 30       	cpi	r24, 0x01	; 1
    bb7c:	71 f0       	breq	.+28     	; 0xbb9a <_ZN4Pbbe9getEepromER4PBBPh+0x6a>
    Serial.print("Unsupported EEPROM version: ");
    bb7e:	6c e9       	ldi	r22, 0x9C	; 156
    bb80:	70 e1       	ldi	r23, 0x10	; 16
    bb82:	84 e0       	ldi	r24, 0x04	; 4
    bb84:	94 e2       	ldi	r25, 0x24	; 36
    bb86:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_ZN5Print5printEPKc>
    Serial.print(buf[0]);
    bb8a:	4a e0       	ldi	r20, 0x0A	; 10
    bb8c:	50 e0       	ldi	r21, 0x00	; 0
    bb8e:	69 81       	ldd	r22, Y+1	; 0x01
    bb90:	84 e0       	ldi	r24, 0x04	; 4
    bb92:	94 e2       	ldi	r25, 0x24	; 36
    bb94:	0e 94 76 10 	call	0x20ec	; 0x20ec <_ZN5Print5printEhi>
    bb98:	45 c0       	rjmp	.+138    	; 0xbc24 <_ZN4Pbbe9getEepromER4PBBPh+0xf4>
    return NULL;
  }

  // Get the used size of the EEPROM
  uint8_t used_size = buf[2];
    bb9a:	0b 81       	ldd	r16, Y+3	; 0x03
  // Allocate memory for that
  Eeprom *eep = (Eeprom*)malloc(sizeof(Eeprom) + used_size);
    bb9c:	80 2e       	mov	r8, r16
    bb9e:	91 2c       	mov	r9, r1
    bba0:	c4 01       	movw	r24, r8
    bba2:	01 96       	adiw	r24, 0x01	; 1
    bba4:	0e 94 2e b0 	call	0x1605c	; 0x1605c <malloc>
    bba8:	7c 01       	movw	r14, r24
  if (!eep) {
    bbaa:	00 97       	sbiw	r24, 0x00	; 0
    bbac:	39 f4       	brne	.+14     	; 0xbbbc <_ZN4Pbbe9getEepromER4PBBPh+0x8c>
    Serial.println("Memory allocation for EEPROM failed");
    bbae:	69 eb       	ldi	r22, 0xB9	; 185
    bbb0:	70 e1       	ldi	r23, 0x10	; 16
    bbb2:	84 e0       	ldi	r24, 0x04	; 4
    bbb4:	94 e2       	ldi	r25, 0x24	; 36
    bbb6:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <_ZN5Print7printlnEPKc>
    bbba:	34 c0       	rjmp	.+104    	; 0xbc24 <_ZN4Pbbe9getEepromER4PBBPh+0xf4>
    return NULL;
  }

  eep->size = used_size;
    bbbc:	f7 01       	movw	r30, r14
    bbbe:	01 93       	st	Z+, r16
    bbc0:	6f 01       	movw	r12, r30

  // And read the full EEPROM
  if (!pbbp.readEeprom(addr, 0, eep->raw, used_size)) {
    bbc2:	9f 01       	movw	r18, r30
    bbc4:	40 e0       	ldi	r20, 0x00	; 0
    bbc6:	61 2f       	mov	r22, r17
    bbc8:	c5 01       	movw	r24, r10
    bbca:	d7 d3       	rcall	.+1966   	; 0xc37a <_ZN4PBBP10readEepromEhhPhh>
    bbcc:	81 11       	cpse	r24, r1
    bbce:	0b c0       	rjmp	.+22     	; 0xbbe6 <_ZN4Pbbe9getEepromER4PBBPh+0xb6>
    Serial.println("EEPROM read failed: ");
    bbd0:	67 e8       	ldi	r22, 0x87	; 135
    bbd2:	70 e1       	ldi	r23, 0x10	; 16
    bbd4:	84 e0       	ldi	r24, 0x04	; 4
    bbd6:	94 e2       	ldi	r25, 0x24	; 36
    bbd8:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <_ZN5Print7printlnEPKc>
    pbbp.printLastError(Serial);
    bbdc:	64 e0       	ldi	r22, 0x04	; 4
    bbde:	74 e2       	ldi	r23, 0x24	; 36
    bbe0:	c5 01       	movw	r24, r10
    bbe2:	6b d4       	rcall	.+2262   	; 0xc4ba <_ZN4PBBP14printLastErrorER5Print>
    bbe4:	1c c0       	rjmp	.+56     	; 0xbc1e <_ZN4Pbbe9getEepromER4PBBPh+0xee>
    free(eep);
    return NULL;
  }

  // Verify checksum
  uint16_t calc_checksum = eepromChecksum(eep->raw, used_size - CHECKSUM_SIZE);
    bbe6:	54 01       	movw	r10, r8
    bbe8:	f2 e0       	ldi	r31, 0x02	; 2
    bbea:	af 1a       	sub	r10, r31
    bbec:	b1 08       	sbc	r11, r1
    bbee:	b5 01       	movw	r22, r10
    bbf0:	c6 01       	movw	r24, r12
    bbf2:	77 df       	rcall	.-274    	; 0xbae2 <_ZN4Pbbe14eepromChecksumEPhj>
  uint16_t read_checksum = eep->raw[used_size - 2] << 8 | eep->raw[used_size - 1];
    bbf4:	f7 01       	movw	r30, r14
    bbf6:	ea 0d       	add	r30, r10
    bbf8:	fb 1d       	adc	r31, r11
    bbfa:	21 81       	ldd	r18, Z+1	; 0x01
    bbfc:	30 e0       	ldi	r19, 0x00	; 0
    bbfe:	32 2f       	mov	r19, r18
    bc00:	22 27       	eor	r18, r18
    bc02:	f7 01       	movw	r30, r14
    bc04:	e8 0d       	add	r30, r8
    bc06:	f9 1d       	adc	r31, r9
    bc08:	40 81       	ld	r20, Z
    bc0a:	24 2b       	or	r18, r20
  if (read_checksum != calc_checksum) {
    bc0c:	28 17       	cp	r18, r24
    bc0e:	39 07       	cpc	r19, r25
    bc10:	61 f0       	breq	.+24     	; 0xbc2a <_ZN4Pbbe9getEepromER4PBBPh+0xfa>
    Serial.println("EEPROM checksum incorrect");
    bc12:	6d ed       	ldi	r22, 0xDD	; 221
    bc14:	70 e1       	ldi	r23, 0x10	; 16
    bc16:	84 e0       	ldi	r24, 0x04	; 4
    bc18:	94 e2       	ldi	r25, 0x24	; 36
    bc1a:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <_ZN5Print7printlnEPKc>
    free(eep);
    bc1e:	c7 01       	movw	r24, r14
    bc20:	0e 94 c6 b0 	call	0x1618c	; 0x1618c <free>
    return NULL;
    bc24:	80 e0       	ldi	r24, 0x00	; 0
    bc26:	90 e0       	ldi	r25, 0x00	; 0
    bc28:	01 c0       	rjmp	.+2      	; 0xbc2c <_ZN4Pbbe9getEepromER4PBBPh+0xfc>
    bc2a:	c7 01       	movw	r24, r14
  }

  return eep;
}
    bc2c:	0f 90       	pop	r0
    bc2e:	0f 90       	pop	r0
    bc30:	0f 90       	pop	r0
    bc32:	df 91       	pop	r29
    bc34:	cf 91       	pop	r28
    bc36:	1f 91       	pop	r17
    bc38:	0f 91       	pop	r16
    bc3a:	ff 90       	pop	r15
    bc3c:	ef 90       	pop	r14
    bc3e:	df 90       	pop	r13
    bc40:	cf 90       	pop	r12
    bc42:	bf 90       	pop	r11
    bc44:	af 90       	pop	r10
    bc46:	9f 90       	pop	r9
    bc48:	8f 90       	pop	r8
    bc4a:	08 95       	ret

0000bc4c <_ZN4Pbbe12updateEepromEPNS_6EepromEjPKhh>:
  }
  return true;
}

Pbbe::Eeprom *Pbbe::updateEeprom(Eeprom *eep, size_t offset, const uint8_t *buf, uint8_t length)
{
    bc4c:	af 92       	push	r10
    bc4e:	bf 92       	push	r11
    bc50:	cf 92       	push	r12
    bc52:	df 92       	push	r13
    bc54:	ef 92       	push	r14
    bc56:	ff 92       	push	r15
    bc58:	0f 93       	push	r16
    bc5a:	1f 93       	push	r17
    bc5c:	cf 93       	push	r28
    bc5e:	df 93       	push	r29
    bc60:	00 d0       	rcall	.+0      	; 0xbc62 <_ZN4Pbbe12updateEepromEPNS_6EepromEjPKhh+0x16>
    bc62:	1f 92       	push	r1
    bc64:	cd b7       	in	r28, 0x3d	; 61
    bc66:	de b7       	in	r29, 0x3e	; 62
    bc68:	8c 01       	movw	r16, r24
    bc6a:	7b 01       	movw	r14, r22
    bc6c:	6a 01       	movw	r12, r20
  if (!eep && offset != 0) {
    bc6e:	00 97       	sbiw	r24, 0x00	; 0
    bc70:	31 f4       	brne	.+12     	; 0xbc7e <_ZN4Pbbe12updateEepromEPNS_6EepromEjPKhh+0x32>
    bc72:	61 15       	cp	r22, r1
    bc74:	71 05       	cpc	r23, r1
    bc76:	d1 f0       	breq	.+52     	; 0xbcac <_ZN4Pbbe12updateEepromEPNS_6EepromEjPKhh+0x60>
    Serial.println(F("Cannot write EEPROM from sketch with non-zero offset"));
    bc78:	6a e7       	ldi	r22, 0x7A	; 122
    bc7a:	77 e0       	ldi	r23, 0x07	; 7
    bc7c:	08 c0       	rjmp	.+16     	; 0xbc8e <_ZN4Pbbe12updateEepromEPNS_6EepromEjPKhh+0x42>
    return NULL;
  }
  if (eep && offset > eep->size) {
    bc7e:	fc 01       	movw	r30, r24
    bc80:	40 81       	ld	r20, Z
    bc82:	50 e0       	ldi	r21, 0x00	; 0
    bc84:	46 17       	cp	r20, r22
    bc86:	57 07       	cpc	r21, r23
    bc88:	48 f4       	brcc	.+18     	; 0xbc9c <_ZN4Pbbe12updateEepromEPNS_6EepromEjPKhh+0x50>
    Serial.println(F("Cannot update EEPROM starting past the end of the EEPROM"));
    bc8a:	61 e4       	ldi	r22, 0x41	; 65
    bc8c:	77 e0       	ldi	r23, 0x07	; 7
    bc8e:	84 e0       	ldi	r24, 0x04	; 4
    bc90:	94 e2       	ldi	r25, 0x24	; 36
    bc92:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <_ZN5Print7printlnEPK19__FlashStringHelper>
    return NULL;
    bc96:	80 e0       	ldi	r24, 0x00	; 0
    bc98:	90 e0       	ldi	r25, 0x00	; 0
    bc9a:	82 c0       	rjmp	.+260    	; 0xbda0 <_ZN4Pbbe12updateEepromEPNS_6EepromEjPKhh+0x154>
  }

  // Enlarge the buffer if we would write past the end or allocate one
  // in the first place if none was passed in
  if (!eep || offset + length + CHECKSUM_SIZE > eep->size) {
    bc9c:	82 2f       	mov	r24, r18
    bc9e:	90 e0       	ldi	r25, 0x00	; 0
    bca0:	02 96       	adiw	r24, 0x02	; 2
    bca2:	86 0f       	add	r24, r22
    bca4:	97 1f       	adc	r25, r23
    bca6:	48 17       	cp	r20, r24
    bca8:	59 07       	cpc	r21, r25
    bcaa:	b0 f4       	brcc	.+44     	; 0xbcd8 <_ZN4Pbbe12updateEepromEPNS_6EepromEjPKhh+0x8c>
    eep = (Eeprom*)realloc(eep, sizeof(*eep) + offset + length + CHECKSUM_SIZE);
    bcac:	62 2f       	mov	r22, r18
    bcae:	70 e0       	ldi	r23, 0x00	; 0
    bcb0:	6d 5f       	subi	r22, 0xFD	; 253
    bcb2:	7f 4f       	sbci	r23, 0xFF	; 255
    bcb4:	6e 0d       	add	r22, r14
    bcb6:	7f 1d       	adc	r23, r15
    bcb8:	c8 01       	movw	r24, r16
    bcba:	2c 83       	std	Y+4, r18	; 0x04
    bcbc:	0e 94 55 b1 	call	0x162aa	; 0x162aa <realloc>
    bcc0:	8c 01       	movw	r16, r24
    if (!eep) {
    bcc2:	2c 81       	ldd	r18, Y+4	; 0x04
    bcc4:	00 97       	sbiw	r24, 0x00	; 0
    bcc6:	19 f4       	brne	.+6      	; 0xbcce <_ZN4Pbbe12updateEepromEPNS_6EepromEjPKhh+0x82>
      Serial.println("Failed to allocate memory for EEPROM update");
    bcc8:	67 ef       	ldi	r22, 0xF7	; 247
    bcca:	70 e1       	ldi	r23, 0x10	; 16
    bccc:	28 c0       	rjmp	.+80     	; 0xbd1e <_ZN4Pbbe12updateEepromEPNS_6EepromEjPKhh+0xd2>
      return NULL;
    }
    eep->size = offset + length + CHECKSUM_SIZE;
    bcce:	82 e0       	ldi	r24, 0x02	; 2
    bcd0:	82 0f       	add	r24, r18
    bcd2:	8e 0d       	add	r24, r14
    bcd4:	f8 01       	movw	r30, r16
    bcd6:	80 83       	st	Z, r24
  }

  // Update the contents, but skip readonly bytes
  for (size_t i = 0; i < length; ++i)
    bcd8:	c7 01       	movw	r24, r14
    bcda:	30 e0       	ldi	r19, 0x00	; 0
    bcdc:	ce 18       	sub	r12, r14
    bcde:	df 08       	sbc	r13, r15
    bce0:	ac 01       	movw	r20, r24
    bce2:	4e 19       	sub	r20, r14
    bce4:	5f 09       	sbc	r21, r15
    bce6:	42 17       	cp	r20, r18
    bce8:	53 07       	cpc	r21, r19
    bcea:	80 f4       	brcc	.+32     	; 0xbd0c <_ZN4Pbbe12updateEepromEPNS_6EepromEjPKhh+0xc0>
    bcec:	ac 01       	movw	r20, r24
    bcee:	43 50       	subi	r20, 0x03	; 3
    bcf0:	51 09       	sbc	r21, r1
    if (!isReadonly(eep, offset + i))
    bcf2:	48 30       	cpi	r20, 0x08	; 8
    bcf4:	51 05       	cpc	r21, r1
    bcf6:	40 f0       	brcs	.+16     	; 0xbd08 <_ZN4Pbbe12updateEepromEPNS_6EepromEjPKhh+0xbc>
    bcf8:	f6 01       	movw	r30, r12
    bcfa:	e8 0f       	add	r30, r24
    bcfc:	f9 1f       	adc	r31, r25
      eep->raw[offset + i] = buf[i];
    bcfe:	40 81       	ld	r20, Z
    bd00:	f8 01       	movw	r30, r16
    bd02:	e8 0f       	add	r30, r24
    bd04:	f9 1f       	adc	r31, r25
    bd06:	41 83       	std	Z+1, r20	; 0x01
    bd08:	01 96       	adiw	r24, 0x01	; 1
    bd0a:	ea cf       	rjmp	.-44     	; 0xbce0 <_ZN4Pbbe12updateEepromEPNS_6EepromEjPKhh+0x94>

  // See if the new contents still look valid
  DescriptorList *list = parseDescriptorListA(eep);
    bd0c:	60 e0       	ldi	r22, 0x00	; 0
    bd0e:	70 e0       	ldi	r23, 0x00	; 0
    bd10:	c8 01       	movw	r24, r16
    bd12:	24 dd       	rcall	.-1464   	; 0xb75c <_ZN4Pbbe20parseDescriptorListAEPKNS_6EepromEPKNS_6HeaderE>
    bd14:	6c 01       	movw	r12, r24
  if (!list) {
    bd16:	00 97       	sbiw	r24, 0x00	; 0
    bd18:	39 f4       	brne	.+14     	; 0xbd28 <_ZN4Pbbe12updateEepromEPNS_6EepromEjPKhh+0xdc>
    Serial.println("Could not parse updated EEPROM");
    bd1a:	63 e2       	ldi	r22, 0x23	; 35
    bd1c:	71 e1       	ldi	r23, 0x11	; 17
    bd1e:	84 e0       	ldi	r24, 0x04	; 4
    bd20:	94 e2       	ldi	r25, 0x24	; 36
    bd22:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <_ZN5Print7printlnEPKc>
    bd26:	b7 cf       	rjmp	.-146    	; 0xbc96 <_ZN4Pbbe12updateEepromEPNS_6EepromEjPKhh+0x4a>

  // Now, find out where the end of the last descriptor is and update
  // the "used size" in the header accordingly. This can change when
  // writing 0xff at the end of the EEPROM, or when the EEPROM was
  // ressized above.
  size_t last_offset = list->info[list->num_descriptors - 1].offset;
    bd28:	fc 01       	movw	r30, r24
    bd2a:	80 81       	ld	r24, Z
    bd2c:	90 e0       	ldi	r25, 0x00	; 0
    bd2e:	01 97       	sbiw	r24, 0x01	; 1
    bd30:	27 e0       	ldi	r18, 0x07	; 7
    bd32:	28 9f       	mul	r18, r24
    bd34:	f0 01       	movw	r30, r0
    bd36:	29 9f       	mul	r18, r25
    bd38:	f0 0d       	add	r31, r0
    bd3a:	11 24       	eor	r1, r1
    bd3c:	ec 0d       	add	r30, r12
    bd3e:	fd 1d       	adc	r31, r13
    bd40:	a2 80       	ldd	r10, Z+2	; 0x02
    bd42:	b3 80       	ldd	r11, Z+3	; 0x03
  MinimalDescriptor min;
  parseMinimalDescriptor(eep, last_offset, &min);
    bd44:	ae 01       	movw	r20, r28
    bd46:	4f 5f       	subi	r20, 0xFF	; 255
    bd48:	5f 4f       	sbci	r21, 0xFF	; 255
    bd4a:	b5 01       	movw	r22, r10
    bd4c:	c8 01       	movw	r24, r16
    bd4e:	a0 dc       	rcall	.-1728   	; 0xb690 <_ZN4Pbbe22parseMinimalDescriptorEPKNS_6EepromEjPNS_17MinimalDescriptorE>
  size_t used_size = last_offset + min.descriptor_length + min.name_length + CHECKSUM_SIZE;
    bd50:	8a 81       	ldd	r24, Y+2	; 0x02
    bd52:	eb 80       	ldd	r14, Y+3	; 0x03
    bd54:	f1 2c       	mov	r15, r1
    bd56:	e8 0e       	add	r14, r24
    bd58:	f1 1c       	adc	r15, r1
    bd5a:	ea 0c       	add	r14, r10
    bd5c:	fb 1c       	adc	r15, r11
    bd5e:	57 01       	movw	r10, r14
    bd60:	f2 e0       	ldi	r31, 0x02	; 2
    bd62:	af 0e       	add	r10, r31
    bd64:	b1 1c       	adc	r11, r1
  free(list);
    bd66:	c6 01       	movw	r24, r12
    bd68:	0e 94 c6 b0 	call	0x1618c	; 0x1618c <free>
  list = NULL;

  eep->raw[USED_SIZE_OFFSET] = used_size;
    bd6c:	f8 01       	movw	r30, r16
    bd6e:	a3 82       	std	Z+3, r10	; 0x03
  // Shrink the buffer if needed
  if (used_size != eep->size) {
    bd70:	80 81       	ld	r24, Z
    bd72:	90 e0       	ldi	r25, 0x00	; 0
    bd74:	a8 16       	cp	r10, r24
    bd76:	b9 06       	cpc	r11, r25
    bd78:	49 f0       	breq	.+18     	; 0xbd8c <_ZN4Pbbe12updateEepromEPNS_6EepromEjPKhh+0x140>
    eep = (Eeprom *)realloc(eep, sizeof(Eeprom) + used_size);
    bd7a:	b7 01       	movw	r22, r14
    bd7c:	6d 5f       	subi	r22, 0xFD	; 253
    bd7e:	7f 4f       	sbci	r23, 0xFF	; 255
    bd80:	c8 01       	movw	r24, r16
    bd82:	0e 94 55 b1 	call	0x162aa	; 0x162aa <realloc>
    bd86:	8c 01       	movw	r16, r24
    eep->size = used_size;
    bd88:	fc 01       	movw	r30, r24
    bd8a:	a0 82       	st	Z, r10
  }

  // Update the checksum
  uint16_t checksum = eepromChecksum(eep->raw, used_size - CHECKSUM_SIZE);
    bd8c:	b7 01       	movw	r22, r14
    bd8e:	c8 01       	movw	r24, r16
    bd90:	01 96       	adiw	r24, 0x01	; 1
    bd92:	a7 de       	rcall	.-690    	; 0xbae2 <_ZN4Pbbe14eepromChecksumEPhj>
  eep->raw[used_size - CHECKSUM_SIZE] = checksum >> 8;
    bd94:	f8 01       	movw	r30, r16
    bd96:	ee 0d       	add	r30, r14
    bd98:	ff 1d       	adc	r31, r15
    bd9a:	91 83       	std	Z+1, r25	; 0x01
  eep->raw[used_size - CHECKSUM_SIZE + 1] = checksum & 0xff;
    bd9c:	82 83       	std	Z+2, r24	; 0x02

  return eep;
    bd9e:	c8 01       	movw	r24, r16
}
    bda0:	0f 90       	pop	r0
    bda2:	0f 90       	pop	r0
    bda4:	0f 90       	pop	r0
    bda6:	0f 90       	pop	r0
    bda8:	df 91       	pop	r29
    bdaa:	cf 91       	pop	r28
    bdac:	1f 91       	pop	r17
    bdae:	0f 91       	pop	r16
    bdb0:	ff 90       	pop	r15
    bdb2:	ef 90       	pop	r14
    bdb4:	df 90       	pop	r13
    bdb6:	cf 90       	pop	r12
    bdb8:	bf 90       	pop	r11
    bdba:	af 90       	pop	r10
    bdbc:	08 95       	ret

0000bdbe <_ZN4PBBPC1Ev>:
#include "crc.h"
#include "PBBP-protocol.h"
#include <Arduino.h>

PBBP::PBBP() {
  this->last_error = OK;
    bdbe:	fc 01       	movw	r30, r24
    bdc0:	10 82       	st	Z, r1
    bdc2:	08 95       	ret

0000bdc4 <_ZN4PBBP5beginEh>:
}

void PBBP::begin(uint8_t pin) {
    bdc4:	26 2f       	mov	r18, r22
  this->pin = pin;
    bdc6:	fc 01       	movw	r30, r24
    bdc8:	62 83       	std	Z+2, r22	; 0x02
  pinMode(this->pin, INPUT);
    bdca:	60 e0       	ldi	r22, 0x00	; 0
    bdcc:	82 2f       	mov	r24, r18
    bdce:	0c 94 21 16 	jmp	0x2c42	; 0x2c42 <pinMode>

0000bdd2 <_ZN4PBBP14waitForFreeBusEv>:
  return sendCommand(slave_addr, CMD_WRITE_EEPROM) &&
         sendByte(eeprom_addr) &&
         sendBytes(buf, len);
}

bool PBBP::waitForFreeBus() {
    bdd2:	1f 93       	push	r17
    bdd4:	cf 93       	push	r28
    bdd6:	df 93       	push	r29
    bdd8:	ec 01       	movw	r28, r24
    bdda:	1f ef       	ldi	r17, 0xFF	; 255
  // TODO: A proper timeout
  uint8_t timeout = 255;
  while(timeout--) {
    if (digitalRead(this->pin) == HIGH)
    bddc:	8a 81       	ldd	r24, Y+2	; 0x02
    bdde:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <digitalRead>
    bde2:	11 50       	subi	r17, 0x01	; 1
    bde4:	01 97       	sbiw	r24, 0x01	; 1
    bde6:	31 f0       	breq	.+12     	; 0xbdf4 <_ZN4PBBP14waitForFreeBusEv+0x22>
}

bool PBBP::waitForFreeBus() {
  // TODO: A proper timeout
  uint8_t timeout = 255;
  while(timeout--) {
    bde8:	11 11       	cpse	r17, r1
    bdea:	f8 cf       	rjmp	.-16     	; 0xbddc <_ZN4PBBP14waitForFreeBusEv+0xa>
    if (digitalRead(this->pin) == HIGH)
      return true;
  }

  this->last_error = TIMEOUT;
    bdec:	82 e0       	ldi	r24, 0x02	; 2
    bdee:	88 83       	st	Y, r24
  return false;
    bdf0:	80 e0       	ldi	r24, 0x00	; 0
    bdf2:	01 c0       	rjmp	.+2      	; 0xbdf6 <_ZN4PBBP14waitForFreeBusEv+0x24>
bool PBBP::waitForFreeBus() {
  // TODO: A proper timeout
  uint8_t timeout = 255;
  while(timeout--) {
    if (digitalRead(this->pin) == HIGH)
      return true;
    bdf4:	81 e0       	ldi	r24, 0x01	; 1
  }

  this->last_error = TIMEOUT;
  return false;
}
    bdf6:	df 91       	pop	r29
    bdf8:	cf 91       	pop	r28
    bdfa:	1f 91       	pop	r17
    bdfc:	08 95       	ret

0000bdfe <_ZN4PBBP9sendResetEv>:
  } else {
    return (this->last_error == NO_ACK_OR_NACK);
  }
}

bool PBBP::sendReset() {
    bdfe:	0f 93       	push	r16
    be00:	1f 93       	push	r17
    be02:	cf 93       	push	r28
    be04:	df 93       	push	r29
    be06:	ec 01       	movw	r28, r24
  if (!this->waitForFreeBus())
    be08:	e4 df       	rcall	.-56     	; 0xbdd2 <_ZN4PBBP14waitForFreeBusEv>
    be0a:	18 2f       	mov	r17, r24
    be0c:	88 23       	and	r24, r24
    be0e:	71 f1       	breq	.+92     	; 0xbe6c <_ZN4PBBP9sendResetEv+0x6e>
    return false;
  this->bit_start = micros();
    be10:	0e 94 22 14 	call	0x2844	; 0x2844 <micros>
    be14:	6b 83       	std	Y+3, r22	; 0x03
    be16:	7c 83       	std	Y+4, r23	; 0x04
    be18:	8d 83       	std	Y+5, r24	; 0x05
    be1a:	9e 83       	std	Y+6, r25	; 0x06
  pinMode(this->pin, OUTPUT);
    be1c:	61 e0       	ldi	r22, 0x01	; 1
    be1e:	8a 81       	ldd	r24, Y+2	; 0x02
    be20:	0e 94 21 16 	call	0x2c42	; 0x2c42 <pinMode>
  digitalWrite(this->pin, LOW);
    be24:	60 e0       	ldi	r22, 0x00	; 0
    be26:	8a 81       	ldd	r24, Y+2	; 0x02
    be28:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <digitalWrite>
  while (micros() - this->bit_start < this->reset_time) /* wait */;
    be2c:	0e 94 22 14 	call	0x2844	; 0x2844 <micros>
    be30:	0b 81       	ldd	r16, Y+3	; 0x03
    be32:	1c 81       	ldd	r17, Y+4	; 0x04
    be34:	2d 81       	ldd	r18, Y+5	; 0x05
    be36:	3e 81       	ldd	r19, Y+6	; 0x06
    be38:	60 1b       	sub	r22, r16
    be3a:	71 0b       	sbc	r23, r17
    be3c:	82 0b       	sbc	r24, r18
    be3e:	93 0b       	sbc	r25, r19
    be40:	64 3c       	cpi	r22, 0xC4	; 196
    be42:	79 40       	sbci	r23, 0x09	; 9
    be44:	81 05       	cpc	r24, r1
    be46:	91 05       	cpc	r25, r1
    be48:	88 f3       	brcs	.-30     	; 0xbe2c <_ZN4PBBP9sendResetEv+0x2e>
  pinMode(this->pin, INPUT);
    be4a:	60 e0       	ldi	r22, 0x00	; 0
    be4c:	8a 81       	ldd	r24, Y+2	; 0x02
    be4e:	0e 94 21 16 	call	0x2c42	; 0x2c42 <pinMode>
  if (!this->waitForFreeBus())
    be52:	ce 01       	movw	r24, r28
    be54:	be df       	rcall	.-132    	; 0xbdd2 <_ZN4PBBP14waitForFreeBusEv>
    be56:	18 2f       	mov	r17, r24
    be58:	88 23       	and	r24, r24
    be5a:	41 f0       	breq	.+16     	; 0xbe6c <_ZN4PBBP9sendResetEv+0x6e>
    return false;
  delayMicroseconds(this->idle_time);
    be5c:	82 e3       	ldi	r24, 0x32	; 50
    be5e:	90 e0       	ldi	r25, 0x00	; 0
    be60:	0e 94 71 14 	call	0x28e2	; 0x28e2 <delayMicroseconds>
  // Make sure the next bit doesn't wait, nor complain that too much
  // time has passed since the previous bit
  this->bit_start = 0;
    be64:	1b 82       	std	Y+3, r1	; 0x03
    be66:	1c 82       	std	Y+4, r1	; 0x04
    be68:	1d 82       	std	Y+5, r1	; 0x05
    be6a:	1e 82       	std	Y+6, r1	; 0x06
  return true;
}
    be6c:	81 2f       	mov	r24, r17
    be6e:	df 91       	pop	r29
    be70:	cf 91       	pop	r28
    be72:	1f 91       	pop	r17
    be74:	0f 91       	pop	r16
    be76:	08 95       	ret

0000be78 <_ZN4PBBP19waitForNextBitStartEv>:

  this->last_error = TIMEOUT;
  return false;
}

bool PBBP::waitForNextBitStart() {
    be78:	0f 93       	push	r16
    be7a:	1f 93       	push	r17
    be7c:	cf 93       	push	r28
    be7e:	df 93       	push	r29
    be80:	ec 01       	movw	r28, r24
  if (bit_start != 0) {
    be82:	8b 81       	ldd	r24, Y+3	; 0x03
    be84:	9c 81       	ldd	r25, Y+4	; 0x04
    be86:	ad 81       	ldd	r26, Y+5	; 0x05
    be88:	be 81       	ldd	r27, Y+6	; 0x06
    be8a:	89 2b       	or	r24, r25
    be8c:	8a 2b       	or	r24, r26
    be8e:	8b 2b       	or	r24, r27
    be90:	89 f1       	breq	.+98     	; 0xbef4 <_ZN4PBBP19waitForNextBitStartEv+0x7c>
    // Make sure that at least idle_time passed since the end of the
    // previous bit
    while(micros() - bit_end < this->idle_time) /* wait */;
    be92:	0e 94 22 14 	call	0x2844	; 0x2844 <micros>
    be96:	0f 81       	ldd	r16, Y+7	; 0x07
    be98:	18 85       	ldd	r17, Y+8	; 0x08
    be9a:	29 85       	ldd	r18, Y+9	; 0x09
    be9c:	3a 85       	ldd	r19, Y+10	; 0x0a
    be9e:	60 1b       	sub	r22, r16
    bea0:	71 0b       	sbc	r23, r17
    bea2:	82 0b       	sbc	r24, r18
    bea4:	93 0b       	sbc	r25, r19
    bea6:	62 33       	cpi	r22, 0x32	; 50
    bea8:	71 05       	cpc	r23, r1
    beaa:	81 05       	cpc	r24, r1
    beac:	91 05       	cpc	r25, r1
    beae:	88 f3       	brcs	.-30     	; 0xbe92 <_ZN4PBBP19waitForNextBitStartEv+0x1a>

    // Make sure that at least next_bit_time passed since the start of the
    // previous bit
    while(micros() - bit_start < this->next_bit_time) /* wait */;
    beb0:	0e 94 22 14 	call	0x2844	; 0x2844 <micros>
    beb4:	0b 81       	ldd	r16, Y+3	; 0x03
    beb6:	1c 81       	ldd	r17, Y+4	; 0x04
    beb8:	2d 81       	ldd	r18, Y+5	; 0x05
    beba:	3e 81       	ldd	r19, Y+6	; 0x06
    bebc:	60 1b       	sub	r22, r16
    bebe:	71 0b       	sbc	r23, r17
    bec0:	82 0b       	sbc	r24, r18
    bec2:	93 0b       	sbc	r25, r19
    bec4:	6c 3b       	cpi	r22, 0xBC	; 188
    bec6:	72 40       	sbci	r23, 0x02	; 2
    bec8:	81 05       	cpc	r24, r1
    beca:	91 05       	cpc	r25, r1
    becc:	88 f3       	brcs	.-30     	; 0xbeb0 <_ZN4PBBP19waitForNextBitStartEv+0x38>

    // If this bit starts too late, the slave will have timed out already
    if (micros() - bit_start > this->max_next_bit_time) {
    bece:	0e 94 22 14 	call	0x2844	; 0x2844 <micros>
    bed2:	0b 81       	ldd	r16, Y+3	; 0x03
    bed4:	1c 81       	ldd	r17, Y+4	; 0x04
    bed6:	2d 81       	ldd	r18, Y+5	; 0x05
    bed8:	3e 81       	ldd	r19, Y+6	; 0x06
    beda:	60 1b       	sub	r22, r16
    bedc:	71 0b       	sbc	r23, r17
    bede:	82 0b       	sbc	r24, r18
    bee0:	93 0b       	sbc	r25, r19
    bee2:	6d 34       	cpi	r22, 0x4D	; 77
    bee4:	74 40       	sbci	r23, 0x04	; 4
    bee6:	81 05       	cpc	r24, r1
    bee8:	91 05       	cpc	r25, r1
    beea:	20 f0       	brcs	.+8      	; 0xbef4 <_ZN4PBBP19waitForNextBitStartEv+0x7c>
      this->last_error = BIT_TOO_LATE;
    beec:	88 e0       	ldi	r24, 0x08	; 8
    beee:	88 83       	st	Y, r24
      return false;
    bef0:	80 e0       	ldi	r24, 0x00	; 0
    bef2:	07 c0       	rjmp	.+14     	; 0xbf02 <_ZN4PBBP19waitForNextBitStartEv+0x8a>
    }
  }
  this->bit_start = micros();
    bef4:	0e 94 22 14 	call	0x2844	; 0x2844 <micros>
    bef8:	6b 83       	std	Y+3, r22	; 0x03
    befa:	7c 83       	std	Y+4, r23	; 0x04
    befc:	8d 83       	std	Y+5, r24	; 0x05
    befe:	9e 83       	std	Y+6, r25	; 0x06
  return true;
    bf00:	81 e0       	ldi	r24, 0x01	; 1
}
    bf02:	df 91       	pop	r29
    bf04:	cf 91       	pop	r28
    bf06:	1f 91       	pop	r17
    bf08:	0f 91       	pop	r16
    bf0a:	08 95       	ret

0000bf0c <_ZN4PBBP7sendBitEb>:

bool PBBP::sendBit(bool value) {
    bf0c:	cf 92       	push	r12
    bf0e:	df 92       	push	r13
    bf10:	ef 92       	push	r14
    bf12:	ff 92       	push	r15
    bf14:	0f 93       	push	r16
    bf16:	1f 93       	push	r17
    bf18:	cf 93       	push	r28
    bf1a:	df 93       	push	r29
    bf1c:	ec 01       	movw	r28, r24
    bf1e:	06 2f       	mov	r16, r22
  if (!waitForNextBitStart() || !waitForFreeBus())
    bf20:	ab df       	rcall	.-170    	; 0xbe78 <_ZN4PBBP19waitForNextBitStartEv>
    bf22:	88 23       	and	r24, r24
    bf24:	c1 f1       	breq	.+112    	; 0xbf96 <_ZN4PBBP7sendBitEb+0x8a>
    bf26:	ce 01       	movw	r24, r28
    bf28:	54 df       	rcall	.-344    	; 0xbdd2 <_ZN4PBBP14waitForFreeBusEv>
    bf2a:	18 2f       	mov	r17, r24
    bf2c:	88 23       	and	r24, r24
    bf2e:	99 f1       	breq	.+102    	; 0xbf96 <_ZN4PBBP7sendBitEb+0x8a>
    return false;
  pinMode(this->pin, OUTPUT);
    bf30:	61 e0       	ldi	r22, 0x01	; 1
    bf32:	8a 81       	ldd	r24, Y+2	; 0x02
    bf34:	0e 94 21 16 	call	0x2c42	; 0x2c42 <pinMode>
  while (micros() - this->bit_start < this->start_time) /* wait */;
    bf38:	0e 94 22 14 	call	0x2844	; 0x2844 <micros>
    bf3c:	cb 80       	ldd	r12, Y+3	; 0x03
    bf3e:	dc 80       	ldd	r13, Y+4	; 0x04
    bf40:	ed 80       	ldd	r14, Y+5	; 0x05
    bf42:	fe 80       	ldd	r15, Y+6	; 0x06
    bf44:	6c 19       	sub	r22, r12
    bf46:	7d 09       	sbc	r23, r13
    bf48:	8e 09       	sbc	r24, r14
    bf4a:	9f 09       	sbc	r25, r15
    bf4c:	6d 37       	cpi	r22, 0x7D	; 125
    bf4e:	71 05       	cpc	r23, r1
    bf50:	81 05       	cpc	r24, r1
    bf52:	91 05       	cpc	r25, r1
    bf54:	88 f3       	brcs	.-30     	; 0xbf38 <_ZN4PBBP7sendBitEb+0x2c>
  if (value)
    bf56:	00 23       	and	r16, r16
    bf58:	21 f0       	breq	.+8      	; 0xbf62 <_ZN4PBBP7sendBitEb+0x56>
    pinMode(this->pin, INPUT);
    bf5a:	60 e0       	ldi	r22, 0x00	; 0
    bf5c:	8a 81       	ldd	r24, Y+2	; 0x02
    bf5e:	0e 94 21 16 	call	0x2c42	; 0x2c42 <pinMode>
  while (micros() - this->bit_start < this->value_time) /* wait */;
    bf62:	0e 94 22 14 	call	0x2844	; 0x2844 <micros>
    bf66:	cb 80       	ldd	r12, Y+3	; 0x03
    bf68:	dc 80       	ldd	r13, Y+4	; 0x04
    bf6a:	ed 80       	ldd	r14, Y+5	; 0x05
    bf6c:	fe 80       	ldd	r15, Y+6	; 0x06
    bf6e:	6c 19       	sub	r22, r12
    bf70:	7d 09       	sbc	r23, r13
    bf72:	8e 09       	sbc	r24, r14
    bf74:	9f 09       	sbc	r25, r15
    bf76:	6a 38       	cpi	r22, 0x8A	; 138
    bf78:	72 40       	sbci	r23, 0x02	; 2
    bf7a:	81 05       	cpc	r24, r1
    bf7c:	91 05       	cpc	r25, r1
    bf7e:	88 f3       	brcs	.-30     	; 0xbf62 <_ZN4PBBP7sendBitEb+0x56>
  pinMode(this->pin, INPUT);
    bf80:	60 e0       	ldi	r22, 0x00	; 0
    bf82:	8a 81       	ldd	r24, Y+2	; 0x02
    bf84:	0e 94 21 16 	call	0x2c42	; 0x2c42 <pinMode>
  this->bit_end = micros();
    bf88:	0e 94 22 14 	call	0x2844	; 0x2844 <micros>
    bf8c:	6f 83       	std	Y+7, r22	; 0x07
    bf8e:	78 87       	std	Y+8, r23	; 0x08
    bf90:	89 87       	std	Y+9, r24	; 0x09
    bf92:	9a 87       	std	Y+10, r25	; 0x0a
    bf94:	01 c0       	rjmp	.+2      	; 0xbf98 <_ZN4PBBP7sendBitEb+0x8c>
  return true;
}

bool PBBP::sendBit(bool value) {
  if (!waitForNextBitStart() || !waitForFreeBus())
    return false;
    bf96:	10 e0       	ldi	r17, 0x00	; 0
    pinMode(this->pin, INPUT);
  while (micros() - this->bit_start < this->value_time) /* wait */;
  pinMode(this->pin, INPUT);
  this->bit_end = micros();
  return true;
}
    bf98:	81 2f       	mov	r24, r17
    bf9a:	df 91       	pop	r29
    bf9c:	cf 91       	pop	r28
    bf9e:	1f 91       	pop	r17
    bfa0:	0f 91       	pop	r16
    bfa2:	ff 90       	pop	r15
    bfa4:	ef 90       	pop	r14
    bfa6:	df 90       	pop	r13
    bfa8:	cf 90       	pop	r12
    bfaa:	08 95       	ret

0000bfac <_ZN4PBBP10receiveBitEPb>:

bool PBBP::receiveBit(bool *value) {
    bfac:	cf 92       	push	r12
    bfae:	df 92       	push	r13
    bfb0:	ef 92       	push	r14
    bfb2:	ff 92       	push	r15
    bfb4:	0f 93       	push	r16
    bfb6:	1f 93       	push	r17
    bfb8:	cf 93       	push	r28
    bfba:	df 93       	push	r29
    bfbc:	ec 01       	movw	r28, r24
    bfbe:	8b 01       	movw	r16, r22
  if (!waitForNextBitStart() || !waitForFreeBus())
    bfc0:	5b df       	rcall	.-330    	; 0xbe78 <_ZN4PBBP19waitForNextBitStartEv>
    bfc2:	88 23       	and	r24, r24
    bfc4:	21 f0       	breq	.+8      	; 0xbfce <_ZN4PBBP10receiveBitEPb+0x22>
    bfc6:	ce 01       	movw	r24, r28
    bfc8:	04 df       	rcall	.-504    	; 0xbdd2 <_ZN4PBBP14waitForFreeBusEv>
    bfca:	81 11       	cpse	r24, r1
    bfcc:	02 c0       	rjmp	.+4      	; 0xbfd2 <_ZN4PBBP10receiveBitEPb+0x26>
    return false;
    bfce:	10 e0       	ldi	r17, 0x00	; 0
    bfd0:	49 c0       	rjmp	.+146    	; 0xc064 <_ZN4PBBP10receiveBitEPb+0xb8>
  pinMode(this->pin, OUTPUT);
    bfd2:	61 e0       	ldi	r22, 0x01	; 1
    bfd4:	8a 81       	ldd	r24, Y+2	; 0x02
    bfd6:	0e 94 21 16 	call	0x2c42	; 0x2c42 <pinMode>
  while (micros() - this->bit_start < this->start_time) /* wait */;
    bfda:	0e 94 22 14 	call	0x2844	; 0x2844 <micros>
    bfde:	cb 80       	ldd	r12, Y+3	; 0x03
    bfe0:	dc 80       	ldd	r13, Y+4	; 0x04
    bfe2:	ed 80       	ldd	r14, Y+5	; 0x05
    bfe4:	fe 80       	ldd	r15, Y+6	; 0x06
    bfe6:	6c 19       	sub	r22, r12
    bfe8:	7d 09       	sbc	r23, r13
    bfea:	8e 09       	sbc	r24, r14
    bfec:	9f 09       	sbc	r25, r15
    bfee:	6d 37       	cpi	r22, 0x7D	; 125
    bff0:	71 05       	cpc	r23, r1
    bff2:	81 05       	cpc	r24, r1
    bff4:	91 05       	cpc	r25, r1
    bff6:	88 f3       	brcs	.-30     	; 0xbfda <_ZN4PBBP10receiveBitEPb+0x2e>
  pinMode(this->pin, INPUT);
    bff8:	60 e0       	ldi	r22, 0x00	; 0
    bffa:	8a 81       	ldd	r24, Y+2	; 0x02
    bffc:	0e 94 21 16 	call	0x2c42	; 0x2c42 <pinMode>
  while (micros() - this->bit_start < this->sample_time) /* wait */;
    c000:	0e 94 22 14 	call	0x2844	; 0x2844 <micros>
    c004:	cb 80       	ldd	r12, Y+3	; 0x03
    c006:	dc 80       	ldd	r13, Y+4	; 0x04
    c008:	ed 80       	ldd	r14, Y+5	; 0x05
    c00a:	fe 80       	ldd	r15, Y+6	; 0x06
    c00c:	6c 19       	sub	r22, r12
    c00e:	7d 09       	sbc	r23, r13
    c010:	8e 09       	sbc	r24, r14
    c012:	9f 09       	sbc	r25, r15
    c014:	6e 35       	cpi	r22, 0x5E	; 94
    c016:	71 40       	sbci	r23, 0x01	; 1
    c018:	81 05       	cpc	r24, r1
    c01a:	91 05       	cpc	r25, r1
    c01c:	88 f3       	brcs	.-30     	; 0xc000 <_ZN4PBBP10receiveBitEPb+0x54>
  *value = digitalRead(this->pin);
    c01e:	8a 81       	ldd	r24, Y+2	; 0x02
    c020:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <digitalRead>
    c024:	21 e0       	ldi	r18, 0x01	; 1
    c026:	89 2b       	or	r24, r25
    c028:	09 f4       	brne	.+2      	; 0xc02c <_ZN4PBBP10receiveBitEPb+0x80>
    c02a:	20 e0       	ldi	r18, 0x00	; 0
    c02c:	f8 01       	movw	r30, r16
    c02e:	20 83       	st	Z, r18
  while (micros() - this->bit_start < this->value_time) /* wait */;
    c030:	0e 94 22 14 	call	0x2844	; 0x2844 <micros>
    c034:	0b 81       	ldd	r16, Y+3	; 0x03
    c036:	1c 81       	ldd	r17, Y+4	; 0x04
    c038:	2d 81       	ldd	r18, Y+5	; 0x05
    c03a:	3e 81       	ldd	r19, Y+6	; 0x06
    c03c:	60 1b       	sub	r22, r16
    c03e:	71 0b       	sbc	r23, r17
    c040:	82 0b       	sbc	r24, r18
    c042:	93 0b       	sbc	r25, r19
    c044:	6a 38       	cpi	r22, 0x8A	; 138
    c046:	72 40       	sbci	r23, 0x02	; 2
    c048:	81 05       	cpc	r24, r1
    c04a:	91 05       	cpc	r25, r1
    c04c:	88 f3       	brcs	.-30     	; 0xc030 <_ZN4PBBP10receiveBitEPb+0x84>
  // If a slave pulls the line low, wait for him to finish (to
  // prevent the idle time from disappearing because of a slow
  // slave), but don't wait forever.
  if (!waitForFreeBus())
    c04e:	ce 01       	movw	r24, r28
    c050:	c0 de       	rcall	.-640    	; 0xbdd2 <_ZN4PBBP14waitForFreeBusEv>
    c052:	18 2f       	mov	r17, r24
    c054:	88 23       	and	r24, r24
    c056:	31 f0       	breq	.+12     	; 0xc064 <_ZN4PBBP10receiveBitEPb+0xb8>
    return false;
  this->bit_end = micros();
    c058:	0e 94 22 14 	call	0x2844	; 0x2844 <micros>
    c05c:	6f 83       	std	Y+7, r22	; 0x07
    c05e:	78 87       	std	Y+8, r23	; 0x08
    c060:	89 87       	std	Y+9, r24	; 0x09
    c062:	9a 87       	std	Y+10, r25	; 0x0a
  return true;
}
    c064:	81 2f       	mov	r24, r17
    c066:	df 91       	pop	r29
    c068:	cf 91       	pop	r28
    c06a:	1f 91       	pop	r17
    c06c:	0f 91       	pop	r16
    c06e:	ff 90       	pop	r15
    c070:	ef 90       	pop	r14
    c072:	df 90       	pop	r13
    c074:	cf 90       	pop	r12
    c076:	08 95       	ret

0000c078 <_ZN4PBBP12receiveReadyEv>:

bool PBBP::receiveReady() {
    c078:	ef 92       	push	r14
    c07a:	ff 92       	push	r15
    c07c:	0f 93       	push	r16
    c07e:	1f 93       	push	r17
    c080:	cf 93       	push	r28
    c082:	df 93       	push	r29
    c084:	1f 92       	push	r1
    c086:	cd b7       	in	r28, 0x3d	; 61
    c088:	de b7       	in	r29, 0x3e	; 62
    c08a:	7c 01       	movw	r14, r24
  int timeout = this->max_stall_bits;
  while (timeout--) {
    c08c:	05 e1       	ldi	r16, 0x15	; 21
    c08e:	10 e0       	ldi	r17, 0x00	; 0
    c090:	01 50       	subi	r16, 0x01	; 1
    c092:	11 09       	sbc	r17, r1
    c094:	01 15       	cp	r16, r1
    c096:	11 05       	cpc	r17, r1
    c098:	59 f0       	breq	.+22     	; 0xc0b0 <_ZN4PBBP12receiveReadyEv+0x38>
    bool value;
    if (!receiveBit(&value))
    c09a:	be 01       	movw	r22, r28
    c09c:	6f 5f       	subi	r22, 0xFF	; 255
    c09e:	7f 4f       	sbci	r23, 0xFF	; 255
    c0a0:	c7 01       	movw	r24, r14
    c0a2:	84 df       	rcall	.-248    	; 0xbfac <_ZN4PBBP10receiveBitEPb>
    c0a4:	88 23       	and	r24, r24
    c0a6:	41 f0       	breq	.+16     	; 0xc0b8 <_ZN4PBBP12receiveReadyEv+0x40>
      return false;

    // Ready bit?
    if (value)
    c0a8:	99 81       	ldd	r25, Y+1	; 0x01
    c0aa:	99 23       	and	r25, r25
    c0ac:	89 f3       	breq	.-30     	; 0xc090 <_ZN4PBBP12receiveReadyEv+0x18>
    c0ae:	04 c0       	rjmp	.+8      	; 0xc0b8 <_ZN4PBBP12receiveReadyEv+0x40>
      return true;
  }
  this->last_error = STALL_TIMEOUT;
    c0b0:	81 e0       	ldi	r24, 0x01	; 1
    c0b2:	f7 01       	movw	r30, r14
    c0b4:	80 83       	st	Z, r24
  return false;
    c0b6:	80 e0       	ldi	r24, 0x00	; 0
}
    c0b8:	0f 90       	pop	r0
    c0ba:	df 91       	pop	r29
    c0bc:	cf 91       	pop	r28
    c0be:	1f 91       	pop	r17
    c0c0:	0f 91       	pop	r16
    c0c2:	ff 90       	pop	r15
    c0c4:	ef 90       	pop	r14
    c0c6:	08 95       	ret

0000c0c8 <_ZN4PBBP10receiveAckEv>:

bool PBBP::receiveAck() {
    c0c8:	0f 93       	push	r16
    c0ca:	1f 93       	push	r17
    c0cc:	cf 93       	push	r28
    c0ce:	df 93       	push	r29
    c0d0:	1f 92       	push	r1
    c0d2:	1f 92       	push	r1
    c0d4:	cd b7       	in	r28, 0x3d	; 61
    c0d6:	de b7       	in	r29, 0x3e	; 62
    c0d8:	8c 01       	movw	r16, r24
  bool first, second;
  if (!receiveBit(&first) || !receiveBit(&second))
    c0da:	be 01       	movw	r22, r28
    c0dc:	6e 5f       	subi	r22, 0xFE	; 254
    c0de:	7f 4f       	sbci	r23, 0xFF	; 255
    c0e0:	65 df       	rcall	.-310    	; 0xbfac <_ZN4PBBP10receiveBitEPb>
    c0e2:	88 23       	and	r24, r24
    c0e4:	81 f0       	breq	.+32     	; 0xc106 <_ZN4PBBP10receiveAckEv+0x3e>
    c0e6:	be 01       	movw	r22, r28
    c0e8:	6f 5f       	subi	r22, 0xFF	; 255
    c0ea:	7f 4f       	sbci	r23, 0xFF	; 255
    c0ec:	c8 01       	movw	r24, r16
    c0ee:	5e df       	rcall	.-324    	; 0xbfac <_ZN4PBBP10receiveBitEPb>
    c0f0:	88 23       	and	r24, r24
    c0f2:	49 f0       	breq	.+18     	; 0xc106 <_ZN4PBBP10receiveAckEv+0x3e>
    return false;

  // Acks are sent as 01, nacks as 10. Since the 0 is dominant during
  // a bus conflict, a receiveing of 00 means both an ack and a nack was
  // sent.
  if (!first && !second ) {
    c0f4:	9a 81       	ldd	r25, Y+2	; 0x02
    c0f6:	29 81       	ldd	r18, Y+1	; 0x01
    c0f8:	91 11       	cpse	r25, r1
    c0fa:	07 c0       	rjmp	.+14     	; 0xc10a <_ZN4PBBP10receiveAckEv+0x42>
    c0fc:	21 11       	cpse	r18, r1
    c0fe:	05 c0       	rjmp	.+10     	; 0xc10a <_ZN4PBBP10receiveAckEv+0x42>
    this->last_error = ACK_AND_NACK;
    c100:	86 e0       	ldi	r24, 0x06	; 6
    } else {
      this->last_error = NACK_NO_SLAVE_CODE;
    }
    return false;
  } else if (first) {
    this->last_error = NO_ACK_OR_NACK;
    c102:	f8 01       	movw	r30, r16
    c104:	80 83       	st	Z, r24
}

bool PBBP::receiveAck() {
  bool first, second;
  if (!receiveBit(&first) || !receiveBit(&second))
    return false;
    c106:	80 e0       	ldi	r24, 0x00	; 0
    c108:	11 c0       	rjmp	.+34     	; 0xc12c <_ZN4PBBP10receiveAckEv+0x64>
  // a bus conflict, a receiveing of 00 means both an ack and a nack was
  // sent.
  if (!first && !second ) {
    this->last_error = ACK_AND_NACK;
    return false;
  } else if (!second ) {
    c10a:	21 11       	cpse	r18, r1
    c10c:	0b c0       	rjmp	.+22     	; 0xc124 <_ZN4PBBP10receiveAckEv+0x5c>
    // Read error code from the slave
    if (receiveByte(&this->last_slave_error)) {
    c10e:	b8 01       	movw	r22, r16
    c110:	6f 5f       	subi	r22, 0xFF	; 255
    c112:	7f 4f       	sbci	r23, 0xFF	; 255
    c114:	c8 01       	movw	r24, r16
    c116:	bb d0       	rcall	.+374    	; 0xc28e <_ZN4PBBP11receiveByteEPh>
    c118:	88 23       	and	r24, r24
    c11a:	11 f0       	breq	.+4      	; 0xc120 <_ZN4PBBP10receiveAckEv+0x58>
      this->last_error = NACK;
    c11c:	83 e0       	ldi	r24, 0x03	; 3
    c11e:	f1 cf       	rjmp	.-30     	; 0xc102 <_ZN4PBBP10receiveAckEv+0x3a>
    } else {
      this->last_error = NACK_NO_SLAVE_CODE;
    c120:	84 e0       	ldi	r24, 0x04	; 4
    c122:	ef cf       	rjmp	.-34     	; 0xc102 <_ZN4PBBP10receiveAckEv+0x3a>
    }
    return false;
  } else if (first) {
    c124:	99 23       	and	r25, r25
    c126:	11 f0       	breq	.+4      	; 0xc12c <_ZN4PBBP10receiveAckEv+0x64>
    this->last_error = NO_ACK_OR_NACK;
    c128:	85 e0       	ldi	r24, 0x05	; 5
    c12a:	eb cf       	rjmp	.-42     	; 0xc102 <_ZN4PBBP10receiveAckEv+0x3a>
    return false;
  } else {
    return true;
  }
}
    c12c:	0f 90       	pop	r0
    c12e:	0f 90       	pop	r0
    c130:	df 91       	pop	r29
    c132:	cf 91       	pop	r28
    c134:	1f 91       	pop	r17
    c136:	0f 91       	pop	r16
    c138:	08 95       	ret

0000c13a <_ZN4PBBP8sendByteEh>:
  // time has passed since the previous bit
  this->bit_start = 0;
  return true;
}

bool PBBP::sendByte(uint8_t b) {
    c13a:	cf 92       	push	r12
    c13c:	df 92       	push	r13
    c13e:	ef 92       	push	r14
    c140:	ff 92       	push	r15
    c142:	0f 93       	push	r16
    c144:	1f 93       	push	r17
    c146:	cf 93       	push	r28
    c148:	df 93       	push	r29
    c14a:	ec 01       	movw	r28, r24
    c14c:	d6 2e       	mov	r13, r22
    c14e:	08 e0       	ldi	r16, 0x08	; 8
    c150:	10 e0       	ldi	r17, 0x00	; 0
  bool parity_val = 0;
  bool ok = true;
  uint8_t next_bit = 0x80;
    c152:	80 e8       	ldi	r24, 0x80	; 128
    c154:	e8 2e       	mov	r14, r24
  this->bit_start = 0;
  return true;
}

bool PBBP::sendByte(uint8_t b) {
  bool parity_val = 0;
    c156:	f1 2c       	mov	r15, r1
  bool ok = true;
  uint8_t next_bit = 0x80;
  while (next_bit && ok) {
    if (b & next_bit)
      parity_val ^= 1;
    c158:	cc 24       	eor	r12, r12
    c15a:	c3 94       	inc	r12
bool PBBP::sendByte(uint8_t b) {
  bool parity_val = 0;
  bool ok = true;
  uint8_t next_bit = 0x80;
  while (next_bit && ok) {
    if (b & next_bit)
    c15c:	9e 2d       	mov	r25, r14
    c15e:	9d 21       	and	r25, r13
    c160:	09 f0       	breq	.+2      	; 0xc164 <_ZN4PBBP8sendByteEh+0x2a>
      parity_val ^= 1;
    c162:	fc 24       	eor	r15, r12
    if (!sendBit(b & next_bit))
    c164:	61 e0       	ldi	r22, 0x01	; 1
    c166:	91 11       	cpse	r25, r1
    c168:	01 c0       	rjmp	.+2      	; 0xc16c <_ZN4PBBP8sendByteEh+0x32>
    c16a:	60 e0       	ldi	r22, 0x00	; 0
    c16c:	ce 01       	movw	r24, r28
    c16e:	ce de       	rcall	.-612    	; 0xbf0c <_ZN4PBBP7sendBitEb>
    c170:	88 23       	and	r24, r24
    c172:	d1 f0       	breq	.+52     	; 0xc1a8 <_ZN4PBBP8sendByteEh+0x6e>
      return false;
    next_bit >>= 1;
    c174:	e6 94       	lsr	r14
    c176:	01 50       	subi	r16, 0x01	; 1
    c178:	11 09       	sbc	r17, r1

bool PBBP::sendByte(uint8_t b) {
  bool parity_val = 0;
  bool ok = true;
  uint8_t next_bit = 0x80;
  while (next_bit && ok) {
    c17a:	01 15       	cp	r16, r1
    c17c:	11 05       	cpc	r17, r1
    c17e:	71 f7       	brne	.-36     	; 0xc15c <_ZN4PBBP8sendByteEh+0x22>
    if (!sendBit(b & next_bit))
      return false;
    next_bit >>= 1;
  }

  return sendBit(!parity_val) && receiveReady() && receiveAck();
    c180:	61 e0       	ldi	r22, 0x01	; 1
    c182:	6f 25       	eor	r22, r15
    c184:	ce 01       	movw	r24, r28
    c186:	c2 de       	rcall	.-636    	; 0xbf0c <_ZN4PBBP7sendBitEb>
    c188:	88 23       	and	r24, r24
    c18a:	71 f0       	breq	.+28     	; 0xc1a8 <_ZN4PBBP8sendByteEh+0x6e>
    c18c:	ce 01       	movw	r24, r28
    c18e:	74 df       	rcall	.-280    	; 0xc078 <_ZN4PBBP12receiveReadyEv>
    c190:	88 23       	and	r24, r24
    c192:	51 f0       	breq	.+20     	; 0xc1a8 <_ZN4PBBP8sendByteEh+0x6e>
    c194:	ce 01       	movw	r24, r28
}
    c196:	df 91       	pop	r29
    c198:	cf 91       	pop	r28
    c19a:	1f 91       	pop	r17
    c19c:	0f 91       	pop	r16
    c19e:	ff 90       	pop	r15
    c1a0:	ef 90       	pop	r14
    c1a2:	df 90       	pop	r13
    c1a4:	cf 90       	pop	r12
    if (!sendBit(b & next_bit))
      return false;
    next_bit >>= 1;
  }

  return sendBit(!parity_val) && receiveReady() && receiveAck();
    c1a6:	90 cf       	rjmp	.-224    	; 0xc0c8 <_ZN4PBBP10receiveAckEv>
}
    c1a8:	80 e0       	ldi	r24, 0x00	; 0
    c1aa:	df 91       	pop	r29
    c1ac:	cf 91       	pop	r28
    c1ae:	1f 91       	pop	r17
    c1b0:	0f 91       	pop	r16
    c1b2:	ff 90       	pop	r15
    c1b4:	ef 90       	pop	r14
    c1b6:	df 90       	pop	r13
    c1b8:	cf 90       	pop	r12
    c1ba:	08 95       	ret

0000c1bc <_ZN4PBBP9sendBytesEPKhh>:

bool PBBP::sendBytes(const uint8_t *buf, uint8_t len) {
    c1bc:	ef 92       	push	r14
    c1be:	ff 92       	push	r15
    c1c0:	0f 93       	push	r16
    c1c2:	1f 93       	push	r17
    c1c4:	cf 93       	push	r28
    c1c6:	df 93       	push	r29
    c1c8:	1f 92       	push	r1
    c1ca:	cd b7       	in	r28, 0x3d	; 61
    c1cc:	de b7       	in	r29, 0x3e	; 62
    c1ce:	8c 01       	movw	r16, r24
  while (len--) {
    c1d0:	7b 01       	movw	r14, r22
    c1d2:	46 0f       	add	r20, r22
    c1d4:	4e 15       	cp	r20, r14
    c1d6:	51 f0       	breq	.+20     	; 0xc1ec <_ZN4PBBP9sendBytesEPKhh+0x30>
    if (!sendByte(*buf++))
    c1d8:	f7 01       	movw	r30, r14
    c1da:	61 91       	ld	r22, Z+
    c1dc:	7f 01       	movw	r14, r30
    c1de:	c8 01       	movw	r24, r16
    c1e0:	49 83       	std	Y+1, r20	; 0x01
    c1e2:	ab df       	rcall	.-170    	; 0xc13a <_ZN4PBBP8sendByteEh>
    c1e4:	49 81       	ldd	r20, Y+1	; 0x01
    c1e6:	81 11       	cpse	r24, r1
    c1e8:	f5 cf       	rjmp	.-22     	; 0xc1d4 <_ZN4PBBP9sendBytesEPKhh+0x18>
    c1ea:	01 c0       	rjmp	.+2      	; 0xc1ee <_ZN4PBBP9sendBytesEPKhh+0x32>
      return false;
  }
  return true;
    c1ec:	81 e0       	ldi	r24, 0x01	; 1
}
    c1ee:	0f 90       	pop	r0
    c1f0:	df 91       	pop	r29
    c1f2:	cf 91       	pop	r28
    c1f4:	1f 91       	pop	r17
    c1f6:	0f 91       	pop	r16
    c1f8:	ff 90       	pop	r15
    c1fa:	ef 90       	pop	r14
    c1fc:	08 95       	ret

0000c1fe <_ZN4PBBP11sendCommandEhh>:
      return false;
  }
  return true;
}

bool PBBP::sendCommand(uint8_t slave_addr, uint8_t command) {
    c1fe:	ef 92       	push	r14
    c200:	ff 92       	push	r15
    c202:	1f 93       	push	r17
    c204:	cf 93       	push	r28
    c206:	df 93       	push	r29
    c208:	1f 92       	push	r1
    c20a:	cd b7       	in	r28, 0x3d	; 61
    c20c:	de b7       	in	r29, 0x3e	; 62
    c20e:	7c 01       	movw	r14, r24
    c210:	14 2f       	mov	r17, r20
  return sendReset() &&
    c212:	69 83       	std	Y+1, r22	; 0x01
    c214:	f4 dd       	rcall	.-1048   	; 0xbdfe <_ZN4PBBP9sendResetEv>
         sendByte(slave_addr) &&
    c216:	69 81       	ldd	r22, Y+1	; 0x01
    c218:	88 23       	and	r24, r24
    c21a:	69 f0       	breq	.+26     	; 0xc236 <_ZN4PBBP11sendCommandEhh+0x38>
    c21c:	c7 01       	movw	r24, r14
    c21e:	8d df       	rcall	.-230    	; 0xc13a <_ZN4PBBP8sendByteEh>
  }
  return true;
}

bool PBBP::sendCommand(uint8_t slave_addr, uint8_t command) {
  return sendReset() &&
    c220:	88 23       	and	r24, r24
    c222:	49 f0       	breq	.+18     	; 0xc236 <_ZN4PBBP11sendCommandEhh+0x38>
         sendByte(slave_addr) &&
         sendByte(command);
    c224:	61 2f       	mov	r22, r17
    c226:	c7 01       	movw	r24, r14
}
    c228:	0f 90       	pop	r0
    c22a:	df 91       	pop	r29
    c22c:	cf 91       	pop	r28
    c22e:	1f 91       	pop	r17
    c230:	ff 90       	pop	r15
    c232:	ef 90       	pop	r14
}

bool PBBP::sendCommand(uint8_t slave_addr, uint8_t command) {
  return sendReset() &&
         sendByte(slave_addr) &&
         sendByte(command);
    c234:	82 cf       	rjmp	.-252    	; 0xc13a <_ZN4PBBP8sendByteEh>
}
    c236:	80 e0       	ldi	r24, 0x00	; 0
    c238:	0f 90       	pop	r0
    c23a:	df 91       	pop	r29
    c23c:	cf 91       	pop	r28
    c23e:	1f 91       	pop	r17
    c240:	ff 90       	pop	r15
    c242:	ef 90       	pop	r14
    c244:	08 95       	ret

0000c246 <_ZN4PBBP11writeEepromEhhPKhh>:
  return sendCommand(slave_addr, CMD_READ_EEPROM) &&
         sendByte(eeprom_addr) &&
         receiveBytes(buf, len);
}

bool PBBP::writeEeprom(uint8_t slave_addr, uint8_t eeprom_addr, const uint8_t *buf, uint8_t len) {
    c246:	ef 92       	push	r14
    c248:	ff 92       	push	r15
    c24a:	0f 93       	push	r16
    c24c:	1f 93       	push	r17
    c24e:	cf 93       	push	r28
    c250:	df 93       	push	r29
    c252:	ec 01       	movw	r28, r24
    c254:	14 2f       	mov	r17, r20
    c256:	79 01       	movw	r14, r18
  return sendCommand(slave_addr, CMD_WRITE_EEPROM) &&
    c258:	42 e0       	ldi	r20, 0x02	; 2
    c25a:	d1 df       	rcall	.-94     	; 0xc1fe <_ZN4PBBP11sendCommandEhh>
         sendByte(eeprom_addr) &&
    c25c:	88 23       	and	r24, r24
    c25e:	79 f0       	breq	.+30     	; 0xc27e <_ZN4PBBP11writeEepromEhhPKhh+0x38>
    c260:	61 2f       	mov	r22, r17
    c262:	ce 01       	movw	r24, r28
    c264:	6a df       	rcall	.-300    	; 0xc13a <_ZN4PBBP8sendByteEh>
         sendByte(eeprom_addr) &&
         receiveBytes(buf, len);
}

bool PBBP::writeEeprom(uint8_t slave_addr, uint8_t eeprom_addr, const uint8_t *buf, uint8_t len) {
  return sendCommand(slave_addr, CMD_WRITE_EEPROM) &&
    c266:	88 23       	and	r24, r24
    c268:	51 f0       	breq	.+20     	; 0xc27e <_ZN4PBBP11writeEepromEhhPKhh+0x38>
         sendByte(eeprom_addr) &&
         sendBytes(buf, len);
    c26a:	40 2f       	mov	r20, r16
    c26c:	b7 01       	movw	r22, r14
    c26e:	ce 01       	movw	r24, r28
}
    c270:	df 91       	pop	r29
    c272:	cf 91       	pop	r28
    c274:	1f 91       	pop	r17
    c276:	0f 91       	pop	r16
    c278:	ff 90       	pop	r15
    c27a:	ef 90       	pop	r14
}

bool PBBP::writeEeprom(uint8_t slave_addr, uint8_t eeprom_addr, const uint8_t *buf, uint8_t len) {
  return sendCommand(slave_addr, CMD_WRITE_EEPROM) &&
         sendByte(eeprom_addr) &&
         sendBytes(buf, len);
    c27c:	9f cf       	rjmp	.-194    	; 0xc1bc <_ZN4PBBP9sendBytesEPKhh>
}
    c27e:	80 e0       	ldi	r24, 0x00	; 0
    c280:	df 91       	pop	r29
    c282:	cf 91       	pop	r28
    c284:	1f 91       	pop	r17
    c286:	0f 91       	pop	r16
    c288:	ff 90       	pop	r15
    c28a:	ef 90       	pop	r14
    c28c:	08 95       	ret

0000c28e <_ZN4PBBP11receiveByteEPh>:
      return false;
  }
  return true;
}

bool PBBP::receiveByte(uint8_t *b) {
    c28e:	9f 92       	push	r9
    c290:	af 92       	push	r10
    c292:	bf 92       	push	r11
    c294:	cf 92       	push	r12
    c296:	df 92       	push	r13
    c298:	ef 92       	push	r14
    c29a:	ff 92       	push	r15
    c29c:	0f 93       	push	r16
    c29e:	1f 93       	push	r17
    c2a0:	cf 93       	push	r28
    c2a2:	df 93       	push	r29
    c2a4:	1f 92       	push	r1
    c2a6:	cd b7       	in	r28, 0x3d	; 61
    c2a8:	de b7       	in	r29, 0x3e	; 62
    c2aa:	8c 01       	movw	r16, r24
    c2ac:	7b 01       	movw	r14, r22
  bool parity_val = 0;
  *b = 0;
    c2ae:	fb 01       	movw	r30, r22
    c2b0:	10 82       	st	Z, r1
    c2b2:	98 e0       	ldi	r25, 0x08	; 8
    c2b4:	c9 2e       	mov	r12, r25
    c2b6:	d1 2c       	mov	r13, r1
  uint8_t next_bit = 0x80;
    c2b8:	20 e8       	ldi	r18, 0x80	; 128
    c2ba:	a2 2e       	mov	r10, r18
  }
  return true;
}

bool PBBP::receiveByte(uint8_t *b) {
  bool parity_val = 0;
    c2bc:	b1 2c       	mov	r11, r1
    if (!receiveBit(&value))
      return false;

    if (value) {
      *b |= next_bit;
      parity_val ^= 1;
    c2be:	99 24       	eor	r9, r9
    c2c0:	93 94       	inc	r9
  *b = 0;
  uint8_t next_bit = 0x80;
  bool value;
  // Receive data bits
  while (next_bit) {
    if (!receiveBit(&value))
    c2c2:	be 01       	movw	r22, r28
    c2c4:	6f 5f       	subi	r22, 0xFF	; 255
    c2c6:	7f 4f       	sbci	r23, 0xFF	; 255
    c2c8:	c8 01       	movw	r24, r16
    c2ca:	70 de       	rcall	.-800    	; 0xbfac <_ZN4PBBP10receiveBitEPb>
    c2cc:	88 23       	and	r24, r24
    c2ce:	21 f1       	breq	.+72     	; 0xc318 <_ZN4PBBP11receiveByteEPh+0x8a>
      return false;

    if (value) {
    c2d0:	89 81       	ldd	r24, Y+1	; 0x01
    c2d2:	88 23       	and	r24, r24
    c2d4:	29 f0       	breq	.+10     	; 0xc2e0 <_ZN4PBBP11receiveByteEPh+0x52>
      *b |= next_bit;
    c2d6:	f7 01       	movw	r30, r14
    c2d8:	80 81       	ld	r24, Z
    c2da:	8a 29       	or	r24, r10
    c2dc:	80 83       	st	Z, r24
      parity_val ^= 1;
    c2de:	b9 24       	eor	r11, r9
    }
    next_bit >>= 1;
    c2e0:	a6 94       	lsr	r10
    c2e2:	f1 e0       	ldi	r31, 0x01	; 1
    c2e4:	cf 1a       	sub	r12, r31
    c2e6:	d1 08       	sbc	r13, r1
  bool parity_val = 0;
  *b = 0;
  uint8_t next_bit = 0x80;
  bool value;
  // Receive data bits
  while (next_bit) {
    c2e8:	c1 14       	cp	r12, r1
    c2ea:	d1 04       	cpc	r13, r1
    c2ec:	51 f7       	brne	.-44     	; 0xc2c2 <_ZN4PBBP11receiveByteEPh+0x34>
      parity_val ^= 1;
    }
    next_bit >>= 1;
  }
  // Receive parity bit
  if (!receiveBit(&value))
    c2ee:	be 01       	movw	r22, r28
    c2f0:	6f 5f       	subi	r22, 0xFF	; 255
    c2f2:	7f 4f       	sbci	r23, 0xFF	; 255
    c2f4:	c8 01       	movw	r24, r16
    c2f6:	5a de       	rcall	.-844    	; 0xbfac <_ZN4PBBP10receiveBitEPb>
    c2f8:	88 23       	and	r24, r24
    c2fa:	71 f0       	breq	.+28     	; 0xc318 <_ZN4PBBP11receiveByteEPh+0x8a>
    return false;

  if (value == parity_val) {
    c2fc:	89 81       	ldd	r24, Y+1	; 0x01
    c2fe:	8b 11       	cpse	r24, r11
    c300:	04 c0       	rjmp	.+8      	; 0xc30a <_ZN4PBBP11receiveByteEPh+0x7c>
    this->last_error = PARITY_ERROR;
    c302:	87 e0       	ldi	r24, 0x07	; 7
    c304:	f8 01       	movw	r30, r16
    c306:	80 83       	st	Z, r24
    c308:	07 c0       	rjmp	.+14     	; 0xc318 <_ZN4PBBP11receiveByteEPh+0x8a>
    return false;
  }

  return receiveReady() && receiveAck();
    c30a:	c8 01       	movw	r24, r16
    c30c:	b5 de       	rcall	.-662    	; 0xc078 <_ZN4PBBP12receiveReadyEv>
    c30e:	88 23       	and	r24, r24
    c310:	19 f0       	breq	.+6      	; 0xc318 <_ZN4PBBP11receiveByteEPh+0x8a>
    c312:	c8 01       	movw	r24, r16
    c314:	d9 de       	rcall	.-590    	; 0xc0c8 <_ZN4PBBP10receiveAckEv>
    c316:	01 c0       	rjmp	.+2      	; 0xc31a <_ZN4PBBP11receiveByteEPh+0x8c>
    c318:	80 e0       	ldi	r24, 0x00	; 0
}
    c31a:	0f 90       	pop	r0
    c31c:	df 91       	pop	r29
    c31e:	cf 91       	pop	r28
    c320:	1f 91       	pop	r17
    c322:	0f 91       	pop	r16
    c324:	ff 90       	pop	r15
    c326:	ef 90       	pop	r14
    c328:	df 90       	pop	r13
    c32a:	cf 90       	pop	r12
    c32c:	bf 90       	pop	r11
    c32e:	af 90       	pop	r10
    c330:	9f 90       	pop	r9
    c332:	08 95       	ret

0000c334 <_ZN4PBBP12receiveBytesEPhh>:

bool PBBP::receiveBytes(uint8_t *buf, uint8_t len) {
    c334:	ef 92       	push	r14
    c336:	ff 92       	push	r15
    c338:	0f 93       	push	r16
    c33a:	1f 93       	push	r17
    c33c:	cf 93       	push	r28
    c33e:	df 93       	push	r29
    c340:	1f 92       	push	r1
    c342:	cd b7       	in	r28, 0x3d	; 61
    c344:	de b7       	in	r29, 0x3e	; 62
    c346:	7c 01       	movw	r14, r24
  while (len--) {
    c348:	9b 01       	movw	r18, r22
    c34a:	46 0f       	add	r20, r22
    c34c:	42 17       	cp	r20, r18
    c34e:	61 f0       	breq	.+24     	; 0xc368 <_ZN4PBBP12receiveBytesEPhh+0x34>
    if (!receiveByte(buf++))
    c350:	89 01       	movw	r16, r18
    c352:	0f 5f       	subi	r16, 0xFF	; 255
    c354:	1f 4f       	sbci	r17, 0xFF	; 255
    c356:	b9 01       	movw	r22, r18
    c358:	c7 01       	movw	r24, r14
    c35a:	49 83       	std	Y+1, r20	; 0x01
    c35c:	98 df       	rcall	.-208    	; 0xc28e <_ZN4PBBP11receiveByteEPh>
    c35e:	49 81       	ldd	r20, Y+1	; 0x01
    c360:	88 23       	and	r24, r24
    c362:	19 f0       	breq	.+6      	; 0xc36a <_ZN4PBBP12receiveBytesEPhh+0x36>
    c364:	98 01       	movw	r18, r16
    c366:	f2 cf       	rjmp	.-28     	; 0xc34c <_ZN4PBBP12receiveBytesEPhh+0x18>
      return false;
  }
  return true;
    c368:	81 e0       	ldi	r24, 0x01	; 1
}
    c36a:	0f 90       	pop	r0
    c36c:	df 91       	pop	r29
    c36e:	cf 91       	pop	r28
    c370:	1f 91       	pop	r17
    c372:	0f 91       	pop	r16
    c374:	ff 90       	pop	r15
    c376:	ef 90       	pop	r14
    c378:	08 95       	ret

0000c37a <_ZN4PBBP10readEepromEhhPhh>:
  return sendReset() &&
         sendByte(slave_addr) &&
         sendByte(command);
}

bool PBBP::readEeprom(uint8_t slave_addr, uint8_t eeprom_addr, uint8_t *buf, uint8_t len) {
    c37a:	ef 92       	push	r14
    c37c:	ff 92       	push	r15
    c37e:	0f 93       	push	r16
    c380:	1f 93       	push	r17
    c382:	cf 93       	push	r28
    c384:	df 93       	push	r29
    c386:	ec 01       	movw	r28, r24
    c388:	14 2f       	mov	r17, r20
    c38a:	79 01       	movw	r14, r18
  return sendCommand(slave_addr, CMD_READ_EEPROM) &&
    c38c:	41 e0       	ldi	r20, 0x01	; 1
    c38e:	37 df       	rcall	.-402    	; 0xc1fe <_ZN4PBBP11sendCommandEhh>
         sendByte(eeprom_addr) &&
    c390:	88 23       	and	r24, r24
    c392:	79 f0       	breq	.+30     	; 0xc3b2 <_ZN4PBBP10readEepromEhhPhh+0x38>
    c394:	61 2f       	mov	r22, r17
    c396:	ce 01       	movw	r24, r28
    c398:	d0 de       	rcall	.-608    	; 0xc13a <_ZN4PBBP8sendByteEh>
         sendByte(slave_addr) &&
         sendByte(command);
}

bool PBBP::readEeprom(uint8_t slave_addr, uint8_t eeprom_addr, uint8_t *buf, uint8_t len) {
  return sendCommand(slave_addr, CMD_READ_EEPROM) &&
    c39a:	88 23       	and	r24, r24
    c39c:	51 f0       	breq	.+20     	; 0xc3b2 <_ZN4PBBP10readEepromEhhPhh+0x38>
         sendByte(eeprom_addr) &&
         receiveBytes(buf, len);
    c39e:	40 2f       	mov	r20, r16
    c3a0:	b7 01       	movw	r22, r14
    c3a2:	ce 01       	movw	r24, r28
}
    c3a4:	df 91       	pop	r29
    c3a6:	cf 91       	pop	r28
    c3a8:	1f 91       	pop	r17
    c3aa:	0f 91       	pop	r16
    c3ac:	ff 90       	pop	r15
    c3ae:	ef 90       	pop	r14
}

bool PBBP::readEeprom(uint8_t slave_addr, uint8_t eeprom_addr, uint8_t *buf, uint8_t len) {
  return sendCommand(slave_addr, CMD_READ_EEPROM) &&
         sendByte(eeprom_addr) &&
         receiveBytes(buf, len);
    c3b0:	c1 cf       	rjmp	.-126    	; 0xc334 <_ZN4PBBP12receiveBytesEPhh>
}
    c3b2:	80 e0       	ldi	r24, 0x00	; 0
    c3b4:	df 91       	pop	r29
    c3b6:	cf 91       	pop	r28
    c3b8:	1f 91       	pop	r17
    c3ba:	0f 91       	pop	r16
    c3bc:	ff 90       	pop	r15
    c3be:	ef 90       	pop	r14
    c3c0:	08 95       	ret

0000c3c2 <_ZN4PBBP9enumerateEPFvPhE>:
void PBBP::begin(uint8_t pin) {
  this->pin = pin;
  pinMode(this->pin, INPUT);
}

bool PBBP::enumerate(void (*callback)(uint8_t*)) {
    c3c2:	7f 92       	push	r7
    c3c4:	8f 92       	push	r8
    c3c6:	9f 92       	push	r9
    c3c8:	af 92       	push	r10
    c3ca:	bf 92       	push	r11
    c3cc:	cf 92       	push	r12
    c3ce:	df 92       	push	r13
    c3d0:	ef 92       	push	r14
    c3d2:	ff 92       	push	r15
    c3d4:	0f 93       	push	r16
    c3d6:	1f 93       	push	r17
    c3d8:	cf 93       	push	r28
    c3da:	df 93       	push	r29
    c3dc:	cd b7       	in	r28, 0x3d	; 61
    c3de:	de b7       	in	r29, 0x3e	; 62
    c3e0:	28 97       	sbiw	r28, 0x08	; 8
    c3e2:	0f b6       	in	r0, 0x3f	; 63
    c3e4:	f8 94       	cli
    c3e6:	de bf       	out	0x3e, r29	; 62
    c3e8:	0f be       	out	0x3f, r0	; 63
    c3ea:	cd bf       	out	0x3d, r28	; 61
    c3ec:	8c 01       	movw	r16, r24
    c3ee:	6b 01       	movw	r12, r22
  uint8_t b;
  if (!sendReset() || !sendByte(BC_CMD_ENUMERATE)) {
    c3f0:	06 dd       	rcall	.-1524   	; 0xbdfe <_ZN4PBBP9sendResetEv>
    c3f2:	88 23       	and	r24, r24
    c3f4:	09 f4       	brne	.+2      	; 0xc3f8 <_ZN4PBBP9enumerateEPFvPhE+0x36>
    c3f6:	47 c0       	rjmp	.+142    	; 0xc486 <_ZN4PBBP9enumerateEPFvPhE+0xc4>
    c3f8:	6e ef       	ldi	r22, 0xFE	; 254
    c3fa:	c8 01       	movw	r24, r16
    c3fc:	9e de       	rcall	.-708    	; 0xc13a <_ZN4PBBP8sendByteEh>
    c3fe:	88 23       	and	r24, r24
    c400:	09 f4       	brne	.+2      	; 0xc404 <_ZN4PBBP9enumerateEPFvPhE+0x42>
    c402:	41 c0       	rjmp	.+130    	; 0xc486 <_ZN4PBBP9enumerateEPFvPhE+0xc4>
    c404:	3f e7       	ldi	r19, 0x7F	; 127
    c406:	93 2e       	mov	r9, r19
        bool bit = crc & msb_mask;
        if (c & i) {
            bit = !bit;
    c408:	88 24       	eor	r8, r8
    c40a:	83 94       	inc	r8
        }
        crc <<= 1;
        if (bit) {
            crc ^= poly;
    c40c:	4f e2       	ldi	r20, 0x2F	; 47
    c40e:	74 2e       	mov	r7, r20
    c410:	ce 01       	movw	r24, r28
    c412:	01 96       	adiw	r24, 0x01	; 1
    c414:	7c 01       	movw	r14, r24
void PBBP::begin(uint8_t pin) {
  this->pin = pin;
  pinMode(this->pin, INPUT);
}

bool PBBP::enumerate(void (*callback)(uint8_t*)) {
    c416:	a1 2c       	mov	r10, r1
    c418:	b1 2c       	mov	r11, r1
  while (num_slaves < this->max_slaves) {
    // Allocate room to store one more address
    uint8_t id[UNIQUE_ID_LENGTH];
    uint8_t crc = 0;
    for (uint8_t i = 0; i < UNIQUE_ID_LENGTH; ++i) {
      if (!receiveByte(&id[i])) {
    c41a:	b7 01       	movw	r22, r14
    c41c:	c8 01       	movw	r24, r16
    c41e:	37 df       	rcall	.-402    	; 0xc28e <_ZN4PBBP11receiveByteEPh>
    c420:	81 11       	cpse	r24, r1
    c422:	03 c0       	rjmp	.+6      	; 0xc42a <_ZN4PBBP9enumerateEPFvPhE+0x68>
        if (i == 0 && this->last_error == NO_ACK_OR_NACK) {
    c424:	a1 10       	cpse	r10, r1
    c426:	35 c0       	rjmp	.+106    	; 0xc492 <_ZN4PBBP9enumerateEPFvPhE+0xd0>
    c428:	2e c0       	rjmp	.+92     	; 0xc486 <_ZN4PBBP9enumerateEPFvPhE+0xc4>
          return true;
        }
        // Other error
        return false;
      }
      crc = pinoccio_crc_update(UNIQUE_ID_CRC_POLY, crc, id[i]);
    c42a:	f7 01       	movw	r30, r14
    c42c:	41 91       	ld	r20, Z+
    c42e:	7f 01       	movw	r14, r30
    c430:	88 e0       	ldi	r24, 0x08	; 8
    c432:	90 e0       	ldi	r25, 0x00	; 0
T pinoccio_crc_update(T poly, T crc, uint8_t c)
{
    const size_t bits = sizeof(T) * 8;
    // e.g., 0x80 for bits = 8
    const T msb_mask = 1 << (bits - 1);
    for (uint8_t i = 0x80; i > 0; i >>= 1) {
    c434:	20 e8       	ldi	r18, 0x80	; 128
        bool bit = crc & msb_mask;
    c436:	3b 2d       	mov	r19, r11
    c438:	33 1f       	adc	r19, r19
    c43a:	33 27       	eor	r19, r19
    c43c:	33 1f       	adc	r19, r19
        if (c & i) {
    c43e:	52 2f       	mov	r21, r18
    c440:	54 23       	and	r21, r20
    c442:	09 f0       	breq	.+2      	; 0xc446 <_ZN4PBBP9enumerateEPFvPhE+0x84>
            bit = !bit;
    c444:	38 25       	eor	r19, r8
        }
        crc <<= 1;
    c446:	bb 0c       	add	r11, r11
        if (bit) {
    c448:	31 11       	cpse	r19, r1
            crc ^= poly;
    c44a:	b7 24       	eor	r11, r7
T pinoccio_crc_update(T poly, T crc, uint8_t c)
{
    const size_t bits = sizeof(T) * 8;
    // e.g., 0x80 for bits = 8
    const T msb_mask = 1 << (bits - 1);
    for (uint8_t i = 0x80; i > 0; i >>= 1) {
    c44c:	26 95       	lsr	r18
    c44e:	01 97       	sbiw	r24, 0x01	; 1
    c450:	00 97       	sbiw	r24, 0x00	; 0
    c452:	89 f7       	brne	.-30     	; 0xc436 <_ZN4PBBP9enumerateEPFvPhE+0x74>
  uint8_t num_slaves = 0;
  while (num_slaves < this->max_slaves) {
    // Allocate room to store one more address
    uint8_t id[UNIQUE_ID_LENGTH];
    uint8_t crc = 0;
    for (uint8_t i = 0; i < UNIQUE_ID_LENGTH; ++i) {
    c454:	a3 94       	inc	r10
    c456:	f8 e0       	ldi	r31, 0x08	; 8
    c458:	af 12       	cpse	r10, r31
    c45a:	df cf       	rjmp	.-66     	; 0xc41a <_ZN4PBBP9enumerateEPFvPhE+0x58>
        return false;
      }
      crc = pinoccio_crc_update(UNIQUE_ID_CRC_POLY, crc, id[i]);
    }

    if (crc != 0) {
    c45c:	bb 20       	and	r11, r11
    c45e:	11 f0       	breq	.+4      	; 0xc464 <_ZN4PBBP9enumerateEPFvPhE+0xa2>
      this->last_error = CRC_ERROR;
    c460:	89 e0       	ldi	r24, 0x09	; 9
    c462:	0e c0       	rjmp	.+28     	; 0xc480 <_ZN4PBBP9enumerateEPFvPhE+0xbe>
      return false;
    }

    callback(id);
    c464:	ce 01       	movw	r24, r28
    c466:	01 96       	adiw	r24, 0x01	; 1
    c468:	f6 01       	movw	r30, r12
    c46a:	19 95       	eicall
    c46c:	9a 94       	dec	r9
    // Other error
    return false;
  }

  uint8_t num_slaves = 0;
  while (num_slaves < this->max_slaves) {
    c46e:	81 f6       	brne	.-96     	; 0xc410 <_ZN4PBBP9enumerateEPFvPhE+0x4e>
    callback(id);
    num_slaves++;
  }

  // See if there is one more
  if (receiveByte(&b)) {
    c470:	be 01       	movw	r22, r28
    c472:	6f 5f       	subi	r22, 0xFF	; 255
    c474:	7f 4f       	sbci	r23, 0xFF	; 255
    c476:	c8 01       	movw	r24, r16
    c478:	0a df       	rcall	.-492    	; 0xc28e <_ZN4PBBP11receiveByteEPh>
    c47a:	88 23       	and	r24, r24
    c47c:	21 f0       	breq	.+8      	; 0xc486 <_ZN4PBBP9enumerateEPFvPhE+0xc4>
    // Succesfully received a byte, there are more slaves!
    this->last_error = TOO_MANY_SLAVES;
    c47e:	8a e0       	ldi	r24, 0x0A	; 10
    c480:	f8 01       	movw	r30, r16
    c482:	80 83       	st	Z, r24
    c484:	05 c0       	rjmp	.+10     	; 0xc490 <_ZN4PBBP9enumerateEPFvPhE+0xce>
}

bool PBBP::enumerate(void (*callback)(uint8_t*)) {
  uint8_t b;
  if (!sendReset() || !sendByte(BC_CMD_ENUMERATE)) {
    if (this->last_error == NO_ACK_OR_NACK) {
    c486:	81 e0       	ldi	r24, 0x01	; 1
    c488:	f8 01       	movw	r30, r16
    c48a:	90 81       	ld	r25, Z
    c48c:	95 30       	cpi	r25, 0x05	; 5
    c48e:	09 f0       	breq	.+2      	; 0xc492 <_ZN4PBBP9enumerateEPFvPhE+0xd0>
    c490:	80 e0       	ldi	r24, 0x00	; 0
    this->last_error = TOO_MANY_SLAVES;
    return false;
  } else {
    return (this->last_error == NO_ACK_OR_NACK);
  }
}
    c492:	28 96       	adiw	r28, 0x08	; 8
    c494:	0f b6       	in	r0, 0x3f	; 63
    c496:	f8 94       	cli
    c498:	de bf       	out	0x3e, r29	; 62
    c49a:	0f be       	out	0x3f, r0	; 63
    c49c:	cd bf       	out	0x3d, r28	; 61
    c49e:	df 91       	pop	r29
    c4a0:	cf 91       	pop	r28
    c4a2:	1f 91       	pop	r17
    c4a4:	0f 91       	pop	r16
    c4a6:	ff 90       	pop	r15
    c4a8:	ef 90       	pop	r14
    c4aa:	df 90       	pop	r13
    c4ac:	cf 90       	pop	r12
    c4ae:	bf 90       	pop	r11
    c4b0:	af 90       	pop	r10
    c4b2:	9f 90       	pop	r9
    c4b4:	8f 90       	pop	r8
    c4b6:	7f 90       	pop	r7
    c4b8:	08 95       	ret

0000c4ba <_ZN4PBBP14printLastErrorER5Print>:
  [BIT_TOO_LATE] = "BIT_TOO_LATE",
  [CRC_ERROR] = "CRC_ERROR",
  [TOO_MANY_SLAVES] = "TOO_MANY_SLAVES",
};

void PBBP::printLastError(Print &p) {
    c4ba:	0f 93       	push	r16
    c4bc:	1f 93       	push	r17
    c4be:	cf 93       	push	r28
    c4c0:	df 93       	push	r29
    c4c2:	8c 01       	movw	r16, r24
    c4c4:	eb 01       	movw	r28, r22
    if (this->last_error < sizeof(error_code_str) / sizeof(*error_code_str))
    c4c6:	fc 01       	movw	r30, r24
    c4c8:	60 81       	ld	r22, Z
    c4ca:	70 e0       	ldi	r23, 0x00	; 0
    c4cc:	6b 30       	cpi	r22, 0x0B	; 11
    c4ce:	71 05       	cpc	r23, r1
    c4d0:	58 f4       	brcc	.+22     	; 0xc4e8 <_ZN4PBBP14printLastErrorER5Print+0x2e>
        p.print(error_code_str[this->last_error]);
    c4d2:	fb 01       	movw	r30, r22
    c4d4:	ee 0f       	add	r30, r30
    c4d6:	ff 1f       	adc	r31, r31
    c4d8:	ec 5d       	subi	r30, 0xDC	; 220
    c4da:	f3 4f       	sbci	r31, 0xF3	; 243
    c4dc:	60 81       	ld	r22, Z
    c4de:	71 81       	ldd	r23, Z+1	; 0x01
    c4e0:	ce 01       	movw	r24, r28
    c4e2:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_ZN5Print5printEPKc>
    c4e6:	05 c0       	rjmp	.+10     	; 0xc4f2 <_ZN4PBBP14printLastErrorER5Print+0x38>
    else
        p.print(this->last_error);
    c4e8:	4a e0       	ldi	r20, 0x0A	; 10
    c4ea:	50 e0       	ldi	r21, 0x00	; 0
    c4ec:	ce 01       	movw	r24, r28
    c4ee:	0e 94 4d 10 	call	0x209a	; 0x209a <_ZN5Print5printEii>

    if (this->last_error == NACK) {
    c4f2:	f8 01       	movw	r30, r16
    c4f4:	80 81       	ld	r24, Z
    c4f6:	83 30       	cpi	r24, 0x03	; 3
    c4f8:	81 f4       	brne	.+32     	; 0xc51a <_ZN4PBBP14printLastErrorER5Print+0x60>
        p.print(", slave error code: 0x");
    c4fa:	62 e4       	ldi	r22, 0x42	; 66
    c4fc:	71 e1       	ldi	r23, 0x11	; 17
    c4fe:	ce 01       	movw	r24, r28
    c500:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_ZN5Print5printEPKc>
        p.print(this->last_slave_error, HEX);
    c504:	40 e1       	ldi	r20, 0x10	; 16
    c506:	50 e0       	ldi	r21, 0x00	; 0
    c508:	f8 01       	movw	r30, r16
    c50a:	61 81       	ldd	r22, Z+1	; 0x01
    c50c:	ce 01       	movw	r24, r28
    }
}
    c50e:	df 91       	pop	r29
    c510:	cf 91       	pop	r28
    c512:	1f 91       	pop	r17
    c514:	0f 91       	pop	r16
    else
        p.print(this->last_error);

    if (this->last_error == NACK) {
        p.print(", slave error code: 0x");
        p.print(this->last_slave_error, HEX);
    c516:	0c 94 76 10 	jmp	0x20ec	; 0x20ec <_ZN5Print5printEhi>
    }
}
    c51a:	df 91       	pop	r29
    c51c:	cf 91       	pop	r28
    c51e:	1f 91       	pop	r17
    c520:	0f 91       	pop	r16
    c522:	08 95       	ret

0000c524 <_ZN16PinoccioBackpackC1Ev>:
#include <Arduino.h>
#include <Scout.h>
#include "Backpack.h"

PinoccioBackpack::PinoccioBackpack() { }
    c524:	08 95       	ret

0000c526 <_ZN16PinoccioBackpackD1Ev>:

PinoccioBackpack::~PinoccioBackpack() { }
    c526:	08 95       	ret

0000c528 <_ZN16PinoccioBackpack5setupEv>:

void PinoccioBackpack::setup() { }
    c528:	08 95       	ret

0000c52a <_ZN16PinoccioBackpack4loopEv>:

void PinoccioBackpack::loop() { }
    c52a:	08 95       	ret

0000c52c <_GLOBAL__sub_I__ZN16PinoccioBackpackC2Ev>:
    c52c:	0f 93       	push	r16
    c52e:	00 e0       	ldi	r16, 0x00	; 0
    c530:	20 e0       	ldi	r18, 0x00	; 0
    c532:	40 e0       	ldi	r20, 0x00	; 0
    c534:	60 e0       	ldi	r22, 0x00	; 0
    c536:	86 e5       	ldi	r24, 0x56	; 86
    c538:	95 e3       	ldi	r25, 0x35	; 53
    c53a:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <_ZN9IPAddressC1Ehhhh>
    c53e:	0f 91       	pop	r16
    c540:	08 95       	ret

0000c542 <_ZN9Backpacks11addBackpackEPh>:

uint8_t BackpackInfo::getAddress()
{
  // Deduce our address based on our place in the Backpacks::info array.
  return this - Backpacks::info;
}
    c542:	cf 93       	push	r28
    c544:	df 93       	push	r29
    c546:	ec 01       	movw	r28, r24
    c548:	20 91 6d 35 	lds	r18, 0x356D
    c54c:	30 e0       	ldi	r19, 0x00	; 0
    c54e:	2f 5f       	subi	r18, 0xFF	; 255
    c550:	3f 4f       	sbci	r19, 0xFF	; 255
    c552:	82 e1       	ldi	r24, 0x12	; 18
    c554:	82 9f       	mul	r24, r18
    c556:	b0 01       	movw	r22, r0
    c558:	83 9f       	mul	r24, r19
    c55a:	70 0d       	add	r23, r0
    c55c:	11 24       	eor	r1, r1
    c55e:	80 91 6b 35 	lds	r24, 0x356B
    c562:	90 91 6c 35 	lds	r25, 0x356C
    c566:	0e 94 55 b1 	call	0x162aa	; 0x162aa <realloc>
    c56a:	dc 01       	movw	r26, r24
    c56c:	90 93 6c 35 	sts	0x356C, r25
    c570:	80 93 6b 35 	sts	0x356B, r24
    c574:	80 91 6d 35 	lds	r24, 0x356D
    c578:	91 e0       	ldi	r25, 0x01	; 1
    c57a:	98 0f       	add	r25, r24
    c57c:	90 93 6d 35 	sts	0x356D, r25
    c580:	92 e1       	ldi	r25, 0x12	; 18
    c582:	89 9f       	mul	r24, r25
    c584:	a0 0d       	add	r26, r0
    c586:	b1 1d       	adc	r27, r1
    c588:	11 24       	eor	r1, r1
    c58a:	19 96       	adiw	r26, 0x09	; 9
    c58c:	1c 92       	st	X, r1
    c58e:	1e 92       	st	-X, r1
    c590:	18 97       	sbiw	r26, 0x08	; 8
    c592:	1b 96       	adiw	r26, 0x0b	; 11
    c594:	1c 92       	st	X, r1
    c596:	1e 92       	st	-X, r1
    c598:	1a 97       	sbiw	r26, 0x0a	; 10
    c59a:	1d 96       	adiw	r26, 0x0d	; 13
    c59c:	1c 92       	st	X, r1
    c59e:	1e 92       	st	-X, r1
    c5a0:	1c 97       	sbiw	r26, 0x0c	; 12
    c5a2:	4f ef       	ldi	r20, 0xFF	; 255
    c5a4:	5f ef       	ldi	r21, 0xFF	; 255
    c5a6:	ba 01       	movw	r22, r20
    c5a8:	1e 96       	adiw	r26, 0x0e	; 14
    c5aa:	4d 93       	st	X+, r20
    c5ac:	5d 93       	st	X+, r21
    c5ae:	6d 93       	st	X+, r22
    c5b0:	7c 93       	st	X, r23
    c5b2:	51 97       	sbiw	r26, 0x11	; 17
    c5b4:	88 e0       	ldi	r24, 0x08	; 8
    c5b6:	fe 01       	movw	r30, r28
    c5b8:	01 90       	ld	r0, Z+
    c5ba:	0d 92       	st	X+, r0
    c5bc:	8a 95       	dec	r24
    c5be:	e1 f7       	brne	.-8      	; 0xc5b8 <_ZN9Backpacks11addBackpackEPh+0x76>
    c5c0:	df 91       	pop	r29
    c5c2:	cf 91       	pop	r28
    c5c4:	08 95       	ret

0000c5c6 <_ZN9Backpacks14printPbbpErrorEPKc>:
    c5c6:	bc 01       	movw	r22, r24
    c5c8:	84 e0       	ldi	r24, 0x04	; 4
    c5ca:	94 e2       	ldi	r25, 0x24	; 36
    c5cc:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_ZN5Print5printEPKc>
    c5d0:	64 e0       	ldi	r22, 0x04	; 4
    c5d2:	74 e2       	ldi	r23, 0x24	; 36
    c5d4:	80 e6       	ldi	r24, 0x60	; 96
    c5d6:	95 e3       	ldi	r25, 0x35	; 53
    c5d8:	70 df       	rcall	.-288    	; 0xc4ba <_ZN4PBBP14printLastErrorER5Print>
    c5da:	84 e0       	ldi	r24, 0x04	; 4
    c5dc:	94 e2       	ldi	r25, 0x24	; 36
    c5de:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <_ZN5Print7printlnEv>
    c5e2:	80 e0       	ldi	r24, 0x00	; 0
    c5e4:	08 95       	ret

0000c5e6 <_ZN12BackpackInfo9getEepromEPj>:
    c5e6:	cf 93       	push	r28
    c5e8:	df 93       	push	r29
    c5ea:	ec 01       	movw	r28, r24
    c5ec:	88 85       	ldd	r24, Y+8	; 0x08
    c5ee:	99 85       	ldd	r25, Y+9	; 0x09
    c5f0:	00 97       	sbiw	r24, 0x00	; 0
    c5f2:	c1 f4       	brne	.+48     	; 0xc624 <_ZN12BackpackInfo9getEepromEPj+0x3e>
    c5f4:	80 91 6b 35 	lds	r24, 0x356B
    c5f8:	90 91 6c 35 	lds	r25, 0x356C
    c5fc:	9e 01       	movw	r18, r28
    c5fe:	28 1b       	sub	r18, r24
    c600:	39 0b       	sbc	r19, r25
    c602:	c9 01       	movw	r24, r18
    c604:	95 95       	asr	r25
    c606:	87 95       	ror	r24
    c608:	29 e3       	ldi	r18, 0x39	; 57
    c60a:	3e e8       	ldi	r19, 0x8E	; 142
    c60c:	82 9f       	mul	r24, r18
    c60e:	b0 01       	movw	r22, r0
    c610:	83 9f       	mul	r24, r19
    c612:	70 0d       	add	r23, r0
    c614:	92 9f       	mul	r25, r18
    c616:	70 0d       	add	r23, r0
    c618:	11 24       	eor	r1, r1
    c61a:	80 e6       	ldi	r24, 0x60	; 96
    c61c:	95 e3       	ldi	r25, 0x35	; 53
    c61e:	88 da       	rcall	.-2800   	; 0xbb30 <_ZN4Pbbe9getEepromER4PBBPh>
    c620:	99 87       	std	Y+9, r25	; 0x09
    c622:	88 87       	std	Y+8, r24	; 0x08
    c624:	df 91       	pop	r29
    c626:	cf 91       	pop	r28
    c628:	08 95       	ret

0000c62a <_ZN12BackpackInfo9getHeaderEv>:

Pbbe::Header *BackpackInfo::getHeader()
{
    c62a:	0f 93       	push	r16
    c62c:	1f 93       	push	r17
    c62e:	cf 93       	push	r28
    c630:	df 93       	push	r29
    c632:	ec 01       	movw	r28, r24
  if (this->header)
    c634:	0a 85       	ldd	r16, Y+10	; 0x0a
    c636:	1b 85       	ldd	r17, Y+11	; 0x0b
    c638:	01 15       	cp	r16, r1
    c63a:	11 05       	cpc	r17, r1
    c63c:	61 f4       	brne	.+24     	; 0xc656 <_ZN12BackpackInfo9getHeaderEv+0x2c>
    return this->header;

  if (!getEeprom())
    c63e:	60 e0       	ldi	r22, 0x00	; 0
    c640:	70 e0       	ldi	r23, 0x00	; 0
    c642:	d1 df       	rcall	.-94     	; 0xc5e6 <_ZN12BackpackInfo9getEepromEPj>
    c644:	89 2b       	or	r24, r25
    c646:	39 f0       	breq	.+14     	; 0xc656 <_ZN12BackpackInfo9getHeaderEv+0x2c>
    return false;

  this->header = Pbbe::parseHeaderA(this->eep);
    c648:	88 85       	ldd	r24, Y+8	; 0x08
    c64a:	99 85       	ldd	r25, Y+9	; 0x09
    c64c:	0e 94 03 5b 	call	0xb606	; 0xb606 <_ZN4Pbbe12parseHeaderAEPKNS_6EepromE>
    c650:	8c 01       	movw	r16, r24
    c652:	9b 87       	std	Y+11, r25	; 0x0b
    c654:	8a 87       	std	Y+10, r24	; 0x0a
  return this->header;
}
    c656:	c8 01       	movw	r24, r16
    c658:	df 91       	pop	r29
    c65a:	cf 91       	pop	r28
    c65c:	1f 91       	pop	r17
    c65e:	0f 91       	pop	r16
    c660:	08 95       	ret

0000c662 <_ZN12BackpackInfo10freeHeaderEv>:

void BackpackInfo::freeHeader()
{
    c662:	cf 93       	push	r28
    c664:	df 93       	push	r29
    c666:	ec 01       	movw	r28, r24
  free(this->header);
    c668:	8a 85       	ldd	r24, Y+10	; 0x0a
    c66a:	9b 85       	ldd	r25, Y+11	; 0x0b
    c66c:	0e 94 c6 b0 	call	0x1618c	; 0x1618c <free>
  this->header = NULL;
    c670:	1b 86       	std	Y+11, r1	; 0x0b
    c672:	1a 86       	std	Y+10, r1	; 0x0a
}
    c674:	df 91       	pop	r29
    c676:	cf 91       	pop	r28
    c678:	08 95       	ret

0000c67a <_ZN12BackpackInfo18freeAllDescriptorsEv>:
    }
  }
  return this->descriptors;
}

void BackpackInfo::freeAllDescriptors() {
    c67a:	ef 92       	push	r14
    c67c:	ff 92       	push	r15
    c67e:	0f 93       	push	r16
    c680:	1f 93       	push	r17
    c682:	cf 93       	push	r28
    c684:	df 93       	push	r29
    c686:	8c 01       	movw	r16, r24
  if (this->descriptors) {
    c688:	fc 01       	movw	r30, r24
    c68a:	84 85       	ldd	r24, Z+12	; 0x0c
    c68c:	95 85       	ldd	r25, Z+13	; 0x0d
    c68e:	89 2b       	or	r24, r25
    c690:	e9 f0       	breq	.+58     	; 0xc6cc <_ZN12BackpackInfo18freeAllDescriptorsEv+0x52>
    c692:	f1 2c       	mov	r15, r1
    for (uint8_t i = 0; i < this->descriptors->num_descriptors; ++i) {
      Pbbe::DescriptorInfo &info = this->descriptors->info[i];
    c694:	47 e0       	ldi	r20, 0x07	; 7
    c696:	e4 2e       	mov	r14, r20
  return this->descriptors;
}

void BackpackInfo::freeAllDescriptors() {
  if (this->descriptors) {
    for (uint8_t i = 0; i < this->descriptors->num_descriptors; ++i) {
    c698:	f8 01       	movw	r30, r16
    c69a:	84 85       	ldd	r24, Z+12	; 0x0c
    c69c:	95 85       	ldd	r25, Z+13	; 0x0d
    c69e:	fc 01       	movw	r30, r24
    c6a0:	20 81       	ld	r18, Z
    c6a2:	f2 16       	cp	r15, r18
    c6a4:	70 f4       	brcc	.+28     	; 0xc6c2 <_ZN12BackpackInfo18freeAllDescriptorsEv+0x48>
      Pbbe::DescriptorInfo &info = this->descriptors->info[i];
    c6a6:	ec 01       	movw	r28, r24
    c6a8:	ef 9c       	mul	r14, r15
    c6aa:	c0 0d       	add	r28, r0
    c6ac:	d1 1d       	adc	r29, r1
    c6ae:	11 24       	eor	r1, r1
    c6b0:	21 96       	adiw	r28, 0x01	; 1
      free(info.parsed);
    c6b2:	8d 81       	ldd	r24, Y+5	; 0x05
    c6b4:	9e 81       	ldd	r25, Y+6	; 0x06
    c6b6:	0e 94 c6 b0 	call	0x1618c	; 0x1618c <free>
      info.parsed = NULL;
    c6ba:	1e 82       	std	Y+6, r1	; 0x06
    c6bc:	1d 82       	std	Y+5, r1	; 0x05
  return this->descriptors;
}

void BackpackInfo::freeAllDescriptors() {
  if (this->descriptors) {
    for (uint8_t i = 0; i < this->descriptors->num_descriptors; ++i) {
    c6be:	f3 94       	inc	r15
    c6c0:	eb cf       	rjmp	.-42     	; 0xc698 <_ZN12BackpackInfo18freeAllDescriptorsEv+0x1e>
      Pbbe::DescriptorInfo &info = this->descriptors->info[i];
      free(info.parsed);
      info.parsed = NULL;
    }
    free(this->descriptors);
    c6c2:	0e 94 c6 b0 	call	0x1618c	; 0x1618c <free>
    this->descriptors = NULL;
    c6c6:	f8 01       	movw	r30, r16
    c6c8:	15 86       	std	Z+13, r1	; 0x0d
    c6ca:	14 86       	std	Z+12, r1	; 0x0c
  }
}
    c6cc:	df 91       	pop	r29
    c6ce:	cf 91       	pop	r28
    c6d0:	1f 91       	pop	r17
    c6d2:	0f 91       	pop	r16
    c6d4:	ff 90       	pop	r15
    c6d6:	ef 90       	pop	r14
    c6d8:	08 95       	ret

0000c6da <_ZN12BackpackInfo17getAllDescriptorsEv>:
  free(this->header);
  this->header = NULL;
}

Pbbe::DescriptorList *BackpackInfo::getAllDescriptors()
{
    c6da:	ef 92       	push	r14
    c6dc:	ff 92       	push	r15
    c6de:	0f 93       	push	r16
    c6e0:	1f 93       	push	r17
    c6e2:	cf 93       	push	r28
    c6e4:	df 93       	push	r29
    c6e6:	ec 01       	movw	r28, r24
  if (this->descriptors)
    c6e8:	0c 85       	ldd	r16, Y+12	; 0x0c
    c6ea:	1d 85       	ldd	r17, Y+13	; 0x0d
    c6ec:	01 15       	cp	r16, r1
    c6ee:	11 05       	cpc	r17, r1
    c6f0:	41 f5       	brne	.+80     	; 0xc742 <_ZN12BackpackInfo17getAllDescriptorsEv+0x68>
    return this->descriptors;

  if (!getEeprom())
    c6f2:	60 e0       	ldi	r22, 0x00	; 0
    c6f4:	70 e0       	ldi	r23, 0x00	; 0
    c6f6:	77 df       	rcall	.-274    	; 0xc5e6 <_ZN12BackpackInfo9getEepromEPj>
    c6f8:	89 2b       	or	r24, r25
    c6fa:	19 f1       	breq	.+70     	; 0xc742 <_ZN12BackpackInfo17getAllDescriptorsEv+0x68>
    return NULL;

  this->descriptors = Pbbe::parseDescriptorListA(this->eep, this->header);
    c6fc:	6a 85       	ldd	r22, Y+10	; 0x0a
    c6fe:	7b 85       	ldd	r23, Y+11	; 0x0b
    c700:	88 85       	ldd	r24, Y+8	; 0x08
    c702:	99 85       	ldd	r25, Y+9	; 0x09
    c704:	2b d8       	rcall	.-4010   	; 0xb75c <_ZN4Pbbe20parseDescriptorListAEPKNS_6EepromEPKNS_6HeaderE>
    c706:	9d 87       	std	Y+13, r25	; 0x0d
    c708:	8c 87       	std	Y+12, r24	; 0x0c
  if (!this->descriptors)
    c70a:	89 2b       	or	r24, r25
    c70c:	d1 f0       	breq	.+52     	; 0xc742 <_ZN12BackpackInfo17getAllDescriptorsEv+0x68>
    c70e:	f1 2c       	mov	r15, r1
    return NULL;

  for (uint8_t i = 0; i < descriptors->num_descriptors; ++i) {
    Pbbe::DescriptorInfo &info = this->descriptors->info[i];
    c710:	57 e0       	ldi	r21, 0x07	; 7
    c712:	e5 2e       	mov	r14, r21

  this->descriptors = Pbbe::parseDescriptorListA(this->eep, this->header);
  if (!this->descriptors)
    return NULL;

  for (uint8_t i = 0; i < descriptors->num_descriptors; ++i) {
    c714:	ec 85       	ldd	r30, Y+12	; 0x0c
    c716:	fd 85       	ldd	r31, Y+13	; 0x0d
    c718:	80 81       	ld	r24, Z
    c71a:	f8 16       	cp	r15, r24
    c71c:	88 f4       	brcc	.+34     	; 0xc740 <_ZN12BackpackInfo17getAllDescriptorsEv+0x66>
    Pbbe::DescriptorInfo &info = this->descriptors->info[i];
    c71e:	bf 01       	movw	r22, r30
    c720:	ef 9c       	mul	r14, r15
    c722:	60 0d       	add	r22, r0
    c724:	71 1d       	adc	r23, r1
    c726:	11 24       	eor	r1, r1
    c728:	6f 5f       	subi	r22, 0xFF	; 255
    c72a:	7f 4f       	sbci	r23, 0xFF	; 255
    if (!Pbbe::parseDescriptorA(this->eep, &info)) {
    c72c:	88 85       	ldd	r24, Y+8	; 0x08
    c72e:	99 85       	ldd	r25, Y+9	; 0x09
    c730:	ad d8       	rcall	.-3750   	; 0xb88c <_ZN4Pbbe16parseDescriptorAEPKNS_6EepromEPNS_14DescriptorInfoE>
    c732:	81 11       	cpse	r24, r1
    c734:	03 c0       	rjmp	.+6      	; 0xc73c <_ZN12BackpackInfo17getAllDescriptorsEv+0x62>
      freeAllDescriptors();
    c736:	ce 01       	movw	r24, r28
    c738:	a0 df       	rcall	.-192    	; 0xc67a <_ZN12BackpackInfo18freeAllDescriptorsEv>
      return NULL;
    c73a:	03 c0       	rjmp	.+6      	; 0xc742 <_ZN12BackpackInfo17getAllDescriptorsEv+0x68>

  this->descriptors = Pbbe::parseDescriptorListA(this->eep, this->header);
  if (!this->descriptors)
    return NULL;

  for (uint8_t i = 0; i < descriptors->num_descriptors; ++i) {
    c73c:	f3 94       	inc	r15
    c73e:	ea cf       	rjmp	.-44     	; 0xc714 <_ZN12BackpackInfo17getAllDescriptorsEv+0x3a>
    c740:	8f 01       	movw	r16, r30
      freeAllDescriptors();
      return NULL;
    }
  }
  return this->descriptors;
}
    c742:	c8 01       	movw	r24, r16
    c744:	df 91       	pop	r29
    c746:	cf 91       	pop	r28
    c748:	1f 91       	pop	r17
    c74a:	0f 91       	pop	r16
    c74c:	ff 90       	pop	r15
    c74e:	ef 90       	pop	r14
    c750:	08 95       	ret

0000c752 <_ZN12BackpackInfo11getUsedPinsEv>:
    free(this->descriptors);
    this->descriptors = NULL;
  }
}

Pbbe::LogicalPin::mask_t BackpackInfo::getUsedPins() {
    c752:	9f 92       	push	r9
    c754:	af 92       	push	r10
    c756:	bf 92       	push	r11
    c758:	cf 92       	push	r12
    c75a:	df 92       	push	r13
    c75c:	ef 92       	push	r14
    c75e:	ff 92       	push	r15
    c760:	0f 93       	push	r16
    c762:	1f 93       	push	r17
    c764:	cf 93       	push	r28
    c766:	df 93       	push	r29
    c768:	ec 01       	movw	r28, r24
  if (this->used_pins != USED_PINS_UNKNOWN)
    c76a:	4e 85       	ldd	r20, Y+14	; 0x0e
    c76c:	5f 85       	ldd	r21, Y+15	; 0x0f
    c76e:	68 89       	ldd	r22, Y+16	; 0x10
    c770:	79 89       	ldd	r23, Y+17	; 0x11
    c772:	4f 3f       	cpi	r20, 0xFF	; 255
    c774:	8f ef       	ldi	r24, 0xFF	; 255
    c776:	58 07       	cpc	r21, r24
    c778:	68 07       	cpc	r22, r24
    c77a:	78 07       	cpc	r23, r24
    c77c:	09 f0       	breq	.+2      	; 0xc780 <_ZN12BackpackInfo11getUsedPinsEv+0x2e>
    c77e:	89 c0       	rjmp	.+274    	; 0xc892 <_ZN12BackpackInfo11getUsedPinsEv+0x140>
    return this->used_pins;

  Pbbe::LogicalPin::mask_t used = 0;

  Pbbe::DescriptorList *list = getAllDescriptors();
    c780:	ce 01       	movw	r24, r28
    c782:	ab df       	rcall	.-170    	; 0xc6da <_ZN12BackpackInfo17getAllDescriptorsEv>
  for (uint8_t i = 0; i < list->num_descriptors; ++i) {
    c784:	a1 2c       	mov	r10, r1

Pbbe::LogicalPin::mask_t BackpackInfo::getUsedPins() {
  if (this->used_pins != USED_PINS_UNKNOWN)
    return this->used_pins;

  Pbbe::LogicalPin::mask_t used = 0;
    c786:	40 e0       	ldi	r20, 0x00	; 0
    c788:	50 e0       	ldi	r21, 0x00	; 0
    c78a:	ba 01       	movw	r22, r20

  Pbbe::DescriptorList *list = getAllDescriptors();
  for (uint8_t i = 0; i < list->num_descriptors; ++i) {
    Pbbe::DescriptorInfo& info = list->info[i];
    c78c:	e7 e0       	ldi	r30, 0x07	; 7
    c78e:	9e 2e       	mov	r9, r30
    const __FlashStringHelper *name() {
      return reinterpret_cast<const __FlashStringHelper *>(&physical_pin_info[this->val].name);
    }

    LogicalPin logical() {
      return pgm_read_byte(&physical_pin_info[this->val].logical_pin);
    c790:	f6 e0       	ldi	r31, 0x06	; 6
    c792:	bf 2e       	mov	r11, r31

    /** Bitmask for logical pins */
    typedef boost::uint_t<NUM_DIGITAL_PINS>::least mask_t;
    mask_t mask() {
      if (this->val != NONE)
        return (mask_t)1 << this->val;
    c794:	01 e0       	ldi	r16, 0x01	; 1
    c796:	10 e0       	ldi	r17, 0x00	; 0
    c798:	20 e0       	ldi	r18, 0x00	; 0
    c79a:	30 e0       	ldi	r19, 0x00	; 0
    return this->used_pins;

  Pbbe::LogicalPin::mask_t used = 0;

  Pbbe::DescriptorList *list = getAllDescriptors();
  for (uint8_t i = 0; i < list->num_descriptors; ++i) {
    c79c:	dc 01       	movw	r26, r24
    c79e:	ec 91       	ld	r30, X
    c7a0:	ae 16       	cp	r10, r30
    c7a2:	08 f0       	brcs	.+2      	; 0xc7a6 <_ZN12BackpackInfo11getUsedPinsEv+0x54>
    c7a4:	72 c0       	rjmp	.+228    	; 0xc88a <_ZN12BackpackInfo11getUsedPinsEv+0x138>
    Pbbe::DescriptorInfo& info = list->info[i];
    c7a6:	fc 01       	movw	r30, r24
    c7a8:	9a 9c       	mul	r9, r10
    c7aa:	e0 0d       	add	r30, r0
    c7ac:	f1 1d       	adc	r31, r1
    c7ae:	11 24       	eor	r1, r1
    c7b0:	31 96       	adiw	r30, 0x01	; 1

    switch (info.type) {
    c7b2:	a0 81       	ld	r26, Z
    c7b4:	a5 30       	cpi	r26, 0x05	; 5
    c7b6:	91 f0       	breq	.+36     	; 0xc7dc <_ZN12BackpackInfo11getUsedPinsEv+0x8a>
    c7b8:	28 f4       	brcc	.+10     	; 0xc7c4 <_ZN12BackpackInfo11getUsedPinsEv+0x72>
    c7ba:	a2 30       	cpi	r26, 0x02	; 2
    c7bc:	51 f0       	breq	.+20     	; 0xc7d2 <_ZN12BackpackInfo11getUsedPinsEv+0x80>
    c7be:	a4 30       	cpi	r26, 0x04	; 4
    c7c0:	41 f0       	breq	.+16     	; 0xc7d2 <_ZN12BackpackInfo11getUsedPinsEv+0x80>
    c7c2:	61 c0       	rjmp	.+194    	; 0xc886 <_ZN12BackpackInfo11getUsedPinsEv+0x134>
    c7c4:	a6 30       	cpi	r26, 0x06	; 6
    c7c6:	09 f4       	brne	.+2      	; 0xc7ca <_ZN12BackpackInfo11getUsedPinsEv+0x78>
    c7c8:	3d c0       	rjmp	.+122    	; 0xc844 <_ZN12BackpackInfo11getUsedPinsEv+0xf2>
    c7ca:	a7 30       	cpi	r26, 0x07	; 7
    c7cc:	09 f4       	brne	.+2      	; 0xc7d0 <_ZN12BackpackInfo11getUsedPinsEv+0x7e>
    c7ce:	3d c0       	rjmp	.+122    	; 0xc84a <_ZN12BackpackInfo11getUsedPinsEv+0xf8>
    c7d0:	5a c0       	rjmp	.+180    	; 0xc886 <_ZN12BackpackInfo11getUsedPinsEv+0x134>
    const __FlashStringHelper *name() {
      return reinterpret_cast<const __FlashStringHelper *>(&physical_pin_info[this->val].name);
    }

    LogicalPin logical() {
      return pgm_read_byte(&physical_pin_info[this->val].logical_pin);
    c7d2:	05 80       	ldd	r0, Z+5	; 0x05
    c7d4:	f6 81       	ldd	r31, Z+6	; 0x06
    c7d6:	e0 2d       	mov	r30, r0
    c7d8:	c0 80       	ld	r12, Z
    c7da:	1e c0       	rjmp	.+60     	; 0xc818 <_ZN12BackpackInfo11getUsedPinsEv+0xc6>
	Pbbe::IoPinDescriptor& d = static_cast<Pbbe::IoPinDescriptor&>(*info.parsed);
	used |= d.pin.logical().mask();
	break;
      }
      case Pbbe::DT_UART: {
	Pbbe::UartDescriptor& d = static_cast<Pbbe::UartDescriptor&>(*info.parsed);
    c7dc:	a5 81       	ldd	r26, Z+5	; 0x05
    c7de:	b6 81       	ldd	r27, Z+6	; 0x06
    c7e0:	cc 90       	ld	r12, X
    c7e2:	bc 9c       	mul	r11, r12
    c7e4:	f0 01       	movw	r30, r0
    c7e6:	11 24       	eor	r1, r1
    c7e8:	e5 59       	subi	r30, 0x95	; 149
    c7ea:	f7 4f       	sbci	r31, 0xF7	; 247
    c7ec:	e4 91       	lpm	r30, Z
    static const uint8_t NONE = 0xff;

    /** Bitmask for logical pins */
    typedef boost::uint_t<NUM_DIGITAL_PINS>::least mask_t;
    mask_t mask() {
      if (this->val != NONE)
    c7ee:	ef 3f       	cpi	r30, 0xFF	; 255
    c7f0:	51 f0       	breq	.+20     	; 0xc806 <_ZN12BackpackInfo11getUsedPinsEv+0xb4>
        return (mask_t)1 << this->val;
    c7f2:	68 01       	movw	r12, r16
    c7f4:	79 01       	movw	r14, r18
    c7f6:	04 c0       	rjmp	.+8      	; 0xc800 <_ZN12BackpackInfo11getUsedPinsEv+0xae>
    c7f8:	cc 0c       	add	r12, r12
    c7fa:	dd 1c       	adc	r13, r13
    c7fc:	ee 1c       	adc	r14, r14
    c7fe:	ff 1c       	adc	r15, r15
    c800:	ea 95       	dec	r30
    c802:	d2 f7       	brpl	.-12     	; 0xc7f8 <_ZN12BackpackInfo11getUsedPinsEv+0xa6>
    c804:	03 c0       	rjmp	.+6      	; 0xc80c <_ZN12BackpackInfo11getUsedPinsEv+0xba>
      else
        return 0;
    c806:	c1 2c       	mov	r12, r1
    c808:	d1 2c       	mov	r13, r1
    c80a:	76 01       	movw	r14, r12
	used |= d.tx_pin.logical().mask();
    c80c:	4c 29       	or	r20, r12
    c80e:	5d 29       	or	r21, r13
    c810:	6e 29       	or	r22, r14
    c812:	7f 29       	or	r23, r15
    const __FlashStringHelper *name() {
      return reinterpret_cast<const __FlashStringHelper *>(&physical_pin_info[this->val].name);
    }

    LogicalPin logical() {
      return pgm_read_byte(&physical_pin_info[this->val].logical_pin);
    c814:	11 96       	adiw	r26, 0x01	; 1
    c816:	cc 90       	ld	r12, X
    c818:	bc 9c       	mul	r11, r12
    c81a:	f0 01       	movw	r30, r0
    c81c:	11 24       	eor	r1, r1
    c81e:	e5 59       	subi	r30, 0x95	; 149
    c820:	f7 4f       	sbci	r31, 0xF7	; 247
    c822:	e4 91       	lpm	r30, Z
    static const uint8_t NONE = 0xff;

    /** Bitmask for logical pins */
    typedef boost::uint_t<NUM_DIGITAL_PINS>::least mask_t;
    mask_t mask() {
      if (this->val != NONE)
    c824:	ef 3f       	cpi	r30, 0xFF	; 255
    c826:	51 f0       	breq	.+20     	; 0xc83c <_ZN12BackpackInfo11getUsedPinsEv+0xea>
        return (mask_t)1 << this->val;
    c828:	68 01       	movw	r12, r16
    c82a:	79 01       	movw	r14, r18
    c82c:	04 c0       	rjmp	.+8      	; 0xc836 <_ZN12BackpackInfo11getUsedPinsEv+0xe4>
    c82e:	cc 0c       	add	r12, r12
    c830:	dd 1c       	adc	r13, r13
    c832:	ee 1c       	adc	r14, r14
    c834:	ff 1c       	adc	r15, r15
    c836:	ea 95       	dec	r30
    c838:	d2 f7       	brpl	.-12     	; 0xc82e <_ZN12BackpackInfo11getUsedPinsEv+0xdc>
    c83a:	21 c0       	rjmp	.+66     	; 0xc87e <_ZN12BackpackInfo11getUsedPinsEv+0x12c>
      else
        return 0;
    c83c:	c1 2c       	mov	r12, r1
    c83e:	d1 2c       	mov	r13, r1
    c840:	76 01       	movw	r14, r12
    c842:	1d c0       	rjmp	.+58     	; 0xc87e <_ZN12BackpackInfo11getUsedPinsEv+0x12c>
	used |= d.rx_pin.logical().mask();
	break;
      }
      case Pbbe::DT_I2C_SLAVE: {
	used |= Pbbe::LogicalPin(SCL).mask();
	used |= Pbbe::LogicalPin(SDA).mask();
    c844:	50 68       	ori	r21, 0x80	; 128
    c846:	61 60       	ori	r22, 0x01	; 1
	break;
    c848:	1e c0       	rjmp	.+60     	; 0xc886 <_ZN12BackpackInfo11getUsedPinsEv+0x134>
    const __FlashStringHelper *name() {
      return reinterpret_cast<const __FlashStringHelper *>(&physical_pin_info[this->val].name);
    }

    LogicalPin logical() {
      return pgm_read_byte(&physical_pin_info[this->val].logical_pin);
    c84a:	05 80       	ldd	r0, Z+5	; 0x05
    c84c:	f6 81       	ldd	r31, Z+6	; 0x06
    c84e:	e0 2d       	mov	r30, r0
    c850:	c0 80       	ld	r12, Z
    c852:	bc 9c       	mul	r11, r12
    c854:	f0 01       	movw	r30, r0
    c856:	11 24       	eor	r1, r1
    c858:	e5 59       	subi	r30, 0x95	; 149
    c85a:	f7 4f       	sbci	r31, 0xF7	; 247
    c85c:	e4 91       	lpm	r30, Z
    static const uint8_t NONE = 0xff;

    /** Bitmask for logical pins */
    typedef boost::uint_t<NUM_DIGITAL_PINS>::least mask_t;
    mask_t mask() {
      if (this->val != NONE)
    c85e:	ef 3f       	cpi	r30, 0xFF	; 255
    c860:	51 f0       	breq	.+20     	; 0xc876 <_ZN12BackpackInfo11getUsedPinsEv+0x124>
        return (mask_t)1 << this->val;
    c862:	68 01       	movw	r12, r16
    c864:	79 01       	movw	r14, r18
    c866:	04 c0       	rjmp	.+8      	; 0xc870 <_ZN12BackpackInfo11getUsedPinsEv+0x11e>
    c868:	cc 0c       	add	r12, r12
    c86a:	dd 1c       	adc	r13, r13
    c86c:	ee 1c       	adc	r14, r14
    c86e:	ff 1c       	adc	r15, r15
    c870:	ea 95       	dec	r30
    c872:	d2 f7       	brpl	.-12     	; 0xc868 <_ZN12BackpackInfo11getUsedPinsEv+0x116>
    c874:	03 c0       	rjmp	.+6      	; 0xc87c <_ZN12BackpackInfo11getUsedPinsEv+0x12a>
      else
        return 0;
    c876:	c1 2c       	mov	r12, r1
    c878:	d1 2c       	mov	r13, r1
    c87a:	76 01       	movw	r14, r12
      }
      case Pbbe::DT_SPI_SLAVE: {
	Pbbe::SpiSlaveDescriptor& d = static_cast<Pbbe::SpiSlaveDescriptor&>(*info.parsed);
	used |= d.ss_pin.logical().mask();
	used |= Pbbe::LogicalPin(MISO).mask();
	used |= Pbbe::LogicalPin(MOSI).mask();
    c87c:	5c 61       	ori	r21, 0x1C	; 28
	used |= Pbbe::LogicalPin(SCK).mask();
    c87e:	4c 29       	or	r20, r12
    c880:	5d 29       	or	r21, r13
    c882:	6e 29       	or	r22, r14
    c884:	7f 29       	or	r23, r15
    return this->used_pins;

  Pbbe::LogicalPin::mask_t used = 0;

  Pbbe::DescriptorList *list = getAllDescriptors();
  for (uint8_t i = 0; i < list->num_descriptors; ++i) {
    c886:	a3 94       	inc	r10
    c888:	89 cf       	rjmp	.-238    	; 0xc79c <_ZN12BackpackInfo11getUsedPinsEv+0x4a>
	break;
      }
    }
  }

  this->used_pins = used;
    c88a:	4e 87       	std	Y+14, r20	; 0x0e
    c88c:	5f 87       	std	Y+15, r21	; 0x0f
    c88e:	68 8b       	std	Y+16, r22	; 0x10
    c890:	79 8b       	std	Y+17, r23	; 0x11
    c892:	cb 01       	movw	r24, r22
  return used;
}
    c894:	64 2f       	mov	r22, r20
    c896:	75 2f       	mov	r23, r21
    c898:	df 91       	pop	r29
    c89a:	cf 91       	pop	r28
    c89c:	1f 91       	pop	r17
    c89e:	0f 91       	pop	r16
    c8a0:	ff 90       	pop	r15
    c8a2:	ef 90       	pop	r14
    c8a4:	df 90       	pop	r13
    c8a6:	cf 90       	pop	r12
    c8a8:	bf 90       	pop	r11
    c8aa:	af 90       	pop	r10
    c8ac:	9f 90       	pop	r9
    c8ae:	08 95       	ret

0000c8b0 <_ZN9Backpacks14isModelPresentEj>:
  memcpy(bp.id.raw_bytes, unique_id, sizeof(bp.id));
}

bool Backpacks::isModelPresent(uint16_t modelid)
{
  for (uint8_t i = 0; i < num_backpacks; ++i) {
    c8b0:	40 e0       	ldi	r20, 0x00	; 0
    c8b2:	20 91 6d 35 	lds	r18, 0x356D
    c8b6:	42 17       	cp	r20, r18
    c8b8:	80 f4       	brcc	.+32     	; 0xc8da <_ZN9Backpacks14isModelPresentEj+0x2a>
    if (modelid == info[i].id.model)
    c8ba:	e0 91 6b 35 	lds	r30, 0x356B
    c8be:	f0 91 6c 35 	lds	r31, 0x356C
    c8c2:	22 e1       	ldi	r18, 0x12	; 18
    c8c4:	42 9f       	mul	r20, r18
    c8c6:	e0 0d       	add	r30, r0
    c8c8:	f1 1d       	adc	r31, r1
    c8ca:	11 24       	eor	r1, r1
      uint8_t arr[bytes];
      T v;
    } tmp = {0};
    for (int i = 0; i < bytes; i++)
      tmp.arr[bytes - i - 1] = val[i];
    return tmp.v;
    c8cc:	22 81       	ldd	r18, Z+2	; 0x02
    c8ce:	31 81       	ldd	r19, Z+1	; 0x01
    c8d0:	82 17       	cp	r24, r18
    c8d2:	93 07       	cpc	r25, r19
    c8d4:	21 f0       	breq	.+8      	; 0xc8de <_ZN9Backpacks14isModelPresentEj+0x2e>
  memcpy(bp.id.raw_bytes, unique_id, sizeof(bp.id));
}

bool Backpacks::isModelPresent(uint16_t modelid)
{
  for (uint8_t i = 0; i < num_backpacks; ++i) {
    c8d6:	4f 5f       	subi	r20, 0xFF	; 255
    c8d8:	ec cf       	rjmp	.-40     	; 0xc8b2 <_ZN9Backpacks14isModelPresentEj+0x2>
    if (modelid == info[i].id.model)
      return true;
  }
  return false;
    c8da:	80 e0       	ldi	r24, 0x00	; 0
    c8dc:	08 95       	ret

bool Backpacks::isModelPresent(uint16_t modelid)
{
  for (uint8_t i = 0; i < num_backpacks; ++i) {
    if (modelid == info[i].id.model)
      return true;
    c8de:	81 e0       	ldi	r24, 0x01	; 1
  }
  return false;
}
    c8e0:	08 95       	ret

0000c8e2 <_ZN9Backpacks14updateUsedPinsEv>:

void Backpacks::updateUsedPins()
{
    c8e2:	cf 92       	push	r12
    c8e4:	df 92       	push	r13
    c8e6:	ef 92       	push	r14
    c8e8:	ff 92       	push	r15
    c8ea:	cf 93       	push	r28
  Pbbe::LogicalPin::mask_t used = 0;
  for (uint8_t i = 0; i < num_backpacks; ++i) {
    c8ec:	c0 e0       	ldi	r28, 0x00	; 0
  return false;
}

void Backpacks::updateUsedPins()
{
  Pbbe::LogicalPin::mask_t used = 0;
    c8ee:	c1 2c       	mov	r12, r1
    c8f0:	d1 2c       	mov	r13, r1
    c8f2:	76 01       	movw	r14, r12
  for (uint8_t i = 0; i < num_backpacks; ++i) {
    c8f4:	80 91 6d 35 	lds	r24, 0x356D
    c8f8:	c8 17       	cp	r28, r24
    c8fa:	80 f4       	brcc	.+32     	; 0xc91c <_ZN9Backpacks14updateUsedPinsEv+0x3a>
    used |= info[i].getUsedPins();
    c8fc:	80 91 6b 35 	lds	r24, 0x356B
    c900:	90 91 6c 35 	lds	r25, 0x356C
    c904:	22 e1       	ldi	r18, 0x12	; 18
    c906:	c2 9f       	mul	r28, r18
    c908:	80 0d       	add	r24, r0
    c90a:	91 1d       	adc	r25, r1
    c90c:	11 24       	eor	r1, r1
    c90e:	21 df       	rcall	.-446    	; 0xc752 <_ZN12BackpackInfo11getUsedPinsEv>
    c910:	c6 2a       	or	r12, r22
    c912:	d7 2a       	or	r13, r23
    c914:	e8 2a       	or	r14, r24
    c916:	f9 2a       	or	r15, r25
}

void Backpacks::updateUsedPins()
{
  Pbbe::LogicalPin::mask_t used = 0;
  for (uint8_t i = 0; i < num_backpacks; ++i) {
    c918:	cf 5f       	subi	r28, 0xFF	; 255
    c91a:	ec cf       	rjmp	.-40     	; 0xc8f4 <_ZN9Backpacks14updateUsedPinsEv+0x12>
    used |= info[i].getUsedPins();
  }

  used_pins = used;
    c91c:	c0 92 5c 35 	sts	0x355C, r12
    c920:	d0 92 5d 35 	sts	0x355D, r13
    c924:	e0 92 5e 35 	sts	0x355E, r14
    c928:	f0 92 5f 35 	sts	0x355F, r15
}
    c92c:	cf 91       	pop	r28
    c92e:	ff 90       	pop	r15
    c930:	ef 90       	pop	r14
    c932:	df 90       	pop	r13
    c934:	cf 90       	pop	r12
    c936:	08 95       	ret

0000c938 <_ZN9Backpacks6detectEv>:
  pbbp.begin(BACKPACK_BUS);
  detect();
}

bool Backpacks::detect()
{
    c938:	cf 93       	push	r28
    c93a:	df 93       	push	r29
    c93c:	1f 92       	push	r1
    c93e:	cd b7       	in	r28, 0x3d	; 61
    c940:	de b7       	in	r29, 0x3e	; 62
  free(info);
    c942:	80 91 6b 35 	lds	r24, 0x356B
    c946:	90 91 6c 35 	lds	r25, 0x356C
    c94a:	0e 94 c6 b0 	call	0x1618c	; 0x1618c <free>
  num_backpacks = 0;
    c94e:	10 92 6d 35 	sts	0x356D, r1
  used_pins = 0;
    c952:	10 92 5c 35 	sts	0x355C, r1
    c956:	10 92 5d 35 	sts	0x355D, r1
    c95a:	10 92 5e 35 	sts	0x355E, r1
    c95e:	10 92 5f 35 	sts	0x355F, r1
  if (!pbbp.enumerate(addBackpack))
    c962:	61 ea       	ldi	r22, 0xA1	; 161
    c964:	72 e6       	ldi	r23, 0x62	; 98
    c966:	80 e6       	ldi	r24, 0x60	; 96
    c968:	95 e3       	ldi	r25, 0x35	; 53
    c96a:	2b dd       	rcall	.-1450   	; 0xc3c2 <_ZN4PBBP9enumerateEPFvPhE>
    c96c:	81 11       	cpse	r24, r1
    c96e:	06 c0       	rjmp	.+12     	; 0xc97c <_ZN9Backpacks6detectEv+0x44>
    return printPbbpError("Backpack enumeration failed: ");
    c970:	8d ec       	ldi	r24, 0xCD	; 205
    c972:	91 e1       	ldi	r25, 0x11	; 17
  updateUsedPins();
  return true;
}
    c974:	0f 90       	pop	r0
    c976:	df 91       	pop	r29
    c978:	cf 91       	pop	r28
{
  free(info);
  num_backpacks = 0;
  used_pins = 0;
  if (!pbbp.enumerate(addBackpack))
    return printPbbpError("Backpack enumeration failed: ");
    c97a:	25 ce       	rjmp	.-950    	; 0xc5c6 <_ZN9Backpacks14printPbbpErrorEPKc>
  updateUsedPins();
    c97c:	89 83       	std	Y+1, r24	; 0x01
    c97e:	b1 df       	rcall	.-158    	; 0xc8e2 <_ZN9Backpacks14updateUsedPinsEv>
  return true;
}
    c980:	89 81       	ldd	r24, Y+1	; 0x01
    c982:	0f 90       	pop	r0
    c984:	df 91       	pop	r29
    c986:	cf 91       	pop	r28
    c988:	08 95       	ret

0000c98a <_ZN9Backpacks5setupEv>:

void Backpacks::setup()
{
  // Give the slaves on the backpack bus a bit of time to start up. 1ms
  // seems to be enough, but let's be generous.
  delay(5);
    c98a:	65 e0       	ldi	r22, 0x05	; 5
    c98c:	70 e0       	ldi	r23, 0x00	; 0
    c98e:	80 e0       	ldi	r24, 0x00	; 0
    c990:	90 e0       	ldi	r25, 0x00	; 0
    c992:	0e 94 48 14 	call	0x2890	; 0x2890 <delay>
  pbbp.begin(BACKPACK_BUS);
    c996:	63 e1       	ldi	r22, 0x13	; 19
    c998:	80 e6       	ldi	r24, 0x60	; 96
    c99a:	95 e3       	ldi	r25, 0x35	; 53
    c99c:	13 da       	rcall	.-3034   	; 0xbdc4 <_ZN4PBBP5beginEh>
  detect();
    c99e:	cc cf       	rjmp	.-104    	; 0xc938 <_ZN9Backpacks6detectEv>

0000c9a0 <_GLOBAL__sub_I__ZN9Backpacks13num_backpacksE>:
#include <Arduino.h>
#include "Backpacks.h"

uint8_t Backpacks::num_backpacks = 0;
BackpackInfo *Backpacks::info = NULL;
PBBP Backpacks::pbbp;
    c9a0:	80 e6       	ldi	r24, 0x60	; 96
    c9a2:	95 e3       	ldi	r25, 0x35	; 53
    c9a4:	0c ca       	rjmp	.-3048   	; 0xbdbe <_ZN4PBBPC1Ev>

0000c9a6 <_ZN12WiFiBackpack15onNcmDisconnectEPv>:
}

void WiFiBackpack::onNcmDisconnect(void *data) {
  WiFiBackpack& wifi = *(WiFiBackpack*)data;

  wifi.client = GSCore::INVALID_CID;
    c9a6:	6f ef       	ldi	r22, 0xFF	; 255
    c9a8:	0c 94 54 37 	jmp	0x6ea8	; 0x6ea8 <_ZN8GSClientaSEh>

0000c9ac <_ZL10print_linePKhjPv>:
#define CA_CERTNAME_HQ "hq.ca"
#define NTP_SERVER "pool.ntp.org"
// Sync on connect and every 24 hours thereafter
#define NTP_INTERVAL (3600L * 24)

static void print_line(const uint8_t *buf, uint16_t len, void *data) {
    c9ac:	0f 93       	push	r16
    c9ae:	1f 93       	push	r17
    c9b0:	cf 93       	push	r28
    c9b2:	df 93       	push	r29
    c9b4:	8b 01       	movw	r16, r22
    c9b6:	ec 01       	movw	r28, r24
    c9b8:	08 0f       	add	r16, r24
    c9ba:	19 1f       	adc	r17, r25
  while (len--)
    c9bc:	c0 17       	cp	r28, r16
    c9be:	d1 07       	cpc	r29, r17
    c9c0:	21 f0       	breq	.+8      	; 0xc9ca <_ZL10print_linePKhjPv+0x1e>
    spb(*buf++);
    c9c2:	89 91       	ld	r24, Y+
    c9c4:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <_Z3spbc>
    c9c8:	f9 cf       	rjmp	.-14     	; 0xc9bc <_ZL10print_linePKhjPv+0x10>
  speol();
}
    c9ca:	df 91       	pop	r29
    c9cc:	cf 91       	pop	r28
    c9ce:	1f 91       	pop	r17
    c9d0:	0f 91       	pop	r16
#define NTP_INTERVAL (3600L * 24)

static void print_line(const uint8_t *buf, uint16_t len, void *data) {
  while (len--)
    spb(*buf++);
  speol();
    c9d2:	0c 94 3d 1f 	jmp	0x3e7a	; 0x3e7a <_Z5speolv>

0000c9d6 <_ZN12WiFiBackpackC1Ev>:
}

WiFiBackpack::WiFiBackpack() : client(gs) { }
    c9d6:	cf 93       	push	r28
    c9d8:	df 93       	push	r29
    c9da:	ec 01       	movw	r28, r24
    c9dc:	a3 dd       	rcall	.-1210   	; 0xc524 <_ZN16PinoccioBackpackC1Ev>
    c9de:	ce 01       	movw	r24, r28
    c9e0:	43 96       	adiw	r24, 0x13	; 19
    c9e2:	1b 82       	std	Y+3, r1	; 0x03
    c9e4:	1a 82       	std	Y+2, r1	; 0x02
    c9e6:	48 ee       	ldi	r20, 0xE8	; 232
    c9e8:	53 e0       	ldi	r21, 0x03	; 3
    c9ea:	60 e0       	ldi	r22, 0x00	; 0
    c9ec:	70 e0       	ldi	r23, 0x00	; 0
    c9ee:	4c 83       	std	Y+4, r20	; 0x04
    c9f0:	5d 83       	std	Y+5, r21	; 0x05
    c9f2:	6e 83       	std	Y+6, r22	; 0x06
    c9f4:	7f 83       	std	Y+7, r23	; 0x07

#include "GSModule.h"

class GSClient : public Client {
  public:
    GSClient(GSModule &gs) : gs(gs), cid(GSModule::INVALID_CID) { } ;
    c9f6:	9d 87       	std	Y+13, r25	; 0x0d
    c9f8:	8c 87       	std	Y+12, r24	; 0x0c
    c9fa:	2f ef       	ldi	r18, 0xFF	; 255
    c9fc:	2e 87       	std	Y+14, r18	; 0x0e

#include "GSClient.h"

class GSTcpClient : public  GSClient {
  public:
    GSTcpClient(GSModule &gs) : GSClient(gs) { } ;
    c9fe:	25 e5       	ldi	r18, 0x55	; 85
    ca00:	30 e1       	ldi	r19, 0x10	; 16
    ca02:	39 83       	std	Y+1, r19	; 0x01
    ca04:	28 83       	st	Y, r18
    ca06:	df 91       	pop	r29
    ca08:	cf 91       	pop	r28
 * variants.
 *
 * This class defines some higher level methods for sending commands,
 * @see GSCore for the begin/end and lower level methods.
 */
class GSModule : public GSCore {
    ca0a:	0c 94 9b 37 	jmp	0x6f36	; 0x6f36 <_ZN6GSCoreC1Ev>

0000ca0e <_ZN12WiFiBackpackD1Ev>:

WiFiBackpack::~WiFiBackpack() { }
    ca0e:	8b cd       	rjmp	.-1258   	; 0xc526 <_ZN16PinoccioBackpackD1Ev>

0000ca10 <_ZN12WiFiBackpack5setupEv>:
  WiFiBackpack& wifi = *(WiFiBackpack*)data;

  wifi.client = GSCore::INVALID_CID;
}

bool WiFiBackpack::setup() {
    ca10:	ff 92       	push	r15
    ca12:	0f 93       	push	r16
    ca14:	1f 93       	push	r17
    ca16:	cf 93       	push	r28
    ca18:	df 93       	push	r29
    ca1a:	ec 01       	movw	r28, r24
  Backpack::setup();
    ca1c:	85 dd       	rcall	.-1270   	; 0xc528 <_ZN16PinoccioBackpack5setupEv>
  // Alternatively, use the UART for Wifi backpacks that still have the
  // UART firmware running on them
  // Serial1.begin(115200);
  // return gs.begin(Serial1);

  SPI.begin();
    ca1e:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <_ZN8SPIClass5beginEv>
  SPI.setClockDivider(SPI_CLOCK_DIV16);
    ca22:	81 e0       	ldi	r24, 0x01	; 1
    ca24:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <_ZN8SPIClass15setClockDividerEh>

  gs.onAssociate = onAssociate;
    ca28:	80 e0       	ldi	r24, 0x00	; 0
    ca2a:	97 e6       	ldi	r25, 0x67	; 103
    ca2c:	98 8f       	std	Y+24, r25	; 0x18
    ca2e:	8f 8b       	std	Y+23, r24	; 0x17
  gs.onNcmConnect = onNcmConnect;
    ca30:	82 e5       	ldi	r24, 0x52	; 82
    ca32:	97 e6       	ldi	r25, 0x67	; 103
    ca34:	9c 8b       	std	Y+20, r25	; 0x14
    ca36:	8b 8b       	std	Y+19, r24	; 0x13
  gs.onNcmDisconnect = onNcmDisconnect;
    ca38:	83 ed       	ldi	r24, 0xD3	; 211
    ca3a:	94 e6       	ldi	r25, 0x64	; 100
    ca3c:	9e 8b       	std	Y+22, r25	; 0x16
    ca3e:	8d 8b       	std	Y+21, r24	; 0x15
  gs.eventData = this;
    ca40:	dc 8f       	std	Y+28, r29	; 0x1c
    ca42:	cb 8f       	std	Y+27, r28	; 0x1b

  if (!gs.begin(7))
    ca44:	63 96       	adiw	r28, 0x13	; 19
    ca46:	4f ef       	ldi	r20, 0xFF	; 255
    ca48:	67 e0       	ldi	r22, 0x07	; 7
    ca4a:	ce 01       	movw	r24, r28
    ca4c:	0e 94 ff 43 	call	0x87fe	; 0x87fe <_ZN6GSCore5beginEhh>
    ca50:	f8 2e       	mov	r15, r24
    ca52:	88 23       	and	r24, r24
    ca54:	79 f0       	breq	.+30     	; 0xca74 <_ZN12WiFiBackpack5setupEv+0x64>
    return false;

  if (HqHandler::cacert_len)
    ca56:	00 91 f8 12 	lds	r16, 0x12F8
    ca5a:	10 91 f9 12 	lds	r17, 0x12F9
    ca5e:	01 15       	cp	r16, r1
    ca60:	11 05       	cpc	r17, r1
    ca62:	41 f0       	breq	.+16     	; 0xca74 <_ZN12WiFiBackpack5setupEv+0x64>
    gs.addCert(CA_CERTNAME_HQ, /* to_flash */ false, HqHandler::cacert, HqHandler::cacert_len);
    ca64:	2a ef       	ldi	r18, 0xFA	; 250
    ca66:	32 e1       	ldi	r19, 0x12	; 18
    ca68:	40 e0       	ldi	r20, 0x00	; 0
    ca6a:	6b ee       	ldi	r22, 0xEB	; 235
    ca6c:	71 e1       	ldi	r23, 0x11	; 17
    ca6e:	ce 01       	movw	r24, r28
    ca70:	0e 94 31 47 	call	0x8e62	; 0x8e62 <_ZN8GSModule7addCertEPKcbPKhj>

  return true;
}
    ca74:	8f 2d       	mov	r24, r15
    ca76:	df 91       	pop	r29
    ca78:	cf 91       	pop	r28
    ca7a:	1f 91       	pop	r17
    ca7c:	0f 91       	pop	r16
    ca7e:	ff 90       	pop	r15
    ca80:	08 95       	ret

0000ca82 <_ZN12WiFiBackpack4loopEv>:

void WiFiBackpack::loop() {
    ca82:	0f 93       	push	r16
    ca84:	1f 93       	push	r17
    ca86:	cf 93       	push	r28
    ca88:	df 93       	push	r29
    ca8a:	ec 01       	movw	r28, r24
  Backpack::loop();
    ca8c:	4e dd       	rcall	.-1380   	; 0xc52a <_ZN16PinoccioBackpack4loopEv>
  gs.loop();
    ca8e:	8e 01       	movw	r16, r28
    ca90:	0d 5e       	subi	r16, 0xED	; 237
    ca92:	1f 4f       	sbci	r17, 0xFF	; 255
    ca94:	c8 01       	movw	r24, r16
    ca96:	0e 94 87 41 	call	0x830e	; 0x830e <_ZN6GSCore4loopEv>
   * @returns the cid, or INVALID_CID if no connection has been made
   * yet.
   */
  cid_t getNcmCid()
  {
    readAndProcessAsync();
    ca9a:	c8 01       	movw	r24, r16
    ca9c:	0e 94 6c 41 	call	0x82d8	; 0x82d8 <_ZN6GSCore19readAndProcessAsyncEv>
    return this->ncm_auto_cid;
    caa0:	fe 01       	movw	r30, r28
    caa2:	ef 50       	subi	r30, 0x0F	; 15
    caa4:	fd 4f       	sbci	r31, 0xFD	; 253
  client = gs.getNcmCid();
    caa6:	60 81       	ld	r22, Z
    caa8:	ce 01       	movw	r24, r28
}
    caaa:	df 91       	pop	r29
    caac:	cf 91       	pop	r28
    caae:	1f 91       	pop	r17
    cab0:	0f 91       	pop	r16
}

void WiFiBackpack::loop() {
  Backpack::loop();
  gs.loop();
  client = gs.getNcmCid();
    cab2:	0c 94 54 37 	jmp	0x6ea8	; 0x6ea8 <_ZN8GSClientaSEh>

0000cab6 <_ZN12WiFiBackpack10wifiConfigEPKcS1_>:
  }

  return len == 10 || len == 26;
}

bool WiFiBackpack::wifiConfig(const char *ssid, const char *passphrase) {
    cab6:	9f 92       	push	r9
    cab8:	af 92       	push	r10
    caba:	bf 92       	push	r11
    cabc:	cf 92       	push	r12
    cabe:	df 92       	push	r13
    cac0:	ef 92       	push	r14
    cac2:	ff 92       	push	r15
    cac4:	0f 93       	push	r16
    cac6:	1f 93       	push	r17
    cac8:	cf 93       	push	r28
    caca:	df 93       	push	r29
    cacc:	b6 2e       	mov	r11, r22
    cace:	a7 2e       	mov	r10, r23
    cad0:	8a 01       	movw	r16, r20
   * TODO: Double quotes and backslashes in the passphrase should be
   * backslash-escaped
   */
  bool setSecurity(GSSecurity sec)
  {
    return writeCommandCheckOk("AT+WSEC=%d", sec);
    cad2:	ec 01       	movw	r28, r24
    cad4:	63 96       	adiw	r28, 0x13	; 19
    cad6:	1f 92       	push	r1
    cad8:	1f 92       	push	r1
    cada:	81 ef       	ldi	r24, 0xF1	; 241
    cadc:	91 e1       	ldi	r25, 0x11	; 17
    cade:	9f 93       	push	r25
    cae0:	8f 93       	push	r24
    cae2:	df 93       	push	r29
    cae4:	cf 93       	push	r28
    cae6:	0e 94 7c 43 	call	0x86f8	; 0x86f8 <_ZN6GSCore19writeCommandCheckOkEPKcz>
    caea:	98 2e       	mov	r9, r24
  bool ok = true;
  ok = ok && gs.setSecurity(GSModule::GS_SECURITY_AUTO);
  if (passphrase && *passphrase) {
    caec:	0f 90       	pop	r0
    caee:	0f 90       	pop	r0
    caf0:	0f 90       	pop	r0
    caf2:	0f 90       	pop	r0
    caf4:	0f 90       	pop	r0
    caf6:	0f 90       	pop	r0
    caf8:	01 15       	cp	r16, r1
    cafa:	11 05       	cpc	r17, r1
    cafc:	a9 f1       	breq	.+106    	; 0xcb68 <_ZN12WiFiBackpack10wifiConfigEPKcS1_+0xb2>
    cafe:	f8 01       	movw	r30, r16
    cb00:	80 81       	ld	r24, Z
    cb02:	88 23       	and	r24, r24
    cb04:	89 f1       	breq	.+98     	; 0xcb68 <_ZN12WiFiBackpack10wifiConfigEPKcS1_+0xb2>
    cb06:	68 01       	movw	r12, r16
    cb08:	e1 2c       	mov	r14, r1
    cb0a:	f1 2c       	mov	r15, r1
  client = gs.getNcmCid();
}

static bool isWepKey(const char *key) {
  int len = 0;
  while (key[len] && len <= 26) {
    cb0c:	f6 01       	movw	r30, r12
    cb0e:	81 91       	ld	r24, Z+
    cb10:	6f 01       	movw	r12, r30
    cb12:	88 23       	and	r24, r24
    cb14:	69 f0       	breq	.+26     	; 0xcb30 <_ZN12WiFiBackpack10wifiConfigEPKcS1_+0x7a>
    cb16:	fb e1       	ldi	r31, 0x1B	; 27
    cb18:	ef 16       	cp	r14, r31
    cb1a:	f1 04       	cpc	r15, r1
    cb1c:	79 f0       	breq	.+30     	; 0xcb3c <_ZN12WiFiBackpack10wifiConfigEPKcS1_+0x86>
    if (!isxdigit(key[len]))
    cb1e:	90 e0       	ldi	r25, 0x00	; 0
    cb20:	0e 94 df b4 	call	0x169be	; 0x169be <isxdigit>
    cb24:	89 2b       	or	r24, r25
    cb26:	51 f0       	breq	.+20     	; 0xcb3c <_ZN12WiFiBackpack10wifiConfigEPKcS1_+0x86>
      return false;
    ++len;
    cb28:	ff ef       	ldi	r31, 0xFF	; 255
    cb2a:	ef 1a       	sub	r14, r31
    cb2c:	ff 0a       	sbc	r15, r31
    cb2e:	ee cf       	rjmp	.-36     	; 0xcb0c <_ZN12WiFiBackpack10wifiConfigEPKcS1_+0x56>
  }

  return len == 10 || len == 26;
    cb30:	e8 94       	clt
    cb32:	e4 f8       	bld	r14, 4
    cb34:	2a e0       	ldi	r18, 0x0A	; 10
    cb36:	e2 16       	cp	r14, r18
    cb38:	f1 04       	cpc	r15, r1
    cb3a:	b1 f1       	breq	.+108    	; 0xcba8 <_ZN12WiFiBackpack10wifiConfigEPKcS1_+0xf2>
  if (passphrase && *passphrase) {
    // Setting WEP passphrase will return error if phrase isn't exactly
    // 10 or 26 hex bytes
    if (isWepKey(passphrase))
      ok = ok && gs.setWepPassphrase(passphrase);
    ok = ok && gs.setWpaPassphrase(passphrase);
    cb3c:	99 20       	and	r9, r9
    cb3e:	09 f4       	brne	.+2      	; 0xcb42 <_ZN12WiFiBackpack10wifiConfigEPKcS1_+0x8c>
    cb40:	5a c0       	rjmp	.+180    	; 0xcbf6 <_ZN12WiFiBackpack10wifiConfigEPKcS1_+0x140>
  /**
   * Set the WPA / WPA2 PSK passhrase to use.
   */
  bool setWpaPassphrase(const char *passphrase)
  {
    return writeCommandCheckOk("AT+WWPA=\"%s\"", passphrase);
    cb42:	1f 93       	push	r17
    cb44:	0f 93       	push	r16
    cb46:	88 e0       	ldi	r24, 0x08	; 8
    cb48:	92 e1       	ldi	r25, 0x12	; 18
    cb4a:	9f 93       	push	r25
    cb4c:	8f 93       	push	r24
    cb4e:	df 93       	push	r29
    cb50:	cf 93       	push	r28
    cb52:	0e 94 7c 43 	call	0x86f8	; 0x86f8 <_ZN6GSCore19writeCommandCheckOkEPKcz>
    cb56:	0f 90       	pop	r0
    cb58:	0f 90       	pop	r0
    cb5a:	0f 90       	pop	r0
    cb5c:	0f 90       	pop	r0
    cb5e:	0f 90       	pop	r0
    cb60:	0f 90       	pop	r0
    cb62:	81 11       	cpse	r24, r1
    cb64:	04 c0       	rjmp	.+8      	; 0xcb6e <_ZN12WiFiBackpack10wifiConfigEPKcS1_+0xb8>
    cb66:	47 c0       	rjmp	.+142    	; 0xcbf6 <_ZN12WiFiBackpack10wifiConfigEPKcS1_+0x140>
  }
  ok = ok && gs.setAutoAssociate(ssid);
    cb68:	99 20       	and	r9, r9
    cb6a:	09 f4       	brne	.+2      	; 0xcb6e <_ZN12WiFiBackpack10wifiConfigEPKcS1_+0xb8>
    cb6c:	44 c0       	rjmp	.+136    	; 0xcbf6 <_ZN12WiFiBackpack10wifiConfigEPKcS1_+0x140>
   *                  Channel 0 means "any channel".
   * @param mode      The wireless network mode to use
   */
  bool setAutoAssociate(const char *ssid, const char *bssid = NULL, int channel = 0, WMode mode = GS_INFRASTRUCTURE)
  {
    return writeCommandCheckOk("AT+WAUTO=%d,\"%s\",%s,%d", mode, ssid, bssid ?: "", channel);
    cb6e:	1f 92       	push	r1
    cb70:	1f 92       	push	r1
    cb72:	8f ea       	ldi	r24, 0xAF	; 175
    cb74:	99 e1       	ldi	r25, 0x19	; 25
    cb76:	9f 93       	push	r25
    cb78:	8f 93       	push	r24
    cb7a:	af 92       	push	r10
    cb7c:	bf 92       	push	r11
    cb7e:	1f 92       	push	r1
    cb80:	1f 92       	push	r1
    cb82:	85 e1       	ldi	r24, 0x15	; 21
    cb84:	92 e1       	ldi	r25, 0x12	; 18
    cb86:	9f 93       	push	r25
    cb88:	8f 93       	push	r24
    cb8a:	df 93       	push	r29
    cb8c:	cf 93       	push	r28
    cb8e:	0e 94 7c 43 	call	0x86f8	; 0x86f8 <_ZN6GSCore19writeCommandCheckOkEPKcz>
    cb92:	ed b7       	in	r30, 0x3d	; 61
    cb94:	fe b7       	in	r31, 0x3e	; 62
    cb96:	3c 96       	adiw	r30, 0x0c	; 12
    cb98:	0f b6       	in	r0, 0x3f	; 63
    cb9a:	f8 94       	cli
    cb9c:	fe bf       	out	0x3e, r31	; 62
    cb9e:	0f be       	out	0x3f, r0	; 63
    cba0:	ed bf       	out	0x3d, r30	; 61
    cba2:	81 11       	cpse	r24, r1
    cba4:	16 c0       	rjmp	.+44     	; 0xcbd2 <_ZN12WiFiBackpack10wifiConfigEPKcS1_+0x11c>
    cba6:	27 c0       	rjmp	.+78     	; 0xcbf6 <_ZN12WiFiBackpack10wifiConfigEPKcS1_+0x140>
  ok = ok && gs.setSecurity(GSModule::GS_SECURITY_AUTO);
  if (passphrase && *passphrase) {
    // Setting WEP passphrase will return error if phrase isn't exactly
    // 10 or 26 hex bytes
    if (isWepKey(passphrase))
      ok = ok && gs.setWepPassphrase(passphrase);
    cba8:	99 20       	and	r9, r9
    cbaa:	29 f1       	breq	.+74     	; 0xcbf6 <_ZN12WiFiBackpack10wifiConfigEPKcS1_+0x140>
  /**
   * Set the WEP passhrase to use.
   */
  bool setWepPassphrase(const char *passphrase)
  {
    return writeCommandCheckOk("AT+WWEP1=%s", passphrase);
    cbac:	1f 93       	push	r17
    cbae:	0f 93       	push	r16
    cbb0:	8c ef       	ldi	r24, 0xFC	; 252
    cbb2:	91 e1       	ldi	r25, 0x11	; 17
    cbb4:	9f 93       	push	r25
    cbb6:	8f 93       	push	r24
    cbb8:	df 93       	push	r29
    cbba:	cf 93       	push	r28
    cbbc:	0e 94 7c 43 	call	0x86f8	; 0x86f8 <_ZN6GSCore19writeCommandCheckOkEPKcz>
    cbc0:	0f 90       	pop	r0
    cbc2:	0f 90       	pop	r0
    cbc4:	0f 90       	pop	r0
    cbc6:	0f 90       	pop	r0
    cbc8:	0f 90       	pop	r0
    cbca:	0f 90       	pop	r0
    cbcc:	88 23       	and	r24, r24
    cbce:	99 f0       	breq	.+38     	; 0xcbf6 <_ZN12WiFiBackpack10wifiConfigEPKcS1_+0x140>
    cbd0:	b8 cf       	rjmp	.-144    	; 0xcb42 <_ZN12WiFiBackpack10wifiConfigEPKcS1_+0x8c>
   * @param profile The profile number in flash to use. Can be either 0
   *                or 1.
   */
  bool saveProfile(uint8_t profile)
  {
    return writeCommandCheckOk("AT&W%d", profile);
    cbd2:	1f 92       	push	r1
    cbd4:	1f 92       	push	r1
    cbd6:	8c e2       	ldi	r24, 0x2C	; 44
    cbd8:	92 e1       	ldi	r25, 0x12	; 18
    cbda:	9f 93       	push	r25
    cbdc:	8f 93       	push	r24
    cbde:	df 93       	push	r29
    cbe0:	cf 93       	push	r28
    cbe2:	0e 94 7c 43 	call	0x86f8	; 0x86f8 <_ZN6GSCore19writeCommandCheckOkEPKcz>
    ok = ok && gs.setWpaPassphrase(passphrase);
  }
  ok = ok && gs.setAutoAssociate(ssid);
  // Remember these settings through a reboot
  ok = ok && gs.saveProfile(0);
    cbe6:	0f 90       	pop	r0
    cbe8:	0f 90       	pop	r0
    cbea:	0f 90       	pop	r0
    cbec:	0f 90       	pop	r0
    cbee:	0f 90       	pop	r0
    cbf0:	0f 90       	pop	r0
    cbf2:	81 11       	cpse	r24, r1
    cbf4:	02 c0       	rjmp	.+4      	; 0xcbfa <_ZN12WiFiBackpack10wifiConfigEPKcS1_+0x144>
    cbf6:	80 e0       	ldi	r24, 0x00	; 0
    cbf8:	11 c0       	rjmp	.+34     	; 0xcc1c <_ZN12WiFiBackpack10wifiConfigEPKcS1_+0x166>
   * @param profile The profile number in flash to use. Can be either 0
   *                or 1.
   */
  bool setDefaultProfile(uint8_t profile)
  {
    return writeCommandCheckOk("AT&Y%d", profile);
    cbfa:	1f 92       	push	r1
    cbfc:	1f 92       	push	r1
    cbfe:	83 e3       	ldi	r24, 0x33	; 51
    cc00:	92 e1       	ldi	r25, 0x12	; 18
    cc02:	9f 93       	push	r25
    cc04:	8f 93       	push	r24
    cc06:	df 93       	push	r29
    cc08:	cf 93       	push	r28
    cc0a:	0e 94 7c 43 	call	0x86f8	; 0x86f8 <_ZN6GSCore19writeCommandCheckOkEPKcz>
    cc0e:	0f 90       	pop	r0
    cc10:	0f 90       	pop	r0
    cc12:	0f 90       	pop	r0
    cc14:	0f 90       	pop	r0
    cc16:	0f 90       	pop	r0
    cc18:	0f 90       	pop	r0
    cc1a:	81 e0       	ldi	r24, 0x01	; 1
  // Ignore setDefaultProfile failure, since it fails also when only a
  // single profile is available
  ok && gs.setDefaultProfile(0);
  return ok;
}
    cc1c:	df 91       	pop	r29
    cc1e:	cf 91       	pop	r28
    cc20:	1f 91       	pop	r17
    cc22:	0f 91       	pop	r16
    cc24:	ff 90       	pop	r15
    cc26:	ef 90       	pop	r14
    cc28:	df 90       	pop	r13
    cc2a:	cf 90       	pop	r12
    cc2c:	bf 90       	pop	r11
    cc2e:	af 90       	pop	r10
    cc30:	9f 90       	pop	r9
    cc32:	08 95       	ret

0000cc34 <_ZN12WiFiBackpack8wifiDhcpEPKc>:

bool WiFiBackpack::wifiDhcp(const char *hostname) {
    cc34:	cf 93       	push	r28
    cc36:	df 93       	push	r29
    cc38:	ab 01       	movw	r20, r22
  bool ok = true;
  ok = ok && gs.setDhcp(true, hostname);
    cc3a:	ec 01       	movw	r28, r24
    cc3c:	63 96       	adiw	r28, 0x13	; 19
    cc3e:	61 e0       	ldi	r22, 0x01	; 1
    cc40:	ce 01       	movw	r24, r28
    cc42:	0e 94 14 45 	call	0x8a28	; 0x8a28 <_ZN8GSModule7setDhcpEbPKc>
    cc46:	88 23       	and	r24, r24
    cc48:	21 f1       	breq	.+72     	; 0xcc92 <_ZN12WiFiBackpack8wifiDhcpEPKc+0x5e>
   * @param profile The profile number in flash to use. Can be either 0
   *                or 1.
   */
  bool saveProfile(uint8_t profile)
  {
    return writeCommandCheckOk("AT&W%d", profile);
    cc4a:	1f 92       	push	r1
    cc4c:	1f 92       	push	r1
    cc4e:	8c e2       	ldi	r24, 0x2C	; 44
    cc50:	92 e1       	ldi	r25, 0x12	; 18
    cc52:	9f 93       	push	r25
    cc54:	8f 93       	push	r24
    cc56:	df 93       	push	r29
    cc58:	cf 93       	push	r28
    cc5a:	0e 94 7c 43 	call	0x86f8	; 0x86f8 <_ZN6GSCore19writeCommandCheckOkEPKcz>
  // Remember these settings through a reboot
  ok = ok && gs.saveProfile(0);
    cc5e:	0f 90       	pop	r0
    cc60:	0f 90       	pop	r0
    cc62:	0f 90       	pop	r0
    cc64:	0f 90       	pop	r0
    cc66:	0f 90       	pop	r0
    cc68:	0f 90       	pop	r0
    cc6a:	88 23       	and	r24, r24
    cc6c:	91 f0       	breq	.+36     	; 0xcc92 <_ZN12WiFiBackpack8wifiDhcpEPKc+0x5e>
   * @param profile The profile number in flash to use. Can be either 0
   *                or 1.
   */
  bool setDefaultProfile(uint8_t profile)
  {
    return writeCommandCheckOk("AT&Y%d", profile);
    cc6e:	1f 92       	push	r1
    cc70:	1f 92       	push	r1
    cc72:	83 e3       	ldi	r24, 0x33	; 51
    cc74:	92 e1       	ldi	r25, 0x12	; 18
    cc76:	9f 93       	push	r25
    cc78:	8f 93       	push	r24
    cc7a:	df 93       	push	r29
    cc7c:	cf 93       	push	r28
    cc7e:	0e 94 7c 43 	call	0x86f8	; 0x86f8 <_ZN6GSCore19writeCommandCheckOkEPKcz>
    cc82:	0f 90       	pop	r0
    cc84:	0f 90       	pop	r0
    cc86:	0f 90       	pop	r0
    cc88:	0f 90       	pop	r0
    cc8a:	0f 90       	pop	r0
    cc8c:	0f 90       	pop	r0
    cc8e:	81 e0       	ldi	r24, 0x01	; 1
    cc90:	01 c0       	rjmp	.+2      	; 0xcc94 <_ZN12WiFiBackpack8wifiDhcpEPKc+0x60>
    cc92:	80 e0       	ldi	r24, 0x00	; 0
  // Ignore setDefaultProfile failure, since it fails also when only a
  // single profile is available
  ok && gs.setDefaultProfile(0);
  return ok;
}
    cc94:	df 91       	pop	r29
    cc96:	cf 91       	pop	r28
    cc98:	08 95       	ret

0000cc9a <_ZN12WiFiBackpack10wifiStaticE9IPAddressS0_S0_S0_>:

bool WiFiBackpack::wifiStatic(IPAddress ip, IPAddress netmask, IPAddress gw, IPAddress dns) {
    cc9a:	af 92       	push	r10
    cc9c:	bf 92       	push	r11
    cc9e:	cf 92       	push	r12
    cca0:	df 92       	push	r13
    cca2:	ef 92       	push	r14
    cca4:	ff 92       	push	r15
    cca6:	0f 93       	push	r16
    cca8:	1f 93       	push	r17
    ccaa:	cf 93       	push	r28
    ccac:	df 93       	push	r29
    ccae:	1f 92       	push	r1
    ccb0:	1f 92       	push	r1
    ccb2:	cd b7       	in	r28, 0x3d	; 61
    ccb4:	de b7       	in	r29, 0x3e	; 62
    ccb6:	7b 01       	movw	r14, r22
    ccb8:	6a 01       	movw	r12, r20
  bool ok = true;
  ok = ok && gs.setDhcp(false);
    ccba:	43 96       	adiw	r24, 0x13	; 19
    ccbc:	5c 01       	movw	r10, r24
    ccbe:	40 e0       	ldi	r20, 0x00	; 0
    ccc0:	50 e0       	ldi	r21, 0x00	; 0
    ccc2:	60 e0       	ldi	r22, 0x00	; 0
    ccc4:	29 83       	std	Y+1, r18	; 0x01
    ccc6:	3a 83       	std	Y+2, r19	; 0x02
    ccc8:	0e 94 14 45 	call	0x8a28	; 0x8a28 <_ZN8GSModule7setDhcpEbPKc>
    cccc:	29 81       	ldd	r18, Y+1	; 0x01
    ccce:	3a 81       	ldd	r19, Y+2	; 0x02
    ccd0:	88 23       	and	r24, r24
    ccd2:	89 f1       	breq	.+98     	; 0xcd36 <_ZN12WiFiBackpack10wifiStaticE9IPAddressS0_S0_S0_+0x9c>
  ok = ok && gs.setStaticIp(ip, netmask, gw);
    ccd4:	a6 01       	movw	r20, r12
    ccd6:	b7 01       	movw	r22, r14
    ccd8:	c5 01       	movw	r24, r10
    ccda:	0e 94 3c 45 	call	0x8a78	; 0x8a78 <_ZN8GSModule11setStaticIpERK9IPAddressS2_S2_>
    ccde:	88 23       	and	r24, r24
    cce0:	51 f1       	breq	.+84     	; 0xcd36 <_ZN12WiFiBackpack10wifiStaticE9IPAddressS0_S0_S0_+0x9c>
  ok = ok && gs.setDns(dns);
    cce2:	b8 01       	movw	r22, r16
    cce4:	c5 01       	movw	r24, r10
    cce6:	0e 94 ce 45 	call	0x8b9c	; 0x8b9c <_ZN8GSModule6setDnsERK9IPAddress>
    ccea:	88 23       	and	r24, r24
    ccec:	21 f1       	breq	.+72     	; 0xcd36 <_ZN12WiFiBackpack10wifiStaticE9IPAddressS0_S0_S0_+0x9c>
   * @param profile The profile number in flash to use. Can be either 0
   *                or 1.
   */
  bool saveProfile(uint8_t profile)
  {
    return writeCommandCheckOk("AT&W%d", profile);
    ccee:	1f 92       	push	r1
    ccf0:	1f 92       	push	r1
    ccf2:	8c e2       	ldi	r24, 0x2C	; 44
    ccf4:	92 e1       	ldi	r25, 0x12	; 18
    ccf6:	9f 93       	push	r25
    ccf8:	8f 93       	push	r24
    ccfa:	bf 92       	push	r11
    ccfc:	af 92       	push	r10
    ccfe:	0e 94 7c 43 	call	0x86f8	; 0x86f8 <_ZN6GSCore19writeCommandCheckOkEPKcz>

  // Remember these settings through a reboot
  ok = ok && gs.saveProfile(0);
    cd02:	0f 90       	pop	r0
    cd04:	0f 90       	pop	r0
    cd06:	0f 90       	pop	r0
    cd08:	0f 90       	pop	r0
    cd0a:	0f 90       	pop	r0
    cd0c:	0f 90       	pop	r0
    cd0e:	88 23       	and	r24, r24
    cd10:	91 f0       	breq	.+36     	; 0xcd36 <_ZN12WiFiBackpack10wifiStaticE9IPAddressS0_S0_S0_+0x9c>
   * @param profile The profile number in flash to use. Can be either 0
   *                or 1.
   */
  bool setDefaultProfile(uint8_t profile)
  {
    return writeCommandCheckOk("AT&Y%d", profile);
    cd12:	1f 92       	push	r1
    cd14:	1f 92       	push	r1
    cd16:	83 e3       	ldi	r24, 0x33	; 51
    cd18:	92 e1       	ldi	r25, 0x12	; 18
    cd1a:	9f 93       	push	r25
    cd1c:	8f 93       	push	r24
    cd1e:	bf 92       	push	r11
    cd20:	af 92       	push	r10
    cd22:	0e 94 7c 43 	call	0x86f8	; 0x86f8 <_ZN6GSCore19writeCommandCheckOkEPKcz>
    cd26:	0f 90       	pop	r0
    cd28:	0f 90       	pop	r0
    cd2a:	0f 90       	pop	r0
    cd2c:	0f 90       	pop	r0
    cd2e:	0f 90       	pop	r0
    cd30:	0f 90       	pop	r0
    cd32:	81 e0       	ldi	r24, 0x01	; 1
    cd34:	01 c0       	rjmp	.+2      	; 0xcd38 <_ZN12WiFiBackpack10wifiStaticE9IPAddressS0_S0_S0_+0x9e>
    cd36:	80 e0       	ldi	r24, 0x00	; 0
  // Ignore setDefaultProfile failure, since it fails also when only a
  // single profile is available
  ok && gs.setDefaultProfile(0);
  return ok;
}
    cd38:	0f 90       	pop	r0
    cd3a:	0f 90       	pop	r0
    cd3c:	df 91       	pop	r29
    cd3e:	cf 91       	pop	r28
    cd40:	1f 91       	pop	r17
    cd42:	0f 91       	pop	r16
    cd44:	ff 90       	pop	r15
    cd46:	ef 90       	pop	r14
    cd48:	df 90       	pop	r13
    cd4a:	cf 90       	pop	r12
    cd4c:	bf 90       	pop	r11
    cd4e:	af 90       	pop	r10
    cd50:	08 95       	ret

0000cd52 <_ZN12WiFiBackpack13autoConnectHqEv>:

bool WiFiBackpack::autoConnectHq() {
    cd52:	0f 93       	push	r16
    cd54:	1f 93       	push	r17
    cd56:	cf 93       	push	r28
    cd58:	df 93       	push	r29
  // Try to disable the NCM in case it's already running
  gs.setNcm(false);
    cd5a:	ec 01       	movw	r28, r24
    cd5c:	63 96       	adiw	r28, 0x13	; 19
    cd5e:	00 e0       	ldi	r16, 0x00	; 0
    cd60:	20 e0       	ldi	r18, 0x00	; 0
    cd62:	41 e0       	ldi	r20, 0x01	; 1
    cd64:	60 e0       	ldi	r22, 0x00	; 0
    cd66:	ce 01       	movw	r24, r28
    cd68:	0e 94 91 47 	call	0x8f22	; 0x8f22 <_ZN8GSModule6setNcmEbbbNS_7NCMModeE>
   * @param param    The parameter to set
   * @param value    The value to set it to
   */
  bool setNcmParam(GSNcmParam param, uint16_t value)
  {
    return writeCommandCheckOk("AT+NCMAUTOCONF=%d,%d", param, value);
    cd6c:	1f 92       	push	r1
    cd6e:	1f 92       	push	r1
    cd70:	1f 92       	push	r1
    cd72:	8b e0       	ldi	r24, 0x0B	; 11
    cd74:	8f 93       	push	r24
    cd76:	8a e3       	ldi	r24, 0x3A	; 58
    cd78:	92 e1       	ldi	r25, 0x12	; 18
    cd7a:	9f 93       	push	r25
    cd7c:	8f 93       	push	r24
    cd7e:	df 93       	push	r29
    cd80:	cf 93       	push	r28
    cd82:	0e 94 7c 43 	call	0x86f8	; 0x86f8 <_ZN6GSCore19writeCommandCheckOkEPKcz>
   * @param param    The parameter to set
   * @param value    The value to set it to
   */
  bool setParam(GSParam param, uint16_t value)
  {
    return writeCommandCheckOk("ATS%d=%d", param, value);
    cd86:	83 e0       	ldi	r24, 0x03	; 3
    cd88:	8f 93       	push	r24
    cd8a:	88 ee       	ldi	r24, 0xE8	; 232
    cd8c:	8f 93       	push	r24
    cd8e:	1f 92       	push	r1
    cd90:	86 e0       	ldi	r24, 0x06	; 6
    cd92:	8f 93       	push	r24
    cd94:	0f e4       	ldi	r16, 0x4F	; 79
    cd96:	12 e1       	ldi	r17, 0x12	; 18
    cd98:	1f 93       	push	r17
    cd9a:	0f 93       	push	r16
    cd9c:	df 93       	push	r29
    cd9e:	cf 93       	push	r28
    cda0:	0e 94 7c 43 	call	0x86f8	; 0x86f8 <_ZN6GSCore19writeCommandCheckOkEPKcz>
    cda4:	1f 92       	push	r1
    cda6:	1f 92       	push	r1
    cda8:	1f 92       	push	r1
    cdaa:	87 e0       	ldi	r24, 0x07	; 7
    cdac:	8f 93       	push	r24
    cdae:	1f 93       	push	r17
    cdb0:	0f 93       	push	r16
    cdb2:	df 93       	push	r29
    cdb4:	cf 93       	push	r28
    cdb6:	0e 94 7c 43 	call	0x86f8	; 0x86f8 <_ZN6GSCore19writeCommandCheckOkEPKcz>
  // attempts) indefinately (at least it seems that a retry count of 0
  // means that, documentation doesn't say).
  gs.setParam(GSModule::GS_PARAM_L4_RETRY_PERIOD, 1000 /* x 10ms */);
  gs.setParam(GSModule::GS_PARAM_L4_RETRY_COUNT, 0);

  return gs.setAutoConnectClient(HqHandler::host, HqHandler::port) &&
    cdba:	40 91 df 16 	lds	r20, 0x16DF
    cdbe:	50 91 e0 16 	lds	r21, 0x16E0
    cdc2:	21 e0       	ldi	r18, 0x01	; 1
    cdc4:	61 ee       	ldi	r22, 0xE1	; 225
    cdc6:	76 e1       	ldi	r23, 0x16	; 22
    cdc8:	ce 01       	movw	r24, r28
    cdca:	0e 94 7a 47 	call	0x8ef4	; 0x8ef4 <_ZN8GSModule20setAutoConnectClientEPKcjNS_8ProtocolE>
    cdce:	2d b7       	in	r18, 0x3d	; 61
    cdd0:	3e b7       	in	r19, 0x3e	; 62
    cdd2:	28 5e       	subi	r18, 0xE8	; 232
    cdd4:	3f 4f       	sbci	r19, 0xFF	; 255
    cdd6:	0f b6       	in	r0, 0x3f	; 63
    cdd8:	f8 94       	cli
    cdda:	3e bf       	out	0x3e, r19	; 62
    cddc:	0f be       	out	0x3f, r0	; 63
    cdde:	2d bf       	out	0x3d, r18	; 61
    cde0:	88 23       	and	r24, r24
    cde2:	41 f0       	breq	.+16     	; 0xcdf4 <_ZN12WiFiBackpack13autoConnectHqEv+0xa2>
         gs.setNcm(/* enable */ true, /* associate_only */ false, /* remember */ false);
    cde4:	00 e0       	ldi	r16, 0x00	; 0
    cde6:	20 e0       	ldi	r18, 0x00	; 0
    cde8:	40 e0       	ldi	r20, 0x00	; 0
    cdea:	61 e0       	ldi	r22, 0x01	; 1
    cdec:	ce 01       	movw	r24, r28
    cdee:	0e 94 91 47 	call	0x8f22	; 0x8f22 <_ZN8GSModule6setNcmEbbbNS_7NCMModeE>
    cdf2:	01 c0       	rjmp	.+2      	; 0xcdf6 <_ZN12WiFiBackpack13autoConnectHqEv+0xa4>
  // attempts) indefinately (at least it seems that a retry count of 0
  // means that, documentation doesn't say).
  gs.setParam(GSModule::GS_PARAM_L4_RETRY_PERIOD, 1000 /* x 10ms */);
  gs.setParam(GSModule::GS_PARAM_L4_RETRY_COUNT, 0);

  return gs.setAutoConnectClient(HqHandler::host, HqHandler::port) &&
    cdf4:	80 e0       	ldi	r24, 0x00	; 0
         gs.setNcm(/* enable */ true, /* associate_only */ false, /* remember */ false);
}
    cdf6:	df 91       	pop	r29
    cdf8:	cf 91       	pop	r28
    cdfa:	1f 91       	pop	r17
    cdfc:	0f 91       	pop	r16
    cdfe:	08 95       	ret

0000ce00 <_ZN12WiFiBackpack11onAssociateEPv>:

WiFiBackpack::WiFiBackpack() : client(gs) { }

WiFiBackpack::~WiFiBackpack() { }

void WiFiBackpack::onAssociate(void *data) {
    ce00:	cf 92       	push	r12
    ce02:	df 92       	push	r13
    ce04:	ef 92       	push	r14
    ce06:	ff 92       	push	r15
    ce08:	0f 93       	push	r16
    ce0a:	cf 93       	push	r28
    ce0c:	df 93       	push	r29
    ce0e:	00 d0       	rcall	.+0      	; 0xce10 <_ZN12WiFiBackpack11onAssociateEPv+0x10>
    ce10:	00 d0       	rcall	.+0      	; 0xce12 <_ZN12WiFiBackpack11onAssociateEPv+0x12>
    ce12:	cd b7       	in	r28, 0x3d	; 61
    ce14:	de b7       	in	r29, 0x3e	; 62
    ce16:	7c 01       	movw	r14, r24
  WiFiBackpack& wifi = *(WiFiBackpack*)data;

  // Do a timesync
  IPAddress ip = wifi.gs.dnsLookup(NTP_SERVER);
    ce18:	6c 01       	movw	r12, r24
    ce1a:	83 e1       	ldi	r24, 0x13	; 19
    ce1c:	c8 0e       	add	r12, r24
    ce1e:	d1 1c       	adc	r13, r1
    ce20:	48 e5       	ldi	r20, 0x58	; 88
    ce22:	52 e1       	ldi	r21, 0x12	; 18
    ce24:	b6 01       	movw	r22, r12
    ce26:	ce 01       	movw	r24, r28
    ce28:	01 96       	adiw	r24, 0x01	; 1
    ce2a:	0e 94 96 46 	call	0x8d2c	; 0x8d2c <_ZN8GSModule9dnsLookupEPKc>
  if (ip == INADDR_NONE ||
    ce2e:	8b 81       	ldd	r24, Y+3	; 0x03
    ce30:	9c 81       	ldd	r25, Y+4	; 0x04
    ce32:	ad 81       	ldd	r26, Y+5	; 0x05
    ce34:	be 81       	ldd	r27, Y+6	; 0x06
    ce36:	40 91 70 35 	lds	r20, 0x3570
    ce3a:	50 91 71 35 	lds	r21, 0x3571
    ce3e:	60 91 72 35 	lds	r22, 0x3572
    ce42:	70 91 73 35 	lds	r23, 0x3573
    ce46:	84 17       	cp	r24, r20
    ce48:	95 07       	cpc	r25, r21
    ce4a:	a6 07       	cpc	r26, r22
    ce4c:	b7 07       	cpc	r27, r23
    ce4e:	09 f1       	breq	.+66     	; 0xce92 <_ZN12WiFiBackpack11onAssociateEPv+0x92>
      !wifi.gs.timeSync(ip, NTP_INTERVAL)) {
    ce50:	0a e0       	ldi	r16, 0x0A	; 10
    ce52:	20 e8       	ldi	r18, 0x80	; 128
    ce54:	31 e5       	ldi	r19, 0x51	; 81
    ce56:	41 e0       	ldi	r20, 0x01	; 1
    ce58:	50 e0       	ldi	r21, 0x00	; 0
    ce5a:	be 01       	movw	r22, r28
    ce5c:	6f 5f       	subi	r22, 0xFF	; 255
    ce5e:	7f 4f       	sbci	r23, 0xFF	; 255
    ce60:	c6 01       	movw	r24, r12
    ce62:	0e 94 28 46 	call	0x8c50	; 0x8c50 <_ZN8GSModule8timeSyncERK9IPAddressmh>
void WiFiBackpack::onAssociate(void *data) {
  WiFiBackpack& wifi = *(WiFiBackpack*)data;

  // Do a timesync
  IPAddress ip = wifi.gs.dnsLookup(NTP_SERVER);
  if (ip == INADDR_NONE ||
    ce66:	88 23       	and	r24, r24
    ce68:	a1 f0       	breq	.+40     	; 0xce92 <_ZN12WiFiBackpack11onAssociateEPv+0x92>
      !wifi.gs.timeSync(ip, NTP_INTERVAL)) {
    Serial.println("Time sync failed, reassociating to retry");
    wifi.autoConnectHq();
  }
  
  wifi.apConnCount++;
    ce6a:	f7 01       	movw	r30, r14
    ce6c:	87 85       	ldd	r24, Z+15	; 0x0f
    ce6e:	90 89       	ldd	r25, Z+16	; 0x10
    ce70:	01 96       	adiw	r24, 0x01	; 1
    ce72:	90 8b       	std	Z+16, r25	; 0x10
    ce74:	87 87       	std	Z+15, r24	; 0x0f
}
    ce76:	26 96       	adiw	r28, 0x06	; 6
    ce78:	0f b6       	in	r0, 0x3f	; 63
    ce7a:	f8 94       	cli
    ce7c:	de bf       	out	0x3e, r29	; 62
    ce7e:	0f be       	out	0x3f, r0	; 63
    ce80:	cd bf       	out	0x3d, r28	; 61
    ce82:	df 91       	pop	r29
    ce84:	cf 91       	pop	r28
    ce86:	0f 91       	pop	r16
    ce88:	ff 90       	pop	r15
    ce8a:	ef 90       	pop	r14
    ce8c:	df 90       	pop	r13
    ce8e:	cf 90       	pop	r12
    ce90:	08 95       	ret

  // Do a timesync
  IPAddress ip = wifi.gs.dnsLookup(NTP_SERVER);
  if (ip == INADDR_NONE ||
      !wifi.gs.timeSync(ip, NTP_INTERVAL)) {
    Serial.println("Time sync failed, reassociating to retry");
    ce92:	65 e6       	ldi	r22, 0x65	; 101
    ce94:	72 e1       	ldi	r23, 0x12	; 18
    ce96:	84 e0       	ldi	r24, 0x04	; 4
    ce98:	94 e2       	ldi	r25, 0x24	; 36
    ce9a:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <_ZN5Print7printlnEPKc>
    wifi.autoConnectHq();
    ce9e:	c7 01       	movw	r24, r14
    cea0:	58 df       	rcall	.-336    	; 0xcd52 <_ZN12WiFiBackpack13autoConnectHqEv>
    cea2:	e3 cf       	rjmp	.-58     	; 0xce6a <_ZN12WiFiBackpack11onAssociateEPv+0x6a>

0000cea4 <_ZN12WiFiBackpack12onNcmConnectEPvh>:
  }
  
  wifi.apConnCount++;
}

void WiFiBackpack::onNcmConnect(void *data, GSCore::cid_t cid) {
    cea4:	cf 93       	push	r28
    cea6:	df 93       	push	r29
    cea8:	ec 01       	movw	r28, r24
  WiFiBackpack& wifi = *(WiFiBackpack*)data;

  wifi.client = cid;
    ceaa:	0e 94 54 37 	call	0x6ea8	; 0x6ea8 <_ZN8GSClientaSEh>

  if (HqHandler::cacert_len != 0) {
    ceae:	80 91 f8 12 	lds	r24, 0x12F8
    ceb2:	90 91 f9 12 	lds	r25, 0x12F9
    ceb6:	89 2b       	or	r24, r25
    ceb8:	89 f0       	breq	.+34     	; 0xcedc <_ZN12WiFiBackpack12onNcmConnectEPvh+0x38>
    if (!wifi.client.enableTls(CA_CERTNAME_HQ)) {
    ceba:	6b ee       	ldi	r22, 0xEB	; 235
    cebc:	71 e1       	ldi	r23, 0x11	; 17
    cebe:	ce 01       	movw	r24, r28
    cec0:	0e 94 d3 47 	call	0x8fa6	; 0x8fa6 <_ZN11GSTcpClient9enableTlsEPKc>
    cec4:	81 11       	cpse	r24, r1
    cec6:	0a c0       	rjmp	.+20     	; 0xcedc <_ZN12WiFiBackpack12onNcmConnectEPvh+0x38>
      // If enableTls fails, the NCM doesn't retry the TCP
      // connection. We restart the entire association to get NCM to
      // retry the TCP connection instead.
      Serial.println("SSL negotiation to HQ failed, reassociating to retry");
    cec8:	6e e8       	ldi	r22, 0x8E	; 142
    ceca:	72 e1       	ldi	r23, 0x12	; 18
    cecc:	84 e0       	ldi	r24, 0x04	; 4
    cece:	94 e2       	ldi	r25, 0x24	; 36
    ced0:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <_ZN5Print7printlnEPKc>
      wifi.autoConnectHq();
    ced4:	ce 01       	movw	r24, r28
  
  wifi.hqConnCount++;

  // TODO: Don't call leadHQConnect directly?
  leadHQConnect();
}
    ced6:	df 91       	pop	r29
    ced8:	cf 91       	pop	r28
    if (!wifi.client.enableTls(CA_CERTNAME_HQ)) {
      // If enableTls fails, the NCM doesn't retry the TCP
      // connection. We restart the entire association to get NCM to
      // retry the TCP connection instead.
      Serial.println("SSL negotiation to HQ failed, reassociating to retry");
      wifi.autoConnectHq();
    ceda:	3b cf       	rjmp	.-394    	; 0xcd52 <_ZN12WiFiBackpack13autoConnectHqEv>
      return;
    }
  }
  
  wifi.hqConnCount++;
    cedc:	89 89       	ldd	r24, Y+17	; 0x11
    cede:	9a 89       	ldd	r25, Y+18	; 0x12
    cee0:	01 96       	adiw	r24, 0x01	; 1
    cee2:	9a 8b       	std	Y+18, r25	; 0x12
    cee4:	89 8b       	std	Y+17, r24	; 0x11

  // TODO: Don't call leadHQConnect directly?
  leadHQConnect();
}
    cee6:	df 91       	pop	r29
    cee8:	cf 91       	pop	r28
  }
  
  wifi.hqConnCount++;

  // TODO: Don't call leadHQConnect directly?
  leadHQConnect();
    ceea:	0c 94 6a 7c 	jmp	0xf8d4	; 0xf8d4 <_Z13leadHQConnectv>

0000ceee <_ZN12WiFiBackpack12disassociateEv>:

  return gs.setAutoConnectClient(HqHandler::host, HqHandler::port) &&
         gs.setNcm(/* enable */ true, /* associate_only */ false, /* remember */ false);
}

void WiFiBackpack::disassociate() {
    ceee:	0f 93       	push	r16
    cef0:	cf 93       	push	r28
    cef2:	df 93       	push	r29
    cef4:	ec 01       	movw	r28, r24
  // this delay is important--The Gainspan module with 2.5.1 firmware
  // will hang if the NCM disassociate is called too soon after boot.
  if (millis() < 5000) {
    cef6:	0e 94 16 14 	call	0x282c	; 0x282c <millis>
    cefa:	68 38       	cpi	r22, 0x88	; 136
    cefc:	73 41       	sbci	r23, 0x13	; 19
    cefe:	81 05       	cpc	r24, r1
    cf00:	91 05       	cpc	r25, r1
    cf02:	30 f4       	brcc	.+12     	; 0xcf10 <_ZN12WiFiBackpack12disassociateEv+0x22>
    delay(4000);
    cf04:	60 ea       	ldi	r22, 0xA0	; 160
    cf06:	7f e0       	ldi	r23, 0x0F	; 15
    cf08:	80 e0       	ldi	r24, 0x00	; 0
    cf0a:	90 e0       	ldi	r25, 0x00	; 0
    cf0c:	0e 94 48 14 	call	0x2890	; 0x2890 <delay>
  }
  gs.setNcm(false);
    cf10:	63 96       	adiw	r28, 0x13	; 19
    cf12:	00 e0       	ldi	r16, 0x00	; 0
    cf14:	20 e0       	ldi	r18, 0x00	; 0
    cf16:	41 e0       	ldi	r20, 0x01	; 1
    cf18:	60 e0       	ldi	r22, 0x00	; 0
    cf1a:	ce 01       	movw	r24, r28
    cf1c:	0e 94 91 47 	call	0x8f22	; 0x8f22 <_ZN8GSModule6setNcmEbbbNS_7NCMModeE>
  gs.disassociate();
    cf20:	ce 01       	movw	r24, r28
}
    cf22:	df 91       	pop	r29
    cf24:	cf 91       	pop	r28
    cf26:	0f 91       	pop	r16
  // will hang if the NCM disassociate is called too soon after boot.
  if (millis() < 5000) {
    delay(4000);
  }
  gs.setNcm(false);
  gs.disassociate();
    cf28:	0c 94 f2 44 	jmp	0x89e4	; 0x89e4 <_ZN8GSModule12disassociateEv>

0000cf2c <_ZN12WiFiBackpack13isAPConnectedEv>:

void WiFiBackpack::printFirmwareVersions(Print& p) {
  runDirectCommand(p, "AT+VER=?");
}

bool WiFiBackpack::isAPConnected() {
    cf2c:	cf 93       	push	r28
    cf2e:	df 93       	push	r29
    cf30:	ec 01       	movw	r28, r24
  /**
   * Returns wether we're currently associated to a wireless network.
   */
  bool isAssociated()
  {
    readAndProcessAsync();
    cf32:	43 96       	adiw	r24, 0x13	; 19
    cf34:	0e 94 6c 41 	call	0x82d8	; 0x82d8 <_ZN6GSCore19readAndProcessAsyncEv>
    return this->associated;
    cf38:	ce 50       	subi	r28, 0x0E	; 14
    cf3a:	dd 4f       	sbci	r29, 0xFD	; 253
    cf3c:	81 e0       	ldi	r24, 0x01	; 1
    cf3e:	98 81       	ld	r25, Y
    cf40:	91 11       	cpse	r25, r1
    cf42:	01 c0       	rjmp	.+2      	; 0xcf46 <_ZN12WiFiBackpack13isAPConnectedEv+0x1a>
    cf44:	80 e0       	ldi	r24, 0x00	; 0
  return gs.isAssociated();
}
    cf46:	df 91       	pop	r29
    cf48:	cf 91       	pop	r28
    cf4a:	08 95       	ret

0000cf4c <_ZN12WiFiBackpack13isHQConnectedEv>:

bool WiFiBackpack::isHQConnected() {
    cf4c:	cf 93       	push	r28
    cf4e:	df 93       	push	r29
    cf50:	ec 01       	movw	r28, r24
  return client.connected() && client.sslConnected();
    cf52:	e8 81       	ld	r30, Y
    cf54:	f9 81       	ldd	r31, Y+1	; 0x01
    cf56:	04 88       	ldd	r0, Z+20	; 0x14
    cf58:	f5 89       	ldd	r31, Z+21	; 0x15
    cf5a:	e0 2d       	mov	r30, r0
    cf5c:	19 95       	eicall
    cf5e:	88 23       	and	r24, r24
    cf60:	49 f0       	breq	.+18     	; 0xcf74 <_ZN12WiFiBackpack13isHQConnectedEv+0x28>
    cf62:	ce 01       	movw	r24, r28
    cf64:	0e 94 d9 47 	call	0x8fb2	; 0x8fb2 <_ZN11GSTcpClient12sslConnectedEv>
    cf68:	91 e0       	ldi	r25, 0x01	; 1
    cf6a:	81 11       	cpse	r24, r1
    cf6c:	01 c0       	rjmp	.+2      	; 0xcf70 <_ZN12WiFiBackpack13isHQConnectedEv+0x24>
    cf6e:	90 e0       	ldi	r25, 0x00	; 0
    cf70:	89 2f       	mov	r24, r25
    cf72:	01 c0       	rjmp	.+2      	; 0xcf76 <_ZN12WiFiBackpack13isHQConnectedEv+0x2a>
    cf74:	80 e0       	ldi	r24, 0x00	; 0
}
    cf76:	df 91       	pop	r29
    cf78:	cf 91       	pop	r28
    cf7a:	08 95       	ret

0000cf7c <_ZN12WiFiBackpack9dnsLookupER5PrintPKc>:

bool WiFiBackpack::dnsLookup(Print& p, const char *host) {
  // TODO
  return false;
}
    cf7c:	80 e0       	ldi	r24, 0x00	; 0
    cf7e:	08 95       	ret

0000cf80 <_ZN12WiFiBackpack4pingER5PrintPKc>:

bool WiFiBackpack::ping(Print &p, const char *host) {
  // TODO
  return false;
}
    cf80:	80 e0       	ldi	r24, 0x00	; 0
    cf82:	08 95       	ret

0000cf84 <_ZN12WiFiBackpack16runDirectCommandER5PrintPKc>:

bool WiFiBackpack::runDirectCommand(Print &p, const char *command) {
    cf84:	cf 93       	push	r28
    cf86:	df 93       	push	r29
  gs.writeCommand("%s", command);
    cf88:	ec 01       	movw	r28, r24
    cf8a:	63 96       	adiw	r28, 0x13	; 19
    cf8c:	5f 93       	push	r21
    cf8e:	4f 93       	push	r20
    cf90:	8e e7       	ldi	r24, 0x7E	; 126
    cf92:	9f e0       	ldi	r25, 0x0F	; 15
    cf94:	9f 93       	push	r25
    cf96:	8f 93       	push	r24
    cf98:	df 93       	push	r29
    cf9a:	cf 93       	push	r28
    cf9c:	0e 94 83 3e 	call	0x7d06	; 0x7d06 <_ZN6GSCore12writeCommandEPKcz>
  return (gs.readResponse(print_line, NULL) == GSCore::GS_SUCCESS);
    cfa0:	20 e0       	ldi	r18, 0x00	; 0
    cfa2:	30 e0       	ldi	r19, 0x00	; 0
    cfa4:	40 e0       	ldi	r20, 0x00	; 0
    cfa6:	50 e0       	ldi	r21, 0x00	; 0
    cfa8:	66 ed       	ldi	r22, 0xD6	; 214
    cfaa:	74 e6       	ldi	r23, 0x64	; 100
    cfac:	ce 01       	movw	r24, r28
    cfae:	0e 94 22 44 	call	0x8844	; 0x8844 <_ZN6GSCore12readResponseEPFvPKhjPvES2_Ph>
    cfb2:	91 e0       	ldi	r25, 0x01	; 1
    cfb4:	0f 90       	pop	r0
    cfb6:	0f 90       	pop	r0
    cfb8:	0f 90       	pop	r0
    cfba:	0f 90       	pop	r0
    cfbc:	0f 90       	pop	r0
    cfbe:	0f 90       	pop	r0
    cfc0:	81 11       	cpse	r24, r1
    cfc2:	90 e0       	ldi	r25, 0x00	; 0
}
    cfc4:	89 2f       	mov	r24, r25
    cfc6:	df 91       	pop	r29
    cfc8:	cf 91       	pop	r28
    cfca:	08 95       	ret

0000cfcc <_ZN12WiFiBackpack8printAPsER5Print>:
  }
  gs.setNcm(false);
  gs.disassociate();
}

bool WiFiBackpack::printAPs(Print& p) {
    cfcc:	0f 93       	push	r16
    cfce:	1f 93       	push	r17
    cfd0:	cf 93       	push	r28
    cfd2:	df 93       	push	r29
    cfd4:	ec 01       	movw	r28, r24
    cfd6:	8b 01       	movw	r16, r22
  // this delay is important--The Gainspan module with 2.5.1 firmware
  // will hang if AT+WS is called too soon after boot.
  if (millis() < 5000) {
    cfd8:	0e 94 16 14 	call	0x282c	; 0x282c <millis>
    cfdc:	68 38       	cpi	r22, 0x88	; 136
    cfde:	73 41       	sbci	r23, 0x13	; 19
    cfe0:	81 05       	cpc	r24, r1
    cfe2:	91 05       	cpc	r25, r1
    cfe4:	30 f4       	brcc	.+12     	; 0xcff2 <_ZN12WiFiBackpack8printAPsER5Print+0x26>
    delay(4000);
    cfe6:	60 ea       	ldi	r22, 0xA0	; 160
    cfe8:	7f e0       	ldi	r23, 0x0F	; 15
    cfea:	80 e0       	ldi	r24, 0x00	; 0
    cfec:	90 e0       	ldi	r25, 0x00	; 0
    cfee:	0e 94 48 14 	call	0x2890	; 0x2890 <delay>
  }
  return runDirectCommand(p, "AT+WS");
    cff2:	43 ec       	ldi	r20, 0xC3	; 195
    cff4:	52 e1       	ldi	r21, 0x12	; 18
    cff6:	b8 01       	movw	r22, r16
    cff8:	ce 01       	movw	r24, r28
}
    cffa:	df 91       	pop	r29
    cffc:	cf 91       	pop	r28
    cffe:	1f 91       	pop	r17
    d000:	0f 91       	pop	r16
  // this delay is important--The Gainspan module with 2.5.1 firmware
  // will hang if AT+WS is called too soon after boot.
  if (millis() < 5000) {
    delay(4000);
  }
  return runDirectCommand(p, "AT+WS");
    d002:	c0 cf       	rjmp	.-128    	; 0xcf84 <_ZN12WiFiBackpack16runDirectCommandER5PrintPKc>

0000d004 <_ZN12WiFiBackpack13printProfilesER5Print>:
}

void WiFiBackpack::printProfiles(Print& p) {
  runDirectCommand(p, "AT&V");
    d004:	49 ec       	ldi	r20, 0xC9	; 201
    d006:	52 e1       	ldi	r21, 0x12	; 18
    d008:	bd cf       	rjmp	.-134    	; 0xcf84 <_ZN12WiFiBackpack16runDirectCommandER5PrintPKc>

0000d00a <_ZN12WiFiBackpack25printCurrentNetworkStatusER5Print>:
}

void WiFiBackpack::printCurrentNetworkStatus(Print& p) {
    d00a:	0f 93       	push	r16
    d00c:	1f 93       	push	r17
    d00e:	cf 93       	push	r28
    d010:	df 93       	push	r29
    d012:	ec 01       	movw	r28, r24
    d014:	8b 01       	movw	r16, r22
  runDirectCommand(p, "AT+NSTAT=?");
    d016:	4e ec       	ldi	r20, 0xCE	; 206
    d018:	52 e1       	ldi	r21, 0x12	; 18
    d01a:	b4 df       	rcall	.-152    	; 0xcf84 <_ZN12WiFiBackpack16runDirectCommandER5PrintPKc>
  runDirectCommand(p, "AT+CID=?");
    d01c:	49 ed       	ldi	r20, 0xD9	; 217
    d01e:	52 e1       	ldi	r21, 0x12	; 18
    d020:	b8 01       	movw	r22, r16
    d022:	ce 01       	movw	r24, r28
}
    d024:	df 91       	pop	r29
    d026:	cf 91       	pop	r28
    d028:	1f 91       	pop	r17
    d02a:	0f 91       	pop	r16
  runDirectCommand(p, "AT&V");
}

void WiFiBackpack::printCurrentNetworkStatus(Print& p) {
  runDirectCommand(p, "AT+NSTAT=?");
  runDirectCommand(p, "AT+CID=?");
    d02c:	ab cf       	rjmp	.-170    	; 0xcf84 <_ZN12WiFiBackpack16runDirectCommandER5PrintPKc>

0000d02e <_ZN12WiFiBackpack21printFirmwareVersionsER5Print>:
}

void WiFiBackpack::printFirmwareVersions(Print& p) {
  runDirectCommand(p, "AT+VER=?");
    d02e:	42 ee       	ldi	r20, 0xE2	; 226
    d030:	52 e1       	ldi	r21, 0x12	; 18
    d032:	a8 cf       	rjmp	.-176    	; 0xcf84 <_ZN12WiFiBackpack16runDirectCommandER5PrintPKc>

0000d034 <_ZN12WiFiBackpack9goToSleepEv>:

bool WiFiBackpack::goToSleep() {
  // TODO
  //Gainspan.send_cmd(CMD_PSDPSLEEP);
  return false;
}
    d034:	80 e0       	ldi	r24, 0x00	; 0
    d036:	08 95       	ret

0000d038 <_ZN12WiFiBackpack6wakeUpEv>:

bool WiFiBackpack::wakeUp() {
  // TODO
  // Gainspan.send_cmd_w_resp(CMD_AT);
  return false;
}
    d038:	80 e0       	ldi	r24, 0x00	; 0
    d03a:	08 95       	ret

0000d03c <_ZN12WiFiBackpack9printTimeER5Print>:

bool WiFiBackpack::printTime(Print &p) {
  return runDirectCommand(p, "AT+GETTIME=?");
    d03c:	4b ee       	ldi	r20, 0xEB	; 235
    d03e:	52 e1       	ldi	r21, 0x12	; 18
    d040:	a1 cf       	rjmp	.-190    	; 0xcf84 <_ZN12WiFiBackpack16runDirectCommandER5PrintPKc>

0000d042 <_GLOBAL__sub_I__ZN12WiFiBackpackC2Ev>:
}
    d042:	0f 93       	push	r16
    d044:	00 e0       	ldi	r16, 0x00	; 0
    d046:	20 e0       	ldi	r18, 0x00	; 0
    d048:	40 e0       	ldi	r20, 0x00	; 0
    d04a:	60 e0       	ldi	r22, 0x00	; 0
    d04c:	8e e6       	ldi	r24, 0x6E	; 110
    d04e:	95 e3       	ldi	r25, 0x35	; 53
    d050:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <_ZN9IPAddressC1Ehhhh>
    d054:	0f 91       	pop	r16
    d056:	08 95       	ret

0000d058 <keyMap>:

  keytableLast = 0;
  return 1;
}

int keyMap(const char *key, unsigned long at) {
    d058:	af 92       	push	r10
    d05a:	bf 92       	push	r11
    d05c:	cf 92       	push	r12
    d05e:	df 92       	push	r13
    d060:	ef 92       	push	r14
    d062:	ff 92       	push	r15
    d064:	0f 93       	push	r16
    d066:	1f 93       	push	r17
    d068:	cf 93       	push	r28
    d06a:	df 93       	push	r29
    d06c:	ec 01       	movw	r28, r24
    d06e:	6a 01       	movw	r12, r20
    d070:	7b 01       	movw	r14, r22
  int i;
  if (strlen(key) > KEY_LEN) {
    d072:	fc 01       	movw	r30, r24
    d074:	01 90       	ld	r0, Z+
    d076:	00 20       	and	r0, r0
    d078:	e9 f7       	brne	.-6      	; 0xd074 <keyMap+0x1c>
    d07a:	31 97       	sbiw	r30, 0x01	; 1
    d07c:	e8 1b       	sub	r30, r24
    d07e:	f9 0b       	sbc	r31, r25
    d080:	3b 97       	sbiw	r30, 0x0b	; 11
    d082:	08 f0       	brcs	.+2      	; 0xd086 <keyMap+0x2e>
    d084:	4f c0       	rjmp	.+158    	; 0xd124 <keyMap+0xcc>
    return 0;
  }

  for (i=0; keytable[i] && i<KEY_MAX; i++) {
    d086:	80 91 7b 3a 	lds	r24, 0x3A7B
    d08a:	90 91 7c 3a 	lds	r25, 0x3A7C
    d08e:	00 97       	sbiw	r24, 0x00	; 0
    d090:	41 f1       	breq	.+80     	; 0xd0e2 <keyMap+0x8a>
    d092:	0f 2e       	mov	r0, r31
    d094:	fd e7       	ldi	r31, 0x7D	; 125
    d096:	af 2e       	mov	r10, r31
    d098:	fa e3       	ldi	r31, 0x3A	; 58
    d09a:	bf 2e       	mov	r11, r31
    d09c:	f0 2d       	mov	r31, r0
    d09e:	00 e0       	ldi	r16, 0x00	; 0
    d0a0:	10 e0       	ldi	r17, 0x00	; 0
    if (strcmp(keytable[i],key) != 0) {
    d0a2:	be 01       	movw	r22, r28
    d0a4:	0e 94 6e b5 	call	0x16adc	; 0x16adc <strcmp>
    d0a8:	89 2b       	or	r24, r25
    d0aa:	61 f0       	breq	.+24     	; 0xd0c4 <keyMap+0x6c>
  int i;
  if (strlen(key) > KEY_LEN) {
    return 0;
  }

  for (i=0; keytable[i] && i<KEY_MAX; i++) {
    d0ac:	0f 5f       	subi	r16, 0xFF	; 255
    d0ae:	1f 4f       	sbci	r17, 0xFF	; 255
    d0b0:	f5 01       	movw	r30, r10
    d0b2:	81 91       	ld	r24, Z+
    d0b4:	91 91       	ld	r25, Z+
    d0b6:	5f 01       	movw	r10, r30
    d0b8:	00 97       	sbiw	r24, 0x00	; 0
    d0ba:	79 f4       	brne	.+30     	; 0xd0da <keyMap+0x82>
    }
    return i;
  }

  // full!
  if (i == KEY_MAX) {
    d0bc:	00 34       	cpi	r16, 0x40	; 64
    d0be:	11 05       	cpc	r17, r1
    d0c0:	d1 f1       	breq	.+116    	; 0xd136 <keyMap+0xde>
    d0c2:	11 c0       	rjmp	.+34     	; 0xd0e6 <keyMap+0x8e>

  for (i=0; keytable[i] && i<KEY_MAX; i++) {
    if (strcmp(keytable[i],key) != 0) {
      continue;
    }
    if (!at) {
    d0c4:	cd 28       	or	r12, r13
    d0c6:	ce 28       	or	r12, r14
    d0c8:	cf 28       	or	r12, r15
    d0ca:	79 f5       	brne	.+94     	; 0xd12a <keyMap+0xd2>
      keytableTmp[i] = 0; // always make sticky if not tmp
    d0cc:	f8 01       	movw	r30, r16
    d0ce:	e5 5c       	subi	r30, 0xC5	; 197
    d0d0:	f5 4c       	sbci	r31, 0xC5	; 197
    d0d2:	10 82       	st	Z, r1
    d0d4:	80 2f       	mov	r24, r16
    d0d6:	91 2f       	mov	r25, r17
    d0d8:	33 c0       	rjmp	.+102    	; 0xd140 <keyMap+0xe8>
  int i;
  if (strlen(key) > KEY_LEN) {
    return 0;
  }

  for (i=0; keytable[i] && i<KEY_MAX; i++) {
    d0da:	00 34       	cpi	r16, 0x40	; 64
    d0dc:	11 05       	cpc	r17, r1
    d0de:	09 f7       	brne	.-62     	; 0xd0a2 <keyMap+0x4a>
    d0e0:	27 c0       	rjmp	.+78     	; 0xd130 <keyMap+0xd8>
    d0e2:	00 e0       	ldi	r16, 0x00	; 0
    d0e4:	10 e0       	ldi	r17, 0x00	; 0
  if (i == KEY_MAX) {
    return 0;
  }

  // save new key
  keytable[i] = strdup(key);
    d0e6:	ce 01       	movw	r24, r28
    d0e8:	0e 94 2a b5 	call	0x16a54	; 0x16a54 <strdup>
    d0ec:	f8 01       	movw	r30, r16
    d0ee:	ee 0f       	add	r30, r30
    d0f0:	ff 1f       	adc	r31, r31
    d0f2:	e5 58       	subi	r30, 0x85	; 133
    d0f4:	f5 4c       	sbci	r31, 0xC5	; 197
    d0f6:	91 83       	std	Z+1, r25	; 0x01
    d0f8:	80 83       	st	Z, r24
  if (at) {
    d0fa:	c1 14       	cp	r12, r1
    d0fc:	d1 04       	cpc	r13, r1
    d0fe:	e1 04       	cpc	r14, r1
    d100:	f1 04       	cpc	r15, r1
    d102:	e1 f0       	breq	.+56     	; 0xd13c <keyMap+0xe4>
    keytableLast = at;
    d104:	c0 92 74 35 	sts	0x3574, r12
    d108:	d0 92 75 35 	sts	0x3575, r13
    d10c:	e0 92 76 35 	sts	0x3576, r14
    d110:	f0 92 77 35 	sts	0x3577, r15
    keytableTmp[i] = 1;
    d114:	f8 01       	movw	r30, r16
    d116:	e5 5c       	subi	r30, 0xC5	; 197
    d118:	f5 4c       	sbci	r31, 0xC5	; 197
    d11a:	81 e0       	ldi	r24, 0x01	; 1
    d11c:	80 83       	st	Z, r24
    d11e:	80 2f       	mov	r24, r16
    d120:	91 2f       	mov	r25, r17
    d122:	0e c0       	rjmp	.+28     	; 0xd140 <keyMap+0xe8>
}

int keyMap(const char *key, unsigned long at) {
  int i;
  if (strlen(key) > KEY_LEN) {
    return 0;
    d124:	80 e0       	ldi	r24, 0x00	; 0
    d126:	90 e0       	ldi	r25, 0x00	; 0
    d128:	0b c0       	rjmp	.+22     	; 0xd140 <keyMap+0xe8>
    d12a:	80 2f       	mov	r24, r16
    d12c:	91 2f       	mov	r25, r17
    d12e:	08 c0       	rjmp	.+16     	; 0xd140 <keyMap+0xe8>
    return i;
  }

  // full!
  if (i == KEY_MAX) {
    return 0;
    d130:	80 e0       	ldi	r24, 0x00	; 0
    d132:	90 e0       	ldi	r25, 0x00	; 0
    d134:	05 c0       	rjmp	.+10     	; 0xd140 <keyMap+0xe8>
    d136:	80 e0       	ldi	r24, 0x00	; 0
    d138:	90 e0       	ldi	r25, 0x00	; 0
    d13a:	02 c0       	rjmp	.+4      	; 0xd140 <keyMap+0xe8>
    d13c:	80 2f       	mov	r24, r16
    d13e:	91 2f       	mov	r25, r17
  if (at) {
    keytableLast = at;
    keytableTmp[i] = 1;
  }
  return i;
}
    d140:	df 91       	pop	r29
    d142:	cf 91       	pop	r28
    d144:	1f 91       	pop	r17
    d146:	0f 91       	pop	r16
    d148:	ff 90       	pop	r15
    d14a:	ef 90       	pop	r14
    d14c:	df 90       	pop	r13
    d14e:	cf 90       	pop	r12
    d150:	bf 90       	pop	r11
    d152:	af 90       	pop	r10
    d154:	08 95       	ret

0000d156 <keyGet>:

const char *keyGet(int i) {
  if (i < 0 || i >= KEY_MAX) {
    d156:	80 34       	cpi	r24, 0x40	; 64
    d158:	91 05       	cpc	r25, r1
    d15a:	40 f4       	brcc	.+16     	; 0xd16c <keyGet+0x16>
    return 0;
  }
  return keytable[i];
    d15c:	fc 01       	movw	r30, r24
    d15e:	ee 0f       	add	r30, r30
    d160:	ff 1f       	adc	r31, r31
    d162:	e5 58       	subi	r30, 0x85	; 133
    d164:	f5 4c       	sbci	r31, 0xC5	; 197
    d166:	80 81       	ld	r24, Z
    d168:	91 81       	ldd	r25, Z+1	; 0x01
    d16a:	08 95       	ret
  return i;
}

const char *keyGet(int i) {
  if (i < 0 || i >= KEY_MAX) {
    return 0;
    d16c:	80 e0       	ldi	r24, 0x00	; 0
    d16e:	90 e0       	ldi	r25, 0x00	; 0
  }
  return keytable[i];
}
    d170:	08 95       	ret

0000d172 <keyFree>:

void keyFree(int i) {
    d172:	0f 93       	push	r16
    d174:	1f 93       	push	r17
    d176:	cf 93       	push	r28
    d178:	df 93       	push	r29
    d17a:	ec 01       	movw	r28, r24
  if (i < 1 || i >= KEY_MAX) {
    d17c:	01 97       	sbiw	r24, 0x01	; 1
    d17e:	cf 97       	sbiw	r24, 0x3f	; 63
    d180:	80 f4       	brcc	.+32     	; 0xd1a2 <keyFree+0x30>
    return;
  }
  free(keytable[i]);
    d182:	8e 01       	movw	r16, r28
    d184:	00 0f       	add	r16, r16
    d186:	11 1f       	adc	r17, r17
    d188:	05 58       	subi	r16, 0x85	; 133
    d18a:	15 4c       	sbci	r17, 0xC5	; 197
    d18c:	f8 01       	movw	r30, r16
    d18e:	80 81       	ld	r24, Z
    d190:	91 81       	ldd	r25, Z+1	; 0x01
    d192:	0e 94 c6 b0 	call	0x1618c	; 0x1618c <free>
  keytableTmp[i] = 0;
    d196:	c5 5c       	subi	r28, 0xC5	; 197
    d198:	d5 4c       	sbci	r29, 0xC5	; 197
    d19a:	18 82       	st	Y, r1
  keytable[i] = 0;
    d19c:	f8 01       	movw	r30, r16
    d19e:	11 82       	std	Z+1, r1	; 0x01
    d1a0:	10 82       	st	Z, r1
}
    d1a2:	df 91       	pop	r29
    d1a4:	cf 91       	pop	r28
    d1a6:	1f 91       	pop	r17
    d1a8:	0f 91       	pop	r16
    d1aa:	08 95       	ret

0000d1ac <keyLoop>:
  keyMap("OVERFLOW", 0); // becomes 0, error
  keyLoad(KEYS_BUNDLE, 0, 0);
}

// idea was to use now to do time based expirations, but for now just expiring all temps immediately
int keyLoop(unsigned long now) {
    d1ac:	0f 93       	push	r16
    d1ae:	1f 93       	push	r17
    d1b0:	cf 93       	push	r28
    d1b2:	df 93       	push	r29
  int i;
  if (!keytableLast) {
    d1b4:	80 91 74 35 	lds	r24, 0x3574
    d1b8:	90 91 75 35 	lds	r25, 0x3575
    d1bc:	a0 91 76 35 	lds	r26, 0x3576
    d1c0:	b0 91 77 35 	lds	r27, 0x3577
    d1c4:	89 2b       	or	r24, r25
    d1c6:	8a 2b       	or	r24, r26
    d1c8:	8b 2b       	or	r24, r27
    d1ca:	d1 f0       	breq	.+52     	; 0xd200 <keyLoop+0x54>
    d1cc:	0b e3       	ldi	r16, 0x3B	; 59
    d1ce:	1a e3       	ldi	r17, 0x3A	; 58
    d1d0:	c0 e0       	ldi	r28, 0x00	; 0
    d1d2:	d0 e0       	ldi	r29, 0x00	; 0
    return 0;
  }

  // free any tmp keys
  for (i=0; i<KEY_MAX; i++) {
    if (!keytableTmp[i]) {
    d1d4:	f8 01       	movw	r30, r16
    d1d6:	81 91       	ld	r24, Z+
    d1d8:	8f 01       	movw	r16, r30
    d1da:	88 23       	and	r24, r24
    d1dc:	11 f0       	breq	.+4      	; 0xd1e2 <keyLoop+0x36>
      continue;
    }
    keyFree(i);
    d1de:	ce 01       	movw	r24, r28
    d1e0:	c8 df       	rcall	.-112    	; 0xd172 <keyFree>
  if (!keytableLast) {
    return 0;
  }

  // free any tmp keys
  for (i=0; i<KEY_MAX; i++) {
    d1e2:	21 96       	adiw	r28, 0x01	; 1
    d1e4:	c0 34       	cpi	r28, 0x40	; 64
    d1e6:	d1 05       	cpc	r29, r1
    d1e8:	a9 f7       	brne	.-22     	; 0xd1d4 <keyLoop+0x28>
      continue;
    }
    keyFree(i);
  }

  keytableLast = 0;
    d1ea:	10 92 74 35 	sts	0x3574, r1
    d1ee:	10 92 75 35 	sts	0x3575, r1
    d1f2:	10 92 76 35 	sts	0x3576, r1
    d1f6:	10 92 77 35 	sts	0x3577, r1
  return 1;
    d1fa:	81 e0       	ldi	r24, 0x01	; 1
    d1fc:	90 e0       	ldi	r25, 0x00	; 0
    d1fe:	02 c0       	rjmp	.+4      	; 0xd204 <keyLoop+0x58>

// idea was to use now to do time based expirations, but for now just expiring all temps immediately
int keyLoop(unsigned long now) {
  int i;
  if (!keytableLast) {
    return 0;
    d200:	80 e0       	ldi	r24, 0x00	; 0
    d202:	90 e0       	ldi	r25, 0x00	; 0
    keyFree(i);
  }

  keytableLast = 0;
  return 1;
}
    d204:	df 91       	pop	r29
    d206:	cf 91       	pop	r28
    d208:	1f 91       	pop	r17
    d20a:	0f 91       	pop	r16
    d20c:	08 95       	ret

0000d20e <keyLoad>:
  keytableTmp[i] = 0;
  keytable[i] = 0;
}

// loads json array of strings, outs is optional
void keyLoad(const char *array, int *outs, unsigned long at) {
    d20e:	4f 92       	push	r4
    d210:	5f 92       	push	r5
    d212:	6f 92       	push	r6
    d214:	7f 92       	push	r7
    d216:	8f 92       	push	r8
    d218:	9f 92       	push	r9
    d21a:	af 92       	push	r10
    d21c:	bf 92       	push	r11
    d21e:	cf 92       	push	r12
    d220:	df 92       	push	r13
    d222:	ef 92       	push	r14
    d224:	ff 92       	push	r15
    d226:	0f 93       	push	r16
    d228:	1f 93       	push	r17
    d22a:	cf 93       	push	r28
    d22c:	df 93       	push	r29
    d22e:	6c 01       	movw	r12, r24
    d230:	5b 01       	movw	r10, r22
    d232:	29 01       	movw	r4, r18
    d234:	3a 01       	movw	r6, r20
  unsigned int *index;
  unsigned int i;
  unsigned int oi=1;

  if (!array || !*array) {
    d236:	00 97       	sbiw	r24, 0x00	; 0
    d238:	09 f4       	brne	.+2      	; 0xd23c <keyLoad+0x2e>
    d23a:	58 c0       	rjmp	.+176    	; 0xd2ec <keyLoad+0xde>
    d23c:	fc 01       	movw	r30, r24
    d23e:	80 81       	ld	r24, Z
    d240:	88 23       	and	r24, r24
    d242:	09 f4       	brne	.+2      	; 0xd246 <keyLoad+0x38>
    d244:	53 c0       	rjmp	.+166    	; 0xd2ec <keyLoad+0xde>
    return;
  }

  index = malloc(strlen(array));
    d246:	01 90       	ld	r0, Z+
    d248:	00 20       	and	r0, r0
    d24a:	e9 f7       	brne	.-6      	; 0xd246 <keyLoad+0x38>
    d24c:	cf 01       	movw	r24, r30
    d24e:	01 97       	sbiw	r24, 0x01	; 1
    d250:	8c 19       	sub	r24, r12
    d252:	9d 09       	sbc	r25, r13
    d254:	0e 94 2e b0 	call	0x1605c	; 0x1605c <malloc>
    d258:	4c 01       	movw	r8, r24
  if (!index) {
    d25a:	00 97       	sbiw	r24, 0x00	; 0
    d25c:	21 f4       	brne	.+8      	; 0xd266 <keyLoad+0x58>
    outs[0] = 0;
    d25e:	f5 01       	movw	r30, r10
    d260:	11 82       	std	Z+1, r1	; 0x01
    d262:	10 82       	st	Z, r1
    return;
    d264:	43 c0       	rjmp	.+134    	; 0xd2ec <keyLoad+0xde>
  }
  j0g(array, index, strlen(array));
    d266:	f6 01       	movw	r30, r12
    d268:	01 90       	ld	r0, Z+
    d26a:	00 20       	and	r0, r0
    d26c:	e9 f7       	brne	.-6      	; 0xd268 <keyLoad+0x5a>
    d26e:	31 97       	sbiw	r30, 0x01	; 1
    d270:	af 01       	movw	r20, r30
    d272:	4c 19       	sub	r20, r12
    d274:	5d 09       	sbc	r21, r13
    d276:	bc 01       	movw	r22, r24
    d278:	c6 01       	movw	r24, r12
    d27a:	0e 94 5f 48 	call	0x90be	; 0x90be <j0g>

  for (i=0; index[i]; i+=2) {
    d27e:	f4 01       	movw	r30, r8
    d280:	80 81       	ld	r24, Z
    d282:	91 81       	ldd	r25, Z+1	; 0x01
    d284:	89 2b       	or	r24, r25
    d286:	19 f1       	breq	.+70     	; 0xd2ce <keyLoad+0xc0>
    d288:	e4 01       	movw	r28, r8

// loads json array of strings, outs is optional
void keyLoad(const char *array, int *outs, unsigned long at) {
  unsigned int *index;
  unsigned int i;
  unsigned int oi=1;
    d28a:	ee 24       	eor	r14, r14
    d28c:	e3 94       	inc	r14
    d28e:	f1 2c       	mov	r15, r1
    outs[0] = 0;
    return;
  }
  j0g(array, index, strlen(array));

  for (i=0; index[i]; i+=2) {
    d290:	00 e0       	ldi	r16, 0x00	; 0
    d292:	10 e0       	ldi	r17, 0x00	; 0
    int k = keyMap(j0g_safe(i, array, index), at);
    d294:	a4 01       	movw	r20, r8
    d296:	b6 01       	movw	r22, r12
    d298:	c8 01       	movw	r24, r16
    d29a:	0e 94 84 48 	call	0x9108	; 0x9108 <j0g_safe>
    d29e:	b3 01       	movw	r22, r6
    d2a0:	a2 01       	movw	r20, r4
    d2a2:	da de       	rcall	.-588    	; 0xd058 <keyMap>
    if (outs) {
    d2a4:	a1 14       	cp	r10, r1
    d2a6:	b1 04       	cpc	r11, r1
    d2a8:	51 f0       	breq	.+20     	; 0xd2be <keyLoad+0xb0>
      outs[oi++] = k;
    d2aa:	f7 01       	movw	r30, r14
    d2ac:	ee 0f       	add	r30, r30
    d2ae:	ff 1f       	adc	r31, r31
    d2b0:	ea 0d       	add	r30, r10
    d2b2:	fb 1d       	adc	r31, r11
    d2b4:	91 83       	std	Z+1, r25	; 0x01
    d2b6:	80 83       	st	Z, r24
    d2b8:	c7 01       	movw	r24, r14
    d2ba:	01 96       	adiw	r24, 0x01	; 1
    d2bc:	7c 01       	movw	r14, r24
    outs[0] = 0;
    return;
  }
  j0g(array, index, strlen(array));

  for (i=0; index[i]; i+=2) {
    d2be:	0e 5f       	subi	r16, 0xFE	; 254
    d2c0:	1f 4f       	sbci	r17, 0xFF	; 255
    d2c2:	24 96       	adiw	r28, 0x04	; 4
    d2c4:	88 81       	ld	r24, Y
    d2c6:	99 81       	ldd	r25, Y+1	; 0x01
    d2c8:	89 2b       	or	r24, r25
    d2ca:	21 f7       	brne	.-56     	; 0xd294 <keyLoad+0x86>
    d2cc:	03 c0       	rjmp	.+6      	; 0xd2d4 <keyLoad+0xc6>

// loads json array of strings, outs is optional
void keyLoad(const char *array, int *outs, unsigned long at) {
  unsigned int *index;
  unsigned int i;
  unsigned int oi=1;
    d2ce:	ee 24       	eor	r14, r14
    d2d0:	e3 94       	inc	r14
    d2d2:	f1 2c       	mov	r15, r1
    if (outs) {
      outs[oi++] = k;
    }
  }

  if (outs) {
    d2d4:	a1 14       	cp	r10, r1
    d2d6:	b1 04       	cpc	r11, r1
    d2d8:	31 f0       	breq	.+12     	; 0xd2e6 <keyLoad+0xd8>
    outs[0] = oi-1;
    d2da:	91 e0       	ldi	r25, 0x01	; 1
    d2dc:	e9 1a       	sub	r14, r25
    d2de:	f1 08       	sbc	r15, r1
    d2e0:	f5 01       	movw	r30, r10
    d2e2:	f1 82       	std	Z+1, r15	; 0x01
    d2e4:	e0 82       	st	Z, r14
  }

  free(index);
    d2e6:	c4 01       	movw	r24, r8
    d2e8:	0e 94 c6 b0 	call	0x1618c	; 0x1618c <free>
}
    d2ec:	df 91       	pop	r29
    d2ee:	cf 91       	pop	r28
    d2f0:	1f 91       	pop	r17
    d2f2:	0f 91       	pop	r16
    d2f4:	ff 90       	pop	r15
    d2f6:	ef 90       	pop	r14
    d2f8:	df 90       	pop	r13
    d2fa:	cf 90       	pop	r12
    d2fc:	bf 90       	pop	r11
    d2fe:	af 90       	pop	r10
    d300:	9f 90       	pop	r9
    d302:	8f 90       	pop	r8
    d304:	7f 90       	pop	r7
    d306:	6f 90       	pop	r6
    d308:	5f 90       	pop	r5
    d30a:	4f 90       	pop	r4
    d30c:	08 95       	ret

0000d30e <keyInit>:
char *keytable[KEY_MAX];
char keytableTmp[KEY_MAX];
unsigned long keytableLast = 0;

void keyInit() {
  memset(keytable, 0, sizeof(keytable));
    d30e:	80 e8       	ldi	r24, 0x80	; 128
    d310:	eb e7       	ldi	r30, 0x7B	; 123
    d312:	fa e3       	ldi	r31, 0x3A	; 58
    d314:	df 01       	movw	r26, r30
    d316:	1d 92       	st	X+, r1
    d318:	8a 95       	dec	r24
    d31a:	e9 f7       	brne	.-6      	; 0xd316 <keyInit+0x8>
  memset(keytableTmp, 0, sizeof(keytableTmp));
    d31c:	80 e4       	ldi	r24, 0x40	; 64
    d31e:	eb e3       	ldi	r30, 0x3B	; 59
    d320:	fa e3       	ldi	r31, 0x3A	; 58
    d322:	df 01       	movw	r26, r30
    d324:	1d 92       	st	X+, r1
    d326:	8a 95       	dec	r24
    d328:	e9 f7       	brne	.-6      	; 0xd324 <keyInit+0x16>
  keyMap("OVERFLOW", 0); // becomes 0, error
    d32a:	40 e0       	ldi	r20, 0x00	; 0
    d32c:	50 e0       	ldi	r21, 0x00	; 0
    d32e:	ba 01       	movw	r22, r20
    d330:	85 ef       	ldi	r24, 0xF5	; 245
    d332:	96 e1       	ldi	r25, 0x16	; 22
    d334:	91 de       	rcall	.-734    	; 0xd058 <keyMap>
  keyLoad(KEYS_BUNDLE, 0, 0);
    d336:	20 e0       	ldi	r18, 0x00	; 0
    d338:	30 e0       	ldi	r19, 0x00	; 0
    d33a:	a9 01       	movw	r20, r18
    d33c:	60 e0       	ldi	r22, 0x00	; 0
    d33e:	70 e0       	ldi	r23, 0x00	; 0
    d340:	8e ef       	ldi	r24, 0xFE	; 254
    d342:	96 e1       	ldi	r25, 0x16	; 22
    d344:	64 cf       	rjmp	.-312    	; 0xd20e <keyLoad>
    d346:	08 95       	ret

0000d348 <HAL_FuelGaugeVoltage>:
  unsigned int vcell;

  vcell = HAL_FuelGaugei2cRead16(0x02);
  vcell = vcell >> 4;  // last 4 bits of vcell are nothing
  return (vcell / 805.0f * 100);
}
    d348:	80 e0       	ldi	r24, 0x00	; 0
    d34a:	90 e0       	ldi	r25, 0x00	; 0
    d34c:	08 95       	ret

0000d34e <HAL_FuelGaugePercent>:
  soc = HAL_FuelGaugei2cRead16(0x04);  // Read SOC register of MAX17048G
  percent = (byte) (soc >> 8);  // High byte of SOC is percentage
  percent += ((float)((byte)soc))/256;  // Low byte is 1/256%

  return round(percent);
}
    d34e:	80 e0       	ldi	r24, 0x00	; 0
    d350:	90 e0       	ldi	r25, 0x00	; 0
    d352:	08 95       	ret

0000d354 <HAL_FuelGaugeConfig>:

void HAL_FuelGaugeConfig(byte percent) {
    d354:	08 95       	ret

0000d356 <_ZN9HalRgbLed5isOffEv>:
}

void HalRgbLed::disable() {
  turnOff();
  enabled = false;
}
    d356:	fc 01       	movw	r30, r24
    d358:	83 81       	ldd	r24, Z+3	; 0x03
    d35a:	94 81       	ldd	r25, Z+4	; 0x04
    d35c:	89 2b       	or	r24, r25
    d35e:	49 f4       	brne	.+18     	; 0xd372 <_ZN9HalRgbLed5isOffEv+0x1c>
    d360:	85 81       	ldd	r24, Z+5	; 0x05
    d362:	96 81       	ldd	r25, Z+6	; 0x06
    d364:	89 2b       	or	r24, r25
    d366:	29 f4       	brne	.+10     	; 0xd372 <_ZN9HalRgbLed5isOffEv+0x1c>
    d368:	81 e0       	ldi	r24, 0x01	; 1
    d36a:	27 81       	ldd	r18, Z+7	; 0x07
    d36c:	30 85       	ldd	r19, Z+8	; 0x08
    d36e:	23 2b       	or	r18, r19
    d370:	09 f0       	breq	.+2      	; 0xd374 <_ZN9HalRgbLed5isOffEv+0x1e>
    d372:	80 e0       	ldi	r24, 0x00	; 0
    d374:	08 95       	ret

0000d376 <_ZN9HalRgbLed11setRedValueEi>:
    d376:	0f 93       	push	r16
    d378:	1f 93       	push	r17
    d37a:	cf 93       	push	r28
    d37c:	df 93       	push	r29
    d37e:	ec 01       	movw	r28, r24
    d380:	8b 01       	movw	r16, r22
    d382:	8a 81       	ldd	r24, Y+2	; 0x02
    d384:	88 23       	and	r24, r24
    d386:	49 f0       	breq	.+18     	; 0xd39a <_ZN9HalRgbLed11setRedValueEi+0x24>
    d388:	6f ef       	ldi	r22, 0xFF	; 255
    d38a:	70 e0       	ldi	r23, 0x00	; 0
    d38c:	60 1b       	sub	r22, r16
    d38e:	71 0b       	sbc	r23, r17
    d390:	86 e1       	ldi	r24, 0x16	; 22
    d392:	0e 94 02 15 	call	0x2a04	; 0x2a04 <analogWrite>
    d396:	1c 83       	std	Y+4, r17	; 0x04
    d398:	0b 83       	std	Y+3, r16	; 0x03
    d39a:	df 91       	pop	r29
    d39c:	cf 91       	pop	r28
    d39e:	1f 91       	pop	r17
    d3a0:	0f 91       	pop	r16
    d3a2:	08 95       	ret

0000d3a4 <_ZN9HalRgbLed13setGreenValueEi>:
    d3a4:	0f 93       	push	r16
    d3a6:	1f 93       	push	r17
    d3a8:	cf 93       	push	r28
    d3aa:	df 93       	push	r29
    d3ac:	ec 01       	movw	r28, r24
    d3ae:	8b 01       	movw	r16, r22
    d3b0:	8a 81       	ldd	r24, Y+2	; 0x02
    d3b2:	88 23       	and	r24, r24
    d3b4:	49 f0       	breq	.+18     	; 0xd3c8 <_ZN9HalRgbLed13setGreenValueEi+0x24>
    d3b6:	6f ef       	ldi	r22, 0xFF	; 255
    d3b8:	70 e0       	ldi	r23, 0x00	; 0
    d3ba:	60 1b       	sub	r22, r16
    d3bc:	71 0b       	sbc	r23, r17
    d3be:	87 e1       	ldi	r24, 0x17	; 23
    d3c0:	0e 94 02 15 	call	0x2a04	; 0x2a04 <analogWrite>
    d3c4:	1e 83       	std	Y+6, r17	; 0x06
    d3c6:	0d 83       	std	Y+5, r16	; 0x05
    d3c8:	df 91       	pop	r29
    d3ca:	cf 91       	pop	r28
    d3cc:	1f 91       	pop	r17
    d3ce:	0f 91       	pop	r16
    d3d0:	08 95       	ret

0000d3d2 <_ZN9HalRgbLed12setBlueValueEi>:
    d3d2:	0f 93       	push	r16
    d3d4:	1f 93       	push	r17
    d3d6:	cf 93       	push	r28
    d3d8:	df 93       	push	r29
    d3da:	ec 01       	movw	r28, r24
    d3dc:	8b 01       	movw	r16, r22
    d3de:	8a 81       	ldd	r24, Y+2	; 0x02
    d3e0:	88 23       	and	r24, r24
    d3e2:	49 f0       	breq	.+18     	; 0xd3f6 <_ZN9HalRgbLed12setBlueValueEi+0x24>
    d3e4:	6f ef       	ldi	r22, 0xFF	; 255
    d3e6:	70 e0       	ldi	r23, 0x00	; 0
    d3e8:	60 1b       	sub	r22, r16
    d3ea:	71 0b       	sbc	r23, r17
    d3ec:	85 e1       	ldi	r24, 0x15	; 21
    d3ee:	0e 94 02 15 	call	0x2a04	; 0x2a04 <analogWrite>
    d3f2:	18 87       	std	Y+8, r17	; 0x08
    d3f4:	0f 83       	std	Y+7, r16	; 0x07
    d3f6:	df 91       	pop	r29
    d3f8:	cf 91       	pop	r28
    d3fa:	1f 91       	pop	r17
    d3fc:	0f 91       	pop	r16
    d3fe:	08 95       	ret

0000d400 <_ZN9HalRgbLed11getRedValueEv>:
    d400:	fc 01       	movw	r30, r24
    d402:	83 81       	ldd	r24, Z+3	; 0x03
    d404:	94 81       	ldd	r25, Z+4	; 0x04
    d406:	08 95       	ret

0000d408 <_ZN9HalRgbLed13getGreenValueEv>:
    d408:	fc 01       	movw	r30, r24
    d40a:	85 81       	ldd	r24, Z+5	; 0x05
    d40c:	96 81       	ldd	r25, Z+6	; 0x06
    d40e:	08 95       	ret

0000d410 <_ZN9HalRgbLed12getBlueValueEv>:
    d410:	fc 01       	movw	r30, r24
    d412:	87 81       	ldd	r24, Z+7	; 0x07
    d414:	90 85       	ldd	r25, Z+8	; 0x08
    d416:	08 95       	ret

0000d418 <_ZN9HalRgbLed9saveTorchEsss>:
    d418:	cf 92       	push	r12
    d41a:	df 92       	push	r13
    d41c:	ff 92       	push	r15
    d41e:	0f 93       	push	r16
    d420:	1f 93       	push	r17
    d422:	cf 93       	push	r28
    d424:	df 93       	push	r29
    d426:	00 d0       	rcall	.+0      	; 0xd428 <_ZN9HalRgbLed9saveTorchEsss+0x10>
    d428:	cd b7       	in	r28, 0x3d	; 61
    d42a:	de b7       	in	r29, 0x3e	; 62
    d42c:	6c 01       	movw	r12, r24
    d42e:	16 2f       	mov	r17, r22
    d430:	f4 2e       	mov	r15, r20
    d432:	02 2f       	mov	r16, r18
    d434:	8f eb       	ldi	r24, 0xBF	; 191
    d436:	9f e1       	ldi	r25, 0x1F	; 31
    d438:	3b 83       	std	Y+3, r19	; 0x03
    d43a:	5a 83       	std	Y+2, r21	; 0x02
    d43c:	79 83       	std	Y+1, r23	; 0x01
    d43e:	0e 94 bf b8 	call	0x1717e	; 0x1717e <__eeupd_byte_EEPROM_SUFFIX>
    d442:	6f 2d       	mov	r22, r15
    d444:	80 ec       	ldi	r24, 0xC0	; 192
    d446:	9f e1       	ldi	r25, 0x1F	; 31
    d448:	0e 94 bf b8 	call	0x1717e	; 0x1717e <__eeupd_byte_EEPROM_SUFFIX>
    d44c:	60 2f       	mov	r22, r16
    d44e:	81 ec       	ldi	r24, 0xC1	; 193
    d450:	9f e1       	ldi	r25, 0x1F	; 31
    d452:	0e 94 bf b8 	call	0x1717e	; 0x1717e <__eeupd_byte_EEPROM_SUFFIX>
    d456:	f6 01       	movw	r30, r12
    d458:	17 87       	std	Z+15, r17	; 0x0f
    d45a:	79 81       	ldd	r23, Y+1	; 0x01
    d45c:	70 8b       	std	Z+16, r23	; 0x10
    d45e:	f1 8a       	std	Z+17, r15	; 0x11
    d460:	5a 81       	ldd	r21, Y+2	; 0x02
    d462:	52 8b       	std	Z+18, r21	; 0x12
    d464:	03 8b       	std	Z+19, r16	; 0x13
    d466:	3b 81       	ldd	r19, Y+3	; 0x03
    d468:	34 8b       	std	Z+20, r19	; 0x14
    d46a:	0f 90       	pop	r0
    d46c:	0f 90       	pop	r0
    d46e:	0f 90       	pop	r0
    d470:	df 91       	pop	r29
    d472:	cf 91       	pop	r28
    d474:	1f 91       	pop	r17
    d476:	0f 91       	pop	r16
    d478:	ff 90       	pop	r15
    d47a:	df 90       	pop	r13
    d47c:	cf 90       	pop	r12
    d47e:	08 95       	ret

0000d480 <_ZN9HalRgbLed16getRedTorchValueEv>:
    d480:	fc 01       	movw	r30, r24
    d482:	87 85       	ldd	r24, Z+15	; 0x0f
    d484:	90 89       	ldd	r25, Z+16	; 0x10
    d486:	08 95       	ret

0000d488 <_ZN9HalRgbLed18getGreenTorchValueEv>:
    d488:	fc 01       	movw	r30, r24
    d48a:	81 89       	ldd	r24, Z+17	; 0x11
    d48c:	92 89       	ldd	r25, Z+18	; 0x12
    d48e:	08 95       	ret

0000d490 <_ZN9HalRgbLed17getBlueTorchValueEv>:
    d490:	fc 01       	movw	r30, r24
    d492:	83 89       	ldd	r24, Z+19	; 0x13
    d494:	94 89       	ldd	r25, Z+20	; 0x14
    d496:	08 95       	ret

0000d498 <_ZN9HalRgbLed12triggerEventEv>:
    d498:	cf 93       	push	r28
    d49a:	df 93       	push	r29
    d49c:	ec 01       	movw	r28, r24
    d49e:	80 91 78 35 	lds	r24, 0x3578
    d4a2:	90 91 79 35 	lds	r25, 0x3579
    d4a6:	89 2b       	or	r24, r25
    d4a8:	f1 f1       	breq	.+124    	; 0xd526 <_ZN9HalRgbLed12triggerEventEv+0x8e>
    d4aa:	80 91 eb 35 	lds	r24, 0x35EB
    d4ae:	88 23       	and	r24, r24
    d4b0:	81 f1       	breq	.+96     	; 0xd512 <_ZN9HalRgbLed12triggerEventEv+0x7a>
    d4b2:	67 e3       	ldi	r22, 0x37	; 55
    d4b4:	79 e0       	ldi	r23, 0x09	; 9
    d4b6:	84 e0       	ldi	r24, 0x04	; 4
    d4b8:	94 e2       	ldi	r25, 0x24	; 36
    d4ba:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
    d4be:	6b 81       	ldd	r22, Y+3	; 0x03
    d4c0:	7c 81       	ldd	r23, Y+4	; 0x04
    d4c2:	4a e0       	ldi	r20, 0x0A	; 10
    d4c4:	50 e0       	ldi	r21, 0x00	; 0
    d4c6:	84 e0       	ldi	r24, 0x04	; 4
    d4c8:	94 e2       	ldi	r25, 0x24	; 36
    d4ca:	0e 94 4d 10 	call	0x209a	; 0x209a <_ZN5Print5printEii>
    d4ce:	65 e3       	ldi	r22, 0x35	; 53
    d4d0:	79 e0       	ldi	r23, 0x09	; 9
    d4d2:	84 e0       	ldi	r24, 0x04	; 4
    d4d4:	94 e2       	ldi	r25, 0x24	; 36
    d4d6:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
    d4da:	6d 81       	ldd	r22, Y+5	; 0x05
    d4dc:	7e 81       	ldd	r23, Y+6	; 0x06
    d4de:	4a e0       	ldi	r20, 0x0A	; 10
    d4e0:	50 e0       	ldi	r21, 0x00	; 0
    d4e2:	84 e0       	ldi	r24, 0x04	; 4
    d4e4:	94 e2       	ldi	r25, 0x24	; 36
    d4e6:	0e 94 4d 10 	call	0x209a	; 0x209a <_ZN5Print5printEii>
    d4ea:	63 e3       	ldi	r22, 0x33	; 51
    d4ec:	79 e0       	ldi	r23, 0x09	; 9
    d4ee:	84 e0       	ldi	r24, 0x04	; 4
    d4f0:	94 e2       	ldi	r25, 0x24	; 36
    d4f2:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
    d4f6:	6f 81       	ldd	r22, Y+7	; 0x07
    d4f8:	78 85       	ldd	r23, Y+8	; 0x08
    d4fa:	4a e0       	ldi	r20, 0x0A	; 10
    d4fc:	50 e0       	ldi	r21, 0x00	; 0
    d4fe:	84 e0       	ldi	r24, 0x04	; 4
    d500:	94 e2       	ldi	r25, 0x24	; 36
    d502:	0e 94 4d 10 	call	0x209a	; 0x209a <_ZN5Print5printEii>
    d506:	61 e3       	ldi	r22, 0x31	; 49
    d508:	79 e0       	ldi	r23, 0x09	; 9
    d50a:	84 e0       	ldi	r24, 0x04	; 4
    d50c:	94 e2       	ldi	r25, 0x24	; 36
    d50e:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <_ZN5Print7printlnEPK19__FlashStringHelper>
    d512:	e0 91 78 35 	lds	r30, 0x3578
    d516:	f0 91 79 35 	lds	r31, 0x3579
    d51a:	4f 81       	ldd	r20, Y+7	; 0x07
    d51c:	6d 81       	ldd	r22, Y+5	; 0x05
    d51e:	8b 81       	ldd	r24, Y+3	; 0x03
    d520:	df 91       	pop	r29
    d522:	cf 91       	pop	r28
    d524:	19 94       	eijmp
    d526:	df 91       	pop	r29
    d528:	cf 91       	pop	r28
    d52a:	08 95       	ret

0000d52c <_ZN9HalRgbLed8setColorEsss>:
    d52c:	cf 92       	push	r12
    d52e:	df 92       	push	r13
    d530:	ef 92       	push	r14
    d532:	ff 92       	push	r15
    d534:	0f 93       	push	r16
    d536:	1f 93       	push	r17
    d538:	cf 93       	push	r28
    d53a:	df 93       	push	r29
    d53c:	1f 92       	push	r1
    d53e:	cd b7       	in	r28, 0x3d	; 61
    d540:	de b7       	in	r29, 0x3e	; 62
    d542:	6c 01       	movw	r12, r24
    d544:	8a 01       	movw	r16, r20
    d546:	79 01       	movw	r14, r18
    d548:	fc 01       	movw	r30, r24
    d54a:	82 81       	ldd	r24, Z+2	; 0x02
    d54c:	88 23       	and	r24, r24
    d54e:	59 f1       	breq	.+86     	; 0xd5a6 <_ZN9HalRgbLed8setColorEsss+0x7a>
    d550:	83 81       	ldd	r24, Z+3	; 0x03
    d552:	94 81       	ldd	r25, Z+4	; 0x04
    d554:	68 17       	cp	r22, r24
    d556:	79 07       	cpc	r23, r25
    d558:	69 f4       	brne	.+26     	; 0xd574 <_ZN9HalRgbLed8setColorEsss+0x48>
    d55a:	85 81       	ldd	r24, Z+5	; 0x05
    d55c:	96 81       	ldd	r25, Z+6	; 0x06
    d55e:	21 e0       	ldi	r18, 0x01	; 1
    d560:	48 17       	cp	r20, r24
    d562:	59 07       	cpc	r21, r25
    d564:	41 f4       	brne	.+16     	; 0xd576 <_ZN9HalRgbLed8setColorEsss+0x4a>
    d566:	87 81       	ldd	r24, Z+7	; 0x07
    d568:	90 85       	ldd	r25, Z+8	; 0x08
    d56a:	e8 16       	cp	r14, r24
    d56c:	f9 06       	cpc	r15, r25
    d56e:	19 f4       	brne	.+6      	; 0xd576 <_ZN9HalRgbLed8setColorEsss+0x4a>
    d570:	20 e0       	ldi	r18, 0x00	; 0
    d572:	01 c0       	rjmp	.+2      	; 0xd576 <_ZN9HalRgbLed8setColorEsss+0x4a>
    d574:	21 e0       	ldi	r18, 0x01	; 1
    d576:	c6 01       	movw	r24, r12
    d578:	29 83       	std	Y+1, r18	; 0x01
    d57a:	fd de       	rcall	.-518    	; 0xd376 <_ZN9HalRgbLed11setRedValueEi>
    d57c:	b8 01       	movw	r22, r16
    d57e:	c6 01       	movw	r24, r12
    d580:	11 df       	rcall	.-478    	; 0xd3a4 <_ZN9HalRgbLed13setGreenValueEi>
    d582:	b7 01       	movw	r22, r14
    d584:	c6 01       	movw	r24, r12
    d586:	25 df       	rcall	.-438    	; 0xd3d2 <_ZN9HalRgbLed12setBlueValueEi>
    d588:	29 81       	ldd	r18, Y+1	; 0x01
    d58a:	22 23       	and	r18, r18
    d58c:	61 f0       	breq	.+24     	; 0xd5a6 <_ZN9HalRgbLed8setColorEsss+0x7a>
    d58e:	88 e7       	ldi	r24, 0x78	; 120
    d590:	95 e3       	ldi	r25, 0x35	; 53
    d592:	0f 90       	pop	r0
    d594:	df 91       	pop	r29
    d596:	cf 91       	pop	r28
    d598:	1f 91       	pop	r17
    d59a:	0f 91       	pop	r16
    d59c:	ff 90       	pop	r15
    d59e:	ef 90       	pop	r14
    d5a0:	df 90       	pop	r13
    d5a2:	cf 90       	pop	r12
    d5a4:	79 cf       	rjmp	.-270    	; 0xd498 <_ZN9HalRgbLed12triggerEventEv>
    d5a6:	0f 90       	pop	r0
    d5a8:	df 91       	pop	r29
    d5aa:	cf 91       	pop	r28
    d5ac:	1f 91       	pop	r17
    d5ae:	0f 91       	pop	r16
    d5b0:	ff 90       	pop	r15
    d5b2:	ef 90       	pop	r14
    d5b4:	df 90       	pop	r13
    d5b6:	cf 90       	pop	r12
    d5b8:	08 95       	ret

0000d5ba <_ZN9HalRgbLed7turnOffEv>:
    d5ba:	cf 93       	push	r28
    d5bc:	df 93       	push	r29
    d5be:	ec 01       	movw	r28, r24
    d5c0:	20 e0       	ldi	r18, 0x00	; 0
    d5c2:	30 e0       	ldi	r19, 0x00	; 0
    d5c4:	40 e0       	ldi	r20, 0x00	; 0
    d5c6:	50 e0       	ldi	r21, 0x00	; 0
    d5c8:	60 e0       	ldi	r22, 0x00	; 0
    d5ca:	70 e0       	ldi	r23, 0x00	; 0
    d5cc:	af df       	rcall	.-162    	; 0xd52c <_ZN9HalRgbLed8setColorEsss>
    d5ce:	1f 8e       	std	Y+31, r1	; 0x1f
    d5d0:	ce 01       	movw	r24, r28
    d5d2:	45 96       	adiw	r24, 0x15	; 21
    d5d4:	df 91       	pop	r29
    d5d6:	cf 91       	pop	r28
    d5d8:	0c 94 d5 59 	jmp	0xb3aa	; 0xb3aa <SYS_TimerStop>

0000d5dc <_ZN9HalRgbLedC1Ev>:
    d5dc:	cf 93       	push	r28
    d5de:	df 93       	push	r29
    d5e0:	ec 01       	movw	r28, r24
    d5e2:	eb df       	rcall	.-42     	; 0xd5ba <_ZN9HalRgbLed7turnOffEv>
    d5e4:	81 e0       	ldi	r24, 0x01	; 1
    d5e6:	8a 83       	std	Y+2, r24	; 0x02
    d5e8:	18 86       	std	Y+8, r1	; 0x08
    d5ea:	1f 82       	std	Y+7, r1	; 0x07
    d5ec:	1e 82       	std	Y+6, r1	; 0x06
    d5ee:	1d 82       	std	Y+5, r1	; 0x05
    d5f0:	1c 82       	std	Y+4, r1	; 0x04
    d5f2:	1b 82       	std	Y+3, r1	; 0x03
    d5f4:	8f eb       	ldi	r24, 0xBF	; 191
    d5f6:	9f e1       	ldi	r25, 0x1F	; 31
    d5f8:	0e 94 ad b8 	call	0x1715a	; 0x1715a <__eerd_byte_EEPROM_SUFFIX>
    d5fc:	90 e0       	ldi	r25, 0x00	; 0
    d5fe:	98 8b       	std	Y+16, r25	; 0x10
    d600:	8f 87       	std	Y+15, r24	; 0x0f
    d602:	80 ec       	ldi	r24, 0xC0	; 192
    d604:	9f e1       	ldi	r25, 0x1F	; 31
    d606:	0e 94 ad b8 	call	0x1715a	; 0x1715a <__eerd_byte_EEPROM_SUFFIX>
    d60a:	90 e0       	ldi	r25, 0x00	; 0
    d60c:	9a 8b       	std	Y+18, r25	; 0x12
    d60e:	89 8b       	std	Y+17, r24	; 0x11
    d610:	81 ec       	ldi	r24, 0xC1	; 193
    d612:	9f e1       	ldi	r25, 0x1F	; 31
    d614:	0e 94 ad b8 	call	0x1715a	; 0x1715a <__eerd_byte_EEPROM_SUFFIX>
    d618:	90 e0       	ldi	r25, 0x00	; 0
    d61a:	9c 8b       	std	Y+20, r25	; 0x14
    d61c:	8b 8b       	std	Y+19, r24	; 0x13
    d61e:	44 ef       	ldi	r20, 0xF4	; 244
    d620:	51 e0       	ldi	r21, 0x01	; 1
    d622:	60 e0       	ldi	r22, 0x00	; 0
    d624:	70 e0       	ldi	r23, 0x00	; 0
    d626:	4b 8f       	std	Y+27, r20	; 0x1b
    d628:	5c 8f       	std	Y+28, r21	; 0x1c
    d62a:	6d 8f       	std	Y+29, r22	; 0x1d
    d62c:	7e 8f       	std	Y+30, r23	; 0x1e
    d62e:	86 e3       	ldi	r24, 0x36	; 54
    d630:	9c e6       	ldi	r25, 0x6C	; 108
    d632:	99 a3       	std	Y+33, r25	; 0x21
    d634:	88 a3       	std	Y+32, r24	; 0x20
    d636:	19 82       	std	Y+1, r1	; 0x01
    d638:	18 82       	st	Y, r1
    d63a:	df 91       	pop	r29
    d63c:	cf 91       	pop	r28
    d63e:	08 95       	ret

0000d640 <_ZN9HalRgbLed3redEv>:
bool HalRgbLed::isOff() {
  return (getRedValue() == 0 && getGreenValue() == 0 && getBlueValue() == 0);
}

void HalRgbLed::red() {
  setColor(255, 0, 0);
    d640:	20 e0       	ldi	r18, 0x00	; 0
    d642:	30 e0       	ldi	r19, 0x00	; 0
    d644:	40 e0       	ldi	r20, 0x00	; 0
    d646:	50 e0       	ldi	r21, 0x00	; 0
    d648:	6f ef       	ldi	r22, 0xFF	; 255
    d64a:	70 e0       	ldi	r23, 0x00	; 0
    d64c:	6f cf       	rjmp	.-290    	; 0xd52c <_ZN9HalRgbLed8setColorEsss>

0000d64e <_ZN9HalRgbLed5greenEv>:
}

void HalRgbLed::green() {
  setColor(0, 255, 0);
    d64e:	20 e0       	ldi	r18, 0x00	; 0
    d650:	30 e0       	ldi	r19, 0x00	; 0
    d652:	4f ef       	ldi	r20, 0xFF	; 255
    d654:	50 e0       	ldi	r21, 0x00	; 0
    d656:	60 e0       	ldi	r22, 0x00	; 0
    d658:	70 e0       	ldi	r23, 0x00	; 0
    d65a:	68 cf       	rjmp	.-304    	; 0xd52c <_ZN9HalRgbLed8setColorEsss>

0000d65c <_ZN9HalRgbLed4blueEv>:
}

void HalRgbLed::blue() {
  setColor(0, 0, 255);
    d65c:	2f ef       	ldi	r18, 0xFF	; 255
    d65e:	30 e0       	ldi	r19, 0x00	; 0
    d660:	40 e0       	ldi	r20, 0x00	; 0
    d662:	50 e0       	ldi	r21, 0x00	; 0
    d664:	60 e0       	ldi	r22, 0x00	; 0
    d666:	70 e0       	ldi	r23, 0x00	; 0
    d668:	61 cf       	rjmp	.-318    	; 0xd52c <_ZN9HalRgbLed8setColorEsss>

0000d66a <_ZN9HalRgbLed4cyanEv>:
}

void HalRgbLed::cyan() {
  setColor(0, 255, 255);
    d66a:	2f ef       	ldi	r18, 0xFF	; 255
    d66c:	30 e0       	ldi	r19, 0x00	; 0
    d66e:	4f ef       	ldi	r20, 0xFF	; 255
    d670:	50 e0       	ldi	r21, 0x00	; 0
    d672:	60 e0       	ldi	r22, 0x00	; 0
    d674:	70 e0       	ldi	r23, 0x00	; 0
    d676:	5a cf       	rjmp	.-332    	; 0xd52c <_ZN9HalRgbLed8setColorEsss>

0000d678 <_ZN9HalRgbLed6purpleEv>:
}

void HalRgbLed::purple() {
  setColor(50, 0, 255);
    d678:	2f ef       	ldi	r18, 0xFF	; 255
    d67a:	30 e0       	ldi	r19, 0x00	; 0
    d67c:	40 e0       	ldi	r20, 0x00	; 0
    d67e:	50 e0       	ldi	r21, 0x00	; 0
    d680:	62 e3       	ldi	r22, 0x32	; 50
    d682:	70 e0       	ldi	r23, 0x00	; 0
    d684:	53 cf       	rjmp	.-346    	; 0xd52c <_ZN9HalRgbLed8setColorEsss>

0000d686 <_ZN9HalRgbLed7magentaEv>:
}

void HalRgbLed::magenta() {
  setColor(255, 0, 255);
    d686:	2f ef       	ldi	r18, 0xFF	; 255
    d688:	30 e0       	ldi	r19, 0x00	; 0
    d68a:	40 e0       	ldi	r20, 0x00	; 0
    d68c:	50 e0       	ldi	r21, 0x00	; 0
    d68e:	6f ef       	ldi	r22, 0xFF	; 255
    d690:	70 e0       	ldi	r23, 0x00	; 0
    d692:	4c cf       	rjmp	.-360    	; 0xd52c <_ZN9HalRgbLed8setColorEsss>

0000d694 <_ZN9HalRgbLed6yellowEv>:
}

void HalRgbLed::yellow() {
  setColor(255, 255, 0);
    d694:	20 e0       	ldi	r18, 0x00	; 0
    d696:	30 e0       	ldi	r19, 0x00	; 0
    d698:	4f ef       	ldi	r20, 0xFF	; 255
    d69a:	50 e0       	ldi	r21, 0x00	; 0
    d69c:	6f ef       	ldi	r22, 0xFF	; 255
    d69e:	70 e0       	ldi	r23, 0x00	; 0
    d6a0:	45 cf       	rjmp	.-374    	; 0xd52c <_ZN9HalRgbLed8setColorEsss>

0000d6a2 <_ZN9HalRgbLed6orangeEv>:
}

void HalRgbLed::orange() {
  setColor(255, 127, 0);
    d6a2:	20 e0       	ldi	r18, 0x00	; 0
    d6a4:	30 e0       	ldi	r19, 0x00	; 0
    d6a6:	4f e7       	ldi	r20, 0x7F	; 127
    d6a8:	50 e0       	ldi	r21, 0x00	; 0
    d6aa:	6f ef       	ldi	r22, 0xFF	; 255
    d6ac:	70 e0       	ldi	r23, 0x00	; 0
    d6ae:	3e cf       	rjmp	.-388    	; 0xd52c <_ZN9HalRgbLed8setColorEsss>

0000d6b0 <_ZN9HalRgbLed5whiteEv>:
}

void HalRgbLed::white() {
  setColor(255, 255, 255);
    d6b0:	2f ef       	ldi	r18, 0xFF	; 255
    d6b2:	30 e0       	ldi	r19, 0x00	; 0
    d6b4:	4f ef       	ldi	r20, 0xFF	; 255
    d6b6:	50 e0       	ldi	r21, 0x00	; 0
    d6b8:	6f ef       	ldi	r22, 0xFF	; 255
    d6ba:	70 e0       	ldi	r23, 0x00	; 0
    d6bc:	37 cf       	rjmp	.-402    	; 0xd52c <_ZN9HalRgbLed8setColorEsss>

0000d6be <_ZN9HalRgbLed10blinkColorEsssjb>:

void HalRgbLed::blinkTorch(unsigned int ms, bool continuous) {
  blinkColor(torchRedValue, torchGreenValue, torchBlueValue, ms, continuous);
}

void HalRgbLed::blinkColor(short red, short green, short blue, unsigned int ms, bool continuous) {
    d6be:	ef 92       	push	r14
    d6c0:	0f 93       	push	r16
    d6c2:	1f 93       	push	r17
    d6c4:	cf 93       	push	r28
    d6c6:	df 93       	push	r29
    d6c8:	ec 01       	movw	r28, r24
    d6ca:	c9 01       	movw	r24, r18
  if (!isEnabled()) {
    d6cc:	2a 81       	ldd	r18, Y+2	; 0x02
    d6ce:	22 23       	and	r18, r18
    d6d0:	f1 f0       	breq	.+60     	; 0xd70e <_ZN9HalRgbLed10blinkColorEsssjb+0x50>
    return;
  }
  if (continuous) {
    d6d2:	ee 20       	and	r14, r14
    d6d4:	19 f0       	breq	.+6      	; 0xd6dc <_ZN9HalRgbLed10blinkColorEsssjb+0x1e>
    blinkTimer.mode = SYS_TIMER_PERIODIC_MODE;
    d6d6:	21 e0       	ldi	r18, 0x01	; 1
    d6d8:	2f 8f       	std	Y+31, r18	; 0x1f
    d6da:	01 c0       	rjmp	.+2      	; 0xd6de <_ZN9HalRgbLed10blinkColorEsssjb+0x20>
  } else {
    blinkTimer.mode = SYS_TIMER_INTERVAL_MODE;
    d6dc:	1f 8e       	std	Y+31, r1	; 0x1f
  }
  blinkTimer.interval = ms;
    d6de:	20 e0       	ldi	r18, 0x00	; 0
    d6e0:	30 e0       	ldi	r19, 0x00	; 0
    d6e2:	0b 8f       	std	Y+27, r16	; 0x1b
    d6e4:	1c 8f       	std	Y+28, r17	; 0x1c
    d6e6:	2d 8f       	std	Y+29, r18	; 0x1d
    d6e8:	3e 8f       	std	Y+30, r19	; 0x1e
int HalRgbLed::getBlueValue() {
  return blueValue;
}

void HalRgbLed::setBlinkValues(short red, short green, short blue) {
  blinkRedValue = red;
    d6ea:	7a 87       	std	Y+10, r23	; 0x0a
    d6ec:	69 87       	std	Y+9, r22	; 0x09
  blinkGreenValue = green;
    d6ee:	5c 87       	std	Y+12, r21	; 0x0c
    d6f0:	4b 87       	std	Y+11, r20	; 0x0b
  blinkBlueValue = blue;
    d6f2:	9e 87       	std	Y+14, r25	; 0x0e
    d6f4:	8d 87       	std	Y+13, r24	; 0x0d
  } else {
    blinkTimer.mode = SYS_TIMER_INTERVAL_MODE;
  }
  blinkTimer.interval = ms;
  setBlinkValues(red, green, blue);
  setColor(red, green, blue);
    d6f6:	9c 01       	movw	r18, r24
    d6f8:	ce 01       	movw	r24, r28
    d6fa:	18 df       	rcall	.-464    	; 0xd52c <_ZN9HalRgbLed8setColorEsss>
  SYS_TimerStart(&blinkTimer);
    d6fc:	ce 01       	movw	r24, r28
    d6fe:	45 96       	adiw	r24, 0x15	; 21
}
    d700:	df 91       	pop	r29
    d702:	cf 91       	pop	r28
    d704:	1f 91       	pop	r17
    d706:	0f 91       	pop	r16
    d708:	ef 90       	pop	r14
    blinkTimer.mode = SYS_TIMER_INTERVAL_MODE;
  }
  blinkTimer.interval = ms;
  setBlinkValues(red, green, blue);
  setColor(red, green, blue);
  SYS_TimerStart(&blinkTimer);
    d70a:	0c 94 2f 5a 	jmp	0xb45e	; 0xb45e <SYS_TimerStart>
}
    d70e:	df 91       	pop	r29
    d710:	cf 91       	pop	r28
    d712:	1f 91       	pop	r17
    d714:	0f 91       	pop	r16
    d716:	ef 90       	pop	r14
    d718:	08 95       	ret

0000d71a <_ZN9HalRgbLed8blinkRedEjb>:

void HalRgbLed::white() {
  setColor(255, 255, 255);
}

void HalRgbLed::blinkRed(unsigned int ms, bool continuous) {
    d71a:	ef 92       	push	r14
    d71c:	0f 93       	push	r16
    d71e:	1f 93       	push	r17
  blinkColor(255, 0, 0, ms, continuous);
    d720:	e4 2e       	mov	r14, r20
    d722:	8b 01       	movw	r16, r22
    d724:	20 e0       	ldi	r18, 0x00	; 0
    d726:	30 e0       	ldi	r19, 0x00	; 0
    d728:	40 e0       	ldi	r20, 0x00	; 0
    d72a:	50 e0       	ldi	r21, 0x00	; 0
    d72c:	6f ef       	ldi	r22, 0xFF	; 255
    d72e:	70 e0       	ldi	r23, 0x00	; 0
    d730:	c6 df       	rcall	.-116    	; 0xd6be <_ZN9HalRgbLed10blinkColorEsssjb>
}
    d732:	1f 91       	pop	r17
    d734:	0f 91       	pop	r16
    d736:	ef 90       	pop	r14
    d738:	08 95       	ret

0000d73a <_ZN9HalRgbLed10blinkGreenEjb>:

void HalRgbLed::blinkGreen(unsigned int ms, bool continuous) {
    d73a:	ef 92       	push	r14
    d73c:	0f 93       	push	r16
    d73e:	1f 93       	push	r17
  blinkColor(0, 255, 0, ms, continuous);
    d740:	e4 2e       	mov	r14, r20
    d742:	8b 01       	movw	r16, r22
    d744:	20 e0       	ldi	r18, 0x00	; 0
    d746:	30 e0       	ldi	r19, 0x00	; 0
    d748:	4f ef       	ldi	r20, 0xFF	; 255
    d74a:	50 e0       	ldi	r21, 0x00	; 0
    d74c:	60 e0       	ldi	r22, 0x00	; 0
    d74e:	70 e0       	ldi	r23, 0x00	; 0
    d750:	b6 df       	rcall	.-148    	; 0xd6be <_ZN9HalRgbLed10blinkColorEsssjb>
}
    d752:	1f 91       	pop	r17
    d754:	0f 91       	pop	r16
    d756:	ef 90       	pop	r14
    d758:	08 95       	ret

0000d75a <_ZN9HalRgbLed9blinkBlueEjb>:

void HalRgbLed::blinkBlue(unsigned int ms, bool continuous) {
    d75a:	ef 92       	push	r14
    d75c:	0f 93       	push	r16
    d75e:	1f 93       	push	r17
  blinkColor(0, 0, 255, ms, continuous);
    d760:	e4 2e       	mov	r14, r20
    d762:	8b 01       	movw	r16, r22
    d764:	2f ef       	ldi	r18, 0xFF	; 255
    d766:	30 e0       	ldi	r19, 0x00	; 0
    d768:	40 e0       	ldi	r20, 0x00	; 0
    d76a:	50 e0       	ldi	r21, 0x00	; 0
    d76c:	60 e0       	ldi	r22, 0x00	; 0
    d76e:	70 e0       	ldi	r23, 0x00	; 0
    d770:	a6 df       	rcall	.-180    	; 0xd6be <_ZN9HalRgbLed10blinkColorEsssjb>
}
    d772:	1f 91       	pop	r17
    d774:	0f 91       	pop	r16
    d776:	ef 90       	pop	r14
    d778:	08 95       	ret

0000d77a <_ZN9HalRgbLed9blinkCyanEjb>:

void HalRgbLed::blinkCyan(unsigned int ms, bool continuous) {
    d77a:	ef 92       	push	r14
    d77c:	0f 93       	push	r16
    d77e:	1f 93       	push	r17
  blinkColor(0, 255, 255, ms, continuous);
    d780:	e4 2e       	mov	r14, r20
    d782:	8b 01       	movw	r16, r22
    d784:	2f ef       	ldi	r18, 0xFF	; 255
    d786:	30 e0       	ldi	r19, 0x00	; 0
    d788:	4f ef       	ldi	r20, 0xFF	; 255
    d78a:	50 e0       	ldi	r21, 0x00	; 0
    d78c:	60 e0       	ldi	r22, 0x00	; 0
    d78e:	70 e0       	ldi	r23, 0x00	; 0
    d790:	96 df       	rcall	.-212    	; 0xd6be <_ZN9HalRgbLed10blinkColorEsssjb>
}
    d792:	1f 91       	pop	r17
    d794:	0f 91       	pop	r16
    d796:	ef 90       	pop	r14
    d798:	08 95       	ret

0000d79a <_ZN9HalRgbLed11blinkPurpleEjb>:

void HalRgbLed::blinkPurple(unsigned int ms, bool continuous) {
    d79a:	ef 92       	push	r14
    d79c:	0f 93       	push	r16
    d79e:	1f 93       	push	r17
  blinkColor(50, 0, 255, ms, continuous);
    d7a0:	e4 2e       	mov	r14, r20
    d7a2:	8b 01       	movw	r16, r22
    d7a4:	2f ef       	ldi	r18, 0xFF	; 255
    d7a6:	30 e0       	ldi	r19, 0x00	; 0
    d7a8:	40 e0       	ldi	r20, 0x00	; 0
    d7aa:	50 e0       	ldi	r21, 0x00	; 0
    d7ac:	62 e3       	ldi	r22, 0x32	; 50
    d7ae:	70 e0       	ldi	r23, 0x00	; 0
    d7b0:	86 df       	rcall	.-244    	; 0xd6be <_ZN9HalRgbLed10blinkColorEsssjb>
}
    d7b2:	1f 91       	pop	r17
    d7b4:	0f 91       	pop	r16
    d7b6:	ef 90       	pop	r14
    d7b8:	08 95       	ret

0000d7ba <_ZN9HalRgbLed12blinkMagentaEjb>:

void HalRgbLed::blinkMagenta(unsigned int ms, bool continuous) {
    d7ba:	ef 92       	push	r14
    d7bc:	0f 93       	push	r16
    d7be:	1f 93       	push	r17
  blinkColor(255, 0, 255, ms, continuous);
    d7c0:	e4 2e       	mov	r14, r20
    d7c2:	8b 01       	movw	r16, r22
    d7c4:	2f ef       	ldi	r18, 0xFF	; 255
    d7c6:	30 e0       	ldi	r19, 0x00	; 0
    d7c8:	40 e0       	ldi	r20, 0x00	; 0
    d7ca:	50 e0       	ldi	r21, 0x00	; 0
    d7cc:	6f ef       	ldi	r22, 0xFF	; 255
    d7ce:	70 e0       	ldi	r23, 0x00	; 0
    d7d0:	76 df       	rcall	.-276    	; 0xd6be <_ZN9HalRgbLed10blinkColorEsssjb>
}
    d7d2:	1f 91       	pop	r17
    d7d4:	0f 91       	pop	r16
    d7d6:	ef 90       	pop	r14
    d7d8:	08 95       	ret

0000d7da <_ZN9HalRgbLed11blinkYellowEjb>:

void HalRgbLed::blinkYellow(unsigned int ms, bool continuous) {
    d7da:	ef 92       	push	r14
    d7dc:	0f 93       	push	r16
    d7de:	1f 93       	push	r17
  blinkColor(255, 255, 0, ms, continuous);
    d7e0:	e4 2e       	mov	r14, r20
    d7e2:	8b 01       	movw	r16, r22
    d7e4:	20 e0       	ldi	r18, 0x00	; 0
    d7e6:	30 e0       	ldi	r19, 0x00	; 0
    d7e8:	4f ef       	ldi	r20, 0xFF	; 255
    d7ea:	50 e0       	ldi	r21, 0x00	; 0
    d7ec:	6f ef       	ldi	r22, 0xFF	; 255
    d7ee:	70 e0       	ldi	r23, 0x00	; 0
    d7f0:	66 df       	rcall	.-308    	; 0xd6be <_ZN9HalRgbLed10blinkColorEsssjb>
}
    d7f2:	1f 91       	pop	r17
    d7f4:	0f 91       	pop	r16
    d7f6:	ef 90       	pop	r14
    d7f8:	08 95       	ret

0000d7fa <_ZN9HalRgbLed11blinkOrangeEjb>:

void HalRgbLed::blinkOrange(unsigned int ms, bool continuous) {
    d7fa:	ef 92       	push	r14
    d7fc:	0f 93       	push	r16
    d7fe:	1f 93       	push	r17
  blinkColor(255, 127, 0, ms, continuous);
    d800:	e4 2e       	mov	r14, r20
    d802:	8b 01       	movw	r16, r22
    d804:	20 e0       	ldi	r18, 0x00	; 0
    d806:	30 e0       	ldi	r19, 0x00	; 0
    d808:	4f e7       	ldi	r20, 0x7F	; 127
    d80a:	50 e0       	ldi	r21, 0x00	; 0
    d80c:	6f ef       	ldi	r22, 0xFF	; 255
    d80e:	70 e0       	ldi	r23, 0x00	; 0
    d810:	56 df       	rcall	.-340    	; 0xd6be <_ZN9HalRgbLed10blinkColorEsssjb>
}
    d812:	1f 91       	pop	r17
    d814:	0f 91       	pop	r16
    d816:	ef 90       	pop	r14
    d818:	08 95       	ret

0000d81a <_ZN9HalRgbLed10blinkWhiteEjb>:

void HalRgbLed::blinkWhite(unsigned int ms, bool continuous) {
    d81a:	ef 92       	push	r14
    d81c:	0f 93       	push	r16
    d81e:	1f 93       	push	r17
  blinkColor(255, 255, 255, ms, continuous);
    d820:	e4 2e       	mov	r14, r20
    d822:	8b 01       	movw	r16, r22
    d824:	2f ef       	ldi	r18, 0xFF	; 255
    d826:	30 e0       	ldi	r19, 0x00	; 0
    d828:	4f ef       	ldi	r20, 0xFF	; 255
    d82a:	50 e0       	ldi	r21, 0x00	; 0
    d82c:	6f ef       	ldi	r22, 0xFF	; 255
    d82e:	70 e0       	ldi	r23, 0x00	; 0
    d830:	46 df       	rcall	.-372    	; 0xd6be <_ZN9HalRgbLed10blinkColorEsssjb>
}
    d832:	1f 91       	pop	r17
    d834:	0f 91       	pop	r16
    d836:	ef 90       	pop	r14
    d838:	08 95       	ret

0000d83a <_ZN9HalRgbLed10blinkTorchEjb>:

void HalRgbLed::blinkTorch(unsigned int ms, bool continuous) {
    d83a:	ef 92       	push	r14
    d83c:	0f 93       	push	r16
    d83e:	1f 93       	push	r17
    d840:	8b 01       	movw	r16, r22
    d842:	e4 2e       	mov	r14, r20
  blinkColor(torchRedValue, torchGreenValue, torchBlueValue, ms, continuous);
    d844:	fc 01       	movw	r30, r24
    d846:	23 89       	ldd	r18, Z+19	; 0x13
    d848:	34 89       	ldd	r19, Z+20	; 0x14
    d84a:	41 89       	ldd	r20, Z+17	; 0x11
    d84c:	52 89       	ldd	r21, Z+18	; 0x12
    d84e:	67 85       	ldd	r22, Z+15	; 0x0f
    d850:	70 89       	ldd	r23, Z+16	; 0x10
    d852:	35 df       	rcall	.-406    	; 0xd6be <_ZN9HalRgbLed10blinkColorEsssjb>
}
    d854:	1f 91       	pop	r17
    d856:	0f 91       	pop	r16
    d858:	ef 90       	pop	r14
    d85a:	08 95       	ret

0000d85c <_ZN9HalRgbLed18setLEDToBlinkValueEv>:
  blinkGreenValue = green;
  blinkBlueValue = blue;
}

void HalRgbLed::setLEDToBlinkValue() {
  setColor(blinkRedValue, blinkGreenValue, blinkBlueValue);
    d85c:	fc 01       	movw	r30, r24
    d85e:	25 85       	ldd	r18, Z+13	; 0x0d
    d860:	36 85       	ldd	r19, Z+14	; 0x0e
    d862:	43 85       	ldd	r20, Z+11	; 0x0b
    d864:	54 85       	ldd	r21, Z+12	; 0x0c
    d866:	61 85       	ldd	r22, Z+9	; 0x09
    d868:	72 85       	ldd	r23, Z+10	; 0x0a
    d86a:	60 ce       	rjmp	.-832    	; 0xd52c <_ZN9HalRgbLed8setColorEsss>

0000d86c <_ZL26halRgbLedBlinkTimerHandlerP11SYS_Timer_t>:
    RgbLed.ledEventHandler(redValue, greenValue, blueValue);
  }
}

static void halRgbLedBlinkTimerHandler(SYS_Timer_t *timer) {
  if (timer->mode == SYS_TIMER_PERIODIC_MODE) {
    d86c:	fc 01       	movw	r30, r24
    d86e:	82 85       	ldd	r24, Z+10	; 0x0a
    d870:	81 30       	cpi	r24, 0x01	; 1
    d872:	99 f4       	brne	.+38     	; 0xd89a <_ZL26halRgbLedBlinkTimerHandlerP11SYS_Timer_t+0x2e>
    if (RgbLed.getRedValue() || RgbLed.getGreenValue() || RgbLed.getBlueValue()) {
    d874:	80 91 7b 35 	lds	r24, 0x357B
    d878:	90 91 7c 35 	lds	r25, 0x357C
    d87c:	89 2b       	or	r24, r25
    d87e:	81 f4       	brne	.+32     	; 0xd8a0 <_ZL26halRgbLedBlinkTimerHandlerP11SYS_Timer_t+0x34>
    d880:	80 91 7d 35 	lds	r24, 0x357D
    d884:	90 91 7e 35 	lds	r25, 0x357E
    d888:	89 2b       	or	r24, r25
    d88a:	51 f4       	brne	.+20     	; 0xd8a0 <_ZL26halRgbLedBlinkTimerHandlerP11SYS_Timer_t+0x34>
    d88c:	80 91 7f 35 	lds	r24, 0x357F
    d890:	90 91 80 35 	lds	r25, 0x3580
    d894:	89 2b       	or	r24, r25
    d896:	21 f4       	brne	.+8      	; 0xd8a0 <_ZL26halRgbLedBlinkTimerHandlerP11SYS_Timer_t+0x34>
    d898:	0c c0       	rjmp	.+24     	; 0xd8b2 <_ZL26halRgbLedBlinkTimerHandlerP11SYS_Timer_t+0x46>
    } else {
      RgbLed.setLEDToBlinkValue();
    }

  } else {
    RgbLed.turnOff();
    d89a:	88 e7       	ldi	r24, 0x78	; 120
    d89c:	95 e3       	ldi	r25, 0x35	; 53
    d89e:	8d ce       	rjmp	.-742    	; 0xd5ba <_ZN9HalRgbLed7turnOffEv>
}

static void halRgbLedBlinkTimerHandler(SYS_Timer_t *timer) {
  if (timer->mode == SYS_TIMER_PERIODIC_MODE) {
    if (RgbLed.getRedValue() || RgbLed.getGreenValue() || RgbLed.getBlueValue()) {
      RgbLed.setColor(0, 0, 0);
    d8a0:	20 e0       	ldi	r18, 0x00	; 0
    d8a2:	30 e0       	ldi	r19, 0x00	; 0
    d8a4:	40 e0       	ldi	r20, 0x00	; 0
    d8a6:	50 e0       	ldi	r21, 0x00	; 0
    d8a8:	60 e0       	ldi	r22, 0x00	; 0
    d8aa:	70 e0       	ldi	r23, 0x00	; 0
    d8ac:	88 e7       	ldi	r24, 0x78	; 120
    d8ae:	95 e3       	ldi	r25, 0x35	; 53
    d8b0:	3d ce       	rjmp	.-902    	; 0xd52c <_ZN9HalRgbLed8setColorEsss>
    } else {
      RgbLed.setLEDToBlinkValue();
    d8b2:	88 e7       	ldi	r24, 0x78	; 120
    d8b4:	95 e3       	ldi	r25, 0x35	; 53
    d8b6:	d2 cf       	rjmp	.-92     	; 0xd85c <_ZN9HalRgbLed18setLEDToBlinkValueEv>

0000d8b8 <_ZN9HalRgbLed8setTorchEv>:
  torchGreenValue = green;
  torchBlueValue = blue;
}

void HalRgbLed::setTorch(void) {
  setColor(torchRedValue, torchGreenValue, torchBlueValue);
    d8b8:	fc 01       	movw	r30, r24
    d8ba:	23 89       	ldd	r18, Z+19	; 0x13
    d8bc:	34 89       	ldd	r19, Z+20	; 0x14
    d8be:	41 89       	ldd	r20, Z+17	; 0x11
    d8c0:	52 89       	ldd	r21, Z+18	; 0x12
    d8c2:	67 85       	ldd	r22, Z+15	; 0x0f
    d8c4:	70 89       	ldd	r23, Z+16	; 0x10
    d8c6:	32 ce       	rjmp	.-924    	; 0xd52c <_ZN9HalRgbLed8setColorEsss>

0000d8c8 <_GLOBAL__sub_I_RgbLed>:
    }

  } else {
    RgbLed.turnOff();
  }
}
    d8c8:	0f 93       	push	r16
    d8ca:	00 e0       	ldi	r16, 0x00	; 0
    d8cc:	20 e0       	ldi	r18, 0x00	; 0
    d8ce:	40 e0       	ldi	r20, 0x00	; 0
    d8d0:	60 e0       	ldi	r22, 0x00	; 0
    d8d2:	8a e9       	ldi	r24, 0x9A	; 154
    d8d4:	95 e3       	ldi	r25, 0x35	; 53
    d8d6:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <_ZN9IPAddressC1Ehhhh>
#include <avr/eeprom.h>
#include "lwm/sys/sysTimer.h"

static void halRgbLedBlinkTimerHandler(SYS_Timer_t *timer);

HalRgbLed RgbLed;
    d8da:	88 e7       	ldi	r24, 0x78	; 120
    d8dc:	95 e3       	ldi	r25, 0x35	; 53
    }

  } else {
    RgbLed.turnOff();
  }
}
    d8de:	0f 91       	pop	r16
#include <avr/eeprom.h>
#include "lwm/sys/sysTimer.h"

static void halRgbLedBlinkTimerHandler(SYS_Timer_t *timer);

HalRgbLed RgbLed;
    d8e0:	7d ce       	rjmp	.-774    	; 0xd5dc <_ZN9HalRgbLedC1Ev>

0000d8e2 <HAL_MeasureTemperature>:
#include <avr/sleep.h>
#include <util/delay.h>

/*****************************************************************************
*****************************************************************************/
int8_t HAL_MeasureTemperature(void) {
    d8e2:	0f 93       	push	r16
    d8e4:	1f 93       	push	r17
    d8e6:	cf 93       	push	r28
    d8e8:	df 93       	push	r29
  uint16_t val;

  uint8_t adcsrc = ADCSRC;
    d8ea:	87 e7       	ldi	r24, 0x77	; 119
    d8ec:	90 e0       	ldi	r25, 0x00	; 0
    d8ee:	fc 01       	movw	r30, r24
    d8f0:	30 81       	ld	r19, Z
  uint8_t adcsrb = ADCSRB;
    d8f2:	cb e7       	ldi	r28, 0x7B	; 123
    d8f4:	d0 e0       	ldi	r29, 0x00	; 0
    d8f6:	48 81       	ld	r20, Y
  uint8_t adcsra = ADCSRA;
    d8f8:	0a e7       	ldi	r16, 0x7A	; 122
    d8fa:	10 e0       	ldi	r17, 0x00	; 0
    d8fc:	f8 01       	movw	r30, r16
    d8fe:	50 81       	ld	r21, Z
  uint8_t admux = ADMUX;
    d900:	ac e7       	ldi	r26, 0x7C	; 124
    d902:	b0 e0       	ldi	r27, 0x00	; 0
    d904:	2c 91       	ld	r18, X

  ADCSRC = 10<<ADSUT0; // set start-up time
    d906:	6a e0       	ldi	r22, 0x0A	; 10
    d908:	fc 01       	movw	r30, r24
    d90a:	60 83       	st	Z, r22
  ADCSRB = 1<<MUX5; // set MUX5 first
    d90c:	88 e0       	ldi	r24, 0x08	; 8
    d90e:	88 83       	st	Y, r24
  ADMUX = (3<<REFS0) + (9<<MUX0); // store new ADMUX, 1.6V AREF // switch ADC on, set prescaler, start conversion
    d910:	89 ec       	ldi	r24, 0xC9	; 201
    d912:	8c 93       	st	X, r24
  ADCSRA = (1<<ADEN) + (1<<ADSC) + (4<<ADPS0);
    d914:	84 ec       	ldi	r24, 0xC4	; 196
    d916:	f8 01       	movw	r30, r16
    d918:	80 83       	st	Z, r24
  do
  {} while( (ADCSRA & (1<<ADSC))); // wait for conversion end ADCSRA = 0; // disable the ADC
    d91a:	80 81       	ld	r24, Z
    d91c:	86 fd       	sbrc	r24, 6
    d91e:	fd cf       	rjmp	.-6      	; 0xd91a <HAL_MeasureTemperature+0x38>

  val = ADC;
    d920:	60 91 78 00 	lds	r22, 0x0078
    d924:	70 91 79 00 	lds	r23, 0x0079

  ADCSRA = adcsra;
    d928:	50 93 7a 00 	sts	0x007A, r21
  ADCSRB = adcsrb;
    d92c:	40 93 7b 00 	sts	0x007B, r20
  ADCSRC = adcsrc;
    d930:	30 93 77 00 	sts	0x0077, r19
  ADMUX = admux;
    d934:	20 93 7c 00 	sts	0x007C, r18

  return ((int)((1.13 * val - 272.8)));
    d938:	80 e0       	ldi	r24, 0x00	; 0
    d93a:	90 e0       	ldi	r25, 0x00	; 0
    d93c:	0e 94 11 af 	call	0x15e22	; 0x15e22 <__floatunsisf>
    d940:	27 ed       	ldi	r18, 0xD7	; 215
    d942:	33 ea       	ldi	r19, 0xA3	; 163
    d944:	40 e9       	ldi	r20, 0x90	; 144
    d946:	5f e3       	ldi	r21, 0x3F	; 63
    d948:	0e 94 c7 af 	call	0x15f8e	; 0x15f8e <__mulsf3>
    d94c:	26 e6       	ldi	r18, 0x66	; 102
    d94e:	36 e6       	ldi	r19, 0x66	; 102
    d950:	48 e8       	ldi	r20, 0x88	; 136
    d952:	53 e4       	ldi	r21, 0x43	; 67
    d954:	0e 94 0f ae 	call	0x15c1e	; 0x15c1e <__subsf3>
    d958:	0e 94 e0 ae 	call	0x15dc0	; 0x15dc0 <__fixsfsi>
    d95c:	86 2f       	mov	r24, r22
}
    d95e:	df 91       	pop	r29
    d960:	cf 91       	pop	r28
    d962:	1f 91       	pop	r17
    d964:	0f 91       	pop	r16
    d966:	08 95       	ret

0000d968 <_ZN13PinoccioClassC1Ev>:
  }
}

uint8_t PinoccioClass::getDataRate() {
  return dataRate;
}
    d968:	2e b3       	in	r18, 0x1e	; 30
    d96a:	fc 01       	movw	r30, r24
    d96c:	21 83       	std	Z+1, r18	; 0x01
    d96e:	08 95       	ret

0000d970 <_ZN13PinoccioClassD1Ev>:
    d970:	08 95       	ret

0000d972 <_ZN13PinoccioClass4loopEv>:
    d972:	0c 94 64 59 	jmp	0xb2c8	; 0xb2c8 <SYS_TaskHandler>

0000d976 <_ZN13PinoccioClass17getLastResetCauseEv>:
    d976:	dc 01       	movw	r26, r24
    d978:	11 96       	adiw	r26, 0x01	; 1
    d97a:	ec 91       	ld	r30, X
    d97c:	e1 50       	subi	r30, 0x01	; 1
    d97e:	e0 31       	cpi	r30, 0x10	; 16
    d980:	40 f4       	brcc	.+16     	; 0xd992 <_ZN13PinoccioClass17getLastResetCauseEv+0x1c>
    d982:	f0 e0       	ldi	r31, 0x00	; 0
    d984:	ee 0f       	add	r30, r30
    d986:	ff 1f       	adc	r31, r31
    d988:	e9 56       	subi	r30, 0x69	; 105
    d98a:	f7 4e       	sbci	r31, 0xE7	; 231
    d98c:	80 81       	ld	r24, Z
    d98e:	91 81       	ldd	r25, Z+1	; 0x01
    d990:	08 95       	ret
    d992:	8c e0       	ldi	r24, 0x0C	; 12
    d994:	9a e0       	ldi	r25, 0x0A	; 10
    d996:	08 95       	ret

0000d998 <_ZN13PinoccioClass14getTemperatureEv>:
    d998:	fc 01       	movw	r30, r24
    d99a:	80 81       	ld	r24, Z
    d99c:	81 11       	cpse	r24, r1
    d99e:	01 c0       	rjmp	.+2      	; 0xd9a2 <_ZN13PinoccioClass14getTemperatureEv+0xa>
    d9a0:	a0 cf       	rjmp	.-192    	; 0xd8e2 <HAL_MeasureTemperature>
    d9a2:	81 e8       	ldi	r24, 0x81	; 129
    d9a4:	08 95       	ret

0000d9a6 <_ZN13PinoccioClass10setHQTokenEPKc>:
    d9a6:	0f 93       	push	r16
    d9a8:	1f 93       	push	r17
    d9aa:	cf 93       	push	r28
    d9ac:	df 93       	push	r29
    d9ae:	8b 01       	movw	r16, r22
    d9b0:	c2 ec       	ldi	r28, 0xC2	; 194
    d9b2:	df e1       	ldi	r29, 0x1F	; 31
    d9b4:	f8 01       	movw	r30, r16
    d9b6:	61 91       	ld	r22, Z+
    d9b8:	8f 01       	movw	r16, r30
    d9ba:	ce 01       	movw	r24, r28
    d9bc:	0e 94 bf b8 	call	0x1717e	; 0x1717e <__eeupd_byte_EEPROM_SUFFIX>
    d9c0:	21 96       	adiw	r28, 0x01	; 1
    d9c2:	c2 3e       	cpi	r28, 0xE2	; 226
    d9c4:	ff e1       	ldi	r31, 0x1F	; 31
    d9c6:	df 07       	cpc	r29, r31
    d9c8:	a9 f7       	brne	.-22     	; 0xd9b4 <_ZN13PinoccioClass10setHQTokenEPKc+0xe>
    d9ca:	df 91       	pop	r29
    d9cc:	cf 91       	pop	r28
    d9ce:	1f 91       	pop	r17
    d9d0:	0f 91       	pop	r16
    d9d2:	08 95       	ret

0000d9d4 <_ZN13PinoccioClass10getHQTokenEPc>:
    d9d4:	0f 93       	push	r16
    d9d6:	1f 93       	push	r17
    d9d8:	cf 93       	push	r28
    d9da:	df 93       	push	r29
    d9dc:	8b 01       	movw	r16, r22
    d9de:	c2 ec       	ldi	r28, 0xC2	; 194
    d9e0:	df e1       	ldi	r29, 0x1F	; 31
    d9e2:	ce 01       	movw	r24, r28
    d9e4:	0e 94 ad b8 	call	0x1715a	; 0x1715a <__eerd_byte_EEPROM_SUFFIX>
    d9e8:	f8 01       	movw	r30, r16
    d9ea:	81 93       	st	Z+, r24
    d9ec:	8f 01       	movw	r16, r30
    d9ee:	21 96       	adiw	r28, 0x01	; 1
    d9f0:	c2 3e       	cpi	r28, 0xE2	; 226
    d9f2:	ff e1       	ldi	r31, 0x1F	; 31
    d9f4:	df 07       	cpc	r29, r31
    d9f6:	a9 f7       	brne	.-22     	; 0xd9e2 <_ZN13PinoccioClass10getHQTokenEPc+0xe>
    d9f8:	df 91       	pop	r29
    d9fa:	cf 91       	pop	r28
    d9fc:	1f 91       	pop	r17
    d9fe:	0f 91       	pop	r16
    da00:	08 95       	ret

0000da02 <_ZN13PinoccioClass12resetHQTokenEv>:
    da02:	cf 93       	push	r28
    da04:	df 93       	push	r29
    da06:	c2 ec       	ldi	r28, 0xC2	; 194
    da08:	df e1       	ldi	r29, 0x1F	; 31
    da0a:	6f ef       	ldi	r22, 0xFF	; 255
    da0c:	ce 01       	movw	r24, r28
    da0e:	0e 94 bf b8 	call	0x1717e	; 0x1717e <__eeupd_byte_EEPROM_SUFFIX>
    da12:	21 96       	adiw	r28, 0x01	; 1
    da14:	c2 3e       	cpi	r28, 0xE2	; 226
    da16:	8f e1       	ldi	r24, 0x1F	; 31
    da18:	d8 07       	cpc	r29, r24
    da1a:	b9 f7       	brne	.-18     	; 0xda0a <_ZN13PinoccioClass12resetHQTokenEv+0x8>
    da1c:	df 91       	pop	r29
    da1e:	cf 91       	pop	r28
    da20:	08 95       	ret

0000da22 <_ZN13PinoccioClass10setOTAFlagEv>:
    da22:	60 e0       	ldi	r22, 0x00	; 0
    da24:	8d eb       	ldi	r24, 0xBD	; 189
    da26:	9f e1       	ldi	r25, 0x1F	; 31
    da28:	0c 94 bf b8 	jmp	0x1717e	; 0x1717e <__eeupd_byte_EEPROM_SUFFIX>

0000da2c <_ZN13PinoccioClass11getHwSerialEv>:
    da2c:	88 ef       	ldi	r24, 0xF8	; 248
    da2e:	9f e1       	ldi	r25, 0x1F	; 31
    da30:	0c 94 b5 b8 	jmp	0x1716a	; 0x1716a <__eerd_dword_EEPROM_SUFFIX>

0000da34 <_ZN13PinoccioClass11getHwFamilyEv>:
    da34:	8c ef       	ldi	r24, 0xFC	; 252
    da36:	9f e1       	ldi	r25, 0x1F	; 31
    da38:	0c 94 ba b8 	jmp	0x17174	; 0x17174 <__eerd_word_EEPROM_SUFFIX>

0000da3c <_ZN13PinoccioClass12getHwVersionEv>:
    da3c:	8e ef       	ldi	r24, 0xFE	; 254
    da3e:	9f e1       	ldi	r25, 0x1F	; 31
    da40:	0c 94 ad b8 	jmp	0x1715a	; 0x1715a <__eerd_byte_EEPROM_SUFFIX>

0000da44 <_ZN13PinoccioClass16getEEPROMVersionEv>:
    da44:	8f ef       	ldi	r24, 0xFF	; 255
    da46:	9f e1       	ldi	r25, 0x1F	; 31
    da48:	0c 94 ad b8 	jmp	0x1715a	; 0x1715a <__eerd_byte_EEPROM_SUFFIX>

0000da4c <_ZN13PinoccioClass12meshSetPowerEh>:
    da4c:	0f 93       	push	r16
    da4e:	1f 93       	push	r17
    da50:	cf 93       	push	r28
    da52:	df 93       	push	r29
    da54:	1f 92       	push	r1
    da56:	cd b7       	in	r28, 0x3d	; 61
    da58:	de b7       	in	r29, 0x3e	; 62
    da5a:	8c 01       	movw	r16, r24
    da5c:	86 2f       	mov	r24, r22
    da5e:	69 83       	std	Y+1, r22	; 0x01
    da60:	0e 94 39 58 	call	0xb072	; 0xb072 <PHY_SetTxPower>
    da64:	69 81       	ldd	r22, Y+1	; 0x01
    da66:	f8 01       	movw	r30, r16
    da68:	67 83       	std	Z+7, r22	; 0x07
    da6a:	82 ef       	ldi	r24, 0xF2	; 242
    da6c:	9f e1       	ldi	r25, 0x1F	; 31
    da6e:	0f 90       	pop	r0
    da70:	df 91       	pop	r29
    da72:	cf 91       	pop	r28
    da74:	1f 91       	pop	r17
    da76:	0f 91       	pop	r16
    da78:	0c 94 bf b8 	jmp	0x1717e	; 0x1717e <__eeupd_byte_EEPROM_SUFFIX>

0000da7c <_ZN13PinoccioClass15meshSetDataRateEh>:
    da7c:	36 2f       	mov	r19, r22
    da7e:	33 70       	andi	r19, 0x03	; 3
    da80:	ec e4       	ldi	r30, 0x4C	; 76
    da82:	f1 e0       	ldi	r31, 0x01	; 1
    da84:	20 81       	ld	r18, Z
    da86:	2c 7f       	andi	r18, 0xFC	; 252
    da88:	23 2b       	or	r18, r19
    da8a:	20 83       	st	Z, r18
    da8c:	fc 01       	movw	r30, r24
    da8e:	60 87       	std	Z+8, r22	; 0x08
    da90:	8e eb       	ldi	r24, 0xBE	; 190
    da92:	9f e1       	ldi	r25, 0x1F	; 31
    da94:	0c 94 bf b8 	jmp	0x1717e	; 0x1717e <__eeupd_byte_EEPROM_SUFFIX>

0000da98 <_ZN13PinoccioClass12meshSetRadioEjjh>:
    da98:	df 92       	push	r13
    da9a:	ef 92       	push	r14
    da9c:	ff 92       	push	r15
    da9e:	0f 93       	push	r16
    daa0:	1f 93       	push	r17
    daa2:	cf 93       	push	r28
    daa4:	df 93       	push	r29
    daa6:	ec 01       	movw	r28, r24
    daa8:	7b 01       	movw	r14, r22
    daaa:	8a 01       	movw	r16, r20
    daac:	d2 2e       	mov	r13, r18
    daae:	cb 01       	movw	r24, r22
    dab0:	0e 94 91 4a 	call	0x9522	; 0x9522 <NWK_SetAddr>
    dab4:	fb 82       	std	Y+3, r15	; 0x03
    dab6:	ea 82       	std	Y+2, r14	; 0x02
    dab8:	c8 01       	movw	r24, r16
    daba:	0e 94 98 4a 	call	0x9530	; 0x9530 <NWK_SetPanId>
    dabe:	1d 83       	std	Y+5, r17	; 0x05
    dac0:	0c 83       	std	Y+4, r16	; 0x04
    dac2:	8d 2d       	mov	r24, r13
    dac4:	0e 94 11 58 	call	0xb022	; 0xb022 <PHY_SetChannel>
    dac8:	de 82       	std	Y+6, r13	; 0x06
    daca:	81 e0       	ldi	r24, 0x01	; 1
    dacc:	0e 94 0d 58 	call	0xb01a	; 0xb01a <PHY_SetRxState>
    dad0:	6a 81       	ldd	r22, Y+2	; 0x02
    dad2:	7b 81       	ldd	r23, Y+3	; 0x03
    dad4:	86 ef       	ldi	r24, 0xF6	; 246
    dad6:	9f e1       	ldi	r25, 0x1F	; 31
    dad8:	0e 94 d1 b8 	call	0x171a2	; 0x171a2 <__eeupd_word_EEPROM_SUFFIX>
    dadc:	6c 81       	ldd	r22, Y+4	; 0x04
    dade:	7d 81       	ldd	r23, Y+5	; 0x05
    dae0:	84 ef       	ldi	r24, 0xF4	; 244
    dae2:	9f e1       	ldi	r25, 0x1F	; 31
    dae4:	0e 94 d1 b8 	call	0x171a2	; 0x171a2 <__eeupd_word_EEPROM_SUFFIX>
    dae8:	6e 81       	ldd	r22, Y+6	; 0x06
    daea:	83 ef       	ldi	r24, 0xF3	; 243
    daec:	9f e1       	ldi	r25, 0x1F	; 31
    daee:	0e 94 bf b8 	call	0x1717e	; 0x1717e <__eeupd_byte_EEPROM_SUFFIX>
    daf2:	60 e0       	ldi	r22, 0x00	; 0
    daf4:	ce 01       	movw	r24, r28
    daf6:	aa df       	rcall	.-172    	; 0xda4c <_ZN13PinoccioClass12meshSetPowerEh>
    daf8:	60 e0       	ldi	r22, 0x00	; 0
    dafa:	ce 01       	movw	r24, r28
    dafc:	df 91       	pop	r29
    dafe:	cf 91       	pop	r28
    db00:	1f 91       	pop	r17
    db02:	0f 91       	pop	r16
    db04:	ff 90       	pop	r15
    db06:	ef 90       	pop	r14
    db08:	df 90       	pop	r13
    db0a:	b8 cf       	rjmp	.-144    	; 0xda7c <_ZN13PinoccioClass15meshSetDataRateEh>

0000db0c <_ZN13PinoccioClass18meshSetSecurityKeyEPKh>:
    db0c:	ef 92       	push	r14
    db0e:	ff 92       	push	r15
    db10:	0f 93       	push	r16
    db12:	1f 93       	push	r17
    db14:	cf 93       	push	r28
    db16:	df 93       	push	r29
    db18:	1f 92       	push	r1
    db1a:	1f 92       	push	r1
    db1c:	cd b7       	in	r28, 0x3d	; 61
    db1e:	de b7       	in	r29, 0x3e	; 62
    db20:	cb 01       	movw	r24, r22
    db22:	69 83       	std	Y+1, r22	; 0x01
    db24:	7a 83       	std	Y+2, r23	; 0x02
    db26:	0e 94 4e 54 	call	0xa89c	; 0xa89c <NWK_SetSecurityKey>
    db2a:	69 81       	ldd	r22, Y+1	; 0x01
    db2c:	e6 2e       	mov	r14, r22
    db2e:	7a 81       	ldd	r23, Y+2	; 0x02
    db30:	f7 2e       	mov	r15, r23
    db32:	02 ee       	ldi	r16, 0xE2	; 226
    db34:	1f e1       	ldi	r17, 0x1F	; 31
    db36:	f7 01       	movw	r30, r14
    db38:	61 91       	ld	r22, Z+
    db3a:	7f 01       	movw	r14, r30
    db3c:	c8 01       	movw	r24, r16
    db3e:	0e 94 bf b8 	call	0x1717e	; 0x1717e <__eeupd_byte_EEPROM_SUFFIX>
    db42:	0f 5f       	subi	r16, 0xFF	; 255
    db44:	1f 4f       	sbci	r17, 0xFF	; 255
    db46:	02 3f       	cpi	r16, 0xF2	; 242
    db48:	ff e1       	ldi	r31, 0x1F	; 31
    db4a:	1f 07       	cpc	r17, r31
    db4c:	a1 f7       	brne	.-24     	; 0xdb36 <_ZN13PinoccioClass18meshSetSecurityKeyEPKh+0x2a>
    db4e:	0f 90       	pop	r0
    db50:	0f 90       	pop	r0
    db52:	df 91       	pop	r29
    db54:	cf 91       	pop	r28
    db56:	1f 91       	pop	r17
    db58:	0f 91       	pop	r16
    db5a:	ff 90       	pop	r15
    db5c:	ef 90       	pop	r14
    db5e:	08 95       	ret

0000db60 <_ZN13PinoccioClass22loadSettingsFromEepromEv>:
    db60:	af 92       	push	r10
    db62:	bf 92       	push	r11
    db64:	cf 92       	push	r12
    db66:	df 92       	push	r13
    db68:	ef 92       	push	r14
    db6a:	ff 92       	push	r15
    db6c:	0f 93       	push	r16
    db6e:	1f 93       	push	r17
    db70:	cf 93       	push	r28
    db72:	df 93       	push	r29
    db74:	cd b7       	in	r28, 0x3d	; 61
    db76:	de b7       	in	r29, 0x3e	; 62
    db78:	a1 97       	sbiw	r28, 0x21	; 33
    db7a:	0f b6       	in	r0, 0x3f	; 63
    db7c:	f8 94       	cli
    db7e:	de bf       	out	0x3e, r29	; 62
    db80:	0f be       	out	0x3f, r0	; 63
    db82:	cd bf       	out	0x3d, r28	; 61
    db84:	7c 01       	movw	r14, r24
    db86:	8e 01       	movw	r16, r28
    db88:	0f 5f       	subi	r16, 0xFF	; 255
    db8a:	1f 4f       	sbci	r17, 0xFF	; 255
    db8c:	58 01       	movw	r10, r16
    db8e:	22 ec       	ldi	r18, 0xC2	; 194
    db90:	c2 2e       	mov	r12, r18
    db92:	2f e1       	ldi	r18, 0x1F	; 31
    db94:	d2 2e       	mov	r13, r18
    db96:	c6 01       	movw	r24, r12
    db98:	0e 94 ad b8 	call	0x1715a	; 0x1715a <__eerd_byte_EEPROM_SUFFIX>
    db9c:	f5 01       	movw	r30, r10
    db9e:	81 93       	st	Z+, r24
    dba0:	5f 01       	movw	r10, r30
    dba2:	ff ef       	ldi	r31, 0xFF	; 255
    dba4:	cf 1a       	sub	r12, r31
    dba6:	df 0a       	sbc	r13, r31
    dba8:	22 ee       	ldi	r18, 0xE2	; 226
    dbaa:	c2 16       	cp	r12, r18
    dbac:	2f e1       	ldi	r18, 0x1F	; 31
    dbae:	d2 06       	cpc	r13, r18
    dbb0:	91 f7       	brne	.-28     	; 0xdb96 <_ZN13PinoccioClass22loadSettingsFromEepromEv+0x36>
    dbb2:	b8 01       	movw	r22, r16
    dbb4:	c7 01       	movw	r24, r14
    dbb6:	f7 de       	rcall	.-530    	; 0xd9a6 <_ZN13PinoccioClass10setHQTokenEPKc>
    dbb8:	80 e2       	ldi	r24, 0x20	; 32
    dbba:	f8 01       	movw	r30, r16
    dbbc:	11 92       	st	Z+, r1
    dbbe:	8a 95       	dec	r24
    dbc0:	e9 f7       	brne	.-6      	; 0xdbbc <_ZN13PinoccioClass22loadSettingsFromEepromEv+0x5c>
    dbc2:	58 01       	movw	r10, r16
    dbc4:	92 ee       	ldi	r25, 0xE2	; 226
    dbc6:	c9 2e       	mov	r12, r25
    dbc8:	9f e1       	ldi	r25, 0x1F	; 31
    dbca:	d9 2e       	mov	r13, r25
    dbcc:	c6 01       	movw	r24, r12
    dbce:	0e 94 ad b8 	call	0x1715a	; 0x1715a <__eerd_byte_EEPROM_SUFFIX>
    dbd2:	f5 01       	movw	r30, r10
    dbd4:	81 93       	st	Z+, r24
    dbd6:	5f 01       	movw	r10, r30
    dbd8:	ff ef       	ldi	r31, 0xFF	; 255
    dbda:	cf 1a       	sub	r12, r31
    dbdc:	df 0a       	sbc	r13, r31
    dbde:	22 ef       	ldi	r18, 0xF2	; 242
    dbe0:	c2 16       	cp	r12, r18
    dbe2:	2f e1       	ldi	r18, 0x1F	; 31
    dbe4:	d2 06       	cpc	r13, r18
    dbe6:	91 f7       	brne	.-28     	; 0xdbcc <_ZN13PinoccioClass22loadSettingsFromEepromEv+0x6c>
    dbe8:	b8 01       	movw	r22, r16
    dbea:	c7 01       	movw	r24, r14
    dbec:	8f df       	rcall	.-226    	; 0xdb0c <_ZN13PinoccioClass18meshSetSecurityKeyEPKh>
    dbee:	80 e1       	ldi	r24, 0x10	; 16
    dbf0:	f8 01       	movw	r30, r16
    dbf2:	11 92       	st	Z+, r1
    dbf4:	8a 95       	dec	r24
    dbf6:	e9 f7       	brne	.-6      	; 0xdbf2 <_ZN13PinoccioClass22loadSettingsFromEepromEv+0x92>
    dbf8:	86 ef       	ldi	r24, 0xF6	; 246
    dbfa:	9f e1       	ldi	r25, 0x1F	; 31
    dbfc:	0e 94 ba b8 	call	0x17174	; 0x17174 <__eerd_word_EEPROM_SUFFIX>
    dc00:	8c 01       	movw	r16, r24
    dc02:	8f 3f       	cpi	r24, 0xFF	; 255
    dc04:	ff ef       	ldi	r31, 0xFF	; 255
    dc06:	9f 07       	cpc	r25, r31
    dc08:	61 f4       	brne	.+24     	; 0xdc22 <_ZN13PinoccioClass22loadSettingsFromEepromEv+0xc2>
    dc0a:	84 ef       	ldi	r24, 0xF4	; 244
    dc0c:	9f e1       	ldi	r25, 0x1F	; 31
    dc0e:	0e 94 ba b8 	call	0x17174	; 0x17174 <__eerd_word_EEPROM_SUFFIX>
    dc12:	01 96       	adiw	r24, 0x01	; 1
    dc14:	31 f4       	brne	.+12     	; 0xdc22 <_ZN13PinoccioClass22loadSettingsFromEepromEv+0xc2>
    dc16:	83 ef       	ldi	r24, 0xF3	; 243
    dc18:	9f e1       	ldi	r25, 0x1F	; 31
    dc1a:	0e 94 ad b8 	call	0x1715a	; 0x1715a <__eerd_byte_EEPROM_SUFFIX>
    dc1e:	8f 3f       	cpi	r24, 0xFF	; 255
    dc20:	79 f0       	breq	.+30     	; 0xdc40 <_ZN13PinoccioClass22loadSettingsFromEepromEv+0xe0>
    dc22:	83 ef       	ldi	r24, 0xF3	; 243
    dc24:	9f e1       	ldi	r25, 0x1F	; 31
    dc26:	0e 94 ad b8 	call	0x1715a	; 0x1715a <__eerd_byte_EEPROM_SUFFIX>
    dc2a:	28 2f       	mov	r18, r24
    dc2c:	84 ef       	ldi	r24, 0xF4	; 244
    dc2e:	9f e1       	ldi	r25, 0x1F	; 31
    dc30:	29 a3       	std	Y+33, r18	; 0x21
    dc32:	0e 94 ba b8 	call	0x17174	; 0x17174 <__eerd_word_EEPROM_SUFFIX>
    dc36:	ac 01       	movw	r20, r24
    dc38:	29 a1       	ldd	r18, Y+33	; 0x21
    dc3a:	b8 01       	movw	r22, r16
    dc3c:	c7 01       	movw	r24, r14
    dc3e:	2c df       	rcall	.-424    	; 0xda98 <_ZN13PinoccioClass12meshSetRadioEjjh>
    dc40:	82 ef       	ldi	r24, 0xF2	; 242
    dc42:	9f e1       	ldi	r25, 0x1F	; 31
    dc44:	0e 94 ad b8 	call	0x1715a	; 0x1715a <__eerd_byte_EEPROM_SUFFIX>
    dc48:	8f 3f       	cpi	r24, 0xFF	; 255
    dc4a:	19 f0       	breq	.+6      	; 0xdc52 <_ZN13PinoccioClass22loadSettingsFromEepromEv+0xf2>
    dc4c:	68 2f       	mov	r22, r24
    dc4e:	c7 01       	movw	r24, r14
    dc50:	fd de       	rcall	.-518    	; 0xda4c <_ZN13PinoccioClass12meshSetPowerEh>
    dc52:	8e eb       	ldi	r24, 0xBE	; 190
    dc54:	9f e1       	ldi	r25, 0x1F	; 31
    dc56:	0e 94 ad b8 	call	0x1715a	; 0x1715a <__eerd_byte_EEPROM_SUFFIX>
    dc5a:	8f 3f       	cpi	r24, 0xFF	; 255
    dc5c:	19 f0       	breq	.+6      	; 0xdc64 <_ZN13PinoccioClass22loadSettingsFromEepromEv+0x104>
    dc5e:	68 2f       	mov	r22, r24
    dc60:	c7 01       	movw	r24, r14
    dc62:	0c df       	rcall	.-488    	; 0xda7c <_ZN13PinoccioClass15meshSetDataRateEh>
    dc64:	a1 96       	adiw	r28, 0x21	; 33
    dc66:	0f b6       	in	r0, 0x3f	; 63
    dc68:	f8 94       	cli
    dc6a:	de bf       	out	0x3e, r29	; 62
    dc6c:	0f be       	out	0x3f, r0	; 63
    dc6e:	cd bf       	out	0x3d, r28	; 61
    dc70:	df 91       	pop	r29
    dc72:	cf 91       	pop	r28
    dc74:	1f 91       	pop	r17
    dc76:	0f 91       	pop	r16
    dc78:	ff 90       	pop	r15
    dc7a:	ef 90       	pop	r14
    dc7c:	df 90       	pop	r13
    dc7e:	cf 90       	pop	r12
    dc80:	bf 90       	pop	r11
    dc82:	af 90       	pop	r10
    dc84:	08 95       	ret

0000dc86 <_ZN13PinoccioClass5setupEPKcS1_l>:
    dc86:	0f 93       	push	r16
    dc88:	1f 93       	push	r17
    dc8a:	cf 93       	push	r28
    dc8c:	df 93       	push	r29
    dc8e:	ec 01       	movw	r28, r24
    dc90:	7a 87       	std	Y+10, r23	; 0x0a
    dc92:	69 87       	std	Y+9, r22	; 0x09
    dc94:	5c 87       	std	Y+12, r21	; 0x0c
    dc96:	4b 87       	std	Y+11, r20	; 0x0b
    dc98:	0d 87       	std	Y+13, r16	; 0x0d
    dc9a:	1e 87       	std	Y+14, r17	; 0x0e
    dc9c:	2f 87       	std	Y+15, r18	; 0x0f
    dc9e:	38 8b       	std	Y+16, r19	; 0x10
    dca0:	0e 94 5f 59 	call	0xb2be	; 0xb2be <SYS_Init>
    dca4:	0e 94 67 58 	call	0xb0ce	; 0xb0ce <PHY_RandomReq>
    dca8:	61 e0       	ldi	r22, 0x01	; 1
    dcaa:	89 e0       	ldi	r24, 0x09	; 9
    dcac:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <digitalWrite>
    dcb0:	61 e0       	ldi	r22, 0x01	; 1
    dcb2:	89 e0       	ldi	r24, 0x09	; 9
    dcb4:	0e 94 21 16 	call	0x2c42	; 0x2c42 <pinMode>
    dcb8:	ce 01       	movw	r24, r28
    dcba:	df 91       	pop	r29
    dcbc:	cf 91       	pop	r28
    dcbe:	1f 91       	pop	r17
    dcc0:	0f 91       	pop	r16
    dcc2:	4e cf       	rjmp	.-356    	; 0xdb60 <_ZN13PinoccioClass22loadSettingsFromEepromEv>

0000dcc4 <_ZN13PinoccioClass18meshGetSecurityKeyEPc>:
    dcc4:	0f 93       	push	r16
    dcc6:	1f 93       	push	r17
    dcc8:	cf 93       	push	r28
    dcca:	df 93       	push	r29
    dccc:	8b 01       	movw	r16, r22
    dcce:	c2 ee       	ldi	r28, 0xE2	; 226
    dcd0:	df e1       	ldi	r29, 0x1F	; 31
    dcd2:	ce 01       	movw	r24, r28
    dcd4:	0e 94 ad b8 	call	0x1715a	; 0x1715a <__eerd_byte_EEPROM_SUFFIX>
    dcd8:	f8 01       	movw	r30, r16
    dcda:	81 93       	st	Z+, r24
    dcdc:	8f 01       	movw	r16, r30
    dcde:	21 96       	adiw	r28, 0x01	; 1
    dce0:	c2 3f       	cpi	r28, 0xF2	; 242
    dce2:	ff e1       	ldi	r31, 0x1F	; 31
    dce4:	df 07       	cpc	r29, r31
    dce6:	a9 f7       	brne	.-22     	; 0xdcd2 <_ZN13PinoccioClass18meshGetSecurityKeyEPc+0xe>
    dce8:	df 91       	pop	r29
    dcea:	cf 91       	pop	r28
    dcec:	1f 91       	pop	r17
    dcee:	0f 91       	pop	r16
    dcf0:	08 95       	ret

0000dcf2 <_ZN13PinoccioClass20meshResetSecurityKeyEv>:
    dcf2:	cf 93       	push	r28
    dcf4:	df 93       	push	r29
    dcf6:	cd b7       	in	r28, 0x3d	; 61
    dcf8:	de b7       	in	r29, 0x3e	; 62
    dcfa:	60 97       	sbiw	r28, 0x10	; 16
    dcfc:	0f b6       	in	r0, 0x3f	; 63
    dcfe:	f8 94       	cli
    dd00:	de bf       	out	0x3e, r29	; 62
    dd02:	0f be       	out	0x3f, r0	; 63
    dd04:	cd bf       	out	0x3d, r28	; 61
    dd06:	20 e1       	ldi	r18, 0x10	; 16
    dd08:	e0 e4       	ldi	r30, 0x40	; 64
    dd0a:	fc e0       	ldi	r31, 0x0C	; 12
    dd0c:	de 01       	movw	r26, r28
    dd0e:	11 96       	adiw	r26, 0x01	; 1
    dd10:	01 90       	ld	r0, Z+
    dd12:	0d 92       	st	X+, r0
    dd14:	2a 95       	dec	r18
    dd16:	e1 f7       	brne	.-8      	; 0xdd10 <_ZN13PinoccioClass20meshResetSecurityKeyEv+0x1e>
    dd18:	be 01       	movw	r22, r28
    dd1a:	6f 5f       	subi	r22, 0xFF	; 255
    dd1c:	7f 4f       	sbci	r23, 0xFF	; 255
    dd1e:	f6 de       	rcall	.-532    	; 0xdb0c <_ZN13PinoccioClass18meshSetSecurityKeyEPKh>
    dd20:	60 96       	adiw	r28, 0x10	; 16
    dd22:	0f b6       	in	r0, 0x3f	; 63
    dd24:	f8 94       	cli
    dd26:	de bf       	out	0x3e, r29	; 62
    dd28:	0f be       	out	0x3f, r0	; 63
    dd2a:	cd bf       	out	0x3d, r28	; 61
    dd2c:	df 91       	pop	r29
    dd2e:	cf 91       	pop	r28
    dd30:	08 95       	ret

0000dd32 <_ZN13PinoccioClass10meshListenEhPFbP13NWK_DataInd_tE>:
    dd32:	86 2f       	mov	r24, r22
    dd34:	ba 01       	movw	r22, r20
    dd36:	0c 94 9f 4a 	jmp	0x953e	; 0x953e <NWK_OpenEndpoint>

0000dd3a <_ZN13PinoccioClass13meshJoinGroupEj>:
    dd3a:	cf 93       	push	r28
    dd3c:	df 93       	push	r29
    dd3e:	eb 01       	movw	r28, r22
    dd40:	cb 01       	movw	r24, r22
    dd42:	0e 94 9f 4c 	call	0x993e	; 0x993e <NWK_GroupIsMember>
    dd46:	81 11       	cpse	r24, r1
    dd48:	05 c0       	rjmp	.+10     	; 0xdd54 <_ZN13PinoccioClass13meshJoinGroupEj+0x1a>
    dd4a:	ce 01       	movw	r24, r28
    dd4c:	df 91       	pop	r29
    dd4e:	cf 91       	pop	r28
    dd50:	0c 94 55 4c 	jmp	0x98aa	; 0x98aa <NWK_GroupAdd>
    dd54:	df 91       	pop	r29
    dd56:	cf 91       	pop	r28
    dd58:	08 95       	ret

0000dd5a <_ZN13PinoccioClass14meshLeaveGroupEj>:
    dd5a:	cf 93       	push	r28
    dd5c:	df 93       	push	r29
    dd5e:	eb 01       	movw	r28, r22
    dd60:	cb 01       	movw	r24, r22
    dd62:	0e 94 9f 4c 	call	0x993e	; 0x993e <NWK_GroupIsMember>
    dd66:	88 23       	and	r24, r24
    dd68:	29 f0       	breq	.+10     	; 0xdd74 <_ZN13PinoccioClass14meshLeaveGroupEj+0x1a>
    dd6a:	ce 01       	movw	r24, r28
    dd6c:	df 91       	pop	r29
    dd6e:	cf 91       	pop	r28
    dd70:	0c 94 79 4c 	jmp	0x98f2	; 0x98f2 <NWK_GroupRemove>
    dd74:	df 91       	pop	r29
    dd76:	cf 91       	pop	r28
    dd78:	08 95       	ret

0000dd7a <_ZN13PinoccioClass13meshIsInGroupEj>:
    dd7a:	cb 01       	movw	r24, r22
    dd7c:	0c 94 9f 4c 	jmp	0x993e	; 0x993e <NWK_GroupIsMember>

0000dd80 <_ZN13PinoccioClass10getAddressEv>:
    dd80:	fc 01       	movw	r30, r24
    dd82:	82 81       	ldd	r24, Z+2	; 0x02
    dd84:	93 81       	ldd	r25, Z+3	; 0x03
    dd86:	08 95       	ret

0000dd88 <_ZN13PinoccioClass8getPanIdEv>:
    dd88:	fc 01       	movw	r30, r24
    dd8a:	84 81       	ldd	r24, Z+4	; 0x04
    dd8c:	95 81       	ldd	r25, Z+5	; 0x05
    dd8e:	08 95       	ret

0000dd90 <_ZN13PinoccioClass10getChannelEv>:
    dd90:	fc 01       	movw	r30, r24
    dd92:	86 81       	ldd	r24, Z+6	; 0x06
    dd94:	08 95       	ret

0000dd96 <_ZN13PinoccioClass13getSketchNameEv>:
    dd96:	fc 01       	movw	r30, r24
    dd98:	81 85       	ldd	r24, Z+9	; 0x09
    dd9a:	92 85       	ldd	r25, Z+10	; 0x0a
    dd9c:	08 95       	ret

0000dd9e <_ZN13PinoccioClass17getSketchRevisionEv>:
    dd9e:	fc 01       	movw	r30, r24
    dda0:	83 85       	ldd	r24, Z+11	; 0x0b
    dda2:	94 85       	ldd	r25, Z+12	; 0x0c
    dda4:	08 95       	ret

0000dda6 <_ZN13PinoccioClass14getSketchBuildEv>:
    dda6:	fc 01       	movw	r30, r24
    dda8:	65 85       	ldd	r22, Z+13	; 0x0d
    ddaa:	76 85       	ldd	r23, Z+14	; 0x0e
    ddac:	87 85       	ldd	r24, Z+15	; 0x0f
    ddae:	90 89       	ldd	r25, Z+16	; 0x10
    ddb0:	08 95       	ret

0000ddb2 <_ZN13PinoccioClass12getTxPowerDbEv>:
    ddb2:	dc 01       	movw	r26, r24
    ddb4:	17 96       	adiw	r26, 0x07	; 7
    ddb6:	ec 91       	ld	r30, X
    ddb8:	e0 31       	cpi	r30, 0x10	; 16
    ddba:	40 f4       	brcc	.+16     	; 0xddcc <_ZN13PinoccioClass12getTxPowerDbEv+0x1a>
    ddbc:	f0 e0       	ldi	r31, 0x00	; 0
    ddbe:	ee 0f       	add	r30, r30
    ddc0:	ff 1f       	adc	r31, r31
    ddc2:	e9 58       	subi	r30, 0x89	; 137
    ddc4:	f7 4e       	sbci	r31, 0xE7	; 231
    ddc6:	80 81       	ld	r24, Z
    ddc8:	91 81       	ldd	r25, Z+1	; 0x01
    ddca:	08 95       	ret
    ddcc:	89 e7       	ldi	r24, 0x79	; 121
    ddce:	99 e0       	ldi	r25, 0x09	; 9
    ddd0:	08 95       	ret

0000ddd2 <_ZN13PinoccioClass15getDataRatekbpsEv>:

const char* PinoccioClass::getDataRatekbps() {
  switch (dataRate) {
    ddd2:	dc 01       	movw	r26, r24
    ddd4:	18 96       	adiw	r26, 0x08	; 8
    ddd6:	ec 91       	ld	r30, X
    ddd8:	e4 30       	cpi	r30, 0x04	; 4
    ddda:	40 f4       	brcc	.+16     	; 0xddec <_ZN13PinoccioClass15getDataRatekbpsEv+0x1a>
    dddc:	f0 e0       	ldi	r31, 0x00	; 0
    ddde:	ee 0f       	add	r30, r30
    dde0:	ff 1f       	adc	r31, r31
    dde2:	e1 59       	subi	r30, 0x91	; 145
    dde4:	f7 4e       	sbci	r31, 0xE7	; 231
    dde6:	80 81       	ld	r24, Z
    dde8:	91 81       	ldd	r25, Z+1	; 0x01
    ddea:	08 95       	ret
    ddec:	81 e5       	ldi	r24, 0x51	; 81
    ddee:	99 e0       	ldi	r25, 0x09	; 9
      break;
    default:
      return PSTR("unknown");
      break;
  }
}
    ddf0:	08 95       	ret

0000ddf2 <_ZL38scoutPeripheralStateChangeTimerHandlerP11SYS_Timer_t>:
  return batteryVoltage;
}

bool PinoccioScout::isBatteryAlarmTriggered() {
  return isBattAlarmTriggered;
}
    ddf2:	1f 93       	push	r17
    ddf4:	cf 93       	push	r28
    ddf6:	df 93       	push	r29
    ddf8:	80 91 b5 35 	lds	r24, 0x35B5
    ddfc:	90 91 b6 35 	lds	r25, 0x35B6
    de00:	89 2b       	or	r24, r25
    de02:	a1 f1       	breq	.+104    	; 0xde6c <_ZL38scoutPeripheralStateChangeTimerHandlerP11SYS_Timer_t+0x7a>
    de04:	a4 da       	rcall	.-2744   	; 0xd34e <HAL_FuelGaugePercent>
    de06:	97 fd       	sbrc	r25, 7
    de08:	07 c0       	rjmp	.+14     	; 0xde18 <_ZL38scoutPeripheralStateChangeTimerHandlerP11SYS_Timer_t+0x26>
    de0a:	a1 da       	rcall	.-2750   	; 0xd34e <HAL_FuelGaugePercent>
    de0c:	85 36       	cpi	r24, 0x65	; 101
    de0e:	91 05       	cpc	r25, r1
    de10:	34 f4       	brge	.+12     	; 0xde1e <_ZL38scoutPeripheralStateChangeTimerHandlerP11SYS_Timer_t+0x2c>
    de12:	9d da       	rcall	.-2758   	; 0xd34e <HAL_FuelGaugePercent>
    de14:	ec 01       	movw	r28, r24
    de16:	05 c0       	rjmp	.+10     	; 0xde22 <_ZL38scoutPeripheralStateChangeTimerHandlerP11SYS_Timer_t+0x30>
    de18:	c0 e0       	ldi	r28, 0x00	; 0
    de1a:	d0 e0       	ldi	r29, 0x00	; 0
    de1c:	02 c0       	rjmp	.+4      	; 0xde22 <_ZL38scoutPeripheralStateChangeTimerHandlerP11SYS_Timer_t+0x30>
    de1e:	c4 e6       	ldi	r28, 0x64	; 100
    de20:	d0 e0       	ldi	r29, 0x00	; 0
    de22:	80 91 e5 35 	lds	r24, 0x35E5
    de26:	90 e0       	ldi	r25, 0x00	; 0
    de28:	8c 17       	cp	r24, r28
    de2a:	9d 07       	cpc	r25, r29
    de2c:	f9 f0       	breq	.+62     	; 0xde6c <_ZL38scoutPeripheralStateChangeTimerHandlerP11SYS_Timer_t+0x7a>
    de2e:	80 91 eb 35 	lds	r24, 0x35EB
    de32:	88 23       	and	r24, r24
    de34:	99 f0       	breq	.+38     	; 0xde5c <_ZL38scoutPeripheralStateChangeTimerHandlerP11SYS_Timer_t+0x6a>
    de36:	6a e3       	ldi	r22, 0x3A	; 58
    de38:	7b e0       	ldi	r23, 0x0B	; 11
    de3a:	84 e0       	ldi	r24, 0x04	; 4
    de3c:	94 e2       	ldi	r25, 0x24	; 36
    de3e:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
    de42:	4a e0       	ldi	r20, 0x0A	; 10
    de44:	50 e0       	ldi	r21, 0x00	; 0
    de46:	be 01       	movw	r22, r28
    de48:	84 e0       	ldi	r24, 0x04	; 4
    de4a:	94 e2       	ldi	r25, 0x24	; 36
    de4c:	0e 94 91 10 	call	0x2122	; 0x2122 <_ZN5Print5printEji>
    de50:	68 e3       	ldi	r22, 0x38	; 56
    de52:	7b e0       	ldi	r23, 0x0B	; 11
    de54:	84 e0       	ldi	r24, 0x04	; 4
    de56:	94 e2       	ldi	r25, 0x24	; 36
    de58:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <_ZN5Print7printlnEPK19__FlashStringHelper>
    de5c:	8c 2f       	mov	r24, r28
    de5e:	c0 93 e5 35 	sts	0x35E5, r28
    de62:	e0 91 b5 35 	lds	r30, 0x35B5
    de66:	f0 91 b6 35 	lds	r31, 0x35B6
    de6a:	19 95       	eicall
    de6c:	80 91 b7 35 	lds	r24, 0x35B7
    de70:	90 91 b8 35 	lds	r25, 0x35B8
    de74:	89 2b       	or	r24, r25
    de76:	59 f1       	breq	.+86     	; 0xdece <_ZL38scoutPeripheralStateChangeTimerHandlerP11SYS_Timer_t+0xdc>
    de78:	67 da       	rcall	.-2866   	; 0xd348 <HAL_FuelGaugeVoltage>
    de7a:	18 2f       	mov	r17, r24
    de7c:	ec 01       	movw	r28, r24
    de7e:	20 91 e6 35 	lds	r18, 0x35E6
    de82:	30 91 e7 35 	lds	r19, 0x35E7
    de86:	2c 17       	cp	r18, r28
    de88:	3d 07       	cpc	r19, r29
    de8a:	09 f1       	breq	.+66     	; 0xdece <_ZL38scoutPeripheralStateChangeTimerHandlerP11SYS_Timer_t+0xdc>
    de8c:	80 91 eb 35 	lds	r24, 0x35EB
    de90:	88 23       	and	r24, r24
    de92:	99 f0       	breq	.+38     	; 0xdeba <_ZL38scoutPeripheralStateChangeTimerHandlerP11SYS_Timer_t+0xc8>
    de94:	63 e1       	ldi	r22, 0x13	; 19
    de96:	7b e0       	ldi	r23, 0x0B	; 11
    de98:	84 e0       	ldi	r24, 0x04	; 4
    de9a:	94 e2       	ldi	r25, 0x24	; 36
    de9c:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
    dea0:	4a e0       	ldi	r20, 0x0A	; 10
    dea2:	50 e0       	ldi	r21, 0x00	; 0
    dea4:	be 01       	movw	r22, r28
    dea6:	84 e0       	ldi	r24, 0x04	; 4
    dea8:	94 e2       	ldi	r25, 0x24	; 36
    deaa:	0e 94 91 10 	call	0x2122	; 0x2122 <_ZN5Print5printEji>
    deae:	61 e1       	ldi	r22, 0x11	; 17
    deb0:	7b e0       	ldi	r23, 0x0B	; 11
    deb2:	84 e0       	ldi	r24, 0x04	; 4
    deb4:	94 e2       	ldi	r25, 0x24	; 36
    deb6:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <_ZN5Print7printlnEPK19__FlashStringHelper>
    deba:	d0 93 e7 35 	sts	0x35E7, r29
    debe:	c0 93 e6 35 	sts	0x35E6, r28
    dec2:	e0 91 b7 35 	lds	r30, 0x35B7
    dec6:	f0 91 b8 35 	lds	r31, 0x35B8
    deca:	81 2f       	mov	r24, r17
    decc:	19 95       	eicall
    dece:	80 91 b9 35 	lds	r24, 0x35B9
    ded2:	90 91 ba 35 	lds	r25, 0x35BA
    ded6:	89 2b       	or	r24, r25
    ded8:	71 f1       	breq	.+92     	; 0xdf36 <_ZL38scoutPeripheralStateChangeTimerHandlerP11SYS_Timer_t+0x144>
    deda:	84 e1       	ldi	r24, 0x14	; 20
    dedc:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <digitalRead>
    dee0:	11 e0       	ldi	r17, 0x01	; 1
    dee2:	89 2b       	or	r24, r25
    dee4:	09 f0       	breq	.+2      	; 0xdee8 <_ZL38scoutPeripheralStateChangeTimerHandlerP11SYS_Timer_t+0xf6>
    dee6:	10 e0       	ldi	r17, 0x00	; 0
    dee8:	c1 2f       	mov	r28, r17
    deea:	d0 e0       	ldi	r29, 0x00	; 0
    deec:	20 91 e8 35 	lds	r18, 0x35E8
    def0:	30 e0       	ldi	r19, 0x00	; 0
    def2:	2c 17       	cp	r18, r28
    def4:	3d 07       	cpc	r19, r29
    def6:	f9 f0       	breq	.+62     	; 0xdf36 <_ZL38scoutPeripheralStateChangeTimerHandlerP11SYS_Timer_t+0x144>
    def8:	80 91 eb 35 	lds	r24, 0x35EB
    defc:	88 23       	and	r24, r24
    defe:	99 f0       	breq	.+38     	; 0xdf26 <_ZL38scoutPeripheralStateChangeTimerHandlerP11SYS_Timer_t+0x134>
    df00:	6b ee       	ldi	r22, 0xEB	; 235
    df02:	7a e0       	ldi	r23, 0x0A	; 10
    df04:	84 e0       	ldi	r24, 0x04	; 4
    df06:	94 e2       	ldi	r25, 0x24	; 36
    df08:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
    df0c:	4a e0       	ldi	r20, 0x0A	; 10
    df0e:	50 e0       	ldi	r21, 0x00	; 0
    df10:	be 01       	movw	r22, r28
    df12:	84 e0       	ldi	r24, 0x04	; 4
    df14:	94 e2       	ldi	r25, 0x24	; 36
    df16:	0e 94 91 10 	call	0x2122	; 0x2122 <_ZN5Print5printEji>
    df1a:	69 ee       	ldi	r22, 0xE9	; 233
    df1c:	7a e0       	ldi	r23, 0x0A	; 10
    df1e:	84 e0       	ldi	r24, 0x04	; 4
    df20:	94 e2       	ldi	r25, 0x24	; 36
    df22:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <_ZN5Print7printlnEPK19__FlashStringHelper>
    df26:	10 93 e8 35 	sts	0x35E8, r17
    df2a:	e0 91 b9 35 	lds	r30, 0x35B9
    df2e:	f0 91 ba 35 	lds	r31, 0x35BA
    df32:	81 2f       	mov	r24, r17
    df34:	19 95       	eicall
    df36:	80 91 bb 35 	lds	r24, 0x35BB
    df3a:	90 91 bc 35 	lds	r25, 0x35BC
    df3e:	89 2b       	or	r24, r25
    df40:	71 f1       	breq	.+92     	; 0xdf9e <_ZL38scoutPeripheralStateChangeTimerHandlerP11SYS_Timer_t+0x1ac>
    df42:	82 e1       	ldi	r24, 0x12	; 18
    df44:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <digitalRead>
    df48:	11 e0       	ldi	r17, 0x01	; 1
    df4a:	89 2b       	or	r24, r25
    df4c:	09 f0       	breq	.+2      	; 0xdf50 <_ZL38scoutPeripheralStateChangeTimerHandlerP11SYS_Timer_t+0x15e>
    df4e:	10 e0       	ldi	r17, 0x00	; 0
    df50:	c1 2f       	mov	r28, r17
    df52:	d0 e0       	ldi	r29, 0x00	; 0
    df54:	20 91 e9 35 	lds	r18, 0x35E9
    df58:	30 e0       	ldi	r19, 0x00	; 0
    df5a:	2c 17       	cp	r18, r28
    df5c:	3d 07       	cpc	r19, r29
    df5e:	f9 f0       	breq	.+62     	; 0xdf9e <_ZL38scoutPeripheralStateChangeTimerHandlerP11SYS_Timer_t+0x1ac>
    df60:	80 91 eb 35 	lds	r24, 0x35EB
    df64:	88 23       	and	r24, r24
    df66:	99 f0       	breq	.+38     	; 0xdf8e <_ZL38scoutPeripheralStateChangeTimerHandlerP11SYS_Timer_t+0x19c>
    df68:	6d eb       	ldi	r22, 0xBD	; 189
    df6a:	7a e0       	ldi	r23, 0x0A	; 10
    df6c:	84 e0       	ldi	r24, 0x04	; 4
    df6e:	94 e2       	ldi	r25, 0x24	; 36
    df70:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
    df74:	4a e0       	ldi	r20, 0x0A	; 10
    df76:	50 e0       	ldi	r21, 0x00	; 0
    df78:	be 01       	movw	r22, r28
    df7a:	84 e0       	ldi	r24, 0x04	; 4
    df7c:	94 e2       	ldi	r25, 0x24	; 36
    df7e:	0e 94 91 10 	call	0x2122	; 0x2122 <_ZN5Print5printEji>
    df82:	6b eb       	ldi	r22, 0xBB	; 187
    df84:	7a e0       	ldi	r23, 0x0A	; 10
    df86:	84 e0       	ldi	r24, 0x04	; 4
    df88:	94 e2       	ldi	r25, 0x24	; 36
    df8a:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <_ZN5Print7printlnEPK19__FlashStringHelper>
    df8e:	10 93 e9 35 	sts	0x35E9, r17
    df92:	e0 91 bb 35 	lds	r30, 0x35BB
    df96:	f0 91 bc 35 	lds	r31, 0x35BC
    df9a:	81 2f       	mov	r24, r17
    df9c:	19 95       	eicall
    df9e:	80 91 bd 35 	lds	r24, 0x35BD
    dfa2:	90 91 be 35 	lds	r25, 0x35BE
    dfa6:	89 2b       	or	r24, r25
    dfa8:	81 f1       	breq	.+96     	; 0xe00a <_ZL38scoutPeripheralStateChangeTimerHandlerP11SYS_Timer_t+0x218>
    dfaa:	80 ea       	ldi	r24, 0xA0	; 160
    dfac:	95 e3       	ldi	r25, 0x35	; 53
    dfae:	f4 dc       	rcall	.-1560   	; 0xd998 <_ZN13PinoccioClass14getTemperatureEv>
    dfb0:	18 2f       	mov	r17, r24
    dfb2:	c8 2f       	mov	r28, r24
    dfb4:	dd 27       	eor	r29, r29
    dfb6:	c7 fd       	sbrc	r28, 7
    dfb8:	d0 95       	com	r29
    dfba:	20 91 ea 35 	lds	r18, 0x35EA
    dfbe:	30 e0       	ldi	r19, 0x00	; 0
    dfc0:	2c 17       	cp	r18, r28
    dfc2:	3d 07       	cpc	r19, r29
    dfc4:	11 f1       	breq	.+68     	; 0xe00a <_ZL38scoutPeripheralStateChangeTimerHandlerP11SYS_Timer_t+0x218>
    dfc6:	80 91 eb 35 	lds	r24, 0x35EB
    dfca:	88 23       	and	r24, r24
    dfcc:	99 f0       	breq	.+38     	; 0xdff4 <_ZL38scoutPeripheralStateChangeTimerHandlerP11SYS_Timer_t+0x202>
    dfce:	69 e9       	ldi	r22, 0x99	; 153
    dfd0:	7a e0       	ldi	r23, 0x0A	; 10
    dfd2:	84 e0       	ldi	r24, 0x04	; 4
    dfd4:	94 e2       	ldi	r25, 0x24	; 36
    dfd6:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
    dfda:	4a e0       	ldi	r20, 0x0A	; 10
    dfdc:	50 e0       	ldi	r21, 0x00	; 0
    dfde:	be 01       	movw	r22, r28
    dfe0:	84 e0       	ldi	r24, 0x04	; 4
    dfe2:	94 e2       	ldi	r25, 0x24	; 36
    dfe4:	0e 94 91 10 	call	0x2122	; 0x2122 <_ZN5Print5printEji>
    dfe8:	67 e9       	ldi	r22, 0x97	; 151
    dfea:	7a e0       	ldi	r23, 0x0A	; 10
    dfec:	84 e0       	ldi	r24, 0x04	; 4
    dfee:	94 e2       	ldi	r25, 0x24	; 36
    dff0:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <_ZN5Print7printlnEPK19__FlashStringHelper>
    dff4:	10 93 ea 35 	sts	0x35EA, r17
    dff8:	e0 91 bd 35 	lds	r30, 0x35BD
    dffc:	f0 91 be 35 	lds	r31, 0x35BE
    e000:	81 2f       	mov	r24, r17
    e002:	df 91       	pop	r29
    e004:	cf 91       	pop	r28
    e006:	1f 91       	pop	r17
    e008:	19 94       	eijmp
    e00a:	df 91       	pop	r29
    e00c:	cf 91       	pop	r28
    e00e:	1f 91       	pop	r17
    e010:	08 95       	ret

0000e012 <_ZN13PinoccioScoutC1Ev>:
    e012:	cf 93       	push	r28
    e014:	df 93       	push	r29
    e016:	ec 01       	movw	r28, r24
    e018:	a7 dc       	rcall	.-1714   	; 0xd968 <_ZN13PinoccioClassC1Ev>
    e01a:	ce 01       	movw	r24, r28
    e01c:	84 5b       	subi	r24, 0xB4	; 180
    e01e:	9f 4f       	sbci	r25, 0xFF	; 255
    e020:	0e 94 df 5e 	call	0xbdbe	; 0xbdbe <_ZN4PBBPC1Ev>
    e024:	ce 01       	movw	r24, r28
    e026:	89 5a       	subi	r24, 0xA9	; 169
    e028:	9f 4f       	sbci	r25, 0xFF	; 255
    e02a:	0e 94 eb 64 	call	0xc9d6	; 0xc9d6 <_ZN12WiFiBackpackC1Ev>
    e02e:	ce 01       	movw	r24, r28
    e030:	85 5b       	subi	r24, 0xB5	; 181
    e032:	9c 4f       	sbci	r25, 0xFC	; 252
    e034:	0e 94 51 78 	call	0xf0a2	; 0xf0a2 <_ZN20PinoccioScoutHandlerC1Ev>
    e038:	1a 8a       	std	Y+18, r1	; 0x12
    e03a:	19 8a       	std	Y+17, r1	; 0x11
    e03c:	1c 8a       	std	Y+20, r1	; 0x14
    e03e:	1b 8a       	std	Y+19, r1	; 0x13
    e040:	1e 8a       	std	Y+22, r1	; 0x16
    e042:	1d 8a       	std	Y+21, r1	; 0x15
    e044:	18 8e       	std	Y+24, r1	; 0x18
    e046:	1f 8a       	std	Y+23, r1	; 0x17
    e048:	1a 8e       	std	Y+26, r1	; 0x1a
    e04a:	19 8e       	std	Y+25, r1	; 0x19
    e04c:	1c 8e       	std	Y+28, r1	; 0x1c
    e04e:	1b 8e       	std	Y+27, r1	; 0x1b
    e050:	1e 8e       	std	Y+30, r1	; 0x1e
    e052:	1d 8e       	std	Y+29, r1	; 0x1d
    e054:	fe 01       	movw	r30, r28
    e056:	eb 5a       	subi	r30, 0xAB	; 171
    e058:	fc 4f       	sbci	r31, 0xFC	; 252
    e05a:	42 e3       	ldi	r20, 0x32	; 50
    e05c:	50 e0       	ldi	r21, 0x00	; 0
    e05e:	60 e0       	ldi	r22, 0x00	; 0
    e060:	70 e0       	ldi	r23, 0x00	; 0
    e062:	40 83       	st	Z, r20
    e064:	51 83       	std	Z+1, r21	; 0x01
    e066:	62 83       	std	Z+2, r22	; 0x02
    e068:	73 83       	std	Z+3, r23	; 0x03
    e06a:	34 96       	adiw	r30, 0x04	; 4
    e06c:	21 e0       	ldi	r18, 0x01	; 1
    e06e:	20 83       	st	Z, r18
    e070:	31 96       	adiw	r30, 0x01	; 1
    e072:	8f eb       	ldi	r24, 0xBF	; 191
    e074:	92 e7       	ldi	r25, 0x72	; 114
    e076:	91 83       	std	Z+1, r25	; 0x01
    e078:	80 83       	st	Z, r24
    e07a:	38 96       	adiw	r30, 0x08	; 8
    e07c:	40 e6       	ldi	r20, 0x60	; 96
    e07e:	5a ee       	ldi	r21, 0xEA	; 234
    e080:	60 e0       	ldi	r22, 0x00	; 0
    e082:	70 e0       	ldi	r23, 0x00	; 0
    e084:	40 83       	st	Z, r20
    e086:	51 83       	std	Z+1, r21	; 0x01
    e088:	62 83       	std	Z+2, r22	; 0x02
    e08a:	73 83       	std	Z+3, r23	; 0x03
    e08c:	34 96       	adiw	r30, 0x04	; 4
    e08e:	20 83       	st	Z, r18
    e090:	31 96       	adiw	r30, 0x01	; 1
    e092:	8c e2       	ldi	r24, 0x2C	; 44
    e094:	92 e7       	ldi	r25, 0x72	; 114
    e096:	91 83       	std	Z+1, r25	; 0x01
    e098:	80 83       	st	Z, r24
    e09a:	38 96       	adiw	r30, 0x08	; 8
    e09c:	40 83       	st	Z, r20
    e09e:	51 83       	std	Z+1, r21	; 0x01
    e0a0:	62 83       	std	Z+2, r22	; 0x02
    e0a2:	73 83       	std	Z+3, r23	; 0x03
    e0a4:	34 96       	adiw	r30, 0x04	; 4
    e0a6:	20 83       	st	Z, r18
    e0a8:	31 96       	adiw	r30, 0x01	; 1
    e0aa:	89 ef       	ldi	r24, 0xF9	; 249
    e0ac:	9e e6       	ldi	r25, 0x6E	; 110
    e0ae:	91 83       	std	Z+1, r25	; 0x01
    e0b0:	80 83       	st	Z, r24
    e0b2:	e9 52       	subi	r30, 0x29	; 41
    e0b4:	f3 40       	sbci	r31, 0x03	; 3
    e0b6:	10 82       	st	Z, r1
    e0b8:	c2 5b       	subi	r28, 0xB2	; 178
    e0ba:	dc 4f       	sbci	r29, 0xFC	; 252
    e0bc:	18 82       	st	Y, r1
    e0be:	df 91       	pop	r29
    e0c0:	cf 91       	pop	r28
    e0c2:	08 95       	ret

0000e0c4 <_ZN13PinoccioScoutD1Ev>:
    e0c4:	cf 93       	push	r28
    e0c6:	df 93       	push	r29
    e0c8:	ec 01       	movw	r28, r24
    e0ca:	85 5b       	subi	r24, 0xB5	; 181
    e0cc:	9c 4f       	sbci	r25, 0xFC	; 252
    e0ce:	ea d7       	rcall	.+4052   	; 0xf0a4 <_ZN20PinoccioScoutHandlerD1Ev>
    e0d0:	ce 01       	movw	r24, r28
    e0d2:	89 5a       	subi	r24, 0xA9	; 169
    e0d4:	9f 4f       	sbci	r25, 0xFF	; 255
    e0d6:	0e 94 07 65 	call	0xca0e	; 0xca0e <_ZN12WiFiBackpackD1Ev>
    e0da:	ce 01       	movw	r24, r28
    e0dc:	df 91       	pop	r29
    e0de:	cf 91       	pop	r28
    e0e0:	47 cc       	rjmp	.-1906   	; 0xd970 <_ZN13PinoccioClassD1Ev>

0000e0e2 <_ZN13PinoccioScout4loopEv>:
    e0e2:	cf 93       	push	r28
    e0e4:	df 93       	push	r29
    e0e6:	ec 01       	movw	r28, r24
    e0e8:	44 dc       	rcall	.-1912   	; 0xd972 <_ZN13PinoccioClass4loopEv>
    e0ea:	8e ee       	ldi	r24, 0xEE	; 238
    e0ec:	99 e3       	ldi	r25, 0x39	; 57
    e0ee:	0e 94 5b a3 	call	0x146b6	; 0x146b6 <_ZN13PinoccioShell4loopEv>
    e0f2:	ce 01       	movw	r24, r28
    e0f4:	85 5b       	subi	r24, 0xB5	; 181
    e0f6:	9c 4f       	sbci	r25, 0xFC	; 252
    e0f8:	0e 94 0f 7d 	call	0xfa1e	; 0xfa1e <_ZN20PinoccioScoutHandler4loopEv>
    e0fc:	81 e0       	ldi	r24, 0x01	; 1
    e0fe:	90 e0       	ldi	r25, 0x00	; 0
    e100:	0e 94 58 64 	call	0xc8b0	; 0xc8b0 <_ZN9Backpacks14isModelPresentEj>
    e104:	88 23       	and	r24, r24
    e106:	39 f0       	breq	.+14     	; 0xe116 <_ZN13PinoccioScout4loopEv+0x34>
    e108:	ce 01       	movw	r24, r28
    e10a:	89 5a       	subi	r24, 0xA9	; 169
    e10c:	9f 4f       	sbci	r25, 0xFF	; 255
    e10e:	df 91       	pop	r29
    e110:	cf 91       	pop	r28
    e112:	0c 94 41 65 	jmp	0xca82	; 0xca82 <_ZN12WiFiBackpack4loopEv>
    e116:	df 91       	pop	r29
    e118:	cf 91       	pop	r28
    e11a:	08 95       	ret

0000e11c <_ZN13PinoccioScout17isBatteryChargingEv>:
    e11c:	88 5b       	subi	r24, 0xB8	; 184
    e11e:	9f 4f       	sbci	r25, 0xFF	; 255
    e120:	fc 01       	movw	r30, r24
    e122:	80 81       	ld	r24, Z
    e124:	08 95       	ret

0000e126 <_ZN13PinoccioScout20getBatteryPercentageEv>:
    e126:	8b 5b       	subi	r24, 0xBB	; 187
    e128:	9f 4f       	sbci	r25, 0xFF	; 255
    e12a:	fc 01       	movw	r30, r24
    e12c:	80 81       	ld	r24, Z
    e12e:	90 e0       	ldi	r25, 0x00	; 0
    e130:	08 95       	ret

0000e132 <_ZN13PinoccioScout17getBatteryVoltageEv>:
    e132:	8a 5b       	subi	r24, 0xBA	; 186
    e134:	9f 4f       	sbci	r25, 0xFF	; 255
    e136:	fc 01       	movw	r30, r24
    e138:	80 81       	ld	r24, Z
    e13a:	91 81       	ldd	r25, Z+1	; 0x01
    e13c:	08 95       	ret

0000e13e <_ZN13PinoccioScout17enableBackpackVccEv>:

void PinoccioScout::enableBackpackVcc() {
  isVccEnabled = true;
    e13e:	84 5b       	subi	r24, 0xB4	; 180
    e140:	9c 4f       	sbci	r25, 0xFC	; 252
    e142:	21 e0       	ldi	r18, 0x01	; 1
    e144:	fc 01       	movw	r30, r24
    e146:	20 83       	st	Z, r18
  digitalWrite(VCC_ENABLE, HIGH);
    e148:	61 e0       	ldi	r22, 0x01	; 1
    e14a:	81 e1       	ldi	r24, 0x11	; 17
    e14c:	0c 94 5f 16 	jmp	0x2cbe	; 0x2cbe <digitalWrite>

0000e150 <_ZN13PinoccioScout18disableBackpackVccEv>:
}

void PinoccioScout::disableBackpackVcc() {
  isVccEnabled = false;
    e150:	84 5b       	subi	r24, 0xB4	; 180
    e152:	9c 4f       	sbci	r25, 0xFC	; 252
    e154:	fc 01       	movw	r30, r24
    e156:	10 82       	st	Z, r1
  digitalWrite(VCC_ENABLE, LOW);
    e158:	60 e0       	ldi	r22, 0x00	; 0
    e15a:	81 e1       	ldi	r24, 0x11	; 17
    e15c:	0c 94 5f 16 	jmp	0x2cbe	; 0x2cbe <digitalWrite>

0000e160 <_ZN13PinoccioScout20isBackpackVccEnabledEv>:
}

bool PinoccioScout::isBackpackVccEnabled() {
  return isVccEnabled;
    e160:	84 5b       	subi	r24, 0xB4	; 180
    e162:	9c 4f       	sbci	r25, 0xFC	; 252
}
    e164:	fc 01       	movw	r30, r24
    e166:	80 81       	ld	r24, Z
    e168:	08 95       	ret

0000e16a <_ZN13PinoccioScout11isLeadScoutEv>:

bool PinoccioScout::isLeadScout() {
  // Check for attached wifi backpack (model id 0x0001)
  return Backpacks::isModelPresent(0x0001);
    e16a:	81 e0       	ldi	r24, 0x01	; 1
    e16c:	90 e0       	ldi	r25, 0x00	; 0
    e16e:	0c 94 58 64 	jmp	0xc8b0	; 0xc8b0 <_ZN9Backpacks14isModelPresentEj>

0000e172 <_ZN13PinoccioScout12factoryResetEv>:
}

bool PinoccioScout::factoryReset() {
  if (!isFactoryResetReady) {
    e172:	fc 01       	movw	r30, r24
    e174:	e2 5b       	subi	r30, 0xB2	; 178
    e176:	fc 4f       	sbci	r31, 0xFC	; 252
    e178:	80 81       	ld	r24, Z
    e17a:	81 11       	cpse	r24, r1
    e17c:	02 c0       	rjmp	.+4      	; 0xe182 <_ZN13PinoccioScout12factoryResetEv+0x10>
    isFactoryResetReady = true;
    e17e:	91 e0       	ldi	r25, 0x01	; 1
    e180:	90 83       	st	Z, r25
    return false;
  } else {
    return true;
  }
}
    e182:	08 95       	ret

0000e184 <_ZN13PinoccioScout29startDigitalStateChangeEventsEv>:

void PinoccioScout::startDigitalStateChangeEvents() {
  SYS_TimerStart(&digitalStateChangeTimer);
    e184:	81 5b       	subi	r24, 0xB1	; 177
    e186:	9c 4f       	sbci	r25, 0xFC	; 252
    e188:	0c 94 2f 5a 	jmp	0xb45e	; 0xb45e <SYS_TimerStart>

0000e18c <_ZN13PinoccioScout28stopDigitalStateChangeEventsEv>:
}

void PinoccioScout::stopDigitalStateChangeEvents() {
  SYS_TimerStop(&digitalStateChangeTimer);
    e18c:	81 5b       	subi	r24, 0xB1	; 177
    e18e:	9c 4f       	sbci	r25, 0xFC	; 252
    e190:	0c 94 d5 59 	jmp	0xb3aa	; 0xb3aa <SYS_TimerStop>

0000e194 <_ZN13PinoccioScout28startAnalogStateChangeEventsEv>:
}

void PinoccioScout::startAnalogStateChangeEvents() {
  SYS_TimerStart(&analogStateChangeTimer);
    e194:	84 5a       	subi	r24, 0xA4	; 164
    e196:	9c 4f       	sbci	r25, 0xFC	; 252
    e198:	0c 94 2f 5a 	jmp	0xb45e	; 0xb45e <SYS_TimerStart>

0000e19c <_ZN13PinoccioScout27stopAnalogStateChangeEventsEv>:
}

void PinoccioScout::stopAnalogStateChangeEvents() {
  SYS_TimerStop(&analogStateChangeTimer);
    e19c:	84 5a       	subi	r24, 0xA4	; 164
    e19e:	9c 4f       	sbci	r25, 0xFC	; 252
    e1a0:	0c 94 d5 59 	jmp	0xb3aa	; 0xb3aa <SYS_TimerStop>

0000e1a4 <_ZN13PinoccioScout32startPeripheralStateChangeEventsEv>:
}

void PinoccioScout::startPeripheralStateChangeEvents() {
  SYS_TimerStart(&peripheralStateChangeTimer);
    e1a4:	87 59       	subi	r24, 0x97	; 151
    e1a6:	9c 4f       	sbci	r25, 0xFC	; 252
    e1a8:	0c 94 2f 5a 	jmp	0xb45e	; 0xb45e <SYS_TimerStart>

0000e1ac <_ZN13PinoccioScout31stopPeripheralStateChangeEventsEv>:
}

void PinoccioScout::stopPeripheralStateChangeEvents() {
  SYS_TimerStop(&peripheralStateChangeTimer);
    e1ac:	87 59       	subi	r24, 0x97	; 151
    e1ae:	9c 4f       	sbci	r25, 0xFC	; 252
    e1b0:	0c 94 d5 59 	jmp	0xb3aa	; 0xb3aa <SYS_TimerStop>

0000e1b4 <_ZN13PinoccioScout24setStateChangeEventCycleEmmm>:
}

void PinoccioScout::setStateChangeEventCycle(uint32_t digitalInterval, uint32_t analogInterval, uint32_t peripheralInterval) {
    e1b4:	6f 92       	push	r6
    e1b6:	7f 92       	push	r7
    e1b8:	8f 92       	push	r8
    e1ba:	9f 92       	push	r9
    e1bc:	af 92       	push	r10
    e1be:	bf 92       	push	r11
    e1c0:	cf 92       	push	r12
    e1c2:	df 92       	push	r13
    e1c4:	ef 92       	push	r14
    e1c6:	ff 92       	push	r15
    e1c8:	0f 93       	push	r16
    e1ca:	1f 93       	push	r17
    e1cc:	cf 93       	push	r28
    e1ce:	df 93       	push	r29
    e1d0:	00 d0       	rcall	.+0      	; 0xe1d2 <_ZN13PinoccioScout24setStateChangeEventCycleEmmm+0x1e>
    e1d2:	1f 92       	push	r1
    e1d4:	cd b7       	in	r28, 0x3d	; 61
    e1d6:	de b7       	in	r29, 0x3e	; 62
    e1d8:	3c 01       	movw	r6, r24
    e1da:	48 01       	movw	r8, r16
    e1dc:	59 01       	movw	r10, r18
void PinoccioScout::startDigitalStateChangeEvents() {
  SYS_TimerStart(&digitalStateChangeTimer);
}

void PinoccioScout::stopDigitalStateChangeEvents() {
  SYS_TimerStop(&digitalStateChangeTimer);
    e1de:	8c 01       	movw	r16, r24
    e1e0:	01 5b       	subi	r16, 0xB1	; 177
    e1e2:	1c 4f       	sbci	r17, 0xFC	; 252
    e1e4:	c8 01       	movw	r24, r16
    e1e6:	49 83       	std	Y+1, r20	; 0x01
    e1e8:	5a 83       	std	Y+2, r21	; 0x02
    e1ea:	6b 83       	std	Y+3, r22	; 0x03
    e1ec:	7c 83       	std	Y+4, r23	; 0x04
    e1ee:	0e 94 d5 59 	call	0xb3aa	; 0xb3aa <SYS_TimerStop>
  SYS_TimerStop(&peripheralStateChangeTimer);
}

void PinoccioScout::setStateChangeEventCycle(uint32_t digitalInterval, uint32_t analogInterval, uint32_t peripheralInterval) {
  stopDigitalStateChangeEvents();
  digitalStateChangeTimer.interval = digitalInterval;
    e1f2:	f3 01       	movw	r30, r6
    e1f4:	eb 5a       	subi	r30, 0xAB	; 171
    e1f6:	fc 4f       	sbci	r31, 0xFC	; 252
    e1f8:	49 81       	ldd	r20, Y+1	; 0x01
    e1fa:	5a 81       	ldd	r21, Y+2	; 0x02
    e1fc:	6b 81       	ldd	r22, Y+3	; 0x03
    e1fe:	7c 81       	ldd	r23, Y+4	; 0x04
    e200:	40 83       	st	Z, r20
    e202:	51 83       	std	Z+1, r21	; 0x01
    e204:	62 83       	std	Z+2, r22	; 0x02
    e206:	73 83       	std	Z+3, r23	; 0x03
    return true;
  }
}

void PinoccioScout::startDigitalStateChangeEvents() {
  SYS_TimerStart(&digitalStateChangeTimer);
    e208:	c8 01       	movw	r24, r16
    e20a:	0e 94 2f 5a 	call	0xb45e	; 0xb45e <SYS_TimerStart>
void PinoccioScout::startAnalogStateChangeEvents() {
  SYS_TimerStart(&analogStateChangeTimer);
}

void PinoccioScout::stopAnalogStateChangeEvents() {
  SYS_TimerStop(&analogStateChangeTimer);
    e20e:	03 5f       	subi	r16, 0xF3	; 243
    e210:	1f 4f       	sbci	r17, 0xFF	; 255
    e212:	c8 01       	movw	r24, r16
    e214:	0e 94 d5 59 	call	0xb3aa	; 0xb3aa <SYS_TimerStop>
  stopDigitalStateChangeEvents();
  digitalStateChangeTimer.interval = digitalInterval;
  startDigitalStateChangeEvents();

  stopAnalogStateChangeEvents();
  analogStateChangeTimer.interval = analogInterval;
    e218:	f3 01       	movw	r30, r6
    e21a:	ee 59       	subi	r30, 0x9E	; 158
    e21c:	fc 4f       	sbci	r31, 0xFC	; 252
    e21e:	80 82       	st	Z, r8
    e220:	91 82       	std	Z+1, r9	; 0x01
    e222:	a2 82       	std	Z+2, r10	; 0x02
    e224:	b3 82       	std	Z+3, r11	; 0x03
void PinoccioScout::stopDigitalStateChangeEvents() {
  SYS_TimerStop(&digitalStateChangeTimer);
}

void PinoccioScout::startAnalogStateChangeEvents() {
  SYS_TimerStart(&analogStateChangeTimer);
    e226:	c8 01       	movw	r24, r16
    e228:	0e 94 2f 5a 	call	0xb45e	; 0xb45e <SYS_TimerStart>
void PinoccioScout::startPeripheralStateChangeEvents() {
  SYS_TimerStart(&peripheralStateChangeTimer);
}

void PinoccioScout::stopPeripheralStateChangeEvents() {
  SYS_TimerStop(&peripheralStateChangeTimer);
    e22c:	53 01       	movw	r10, r6
    e22e:	87 e9       	ldi	r24, 0x97	; 151
    e230:	a8 1a       	sub	r10, r24
    e232:	8c ef       	ldi	r24, 0xFC	; 252
    e234:	b8 0a       	sbc	r11, r24
    e236:	c5 01       	movw	r24, r10
    e238:	0e 94 d5 59 	call	0xb3aa	; 0xb3aa <SYS_TimerStop>
  stopAnalogStateChangeEvents();
  analogStateChangeTimer.interval = analogInterval;
  startAnalogStateChangeEvents();

  stopPeripheralStateChangeEvents();
  peripheralStateChangeTimer.interval = peripheralInterval;
    e23c:	f3 01       	movw	r30, r6
    e23e:	e1 59       	subi	r30, 0x91	; 145
    e240:	fc 4f       	sbci	r31, 0xFC	; 252
    e242:	c0 82       	st	Z, r12
    e244:	d1 82       	std	Z+1, r13	; 0x01
    e246:	e2 82       	std	Z+2, r14	; 0x02
    e248:	f3 82       	std	Z+3, r15	; 0x03
void PinoccioScout::stopAnalogStateChangeEvents() {
  SYS_TimerStop(&analogStateChangeTimer);
}

void PinoccioScout::startPeripheralStateChangeEvents() {
  SYS_TimerStart(&peripheralStateChangeTimer);
    e24a:	c5 01       	movw	r24, r10
  startAnalogStateChangeEvents();

  stopPeripheralStateChangeEvents();
  peripheralStateChangeTimer.interval = peripheralInterval;
  startPeripheralStateChangeEvents();
}
    e24c:	0f 90       	pop	r0
    e24e:	0f 90       	pop	r0
    e250:	0f 90       	pop	r0
    e252:	0f 90       	pop	r0
    e254:	df 91       	pop	r29
    e256:	cf 91       	pop	r28
    e258:	1f 91       	pop	r17
    e25a:	0f 91       	pop	r16
    e25c:	ff 90       	pop	r15
    e25e:	ef 90       	pop	r14
    e260:	df 90       	pop	r13
    e262:	cf 90       	pop	r12
    e264:	bf 90       	pop	r11
    e266:	af 90       	pop	r10
    e268:	9f 90       	pop	r9
    e26a:	8f 90       	pop	r8
    e26c:	7f 90       	pop	r7
    e26e:	6f 90       	pop	r6
void PinoccioScout::stopAnalogStateChangeEvents() {
  SYS_TimerStop(&analogStateChangeTimer);
}

void PinoccioScout::startPeripheralStateChangeEvents() {
  SYS_TimerStart(&peripheralStateChangeTimer);
    e270:	0c 94 2f 5a 	jmp	0xb45e	; 0xb45e <SYS_TimerStart>

0000e274 <_ZN13PinoccioScout10getPinModeEh>:

  return true;
}

bool PinoccioScout::isDigitalPin(uint8_t pin) {
  if (pin >= 2 && pin <= 8) {
    e274:	2e ef       	ldi	r18, 0xFE	; 254
    e276:	26 0f       	add	r18, r22
    e278:	27 30       	cpi	r18, 0x07	; 7
    e27a:	28 f4       	brcc	.+10     	; 0xe286 <_ZN13PinoccioScout10getPinModeEh+0x12>
  }
}

int8_t PinoccioScout::getPinMode(uint8_t pin) {
  if (isDigitalPin(pin)) {
    return digitalPinMode[pin-2];
    e27c:	fc 01       	movw	r30, r24
    e27e:	e6 0f       	add	r30, r22
    e280:	f1 1d       	adc	r31, r1
    e282:	84 a1       	ldd	r24, Z+36	; 0x24
    e284:	08 95       	ret
  }
  return false;
}

bool PinoccioScout::isAnalogPin(uint8_t pin) {
  if (pin >= A0 && pin <= A0 + NUM_ANALOG_INPUTS) {
    e286:	28 ee       	ldi	r18, 0xE8	; 232
    e288:	26 0f       	add	r18, r22
    e28a:	29 30       	cpi	r18, 0x09	; 9
    e28c:	28 f4       	brcc	.+10     	; 0xe298 <_ZN13PinoccioScout10getPinModeEh+0x24>
  if (isDigitalPin(pin)) {
    return digitalPinMode[pin-2];
  }

  if (isAnalogPin(pin)) {
    return analogPinMode[pin-A0];
    e28e:	fc 01       	movw	r30, r24
    e290:	e6 0f       	add	r30, r22
    e292:	f1 1d       	adc	r31, r1
    e294:	85 a1       	ldd	r24, Z+37	; 0x25
    e296:	08 95       	ret
  }
}
    e298:	08 95       	ret

0000e29a <_ZN13PinoccioScout12isDigitalPinEh>:

  return true;
}

bool PinoccioScout::isDigitalPin(uint8_t pin) {
  if (pin >= 2 && pin <= 8) {
    e29a:	62 50       	subi	r22, 0x02	; 2
    e29c:	81 e0       	ldi	r24, 0x01	; 1
    e29e:	67 30       	cpi	r22, 0x07	; 7
    e2a0:	08 f0       	brcs	.+2      	; 0xe2a4 <_ZN13PinoccioScout12isDigitalPinEh+0xa>
    e2a2:	80 e0       	ldi	r24, 0x00	; 0
    return true;
  }
  return false;
}
    e2a4:	08 95       	ret

0000e2a6 <_ZN13PinoccioScout11isAnalogPinEh>:

bool PinoccioScout::isAnalogPin(uint8_t pin) {
  if (pin >= A0 && pin <= A0 + NUM_ANALOG_INPUTS) {
    e2a6:	68 51       	subi	r22, 0x18	; 24
    e2a8:	81 e0       	ldi	r24, 0x01	; 1
    e2aa:	69 30       	cpi	r22, 0x09	; 9
    e2ac:	08 f0       	brcs	.+2      	; 0xe2b0 <_ZN13PinoccioScout11isAnalogPinEh+0xa>
    e2ae:	80 e0       	ldi	r24, 0x00	; 0
    return true;
  }
  return false;
}
    e2b0:	08 95       	ret

0000e2b2 <_ZN13PinoccioScout7pinReadEh>:
  }

  return true;
}

uint16_t PinoccioScout::pinRead(uint8_t pin) {
    e2b2:	cf 93       	push	r28
    e2b4:	df 93       	push	r29
    e2b6:	c6 2f       	mov	r28, r22

  return true;
}

bool PinoccioScout::isDigitalPin(uint8_t pin) {
  if (pin >= 2 && pin <= 8) {
    e2b8:	8e ef       	ldi	r24, 0xFE	; 254
    e2ba:	86 0f       	add	r24, r22
    e2bc:	87 30       	cpi	r24, 0x07	; 7
    e2be:	28 f4       	brcc	.+10     	; 0xe2ca <_ZN13PinoccioScout7pinReadEh+0x18>
    return digitalRead(pin);
  } else if (Scout.isAnalogPin(pin)) {
    if (Scout.getPinMode(pin) == INPUT) {
      return analogRead(pin-A0);
    } else {
      return digitalRead(pin);
    e2c0:	8c 2f       	mov	r24, r28
    }
  } else {
    return 0;
  }
}
    e2c2:	df 91       	pop	r29
    e2c4:	cf 91       	pop	r28
    return digitalRead(pin);
  } else if (Scout.isAnalogPin(pin)) {
    if (Scout.getPinMode(pin) == INPUT) {
      return analogRead(pin-A0);
    } else {
      return digitalRead(pin);
    e2c6:	0c 94 8f 16 	jmp	0x2d1e	; 0x2d1e <digitalRead>
  }
  return false;
}

bool PinoccioScout::isAnalogPin(uint8_t pin) {
  if (pin >= A0 && pin <= A0 + NUM_ANALOG_INPUTS) {
    e2ca:	d8 ee       	ldi	r29, 0xE8	; 232
    e2cc:	d6 0f       	add	r29, r22
    e2ce:	d9 30       	cpi	r29, 0x09	; 9
    e2d0:	50 f4       	brcc	.+20     	; 0xe2e6 <_ZN13PinoccioScout7pinReadEh+0x34>

uint16_t PinoccioScout::pinRead(uint8_t pin) {
  if (Scout.isDigitalPin(pin)) {
    return digitalRead(pin);
  } else if (Scout.isAnalogPin(pin)) {
    if (Scout.getPinMode(pin) == INPUT) {
    e2d2:	80 ea       	ldi	r24, 0xA0	; 160
    e2d4:	95 e3       	ldi	r25, 0x35	; 53
    e2d6:	ce df       	rcall	.-100    	; 0xe274 <_ZN13PinoccioScout10getPinModeEh>
    e2d8:	81 11       	cpse	r24, r1
    e2da:	f2 cf       	rjmp	.-28     	; 0xe2c0 <_ZN13PinoccioScout7pinReadEh+0xe>
      return analogRead(pin-A0);
    e2dc:	8d 2f       	mov	r24, r29
      return digitalRead(pin);
    }
  } else {
    return 0;
  }
}
    e2de:	df 91       	pop	r29
    e2e0:	cf 91       	pop	r28
uint16_t PinoccioScout::pinRead(uint8_t pin) {
  if (Scout.isDigitalPin(pin)) {
    return digitalRead(pin);
  } else if (Scout.isAnalogPin(pin)) {
    if (Scout.getPinMode(pin) == INPUT) {
      return analogRead(pin-A0);
    e2e2:	0c 94 de 14 	jmp	0x29bc	; 0x29bc <analogRead>
      return digitalRead(pin);
    }
  } else {
    return 0;
  }
}
    e2e6:	80 e0       	ldi	r24, 0x00	; 0
    e2e8:	90 e0       	ldi	r25, 0x00	; 0
    e2ea:	df 91       	pop	r29
    e2ec:	cf 91       	pop	r28
    e2ee:	08 95       	ret

0000e2f0 <_ZN13PinoccioScout14getPinFromNameEPKc>:

int8_t PinoccioScout::getPinFromName(const char* name) {
  uint8_t pin;

  if (name[0] == 'd') {
    e2f0:	fb 01       	movw	r30, r22
    e2f2:	90 81       	ld	r25, Z
    e2f4:	94 36       	cpi	r25, 0x64	; 100
    e2f6:	29 f4       	brne	.+10     	; 0xe302 <_ZN13PinoccioScout14getPinFromNameEPKc+0x12>
    pin = atoi(name+1);
    e2f8:	cb 01       	movw	r24, r22
    e2fa:	01 96       	adiw	r24, 0x01	; 1
    e2fc:	0e 94 67 b4 	call	0x168ce	; 0x168ce <atoi>
    e300:	07 c0       	rjmp	.+14     	; 0xe310 <_ZN13PinoccioScout14getPinFromNameEPKc+0x20>
  }

  if (name[0] == 'a') {
    e302:	91 36       	cpi	r25, 0x61	; 97
    e304:	29 f4       	brne	.+10     	; 0xe310 <_ZN13PinoccioScout14getPinFromNameEPKc+0x20>
    pin = atoi(name+1) + A0;
    e306:	cb 01       	movw	r24, r22
    e308:	01 96       	adiw	r24, 0x01	; 1
    e30a:	0e 94 67 b4 	call	0x168ce	; 0x168ce <atoi>
    e30e:	88 5e       	subi	r24, 0xE8	; 232

  return true;
}

bool PinoccioScout::isDigitalPin(uint8_t pin) {
  if (pin >= 2 && pin <= 8) {
    e310:	9e ef       	ldi	r25, 0xFE	; 254
    e312:	98 0f       	add	r25, r24
    e314:	97 30       	cpi	r25, 0x07	; 7
    e316:	30 f0       	brcs	.+12     	; 0xe324 <_ZN13PinoccioScout14getPinFromNameEPKc+0x34>
  }
  return false;
}

bool PinoccioScout::isAnalogPin(uint8_t pin) {
  if (pin >= A0 && pin <= A0 + NUM_ANALOG_INPUTS) {
    e318:	98 ee       	ldi	r25, 0xE8	; 232
    e31a:	98 0f       	add	r25, r24
    e31c:	99 30       	cpi	r25, 0x09	; 9
    e31e:	10 f0       	brcs	.+4      	; 0xe324 <_ZN13PinoccioScout14getPinFromNameEPKc+0x34>
  if (name[0] == 'a') {
    pin = atoi(name+1) + A0;
  }

  if (!isDigitalPin(pin) && !isAnalogPin(pin)) {
    return -1;
    e320:	8f ef       	ldi	r24, 0xFF	; 255
    e322:	08 95       	ret
  }

  return pin;
}
    e324:	08 95       	ret

0000e326 <_ZN13PinoccioScout13isPinReservedEh>:

bool PinoccioScout::isPinReserved(uint8_t pin) {
    e326:	26 2f       	mov	r18, r22
  return (Backpacks::used_pins & Pbbe::LogicalPin(pin).mask());
    e328:	40 91 5c 35 	lds	r20, 0x355C
    e32c:	50 91 5d 35 	lds	r21, 0x355D
    e330:	60 91 5e 35 	lds	r22, 0x355E
    e334:	70 91 5f 35 	lds	r23, 0x355F
    static const uint8_t NONE = 0xff;

    /** Bitmask for logical pins */
    typedef boost::uint_t<NUM_DIGITAL_PINS>::least mask_t;
    mask_t mask() {
      if (this->val != NONE)
    e338:	2f 3f       	cpi	r18, 0xFF	; 255
    e33a:	61 f0       	breq	.+24     	; 0xe354 <_ZN13PinoccioScout13isPinReservedEh+0x2e>
        return (mask_t)1 << this->val;
    e33c:	81 e0       	ldi	r24, 0x01	; 1
    e33e:	90 e0       	ldi	r25, 0x00	; 0
    e340:	a0 e0       	ldi	r26, 0x00	; 0
    e342:	b0 e0       	ldi	r27, 0x00	; 0
    e344:	04 c0       	rjmp	.+8      	; 0xe34e <_ZN13PinoccioScout13isPinReservedEh+0x28>
    e346:	88 0f       	add	r24, r24
    e348:	99 1f       	adc	r25, r25
    e34a:	aa 1f       	adc	r26, r26
    e34c:	bb 1f       	adc	r27, r27
    e34e:	2a 95       	dec	r18
    e350:	d2 f7       	brpl	.-12     	; 0xe346 <_ZN13PinoccioScout13isPinReservedEh+0x20>
    e352:	03 c0       	rjmp	.+6      	; 0xe35a <_ZN13PinoccioScout13isPinReservedEh+0x34>
      else
        return 0;
    e354:	80 e0       	ldi	r24, 0x00	; 0
    e356:	90 e0       	ldi	r25, 0x00	; 0
    e358:	dc 01       	movw	r26, r24
    e35a:	84 23       	and	r24, r20
    e35c:	95 23       	and	r25, r21
    e35e:	a6 23       	and	r26, r22
    e360:	b7 23       	and	r27, r23
    e362:	21 e0       	ldi	r18, 0x01	; 1
    e364:	89 2b       	or	r24, r25
    e366:	8a 2b       	or	r24, r26
    e368:	8b 2b       	or	r24, r27
    e36a:	09 f4       	brne	.+2      	; 0xe36e <_ZN13PinoccioScout13isPinReservedEh+0x48>
    e36c:	20 e0       	ldi	r18, 0x00	; 0
}
    e36e:	82 2f       	mov	r24, r18
    e370:	08 95       	ret

0000e372 <_ZN13PinoccioScout18getRegisterPinModeEh>:
  isBattCharging = (digitalRead(CHG_STATUS) == LOW);
  isBattAlarmTriggered = (digitalRead(BATT_ALARM) == LOW);
  temperature = this->getTemperature();
}

int8_t PinoccioScout::getRegisterPinMode(uint8_t pin) {
    e372:	cf 93       	push	r28
    e374:	c6 2f       	mov	r28, r22
  if (isPinReserved(pin)) {
    e376:	d7 df       	rcall	.-82     	; 0xe326 <_ZN13PinoccioScout13isPinReservedEh>
    e378:	81 11       	cpse	r24, r1
    e37a:	33 c0       	rjmp	.+102    	; 0xe3e2 <_ZN13PinoccioScout18getRegisterPinModeEh+0x70>
    return -1;
  }
  if ((~(*portModeRegister(digitalPinToPort(pin))) & digitalPinToBitMask(pin)) &&
    e37c:	6c 2f       	mov	r22, r28
    e37e:	70 e0       	ldi	r23, 0x00	; 0
    e380:	cb 01       	movw	r24, r22
    e382:	83 58       	subi	r24, 0x83	; 131
    e384:	9c 4f       	sbci	r25, 0xFC	; 252
    e386:	fc 01       	movw	r30, r24
    e388:	24 91       	lpm	r18, Z
    e38a:	e2 2f       	mov	r30, r18
    e38c:	f0 e0       	ldi	r31, 0x00	; 0
    e38e:	ee 0f       	add	r30, r30
    e390:	ff 1f       	adc	r31, r31
    e392:	ef 52       	subi	r30, 0x2F	; 47
    e394:	fc 4f       	sbci	r31, 0xFC	; 252
    e396:	a5 91       	lpm	r26, Z+
    e398:	b4 91       	lpm	r27, Z
    e39a:	2c 91       	ld	r18, X
    e39c:	63 5a       	subi	r22, 0xA3	; 163
    e39e:	7c 4f       	sbci	r23, 0xFC	; 252
    e3a0:	fb 01       	movw	r30, r22
    e3a2:	44 91       	lpm	r20, Z
    e3a4:	30 e0       	ldi	r19, 0x00	; 0
    e3a6:	20 95       	com	r18
    e3a8:	30 95       	com	r19
    e3aa:	50 e0       	ldi	r21, 0x00	; 0
    e3ac:	24 23       	and	r18, r20
    e3ae:	35 23       	and	r19, r21
    e3b0:	23 2b       	or	r18, r19
    e3b2:	c9 f0       	breq	.+50     	; 0xe3e6 <_ZN13PinoccioScout18getRegisterPinModeEh+0x74>
      (~(*portOutputRegister(digitalPinToPort(pin))) & digitalPinToBitMask(pin))) {
    e3b4:	fc 01       	movw	r30, r24
    e3b6:	24 91       	lpm	r18, Z
    e3b8:	e2 2f       	mov	r30, r18
    e3ba:	f0 e0       	ldi	r31, 0x00	; 0
    e3bc:	ee 0f       	add	r30, r30
    e3be:	ff 1f       	adc	r31, r31
    e3c0:	e9 54       	subi	r30, 0x49	; 73
    e3c2:	fc 4f       	sbci	r31, 0xFC	; 252
    e3c4:	a5 91       	lpm	r26, Z+
    e3c6:	b4 91       	lpm	r27, Z
    e3c8:	2c 91       	ld	r18, X
    e3ca:	fb 01       	movw	r30, r22
    e3cc:	44 91       	lpm	r20, Z
    e3ce:	30 e0       	ldi	r19, 0x00	; 0
    e3d0:	20 95       	com	r18
    e3d2:	30 95       	com	r19
    e3d4:	50 e0       	ldi	r21, 0x00	; 0
    e3d6:	24 23       	and	r18, r20
    e3d8:	35 23       	and	r19, r21

int8_t PinoccioScout::getRegisterPinMode(uint8_t pin) {
  if (isPinReserved(pin)) {
    return -1;
  }
  if ((~(*portModeRegister(digitalPinToPort(pin))) & digitalPinToBitMask(pin)) &&
    e3da:	23 2b       	or	r18, r19
    e3dc:	21 f0       	breq	.+8      	; 0xe3e6 <_ZN13PinoccioScout18getRegisterPinModeEh+0x74>
      (~(*portOutputRegister(digitalPinToPort(pin))) & digitalPinToBitMask(pin))) {
    return INPUT; // 0
    e3de:	80 e0       	ldi	r24, 0x00	; 0
    e3e0:	39 c0       	rjmp	.+114    	; 0xe454 <_ZN13PinoccioScout18getRegisterPinModeEh+0xe2>
  temperature = this->getTemperature();
}

int8_t PinoccioScout::getRegisterPinMode(uint8_t pin) {
  if (isPinReserved(pin)) {
    return -1;
    e3e2:	8f ef       	ldi	r24, 0xFF	; 255
    e3e4:	37 c0       	rjmp	.+110    	; 0xe454 <_ZN13PinoccioScout18getRegisterPinModeEh+0xe2>
  }
  if ((~(*portModeRegister(digitalPinToPort(pin))) & digitalPinToBitMask(pin)) &&
      (~(*portOutputRegister(digitalPinToPort(pin))) & digitalPinToBitMask(pin))) {
    return INPUT; // 0
  }
  if ((*portModeRegister(digitalPinToPort(pin)) & digitalPinToBitMask(pin))) {
    e3e6:	fc 01       	movw	r30, r24
    e3e8:	24 91       	lpm	r18, Z
    e3ea:	e2 2f       	mov	r30, r18
    e3ec:	f0 e0       	ldi	r31, 0x00	; 0
    e3ee:	ee 0f       	add	r30, r30
    e3f0:	ff 1f       	adc	r31, r31
    e3f2:	ef 52       	subi	r30, 0x2F	; 47
    e3f4:	fc 4f       	sbci	r31, 0xFC	; 252
    e3f6:	a5 91       	lpm	r26, Z+
    e3f8:	b4 91       	lpm	r27, Z
    e3fa:	2c 91       	ld	r18, X
    e3fc:	fb 01       	movw	r30, r22
    e3fe:	34 91       	lpm	r19, Z
    e400:	23 23       	and	r18, r19
    e402:	31 f5       	brne	.+76     	; 0xe450 <_ZN13PinoccioScout18getRegisterPinModeEh+0xde>
    return OUTPUT; // 1
  }
  if ((~(*portModeRegister(digitalPinToPort(pin))) & digitalPinToBitMask(pin)) &&
    e404:	fc 01       	movw	r30, r24
    e406:	24 91       	lpm	r18, Z
    e408:	e2 2f       	mov	r30, r18
    e40a:	f0 e0       	ldi	r31, 0x00	; 0
    e40c:	ee 0f       	add	r30, r30
    e40e:	ff 1f       	adc	r31, r31
    e410:	ef 52       	subi	r30, 0x2F	; 47
    e412:	fc 4f       	sbci	r31, 0xFC	; 252
    e414:	a5 91       	lpm	r26, Z+
    e416:	b4 91       	lpm	r27, Z
    e418:	2c 91       	ld	r18, X
    e41a:	fb 01       	movw	r30, r22
    e41c:	44 91       	lpm	r20, Z
    e41e:	30 e0       	ldi	r19, 0x00	; 0
    e420:	20 95       	com	r18
    e422:	30 95       	com	r19
    e424:	50 e0       	ldi	r21, 0x00	; 0
    e426:	24 23       	and	r18, r20
    e428:	35 23       	and	r19, r21
    e42a:	23 2b       	or	r18, r19
    e42c:	99 f0       	breq	.+38     	; 0xe454 <_ZN13PinoccioScout18getRegisterPinModeEh+0xe2>
      (*portOutputRegister(digitalPinToPort(pin)) & digitalPinToBitMask(pin))) {
    e42e:	fc 01       	movw	r30, r24
    e430:	84 91       	lpm	r24, Z
    e432:	e8 2f       	mov	r30, r24
    e434:	f0 e0       	ldi	r31, 0x00	; 0
    e436:	ee 0f       	add	r30, r30
    e438:	ff 1f       	adc	r31, r31
    e43a:	e9 54       	subi	r30, 0x49	; 73
    e43c:	fc 4f       	sbci	r31, 0xFC	; 252
    e43e:	a5 91       	lpm	r26, Z+
    e440:	b4 91       	lpm	r27, Z
    return INPUT; // 0
  }
  if ((*portModeRegister(digitalPinToPort(pin)) & digitalPinToBitMask(pin))) {
    return OUTPUT; // 1
  }
  if ((~(*portModeRegister(digitalPinToPort(pin))) & digitalPinToBitMask(pin)) &&
    e442:	8c 91       	ld	r24, X
      (*portOutputRegister(digitalPinToPort(pin)) & digitalPinToBitMask(pin))) {
    e444:	fb 01       	movw	r30, r22
    e446:	64 91       	lpm	r22, Z
    return INPUT; // 0
  }
  if ((*portModeRegister(digitalPinToPort(pin)) & digitalPinToBitMask(pin))) {
    return OUTPUT; // 1
  }
  if ((~(*portModeRegister(digitalPinToPort(pin))) & digitalPinToBitMask(pin)) &&
    e448:	86 23       	and	r24, r22
    e44a:	21 f0       	breq	.+8      	; 0xe454 <_ZN13PinoccioScout18getRegisterPinModeEh+0xe2>
      (*portOutputRegister(digitalPinToPort(pin)) & digitalPinToBitMask(pin))) {
    return INPUT_PULLUP; // 2
    e44c:	82 e0       	ldi	r24, 0x02	; 2
    e44e:	02 c0       	rjmp	.+4      	; 0xe454 <_ZN13PinoccioScout18getRegisterPinModeEh+0xe2>
  if ((~(*portModeRegister(digitalPinToPort(pin))) & digitalPinToBitMask(pin)) &&
      (~(*portOutputRegister(digitalPinToPort(pin))) & digitalPinToBitMask(pin))) {
    return INPUT; // 0
  }
  if ((*portModeRegister(digitalPinToPort(pin)) & digitalPinToBitMask(pin))) {
    return OUTPUT; // 1
    e450:	81 e0       	ldi	r24, 0x01	; 1
    e452:	00 c0       	rjmp	.+0      	; 0xe454 <_ZN13PinoccioScout18getRegisterPinModeEh+0xe2>
  }
  if ((~(*portModeRegister(digitalPinToPort(pin))) & digitalPinToBitMask(pin)) &&
      (*portOutputRegister(digitalPinToPort(pin)) & digitalPinToBitMask(pin))) {
    return INPUT_PULLUP; // 2
  }
}
    e454:	cf 91       	pop	r28
    e456:	08 95       	ret

0000e458 <_ZL34scoutAnalogStateChangeTimerHandlerP11SYS_Timer_t>:
      }
    }
  }
}

static void scoutAnalogStateChangeTimerHandler(SYS_Timer_t *timer) {
    e458:	8f 92       	push	r8
    e45a:	9f 92       	push	r9
    e45c:	af 92       	push	r10
    e45e:	bf 92       	push	r11
    e460:	cf 92       	push	r12
    e462:	df 92       	push	r13
    e464:	ef 92       	push	r14
    e466:	ff 92       	push	r15
    e468:	0f 93       	push	r16
    e46a:	1f 93       	push	r17
    e46c:	cf 93       	push	r28
    e46e:	df 93       	push	r29
  int16_t val;
  int8_t mode;

  if (Scout.analogPinEventHandler != 0) {
    e470:	80 91 b3 35 	lds	r24, 0x35B3
    e474:	90 91 b4 35 	lds	r25, 0x35B4
    e478:	89 2b       	or	r24, r25
    e47a:	09 f4       	brne	.+2      	; 0xe47e <_ZL34scoutAnalogStateChangeTimerHandlerP11SYS_Timer_t+0x26>
    e47c:	73 c0       	rjmp	.+230    	; 0xe564 <_ZL34scoutAnalogStateChangeTimerHandlerP11SYS_Timer_t+0x10c>
    e47e:	bd ed       	ldi	r27, 0xDD	; 221
    e480:	cb 2e       	mov	r12, r27
    e482:	b5 e3       	ldi	r27, 0x35	; 53
    e484:	db 2e       	mov	r13, r27
    e486:	0d ec       	ldi	r16, 0xCD	; 205
    e488:	15 e3       	ldi	r17, 0x35	; 53
    e48a:	c0 e0       	ldi	r28, 0x00	; 0
    e48c:	d0 e0       	ldi	r29, 0x00	; 0
    for (int i=0; i<NUM_ANALOG_INPUTS; i++) {

      // Skip disabled/reserved pins
      if (Scout.analogPinMode[i] < 0) {
        Scout.analogPinState[i] = -1;
    e48e:	aa 24       	eor	r10, r10
    e490:	aa 94       	dec	r10
    e492:	ba 2c       	mov	r11, r10

  if (Scout.analogPinEventHandler != 0) {
    for (int i=0; i<NUM_ANALOG_INPUTS; i++) {

      // Skip disabled/reserved pins
      if (Scout.analogPinMode[i] < 0) {
    e494:	f6 01       	movw	r30, r12
    e496:	80 81       	ld	r24, Z
    e498:	87 ff       	sbrs	r24, 7
    e49a:	04 c0       	rjmp	.+8      	; 0xe4a4 <_ZL34scoutAnalogStateChangeTimerHandlerP11SYS_Timer_t+0x4c>
        Scout.analogPinState[i] = -1;
    e49c:	f8 01       	movw	r30, r16
    e49e:	b1 82       	std	Z+1, r11	; 0x01
    e4a0:	a0 82       	st	Z, r10
        continue;
    e4a2:	56 c0       	rjmp	.+172    	; 0xe550 <_ZL34scoutAnalogStateChangeTimerHandlerP11SYS_Timer_t+0xf8>
      }

      val = Scout.pinRead(i+A0); // explicit digital pins until we can update core
    e4a4:	8c 2e       	mov	r8, r28
    e4a6:	9c 2e       	mov	r9, r28
    e4a8:	f8 e1       	ldi	r31, 0x18	; 24
    e4aa:	9f 0e       	add	r9, r31
    e4ac:	69 2d       	mov	r22, r9
    e4ae:	80 ea       	ldi	r24, 0xA0	; 160
    e4b0:	95 e3       	ldi	r25, 0x35	; 53
    e4b2:	ff de       	rcall	.-514    	; 0xe2b2 <_ZN13PinoccioScout7pinReadEh>
    e4b4:	7c 01       	movw	r14, r24
      mode = Scout.getRegisterPinMode(i+A0);
    e4b6:	69 2d       	mov	r22, r9
    e4b8:	80 ea       	ldi	r24, 0xA0	; 160
    e4ba:	95 e3       	ldi	r25, 0x35	; 53
    e4bc:	5a df       	rcall	.-332    	; 0xe372 <_ZN13PinoccioScout18getRegisterPinModeEh>
    e4be:	98 2e       	mov	r9, r24

      if (Scout.analogPinState[i] != val) {
    e4c0:	f8 01       	movw	r30, r16
    e4c2:	20 81       	ld	r18, Z
    e4c4:	31 81       	ldd	r19, Z+1	; 0x01
    e4c6:	2e 15       	cp	r18, r14
    e4c8:	3f 05       	cpc	r19, r15
    e4ca:	09 f4       	brne	.+2      	; 0xe4ce <_ZL34scoutAnalogStateChangeTimerHandlerP11SYS_Timer_t+0x76>
    e4cc:	41 c0       	rjmp	.+130    	; 0xe550 <_ZL34scoutAnalogStateChangeTimerHandlerP11SYS_Timer_t+0xf8>
        if (Scout.eventVerboseOutput) {
    e4ce:	80 91 eb 35 	lds	r24, 0x35EB
    e4d2:	88 23       	and	r24, r24
    e4d4:	81 f1       	breq	.+96     	; 0xe536 <_ZL34scoutAnalogStateChangeTimerHandlerP11SYS_Timer_t+0xde>
          Serial.print(F("Running: analogPinEventHandler("));
    e4d6:	67 e7       	ldi	r22, 0x77	; 119
    e4d8:	7a e0       	ldi	r23, 0x0A	; 10
    e4da:	84 e0       	ldi	r24, 0x04	; 4
    e4dc:	94 e2       	ldi	r25, 0x24	; 36
    e4de:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
          Serial.print(i);
    e4e2:	4a e0       	ldi	r20, 0x0A	; 10
    e4e4:	50 e0       	ldi	r21, 0x00	; 0
    e4e6:	be 01       	movw	r22, r28
    e4e8:	84 e0       	ldi	r24, 0x04	; 4
    e4ea:	94 e2       	ldi	r25, 0x24	; 36
    e4ec:	0e 94 4d 10 	call	0x209a	; 0x209a <_ZN5Print5printEii>
          Serial.print(F(","));
    e4f0:	65 e7       	ldi	r22, 0x75	; 117
    e4f2:	7a e0       	ldi	r23, 0x0A	; 10
    e4f4:	84 e0       	ldi	r24, 0x04	; 4
    e4f6:	94 e2       	ldi	r25, 0x24	; 36
    e4f8:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
          Serial.print(val);
    e4fc:	4a e0       	ldi	r20, 0x0A	; 10
    e4fe:	50 e0       	ldi	r21, 0x00	; 0
    e500:	b7 01       	movw	r22, r14
    e502:	84 e0       	ldi	r24, 0x04	; 4
    e504:	94 e2       	ldi	r25, 0x24	; 36
    e506:	0e 94 4d 10 	call	0x209a	; 0x209a <_ZN5Print5printEii>
          Serial.print(F(","));
    e50a:	63 e7       	ldi	r22, 0x73	; 115
    e50c:	7a e0       	ldi	r23, 0x0A	; 10
    e50e:	84 e0       	ldi	r24, 0x04	; 4
    e510:	94 e2       	ldi	r25, 0x24	; 36
    e512:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
          Serial.print(mode);
    e516:	4a e0       	ldi	r20, 0x0A	; 10
    e518:	50 e0       	ldi	r21, 0x00	; 0
    e51a:	69 2d       	mov	r22, r9
    e51c:	77 27       	eor	r23, r23
    e51e:	67 fd       	sbrc	r22, 7
    e520:	70 95       	com	r23
    e522:	84 e0       	ldi	r24, 0x04	; 4
    e524:	94 e2       	ldi	r25, 0x24	; 36
    e526:	0e 94 4d 10 	call	0x209a	; 0x209a <_ZN5Print5printEii>
          Serial.println(F(")"));
    e52a:	61 e7       	ldi	r22, 0x71	; 113
    e52c:	7a e0       	ldi	r23, 0x0A	; 10
    e52e:	84 e0       	ldi	r24, 0x04	; 4
    e530:	94 e2       	ldi	r25, 0x24	; 36
    e532:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <_ZN5Print7printlnEPK19__FlashStringHelper>
        }
        Scout.analogPinState[i] = val;
    e536:	f8 01       	movw	r30, r16
    e538:	f1 82       	std	Z+1, r15	; 0x01
    e53a:	e0 82       	st	Z, r14
        Scout.analogPinMode[i] = mode;
    e53c:	f6 01       	movw	r30, r12
    e53e:	90 82       	st	Z, r9
        Scout.analogPinEventHandler(i, val, mode);
    e540:	e0 91 b3 35 	lds	r30, 0x35B3
    e544:	f0 91 b4 35 	lds	r31, 0x35B4
    e548:	49 2d       	mov	r20, r9
    e54a:	b7 01       	movw	r22, r14
    e54c:	88 2d       	mov	r24, r8
    e54e:	19 95       	eicall
static void scoutAnalogStateChangeTimerHandler(SYS_Timer_t *timer) {
  int16_t val;
  int8_t mode;

  if (Scout.analogPinEventHandler != 0) {
    for (int i=0; i<NUM_ANALOG_INPUTS; i++) {
    e550:	21 96       	adiw	r28, 0x01	; 1
    e552:	ff ef       	ldi	r31, 0xFF	; 255
    e554:	cf 1a       	sub	r12, r31
    e556:	df 0a       	sbc	r13, r31
    e558:	0e 5f       	subi	r16, 0xFE	; 254
    e55a:	1f 4f       	sbci	r17, 0xFF	; 255
    e55c:	c8 30       	cpi	r28, 0x08	; 8
    e55e:	d1 05       	cpc	r29, r1
    e560:	09 f0       	breq	.+2      	; 0xe564 <_ZL34scoutAnalogStateChangeTimerHandlerP11SYS_Timer_t+0x10c>
    e562:	98 cf       	rjmp	.-208    	; 0xe494 <_ZL34scoutAnalogStateChangeTimerHandlerP11SYS_Timer_t+0x3c>
        Scout.analogPinMode[i] = mode;
        Scout.analogPinEventHandler(i, val, mode);
      }
    }
  }
}
    e564:	df 91       	pop	r29
    e566:	cf 91       	pop	r28
    e568:	1f 91       	pop	r17
    e56a:	0f 91       	pop	r16
    e56c:	ff 90       	pop	r15
    e56e:	ef 90       	pop	r14
    e570:	df 90       	pop	r13
    e572:	cf 90       	pop	r12
    e574:	bf 90       	pop	r11
    e576:	af 90       	pop	r10
    e578:	9f 90       	pop	r9
    e57a:	8f 90       	pop	r8
    e57c:	08 95       	ret

0000e57e <_ZL35scoutDigitalStateChangeTimerHandlerP11SYS_Timer_t>:

bool PinoccioScout::isPinReserved(uint8_t pin) {
  return (Backpacks::used_pins & Pbbe::LogicalPin(pin).mask());
}

static void scoutDigitalStateChangeTimerHandler(SYS_Timer_t *timer) {
    e57e:	af 92       	push	r10
    e580:	bf 92       	push	r11
    e582:	cf 92       	push	r12
    e584:	df 92       	push	r13
    e586:	ef 92       	push	r14
    e588:	ff 92       	push	r15
    e58a:	0f 93       	push	r16
    e58c:	1f 93       	push	r17
    e58e:	cf 93       	push	r28
    e590:	df 93       	push	r29
  int8_t val;
  int8_t mode;

  if (Scout.digitalPinEventHandler != 0) {
    e592:	80 91 b1 35 	lds	r24, 0x35B1
    e596:	90 91 b2 35 	lds	r25, 0x35B2
    e59a:	89 2b       	or	r24, r25
    e59c:	09 f4       	brne	.+2      	; 0xe5a0 <_ZL35scoutDigitalStateChangeTimerHandlerP11SYS_Timer_t+0x22>
    e59e:	6e c0       	rjmp	.+220    	; 0xe67c <_ZL35scoutDigitalStateChangeTimerHandlerP11SYS_Timer_t+0xfe>
    e5a0:	96 ec       	ldi	r25, 0xC6	; 198
    e5a2:	e9 2e       	mov	r14, r25
    e5a4:	95 e3       	ldi	r25, 0x35	; 53
    e5a6:	f9 2e       	mov	r15, r25
    e5a8:	0f eb       	ldi	r16, 0xBF	; 191
    e5aa:	15 e3       	ldi	r17, 0x35	; 53
    e5ac:	c2 e0       	ldi	r28, 0x02	; 2
    e5ae:	d0 e0       	ldi	r29, 0x00	; 0
    for (int i=0; i<7; i++) {
      int pin = i+2;

      // Skip disabled/reserved pins
      if (Scout.digitalPinMode[i] < 0) {
        Scout.digitalPinState[i] = -1;
    e5b0:	bb 24       	eor	r11, r11
    e5b2:	ba 94       	dec	r11
  if (Scout.digitalPinEventHandler != 0) {
    for (int i=0; i<7; i++) {
      int pin = i+2;

      // Skip disabled/reserved pins
      if (Scout.digitalPinMode[i] < 0) {
    e5b4:	f7 01       	movw	r30, r14
    e5b6:	80 81       	ld	r24, Z
    e5b8:	87 ff       	sbrs	r24, 7
    e5ba:	03 c0       	rjmp	.+6      	; 0xe5c2 <_ZL35scoutDigitalStateChangeTimerHandlerP11SYS_Timer_t+0x44>
        Scout.digitalPinState[i] = -1;
    e5bc:	f8 01       	movw	r30, r16
    e5be:	b0 82       	st	Z, r11
        continue;
    e5c0:	53 c0       	rjmp	.+166    	; 0xe668 <_ZL35scoutDigitalStateChangeTimerHandlerP11SYS_Timer_t+0xea>
      }

      val = Scout.pinRead(pin);
    e5c2:	ac 2e       	mov	r10, r28
    e5c4:	6c 2f       	mov	r22, r28
    e5c6:	80 ea       	ldi	r24, 0xA0	; 160
    e5c8:	95 e3       	ldi	r25, 0x35	; 53
    e5ca:	73 de       	rcall	.-794    	; 0xe2b2 <_ZN13PinoccioScout7pinReadEh>
    e5cc:	d8 2e       	mov	r13, r24
      mode = Scout.getRegisterPinMode(pin);
    e5ce:	6c 2f       	mov	r22, r28
    e5d0:	80 ea       	ldi	r24, 0xA0	; 160
    e5d2:	95 e3       	ldi	r25, 0x35	; 53
    e5d4:	ce de       	rcall	.-612    	; 0xe372 <_ZN13PinoccioScout18getRegisterPinModeEh>
    e5d6:	c8 2e       	mov	r12, r24

      if (Scout.digitalPinState[i] != val) {
    e5d8:	f8 01       	movw	r30, r16
    e5da:	80 81       	ld	r24, Z
    e5dc:	8d 15       	cp	r24, r13
    e5de:	09 f4       	brne	.+2      	; 0xe5e2 <_ZL35scoutDigitalStateChangeTimerHandlerP11SYS_Timer_t+0x64>
    e5e0:	43 c0       	rjmp	.+134    	; 0xe668 <_ZL35scoutDigitalStateChangeTimerHandlerP11SYS_Timer_t+0xea>
        if (Scout.eventVerboseOutput) {
    e5e2:	80 91 eb 35 	lds	r24, 0x35EB
    e5e6:	88 23       	and	r24, r24
    e5e8:	99 f1       	breq	.+102    	; 0xe650 <_ZL35scoutDigitalStateChangeTimerHandlerP11SYS_Timer_t+0xd2>
          Serial.print(F("Running: digitalPinEventHandler("));
    e5ea:	60 e5       	ldi	r22, 0x50	; 80
    e5ec:	7a e0       	ldi	r23, 0x0A	; 10
    e5ee:	84 e0       	ldi	r24, 0x04	; 4
    e5f0:	94 e2       	ldi	r25, 0x24	; 36
    e5f2:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
          Serial.print(pin);
    e5f6:	4a e0       	ldi	r20, 0x0A	; 10
    e5f8:	50 e0       	ldi	r21, 0x00	; 0
    e5fa:	be 01       	movw	r22, r28
    e5fc:	84 e0       	ldi	r24, 0x04	; 4
    e5fe:	94 e2       	ldi	r25, 0x24	; 36
    e600:	0e 94 4d 10 	call	0x209a	; 0x209a <_ZN5Print5printEii>
          Serial.print(F(","));
    e604:	6e e4       	ldi	r22, 0x4E	; 78
    e606:	7a e0       	ldi	r23, 0x0A	; 10
    e608:	84 e0       	ldi	r24, 0x04	; 4
    e60a:	94 e2       	ldi	r25, 0x24	; 36
    e60c:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
          Serial.print(val);
    e610:	4a e0       	ldi	r20, 0x0A	; 10
    e612:	50 e0       	ldi	r21, 0x00	; 0
    e614:	6d 2d       	mov	r22, r13
    e616:	77 27       	eor	r23, r23
    e618:	67 fd       	sbrc	r22, 7
    e61a:	70 95       	com	r23
    e61c:	84 e0       	ldi	r24, 0x04	; 4
    e61e:	94 e2       	ldi	r25, 0x24	; 36
    e620:	0e 94 4d 10 	call	0x209a	; 0x209a <_ZN5Print5printEii>
          Serial.print(F(","));
    e624:	6c e4       	ldi	r22, 0x4C	; 76
    e626:	7a e0       	ldi	r23, 0x0A	; 10
    e628:	84 e0       	ldi	r24, 0x04	; 4
    e62a:	94 e2       	ldi	r25, 0x24	; 36
    e62c:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
          Serial.print(mode);
    e630:	4a e0       	ldi	r20, 0x0A	; 10
    e632:	50 e0       	ldi	r21, 0x00	; 0
    e634:	6c 2d       	mov	r22, r12
    e636:	77 27       	eor	r23, r23
    e638:	67 fd       	sbrc	r22, 7
    e63a:	70 95       	com	r23
    e63c:	84 e0       	ldi	r24, 0x04	; 4
    e63e:	94 e2       	ldi	r25, 0x24	; 36
    e640:	0e 94 4d 10 	call	0x209a	; 0x209a <_ZN5Print5printEii>
          Serial.println(F(")"));
    e644:	6a e4       	ldi	r22, 0x4A	; 74
    e646:	7a e0       	ldi	r23, 0x0A	; 10
    e648:	84 e0       	ldi	r24, 0x04	; 4
    e64a:	94 e2       	ldi	r25, 0x24	; 36
    e64c:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <_ZN5Print7printlnEPK19__FlashStringHelper>
        }
        Scout.digitalPinState[i] = val;
    e650:	f8 01       	movw	r30, r16
    e652:	d0 82       	st	Z, r13
        Scout.digitalPinMode[i] = mode;
    e654:	f7 01       	movw	r30, r14
    e656:	c0 82       	st	Z, r12
        Scout.digitalPinEventHandler(pin, val, mode);
    e658:	e0 91 b1 35 	lds	r30, 0x35B1
    e65c:	f0 91 b2 35 	lds	r31, 0x35B2
    e660:	4c 2d       	mov	r20, r12
    e662:	6d 2d       	mov	r22, r13
    e664:	8a 2d       	mov	r24, r10
    e666:	19 95       	eicall
    e668:	ff ef       	ldi	r31, 0xFF	; 255
    e66a:	ef 1a       	sub	r14, r31
    e66c:	ff 0a       	sbc	r15, r31
    e66e:	0f 5f       	subi	r16, 0xFF	; 255
    e670:	1f 4f       	sbci	r17, 0xFF	; 255
    e672:	21 96       	adiw	r28, 0x01	; 1
static void scoutDigitalStateChangeTimerHandler(SYS_Timer_t *timer) {
  int8_t val;
  int8_t mode;

  if (Scout.digitalPinEventHandler != 0) {
    for (int i=0; i<7; i++) {
    e674:	c9 30       	cpi	r28, 0x09	; 9
    e676:	d1 05       	cpc	r29, r1
    e678:	09 f0       	breq	.+2      	; 0xe67c <_ZL35scoutDigitalStateChangeTimerHandlerP11SYS_Timer_t+0xfe>
    e67a:	9c cf       	rjmp	.-200    	; 0xe5b4 <_ZL35scoutDigitalStateChangeTimerHandlerP11SYS_Timer_t+0x36>
        Scout.digitalPinMode[i] = mode;
        Scout.digitalPinEventHandler(pin, val, mode);
      }
    }
  }
}
    e67c:	df 91       	pop	r29
    e67e:	cf 91       	pop	r28
    e680:	1f 91       	pop	r17
    e682:	0f 91       	pop	r16
    e684:	ff 90       	pop	r15
    e686:	ef 90       	pop	r14
    e688:	df 90       	pop	r13
    e68a:	cf 90       	pop	r12
    e68c:	bf 90       	pop	r11
    e68e:	af 90       	pop	r10
    e690:	08 95       	ret

0000e692 <_ZN13PinoccioScout9makeInputEhb>:
  if (isAnalogPin(pin)) {
    return analogPinMode[pin-A0];
  }
}

bool PinoccioScout::makeInput(uint8_t pin, bool enablePullup) {
    e692:	cf 92       	push	r12
    e694:	df 92       	push	r13
    e696:	ef 92       	push	r14
    e698:	ff 92       	push	r15
    e69a:	0f 93       	push	r16
    e69c:	1f 93       	push	r17
    e69e:	cf 93       	push	r28
    e6a0:	df 93       	push	r29
    e6a2:	1f 92       	push	r1
    e6a4:	cd b7       	in	r28, 0x3d	; 61
    e6a6:	de b7       	in	r29, 0x3e	; 62
    e6a8:	8c 01       	movw	r16, r24
    e6aa:	f6 2e       	mov	r15, r22
  if (isPinReserved(pin)) {
    e6ac:	49 83       	std	Y+1, r20	; 0x01
    e6ae:	3b de       	rcall	.-906    	; 0xe326 <_ZN13PinoccioScout13isPinReservedEh>
    e6b0:	49 81       	ldd	r20, Y+1	; 0x01
    e6b2:	81 11       	cpse	r24, r1
    e6b4:	27 c0       	rjmp	.+78     	; 0xe704 <_ZN13PinoccioScout9makeInputEhb+0x72>
    return false;
  }

  uint8_t mode = enablePullup ? INPUT_PULLUP : INPUT;
    e6b6:	44 23       	and	r20, r20
    e6b8:	19 f0       	breq	.+6      	; 0xe6c0 <_ZN13PinoccioScout9makeInputEhb+0x2e>
    e6ba:	32 e0       	ldi	r19, 0x02	; 2
    e6bc:	e3 2e       	mov	r14, r19
    e6be:	01 c0       	rjmp	.+2      	; 0xe6c2 <_ZN13PinoccioScout9makeInputEhb+0x30>
    e6c0:	e1 2c       	mov	r14, r1
  pinMode(pin, mode);
    e6c2:	6e 2d       	mov	r22, r14
    e6c4:	8f 2d       	mov	r24, r15
    e6c6:	0e 94 21 16 	call	0x2c42	; 0x2c42 <pinMode>

  return true;
}

bool PinoccioScout::isDigitalPin(uint8_t pin) {
  if (pin >= 2 && pin <= 8) {
    e6ca:	8e ef       	ldi	r24, 0xFE	; 254
    e6cc:	8f 0d       	add	r24, r15
    e6ce:	87 30       	cpi	r24, 0x07	; 7
    e6d0:	d8 f0       	brcs	.+54     	; 0xe708 <_ZN13PinoccioScout9makeInputEhb+0x76>
  }
  return false;
}

bool PinoccioScout::isAnalogPin(uint8_t pin) {
  if (pin >= A0 && pin <= A0 + NUM_ANALOG_INPUTS) {
    e6d2:	88 ee       	ldi	r24, 0xE8	; 232
    e6d4:	8f 0d       	add	r24, r15
    e6d6:	89 30       	cpi	r24, 0x09	; 9
    e6d8:	38 f5       	brcc	.+78     	; 0xe728 <_ZN13PinoccioScout9makeInputEhb+0x96>
    digitalPinMode[pin-2] = mode;
    digitalPinState[pin-2] = Scout.pinRead(pin);
  }

  if (isAnalogPin(pin)) {
    analogPinMode[pin-A0] = mode;
    e6da:	cf 2c       	mov	r12, r15
    e6dc:	d1 2c       	mov	r13, r1
    e6de:	f8 e1       	ldi	r31, 0x18	; 24
    e6e0:	cf 1a       	sub	r12, r31
    e6e2:	d1 08       	sbc	r13, r1
    e6e4:	f8 01       	movw	r30, r16
    e6e6:	ec 0d       	add	r30, r12
    e6e8:	fd 1d       	adc	r31, r13
    e6ea:	e5 ae       	std	Z+61, r14	; 0x3d
    analogPinState[pin-A0] = Scout.pinRead(pin);
    e6ec:	6f 2d       	mov	r22, r15
    e6ee:	80 ea       	ldi	r24, 0xA0	; 160
    e6f0:	95 e3       	ldi	r25, 0x35	; 53
    e6f2:	df dd       	rcall	.-1090   	; 0xe2b2 <_ZN13PinoccioScout7pinReadEh>
    e6f4:	f6 01       	movw	r30, r12
    e6f6:	ee 0f       	add	r30, r30
    e6f8:	ff 1f       	adc	r31, r31
    e6fa:	e0 0f       	add	r30, r16
    e6fc:	f1 1f       	adc	r31, r17
    e6fe:	96 a7       	std	Z+46, r25	; 0x2e
    e700:	85 a7       	std	Z+45, r24	; 0x2d
    e702:	12 c0       	rjmp	.+36     	; 0xe728 <_ZN13PinoccioScout9makeInputEhb+0x96>
  }
}

bool PinoccioScout::makeInput(uint8_t pin, bool enablePullup) {
  if (isPinReserved(pin)) {
    return false;
    e704:	80 e0       	ldi	r24, 0x00	; 0
    e706:	11 c0       	rjmp	.+34     	; 0xe72a <_ZN13PinoccioScout9makeInputEhb+0x98>

  uint8_t mode = enablePullup ? INPUT_PULLUP : INPUT;
  pinMode(pin, mode);

  if (isDigitalPin(pin)) {
    digitalPinMode[pin-2] = mode;
    e708:	cf 2c       	mov	r12, r15
    e70a:	d1 2c       	mov	r13, r1
    e70c:	82 e0       	ldi	r24, 0x02	; 2
    e70e:	c8 1a       	sub	r12, r24
    e710:	d1 08       	sbc	r13, r1
    e712:	c0 0e       	add	r12, r16
    e714:	d1 1e       	adc	r13, r17
    e716:	f6 01       	movw	r30, r12
    e718:	e6 a2       	std	Z+38, r14	; 0x26
    digitalPinState[pin-2] = Scout.pinRead(pin);
    e71a:	6f 2d       	mov	r22, r15
    e71c:	80 ea       	ldi	r24, 0xA0	; 160
    e71e:	95 e3       	ldi	r25, 0x35	; 53
    e720:	c8 dd       	rcall	.-1136   	; 0xe2b2 <_ZN13PinoccioScout7pinReadEh>
    e722:	f6 01       	movw	r30, r12
    e724:	87 8f       	std	Z+31, r24	; 0x1f
    e726:	d5 cf       	rjmp	.-86     	; 0xe6d2 <_ZN13PinoccioScout9makeInputEhb+0x40>
  if (isAnalogPin(pin)) {
    analogPinMode[pin-A0] = mode;
    analogPinState[pin-A0] = Scout.pinRead(pin);
  }

  return true;
    e728:	81 e0       	ldi	r24, 0x01	; 1
}
    e72a:	0f 90       	pop	r0
    e72c:	df 91       	pop	r29
    e72e:	cf 91       	pop	r28
    e730:	1f 91       	pop	r17
    e732:	0f 91       	pop	r16
    e734:	ff 90       	pop	r15
    e736:	ef 90       	pop	r14
    e738:	df 90       	pop	r13
    e73a:	cf 90       	pop	r12
    e73c:	08 95       	ret

0000e73e <_ZN13PinoccioScout10makeOutputEh>:

bool PinoccioScout::makeOutput(uint8_t pin) {
    e73e:	ff 92       	push	r15
    e740:	0f 93       	push	r16
    e742:	1f 93       	push	r17
    e744:	cf 93       	push	r28
    e746:	df 93       	push	r29
    e748:	8c 01       	movw	r16, r24
    e74a:	f6 2e       	mov	r15, r22
  if (isPinReserved(pin)) {
    e74c:	ec dd       	rcall	.-1064   	; 0xe326 <_ZN13PinoccioScout13isPinReservedEh>
    e74e:	81 11       	cpse	r24, r1
    e750:	1f c0       	rjmp	.+62     	; 0xe790 <_ZN13PinoccioScout10makeOutputEh+0x52>
    return false;
  }

  pinMode(pin, OUTPUT);
    e752:	61 e0       	ldi	r22, 0x01	; 1
    e754:	8f 2d       	mov	r24, r15
    e756:	0e 94 21 16 	call	0x2c42	; 0x2c42 <pinMode>

  return true;
}

bool PinoccioScout::isDigitalPin(uint8_t pin) {
  if (pin >= 2 && pin <= 8) {
    e75a:	8e ef       	ldi	r24, 0xFE	; 254
    e75c:	8f 0d       	add	r24, r15
    e75e:	87 30       	cpi	r24, 0x07	; 7
    e760:	c8 f0       	brcs	.+50     	; 0xe794 <_ZN13PinoccioScout10makeOutputEh+0x56>
  }
  return false;
}

bool PinoccioScout::isAnalogPin(uint8_t pin) {
  if (pin >= A0 && pin <= A0 + NUM_ANALOG_INPUTS) {
    e762:	88 ee       	ldi	r24, 0xE8	; 232
    e764:	8f 0d       	add	r24, r15
    e766:	89 30       	cpi	r24, 0x09	; 9
    e768:	10 f5       	brcc	.+68     	; 0xe7ae <_ZN13PinoccioScout10makeOutputEh+0x70>
    digitalPinMode[pin-2] = OUTPUT;
    digitalPinState[pin-2] = Scout.pinRead(pin);
  }

  if (isAnalogPin(pin)) {
    analogPinMode[pin-A0] = OUTPUT;
    e76a:	cf 2d       	mov	r28, r15
    e76c:	d0 e0       	ldi	r29, 0x00	; 0
    e76e:	68 97       	sbiw	r28, 0x18	; 24
    e770:	f8 01       	movw	r30, r16
    e772:	ec 0f       	add	r30, r28
    e774:	fd 1f       	adc	r31, r29
    e776:	81 e0       	ldi	r24, 0x01	; 1
    e778:	85 af       	std	Z+61, r24	; 0x3d
    analogPinState[pin-A0] = Scout.pinRead(pin);
    e77a:	6f 2d       	mov	r22, r15
    e77c:	80 ea       	ldi	r24, 0xA0	; 160
    e77e:	95 e3       	ldi	r25, 0x35	; 53
    e780:	98 dd       	rcall	.-1232   	; 0xe2b2 <_ZN13PinoccioScout7pinReadEh>
    e782:	cc 0f       	add	r28, r28
    e784:	dd 1f       	adc	r29, r29
    e786:	c0 0f       	add	r28, r16
    e788:	d1 1f       	adc	r29, r17
    e78a:	9e a7       	std	Y+46, r25	; 0x2e
    e78c:	8d a7       	std	Y+45, r24	; 0x2d
    e78e:	0f c0       	rjmp	.+30     	; 0xe7ae <_ZN13PinoccioScout10makeOutputEh+0x70>
  return true;
}

bool PinoccioScout::makeOutput(uint8_t pin) {
  if (isPinReserved(pin)) {
    return false;
    e790:	80 e0       	ldi	r24, 0x00	; 0
    e792:	0e c0       	rjmp	.+28     	; 0xe7b0 <_ZN13PinoccioScout10makeOutputEh+0x72>
  }

  pinMode(pin, OUTPUT);

  if (isDigitalPin(pin)) {
    digitalPinMode[pin-2] = OUTPUT;
    e794:	cf 2d       	mov	r28, r15
    e796:	d0 e0       	ldi	r29, 0x00	; 0
    e798:	22 97       	sbiw	r28, 0x02	; 2
    e79a:	c0 0f       	add	r28, r16
    e79c:	d1 1f       	adc	r29, r17
    e79e:	81 e0       	ldi	r24, 0x01	; 1
    e7a0:	8e a3       	std	Y+38, r24	; 0x26
    digitalPinState[pin-2] = Scout.pinRead(pin);
    e7a2:	6f 2d       	mov	r22, r15
    e7a4:	80 ea       	ldi	r24, 0xA0	; 160
    e7a6:	95 e3       	ldi	r25, 0x35	; 53
    e7a8:	84 dd       	rcall	.-1272   	; 0xe2b2 <_ZN13PinoccioScout7pinReadEh>
    e7aa:	8f 8f       	std	Y+31, r24	; 0x1f
    e7ac:	da cf       	rjmp	.-76     	; 0xe762 <_ZN13PinoccioScout10makeOutputEh+0x24>
  }

  if (isAnalogPin(pin)) {
    analogPinMode[pin-A0] = OUTPUT;
    analogPinState[pin-A0] = Scout.pinRead(pin);
    e7ae:	81 e0       	ldi	r24, 0x01	; 1
  }

  return true;
}
    e7b0:	df 91       	pop	r29
    e7b2:	cf 91       	pop	r28
    e7b4:	1f 91       	pop	r17
    e7b6:	0f 91       	pop	r16
    e7b8:	ff 90       	pop	r15
    e7ba:	08 95       	ret

0000e7bc <_ZN13PinoccioScout12makeDisabledEh>:

bool PinoccioScout::makeDisabled(uint8_t pin) {
    e7bc:	1f 93       	push	r17
    e7be:	cf 93       	push	r28
    e7c0:	df 93       	push	r29
    e7c2:	ec 01       	movw	r28, r24
    e7c4:	16 2f       	mov	r17, r22
  if (isPinReserved(pin)) {
    e7c6:	af dd       	rcall	.-1186   	; 0xe326 <_ZN13PinoccioScout13isPinReservedEh>
    e7c8:	81 11       	cpse	r24, r1
    e7ca:	1f c0       	rjmp	.+62     	; 0xe80a <_ZN13PinoccioScout12makeDisabledEh+0x4e>
    return false;
  }

  pinMode(pin, INPUT);  // input-no-pullup, for lowest power draw
    e7cc:	60 e0       	ldi	r22, 0x00	; 0
    e7ce:	81 2f       	mov	r24, r17
    e7d0:	0e 94 21 16 	call	0x2c42	; 0x2c42 <pinMode>

  return true;
}

bool PinoccioScout::isDigitalPin(uint8_t pin) {
  if (pin >= 2 && pin <= 8) {
    e7d4:	8e ef       	ldi	r24, 0xFE	; 254
    e7d6:	81 0f       	add	r24, r17
    e7d8:	87 30       	cpi	r24, 0x07	; 7
    e7da:	c8 f0       	brcs	.+50     	; 0xe80e <_ZN13PinoccioScout12makeDisabledEh+0x52>
  }
  return false;
}

bool PinoccioScout::isAnalogPin(uint8_t pin) {
  if (pin >= A0 && pin <= A0 + NUM_ANALOG_INPUTS) {
    e7dc:	88 ee       	ldi	r24, 0xE8	; 232
    e7de:	81 0f       	add	r24, r17
    e7e0:	89 30       	cpi	r24, 0x09	; 9
    e7e2:	f0 f4       	brcc	.+60     	; 0xe820 <_ZN13PinoccioScout12makeDisabledEh+0x64>
    digitalPinMode[pin-2] = -1;
    digitalPinState[pin-2] = -1;
  }

  if (isAnalogPin(pin)) {
    analogPinMode[pin-A0] = -1;
    e7e4:	61 2f       	mov	r22, r17
    e7e6:	70 e0       	ldi	r23, 0x00	; 0
    e7e8:	68 51       	subi	r22, 0x18	; 24
    e7ea:	71 09       	sbc	r23, r1
    e7ec:	fe 01       	movw	r30, r28
    e7ee:	e6 0f       	add	r30, r22
    e7f0:	f7 1f       	adc	r31, r23
    e7f2:	8f ef       	ldi	r24, 0xFF	; 255
    e7f4:	85 af       	std	Z+61, r24	; 0x3d
    analogPinState[pin-A0] = -1;
    e7f6:	fb 01       	movw	r30, r22
    e7f8:	ee 0f       	add	r30, r30
    e7fa:	ff 1f       	adc	r31, r31
    e7fc:	ec 0f       	add	r30, r28
    e7fe:	fd 1f       	adc	r31, r29
    e800:	8f ef       	ldi	r24, 0xFF	; 255
    e802:	9f ef       	ldi	r25, 0xFF	; 255
    e804:	96 a7       	std	Z+46, r25	; 0x2e
    e806:	85 a7       	std	Z+45, r24	; 0x2d
    e808:	0b c0       	rjmp	.+22     	; 0xe820 <_ZN13PinoccioScout12makeDisabledEh+0x64>
  return true;
}

bool PinoccioScout::makeDisabled(uint8_t pin) {
  if (isPinReserved(pin)) {
    return false;
    e80a:	80 e0       	ldi	r24, 0x00	; 0
    e80c:	0a c0       	rjmp	.+20     	; 0xe822 <_ZN13PinoccioScout12makeDisabledEh+0x66>
  }

  pinMode(pin, INPUT);  // input-no-pullup, for lowest power draw

  if (isDigitalPin(pin)) {
    digitalPinMode[pin-2] = -1;
    e80e:	e1 2f       	mov	r30, r17
    e810:	f0 e0       	ldi	r31, 0x00	; 0
    e812:	32 97       	sbiw	r30, 0x02	; 2
    e814:	ec 0f       	add	r30, r28
    e816:	fd 1f       	adc	r31, r29
    e818:	8f ef       	ldi	r24, 0xFF	; 255
    e81a:	86 a3       	std	Z+38, r24	; 0x26
    digitalPinState[pin-2] = -1;
    e81c:	87 8f       	std	Z+31, r24	; 0x1f
    e81e:	de cf       	rjmp	.-68     	; 0xe7dc <_ZN13PinoccioScout12makeDisabledEh+0x20>
  }

  if (isAnalogPin(pin)) {
    analogPinMode[pin-A0] = -1;
    analogPinState[pin-A0] = -1;
    e820:	81 e0       	ldi	r24, 0x01	; 1
  }

  return true;
}
    e822:	df 91       	pop	r29
    e824:	cf 91       	pop	r28
    e826:	1f 91       	pop	r17
    e828:	08 95       	ret

0000e82a <_ZN13PinoccioScout9saveStateEv>:
  stopPeripheralStateChangeEvents();
  peripheralStateChangeTimer.interval = peripheralInterval;
  startPeripheralStateChangeEvents();
}

void PinoccioScout::saveState() {
    e82a:	af 92       	push	r10
    e82c:	bf 92       	push	r11
    e82e:	cf 92       	push	r12
    e830:	df 92       	push	r13
    e832:	ef 92       	push	r14
    e834:	ff 92       	push	r15
    e836:	0f 93       	push	r16
    e838:	1f 93       	push	r17
    e83a:	cf 93       	push	r28
    e83c:	df 93       	push	r29
    e83e:	ec 01       	movw	r28, r24
  for (int i=0; i<7; i++) {
    e840:	00 e0       	ldi	r16, 0x00	; 0
    e842:	10 e0       	ldi	r17, 0x00	; 0
    if (isPinReserved(i+2)) {
      digitalPinMode[i] = -2;
    e844:	ae ef       	ldi	r26, 0xFE	; 254
    e846:	ea 2e       	mov	r14, r26
      digitalPinState[i] = -1;
    e848:	dd 24       	eor	r13, r13
    e84a:	da 94       	dec	r13
    e84c:	f2 e0       	ldi	r31, 0x02	; 2
    e84e:	ff 2e       	mov	r15, r31
    e850:	f0 0e       	add	r15, r16
  startPeripheralStateChangeEvents();
}

void PinoccioScout::saveState() {
  for (int i=0; i<7; i++) {
    if (isPinReserved(i+2)) {
    e852:	6f 2d       	mov	r22, r15
    e854:	ce 01       	movw	r24, r28
    e856:	67 dd       	rcall	.-1330   	; 0xe326 <_ZN13PinoccioScout13isPinReservedEh>
    e858:	88 23       	and	r24, r24
    e85a:	31 f0       	breq	.+12     	; 0xe868 <_ZN13PinoccioScout9saveStateEv+0x3e>
    e85c:	fe 01       	movw	r30, r28
    e85e:	e0 0f       	add	r30, r16
    e860:	f1 1f       	adc	r31, r17
      digitalPinMode[i] = -2;
    e862:	e6 a2       	std	Z+38, r14	; 0x26
      digitalPinState[i] = -1;
    e864:	d7 8e       	std	Z+31, r13	; 0x1f
    e866:	03 c0       	rjmp	.+6      	; 0xe86e <_ZN13PinoccioScout9saveStateEv+0x44>
    } else {
      makeDisabled(i+2);
    e868:	6f 2d       	mov	r22, r15
    e86a:	ce 01       	movw	r24, r28
    e86c:	a7 df       	rcall	.-178    	; 0xe7bc <_ZN13PinoccioScout12makeDisabledEh>
  peripheralStateChangeTimer.interval = peripheralInterval;
  startPeripheralStateChangeEvents();
}

void PinoccioScout::saveState() {
  for (int i=0; i<7; i++) {
    e86e:	0f 5f       	subi	r16, 0xFF	; 255
    e870:	1f 4f       	sbci	r17, 0xFF	; 255
    e872:	07 30       	cpi	r16, 0x07	; 7
    e874:	11 05       	cpc	r17, r1
    e876:	51 f7       	brne	.-44     	; 0xe84c <_ZN13PinoccioScout9saveStateEv+0x22>
    e878:	7e 01       	movw	r14, r28
    e87a:	00 e0       	ldi	r16, 0x00	; 0
    e87c:	10 e0       	ldi	r17, 0x00	; 0
    }
  }

  for (int i=0; i<8; i++) {
    if (isPinReserved(i+A0)) {
      analogPinMode[i] = -2;
    e87e:	7e ef       	ldi	r23, 0xFE	; 254
    e880:	a7 2e       	mov	r10, r23
      analogPinState[i] = -1;
    e882:	cc 24       	eor	r12, r12
    e884:	ca 94       	dec	r12
    e886:	dc 2c       	mov	r13, r12
    e888:	68 e1       	ldi	r22, 0x18	; 24
    e88a:	b6 2e       	mov	r11, r22
    e88c:	b0 0e       	add	r11, r16
      makeDisabled(i+2);
    }
  }

  for (int i=0; i<8; i++) {
    if (isPinReserved(i+A0)) {
    e88e:	6b 2d       	mov	r22, r11
    e890:	ce 01       	movw	r24, r28
    e892:	49 dd       	rcall	.-1390   	; 0xe326 <_ZN13PinoccioScout13isPinReservedEh>
    e894:	88 23       	and	r24, r24
    e896:	41 f0       	breq	.+16     	; 0xe8a8 <_ZN13PinoccioScout9saveStateEv+0x7e>
    e898:	fe 01       	movw	r30, r28
    e89a:	e0 0f       	add	r30, r16
    e89c:	f1 1f       	adc	r31, r17
      analogPinMode[i] = -2;
    e89e:	a5 ae       	std	Z+61, r10	; 0x3d
      analogPinState[i] = -1;
    e8a0:	f7 01       	movw	r30, r14
    e8a2:	d6 a6       	std	Z+46, r13	; 0x2e
    e8a4:	c5 a6       	std	Z+45, r12	; 0x2d
    e8a6:	03 c0       	rjmp	.+6      	; 0xe8ae <_ZN13PinoccioScout9saveStateEv+0x84>
    } else {
      makeDisabled(i+A0);
    e8a8:	6b 2d       	mov	r22, r11
    e8aa:	ce 01       	movw	r24, r28
    e8ac:	87 df       	rcall	.-242    	; 0xe7bc <_ZN13PinoccioScout12makeDisabledEh>
    } else {
      makeDisabled(i+2);
    }
  }

  for (int i=0; i<8; i++) {
    e8ae:	0f 5f       	subi	r16, 0xFF	; 255
    e8b0:	1f 4f       	sbci	r17, 0xFF	; 255
    e8b2:	f2 e0       	ldi	r31, 0x02	; 2
    e8b4:	ef 0e       	add	r14, r31
    e8b6:	f1 1c       	adc	r15, r1
    e8b8:	08 30       	cpi	r16, 0x08	; 8
    e8ba:	11 05       	cpc	r17, r1
    e8bc:	29 f7       	brne	.-54     	; 0xe888 <_ZN13PinoccioScout9saveStateEv+0x5e>
    } else {
      makeDisabled(i+A0);
    }
  }

  batteryPercentage = constrain(HAL_FuelGaugePercent(), 0, 100);
    e8be:	0e 94 a7 69 	call	0xd34e	; 0xd34e <HAL_FuelGaugePercent>
    e8c2:	97 fd       	sbrc	r25, 7
    e8c4:	08 c0       	rjmp	.+16     	; 0xe8d6 <_ZN13PinoccioScout9saveStateEv+0xac>
    e8c6:	0e 94 a7 69 	call	0xd34e	; 0xd34e <HAL_FuelGaugePercent>
    e8ca:	85 36       	cpi	r24, 0x65	; 101
    e8cc:	91 05       	cpc	r25, r1
    e8ce:	2c f4       	brge	.+10     	; 0xe8da <_ZN13PinoccioScout9saveStateEv+0xb0>
    e8d0:	0e 94 a7 69 	call	0xd34e	; 0xd34e <HAL_FuelGaugePercent>
    e8d4:	03 c0       	rjmp	.+6      	; 0xe8dc <_ZN13PinoccioScout9saveStateEv+0xb2>
    e8d6:	80 e0       	ldi	r24, 0x00	; 0
    e8d8:	01 c0       	rjmp	.+2      	; 0xe8dc <_ZN13PinoccioScout9saveStateEv+0xb2>
    e8da:	84 e6       	ldi	r24, 0x64	; 100
    e8dc:	fe 01       	movw	r30, r28
    e8de:	eb 5b       	subi	r30, 0xBB	; 187
    e8e0:	ff 4f       	sbci	r31, 0xFF	; 255
    e8e2:	80 83       	st	Z, r24
  batteryVoltage = HAL_FuelGaugeVoltage();
    e8e4:	0e 94 a4 69 	call	0xd348	; 0xd348 <HAL_FuelGaugeVoltage>
    e8e8:	fe 01       	movw	r30, r28
    e8ea:	ea 5b       	subi	r30, 0xBA	; 186
    e8ec:	ff 4f       	sbci	r31, 0xFF	; 255
    e8ee:	91 83       	std	Z+1, r25	; 0x01
    e8f0:	80 83       	st	Z, r24
  isBattCharging = (digitalRead(CHG_STATUS) == LOW);
    e8f2:	84 e1       	ldi	r24, 0x14	; 20
    e8f4:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <digitalRead>
    e8f8:	fe 01       	movw	r30, r28
    e8fa:	e8 5b       	subi	r30, 0xB8	; 184
    e8fc:	ff 4f       	sbci	r31, 0xFF	; 255
    e8fe:	21 e0       	ldi	r18, 0x01	; 1
    e900:	89 2b       	or	r24, r25
    e902:	09 f0       	breq	.+2      	; 0xe906 <_ZN13PinoccioScout9saveStateEv+0xdc>
    e904:	20 e0       	ldi	r18, 0x00	; 0
    e906:	20 83       	st	Z, r18
  isBattAlarmTriggered = (digitalRead(BATT_ALARM) == LOW);
    e908:	82 e1       	ldi	r24, 0x12	; 18
    e90a:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <digitalRead>
    e90e:	fe 01       	movw	r30, r28
    e910:	e7 5b       	subi	r30, 0xB7	; 183
    e912:	ff 4f       	sbci	r31, 0xFF	; 255
    e914:	21 e0       	ldi	r18, 0x01	; 1
    e916:	89 2b       	or	r24, r25
    e918:	09 f0       	breq	.+2      	; 0xe91c <_ZN13PinoccioScout9saveStateEv+0xf2>
    e91a:	20 e0       	ldi	r18, 0x00	; 0
    e91c:	20 83       	st	Z, r18
  temperature = this->getTemperature();
    e91e:	ce 01       	movw	r24, r28
    e920:	3b d8       	rcall	.-3978   	; 0xd998 <_ZN13PinoccioClass14getTemperatureEv>
    e922:	c6 5b       	subi	r28, 0xB6	; 182
    e924:	df 4f       	sbci	r29, 0xFF	; 255
    e926:	88 83       	st	Y, r24
}
    e928:	df 91       	pop	r29
    e92a:	cf 91       	pop	r28
    e92c:	1f 91       	pop	r17
    e92e:	0f 91       	pop	r16
    e930:	ff 90       	pop	r15
    e932:	ef 90       	pop	r14
    e934:	df 90       	pop	r13
    e936:	cf 90       	pop	r12
    e938:	bf 90       	pop	r11
    e93a:	af 90       	pop	r10
    e93c:	08 95       	ret

0000e93e <_ZN13PinoccioScout5setupEPKcS1_l>:
  isFactoryResetReady = false;
}

PinoccioScout::~PinoccioScout() { }

void PinoccioScout::setup(const char *sketchName, const char *sketchRevision, int32_t sketchBuild) {
    e93e:	0f 93       	push	r16
    e940:	1f 93       	push	r17
    e942:	cf 93       	push	r28
    e944:	df 93       	push	r29
    e946:	ec 01       	movw	r28, r24
  PinoccioClass::setup(sketchName, sketchRevision, sketchBuild);
    e948:	9e d9       	rcall	.-3268   	; 0xdc86 <_ZN13PinoccioClass5setupEPKcS1_l>

  pinMode(CHG_STATUS, INPUT_PULLUP);
    e94a:	62 e0       	ldi	r22, 0x02	; 2
    e94c:	84 e1       	ldi	r24, 0x14	; 20
    e94e:	0e 94 21 16 	call	0x2c42	; 0x2c42 <pinMode>
  pinMode(BATT_ALARM, INPUT_PULLUP);
    e952:	62 e0       	ldi	r22, 0x02	; 2
    e954:	82 e1       	ldi	r24, 0x12	; 18
    e956:	0e 94 21 16 	call	0x2c42	; 0x2c42 <pinMode>
  pinMode(VCC_ENABLE, OUTPUT);
    e95a:	61 e0       	ldi	r22, 0x01	; 1
    e95c:	81 e1       	ldi	r24, 0x11	; 17
    e95e:	0e 94 21 16 	call	0x2c42	; 0x2c42 <pinMode>

  disableBackpackVcc();
    e962:	ce 01       	movw	r24, r28
    e964:	f5 db       	rcall	.-2070   	; 0xe150 <_ZN13PinoccioScout18disableBackpackVccEv>
    wifi.loop();
  }
}

void PinoccioScout::delay(unsigned long ms) {
  Serial.println("not safe, disabled");
    e966:	67 eb       	ldi	r22, 0xB7	; 183
    e968:	78 e1       	ldi	r23, 0x18	; 24
    e96a:	84 e0       	ldi	r24, 0x04	; 4
    e96c:	94 e2       	ldi	r25, 0x24	; 36
    e96e:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <_ZN5Print7printlnEPKc>
  pinMode(BATT_ALARM, INPUT_PULLUP);
  pinMode(VCC_ENABLE, OUTPUT);

  disableBackpackVcc();
  delay(100);
  enableBackpackVcc();
    e972:	ce 01       	movw	r24, r28
    e974:	e4 db       	rcall	.-2104   	; 0xe13e <_ZN13PinoccioScout17enableBackpackVccEv>

  RgbLed.turnOff();
    e976:	88 e7       	ldi	r24, 0x78	; 120
    e978:	95 e3       	ldi	r25, 0x35	; 53
    e97a:	0e 94 dd 6a 	call	0xd5ba	; 0xd5ba <_ZN9HalRgbLed7turnOffEv>
  Wire.begin();
    e97e:	87 ec       	ldi	r24, 0xC7	; 199
    e980:	95 e2       	ldi	r25, 0x25	; 37
    e982:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <_ZN7TwoWire5beginEv>
  HAL_FuelGaugeConfig(20);   // Configure the MAX17048G's alert percentage to 20%
    e986:	84 e1       	ldi	r24, 0x14	; 20
    e988:	0e 94 aa 69 	call	0xd354	; 0xd354 <HAL_FuelGaugeConfig>
  Backpacks::setup();
    e98c:	0e 94 c5 64 	call	0xc98a	; 0xc98a <_ZN9Backpacks5setupEv>

  saveState();
    e990:	ce 01       	movw	r24, r28
    e992:	4b df       	rcall	.-362    	; 0xe82a <_ZN13PinoccioScout9saveStateEv>
  handler.setup();
    e994:	ce 01       	movw	r24, r28
    e996:	85 5b       	subi	r24, 0xB5	; 181
    e998:	9c 4f       	sbci	r25, 0xFC	; 252
    e99a:	85 d3       	rcall	.+1802   	; 0xf0a6 <_ZN20PinoccioScoutHandler5setupEv>
    return true;
  }
}

void PinoccioScout::startDigitalStateChangeEvents() {
  SYS_TimerStart(&digitalStateChangeTimer);
    e99c:	ce 01       	movw	r24, r28
    e99e:	81 5b       	subi	r24, 0xB1	; 177
    e9a0:	9c 4f       	sbci	r25, 0xFC	; 252
    e9a2:	0e 94 2f 5a 	call	0xb45e	; 0xb45e <SYS_TimerStart>
void PinoccioScout::stopDigitalStateChangeEvents() {
  SYS_TimerStop(&digitalStateChangeTimer);
}

void PinoccioScout::startAnalogStateChangeEvents() {
  SYS_TimerStart(&analogStateChangeTimer);
    e9a6:	ce 01       	movw	r24, r28
    e9a8:	84 5a       	subi	r24, 0xA4	; 164
    e9aa:	9c 4f       	sbci	r25, 0xFC	; 252
    e9ac:	0e 94 2f 5a 	call	0xb45e	; 0xb45e <SYS_TimerStart>
void PinoccioScout::stopAnalogStateChangeEvents() {
  SYS_TimerStop(&analogStateChangeTimer);
}

void PinoccioScout::startPeripheralStateChangeEvents() {
  SYS_TimerStart(&peripheralStateChangeTimer);
    e9b0:	ce 01       	movw	r24, r28
    e9b2:	87 59       	subi	r24, 0x97	; 151
    e9b4:	9c 4f       	sbci	r25, 0xFC	; 252
    e9b6:	0e 94 2f 5a 	call	0xb45e	; 0xb45e <SYS_TimerStart>

  startDigitalStateChangeEvents();
  startAnalogStateChangeEvents();
  startPeripheralStateChangeEvents();

  Shell.setup();
    e9ba:	8e ee       	ldi	r24, 0xEE	; 238
    e9bc:	99 e3       	ldi	r25, 0x39	; 57
}
    e9be:	df 91       	pop	r29
    e9c0:	cf 91       	pop	r28
    e9c2:	1f 91       	pop	r17
    e9c4:	0f 91       	pop	r16

  startDigitalStateChangeEvents();
  startAnalogStateChangeEvents();
  startPeripheralStateChangeEvents();

  Shell.setup();
    e9c6:	0c 94 07 a4 	jmp	0x1480e	; 0x1480e <_ZN13PinoccioShell5setupEv>

0000e9ca <_ZN13PinoccioScout7setModeEhh>:
  }

  return true;
}

bool PinoccioScout::setMode(uint8_t pin, uint8_t mode) {
    e9ca:	ef 92       	push	r14
    e9cc:	ff 92       	push	r15
    e9ce:	0f 93       	push	r16
    e9d0:	1f 93       	push	r17
    e9d2:	cf 93       	push	r28
    e9d4:	df 93       	push	r29
    e9d6:	8c 01       	movw	r16, r24
    e9d8:	f6 2e       	mov	r15, r22
    e9da:	e4 2e       	mov	r14, r20
  if (isPinReserved(pin)) {
    e9dc:	a4 dc       	rcall	.-1720   	; 0xe326 <_ZN13PinoccioScout13isPinReservedEh>
    e9de:	81 11       	cpse	r24, r1
    e9e0:	1e c0       	rjmp	.+60     	; 0xea1e <_ZN13PinoccioScout7setModeEhh+0x54>
    return false;
  }

  pinMode(pin, mode);
    e9e2:	6e 2d       	mov	r22, r14
    e9e4:	8f 2d       	mov	r24, r15
    e9e6:	0e 94 21 16 	call	0x2c42	; 0x2c42 <pinMode>

  return true;
}

bool PinoccioScout::isDigitalPin(uint8_t pin) {
  if (pin >= 2 && pin <= 8) {
    e9ea:	8e ef       	ldi	r24, 0xFE	; 254
    e9ec:	8f 0d       	add	r24, r15
    e9ee:	87 30       	cpi	r24, 0x07	; 7
    e9f0:	c0 f0       	brcs	.+48     	; 0xea22 <_ZN13PinoccioScout7setModeEhh+0x58>
  }
  return false;
}

bool PinoccioScout::isAnalogPin(uint8_t pin) {
  if (pin >= A0 && pin <= A0 + NUM_ANALOG_INPUTS) {
    e9f2:	88 ee       	ldi	r24, 0xE8	; 232
    e9f4:	8f 0d       	add	r24, r15
    e9f6:	89 30       	cpi	r24, 0x09	; 9
    e9f8:	00 f5       	brcc	.+64     	; 0xea3a <_ZN13PinoccioScout7setModeEhh+0x70>
    digitalPinMode[pin-2] = mode;
    digitalPinState[pin-2] = Scout.pinRead(pin);
  }

  if (isAnalogPin(pin)) {
    analogPinMode[pin-A0] = mode;
    e9fa:	cf 2d       	mov	r28, r15
    e9fc:	d0 e0       	ldi	r29, 0x00	; 0
    e9fe:	68 97       	sbiw	r28, 0x18	; 24
    ea00:	f8 01       	movw	r30, r16
    ea02:	ec 0f       	add	r30, r28
    ea04:	fd 1f       	adc	r31, r29
    ea06:	e5 ae       	std	Z+61, r14	; 0x3d
    analogPinState[pin-A0] = Scout.pinRead(pin);
    ea08:	6f 2d       	mov	r22, r15
    ea0a:	80 ea       	ldi	r24, 0xA0	; 160
    ea0c:	95 e3       	ldi	r25, 0x35	; 53
    ea0e:	51 dc       	rcall	.-1886   	; 0xe2b2 <_ZN13PinoccioScout7pinReadEh>
    ea10:	cc 0f       	add	r28, r28
    ea12:	dd 1f       	adc	r29, r29
    ea14:	c0 0f       	add	r28, r16
    ea16:	d1 1f       	adc	r29, r17
    ea18:	9e a7       	std	Y+46, r25	; 0x2e
    ea1a:	8d a7       	std	Y+45, r24	; 0x2d
    ea1c:	0e c0       	rjmp	.+28     	; 0xea3a <_ZN13PinoccioScout7setModeEhh+0x70>
  return true;
}

bool PinoccioScout::setMode(uint8_t pin, uint8_t mode) {
  if (isPinReserved(pin)) {
    return false;
    ea1e:	80 e0       	ldi	r24, 0x00	; 0
    ea20:	0d c0       	rjmp	.+26     	; 0xea3c <_ZN13PinoccioScout7setModeEhh+0x72>
  }

  pinMode(pin, mode);

  if (isDigitalPin(pin)) {
    digitalPinMode[pin-2] = mode;
    ea22:	cf 2d       	mov	r28, r15
    ea24:	d0 e0       	ldi	r29, 0x00	; 0
    ea26:	22 97       	sbiw	r28, 0x02	; 2
    ea28:	c0 0f       	add	r28, r16
    ea2a:	d1 1f       	adc	r29, r17
    ea2c:	ee a2       	std	Y+38, r14	; 0x26
    digitalPinState[pin-2] = Scout.pinRead(pin);
    ea2e:	6f 2d       	mov	r22, r15
    ea30:	80 ea       	ldi	r24, 0xA0	; 160
    ea32:	95 e3       	ldi	r25, 0x35	; 53
    ea34:	3e dc       	rcall	.-1924   	; 0xe2b2 <_ZN13PinoccioScout7pinReadEh>
    ea36:	8f 8f       	std	Y+31, r24	; 0x1f
    ea38:	dc cf       	rjmp	.-72     	; 0xe9f2 <_ZN13PinoccioScout7setModeEhh+0x28>
  if (isAnalogPin(pin)) {
    analogPinMode[pin-A0] = mode;
    analogPinState[pin-A0] = Scout.pinRead(pin);
  }

  return true;
    ea3a:	81 e0       	ldi	r24, 0x01	; 1
}
    ea3c:	df 91       	pop	r29
    ea3e:	cf 91       	pop	r28
    ea40:	1f 91       	pop	r17
    ea42:	0f 91       	pop	r16
    ea44:	ff 90       	pop	r15
    ea46:	ef 90       	pop	r14
    ea48:	08 95       	ret

0000ea4a <_ZN13PinoccioScout8pinWriteEhh>:
    return true;
  }
  return false;
}

bool PinoccioScout::pinWrite(uint8_t pin, uint8_t value) {
    ea4a:	0f 93       	push	r16
    ea4c:	1f 93       	push	r17
    ea4e:	cf 93       	push	r28
    ea50:	df 93       	push	r29
    ea52:	ec 01       	movw	r28, r24
    ea54:	16 2f       	mov	r17, r22
    ea56:	04 2f       	mov	r16, r20
  if (isPinReserved(pin)) {
    ea58:	66 dc       	rcall	.-1844   	; 0xe326 <_ZN13PinoccioScout13isPinReservedEh>
    ea5a:	81 11       	cpse	r24, r1
    ea5c:	1b c0       	rjmp	.+54     	; 0xea94 <_ZN13PinoccioScout8pinWriteEhh+0x4a>

  return true;
}

bool PinoccioScout::isDigitalPin(uint8_t pin) {
  if (pin >= 2 && pin <= 8) {
    ea5e:	8e ef       	ldi	r24, 0xFE	; 254
    ea60:	81 0f       	add	r24, r17
    ea62:	87 30       	cpi	r24, 0x07	; 7
    ea64:	c8 f0       	brcs	.+50     	; 0xea98 <_ZN13PinoccioScout8pinWriteEhh+0x4e>
  }
  return false;
}

bool PinoccioScout::isAnalogPin(uint8_t pin) {
  if (pin >= A0 && pin <= A0 + NUM_ANALOG_INPUTS) {
    ea66:	88 ee       	ldi	r24, 0xE8	; 232
    ea68:	81 0f       	add	r24, r17
    ea6a:	89 30       	cpi	r24, 0x09	; 9
    ea6c:	10 f5       	brcc	.+68     	; 0xeab2 <_ZN13PinoccioScout8pinWriteEhh+0x68>
    Scout.makeOutput(pin);
    digitalWrite(pin, value);
    digitalPinState[pin-2] = value;
  }
  if (Scout.isAnalogPin(pin)) {
    Scout.makeOutput(pin);
    ea6e:	61 2f       	mov	r22, r17
    ea70:	80 ea       	ldi	r24, 0xA0	; 160
    ea72:	95 e3       	ldi	r25, 0x35	; 53
    ea74:	64 de       	rcall	.-824    	; 0xe73e <_ZN13PinoccioScout10makeOutputEh>
    digitalWrite(pin, value);
    ea76:	60 2f       	mov	r22, r16
    ea78:	81 2f       	mov	r24, r17
    ea7a:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <digitalWrite>
    analogPinState[pin-A0] = value;
    ea7e:	fe 01       	movw	r30, r28
    ea80:	e1 0f       	add	r30, r17
    ea82:	f1 1d       	adc	r31, r1
    ea84:	e1 0f       	add	r30, r17
    ea86:	f1 1d       	adc	r31, r1
    ea88:	f0 97       	sbiw	r30, 0x30	; 48
    ea8a:	40 2f       	mov	r20, r16
    ea8c:	50 e0       	ldi	r21, 0x00	; 0
    ea8e:	56 a7       	std	Z+46, r21	; 0x2e
    ea90:	45 a7       	std	Z+45, r20	; 0x2d
    ea92:	0f c0       	rjmp	.+30     	; 0xeab2 <_ZN13PinoccioScout8pinWriteEhh+0x68>
  return false;
}

bool PinoccioScout::pinWrite(uint8_t pin, uint8_t value) {
  if (isPinReserved(pin)) {
    return false;
    ea94:	80 e0       	ldi	r24, 0x00	; 0
    ea96:	0e c0       	rjmp	.+28     	; 0xeab4 <_ZN13PinoccioScout8pinWriteEhh+0x6a>
  }

  if (Scout.isDigitalPin(pin)) {
    Scout.makeOutput(pin);
    ea98:	61 2f       	mov	r22, r17
    ea9a:	80 ea       	ldi	r24, 0xA0	; 160
    ea9c:	95 e3       	ldi	r25, 0x35	; 53
    ea9e:	4f de       	rcall	.-866    	; 0xe73e <_ZN13PinoccioScout10makeOutputEh>
    digitalWrite(pin, value);
    eaa0:	60 2f       	mov	r22, r16
    eaa2:	81 2f       	mov	r24, r17
    eaa4:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <digitalWrite>
    digitalPinState[pin-2] = value;
    eaa8:	fe 01       	movw	r30, r28
    eaaa:	e1 0f       	add	r30, r17
    eaac:	f1 1d       	adc	r31, r1
    eaae:	05 8f       	std	Z+29, r16	; 0x1d
    eab0:	da cf       	rjmp	.-76     	; 0xea66 <_ZN13PinoccioScout8pinWriteEhh+0x1c>
    Scout.makeOutput(pin);
    digitalWrite(pin, value);
    analogPinState[pin-A0] = value;
  }

  return true;
    eab2:	81 e0       	ldi	r24, 0x01	; 1
}
    eab4:	df 91       	pop	r29
    eab6:	cf 91       	pop	r28
    eab8:	1f 91       	pop	r17
    eaba:	0f 91       	pop	r16
    eabc:	08 95       	ret

0000eabe <_GLOBAL__sub_I_Scout>:
      }
      Scout.temperature = val;
      Scout.temperatureEventHandler(val);
    }
  }
}
    eabe:	0f 93       	push	r16
    eac0:	00 e0       	ldi	r16, 0x00	; 0
    eac2:	20 e0       	ldi	r18, 0x00	; 0
    eac4:	40 e0       	ldi	r20, 0x00	; 0
    eac6:	60 e0       	ldi	r22, 0x00	; 0
    eac8:	86 e1       	ldi	r24, 0x16	; 22
    eaca:	99 e3       	ldi	r25, 0x39	; 57
    eacc:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <_ZN9IPAddressC1Ehhhh>

static void scoutDigitalStateChangeTimerHandler(SYS_Timer_t *timer);
static void scoutAnalogStateChangeTimerHandler(SYS_Timer_t *timer);
static void scoutPeripheralStateChangeTimerHandler(SYS_Timer_t *timer);

PinoccioScout Scout;
    ead0:	80 ea       	ldi	r24, 0xA0	; 160
    ead2:	95 e3       	ldi	r25, 0x35	; 53
      }
      Scout.temperature = val;
      Scout.temperatureEventHandler(val);
    }
  }
}
    ead4:	0f 91       	pop	r16

static void scoutDigitalStateChangeTimerHandler(SYS_Timer_t *timer);
static void scoutAnalogStateChangeTimerHandler(SYS_Timer_t *timer);
static void scoutPeripheralStateChangeTimerHandler(SYS_Timer_t *timer);

PinoccioScout Scout;
    ead6:	9d ca       	rjmp	.-2758   	; 0xe012 <_ZN13PinoccioScoutC1Ev>

0000ead8 <_GLOBAL__sub_D_Scout>:
    ead8:	80 ea       	ldi	r24, 0xA0	; 160
    eada:	95 e3       	ldi	r25, 0x35	; 53
    eadc:	f3 ca       	rjmp	.-2586   	; 0xe0c4 <_ZN13PinoccioScoutD1Ev>

0000eade <_Z13printToStringIXadL_Z18fieldCommandOutputEEEvh>:
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    eade:	68 2f       	mov	r22, r24
    eae0:	8a e8       	ldi	r24, 0x8A	; 138
    eae2:	99 e3       	ldi	r25, 0x39	; 57
    eae4:	0c 94 8c 19 	jmp	0x3318	; 0x3318 <_ZN6String6concatEc>

0000eae8 <_Z13printToStringIXadL_Z17leadCommandOutputEEEvh>:
    eae8:	68 2f       	mov	r22, r24
    eaea:	8c e1       	ldi	r24, 0x1C	; 28
    eaec:	99 e3       	ldi	r25, 0x39	; 57
    eaee:	0c 94 8c 19 	jmp	0x3318	; 0x3318 <_ZN6String6concatEc>

0000eaf2 <_ZL16fieldAnswerChunkv>:
  fieldAnswerTo = 0;
  // Free memory used by Stringbuffer
  fieldCommandOutput = (char*)NULL;
}

static void fieldAnswerChunk() {
    eaf2:	cf 93       	push	r28
    eaf4:	df 93       	push	r29
  int len = fieldCommandOutput.length() - fieldAnswerChunksAt;
    eaf6:	20 91 a7 39 	lds	r18, 0x39A7
    eafa:	30 91 a8 39 	lds	r19, 0x39A8
    eafe:	60 91 8e 39 	lds	r22, 0x398E
    eb02:	70 91 8f 39 	lds	r23, 0x398F
    eb06:	62 1b       	sub	r22, r18
    eb08:	73 0b       	sbc	r23, r19
  if (len > 100) {
    eb0a:	65 36       	cpi	r22, 0x65	; 101
    eb0c:	71 05       	cpc	r23, r1
    eb0e:	1c f4       	brge	.+6      	; 0xeb16 <_ZL16fieldAnswerChunkv+0x24>
    len = 100;
  } else {
    len++; // null terminator at end
    eb10:	eb 01       	movw	r28, r22
    eb12:	21 96       	adiw	r28, 0x01	; 1
    eb14:	02 c0       	rjmp	.+4      	; 0xeb1a <_ZL16fieldAnswerChunkv+0x28>
}

static void fieldAnswerChunk() {
  int len = fieldCommandOutput.length() - fieldAnswerChunksAt;
  if (len > 100) {
    len = 100;
    eb16:	c4 e6       	ldi	r28, 0x64	; 100
    eb18:	d0 e0       	ldi	r29, 0x00	; 0
  } else {
    len++; // null terminator at end
  }

  fieldAnswerReq.dstAddr = fieldAnswerTo;
    eb1a:	80 91 a9 39 	lds	r24, 0x39A9
    eb1e:	90 91 aa 39 	lds	r25, 0x39AA
    eb22:	90 93 98 39 	sts	0x3998, r25
    eb26:	80 93 97 39 	sts	0x3997, r24
  fieldAnswerReq.dstEndpoint = 3;
    eb2a:	83 e0       	ldi	r24, 0x03	; 3
    eb2c:	80 93 99 39 	sts	0x3999, r24
  fieldAnswerReq.srcEndpoint = 2;
    eb30:	82 e0       	ldi	r24, 0x02	; 2
    eb32:	80 93 9a 39 	sts	0x399A, r24
  fieldAnswerReq.options = NWK_OPT_ENABLE_SECURITY;
    eb36:	80 93 9b 39 	sts	0x399B, r24
  fieldAnswerReq.data = (uint8_t*)fieldCommandOutput.c_str() + fieldAnswerChunksAt;
    eb3a:	80 91 8a 39 	lds	r24, 0x398A
    eb3e:	90 91 8b 39 	lds	r25, 0x398B
    eb42:	82 0f       	add	r24, r18
    eb44:	93 1f       	adc	r25, r19
    eb46:	90 93 9f 39 	sts	0x399F, r25
    eb4a:	80 93 9e 39 	sts	0x399E, r24
  fieldAnswerReq.size = len;
    eb4e:	c0 93 a0 39 	sts	0x39A0, r28
  fieldAnswerReq.confirm = fieldAnswerChunkConfirm;
    eb52:	89 e3       	ldi	r24, 0x39	; 57
    eb54:	96 e7       	ldi	r25, 0x76	; 118
    eb56:	90 93 a2 39 	sts	0x39A2, r25
    eb5a:	80 93 a1 39 	sts	0x39A1, r24
  NWK_DataReq(&fieldAnswerReq);
    eb5e:	82 e9       	ldi	r24, 0x92	; 146
    eb60:	99 e3       	ldi	r25, 0x39	; 57
    eb62:	0e 94 d7 4a 	call	0x95ae	; 0x95ae <NWK_DataReq>

  if (hqVerboseOutput) {
    eb66:	80 91 b3 39 	lds	r24, 0x39B3
    eb6a:	88 23       	and	r24, r24
    eb6c:	f9 f0       	breq	.+62     	; 0xebac <_ZL16fieldAnswerChunkv+0xba>
    Serial.print(fieldAnswerTo);
    eb6e:	60 91 a9 39 	lds	r22, 0x39A9
    eb72:	70 91 aa 39 	lds	r23, 0x39AA
    eb76:	4a e0       	ldi	r20, 0x0A	; 10
    eb78:	50 e0       	ldi	r21, 0x00	; 0
    eb7a:	84 e0       	ldi	r24, 0x04	; 4
    eb7c:	94 e2       	ldi	r25, 0x24	; 36
    eb7e:	0e 94 4d 10 	call	0x209a	; 0x209a <_ZN5Print5printEii>
    Serial.print(F(" len "));
    eb82:	69 eb       	ldi	r22, 0xB9	; 185
    eb84:	7c e0       	ldi	r23, 0x0C	; 12
    eb86:	84 e0       	ldi	r24, 0x04	; 4
    eb88:	94 e2       	ldi	r25, 0x24	; 36
    eb8a:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.print(len);
    eb8e:	4a e0       	ldi	r20, 0x0A	; 10
    eb90:	50 e0       	ldi	r21, 0x00	; 0
    eb92:	be 01       	movw	r22, r28
    eb94:	84 e0       	ldi	r24, 0x04	; 4
    eb96:	94 e2       	ldi	r25, 0x24	; 36
    eb98:	0e 94 4d 10 	call	0x209a	; 0x209a <_ZN5Print5printEii>
    Serial.println(F("->chunk"));
    eb9c:	61 eb       	ldi	r22, 0xB1	; 177
    eb9e:	7c e0       	ldi	r23, 0x0C	; 12
    eba0:	84 e0       	ldi	r24, 0x04	; 4
    eba2:	94 e2       	ldi	r25, 0x24	; 36
  }
}
    eba4:	df 91       	pop	r29
    eba6:	cf 91       	pop	r28

  if (hqVerboseOutput) {
    Serial.print(fieldAnswerTo);
    Serial.print(F(" len "));
    Serial.print(len);
    Serial.println(F("->chunk"));
    eba8:	0c 94 7e 0f 	jmp	0x1efc	; 0x1efc <_ZN5Print7printlnEPK19__FlashStringHelper>
  }
}
    ebac:	df 91       	pop	r29
    ebae:	cf 91       	pop	r28
    ebb0:	08 95       	ret

0000ebb2 <_ZL16leadCommandChunkv>:
  leadCommandTo = 0;
  leadCommandChunks = (char*)NULL;
}

// called to send the first/next chunk of a command to another scout
static void leadCommandChunk() {
    ebb2:	cf 93       	push	r28
    ebb4:	df 93       	push	r29
  int len = leadCommandChunks.length() - leadCommandChunksAt;
    ebb6:	20 91 43 39 	lds	r18, 0x3943
    ebba:	30 91 44 39 	lds	r19, 0x3944
    ebbe:	60 91 49 39 	lds	r22, 0x3949
    ebc2:	70 91 4a 39 	lds	r23, 0x394A
    ebc6:	62 1b       	sub	r22, r18
    ebc8:	73 0b       	sbc	r23, r19
  if (len > 100) {
    ebca:	65 36       	cpi	r22, 0x65	; 101
    ebcc:	71 05       	cpc	r23, r1
    ebce:	1c f4       	brge	.+6      	; 0xebd6 <_ZL16leadCommandChunkv+0x24>
    len = 100;
  } else {
    len++; // null terminator at end
    ebd0:	eb 01       	movw	r28, r22
    ebd2:	21 96       	adiw	r28, 0x01	; 1
    ebd4:	02 c0       	rjmp	.+4      	; 0xebda <_ZL16leadCommandChunkv+0x28>

// called to send the first/next chunk of a command to another scout
static void leadCommandChunk() {
  int len = leadCommandChunks.length() - leadCommandChunksAt;
  if (len > 100) {
    len = 100;
    ebd6:	c4 e6       	ldi	r28, 0x64	; 100
    ebd8:	d0 e0       	ldi	r29, 0x00	; 0
  } else {
    len++; // null terminator at end
  }

  leadCommandReq.dstAddr = leadCommandTo;
    ebda:	80 91 4d 39 	lds	r24, 0x394D
    ebde:	90 91 4e 39 	lds	r25, 0x394E
    ebe2:	90 93 34 39 	sts	0x3934, r25
    ebe6:	80 93 33 39 	sts	0x3933, r24
  leadCommandReq.dstEndpoint = 2;
    ebea:	82 e0       	ldi	r24, 0x02	; 2
    ebec:	80 93 35 39 	sts	0x3935, r24
  leadCommandReq.srcEndpoint = 3;
    ebf0:	93 e0       	ldi	r25, 0x03	; 3
    ebf2:	90 93 36 39 	sts	0x3936, r25
  leadCommandReq.options = NWK_OPT_ENABLE_SECURITY;
    ebf6:	80 93 37 39 	sts	0x3937, r24
  leadCommandReq.data = (uint8_t*)leadCommandChunks.c_str() + leadCommandChunksAt;
    ebfa:	80 91 45 39 	lds	r24, 0x3945
    ebfe:	90 91 46 39 	lds	r25, 0x3946
    ec02:	82 0f       	add	r24, r18
    ec04:	93 1f       	adc	r25, r19
    ec06:	90 93 3b 39 	sts	0x393B, r25
    ec0a:	80 93 3a 39 	sts	0x393A, r24
  leadCommandReq.size = len;
    ec0e:	c0 93 3c 39 	sts	0x393C, r28
  leadCommandReq.confirm = leadCommandChunkConfirm;
    ec12:	84 eb       	ldi	r24, 0xB4	; 180
    ec14:	9e e7       	ldi	r25, 0x7E	; 126
    ec16:	90 93 3e 39 	sts	0x393E, r25
    ec1a:	80 93 3d 39 	sts	0x393D, r24
  NWK_DataReq(&leadCommandReq);
    ec1e:	8e e2       	ldi	r24, 0x2E	; 46
    ec20:	99 e3       	ldi	r25, 0x39	; 57
    ec22:	0e 94 d7 4a 	call	0x95ae	; 0x95ae <NWK_DataReq>
  //RgbLed.blinkCyan(200);

  if (hqVerboseOutput) {
    ec26:	80 91 b3 39 	lds	r24, 0x39B3
    ec2a:	88 23       	and	r24, r24
    ec2c:	f9 f0       	breq	.+62     	; 0xec6c <_ZL16leadCommandChunkv+0xba>
    Serial.print(leadCommandTo);
    ec2e:	60 91 4d 39 	lds	r22, 0x394D
    ec32:	70 91 4e 39 	lds	r23, 0x394E
    ec36:	4a e0       	ldi	r20, 0x0A	; 10
    ec38:	50 e0       	ldi	r21, 0x00	; 0
    ec3a:	84 e0       	ldi	r24, 0x04	; 4
    ec3c:	94 e2       	ldi	r25, 0x24	; 36
    ec3e:	0e 94 4d 10 	call	0x209a	; 0x209a <_ZN5Print5printEii>
    Serial.print(F(" len "));
    ec42:	69 ed       	ldi	r22, 0xD9	; 217
    ec44:	7b e0       	ldi	r23, 0x0B	; 11
    ec46:	84 e0       	ldi	r24, 0x04	; 4
    ec48:	94 e2       	ldi	r25, 0x24	; 36
    ec4a:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.print(len);
    ec4e:	4a e0       	ldi	r20, 0x0A	; 10
    ec50:	50 e0       	ldi	r21, 0x00	; 0
    ec52:	be 01       	movw	r22, r28
    ec54:	84 e0       	ldi	r24, 0x04	; 4
    ec56:	94 e2       	ldi	r25, 0x24	; 36
    ec58:	0e 94 4d 10 	call	0x209a	; 0x209a <_ZN5Print5printEii>
    Serial.println(F("->chunk"));
    ec5c:	61 ed       	ldi	r22, 0xD1	; 209
    ec5e:	7b e0       	ldi	r23, 0x0B	; 11
    ec60:	84 e0       	ldi	r24, 0x04	; 4
    ec62:	94 e2       	ldi	r25, 0x24	; 36
  }
}
    ec64:	df 91       	pop	r29
    ec66:	cf 91       	pop	r28

  if (hqVerboseOutput) {
    Serial.print(leadCommandTo);
    Serial.print(F(" len "));
    Serial.print(len);
    Serial.println(F("->chunk"));
    ec68:	0c 94 7e 0f 	jmp	0x1efc	; 0x1efc <_ZN5Print7printlnEPK19__FlashStringHelper>
  }
}
    ec6c:	df 91       	pop	r29
    ec6e:	cf 91       	pop	r28
    ec70:	08 95       	ret

0000ec72 <_ZL23fieldAnswerChunkConfirmP13NWK_DataReq_t>:
  fieldAnswerChunk();

  return true;
}

static void fieldAnswerChunkConfirm(NWK_DataReq_t *req) {
    ec72:	cf 93       	push	r28
    ec74:	df 93       	push	r29
    ec76:	ec 01       	movw	r28, r24
  if (hqVerboseOutput) {
    ec78:	80 91 b3 39 	lds	r24, 0x39B3
    ec7c:	88 23       	and	r24, r24
    ec7e:	31 f0       	breq	.+12     	; 0xec8c <_ZL23fieldAnswerChunkConfirmP13NWK_DataReq_t+0x1a>
    Serial.print(F("  Message confirmation - "));
    ec80:	67 e9       	ldi	r22, 0x97	; 151
    ec82:	7c e0       	ldi	r23, 0x0C	; 12
    ec84:	84 e0       	ldi	r24, 0x04	; 4
    ec86:	94 e2       	ldi	r25, 0x24	; 36
    ec88:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
  }
  if (req->status == NWK_SUCCESS_STATUS) {
    ec8c:	99 89       	ldd	r25, Y+17	; 0x11
    ec8e:	80 91 b3 39 	lds	r24, 0x39B3
    ec92:	91 11       	cpse	r25, r1
    ec94:	1e c0       	rjmp	.+60     	; 0xecd2 <_ZL23fieldAnswerChunkConfirmP13NWK_DataReq_t+0x60>
    if (hqVerboseOutput) {
    ec96:	88 23       	and	r24, r24
    ec98:	31 f0       	breq	.+12     	; 0xeca6 <_ZL23fieldAnswerChunkConfirmP13NWK_DataReq_t+0x34>
      Serial.println(F("success"));
    ec9a:	6f e8       	ldi	r22, 0x8F	; 143
    ec9c:	7c e0       	ldi	r23, 0x0C	; 12
    ec9e:	84 e0       	ldi	r24, 0x04	; 4
    eca0:	94 e2       	ldi	r25, 0x24	; 36
    eca2:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <_ZN5Print7printlnEPK19__FlashStringHelper>
    }
    if (fieldCommandOutput.length() - fieldAnswerChunksAt > 100) {
    eca6:	20 91 a7 39 	lds	r18, 0x39A7
    ecaa:	30 91 a8 39 	lds	r19, 0x39A8
    ecae:	80 91 8e 39 	lds	r24, 0x398E
    ecb2:	90 91 8f 39 	lds	r25, 0x398F
    ecb6:	82 1b       	sub	r24, r18
    ecb8:	93 0b       	sbc	r25, r19
    ecba:	85 36       	cpi	r24, 0x65	; 101
    ecbc:	91 05       	cpc	r25, r1
    ecbe:	98 f1       	brcs	.+102    	; 0xed26 <_ZL23fieldAnswerChunkConfirmP13NWK_DataReq_t+0xb4>
      fieldAnswerChunksAt += 100;
    ecc0:	2c 59       	subi	r18, 0x9C	; 156
    ecc2:	3f 4f       	sbci	r19, 0xFF	; 255
    ecc4:	30 93 a8 39 	sts	0x39A8, r19
    ecc8:	20 93 a7 39 	sts	0x39A7, r18
    }
  }
  fieldAnswerTo = 0;
  // Free memory used by Stringbuffer
  fieldCommandOutput = (char*)NULL;
}
    eccc:	df 91       	pop	r29
    ecce:	cf 91       	pop	r28
    if (hqVerboseOutput) {
      Serial.println(F("success"));
    }
    if (fieldCommandOutput.length() - fieldAnswerChunksAt > 100) {
      fieldAnswerChunksAt += 100;
      fieldAnswerChunk();
    ecd0:	10 cf       	rjmp	.-480    	; 0xeaf2 <_ZL16fieldAnswerChunkv>
      return; // don't free yet
    }
  } else {
    fieldAnswerRetries++;
    ecd2:	20 91 a5 39 	lds	r18, 0x39A5
    ecd6:	30 91 a6 39 	lds	r19, 0x39A6
    ecda:	2f 5f       	subi	r18, 0xFF	; 255
    ecdc:	3f 4f       	sbci	r19, 0xFF	; 255
    ecde:	30 93 a6 39 	sts	0x39A6, r19
    ece2:	20 93 a5 39 	sts	0x39A5, r18
    if (fieldAnswerRetries > 3) {
    ece6:	24 30       	cpi	r18, 0x04	; 4
    ece8:	31 05       	cpc	r19, r1
    ecea:	84 f0       	brlt	.+32     	; 0xed0c <_ZL23fieldAnswerChunkConfirmP13NWK_DataReq_t+0x9a>
      if (hqVerboseOutput) {
    ecec:	88 23       	and	r24, r24
    ecee:	d9 f0       	breq	.+54     	; 0xed26 <_ZL23fieldAnswerChunkConfirmP13NWK_DataReq_t+0xb4>
        Serial.print(F("error: "));
    ecf0:	67 e8       	ldi	r22, 0x87	; 135
    ecf2:	7c e0       	ldi	r23, 0x0C	; 12
    ecf4:	84 e0       	ldi	r24, 0x04	; 4
    ecf6:	94 e2       	ldi	r25, 0x24	; 36
    ecf8:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
        Serial.println(req->status);
    ecfc:	4a e0       	ldi	r20, 0x0A	; 10
    ecfe:	50 e0       	ldi	r21, 0x00	; 0
    ed00:	69 89       	ldd	r22, Y+17	; 0x11
    ed02:	84 e0       	ldi	r24, 0x04	; 4
    ed04:	94 e2       	ldi	r25, 0x24	; 36
    ed06:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <_ZN5Print7printlnEhi>
    ed0a:	0d c0       	rjmp	.+26     	; 0xed26 <_ZL23fieldAnswerChunkConfirmP13NWK_DataReq_t+0xb4>
      }
    } else {
      if (hqVerboseOutput) {
    ed0c:	88 23       	and	r24, r24
    ed0e:	31 f0       	breq	.+12     	; 0xed1c <_ZL23fieldAnswerChunkConfirmP13NWK_DataReq_t+0xaa>
        Serial.println(F("RETRY"));
    ed10:	61 e8       	ldi	r22, 0x81	; 129
    ed12:	7c e0       	ldi	r23, 0x0C	; 12
    ed14:	84 e0       	ldi	r24, 0x04	; 4
    ed16:	94 e2       	ldi	r25, 0x24	; 36
    ed18:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <_ZN5Print7printlnEPK19__FlashStringHelper>
      }
      NWK_DataReq(req);
    ed1c:	ce 01       	movw	r24, r28
    }
  }
  fieldAnswerTo = 0;
  // Free memory used by Stringbuffer
  fieldCommandOutput = (char*)NULL;
}
    ed1e:	df 91       	pop	r29
    ed20:	cf 91       	pop	r28
      }
    } else {
      if (hqVerboseOutput) {
        Serial.println(F("RETRY"));
      }
      NWK_DataReq(req);
    ed22:	0c 94 d7 4a 	jmp	0x95ae	; 0x95ae <NWK_DataReq>
      return; // don't free yet
    }
  }
  fieldAnswerTo = 0;
    ed26:	10 92 aa 39 	sts	0x39AA, r1
    ed2a:	10 92 a9 39 	sts	0x39A9, r1
  // Free memory used by Stringbuffer
  fieldCommandOutput = (char*)NULL;
    ed2e:	60 e0       	ldi	r22, 0x00	; 0
    ed30:	70 e0       	ldi	r23, 0x00	; 0
    ed32:	8a e8       	ldi	r24, 0x8A	; 138
    ed34:	99 e3       	ldi	r25, 0x39	; 57
}
    ed36:	df 91       	pop	r29
    ed38:	cf 91       	pop	r28
      return; // don't free yet
    }
  }
  fieldAnswerTo = 0;
  // Free memory used by Stringbuffer
  fieldCommandOutput = (char*)NULL;
    ed3a:	0c 94 3a 18 	jmp	0x3074	; 0x3074 <_ZN6StringaSEPKc>

0000ed3e <_ZL10leadSignalRK6String>:
    Serial.println(F("->chunk"));
  }
}

// wrapper to send a chunk of JSON to the HQ
void leadSignal(const String &json) {
    ed3e:	cf 93       	push	r28
    ed40:	df 93       	push	r29
    ed42:	ec 01       	movw	r28, r24
  if (!Scout.wifi.client.connected()) {
    ed44:	e0 91 f7 35 	lds	r30, 0x35F7
    ed48:	f0 91 f8 35 	lds	r31, 0x35F8
    ed4c:	04 88       	ldd	r0, Z+20	; 0x14
    ed4e:	f5 89       	ldd	r31, Z+21	; 0x15
    ed50:	e0 2d       	mov	r30, r0
    ed52:	87 ef       	ldi	r24, 0xF7	; 247
    ed54:	95 e3       	ldi	r25, 0x35	; 53
    ed56:	19 95       	eicall
    ed58:	90 91 b3 39 	lds	r25, 0x39B3
    ed5c:	81 11       	cpse	r24, r1
    ed5e:	0f c0       	rjmp	.+30     	; 0xed7e <_ZL10leadSignalRK6String+0x40>
    if (hqVerboseOutput) {
    ed60:	99 23       	and	r25, r25
    ed62:	59 f1       	breq	.+86     	; 0xedba <_ZL10leadSignalRK6String+0x7c>
      Serial.println(F("HQ offline, can't signal"));
    ed64:	69 e4       	ldi	r22, 0x49	; 73
    ed66:	7d e0       	ldi	r23, 0x0D	; 13
    ed68:	84 e0       	ldi	r24, 0x04	; 4
    ed6a:	94 e2       	ldi	r25, 0x24	; 36
    ed6c:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <_ZN5Print7printlnEPK19__FlashStringHelper>
      Serial.println(json);
    ed70:	be 01       	movw	r22, r28
    ed72:	84 e0       	ldi	r24, 0x04	; 4
    ed74:	94 e2       	ldi	r25, 0x24	; 36
    Serial.println(json);
  }

  Scout.wifi.client.print(json);
  Scout.wifi.client.flush();
}
    ed76:	df 91       	pop	r29
    ed78:	cf 91       	pop	r28
// wrapper to send a chunk of JSON to the HQ
void leadSignal(const String &json) {
  if (!Scout.wifi.client.connected()) {
    if (hqVerboseOutput) {
      Serial.println(F("HQ offline, can't signal"));
      Serial.println(json);
    ed7a:	0c 94 8e 0f 	jmp	0x1f1c	; 0x1f1c <_ZN5Print7printlnERK6String>
    }
    return;
  }
  if (hqVerboseOutput) {
    ed7e:	99 23       	and	r25, r25
    ed80:	59 f0       	breq	.+22     	; 0xed98 <_ZL10leadSignalRK6String+0x5a>
    Serial.println(F("Signalling HQ: "));
    ed82:	69 e3       	ldi	r22, 0x39	; 57
    ed84:	7d e0       	ldi	r23, 0x0D	; 13
    ed86:	84 e0       	ldi	r24, 0x04	; 4
    ed88:	94 e2       	ldi	r25, 0x24	; 36
    ed8a:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <_ZN5Print7printlnEPK19__FlashStringHelper>
    Serial.println(json);
    ed8e:	be 01       	movw	r22, r28
    ed90:	84 e0       	ldi	r24, 0x04	; 4
    ed92:	94 e2       	ldi	r25, 0x24	; 36
    ed94:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <_ZN5Print7printlnERK6String>
  }

  Scout.wifi.client.print(json);
    ed98:	be 01       	movw	r22, r28
    ed9a:	87 ef       	ldi	r24, 0xF7	; 247
    ed9c:	95 e3       	ldi	r25, 0x35	; 53
    ed9e:	0e 94 56 0f 	call	0x1eac	; 0x1eac <_ZN5Print5printERK6String>
  Scout.wifi.client.flush();
    eda2:	e0 91 f7 35 	lds	r30, 0x35F7
    eda6:	f0 91 f8 35 	lds	r31, 0x35F8
    edaa:	02 84       	ldd	r0, Z+10	; 0x0a
    edac:	f3 85       	ldd	r31, Z+11	; 0x0b
    edae:	e0 2d       	mov	r30, r0
    edb0:	87 ef       	ldi	r24, 0xF7	; 247
    edb2:	95 e3       	ldi	r25, 0x35	; 53
}
    edb4:	df 91       	pop	r29
    edb6:	cf 91       	pop	r28
    Serial.println(F("Signalling HQ: "));
    Serial.println(json);
  }

  Scout.wifi.client.print(json);
  Scout.wifi.client.flush();
    edb8:	19 94       	eijmp
}
    edba:	df 91       	pop	r29
    edbc:	cf 91       	pop	r28
    edbe:	08 95       	ret

0000edc0 <_ZL11leadAnswersP13NWK_DataInd_t>:

// called whenever another scout sends an answer back to us
bool leadAnswers(NWK_DataInd_t *ind) {
    edc0:	df 92       	push	r13
    edc2:	ef 92       	push	r14
    edc4:	ff 92       	push	r15
    edc6:	0f 93       	push	r16
    edc8:	1f 93       	push	r17
    edca:	cf 93       	push	r28
    edcc:	df 93       	push	r29
    edce:	cd b7       	in	r28, 0x3d	; 61
    edd0:	de b7       	in	r29, 0x3e	; 62
    edd2:	28 97       	sbiw	r28, 0x08	; 8
    edd4:	0f b6       	in	r0, 0x3f	; 63
    edd6:	f8 94       	cli
    edd8:	de bf       	out	0x3e, r29	; 62
    edda:	0f be       	out	0x3f, r0	; 63
    eddc:	cd bf       	out	0x3d, r28	; 61
    edde:	8c 01       	movw	r16, r24
  bool end = false;
  StringBuffer buf(256);
    ede0:	41 e0       	ldi	r20, 0x01	; 1
    ede2:	50 e0       	ldi	r21, 0x00	; 0
    ede4:	60 e0       	ldi	r22, 0x00	; 0
    ede6:	71 e0       	ldi	r23, 0x01	; 1
    ede8:	ce 01       	movw	r24, r28
    edea:	01 96       	adiw	r24, 0x01	; 1
    edec:	7c 01       	movw	r14, r24
    edee:	0e 94 8d ab 	call	0x1571a	; 0x1571a <_ZN12StringBufferC1Ejj>

  if (ind->options & NWK_IND_OPT_MULTICAST) {
    edf2:	d8 01       	movw	r26, r16
    edf4:	16 96       	adiw	r26, 0x06	; 6
    edf6:	9c 91       	ld	r25, X
    edf8:	80 91 b3 39 	lds	r24, 0x39B3
    edfc:	96 ff       	sbrs	r25, 6
    edfe:	0a c0       	rjmp	.+20     	; 0xee14 <_ZL11leadAnswersP13NWK_DataInd_t+0x54>
    if (hqVerboseOutput) {
    ee00:	88 23       	and	r24, r24
    ee02:	09 f4       	brne	.+2      	; 0xee06 <_ZL11leadAnswersP13NWK_DataInd_t+0x46>
    ee04:	71 c0       	rjmp	.+226    	; 0xeee8 <_ZL11leadAnswersP13NWK_DataInd_t+0x128>
      Serial.println(F("MULTICAST on wrong endpoint"));
    ee06:	65 e6       	ldi	r22, 0x65	; 101
    ee08:	7c e0       	ldi	r23, 0x0C	; 12
    ee0a:	84 e0       	ldi	r24, 0x04	; 4
    ee0c:	94 e2       	ldi	r25, 0x24	; 36
    ee0e:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <_ZN5Print7printlnEPK19__FlashStringHelper>
    ee12:	6a c0       	rjmp	.+212    	; 0xeee8 <_ZL11leadAnswersP13NWK_DataInd_t+0x128>
    }
    return true;
  }

  if (hqVerboseOutput) {
    ee14:	88 23       	and	r24, r24
    ee16:	a9 f0       	breq	.+42     	; 0xee42 <_ZL11leadAnswersP13NWK_DataInd_t+0x82>
    Serial.print(F("Received answer from Scout "));
    ee18:	69 e4       	ldi	r22, 0x49	; 73
    ee1a:	7c e0       	ldi	r23, 0x0C	; 12
    ee1c:	84 e0       	ldi	r24, 0x04	; 4
    ee1e:	94 e2       	ldi	r25, 0x24	; 36
    ee20:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.print(ind->srcAddr);
    ee24:	f8 01       	movw	r30, r16
    ee26:	60 81       	ld	r22, Z
    ee28:	71 81       	ldd	r23, Z+1	; 0x01
    ee2a:	4a e0       	ldi	r20, 0x0A	; 10
    ee2c:	50 e0       	ldi	r21, 0x00	; 0
    ee2e:	84 e0       	ldi	r24, 0x04	; 4
    ee30:	94 e2       	ldi	r25, 0x24	; 36
    ee32:	0e 94 91 10 	call	0x2122	; 0x2122 <_ZN5Print5printEji>
    Serial.println(F(":"));
    ee36:	67 e4       	ldi	r22, 0x47	; 71
    ee38:	7c e0       	ldi	r23, 0x0C	; 12
    ee3a:	84 e0       	ldi	r24, 0x04	; 4
    ee3c:	94 e2       	ldi	r25, 0x24	; 36
    ee3e:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <_ZN5Print7printlnEPK19__FlashStringHelper>
  }
  if (ind->data[ind->size-1] == 0) {
    ee42:	d8 01       	movw	r26, r16
    ee44:	19 96       	adiw	r26, 0x09	; 9
    ee46:	8c 91       	ld	r24, X
    ee48:	19 97       	sbiw	r26, 0x09	; 9
    ee4a:	17 96       	adiw	r26, 0x07	; 7
    ee4c:	ed 91       	ld	r30, X+
    ee4e:	fc 91       	ld	r31, X
    ee50:	18 97       	sbiw	r26, 0x08	; 8
    ee52:	e8 0f       	add	r30, r24
    ee54:	f1 1d       	adc	r31, r1
    ee56:	31 97       	sbiw	r30, 0x01	; 1
    ee58:	90 81       	ld	r25, Z
    ee5a:	91 11       	cpse	r25, r1
    ee5c:	06 c0       	rjmp	.+12     	; 0xee6a <_ZL11leadAnswersP13NWK_DataInd_t+0xaa>
    end = true;
    ind->size--;
    ee5e:	81 50       	subi	r24, 0x01	; 1
    ee60:	19 96       	adiw	r26, 0x09	; 9
    ee62:	8c 93       	st	X, r24
    Serial.print(F("Received answer from Scout "));
    Serial.print(ind->srcAddr);
    Serial.println(F(":"));
  }
  if (ind->data[ind->size-1] == 0) {
    end = true;
    ee64:	dd 24       	eor	r13, r13
    ee66:	d3 94       	inc	r13
    ee68:	01 c0       	rjmp	.+2      	; 0xee6c <_ZL11leadAnswersP13NWK_DataInd_t+0xac>
  Scout.wifi.client.flush();
}

// called whenever another scout sends an answer back to us
bool leadAnswers(NWK_DataInd_t *ind) {
  bool end = false;
    ee6a:	d1 2c       	mov	r13, r1
  }
  if (ind->data[ind->size-1] == 0) {
    end = true;
    ind->size--;
  }
  buf.appendSprintf("{\"type\":\"reply\",\"id\":%d,\"from\":%d,\"reply\":", leadAnswerID, ind->srcAddr);
    ee6c:	f8 01       	movw	r30, r16
    ee6e:	81 81       	ldd	r24, Z+1	; 0x01
    ee70:	8f 93       	push	r24
    ee72:	80 81       	ld	r24, Z
    ee74:	8f 93       	push	r24
    ee76:	80 91 2d 39 	lds	r24, 0x392D
    ee7a:	8f 93       	push	r24
    ee7c:	80 91 2c 39 	lds	r24, 0x392C
    ee80:	8f 93       	push	r24
    ee82:	85 ed       	ldi	r24, 0xD5	; 213
    ee84:	98 e1       	ldi	r25, 0x18	; 24
    ee86:	9f 93       	push	r25
    ee88:	8f 93       	push	r24
    ee8a:	ff 92       	push	r15
    ee8c:	ef 92       	push	r14
    ee8e:	0e 94 b2 ab 	call	0x15764	; 0x15764 <_ZN12StringBuffer13appendSprintfEPKcz>
  buf.appendJsonString(ind->data, ind->size, true);
    ee92:	d8 01       	movw	r26, r16
    ee94:	19 96       	adiw	r26, 0x09	; 9
    ee96:	4c 91       	ld	r20, X
    ee98:	19 97       	sbiw	r26, 0x09	; 9
    ee9a:	50 e0       	ldi	r21, 0x00	; 0

    // Helper methods
    size_t appendSprintf(const char *fmt, ...);
    size_t appendJsonString(const char *in, size_t len, bool add_quotes);
    size_t appendJsonString(const uint8_t *in, size_t len, bool add_quotes) {
      return appendJsonString((const char *)in, len, add_quotes);
    ee9c:	17 96       	adiw	r26, 0x07	; 7
    ee9e:	6d 91       	ld	r22, X+
    eea0:	7c 91       	ld	r23, X
    eea2:	18 97       	sbiw	r26, 0x08	; 8
    eea4:	21 e0       	ldi	r18, 0x01	; 1
    eea6:	c7 01       	movw	r24, r14
    eea8:	0e 94 66 ac 	call	0x158cc	; 0x158cc <_ZN12StringBuffer16appendJsonStringEPKcjb>
  buf.appendSprintf(",\"end\":%s}\n",end ? "true" : "false");
    eeac:	0f b6       	in	r0, 0x3f	; 63
    eeae:	f8 94       	cli
    eeb0:	de bf       	out	0x3e, r29	; 62
    eeb2:	0f be       	out	0x3f, r0	; 63
    eeb4:	cd bf       	out	0x3d, r28	; 61
    eeb6:	dd 20       	and	r13, r13
    eeb8:	19 f0       	breq	.+6      	; 0xeec0 <_ZL11leadAnswersP13NWK_DataInd_t+0x100>
    eeba:	8a ec       	ldi	r24, 0xCA	; 202
    eebc:	98 e1       	ldi	r25, 0x18	; 24
    eebe:	02 c0       	rjmp	.+4      	; 0xeec4 <_ZL11leadAnswersP13NWK_DataInd_t+0x104>
    eec0:	8f ec       	ldi	r24, 0xCF	; 207
    eec2:	98 e1       	ldi	r25, 0x18	; 24
    eec4:	9f 93       	push	r25
    eec6:	8f 93       	push	r24
    eec8:	80 e0       	ldi	r24, 0x00	; 0
    eeca:	99 e1       	ldi	r25, 0x19	; 25
    eecc:	9f 93       	push	r25
    eece:	8f 93       	push	r24
    eed0:	ff 92       	push	r15
    eed2:	ef 92       	push	r14
    eed4:	0e 94 b2 ab 	call	0x15764	; 0x15764 <_ZN12StringBuffer13appendSprintfEPKcz>
  leadSignal(buf);
    eed8:	c7 01       	movw	r24, r14
    eeda:	31 df       	rcall	.-414    	; 0xed3e <_ZL10leadSignalRK6String>

  return true;
    eedc:	0f 90       	pop	r0
    eede:	0f 90       	pop	r0
    eee0:	0f 90       	pop	r0
    eee2:	0f 90       	pop	r0
    eee4:	0f 90       	pop	r0
    eee6:	0f 90       	pop	r0
/**
 * Extend the Arduino String class with some operations that make using
 * it as buffer for reading input or building output more efficient
 * (e.g,. without copying data).
 */
class StringBuffer : public String {
    eee8:	c7 01       	movw	r24, r14
    eeea:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
}
    eeee:	81 e0       	ldi	r24, 0x01	; 1
    eef0:	28 96       	adiw	r28, 0x08	; 8
    eef2:	0f b6       	in	r0, 0x3f	; 63
    eef4:	f8 94       	cli
    eef6:	de bf       	out	0x3e, r29	; 62
    eef8:	0f be       	out	0x3f, r0	; 63
    eefa:	cd bf       	out	0x3d, r28	; 61
    eefc:	df 91       	pop	r29
    eefe:	cf 91       	pop	r28
    ef00:	1f 91       	pop	r17
    ef02:	0f 91       	pop	r16
    ef04:	ff 90       	pop	r15
    ef06:	ef 90       	pop	r14
    ef08:	df 90       	pop	r13
    ef0a:	08 95       	ret

0000ef0c <_ZL13fieldCommandsP13NWK_DataInd_t>:

void PinoccioScoutHandler::setVerbose(bool flag) {
  hqVerboseOutput = flag;
}

static bool fieldCommands(NWK_DataInd_t *ind) {
    ef0c:	cf 92       	push	r12
    ef0e:	df 92       	push	r13
    ef10:	ef 92       	push	r14
    ef12:	ff 92       	push	r15
    ef14:	cf 93       	push	r28
    ef16:	df 93       	push	r29
    ef18:	ec 01       	movw	r28, r24
  int ret;
  if (hqVerboseOutput) {
    ef1a:	80 91 b3 39 	lds	r24, 0x39B3
    ef1e:	88 23       	and	r24, r24
    ef20:	49 f1       	breq	.+82     	; 0xef74 <_ZL13fieldCommandsP13NWK_DataInd_t+0x68>
    Serial.print(F("Received command"));
    ef22:	68 e2       	ldi	r22, 0x28	; 40
    ef24:	7d e0       	ldi	r23, 0x0D	; 13
    ef26:	84 e0       	ldi	r24, 0x04	; 4
    ef28:	94 e2       	ldi	r25, 0x24	; 36
    ef2a:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.print(F("lqi: "));
    ef2e:	62 e2       	ldi	r22, 0x22	; 34
    ef30:	7d e0       	ldi	r23, 0x0D	; 13
    ef32:	84 e0       	ldi	r24, 0x04	; 4
    ef34:	94 e2       	ldi	r25, 0x24	; 36
    ef36:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.print(ind->lqi);
    ef3a:	4a e0       	ldi	r20, 0x0A	; 10
    ef3c:	50 e0       	ldi	r21, 0x00	; 0
    ef3e:	6a 85       	ldd	r22, Y+10	; 0x0a
    ef40:	84 e0       	ldi	r24, 0x04	; 4
    ef42:	94 e2       	ldi	r25, 0x24	; 36
    ef44:	0e 94 76 10 	call	0x20ec	; 0x20ec <_ZN5Print5printEhi>
    Serial.print(F("  "));
    ef48:	6f e1       	ldi	r22, 0x1F	; 31
    ef4a:	7d e0       	ldi	r23, 0x0D	; 13
    ef4c:	84 e0       	ldi	r24, 0x04	; 4
    ef4e:	94 e2       	ldi	r25, 0x24	; 36
    ef50:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.print(F("rssi: "));
    ef54:	68 e1       	ldi	r22, 0x18	; 24
    ef56:	7d e0       	ldi	r23, 0x0D	; 13
    ef58:	84 e0       	ldi	r24, 0x04	; 4
    ef5a:	94 e2       	ldi	r25, 0x24	; 36
    ef5c:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.println(ind->rssi);
    ef60:	6b 85       	ldd	r22, Y+11	; 0x0b
    ef62:	77 27       	eor	r23, r23
    ef64:	67 fd       	sbrc	r22, 7
    ef66:	70 95       	com	r23
    ef68:	4a e0       	ldi	r20, 0x0A	; 10
    ef6a:	50 e0       	ldi	r21, 0x00	; 0
    ef6c:	84 e0       	ldi	r24, 0x04	; 4
    ef6e:	94 e2       	ldi	r25, 0x24	; 36
    ef70:	0e 94 54 10 	call	0x20a8	; 0x20a8 <_ZN5Print7printlnEii>
  }

  if (fieldAnswerTo) {
    ef74:	80 91 a9 39 	lds	r24, 0x39A9
    ef78:	90 91 aa 39 	lds	r25, 0x39AA
    ef7c:	89 2b       	or	r24, r25
    ef7e:	61 f0       	breq	.+24     	; 0xef98 <_ZL13fieldCommandsP13NWK_DataInd_t+0x8c>
    if (hqVerboseOutput) {
    ef80:	80 91 b3 39 	lds	r24, 0x39B3
    ef84:	88 23       	and	r24, r24
    ef86:	09 f4       	brne	.+2      	; 0xef8a <_ZL13fieldCommandsP13NWK_DataInd_t+0x7e>
    ef88:	70 c0       	rjmp	.+224    	; 0xf06a <_ZL13fieldCommandsP13NWK_DataInd_t+0x15e>
      Serial.println(F("can't receive command while sending answer"));
    ef8a:	6d ee       	ldi	r22, 0xED	; 237
    ef8c:	7c e0       	ldi	r23, 0x0C	; 12
    ef8e:	84 e0       	ldi	r24, 0x04	; 4
    ef90:	94 e2       	ldi	r25, 0x24	; 36
    ef92:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <_ZN5Print7printlnEPK19__FlashStringHelper>
    ef96:	69 c0       	rjmp	.+210    	; 0xf06a <_ZL13fieldCommandsP13NWK_DataInd_t+0x15e>
    }
    return false;
  }

  if (!fieldCommand.concat((const char*)ind->data, ind->size)) {
    ef98:	49 85       	ldd	r20, Y+9	; 0x09
    ef9a:	50 e0       	ldi	r21, 0x00	; 0
    ef9c:	6f 81       	ldd	r22, Y+7	; 0x07
    ef9e:	78 85       	ldd	r23, Y+8	; 0x08
    efa0:	8b ea       	ldi	r24, 0xAB	; 171
    efa2:	99 e3       	ldi	r25, 0x39	; 57
    efa4:	0e 94 5f ad 	call	0x15abe	; 0x15abe <_ZN12StringBuffer6concatEPKcj>
    efa8:	88 23       	and	r24, r24
    efaa:	09 f4       	brne	.+2      	; 0xefae <_ZL13fieldCommandsP13NWK_DataInd_t+0xa2>
    efac:	5e c0       	rjmp	.+188    	; 0xf06a <_ZL13fieldCommandsP13NWK_DataInd_t+0x15e>
    return false; // TODO we need to restart or something, no memory
  }

  // when null terminated, do the message
  if (fieldCommand[fieldCommand.length() - 1] != '\0') {
    efae:	60 91 af 39 	lds	r22, 0x39AF
    efb2:	70 91 b0 39 	lds	r23, 0x39B0
    efb6:	61 50       	subi	r22, 0x01	; 1
    efb8:	71 09       	sbc	r23, r1
    efba:	8b ea       	ldi	r24, 0xAB	; 171
    efbc:	99 e3       	ldi	r25, 0x39	; 57
    efbe:	0e 94 c8 19 	call	0x3390	; 0x3390 <_ZN6StringixEj>
    efc2:	fc 01       	movw	r30, r24
    efc4:	90 81       	ld	r25, Z
    efc6:	80 91 b3 39 	lds	r24, 0x39B3
    efca:	99 23       	and	r25, r25
    efcc:	51 f0       	breq	.+20     	; 0xefe2 <_ZL13fieldCommandsP13NWK_DataInd_t+0xd6>
    if (hqVerboseOutput) {
    efce:	88 23       	and	r24, r24
    efd0:	09 f4       	brne	.+2      	; 0xefd4 <_ZL13fieldCommandsP13NWK_DataInd_t+0xc8>
    efd2:	49 c0       	rjmp	.+146    	; 0xf066 <_ZL13fieldCommandsP13NWK_DataInd_t+0x15a>
      Serial.println(F("waiting for more"));
    efd4:	6c ed       	ldi	r22, 0xDC	; 220
    efd6:	7c e0       	ldi	r23, 0x0C	; 12
    efd8:	84 e0       	ldi	r24, 0x04	; 4
    efda:	94 e2       	ldi	r25, 0x24	; 36
    efdc:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <_ZN5Print7printlnEPK19__FlashStringHelper>
    efe0:	42 c0       	rjmp	.+132    	; 0xf066 <_ZL13fieldCommandsP13NWK_DataInd_t+0x15a>
    }
    return true;
  }

  if (hqVerboseOutput) {
    efe2:	88 23       	and	r24, r24
    efe4:	61 f0       	breq	.+24     	; 0xeffe <_ZL13fieldCommandsP13NWK_DataInd_t+0xf2>
    Serial.print(F("running command "));
    efe6:	6b ec       	ldi	r22, 0xCB	; 203
    efe8:	7c e0       	ldi	r23, 0x0C	; 12
    efea:	84 e0       	ldi	r24, 0x04	; 4
    efec:	94 e2       	ldi	r25, 0x24	; 36
    efee:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.println(fieldCommand);
    eff2:	6b ea       	ldi	r22, 0xAB	; 171
    eff4:	79 e3       	ldi	r23, 0x39	; 57
    eff6:	84 e0       	ldi	r24, 0x04	; 4
    eff8:	94 e2       	ldi	r25, 0x24	; 36
    effa:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <_ZN5Print7printlnERK6String>
  }

  // run the command and chunk back the results
  setOutputHandler(&printToString<&fieldCommandOutput>);
    effe:	8f e6       	ldi	r24, 0x6F	; 111
    f000:	95 e7       	ldi	r25, 0x75	; 117
    f002:	0e 94 90 1e 	call	0x3d20	; 0x3d20 <_Z16setOutputHandlerPFvhE>

  // TODO: Once bitlash fixes const-correctness, this and similar casts
  // should be removed.
  ret = (int)doCommand(const_cast<char *>(fieldCommand.c_str()));
    f006:	80 91 ab 39 	lds	r24, 0x39AB
    f00a:	90 91 ac 39 	lds	r25, 0x39AC
    f00e:	0e 94 59 35 	call	0x6ab2	; 0x6ab2 <_Z9doCommandPc>
    f012:	6b 01       	movw	r12, r22
    f014:	7c 01       	movw	r14, r24
  fieldCommand = (char*)NULL;
    f016:	60 e0       	ldi	r22, 0x00	; 0
    f018:	70 e0       	ldi	r23, 0x00	; 0
    f01a:	8b ea       	ldi	r24, 0xAB	; 171
    f01c:	99 e3       	ldi	r25, 0x39	; 57
    f01e:	0e 94 3a 18 	call	0x3074	; 0x3074 <_ZN6StringaSEPKc>

  resetOutputHandler();
    f022:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <_Z18resetOutputHandlerv>

  if (hqVerboseOutput) {
    f026:	80 91 b3 39 	lds	r24, 0x39B3
    f02a:	88 23       	and	r24, r24
    f02c:	69 f0       	breq	.+26     	; 0xf048 <_ZL13fieldCommandsP13NWK_DataInd_t+0x13c>
    Serial.print(F("got result "));
    f02e:	6f eb       	ldi	r22, 0xBF	; 191
    f030:	7c e0       	ldi	r23, 0x0C	; 12
    f032:	84 e0       	ldi	r24, 0x04	; 4
    f034:	94 e2       	ldi	r25, 0x24	; 36
    f036:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.println(ret);
    f03a:	4a e0       	ldi	r20, 0x0A	; 10
    f03c:	50 e0       	ldi	r21, 0x00	; 0
    f03e:	b6 01       	movw	r22, r12
    f040:	84 e0       	ldi	r24, 0x04	; 4
    f042:	94 e2       	ldi	r25, 0x24	; 36
    f044:	0e 94 54 10 	call	0x20a8	; 0x20a8 <_ZN5Print7printlnEii>
  }

  // send data back in chunks
  fieldAnswerTo = ind->srcAddr;
    f048:	88 81       	ld	r24, Y
    f04a:	99 81       	ldd	r25, Y+1	; 0x01
    f04c:	90 93 aa 39 	sts	0x39AA, r25
    f050:	80 93 a9 39 	sts	0x39A9, r24
  fieldAnswerChunksAt = 0;
    f054:	10 92 a8 39 	sts	0x39A8, r1
    f058:	10 92 a7 39 	sts	0x39A7, r1
  fieldAnswerRetries = 0;
    f05c:	10 92 a6 39 	sts	0x39A6, r1
    f060:	10 92 a5 39 	sts	0x39A5, r1
  fieldAnswerChunk();
    f064:	46 dd       	rcall	.-1396   	; 0xeaf2 <_ZL16fieldAnswerChunkv>
  // when null terminated, do the message
  if (fieldCommand[fieldCommand.length() - 1] != '\0') {
    if (hqVerboseOutput) {
      Serial.println(F("waiting for more"));
    }
    return true;
    f066:	81 e0       	ldi	r24, 0x01	; 1
    f068:	01 c0       	rjmp	.+2      	; 0xf06c <_ZL13fieldCommandsP13NWK_DataInd_t+0x160>

  if (fieldAnswerTo) {
    if (hqVerboseOutput) {
      Serial.println(F("can't receive command while sending answer"));
    }
    return false;
    f06a:	80 e0       	ldi	r24, 0x00	; 0
  fieldAnswerChunksAt = 0;
  fieldAnswerRetries = 0;
  fieldAnswerChunk();

  return true;
}
    f06c:	df 91       	pop	r29
    f06e:	cf 91       	pop	r28
    f070:	ff 90       	pop	r15
    f072:	ef 90       	pop	r14
    f074:	df 90       	pop	r13
    f076:	cf 90       	pop	r12
    f078:	08 95       	ret

0000f07a <_Z41__static_initialization_and_destruction_0ii.part.6>:
    f07a:	8c e1       	ldi	r24, 0x1C	; 28
    f07c:	99 e3       	ldi	r25, 0x39	; 57
    f07e:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
    f082:	84 e2       	ldi	r24, 0x24	; 36
    f084:	99 e3       	ldi	r25, 0x39	; 57
    f086:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
    f08a:	85 e4       	ldi	r24, 0x45	; 69
    f08c:	99 e3       	ldi	r25, 0x39	; 57
    f08e:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
    f092:	8a e8       	ldi	r24, 0x8A	; 138
    f094:	99 e3       	ldi	r25, 0x39	; 57
    f096:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
    f09a:	8b ea       	ldi	r24, 0xAB	; 171
    f09c:	99 e3       	ldi	r25, 0x39	; 57
    f09e:	0c 94 7e 17 	jmp	0x2efc	; 0x2efc <_ZN6StringD1Ev>

0000f0a2 <_ZN20PinoccioScoutHandlerC1Ev>:

// called whenever another scout sends an answer back to us
static bool leadAnswers(NWK_DataInd_t *ind);


PinoccioScoutHandler::PinoccioScoutHandler() { }
    f0a2:	08 95       	ret

0000f0a4 <_ZN20PinoccioScoutHandlerD1Ev>:

PinoccioScoutHandler::~PinoccioScoutHandler() { }
    f0a4:	08 95       	ret

0000f0a6 <_ZN20PinoccioScoutHandler5setupEv>:

void PinoccioScoutHandler::setup() {
    f0a6:	cf 93       	push	r28
    f0a8:	df 93       	push	r29
  if (Scout.isLeadScout()) {
    f0aa:	80 ea       	ldi	r24, 0xA0	; 160
    f0ac:	95 e3       	ldi	r25, 0x35	; 53
    f0ae:	5d d8       	rcall	.-3910   	; 0xe16a <_ZN13PinoccioScout11isLeadScoutEv>
    f0b0:	88 23       	and	r24, r24
    f0b2:	e1 f0       	breq	.+56     	; 0xf0ec <_ZN20PinoccioScoutHandler5setupEv+0x46>
    Scout.wifi.setup();
    f0b4:	87 ef       	ldi	r24, 0xF7	; 247
    f0b6:	95 e3       	ldi	r25, 0x35	; 53
    f0b8:	0e 94 08 65 	call	0xca10	; 0xca10 <_ZN12WiFiBackpack5setupEv>
    Scout.wifi.autoConnectHq();
    f0bc:	87 ef       	ldi	r24, 0xF7	; 247
    f0be:	95 e3       	ldi	r25, 0x35	; 53
    f0c0:	0e 94 a9 66 	call	0xcd52	; 0xcd52 <_ZN12WiFiBackpack13autoConnectHqEv>

    Scout.meshListen(3, leadAnswers);
    f0c4:	40 ee       	ldi	r20, 0xE0	; 224
    f0c6:	56 e7       	ldi	r21, 0x76	; 118
    f0c8:	63 e0       	ldi	r22, 0x03	; 3
    f0ca:	80 ea       	ldi	r24, 0xA0	; 160
    f0cc:	95 e3       	ldi	r25, 0x35	; 53
    f0ce:	0e 94 99 6e 	call	0xdd32	; 0xdd32 <_ZN13PinoccioClass10meshListenEhPFbP13NWK_DataInd_tE>
    Scout.meshJoinGroup(0xBEEF); // our internal reporting channel
    f0d2:	6f ee       	ldi	r22, 0xEF	; 239
    f0d4:	7e eb       	ldi	r23, 0xBE	; 190
    f0d6:	80 ea       	ldi	r24, 0xA0	; 160
    f0d8:	95 e3       	ldi	r25, 0x35	; 53
    f0da:	0e 94 9d 6e 	call	0xdd3a	; 0xdd3a <_ZN13PinoccioClass13meshJoinGroupEj>
    Scout.meshJoinGroup(0); // reports to HQ
    f0de:	60 e0       	ldi	r22, 0x00	; 0
    f0e0:	70 e0       	ldi	r23, 0x00	; 0
    f0e2:	80 ea       	ldi	r24, 0xA0	; 160
    f0e4:	95 e3       	ldi	r25, 0x35	; 53
    f0e6:	0e 94 9d 6e 	call	0xdd3a	; 0xdd3a <_ZN13PinoccioClass13meshJoinGroupEj>
    f0ea:	07 c0       	rjmp	.+14     	; 0xf0fa <_ZN20PinoccioScoutHandler5setupEv+0x54>
  } else {
    Scout.meshListen(2, fieldCommands);
    f0ec:	46 e8       	ldi	r20, 0x86	; 134
    f0ee:	57 e7       	ldi	r21, 0x77	; 119
    f0f0:	62 e0       	ldi	r22, 0x02	; 2
    f0f2:	80 ea       	ldi	r24, 0xA0	; 160
    f0f4:	95 e3       	ldi	r25, 0x35	; 53
    f0f6:	0e 94 99 6e 	call	0xdd32	; 0xdd32 <_ZN13PinoccioClass10meshListenEhPFbP13NWK_DataInd_tE>

PinoccioScoutHandler::PinoccioScoutHandler() { }

PinoccioScoutHandler::~PinoccioScoutHandler() { }

void PinoccioScoutHandler::setup() {
    f0fa:	c1 e0       	ldi	r28, 0x01	; 1
    f0fc:	d0 e0       	ldi	r29, 0x00	; 0
    Scout.meshListen(2, fieldCommands);
  }

  // join a set of groups to listen for announcements
  for (int i = 1; i < 10; i++) {
    Scout.meshJoinGroup(i);
    f0fe:	be 01       	movw	r22, r28
    f100:	80 ea       	ldi	r24, 0xA0	; 160
    f102:	95 e3       	ldi	r25, 0x35	; 53
    f104:	0e 94 9d 6e 	call	0xdd3a	; 0xdd3a <_ZN13PinoccioClass13meshJoinGroupEj>
  } else {
    Scout.meshListen(2, fieldCommands);
  }

  // join a set of groups to listen for announcements
  for (int i = 1; i < 10; i++) {
    f108:	21 96       	adiw	r28, 0x01	; 1
    f10a:	ca 30       	cpi	r28, 0x0A	; 10
    f10c:	d1 05       	cpc	r29, r1
    f10e:	b9 f7       	brne	.-18     	; 0xf0fe <_ZN20PinoccioScoutHandler5setupEv+0x58>
    Scout.meshJoinGroup(i);
  }

  Scout.meshListen(4, fieldAnnouncements);
    f110:	46 eb       	ldi	r20, 0xB6	; 182
    f112:	5a e7       	ldi	r21, 0x7A	; 122
    f114:	64 e0       	ldi	r22, 0x04	; 4
    f116:	80 ea       	ldi	r24, 0xA0	; 160
    f118:	95 e3       	ldi	r25, 0x35	; 53
    f11a:	0e 94 99 6e 	call	0xdd32	; 0xdd32 <_ZN13PinoccioClass10meshListenEhPFbP13NWK_DataInd_tE>
  
  memset(announceQ,0,announceQsize*sizeof(char*));
    f11e:	84 e1       	ldi	r24, 0x14	; 20
    f120:	e6 e7       	ldi	r30, 0x76	; 118
    f122:	f9 e3       	ldi	r31, 0x39	; 57
    f124:	df 01       	movw	r26, r30
    f126:	1d 92       	st	X+, r1
    f128:	8a 95       	dec	r24
    f12a:	e9 f7       	brne	.-6      	; 0xf126 <_ZN20PinoccioScoutHandler5setupEv+0x80>
}
    f12c:	df 91       	pop	r29
    f12e:	cf 91       	pop	r28
    f130:	08 95       	ret

0000f132 <_ZN20PinoccioScoutHandler10setVerboseEb>:
    leadHQHandle();
  }
}

void PinoccioScoutHandler::setVerbose(bool flag) {
  hqVerboseOutput = flag;
    f132:	60 93 b3 39 	sts	0x39B3, r22
    f136:	08 95       	ret

0000f138 <_Z13announceQSendv>:
  announceQG[0] = group;
  announceQSend();
}

void announceQSend(void){
  if(!announceQ[0]) return;
    f138:	80 91 76 39 	lds	r24, 0x3976
    f13c:	90 91 77 39 	lds	r25, 0x3977
    f140:	89 2b       	or	r24, r25
    f142:	a9 f1       	breq	.+106    	; 0xf1ae <_Z13announceQSendv+0x76>
  Scout.meshJoinGroup(announceQG[0]);
    f144:	60 91 62 39 	lds	r22, 0x3962
    f148:	70 91 63 39 	lds	r23, 0x3963
    f14c:	80 ea       	ldi	r24, 0xA0	; 160
    f14e:	95 e3       	ldi	r25, 0x35	; 53
    f150:	0e 94 9d 6e 	call	0xdd3a	; 0xdd3a <_ZN13PinoccioClass13meshJoinGroupEj>
  announceReq.dstAddr = announceQG[0];
    f154:	80 91 62 39 	lds	r24, 0x3962
    f158:	90 91 63 39 	lds	r25, 0x3963
    f15c:	90 93 55 39 	sts	0x3955, r25
    f160:	80 93 54 39 	sts	0x3954, r24
  announceReq.dstEndpoint = 4;
    f164:	84 e0       	ldi	r24, 0x04	; 4
    f166:	80 93 56 39 	sts	0x3956, r24
  announceReq.srcEndpoint = Scout.getAddress();
    f16a:	80 ea       	ldi	r24, 0xA0	; 160
    f16c:	95 e3       	ldi	r25, 0x35	; 53
    f16e:	0e 94 c0 6e 	call	0xdd80	; 0xdd80 <_ZN13PinoccioClass10getAddressEv>
    f172:	80 93 57 39 	sts	0x3957, r24
  announceReq.options = NWK_OPT_MULTICAST|NWK_OPT_ENABLE_SECURITY;
    f176:	82 e1       	ldi	r24, 0x12	; 18
    f178:	80 93 58 39 	sts	0x3958, r24
  announceReq.data = (uint8_t*)announceQ[0];
    f17c:	e0 91 76 39 	lds	r30, 0x3976
    f180:	f0 91 77 39 	lds	r31, 0x3977
    f184:	f0 93 5c 39 	sts	0x395C, r31
    f188:	e0 93 5b 39 	sts	0x395B, r30
  announceReq.size = strlen(announceQ[0]) + 1; // include NUL byte
    f18c:	df 01       	movw	r26, r30
    f18e:	0d 90       	ld	r0, X+
    f190:	00 20       	and	r0, r0
    f192:	e9 f7       	brne	.-6      	; 0xf18e <_Z13announceQSendv+0x56>
    f194:	ae 1b       	sub	r26, r30
    f196:	a0 93 5d 39 	sts	0x395D, r26
  announceReq.confirm = announceConfirm;
    f19a:	88 ed       	ldi	r24, 0xD8	; 216
    f19c:	98 e7       	ldi	r25, 0x78	; 120
    f19e:	90 93 5f 39 	sts	0x395F, r25
    f1a2:	80 93 5e 39 	sts	0x395E, r24
  NWK_DataReq(&announceReq);
    f1a6:	8f e4       	ldi	r24, 0x4F	; 79
    f1a8:	99 e3       	ldi	r25, 0x39	; 57
    f1aa:	0c 94 d7 4a 	jmp	0x95ae	; 0x95ae <NWK_DataReq>
    f1ae:	08 95       	ret

0000f1b0 <_ZL15announceConfirmP13NWK_DataReq_t>:
    Serial.print(len);
    Serial.println(F("->chunk"));
  }
}

static void announceConfirm(NWK_DataReq_t *req) {
    f1b0:	cf 93       	push	r28
    f1b2:	df 93       	push	r29
    f1b4:	ec 01       	movw	r28, r24
  if (req->status != NWK_SUCCESS_STATUS && hqVerboseOutput) {
    f1b6:	89 89       	ldd	r24, Y+17	; 0x11
    f1b8:	88 23       	and	r24, r24
    f1ba:	89 f0       	breq	.+34     	; 0xf1de <_ZL15announceConfirmP13NWK_DataReq_t+0x2e>
    f1bc:	80 91 b3 39 	lds	r24, 0x39B3
    f1c0:	88 23       	and	r24, r24
    f1c2:	69 f0       	breq	.+26     	; 0xf1de <_ZL15announceConfirmP13NWK_DataReq_t+0x2e>
    Serial.print(F("Mesh announce failed: "));
    f1c4:	64 e7       	ldi	r22, 0x74	; 116
    f1c6:	7b e0       	ldi	r23, 0x0B	; 11
    f1c8:	84 e0       	ldi	r24, 0x04	; 4
    f1ca:	94 e2       	ldi	r25, 0x24	; 36
    f1cc:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.println(req->status);
    f1d0:	4a e0       	ldi	r20, 0x0A	; 10
    f1d2:	50 e0       	ldi	r21, 0x00	; 0
    f1d4:	69 89       	ldd	r22, Y+17	; 0x11
    f1d6:	84 e0       	ldi	r24, 0x04	; 4
    f1d8:	94 e2       	ldi	r25, 0x24	; 36
    f1da:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <_ZN5Print7printlnEhi>
  }
  free(req->data);
    f1de:	8c 85       	ldd	r24, Y+12	; 0x0c
    f1e0:	9d 85       	ldd	r25, Y+13	; 0x0d
    f1e2:	0e 94 c6 b0 	call	0x1618c	; 0x1618c <free>
  // slide queue over
  memmove(announceQ,announceQ+1,sizeof (char*)*(announceQsize-1));
    f1e6:	42 e1       	ldi	r20, 0x12	; 18
    f1e8:	50 e0       	ldi	r21, 0x00	; 0
    f1ea:	68 e7       	ldi	r22, 0x78	; 120
    f1ec:	79 e3       	ldi	r23, 0x39	; 57
    f1ee:	86 e7       	ldi	r24, 0x76	; 118
    f1f0:	99 e3       	ldi	r25, 0x39	; 57
    f1f2:	0e 94 4b b5 	call	0x16a96	; 0x16a96 <memmove>
  memmove(announceQG,announceQG+1,sizeof (uint16_t)*(announceQsize-1));
    f1f6:	42 e1       	ldi	r20, 0x12	; 18
    f1f8:	50 e0       	ldi	r21, 0x00	; 0
    f1fa:	64 e6       	ldi	r22, 0x64	; 100
    f1fc:	79 e3       	ldi	r23, 0x39	; 57
    f1fe:	82 e6       	ldi	r24, 0x62	; 98
    f200:	99 e3       	ldi	r25, 0x39	; 57
    f202:	0e 94 4b b5 	call	0x16a96	; 0x16a96 <memmove>
  announceQ[announceQsize-1] = 0;
    f206:	10 92 89 39 	sts	0x3989, r1
    f20a:	10 92 88 39 	sts	0x3988, r1
  announceQSend();
}
    f20e:	df 91       	pop	r29
    f210:	cf 91       	pop	r28
  free(req->data);
  // slide queue over
  memmove(announceQ,announceQ+1,sizeof (char*)*(announceQsize-1));
  memmove(announceQG,announceQG+1,sizeof (uint16_t)*(announceQsize-1));
  announceQ[announceQsize-1] = 0;
  announceQSend();
    f212:	92 cf       	rjmp	.-220    	; 0xf138 <_Z13announceQSendv>

0000f214 <_Z11report2jsonRK8ConstBuf>:

  return true;
}

// just store one converted report at a time
StringBuffer report2json(const ConstBuf& in) {
    f214:	2f 92       	push	r2
    f216:	3f 92       	push	r3
    f218:	4f 92       	push	r4
    f21a:	5f 92       	push	r5
    f21c:	6f 92       	push	r6
    f21e:	7f 92       	push	r7
    f220:	8f 92       	push	r8
    f222:	9f 92       	push	r9
    f224:	af 92       	push	r10
    f226:	bf 92       	push	r11
    f228:	cf 92       	push	r12
    f22a:	df 92       	push	r13
    f22c:	ef 92       	push	r14
    f22e:	ff 92       	push	r15
    f230:	0f 93       	push	r16
    f232:	1f 93       	push	r17
    f234:	cf 93       	push	r28
    f236:	df 93       	push	r29
    f238:	cd b7       	in	r28, 0x3d	; 61
    f23a:	de b7       	in	r29, 0x3e	; 62
    f23c:	c0 5a       	subi	r28, 0xA0	; 160
    f23e:	d1 09       	sbc	r29, r1
    f240:	0f b6       	in	r0, 0x3f	; 63
    f242:	f8 94       	cli
    f244:	de bf       	out	0x3e, r29	; 62
    f246:	0f be       	out	0x3f, r0	; 63
    f248:	cd bf       	out	0x3d, r28	; 61
    f24a:	2c 01       	movw	r4, r24
    f24c:	7b 01       	movw	r14, r22
  char *keys, *vals;
  unsigned short ir[16], ik[32], iv[32], i;
  StringBuffer reportJson(100, 8);
    f24e:	48 e0       	ldi	r20, 0x08	; 8
    f250:	50 e0       	ldi	r21, 0x00	; 0
    f252:	64 e6       	ldi	r22, 0x64	; 100
    f254:	70 e0       	ldi	r23, 0x00	; 0
    f256:	0e 94 8d ab 	call	0x1571a	; 0x1571a <_ZN12StringBufferC1Ejj>

  return true;
}

// just store one converted report at a time
StringBuffer report2json(const ConstBuf& in) {
    f25a:	d7 01       	movw	r26, r14
    f25c:	12 96       	adiw	r26, 0x02	; 2
    f25e:	cd 90       	ld	r12, X+
    f260:	dc 90       	ld	r13, X
    f262:	13 97       	sbiw	r26, 0x03	; 3
  char *keys, *vals;
  unsigned short ir[16], ik[32], iv[32], i;
  StringBuffer reportJson(100, 8);

  // copy cuz we edit it
  char *report = (char*)malloc(in.length());
    f264:	c6 01       	movw	r24, r12
    f266:	0e 94 2e b0 	call	0x1605c	; 0x1605c <malloc>
    f26a:	8c 01       	movw	r16, r24
  memcpy(report, in, in.length());
    f26c:	f7 01       	movw	r30, r14
    f26e:	60 81       	ld	r22, Z
    f270:	71 81       	ldd	r23, Z+1	; 0x01
    f272:	a6 01       	movw	r20, r12
    f274:	0e 94 42 b5 	call	0x16a84	; 0x16a84 <memcpy>

  // parse this and humanize
  js0n((unsigned char*)report, strlen(report), ir, 16);
    f278:	d8 01       	movw	r26, r16
    f27a:	0d 90       	ld	r0, X+
    f27c:	00 20       	and	r0, r0
    f27e:	e9 f7       	brne	.-6      	; 0xf27a <_Z11report2jsonRK8ConstBuf+0x66>
    f280:	bd 01       	movw	r22, r26
    f282:	61 50       	subi	r22, 0x01	; 1
    f284:	71 09       	sbc	r23, r1
    f286:	60 1b       	sub	r22, r16
    f288:	71 0b       	sbc	r23, r17
    f28a:	20 e1       	ldi	r18, 0x10	; 16
    f28c:	30 e0       	ldi	r19, 0x00	; 0
    f28e:	ae 01       	movw	r20, r28
    f290:	4f 57       	subi	r20, 0x7F	; 127
    f292:	5f 4f       	sbci	r21, 0xFF	; 255
    f294:	c8 01       	movw	r24, r16
    f296:	0e 94 36 49 	call	0x926c	; 0x926c <js0n>
  if (!*ir) {
    f29a:	cf 57       	subi	r28, 0x7F	; 127
    f29c:	df 4f       	sbci	r29, 0xFF	; 255
    f29e:	88 81       	ld	r24, Y
    f2a0:	99 81       	ldd	r25, Y+1	; 0x01
    f2a2:	c1 58       	subi	r28, 0x81	; 129
    f2a4:	d0 40       	sbci	r29, 0x00	; 0
    f2a6:	89 2b       	or	r24, r25
    f2a8:	19 f4       	brne	.+6      	; 0xf2b0 <_Z11report2jsonRK8ConstBuf+0x9c>
    free(report);
    f2aa:	c8 01       	movw	r24, r16
    f2ac:	0e 94 c6 b0 	call	0x1618c	; 0x1618c <free>
  }

  // TODO: Proper JSON escaping in this function
  reportJson.appendSprintf("{\"type\":\"%s\"", keyGet(atoi(j0g_safe(0, report, ir))));
    f2b0:	ae 01       	movw	r20, r28
    f2b2:	4f 57       	subi	r20, 0x7F	; 127
    f2b4:	5f 4f       	sbci	r21, 0xFF	; 255
    f2b6:	b8 01       	movw	r22, r16
    f2b8:	80 e0       	ldi	r24, 0x00	; 0
    f2ba:	90 e0       	ldi	r25, 0x00	; 0
    f2bc:	0e 94 84 48 	call	0x9108	; 0x9108 <j0g_safe>
    f2c0:	0e 94 67 b4 	call	0x168ce	; 0x168ce <atoi>
    f2c4:	0e 94 ab 68 	call	0xd156	; 0xd156 <keyGet>
    f2c8:	9f 93       	push	r25
    f2ca:	8f 93       	push	r24
    f2cc:	8c e0       	ldi	r24, 0x0C	; 12
    f2ce:	99 e1       	ldi	r25, 0x19	; 25
    f2d0:	9f 93       	push	r25
    f2d2:	8f 93       	push	r24
    f2d4:	5f 92       	push	r5
    f2d6:	4f 92       	push	r4
    f2d8:	0e 94 b2 ab 	call	0x15764	; 0x15764 <_ZN12StringBuffer13appendSprintfEPKcz>

  keys = report + ir[2];
    f2dc:	cb 57       	subi	r28, 0x7B	; 123
    f2de:	df 4f       	sbci	r29, 0xFF	; 255
    f2e0:	a8 80       	ld	r10, Y
    f2e2:	b9 80       	ldd	r11, Y+1	; 0x01
    f2e4:	c5 58       	subi	r28, 0x85	; 133
    f2e6:	d0 40       	sbci	r29, 0x00	; 0
    f2e8:	a0 0e       	add	r10, r16
    f2ea:	b1 1e       	adc	r11, r17
  js0n((unsigned char*)keys, ir[3], ik, 32);
    f2ec:	c9 57       	subi	r28, 0x79	; 121
    f2ee:	df 4f       	sbci	r29, 0xFF	; 255
    f2f0:	68 81       	ld	r22, Y
    f2f2:	79 81       	ldd	r23, Y+1	; 0x01
    f2f4:	c7 58       	subi	r28, 0x87	; 135
    f2f6:	d0 40       	sbci	r29, 0x00	; 0
    f2f8:	20 e2       	ldi	r18, 0x20	; 32
    f2fa:	30 e0       	ldi	r19, 0x00	; 0
    f2fc:	ae 01       	movw	r20, r28
    f2fe:	4f 5b       	subi	r20, 0xBF	; 191
    f300:	5f 4f       	sbci	r21, 0xFF	; 255
    f302:	c5 01       	movw	r24, r10
    f304:	0e 94 36 49 	call	0x926c	; 0x926c <js0n>
  if (!*ik) {
    f308:	0f 90       	pop	r0
    f30a:	0f 90       	pop	r0
    f30c:	0f 90       	pop	r0
    f30e:	0f 90       	pop	r0
    f310:	0f 90       	pop	r0
    f312:	0f 90       	pop	r0
    f314:	23 96       	adiw	r28, 0x03	; 3
    f316:	8e ad       	ldd	r24, Y+62	; 0x3e
    f318:	9f ad       	ldd	r25, Y+63	; 0x3f
    f31a:	23 97       	sbiw	r28, 0x03	; 3
    f31c:	89 2b       	or	r24, r25
    f31e:	41 f1       	breq	.+80     	; 0xf370 <_Z11report2jsonRK8ConstBuf+0x15c>
    free(report);
    reportJson = (char*)NULL;
    return reportJson;
  }
  vals = report+ir[4];
    f320:	c7 57       	subi	r28, 0x77	; 119
    f322:	df 4f       	sbci	r29, 0xFF	; 255
    f324:	c8 80       	ld	r12, Y
    f326:	d9 80       	ldd	r13, Y+1	; 0x01
    f328:	c9 58       	subi	r28, 0x89	; 137
    f32a:	d0 40       	sbci	r29, 0x00	; 0
    f32c:	c0 0e       	add	r12, r16
    f32e:	d1 1e       	adc	r13, r17

  js0n((unsigned char*)vals, ir[5], iv, 32);
    f330:	c5 57       	subi	r28, 0x75	; 117
    f332:	df 4f       	sbci	r29, 0xFF	; 255
    f334:	68 81       	ld	r22, Y
    f336:	79 81       	ldd	r23, Y+1	; 0x01
    f338:	cb 58       	subi	r28, 0x8B	; 139
    f33a:	d0 40       	sbci	r29, 0x00	; 0
    f33c:	20 e2       	ldi	r18, 0x20	; 32
    f33e:	30 e0       	ldi	r19, 0x00	; 0
    f340:	ae 01       	movw	r20, r28
    f342:	4f 5f       	subi	r20, 0xFF	; 255
    f344:	5f 4f       	sbci	r21, 0xFF	; 255
    f346:	c6 01       	movw	r24, r12
    f348:	0e 94 36 49 	call	0x926c	; 0x926c <js0n>
  if (!*iv) {
    f34c:	89 81       	ldd	r24, Y+1	; 0x01
    f34e:	9a 81       	ldd	r25, Y+2	; 0x02
    f350:	89 2b       	or	r24, r25
    f352:	71 f0       	breq	.+28     	; 0xf370 <_Z11report2jsonRK8ConstBuf+0x15c>
    f354:	fe 01       	movw	r30, r28
    f356:	ef 5b       	subi	r30, 0xBF	; 191
    f358:	ff 4f       	sbci	r31, 0xFF	; 255
    f35a:	4f 01       	movw	r8, r30
    f35c:	ce 01       	movw	r24, r28
    f35e:	01 96       	adiw	r24, 0x01	; 1
    f360:	7c 01       	movw	r14, r24
    f362:	61 2c       	mov	r6, r1
    f364:	71 2c       	mov	r7, r1
    if (vals[iv[i]-1] == '"') {
      iv[i]--;
      iv[i+1]+=2;
    }
    *(vals+iv[i]+iv[i+1]) = 0;
    reportJson.appendSprintf("%s", vals + iv[i]);
    f366:	8e e7       	ldi	r24, 0x7E	; 126
    f368:	28 2e       	mov	r2, r24
    f36a:	8f e0       	ldi	r24, 0x0F	; 15
    f36c:	38 2e       	mov	r3, r24
    f36e:	5f c0       	rjmp	.+190    	; 0xf42e <_Z11report2jsonRK8ConstBuf+0x21a>
  }
  vals = report+ir[4];

  js0n((unsigned char*)vals, ir[5], iv, 32);
  if (!*iv) {
    free(report);
    f370:	c8 01       	movw	r24, r16
    f372:	0e 94 c6 b0 	call	0x1618c	; 0x1618c <free>
    reportJson = (char*)NULL;
    f376:	60 e0       	ldi	r22, 0x00	; 0
    f378:	70 e0       	ldi	r23, 0x00	; 0
    f37a:	c2 01       	movw	r24, r4
    f37c:	0e 94 3a 18 	call	0x3074	; 0x3074 <_ZN6StringaSEPKc>
    return reportJson;
    f380:	64 c0       	rjmp	.+200    	; 0xf44a <_Z11report2jsonRK8ConstBuf+0x236>
  }

  for (i=0; ik[i]; i+=2) {
    reportJson.appendSprintf(",\"%s\":", keyGet(atoi(j0g_safe(i, keys, ik))));
    f382:	ae 01       	movw	r20, r28
    f384:	4f 5b       	subi	r20, 0xBF	; 191
    f386:	5f 4f       	sbci	r21, 0xFF	; 255
    f388:	b5 01       	movw	r22, r10
    f38a:	c3 01       	movw	r24, r6
    f38c:	0e 94 84 48 	call	0x9108	; 0x9108 <j0g_safe>
    f390:	0e 94 67 b4 	call	0x168ce	; 0x168ce <atoi>
    f394:	0e 94 ab 68 	call	0xd156	; 0xd156 <keyGet>
    f398:	9f 93       	push	r25
    f39a:	8f 93       	push	r24
    f39c:	a9 e1       	ldi	r26, 0x19	; 25
    f39e:	b9 e1       	ldi	r27, 0x19	; 25
    f3a0:	bf 93       	push	r27
    f3a2:	af 93       	push	r26
    f3a4:	5f 92       	push	r5
    f3a6:	4f 92       	push	r4
    f3a8:	0e 94 b2 ab 	call	0x15764	; 0x15764 <_ZN12StringBuffer13appendSprintfEPKcz>

    if (vals[iv[i]-1] == '"') {
    f3ac:	d7 01       	movw	r26, r14
    f3ae:	8d 91       	ld	r24, X+
    f3b0:	9c 91       	ld	r25, X
    f3b2:	11 97       	sbiw	r26, 0x01	; 1
    f3b4:	01 97       	sbiw	r24, 0x01	; 1
    f3b6:	f6 01       	movw	r30, r12
    f3b8:	e8 0f       	add	r30, r24
    f3ba:	f9 1f       	adc	r31, r25
    f3bc:	0f 90       	pop	r0
    f3be:	0f 90       	pop	r0
    f3c0:	0f 90       	pop	r0
    f3c2:	0f 90       	pop	r0
    f3c4:	0f 90       	pop	r0
    f3c6:	0f 90       	pop	r0
    f3c8:	20 81       	ld	r18, Z
    f3ca:	22 32       	cpi	r18, 0x22	; 34
    f3cc:	61 f4       	brne	.+24     	; 0xf3e6 <_Z11report2jsonRK8ConstBuf+0x1d2>
      iv[i]--;
    f3ce:	11 96       	adiw	r26, 0x01	; 1
    f3d0:	9c 93       	st	X, r25
    f3d2:	8e 93       	st	-X, r24
      iv[i+1]+=2;
    f3d4:	12 96       	adiw	r26, 0x02	; 2
    f3d6:	8d 91       	ld	r24, X+
    f3d8:	9c 91       	ld	r25, X
    f3da:	13 97       	sbiw	r26, 0x03	; 3
    f3dc:	02 96       	adiw	r24, 0x02	; 2
    f3de:	13 96       	adiw	r26, 0x03	; 3
    f3e0:	9c 93       	st	X, r25
    f3e2:	8e 93       	st	-X, r24
    f3e4:	12 97       	sbiw	r26, 0x02	; 2
    }
    *(vals+iv[i]+iv[i+1]) = 0;
    f3e6:	f7 01       	movw	r30, r14
    f3e8:	80 81       	ld	r24, Z
    f3ea:	91 81       	ldd	r25, Z+1	; 0x01
    f3ec:	02 80       	ldd	r0, Z+2	; 0x02
    f3ee:	f3 81       	ldd	r31, Z+3	; 0x03
    f3f0:	e0 2d       	mov	r30, r0
    f3f2:	ec 0d       	add	r30, r12
    f3f4:	fd 1d       	adc	r31, r13
    f3f6:	e8 0f       	add	r30, r24
    f3f8:	f9 1f       	adc	r31, r25
    f3fa:	10 82       	st	Z, r1
    reportJson.appendSprintf("%s", vals + iv[i]);
    f3fc:	8c 0d       	add	r24, r12
    f3fe:	9d 1d       	adc	r25, r13
    f400:	9f 93       	push	r25
    f402:	8f 93       	push	r24
    f404:	3f 92       	push	r3
    f406:	2f 92       	push	r2
    f408:	5f 92       	push	r5
    f40a:	4f 92       	push	r4
    f40c:	0e 94 b2 ab 	call	0x15764	; 0x15764 <_ZN12StringBuffer13appendSprintfEPKcz>
    free(report);
    reportJson = (char*)NULL;
    return reportJson;
  }

  for (i=0; ik[i]; i+=2) {
    f410:	f2 e0       	ldi	r31, 0x02	; 2
    f412:	6f 0e       	add	r6, r31
    f414:	71 1c       	adc	r7, r1
    f416:	84 e0       	ldi	r24, 0x04	; 4
    f418:	88 0e       	add	r8, r24
    f41a:	91 1c       	adc	r9, r1
    f41c:	94 e0       	ldi	r25, 0x04	; 4
    f41e:	e9 0e       	add	r14, r25
    f420:	f1 1c       	adc	r15, r1
    f422:	0f 90       	pop	r0
    f424:	0f 90       	pop	r0
    f426:	0f 90       	pop	r0
    f428:	0f 90       	pop	r0
    f42a:	0f 90       	pop	r0
    f42c:	0f 90       	pop	r0
    f42e:	d4 01       	movw	r26, r8
    f430:	8d 91       	ld	r24, X+
    f432:	9c 91       	ld	r25, X
    f434:	89 2b       	or	r24, r25
    f436:	09 f0       	breq	.+2      	; 0xf43a <_Z11report2jsonRK8ConstBuf+0x226>
    f438:	a4 cf       	rjmp	.-184    	; 0xf382 <_Z11report2jsonRK8ConstBuf+0x16e>
	unsigned char concat(const __FlashStringHelper * str);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
    f43a:	62 e6       	ldi	r22, 0x62	; 98
    f43c:	7e e1       	ldi	r23, 0x1E	; 30
    f43e:	c2 01       	movw	r24, r4
    f440:	0e 94 7d 19 	call	0x32fa	; 0x32fa <_ZN6String6concatEPKc>
    *(vals+iv[i]+iv[i+1]) = 0;
    reportJson.appendSprintf("%s", vals + iv[i]);
  }

  reportJson += "}";
  free(report);
    f444:	c8 01       	movw	r24, r16
    f446:	0e 94 c6 b0 	call	0x1618c	; 0x1618c <free>
  return reportJson;
}
    f44a:	c2 01       	movw	r24, r4
    f44c:	c0 56       	subi	r28, 0x60	; 96
    f44e:	df 4f       	sbci	r29, 0xFF	; 255
    f450:	0f b6       	in	r0, 0x3f	; 63
    f452:	f8 94       	cli
    f454:	de bf       	out	0x3e, r29	; 62
    f456:	0f be       	out	0x3f, r0	; 63
    f458:	cd bf       	out	0x3d, r28	; 61
    f45a:	df 91       	pop	r29
    f45c:	cf 91       	pop	r28
    f45e:	1f 91       	pop	r17
    f460:	0f 91       	pop	r16
    f462:	ff 90       	pop	r15
    f464:	ef 90       	pop	r14
    f466:	df 90       	pop	r13
    f468:	cf 90       	pop	r12
    f46a:	bf 90       	pop	r11
    f46c:	af 90       	pop	r10
    f46e:	9f 90       	pop	r9
    f470:	8f 90       	pop	r8
    f472:	7f 90       	pop	r7
    f474:	6f 90       	pop	r6
    f476:	5f 90       	pop	r5
    f478:	4f 90       	pop	r4
    f47a:	3f 90       	pop	r3
    f47c:	2f 90       	pop	r2
    f47e:	08 95       	ret

0000f480 <_ZL20leadAnnouncementSendjjRK8ConstBuf>:


static void leadAnnouncementSend(uint16_t group, uint16_t from, const ConstBuf& message) {
    f480:	af 92       	push	r10
    f482:	bf 92       	push	r11
    f484:	cf 92       	push	r12
    f486:	df 92       	push	r13
    f488:	ef 92       	push	r14
    f48a:	ff 92       	push	r15
    f48c:	0f 93       	push	r16
    f48e:	1f 93       	push	r17
    f490:	cf 93       	push	r28
    f492:	df 93       	push	r29
    f494:	cd b7       	in	r28, 0x3d	; 61
    f496:	de b7       	in	r29, 0x3e	; 62
    f498:	60 97       	sbiw	r28, 0x10	; 16
    f49a:	0f b6       	in	r0, 0x3f	; 63
    f49c:	f8 94       	cli
    f49e:	de bf       	out	0x3e, r29	; 62
    f4a0:	0f be       	out	0x3f, r0	; 63
    f4a2:	cd bf       	out	0x3d, r28	; 61
    f4a4:	6c 01       	movw	r12, r24
    f4a6:	b6 2e       	mov	r11, r22
    f4a8:	a7 2e       	mov	r10, r23
    f4aa:	7a 01       	movw	r14, r20
  StringBuffer report(100, 8);
    f4ac:	8e 01       	movw	r16, r28
    f4ae:	07 5f       	subi	r16, 0xF7	; 247
    f4b0:	1f 4f       	sbci	r17, 0xFF	; 255
    f4b2:	48 e0       	ldi	r20, 0x08	; 8
    f4b4:	50 e0       	ldi	r21, 0x00	; 0
    f4b6:	64 e6       	ldi	r22, 0x64	; 100
    f4b8:	70 e0       	ldi	r23, 0x00	; 0
    f4ba:	c8 01       	movw	r24, r16
    f4bc:	0e 94 8d ab 	call	0x1571a	; 0x1571a <_ZN12StringBufferC1Ejj>

  // reports are expected to be json objects
  if (group == 0xBEEF) {
    f4c0:	8f ee       	ldi	r24, 0xEF	; 239
    f4c2:	c8 16       	cp	r12, r24
    f4c4:	8e eb       	ldi	r24, 0xBE	; 190
    f4c6:	d8 06       	cpc	r13, r24
    f4c8:	e1 f4       	brne	.+56     	; 0xf502 <_ZL20leadAnnouncementSendjjRK8ConstBuf+0x82>
    report.appendSprintf("{\"type\":\"report\",\"from\":%d,\"report\":%s}\n", from, (report2json(message)).c_str());
    f4ca:	b7 01       	movw	r22, r14
    f4cc:	ce 01       	movw	r24, r28
    f4ce:	01 96       	adiw	r24, 0x01	; 1
    f4d0:	a1 de       	rcall	.-702    	; 0xf214 <_Z11report2jsonRK8ConstBuf>
    f4d2:	8a 81       	ldd	r24, Y+2	; 0x02
    f4d4:	8f 93       	push	r24
    f4d6:	89 81       	ldd	r24, Y+1	; 0x01
    f4d8:	8f 93       	push	r24
    f4da:	af 92       	push	r10
    f4dc:	bf 92       	push	r11
    f4de:	80 e2       	ldi	r24, 0x20	; 32
    f4e0:	99 e1       	ldi	r25, 0x19	; 25
    f4e2:	9f 93       	push	r25
    f4e4:	8f 93       	push	r24
    f4e6:	1f 93       	push	r17
    f4e8:	0f 93       	push	r16
    f4ea:	0e 94 b2 ab 	call	0x15764	; 0x15764 <_ZN12StringBuffer13appendSprintfEPKcz>
    f4ee:	ce 01       	movw	r24, r28
    f4f0:	01 96       	adiw	r24, 0x01	; 1
    f4f2:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
    f4f6:	0f b6       	in	r0, 0x3f	; 63
    f4f8:	f8 94       	cli
    f4fa:	de bf       	out	0x3e, r29	; 62
    f4fc:	0f be       	out	0x3f, r0	; 63
    f4fe:	cd bf       	out	0x3d, r28	; 61
    f500:	1f c0       	rjmp	.+62     	; 0xf540 <_ZL20leadAnnouncementSendjjRK8ConstBuf+0xc0>
  } else if (group == 0) {
    f502:	cd 28       	or	r12, r13
    f504:	f9 f4       	brne	.+62     	; 0xf544 <_ZL20leadAnnouncementSendjjRK8ConstBuf+0xc4>
    report.appendSprintf("{\"type\":\"announce\",\"from\":%d,\"announce\":", from);
    f506:	af 92       	push	r10
    f508:	bf 92       	push	r11
    f50a:	89 e4       	ldi	r24, 0x49	; 73
    f50c:	99 e1       	ldi	r25, 0x19	; 25
    f50e:	9f 93       	push	r25
    f510:	8f 93       	push	r24
    f512:	1f 93       	push	r17
    f514:	0f 93       	push	r16
    f516:	0e 94 b2 ab 	call	0x15764	; 0x15764 <_ZN12StringBuffer13appendSprintfEPKcz>
    bool blockReserve(size_t size);

    // Until https://github.com/arduino/Arduino/pull/1936 is merged, supply our own
    // versions of this method.
    unsigned char concat(const char *s, size_t len);
    unsigned char concat(const uint8_t *cstr, unsigned int length) {return concat((const char*)cstr, length);}
    f51a:	f7 01       	movw	r30, r14
    f51c:	42 81       	ldd	r20, Z+2	; 0x02
    f51e:	53 81       	ldd	r21, Z+3	; 0x03
    f520:	60 81       	ld	r22, Z
    f522:	71 81       	ldd	r23, Z+1	; 0x01
    f524:	c8 01       	movw	r24, r16
    f526:	0e 94 5f ad 	call	0x15abe	; 0x15abe <_ZN12StringBuffer6concatEPKcj>
    f52a:	6d ea       	ldi	r22, 0xAD	; 173
    f52c:	79 e1       	ldi	r23, 0x19	; 25
    f52e:	c8 01       	movw	r24, r16
    f530:	0e 94 7d 19 	call	0x32fa	; 0x32fa <_ZN6String6concatEPKc>
    f534:	0f 90       	pop	r0
    f536:	0f 90       	pop	r0
    f538:	0f 90       	pop	r0
    f53a:	0f 90       	pop	r0
    f53c:	0f 90       	pop	r0
    f53e:	0f 90       	pop	r0
    report.concat(message, message.length());
    report += "}\n";
  } else {
    return;
  }
  leadSignal(report);
    f540:	c8 01       	movw	r24, r16
    f542:	fd db       	rcall	.-2054   	; 0xed3e <_ZL10leadSignalRK6String>
/**
 * Extend the Arduino String class with some operations that make using
 * it as buffer for reading input or building output more efficient
 * (e.g,. without copying data).
 */
class StringBuffer : public String {
    f544:	c8 01       	movw	r24, r16
    f546:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
}
    f54a:	60 96       	adiw	r28, 0x10	; 16
    f54c:	0f b6       	in	r0, 0x3f	; 63
    f54e:	f8 94       	cli
    f550:	de bf       	out	0x3e, r29	; 62
    f552:	0f be       	out	0x3f, r0	; 63
    f554:	cd bf       	out	0x3d, r28	; 61
    f556:	df 91       	pop	r29
    f558:	cf 91       	pop	r28
    f55a:	1f 91       	pop	r17
    f55c:	0f 91       	pop	r16
    f55e:	ff 90       	pop	r15
    f560:	ef 90       	pop	r14
    f562:	df 90       	pop	r13
    f564:	cf 90       	pop	r12
    f566:	bf 90       	pop	r11
    f568:	af 90       	pop	r10
    f56a:	08 95       	ret

0000f56c <_ZL18fieldAnnouncementsP13NWK_DataInd_t>:
  announceReq.size = strlen(announceQ[0]) + 1; // include NUL byte
  announceReq.confirm = announceConfirm;
  NWK_DataReq(&announceReq);
}

static bool fieldAnnouncements(NWK_DataInd_t *ind) {
    f56c:	8f 92       	push	r8
    f56e:	9f 92       	push	r9
    f570:	af 92       	push	r10
    f572:	bf 92       	push	r11
    f574:	cf 92       	push	r12
    f576:	df 92       	push	r13
    f578:	ef 92       	push	r14
    f57a:	ff 92       	push	r15
    f57c:	0f 93       	push	r16
    f57e:	1f 93       	push	r17
    f580:	cf 93       	push	r28
    f582:	df 93       	push	r29
    f584:	cd b7       	in	r28, 0x3d	; 61
    f586:	de b7       	in	r29, 0x3e	; 62
    f588:	a4 97       	sbiw	r28, 0x24	; 36
    f58a:	0f b6       	in	r0, 0x3f	; 63
    f58c:	f8 94       	cli
    f58e:	de bf       	out	0x3e, r29	; 62
    f590:	0f be       	out	0x3f, r0	; 63
    f592:	cd bf       	out	0x3d, r28	; 61
    f594:	8c 01       	movw	r16, r24
  char *data = (char*)ind->data;
    f596:	fc 01       	movw	r30, r24
    f598:	e7 80       	ldd	r14, Z+7	; 0x07
    f59a:	f0 84       	ldd	r15, Z+8	; 0x08
  // be safe
  if (!ind->options & NWK_IND_OPT_MULTICAST) {
    return true;
  }

  if (hqVerboseOutput) {
    f59c:	80 91 b3 39 	lds	r24, 0x39B3
    f5a0:	88 23       	and	r24, r24
    f5a2:	79 f0       	breq	.+30     	; 0xf5c2 <_ZL18fieldAnnouncementsP13NWK_DataInd_t+0x56>
    Serial.print(F("multicast in "));
    f5a4:	62 e6       	ldi	r22, 0x62	; 98
    f5a6:	7d e0       	ldi	r23, 0x0D	; 13
    f5a8:	84 e0       	ldi	r24, 0x04	; 4
    f5aa:	94 e2       	ldi	r25, 0x24	; 36
    f5ac:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.println(ind->dstAddr);
    f5b0:	f8 01       	movw	r30, r16
    f5b2:	62 81       	ldd	r22, Z+2	; 0x02
    f5b4:	73 81       	ldd	r23, Z+3	; 0x03
    f5b6:	4a e0       	ldi	r20, 0x0A	; 10
    f5b8:	50 e0       	ldi	r21, 0x00	; 0
    f5ba:	84 e0       	ldi	r24, 0x04	; 4
    f5bc:	94 e2       	ldi	r25, 0x24	; 36
    f5be:	0e 94 96 10 	call	0x212c	; 0x212c <_ZN5Print7printlnEji>
  }
  if (Scout.isLeadScout()) {
    f5c2:	80 ea       	ldi	r24, 0xA0	; 160
    f5c4:	95 e3       	ldi	r25, 0x35	; 53
    f5c6:	0e 94 b5 70 	call	0xe16a	; 0xe16a <_ZN13PinoccioScout11isLeadScoutEv>
    f5ca:	88 23       	and	r24, r24
    f5cc:	81 f0       	breq	.+32     	; 0xf5ee <_ZL18fieldAnnouncementsP13NWK_DataInd_t+0x82>
    leadAnnouncementSend(ind->dstAddr, ind->srcAddr, ConstBuf(data, ind->size-1)); // no null
    f5ce:	f8 01       	movw	r30, r16
    f5d0:	81 85       	ldd	r24, Z+9	; 0x09
    f5d2:	90 e0       	ldi	r25, 0x00	; 0
    f5d4:	01 97       	sbiw	r24, 0x01	; 1
  // Allow implicitely casting to a char* and uint8_t*, so the buffer
  // can be accessed by using the object itself directly.
  operator const uint8_t *() const { return this->buffer; }

  // Initialize from a (non-terminated) buffer of the given length
  ConstBuf(const char *buf, size_t len) : buffer((const uint8_t*)buf), len(len) { }
    f5d6:	fa 82       	std	Y+2, r15	; 0x02
    f5d8:	e9 82       	std	Y+1, r14	; 0x01
    f5da:	9c 83       	std	Y+4, r25	; 0x04
    f5dc:	8b 83       	std	Y+3, r24	; 0x03
    f5de:	60 81       	ld	r22, Z
    f5e0:	71 81       	ldd	r23, Z+1	; 0x01
    f5e2:	ae 01       	movw	r20, r28
    f5e4:	4f 5f       	subi	r20, 0xFF	; 255
    f5e6:	5f 4f       	sbci	r21, 0xFF	; 255
    f5e8:	82 81       	ldd	r24, Z+2	; 0x02
    f5ea:	93 81       	ldd	r25, Z+3	; 0x03
    f5ec:	49 df       	rcall	.-366    	; 0xf480 <_ZL20leadAnnouncementSendjjRK8ConstBuf>
  }
  if (!ind->dstAddr || ind->dstAddr == 0xBEEF || strlen(data) < 3 || data[0] != '[') {
    f5ee:	f8 01       	movw	r30, r16
    f5f0:	82 81       	ldd	r24, Z+2	; 0x02
    f5f2:	93 81       	ldd	r25, Z+3	; 0x03
    f5f4:	00 97       	sbiw	r24, 0x00	; 0
    f5f6:	09 f4       	brne	.+2      	; 0xf5fa <_ZL18fieldAnnouncementsP13NWK_DataInd_t+0x8e>
    f5f8:	9c c0       	rjmp	.+312    	; 0xf732 <_ZL18fieldAnnouncementsP13NWK_DataInd_t+0x1c6>
    f5fa:	8f 3e       	cpi	r24, 0xEF	; 239
    f5fc:	9e 4b       	sbci	r25, 0xBE	; 190
    f5fe:	09 f4       	brne	.+2      	; 0xf602 <_ZL18fieldAnnouncementsP13NWK_DataInd_t+0x96>
    f600:	98 c0       	rjmp	.+304    	; 0xf732 <_ZL18fieldAnnouncementsP13NWK_DataInd_t+0x1c6>
    f602:	f7 01       	movw	r30, r14
    f604:	01 90       	ld	r0, Z+
    f606:	00 20       	and	r0, r0
    f608:	e9 f7       	brne	.-6      	; 0xf604 <_ZL18fieldAnnouncementsP13NWK_DataInd_t+0x98>
    f60a:	31 97       	sbiw	r30, 0x01	; 1
    f60c:	ee 19       	sub	r30, r14
    f60e:	ff 09       	sbc	r31, r15
    f610:	33 97       	sbiw	r30, 0x03	; 3
    f612:	08 f4       	brcc	.+2      	; 0xf616 <_ZL18fieldAnnouncementsP13NWK_DataInd_t+0xaa>
    f614:	8e c0       	rjmp	.+284    	; 0xf732 <_ZL18fieldAnnouncementsP13NWK_DataInd_t+0x1c6>
    f616:	f7 01       	movw	r30, r14
    f618:	80 81       	ld	r24, Z
    f61a:	8b 35       	cpi	r24, 0x5B	; 91
    f61c:	09 f0       	breq	.+2      	; 0xf620 <_ZL18fieldAnnouncementsP13NWK_DataInd_t+0xb4>
    f61e:	89 c0       	rjmp	.+274    	; 0xf732 <_ZL18fieldAnnouncementsP13NWK_DataInd_t+0x1c6>
    return false;
  }

  int keys[10];
  keyLoad((char*)ind->data, keys, millis());
    f620:	0e 94 16 14 	call	0x282c	; 0x282c <millis>
    f624:	9b 01       	movw	r18, r22
    f626:	ac 01       	movw	r20, r24
    f628:	be 01       	movw	r22, r28
    f62a:	6f 5f       	subi	r22, 0xFF	; 255
    f62c:	7f 4f       	sbci	r23, 0xFF	; 255
    f62e:	f8 01       	movw	r30, r16
    f630:	87 81       	ldd	r24, Z+7	; 0x07
    f632:	90 85       	ldd	r25, Z+8	; 0x08
    f634:	0e 94 07 69 	call	0xd20e	; 0xd20e <keyLoad>

  // run the Bitlash callback function, if defined
  StringBuffer callback(20);
    f638:	6e 01       	movw	r12, r28
    f63a:	fd e1       	ldi	r31, 0x1D	; 29
    f63c:	cf 0e       	add	r12, r31
    f63e:	d1 1c       	adc	r13, r1
    f640:	41 e0       	ldi	r20, 0x01	; 1
    f642:	50 e0       	ldi	r21, 0x00	; 0
    f644:	64 e1       	ldi	r22, 0x14	; 20
    f646:	70 e0       	ldi	r23, 0x00	; 0
    f648:	c6 01       	movw	r24, r12
    f64a:	0e 94 8d ab 	call	0x1571a	; 0x1571a <_ZN12StringBufferC1Ejj>
  callback.appendSprintf("event.group%d", ind->dstAddr);
    f64e:	f8 01       	movw	r30, r16
    f650:	83 81       	ldd	r24, Z+3	; 0x03
    f652:	8f 93       	push	r24
    f654:	82 81       	ldd	r24, Z+2	; 0x02
    f656:	8f 93       	push	r24
    f658:	82 e7       	ldi	r24, 0x72	; 114
    f65a:	99 e1       	ldi	r25, 0x19	; 25
    f65c:	9f 93       	push	r25
    f65e:	8f 93       	push	r24
    f660:	df 92       	push	r13
    f662:	cf 92       	push	r12
    f664:	0e 94 b2 ab 	call	0x15764	; 0x15764 <_ZN12StringBuffer13appendSprintfEPKcz>
  if (findscript(const_cast<char*>(callback.c_str()))) {
    f668:	8d 8d       	ldd	r24, Y+29	; 0x1d
    f66a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    f66c:	0e 94 0d 29 	call	0x521a	; 0x521a <_Z10findscriptPc>
    f670:	0f 90       	pop	r0
    f672:	0f 90       	pop	r0
    f674:	0f 90       	pop	r0
    f676:	0f 90       	pop	r0
    f678:	0f 90       	pop	r0
    f67a:	0f 90       	pop	r0
    f67c:	88 23       	and	r24, r24
    f67e:	09 f4       	brne	.+2      	; 0xf682 <_ZL18fieldAnnouncementsP13NWK_DataInd_t+0x116>
    f680:	53 c0       	rjmp	.+166    	; 0xf728 <_ZL18fieldAnnouncementsP13NWK_DataInd_t+0x1bc>
    StringBuffer buf(64, 16);
    f682:	7e 01       	movw	r14, r28
    f684:	f5 e1       	ldi	r31, 0x15	; 21
    f686:	ef 0e       	add	r14, r31
    f688:	f1 1c       	adc	r15, r1
    f68a:	40 e1       	ldi	r20, 0x10	; 16
    f68c:	50 e0       	ldi	r21, 0x00	; 0
    f68e:	60 e4       	ldi	r22, 0x40	; 64
    f690:	70 e0       	ldi	r23, 0x00	; 0
    f692:	c7 01       	movw	r24, r14
    f694:	0e 94 8d ab 	call	0x1571a	; 0x1571a <_ZN12StringBufferC1Ejj>
    buf.appendSprintf("event.group%d(%d", ind->dstAddr, ind->srcAddr);
    f698:	f8 01       	movw	r30, r16
    f69a:	81 81       	ldd	r24, Z+1	; 0x01
    f69c:	8f 93       	push	r24
    f69e:	80 81       	ld	r24, Z
    f6a0:	8f 93       	push	r24
    f6a2:	83 81       	ldd	r24, Z+3	; 0x03
    f6a4:	8f 93       	push	r24
    f6a6:	82 81       	ldd	r24, Z+2	; 0x02
    f6a8:	8f 93       	push	r24
    f6aa:	80 e8       	ldi	r24, 0x80	; 128
    f6ac:	99 e1       	ldi	r25, 0x19	; 25
    f6ae:	9f 93       	push	r25
    f6b0:	8f 93       	push	r24
    f6b2:	ff 92       	push	r15
    f6b4:	ef 92       	push	r14
    f6b6:	0e 94 b2 ab 	call	0x15764	; 0x15764 <_ZN12StringBuffer13appendSprintfEPKcz>
    f6ba:	8e 01       	movw	r16, r28
    f6bc:	0b 5f       	subi	r16, 0xFB	; 251
    f6be:	1f 4f       	sbci	r17, 0xFF	; 255
    for (int i=2; i<=keys[0]; i++) {
    f6c0:	0f b6       	in	r0, 0x3f	; 63
    f6c2:	f8 94       	cli
    f6c4:	de bf       	out	0x3e, r29	; 62
    f6c6:	0f be       	out	0x3f, r0	; 63
    f6c8:	cd bf       	out	0x3d, r28	; 61
    f6ca:	92 e0       	ldi	r25, 0x02	; 2
    f6cc:	a9 2e       	mov	r10, r25
    f6ce:	b1 2c       	mov	r11, r1
      buf.appendSprintf(",%d", keys[i]);
    f6d0:	26 e3       	ldi	r18, 0x36	; 54
    f6d2:	82 2e       	mov	r8, r18
    f6d4:	20 e1       	ldi	r18, 0x10	; 16
    f6d6:	92 2e       	mov	r9, r18
  StringBuffer callback(20);
  callback.appendSprintf("event.group%d", ind->dstAddr);
  if (findscript(const_cast<char*>(callback.c_str()))) {
    StringBuffer buf(64, 16);
    buf.appendSprintf("event.group%d(%d", ind->dstAddr, ind->srcAddr);
    for (int i=2; i<=keys[0]; i++) {
    f6d8:	89 81       	ldd	r24, Y+1	; 0x01
    f6da:	9a 81       	ldd	r25, Y+2	; 0x02
    f6dc:	8a 15       	cp	r24, r10
    f6de:	9b 05       	cpc	r25, r11
    f6e0:	bc f0       	brlt	.+46     	; 0xf710 <_ZL18fieldAnnouncementsP13NWK_DataInd_t+0x1a4>
      buf.appendSprintf(",%d", keys[i]);
    f6e2:	f8 01       	movw	r30, r16
    f6e4:	80 81       	ld	r24, Z
    f6e6:	91 81       	ldd	r25, Z+1	; 0x01
    f6e8:	0e 5f       	subi	r16, 0xFE	; 254
    f6ea:	1f 4f       	sbci	r17, 0xFF	; 255
    f6ec:	9f 93       	push	r25
    f6ee:	8f 93       	push	r24
    f6f0:	9f 92       	push	r9
    f6f2:	8f 92       	push	r8
    f6f4:	ff 92       	push	r15
    f6f6:	ef 92       	push	r14
    f6f8:	0e 94 b2 ab 	call	0x15764	; 0x15764 <_ZN12StringBuffer13appendSprintfEPKcz>
  StringBuffer callback(20);
  callback.appendSprintf("event.group%d", ind->dstAddr);
  if (findscript(const_cast<char*>(callback.c_str()))) {
    StringBuffer buf(64, 16);
    buf.appendSprintf("event.group%d(%d", ind->dstAddr, ind->srcAddr);
    for (int i=2; i<=keys[0]; i++) {
    f6fc:	ff ef       	ldi	r31, 0xFF	; 255
    f6fe:	af 1a       	sub	r10, r31
    f700:	bf 0a       	sbc	r11, r31
    f702:	0f 90       	pop	r0
    f704:	0f 90       	pop	r0
    f706:	0f 90       	pop	r0
    f708:	0f 90       	pop	r0
    f70a:	0f 90       	pop	r0
    f70c:	0f 90       	pop	r0
    f70e:	e4 cf       	rjmp	.-56     	; 0xf6d8 <_ZL18fieldAnnouncementsP13NWK_DataInd_t+0x16c>
    f710:	65 e6       	ldi	r22, 0x65	; 101
    f712:	7d e1       	ldi	r23, 0x1D	; 29
    f714:	c7 01       	movw	r24, r14
    f716:	0e 94 7d 19 	call	0x32fa	; 0x32fa <_ZN6String6concatEPKc>
      buf.appendSprintf(",%d", keys[i]);
    }
    buf += ")";
    doCommand(const_cast<char*>(buf.c_str()));
    f71a:	8d 89       	ldd	r24, Y+21	; 0x15
    f71c:	9e 89       	ldd	r25, Y+22	; 0x16
    f71e:	0e 94 59 35 	call	0x6ab2	; 0x6ab2 <_Z9doCommandPc>
    f722:	c7 01       	movw	r24, r14
    f724:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
    f728:	c6 01       	movw	r24, r12
    f72a:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
  }

  return true;
    f72e:	81 e0       	ldi	r24, 0x01	; 1
    f730:	01 c0       	rjmp	.+2      	; 0xf734 <_ZL18fieldAnnouncementsP13NWK_DataInd_t+0x1c8>
  }
  if (Scout.isLeadScout()) {
    leadAnnouncementSend(ind->dstAddr, ind->srcAddr, ConstBuf(data, ind->size-1)); // no null
  }
  if (!ind->dstAddr || ind->dstAddr == 0xBEEF || strlen(data) < 3 || data[0] != '[') {
    return false;
    f732:	80 e0       	ldi	r24, 0x00	; 0
    buf += ")";
    doCommand(const_cast<char*>(buf.c_str()));
  }

  return true;
}
    f734:	a4 96       	adiw	r28, 0x24	; 36
    f736:	0f b6       	in	r0, 0x3f	; 63
    f738:	f8 94       	cli
    f73a:	de bf       	out	0x3e, r29	; 62
    f73c:	0f be       	out	0x3f, r0	; 63
    f73e:	cd bf       	out	0x3d, r28	; 61
    f740:	df 91       	pop	r29
    f742:	cf 91       	pop	r28
    f744:	1f 91       	pop	r17
    f746:	0f 91       	pop	r16
    f748:	ff 90       	pop	r15
    f74a:	ef 90       	pop	r14
    f74c:	df 90       	pop	r13
    f74e:	cf 90       	pop	r12
    f750:	bf 90       	pop	r11
    f752:	af 90       	pop	r10
    f754:	9f 90       	pop	r9
    f756:	8f 90       	pop	r8
    f758:	08 95       	ret

0000f75a <_ZN20PinoccioScoutHandler8announceEjRK6String>:
  memmove(announceQG,announceQG+1,sizeof (uint16_t)*(announceQsize-1));
  announceQ[announceQsize-1] = 0;
  announceQSend();
}

void PinoccioScoutHandler::announce(uint16_t group, const String& message) {
    f75a:	ef 92       	push	r14
    f75c:	ff 92       	push	r15
    f75e:	0f 93       	push	r16
    f760:	1f 93       	push	r17
    f762:	cf 93       	push	r28
    f764:	df 93       	push	r29
    f766:	00 d0       	rcall	.+0      	; 0xf768 <_ZN20PinoccioScoutHandler8announceEjRK6String+0xe>
    f768:	1f 92       	push	r1
    f76a:	cd b7       	in	r28, 0x3d	; 61
    f76c:	de b7       	in	r29, 0x3e	; 62
    f76e:	8b 01       	movw	r16, r22
    f770:	7a 01       	movw	r14, r20
  // when lead scout, shortcut
  if (Scout.isLeadScout()) {
    f772:	80 ea       	ldi	r24, 0xA0	; 160
    f774:	95 e3       	ldi	r25, 0x35	; 53
    f776:	0e 94 b5 70 	call	0xe16a	; 0xe16a <_ZN13PinoccioScout11isLeadScoutEv>
    f77a:	81 11       	cpse	r24, r1
    f77c:	1d c0       	rjmp	.+58     	; 0xf7b8 <_ZN20PinoccioScoutHandler8announceEjRK6String+0x5e>
    // scout
    if (!group || group == 0xBEEF)
      return;
  }

  if (hqVerboseOutput) {
    f77e:	80 91 b3 39 	lds	r24, 0x39B3
    f782:	88 23       	and	r24, r24
    f784:	a9 f1       	breq	.+106    	; 0xf7f0 <_ZN20PinoccioScoutHandler8announceEjRK6String+0x96>
    // TODO: This writes to Serial directly, but if we use the bitlash
    // sp functions while we're called from inside a command, this debug
    // output is added to the  command output, which isn't quite what we
    // want. There should be a better way to emit this kind of "log"
    // message.
    Serial.print(F("mesh announcing to "));
    f786:	6d e8       	ldi	r22, 0x8D	; 141
    f788:	7b e0       	ldi	r23, 0x0B	; 11
    f78a:	84 e0       	ldi	r24, 0x04	; 4
    f78c:	94 e2       	ldi	r25, 0x24	; 36
    f78e:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.print(group);
    f792:	4a e0       	ldi	r20, 0x0A	; 10
    f794:	50 e0       	ldi	r21, 0x00	; 0
    f796:	b8 01       	movw	r22, r16
    f798:	84 e0       	ldi	r24, 0x04	; 4
    f79a:	94 e2       	ldi	r25, 0x24	; 36
    f79c:	0e 94 91 10 	call	0x2122	; 0x2122 <_ZN5Print5printEji>
    Serial.print(F(" "));
    f7a0:	6b e8       	ldi	r22, 0x8B	; 139
    f7a2:	7b e0       	ldi	r23, 0x0B	; 11
    f7a4:	84 e0       	ldi	r24, 0x04	; 4
    f7a6:	94 e2       	ldi	r25, 0x24	; 36
    f7a8:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.println(message);
    f7ac:	b7 01       	movw	r22, r14
    f7ae:	84 e0       	ldi	r24, 0x04	; 4
    f7b0:	94 e2       	ldi	r25, 0x24	; 36
    f7b2:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <_ZN5Print7printlnERK6String>
    f7b6:	1c c0       	rjmp	.+56     	; 0xf7f0 <_ZN20PinoccioScoutHandler8announceEjRK6String+0x96>
  ConstBuf(const uint8_t *buf, size_t len) : buffer(buf), len(len) { }
  // Intialize from a regular (nul-terminated!) string
  ConstBuf(const char *str) : buffer((const uint8_t*)str), len(strlen(str)) { }
  // Initialized from a String object
  ConstBuf(const String& str) : buffer((const uint8_t*)str.c_str()), len(str.length()) { }
    f7b8:	f7 01       	movw	r30, r14
    f7ba:	80 81       	ld	r24, Z
    f7bc:	91 81       	ldd	r25, Z+1	; 0x01
    f7be:	9a 83       	std	Y+2, r25	; 0x02
    f7c0:	89 83       	std	Y+1, r24	; 0x01
    f7c2:	84 81       	ldd	r24, Z+4	; 0x04
    f7c4:	95 81       	ldd	r25, Z+5	; 0x05
    f7c6:	9c 83       	std	Y+4, r25	; 0x04
    f7c8:	8b 83       	std	Y+3, r24	; 0x03
}

void PinoccioScoutHandler::announce(uint16_t group, const String& message) {
  // when lead scout, shortcut
  if (Scout.isLeadScout()) {
    leadAnnouncementSend(group, Scout.getAddress(), message);
    f7ca:	80 ea       	ldi	r24, 0xA0	; 160
    f7cc:	95 e3       	ldi	r25, 0x35	; 53
    f7ce:	0e 94 c0 6e 	call	0xdd80	; 0xdd80 <_ZN13PinoccioClass10getAddressEv>
    f7d2:	ae 01       	movw	r20, r28
    f7d4:	4f 5f       	subi	r20, 0xFF	; 255
    f7d6:	5f 4f       	sbci	r21, 0xFF	; 255
    f7d8:	bc 01       	movw	r22, r24
    f7da:	c8 01       	movw	r24, r16
    f7dc:	51 de       	rcall	.-862    	; 0xf480 <_ZL20leadAnnouncementSendjjRK8ConstBuf>
    // Don't broadcast HQ commands over the network if we are a lead
    // scout
    if (!group || group == 0xBEEF)
    f7de:	01 15       	cp	r16, r1
    f7e0:	11 05       	cpc	r17, r1
    f7e2:	09 f4       	brne	.+2      	; 0xf7e6 <_ZN20PinoccioScoutHandler8announceEjRK6String+0x8c>
    f7e4:	41 c0       	rjmp	.+130    	; 0xf868 <_ZN20PinoccioScoutHandler8announceEjRK6String+0x10e>
    f7e6:	0f 3e       	cpi	r16, 0xEF	; 239
    f7e8:	fe eb       	ldi	r31, 0xBE	; 190
    f7ea:	1f 07       	cpc	r17, r31
    f7ec:	41 f6       	brne	.-112    	; 0xf77e <_ZN20PinoccioScoutHandler8announceEjRK6String+0x24>
    f7ee:	3c c0       	rjmp	.+120    	; 0xf868 <_ZN20PinoccioScoutHandler8announceEjRK6String+0x10e>
    Serial.print(F(" "));
    Serial.println(message);
  }

  // TODO: Allocate the data and request pointers in a single malloc?
  char *data = strdup(message.c_str());
    f7f0:	f7 01       	movw	r30, r14
    f7f2:	80 81       	ld	r24, Z
    f7f4:	91 81       	ldd	r25, Z+1	; 0x01
    f7f6:	0e 94 2a b5 	call	0x16a54	; 0x16a54 <strdup>
  if (!data) {
    f7fa:	00 97       	sbiw	r24, 0x00	; 0
    f7fc:	a9 f1       	breq	.+106    	; 0xf868 <_ZN20PinoccioScoutHandler8announceEjRK6String+0x10e>
    return;
  }

  if(announceQ[0])
    f7fe:	20 91 76 39 	lds	r18, 0x3976
    f802:	30 91 77 39 	lds	r19, 0x3977
    f806:	23 2b       	or	r18, r19
    f808:	c9 f0       	breq	.+50     	; 0xf83c <_ZN20PinoccioScoutHandler8announceEjRK6String+0xe2>
    f80a:	e8 e7       	ldi	r30, 0x78	; 120
    f80c:	f9 e3       	ldi	r31, 0x39	; 57
    f80e:	21 e0       	ldi	r18, 0x01	; 1
    f810:	30 e0       	ldi	r19, 0x00	; 0
  {
    int i = 1;
    while(i < announceQsize && announceQ[i]) i++;
    f812:	41 91       	ld	r20, Z+
    f814:	51 91       	ld	r21, Z+
    f816:	45 2b       	or	r20, r21
    f818:	d9 f0       	breq	.+54     	; 0xf850 <_ZN20PinoccioScoutHandler8announceEjRK6String+0xf6>
    f81a:	2f 5f       	subi	r18, 0xFF	; 255
    f81c:	3f 4f       	sbci	r19, 0xFF	; 255
    f81e:	2a 30       	cpi	r18, 0x0A	; 10
    f820:	31 05       	cpc	r19, r1
    f822:	b9 f7       	brne	.-18     	; 0xf812 <_ZN20PinoccioScoutHandler8announceEjRK6String+0xb8>
    return;
  }
  announceQ[0] = data;
  announceQG[0] = group;
  announceQSend();
}
    f824:	0f 90       	pop	r0
    f826:	0f 90       	pop	r0
    f828:	0f 90       	pop	r0
    f82a:	0f 90       	pop	r0
    f82c:	df 91       	pop	r29
    f82e:	cf 91       	pop	r28
    f830:	1f 91       	pop	r17
    f832:	0f 91       	pop	r16
    f834:	ff 90       	pop	r15
    f836:	ef 90       	pop	r14

  if(announceQ[0])
  {
    int i = 1;
    while(i < announceQsize && announceQ[i]) i++;
    if(i == announceQsize) return (void)free(data);
    f838:	0c 94 c6 b0 	jmp	0x1618c	; 0x1618c <free>
    announceQ[i] = data;
    announceQG[i] = group;
    return;
  }
  announceQ[0] = data;
    f83c:	90 93 77 39 	sts	0x3977, r25
    f840:	80 93 76 39 	sts	0x3976, r24
  announceQG[0] = group;
    f844:	10 93 63 39 	sts	0x3963, r17
    f848:	00 93 62 39 	sts	0x3962, r16
  announceQSend();
    f84c:	75 dc       	rcall	.-1814   	; 0xf138 <_Z13announceQSendv>
    f84e:	0c c0       	rjmp	.+24     	; 0xf868 <_ZN20PinoccioScoutHandler8announceEjRK6String+0x10e>
  if(announceQ[0])
  {
    int i = 1;
    while(i < announceQsize && announceQ[i]) i++;
    if(i == announceQsize) return (void)free(data);
    announceQ[i] = data;
    f850:	22 0f       	add	r18, r18
    f852:	33 1f       	adc	r19, r19
    f854:	f9 01       	movw	r30, r18
    f856:	ea 58       	subi	r30, 0x8A	; 138
    f858:	f6 4c       	sbci	r31, 0xC6	; 198
    f85a:	91 83       	std	Z+1, r25	; 0x01
    f85c:	80 83       	st	Z, r24
    announceQG[i] = group;
    f85e:	f9 01       	movw	r30, r18
    f860:	ee 59       	subi	r30, 0x9E	; 158
    f862:	f6 4c       	sbci	r31, 0xC6	; 198
    f864:	11 83       	std	Z+1, r17	; 0x01
    f866:	00 83       	st	Z, r16
    return;
  }
  announceQ[0] = data;
  announceQG[0] = group;
  announceQSend();
}
    f868:	0f 90       	pop	r0
    f86a:	0f 90       	pop	r0
    f86c:	0f 90       	pop	r0
    f86e:	0f 90       	pop	r0
    f870:	df 91       	pop	r29
    f872:	cf 91       	pop	r28
    f874:	1f 91       	pop	r17
    f876:	0f 91       	pop	r16
    f878:	ff 90       	pop	r15
    f87a:	ef 90       	pop	r14
    f87c:	08 95       	ret

0000f87e <_ZN20PinoccioScoutHandler6reportERK6String>:
  }
  leadSignal(report);
}

// [3,[0,1,2],[v,v,v]]
StringBuffer PinoccioScoutHandler::report(const String &report) {
    f87e:	ef 92       	push	r14
    f880:	ff 92       	push	r15
    f882:	0f 93       	push	r16
    f884:	1f 93       	push	r17
    f886:	cf 93       	push	r28
    f888:	df 93       	push	r29
    f88a:	00 d0       	rcall	.+0      	; 0xf88c <_ZN20PinoccioScoutHandler6reportERK6String+0xe>
    f88c:	1f 92       	push	r1
    f88e:	cd b7       	in	r28, 0x3d	; 61
    f890:	de b7       	in	r29, 0x3e	; 62
    f892:	7c 01       	movw	r14, r24
    f894:	8a 01       	movw	r16, r20
  Scout.handler.announce(0xBEEF, report);
    f896:	6f ee       	ldi	r22, 0xEF	; 239
    f898:	7e eb       	ldi	r23, 0xBE	; 190
    f89a:	8b ee       	ldi	r24, 0xEB	; 235
    f89c:	98 e3       	ldi	r25, 0x38	; 56
    f89e:	5d df       	rcall	.-326    	; 0xf75a <_ZN20PinoccioScoutHandler8announceEjRK6String>
    f8a0:	f8 01       	movw	r30, r16
    f8a2:	80 81       	ld	r24, Z
    f8a4:	91 81       	ldd	r25, Z+1	; 0x01
    f8a6:	9a 83       	std	Y+2, r25	; 0x02
    f8a8:	89 83       	std	Y+1, r24	; 0x01
    f8aa:	84 81       	ldd	r24, Z+4	; 0x04
    f8ac:	95 81       	ldd	r25, Z+5	; 0x05
    f8ae:	9c 83       	std	Y+4, r25	; 0x04
    f8b0:	8b 83       	std	Y+3, r24	; 0x03
  return report2json(report);
    f8b2:	be 01       	movw	r22, r28
    f8b4:	6f 5f       	subi	r22, 0xFF	; 255
    f8b6:	7f 4f       	sbci	r23, 0xFF	; 255
    f8b8:	c7 01       	movw	r24, r14
    f8ba:	ac dc       	rcall	.-1704   	; 0xf214 <_Z11report2jsonRK8ConstBuf>
}
    f8bc:	c7 01       	movw	r24, r14
    f8be:	0f 90       	pop	r0
    f8c0:	0f 90       	pop	r0
    f8c2:	0f 90       	pop	r0
    f8c4:	0f 90       	pop	r0
    f8c6:	df 91       	pop	r29
    f8c8:	cf 91       	pop	r28
    f8ca:	1f 91       	pop	r17
    f8cc:	0f 91       	pop	r16
    f8ce:	ff 90       	pop	r15
    f8d0:	ef 90       	pop	r14
    f8d2:	08 95       	ret

0000f8d4 <_Z13leadHQConnectv>:

////////////////////
// lead scout stuff

void leadHQConnect() {
    f8d4:	ef 92       	push	r14
    f8d6:	ff 92       	push	r15
    f8d8:	0f 93       	push	r16
    f8da:	1f 93       	push	r17
    f8dc:	cf 93       	push	r28
    f8de:	df 93       	push	r29
    f8e0:	cd b7       	in	r28, 0x3d	; 61
    f8e2:	de b7       	in	r29, 0x3e	; 62
    f8e4:	a9 97       	sbiw	r28, 0x29	; 41
    f8e6:	0f b6       	in	r0, 0x3f	; 63
    f8e8:	f8 94       	cli
    f8ea:	de bf       	out	0x3e, r29	; 62
    f8ec:	0f be       	out	0x3f, r0	; 63
    f8ee:	cd bf       	out	0x3d, r28	; 61

  if (Scout.wifi.client.connected()) {
    f8f0:	e0 91 f7 35 	lds	r30, 0x35F7
    f8f4:	f0 91 f8 35 	lds	r31, 0x35F8
    f8f8:	04 88       	ldd	r0, Z+20	; 0x14
    f8fa:	f5 89       	ldd	r31, Z+21	; 0x15
    f8fc:	e0 2d       	mov	r30, r0
    f8fe:	87 ef       	ldi	r24, 0xF7	; 247
    f900:	95 e3       	ldi	r25, 0x35	; 53
    f902:	19 95       	eicall
    f904:	88 23       	and	r24, r24
    f906:	49 f1       	breq	.+82     	; 0xf95a <_Z13leadHQConnectv+0x86>
    char token[33];
    StringBuffer auth(64);
    f908:	8e 01       	movw	r16, r28
    f90a:	0e 5d       	subi	r16, 0xDE	; 222
    f90c:	1f 4f       	sbci	r17, 0xFF	; 255
    f90e:	41 e0       	ldi	r20, 0x01	; 1
    f910:	50 e0       	ldi	r21, 0x00	; 0
    f912:	60 e4       	ldi	r22, 0x40	; 64
    f914:	70 e0       	ldi	r23, 0x00	; 0
    f916:	c8 01       	movw	r24, r16
    f918:	0e 94 8d ab 	call	0x1571a	; 0x1571a <_ZN12StringBufferC1Ejj>
    token[32] = 0;
    f91c:	19 a2       	std	Y+33, r1	; 0x21
    Scout.getHQToken(token);
    f91e:	ce 01       	movw	r24, r28
    f920:	01 96       	adiw	r24, 0x01	; 1
    f922:	7c 01       	movw	r14, r24
    f924:	bc 01       	movw	r22, r24
    f926:	80 ea       	ldi	r24, 0xA0	; 160
    f928:	95 e3       	ldi	r25, 0x35	; 53
    f92a:	0e 94 ea 6c 	call	0xd9d4	; 0xd9d4 <_ZN13PinoccioClass10getHQTokenEPc>
    auth.appendSprintf("{\"type\":\"token\",\"token\":\"%s\"}\n", token);
    f92e:	ff 92       	push	r15
    f930:	ef 92       	push	r14
    f932:	81 e9       	ldi	r24, 0x91	; 145
    f934:	99 e1       	ldi	r25, 0x19	; 25
    f936:	9f 93       	push	r25
    f938:	8f 93       	push	r24
    f93a:	1f 93       	push	r17
    f93c:	0f 93       	push	r16
    f93e:	0e 94 b2 ab 	call	0x15764	; 0x15764 <_ZN12StringBuffer13appendSprintfEPKcz>
    leadSignal(auth);
    f942:	c8 01       	movw	r24, r16
    f944:	fc d9       	rcall	.-3080   	; 0xed3e <_ZL10leadSignalRK6String>
    f946:	c8 01       	movw	r24, r16
    f948:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
    f94c:	0f 90       	pop	r0
    f94e:	0f 90       	pop	r0
    f950:	0f 90       	pop	r0
    f952:	0f 90       	pop	r0
    f954:	0f 90       	pop	r0
    f956:	0f 90       	pop	r0
    f958:	0a c0       	rjmp	.+20     	; 0xf96e <_Z13leadHQConnectv+0x9a>
  } else {
    if (hqVerboseOutput) {
    f95a:	80 91 b3 39 	lds	r24, 0x39B3
    f95e:	88 23       	and	r24, r24
    f960:	31 f0       	breq	.+12     	; 0xf96e <_Z13leadHQConnectv+0x9a>
      Serial.println(F("server unvailable"));
    f962:	62 e6       	ldi	r22, 0x62	; 98
    f964:	7b e0       	ldi	r23, 0x0B	; 11
    f966:	84 e0       	ldi	r24, 0x04	; 4
    f968:	94 e2       	ldi	r25, 0x24	; 36
    f96a:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <_ZN5Print7printlnEPK19__FlashStringHelper>
    }
  }
}
    f96e:	a9 96       	adiw	r28, 0x29	; 41
    f970:	0f b6       	in	r0, 0x3f	; 63
    f972:	f8 94       	cli
    f974:	de bf       	out	0x3e, r29	; 62
    f976:	0f be       	out	0x3f, r0	; 63
    f978:	cd bf       	out	0x3d, r28	; 61
    f97a:	df 91       	pop	r29
    f97c:	cf 91       	pop	r28
    f97e:	1f 91       	pop	r17
    f980:	0f 91       	pop	r16
    f982:	ff 90       	pop	r15
    f984:	ef 90       	pop	r14
    f986:	08 95       	ret

0000f988 <_Z16leadCommandErroriiPKc>:
    }
  }
}

// when we can't process a command for some internal reason
void leadCommandError(int from, int id, const char *reason) {
    f988:	af 92       	push	r10
    f98a:	bf 92       	push	r11
    f98c:	cf 92       	push	r12
    f98e:	df 92       	push	r13
    f990:	ef 92       	push	r14
    f992:	ff 92       	push	r15
    f994:	0f 93       	push	r16
    f996:	1f 93       	push	r17
    f998:	cf 93       	push	r28
    f99a:	df 93       	push	r29
    f99c:	cd b7       	in	r28, 0x3d	; 61
    f99e:	de b7       	in	r29, 0x3e	; 62
    f9a0:	28 97       	sbiw	r28, 0x08	; 8
    f9a2:	0f b6       	in	r0, 0x3f	; 63
    f9a4:	f8 94       	cli
    f9a6:	de bf       	out	0x3e, r29	; 62
    f9a8:	0f be       	out	0x3f, r0	; 63
    f9aa:	cd bf       	out	0x3d, r28	; 61
    f9ac:	f8 2e       	mov	r15, r24
    f9ae:	e9 2e       	mov	r14, r25
    f9b0:	d6 2e       	mov	r13, r22
    f9b2:	c7 2e       	mov	r12, r23
    f9b4:	b4 2e       	mov	r11, r20
    f9b6:	a5 2e       	mov	r10, r21
  StringBuffer err(128);
    f9b8:	41 e0       	ldi	r20, 0x01	; 1
    f9ba:	50 e0       	ldi	r21, 0x00	; 0
    f9bc:	60 e8       	ldi	r22, 0x80	; 128
    f9be:	70 e0       	ldi	r23, 0x00	; 0
    f9c0:	8e 01       	movw	r16, r28
    f9c2:	0f 5f       	subi	r16, 0xFF	; 255
    f9c4:	1f 4f       	sbci	r17, 0xFF	; 255
    f9c6:	c8 01       	movw	r24, r16
    f9c8:	0e 94 8d ab 	call	0x1571a	; 0x1571a <_ZN12StringBufferC1Ejj>
  err.appendSprintf("{\"type\":\"reply\",\"from\":%d,\"id\":%d,\"err\":true,\"reply\":\"%s\"}\n", from, id, reason);
    f9cc:	af 92       	push	r10
    f9ce:	bf 92       	push	r11
    f9d0:	cf 92       	push	r12
    f9d2:	df 92       	push	r13
    f9d4:	ef 92       	push	r14
    f9d6:	ff 92       	push	r15
    f9d8:	80 eb       	ldi	r24, 0xB0	; 176
    f9da:	99 e1       	ldi	r25, 0x19	; 25
    f9dc:	9f 93       	push	r25
    f9de:	8f 93       	push	r24
    f9e0:	1f 93       	push	r17
    f9e2:	0f 93       	push	r16
    f9e4:	0e 94 b2 ab 	call	0x15764	; 0x15764 <_ZN12StringBuffer13appendSprintfEPKcz>
  leadSignal(err);
    f9e8:	c8 01       	movw	r24, r16
    f9ea:	a9 d9       	rcall	.-3246   	; 0xed3e <_ZL10leadSignalRK6String>
    f9ec:	c8 01       	movw	r24, r16
    f9ee:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
    f9f2:	0f b6       	in	r0, 0x3f	; 63
    f9f4:	f8 94       	cli
    f9f6:	de bf       	out	0x3e, r29	; 62
    f9f8:	0f be       	out	0x3f, r0	; 63
    f9fa:	cd bf       	out	0x3d, r28	; 61
}
    f9fc:	28 96       	adiw	r28, 0x08	; 8
    f9fe:	0f b6       	in	r0, 0x3f	; 63
    fa00:	f8 94       	cli
    fa02:	de bf       	out	0x3e, r29	; 62
    fa04:	0f be       	out	0x3f, r0	; 63
    fa06:	cd bf       	out	0x3d, r28	; 61
    fa08:	df 91       	pop	r29
    fa0a:	cf 91       	pop	r28
    fa0c:	1f 91       	pop	r17
    fa0e:	0f 91       	pop	r16
    fa10:	ff 90       	pop	r15
    fa12:	ef 90       	pop	r14
    fa14:	df 90       	pop	r13
    fa16:	cf 90       	pop	r12
    fa18:	bf 90       	pop	r11
    fa1a:	af 90       	pop	r10
    fa1c:	08 95       	ret

0000fa1e <_ZN20PinoccioScoutHandler4loopEv>:
  Scout.meshListen(4, fieldAnnouncements);
  
  memset(announceQ,0,announceQsize*sizeof(char*));
}

void PinoccioScoutHandler::loop() {
    fa1e:	2f 92       	push	r2
    fa20:	3f 92       	push	r3
    fa22:	4f 92       	push	r4
    fa24:	5f 92       	push	r5
    fa26:	6f 92       	push	r6
    fa28:	7f 92       	push	r7
    fa2a:	8f 92       	push	r8
    fa2c:	9f 92       	push	r9
    fa2e:	af 92       	push	r10
    fa30:	bf 92       	push	r11
    fa32:	cf 92       	push	r12
    fa34:	df 92       	push	r13
    fa36:	ef 92       	push	r14
    fa38:	ff 92       	push	r15
    fa3a:	0f 93       	push	r16
    fa3c:	1f 93       	push	r17
    fa3e:	cf 93       	push	r28
    fa40:	df 93       	push	r29
    fa42:	cd b7       	in	r28, 0x3d	; 61
    fa44:	de b7       	in	r29, 0x3e	; 62
    fa46:	c8 54       	subi	r28, 0x48	; 72
    fa48:	d1 09       	sbc	r29, r1
    fa4a:	0f b6       	in	r0, 0x3f	; 63
    fa4c:	f8 94       	cli
    fa4e:	de bf       	out	0x3e, r29	; 62
    fa50:	0f be       	out	0x3f, r0	; 63
    fa52:	cd bf       	out	0x3d, r28	; 61
  if (Scout.isLeadScout()) {
    fa54:	80 ea       	ldi	r24, 0xA0	; 160
    fa56:	95 e3       	ldi	r25, 0x35	; 53
    fa58:	0e 94 b5 70 	call	0xe16a	; 0xe16a <_ZN13PinoccioScout11isLeadScoutEv>
    fa5c:	88 23       	and	r24, r24
    fa5e:	09 f4       	brne	.+2      	; 0xfa62 <_ZN20PinoccioScoutHandler4loopEv+0x44>
    fa60:	69 c1       	rjmp	.+722    	; 0xfd34 <_ZN20PinoccioScoutHandler4loopEv+0x316>
void leadHQHandle(void) {
  int rsize;
  unsigned short index[32]; // <10 keypairs in the incoming json

  // only continue if new data to read
  if (!Scout.wifi.client.available()) {
    fa62:	e0 91 f7 35 	lds	r30, 0x35F7
    fa66:	f0 91 f8 35 	lds	r31, 0x35F8
    fa6a:	04 80       	ldd	r0, Z+4	; 0x04
    fa6c:	f5 81       	ldd	r31, Z+5	; 0x05
    fa6e:	e0 2d       	mov	r30, r0
    fa70:	87 ef       	ldi	r24, 0xF7	; 247
    fa72:	95 e3       	ldi	r25, 0x35	; 53
    fa74:	19 95       	eicall
    fa76:	89 2b       	or	r24, r25
    fa78:	09 f4       	brne	.+2      	; 0xfa7c <_ZN20PinoccioScoutHandler4loopEv+0x5e>
    fa7a:	5c c1       	rjmp	.+696    	; 0xfd34 <_ZN20PinoccioScoutHandler4loopEv+0x316>
    if (to == Scout.getAddress()) {
      setOutputHandler(&printToString<&leadCommandOutput>);
      doCommand(command);
      resetOutputHandler();

      StringBuffer report;
    fa7c:	7e 01       	movw	r14, r28
    fa7e:	81 e4       	ldi	r24, 0x41	; 65
    fa80:	e8 0e       	add	r14, r24
    fa82:	f1 1c       	adc	r15, r1
      report.appendSprintf("{\"type\":\"reply\",\"from\":%d,\"id\":%lu,\"end\":true,\"reply\":", to, id);
    fa84:	5b ef       	ldi	r21, 0xFB	; 251
    fa86:	25 2e       	mov	r2, r21
    fa88:	59 e1       	ldi	r21, 0x19	; 25
    fa8a:	35 2e       	mov	r3, r21
  if (!Scout.wifi.client.available()) {
    return;
  }

  // Read a block of data and look for packets
  while ((rsize = hqIncoming.readClient(Scout.wifi.client, 128))) {
    fa8c:	40 e8       	ldi	r20, 0x80	; 128
    fa8e:	50 e0       	ldi	r21, 0x00	; 0
    fa90:	67 ef       	ldi	r22, 0xF7	; 247
    fa92:	75 e3       	ldi	r23, 0x35	; 53
    fa94:	84 e2       	ldi	r24, 0x24	; 36
    fa96:	99 e3       	ldi	r25, 0x39	; 57
    fa98:	0e 94 26 ac 	call	0x1584c	; 0x1584c <_ZN12StringBuffer10readClientER6Clientj>
    fa9c:	89 2b       	or	r24, r25
    fa9e:	09 f4       	brne	.+2      	; 0xfaa2 <_ZN20PinoccioScoutHandler4loopEv+0x84>
    faa0:	49 c1       	rjmp	.+658    	; 0xfd34 <_ZN20PinoccioScoutHandler4loopEv+0x316>
    int nl;
    while((nl = hqIncoming.indexOf('\n')) >= 0) {
    faa2:	6a e0       	ldi	r22, 0x0A	; 10
    faa4:	84 e2       	ldi	r24, 0x24	; 36
    faa6:	99 e3       	ldi	r25, 0x39	; 57
    faa8:	0e 94 1e 1a 	call	0x343c	; 0x343c <_ZNK6String7indexOfEc>
    faac:	5c 01       	movw	r10, r24
    faae:	97 fd       	sbrc	r25, 7
    fab0:	ed cf       	rjmp	.-38     	; 0xfa8c <_ZN20PinoccioScoutHandler4loopEv+0x6e>
     // look for a packet
      if (hqVerboseOutput) {
    fab2:	80 91 b3 39 	lds	r24, 0x39B3
    fab6:	88 23       	and	r24, r24
    fab8:	61 f0       	breq	.+24     	; 0xfad2 <_ZN20PinoccioScoutHandler4loopEv+0xb4>
        Serial.print(F("looking for packet in: "));
    faba:	6f e2       	ldi	r22, 0x2F	; 47
    fabc:	7c e0       	ldi	r23, 0x0C	; 12
    fabe:	84 e0       	ldi	r24, 0x04	; 4
    fac0:	94 e2       	ldi	r25, 0x24	; 36
    fac2:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
        Serial.println(hqIncoming);
    fac6:	64 e2       	ldi	r22, 0x24	; 36
    fac8:	79 e3       	ldi	r23, 0x39	; 57
    faca:	84 e0       	ldi	r24, 0x04	; 4
    facc:	94 e2       	ldi	r25, 0x24	; 36
    face:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <_ZN5Print7printlnERK6String>
      }

      // Parse JSON up to the first newline
      if (!js0n((const unsigned char*)hqIncoming.c_str(), nl, index, 32)) {
    fad2:	20 e2       	ldi	r18, 0x20	; 32
    fad4:	30 e0       	ldi	r19, 0x00	; 0
    fad6:	ae 01       	movw	r20, r28
    fad8:	4f 5f       	subi	r20, 0xFF	; 255
    fada:	5f 4f       	sbci	r21, 0xFF	; 255
    fadc:	b5 01       	movw	r22, r10
    fade:	80 91 24 39 	lds	r24, 0x3924
    fae2:	90 91 25 39 	lds	r25, 0x3925
    fae6:	0e 94 36 49 	call	0x926c	; 0x926c <js0n>
    faea:	89 2b       	or	r24, r25
    faec:	09 f0       	breq	.+2      	; 0xfaf0 <_ZN20PinoccioScoutHandler4loopEv+0xd2>
    faee:	9e c0       	rjmp	.+316    	; 0xfc2c <_ZN20PinoccioScoutHandler4loopEv+0x20e>
        leadIncoming(hqIncoming.c_str(), nl, index);
    faf0:	c0 90 24 39 	lds	r12, 0x3924
    faf4:	d0 90 25 39 	lds	r13, 0x3925

// process a packet from HQ
void leadIncoming(const char *packet, size_t len, unsigned short *index) {
  char *type, *command, *buffer;

  buffer = (char*)malloc(len);
    faf8:	c5 01       	movw	r24, r10
    fafa:	0e 94 2e b0 	call	0x1605c	; 0x1605c <malloc>
    fafe:	8c 01       	movw	r16, r24
  memcpy(buffer, packet, len);
    fb00:	a5 01       	movw	r20, r10
    fb02:	b6 01       	movw	r22, r12
    fb04:	0e 94 42 b5 	call	0x16a84	; 0x16a84 <memcpy>

  uint16_t to;
  unsigned long id;

  type = j0g_str("type", buffer, index);
    fb08:	ae 01       	movw	r20, r28
    fb0a:	4f 5f       	subi	r20, 0xFF	; 255
    fb0c:	5f 4f       	sbci	r21, 0xFF	; 255
    fb0e:	b8 01       	movw	r22, r16
    fb10:	8c ee       	ldi	r24, 0xEC	; 236
    fb12:	99 e1       	ldi	r25, 0x19	; 25
    fb14:	0e 94 22 49 	call	0x9244	; 0x9244 <j0g_str>
    fb18:	6c 01       	movw	r12, r24
  if (hqVerboseOutput) {
    fb1a:	80 91 b3 39 	lds	r24, 0x39B3
    fb1e:	88 23       	and	r24, r24
    fb20:	29 f0       	breq	.+10     	; 0xfb2c <_ZN20PinoccioScoutHandler4loopEv+0x10e>
    Serial.println(type);
    fb22:	b6 01       	movw	r22, r12
    fb24:	84 e0       	ldi	r24, 0x04	; 4
    fb26:	94 e2       	ldi	r25, 0x24	; 36
    fb28:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <_ZN5Print7printlnEPKc>
  }

  if (strcmp(type, "online") == 0) {
    fb2c:	61 ef       	ldi	r22, 0xF1	; 241
    fb2e:	79 e1       	ldi	r23, 0x19	; 25
    fb30:	c6 01       	movw	r24, r12
    fb32:	0e 94 6e b5 	call	0x16adc	; 0x16adc <strcmp>
    fb36:	89 2b       	or	r24, r25
    fb38:	21 f4       	brne	.+8      	; 0xfb42 <_ZN20PinoccioScoutHandler4loopEv+0x124>
    Shell.allReportHQ();
    fb3a:	8e ee       	ldi	r24, 0xEE	; 238
    fb3c:	99 e3       	ldi	r25, 0x39	; 57
    fb3e:	0e 94 57 a1 	call	0x142ae	; 0x142ae <_ZN13PinoccioShell11allReportHQEv>
  }

  if (strcmp(type, "command") == 0) {
    fb42:	6e e3       	ldi	r22, 0x3E	; 62
    fb44:	73 e2       	ldi	r23, 0x23	; 35
    fb46:	c6 01       	movw	r24, r12
    fb48:	0e 94 6e b5 	call	0x16adc	; 0x16adc <strcmp>
    fb4c:	89 2b       	or	r24, r25
    fb4e:	09 f0       	breq	.+2      	; 0xfb52 <_ZN20PinoccioScoutHandler4loopEv+0x134>
    fb50:	69 c0       	rjmp	.+210    	; 0xfc24 <_ZN20PinoccioScoutHandler4loopEv+0x206>
    to = atoi(j0g_str("to", buffer, index));
    fb52:	ae 01       	movw	r20, r28
    fb54:	4f 5f       	subi	r20, 0xFF	; 255
    fb56:	5f 4f       	sbci	r21, 0xFF	; 255
    fb58:	b8 01       	movw	r22, r16
    fb5a:	88 ef       	ldi	r24, 0xF8	; 248
    fb5c:	99 e1       	ldi	r25, 0x19	; 25
    fb5e:	0e 94 22 49 	call	0x9244	; 0x9244 <j0g_str>
    fb62:	0e 94 67 b4 	call	0x168ce	; 0x168ce <atoi>
    fb66:	6c 01       	movw	r12, r24
    id = strtoul(j0g_str("id", buffer, index), NULL, 10);
    fb68:	ae 01       	movw	r20, r28
    fb6a:	4f 5f       	subi	r20, 0xFF	; 255
    fb6c:	5f 4f       	sbci	r21, 0xFF	; 255
    fb6e:	b8 01       	movw	r22, r16
    fb70:	8b ee       	ldi	r24, 0xEB	; 235
    fb72:	9c e1       	ldi	r25, 0x1C	; 28
    fb74:	0e 94 22 49 	call	0x9244	; 0x9244 <j0g_str>
    fb78:	4a e0       	ldi	r20, 0x0A	; 10
    fb7a:	50 e0       	ldi	r21, 0x00	; 0
    fb7c:	60 e0       	ldi	r22, 0x00	; 0
    fb7e:	70 e0       	ldi	r23, 0x00	; 0
    fb80:	0e 94 56 b3 	call	0x166ac	; 0x166ac <strtoul>
    fb84:	2b 01       	movw	r4, r22
    fb86:	3c 01       	movw	r6, r24
    command = j0g_str("command", buffer, index);
    fb88:	ae 01       	movw	r20, r28
    fb8a:	4f 5f       	subi	r20, 0xFF	; 255
    fb8c:	5f 4f       	sbci	r21, 0xFF	; 255
    fb8e:	b8 01       	movw	r22, r16
    fb90:	8e e3       	ldi	r24, 0x3E	; 62
    fb92:	93 e2       	ldi	r25, 0x23	; 35
    fb94:	0e 94 22 49 	call	0x9244	; 0x9244 <j0g_str>
    fb98:	4c 01       	movw	r8, r24
    if (strlen(j0g_str("to", buffer, index)) == 0 || !id || !command) {
    fb9a:	ae 01       	movw	r20, r28
    fb9c:	4f 5f       	subi	r20, 0xFF	; 255
    fb9e:	5f 4f       	sbci	r21, 0xFF	; 255
    fba0:	b8 01       	movw	r22, r16
    fba2:	88 ef       	ldi	r24, 0xF8	; 248
    fba4:	99 e1       	ldi	r25, 0x19	; 25
    fba6:	0e 94 22 49 	call	0x9244	; 0x9244 <j0g_str>
    fbaa:	fc 01       	movw	r30, r24
    fbac:	80 81       	ld	r24, Z
    fbae:	88 23       	and	r24, r24
    fbb0:	49 f0       	breq	.+18     	; 0xfbc4 <_ZN20PinoccioScoutHandler4loopEv+0x1a6>
    fbb2:	41 14       	cp	r4, r1
    fbb4:	51 04       	cpc	r5, r1
    fbb6:	61 04       	cpc	r6, r1
    fbb8:	71 04       	cpc	r7, r1
    fbba:	21 f0       	breq	.+8      	; 0xfbc4 <_ZN20PinoccioScoutHandler4loopEv+0x1a6>
    fbbc:	81 14       	cp	r8, r1
    fbbe:	91 04       	cpc	r9, r1
    fbc0:	09 f0       	breq	.+2      	; 0xfbc4 <_ZN20PinoccioScoutHandler4loopEv+0x1a6>
    fbc2:	48 c0       	rjmp	.+144    	; 0xfc54 <_ZN20PinoccioScoutHandler4loopEv+0x236>
      if (hqVerboseOutput) {
    fbc4:	80 91 b3 39 	lds	r24, 0x39B3
    fbc8:	88 23       	and	r24, r24
    fbca:	61 f1       	breq	.+88     	; 0xfc24 <_ZN20PinoccioScoutHandler4loopEv+0x206>
        Serial.println(F("invalid command, requires to, id, command"));
    fbcc:	63 ef       	ldi	r22, 0xF3	; 243
    fbce:	7b e0       	ldi	r23, 0x0B	; 11
    fbd0:	84 e0       	ldi	r24, 0x04	; 4
    fbd2:	94 e2       	ldi	r25, 0x24	; 36
    fbd4:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <_ZN5Print7printlnEPK19__FlashStringHelper>
        Serial.print(F("to: "));
    fbd8:	6e ee       	ldi	r22, 0xEE	; 238
    fbda:	7b e0       	ldi	r23, 0x0B	; 11
    fbdc:	84 e0       	ldi	r24, 0x04	; 4
    fbde:	94 e2       	ldi	r25, 0x24	; 36
    fbe0:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
        Serial.println(to);
    fbe4:	4a e0       	ldi	r20, 0x0A	; 10
    fbe6:	50 e0       	ldi	r21, 0x00	; 0
    fbe8:	b6 01       	movw	r22, r12
    fbea:	84 e0       	ldi	r24, 0x04	; 4
    fbec:	94 e2       	ldi	r25, 0x24	; 36
    fbee:	0e 94 96 10 	call	0x212c	; 0x212c <_ZN5Print7printlnEji>
        Serial.print(F("id: "));
    fbf2:	69 ee       	ldi	r22, 0xE9	; 233
    fbf4:	7b e0       	ldi	r23, 0x0B	; 11
    fbf6:	84 e0       	ldi	r24, 0x04	; 4
    fbf8:	94 e2       	ldi	r25, 0x24	; 36
    fbfa:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
        Serial.println(id);
    fbfe:	2a e0       	ldi	r18, 0x0A	; 10
    fc00:	30 e0       	ldi	r19, 0x00	; 0
    fc02:	b3 01       	movw	r22, r6
    fc04:	a2 01       	movw	r20, r4
    fc06:	84 e0       	ldi	r24, 0x04	; 4
    fc08:	94 e2       	ldi	r25, 0x24	; 36
    fc0a:	0e 94 aa 10 	call	0x2154	; 0x2154 <_ZN5Print7printlnEmi>
        Serial.print(F("command: "));
    fc0e:	6f ed       	ldi	r22, 0xDF	; 223
    fc10:	7b e0       	ldi	r23, 0x0B	; 11
    fc12:	84 e0       	ldi	r24, 0x04	; 4
    fc14:	94 e2       	ldi	r25, 0x24	; 36
    fc16:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
        Serial.println(command);
    fc1a:	b4 01       	movw	r22, r8
    fc1c:	84 e0       	ldi	r24, 0x04	; 4
    fc1e:	94 e2       	ldi	r25, 0x24	; 36
    fc20:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <_ZN5Print7printlnEPKc>
    leadCommandChunksAt = 0;
    leadCommandRetries = 0;
    leadCommandChunk();
  }

  free(buffer);
    fc24:	c8 01       	movw	r24, r16
    fc26:	0e 94 c6 b0 	call	0x1618c	; 0x1618c <free>
    fc2a:	0a c0       	rjmp	.+20     	; 0xfc40 <_ZN20PinoccioScoutHandler4loopEv+0x222>

      // Parse JSON up to the first newline
      if (!js0n((const unsigned char*)hqIncoming.c_str(), nl, index, 32)) {
        leadIncoming(hqIncoming.c_str(), nl, index);
      } else {
        if (hqVerboseOutput) {
    fc2c:	80 91 b3 39 	lds	r24, 0x39B3
    fc30:	88 23       	and	r24, r24
    fc32:	31 f0       	breq	.+12     	; 0xfc40 <_ZN20PinoccioScoutHandler4loopEv+0x222>
          Serial.println(F("JSON parse failed"));
    fc34:	6d e1       	ldi	r22, 0x1D	; 29
    fc36:	7c e0       	ldi	r23, 0x0C	; 12
    fc38:	84 e0       	ldi	r24, 0x04	; 4
    fc3a:	94 e2       	ldi	r25, 0x24	; 36
    fc3c:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <_ZN5Print7printlnEPK19__FlashStringHelper>
        }
      }

      // Remove up to and including the newline
      hqIncoming.remove(0, nl + 1);
    fc40:	a5 01       	movw	r20, r10
    fc42:	4f 5f       	subi	r20, 0xFF	; 255
    fc44:	5f 4f       	sbci	r21, 0xFF	; 255
    fc46:	60 e0       	ldi	r22, 0x00	; 0
    fc48:	70 e0       	ldi	r23, 0x00	; 0
    fc4a:	84 e2       	ldi	r24, 0x24	; 36
    fc4c:	99 e3       	ldi	r25, 0x39	; 57
    fc4e:	0e 94 21 1a 	call	0x3442	; 0x3442 <_ZN6String6removeEjj>
    fc52:	27 cf       	rjmp	.-434    	; 0xfaa2 <_ZN20PinoccioScoutHandler4loopEv+0x84>
      free(buffer);
      return;
    }

    // handle internal ones first
    if (to == Scout.getAddress()) {
    fc54:	80 ea       	ldi	r24, 0xA0	; 160
    fc56:	95 e3       	ldi	r25, 0x35	; 53
    fc58:	0e 94 c0 6e 	call	0xdd80	; 0xdd80 <_ZN13PinoccioClass10getAddressEv>
    fc5c:	c8 16       	cp	r12, r24
    fc5e:	d9 06       	cpc	r13, r25
    fc60:	09 f0       	breq	.+2      	; 0xfc64 <_ZN20PinoccioScoutHandler4loopEv+0x246>
    fc62:	41 c0       	rjmp	.+130    	; 0xfce6 <_ZN20PinoccioScoutHandler4loopEv+0x2c8>
      setOutputHandler(&printToString<&leadCommandOutput>);
    fc64:	84 e7       	ldi	r24, 0x74	; 116
    fc66:	95 e7       	ldi	r25, 0x75	; 117
    fc68:	0e 94 90 1e 	call	0x3d20	; 0x3d20 <_Z16setOutputHandlerPFvhE>
      doCommand(command);
    fc6c:	c4 01       	movw	r24, r8
    fc6e:	0e 94 59 35 	call	0x6ab2	; 0x6ab2 <_Z9doCommandPc>
      resetOutputHandler();
    fc72:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <_Z18resetOutputHandlerv>

      StringBuffer report;
    fc76:	41 e0       	ldi	r20, 0x01	; 1
    fc78:	50 e0       	ldi	r21, 0x00	; 0
    fc7a:	60 e0       	ldi	r22, 0x00	; 0
    fc7c:	70 e0       	ldi	r23, 0x00	; 0
    fc7e:	c7 01       	movw	r24, r14
    fc80:	0e 94 8d ab 	call	0x1571a	; 0x1571a <_ZN12StringBufferC1Ejj>
      report.appendSprintf("{\"type\":\"reply\",\"from\":%d,\"id\":%lu,\"end\":true,\"reply\":", to, id);
    fc84:	7f 92       	push	r7
    fc86:	6f 92       	push	r6
    fc88:	5f 92       	push	r5
    fc8a:	4f 92       	push	r4
    fc8c:	df 92       	push	r13
    fc8e:	cf 92       	push	r12
    fc90:	3f 92       	push	r3
    fc92:	2f 92       	push	r2
    fc94:	ff 92       	push	r15
    fc96:	ef 92       	push	r14
    fc98:	0e 94 b2 ab 	call	0x15764	; 0x15764 <_ZN12StringBuffer13appendSprintfEPKcz>

    // Helper methods
    size_t appendSprintf(const char *fmt, ...);
    size_t appendJsonString(const char *in, size_t len, bool add_quotes);
    size_t appendJsonString(const uint8_t *in, size_t len, bool add_quotes) {
      return appendJsonString((const char *)in, len, add_quotes);
    fc9c:	40 91 20 39 	lds	r20, 0x3920
    fca0:	50 91 21 39 	lds	r21, 0x3921
    fca4:	60 91 1c 39 	lds	r22, 0x391C
    fca8:	70 91 1d 39 	lds	r23, 0x391D
    fcac:	21 e0       	ldi	r18, 0x01	; 1
    fcae:	c7 01       	movw	r24, r14
    fcb0:	0e 94 66 ac 	call	0x158cc	; 0x158cc <_ZN12StringBuffer16appendJsonStringEPKcjb>
    fcb4:	6d ea       	ldi	r22, 0xAD	; 173
    fcb6:	79 e1       	ldi	r23, 0x19	; 25
    fcb8:	c7 01       	movw	r24, r14
    fcba:	0e 94 7d 19 	call	0x32fa	; 0x32fa <_ZN6String6concatEPKc>
      report.appendJsonString(leadCommandOutput, true);
      report += "}\n";
      leadSignal(report);
    fcbe:	c7 01       	movw	r24, r14
    fcc0:	3e d8       	rcall	.-3972   	; 0xed3e <_ZL10leadSignalRK6String>
      leadCommandOutput = (char*)NULL;
    fcc2:	60 e0       	ldi	r22, 0x00	; 0
    fcc4:	70 e0       	ldi	r23, 0x00	; 0
    fcc6:	8c e1       	ldi	r24, 0x1C	; 28
    fcc8:	99 e3       	ldi	r25, 0x39	; 57
    fcca:	0e 94 3a 18 	call	0x3074	; 0x3074 <_ZN6StringaSEPKc>

      free(buffer);
    fcce:	c8 01       	movw	r24, r16
    fcd0:	0e 94 c6 b0 	call	0x1618c	; 0x1618c <free>
/**
 * Extend the Arduino String class with some operations that make using
 * it as buffer for reading input or building output more efficient
 * (e.g,. without copying data).
 */
class StringBuffer : public String {
    fcd4:	c7 01       	movw	r24, r14
    fcd6:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
    fcda:	0f b6       	in	r0, 0x3f	; 63
    fcdc:	f8 94       	cli
    fcde:	de bf       	out	0x3e, r29	; 62
    fce0:	0f be       	out	0x3f, r0	; 63
    fce2:	cd bf       	out	0x3d, r28	; 61
    fce4:	ad cf       	rjmp	.-166    	; 0xfc40 <_ZN20PinoccioScoutHandler4loopEv+0x222>
      return;
    }

    // we can only send one command at a time
    if (leadCommandTo) {
    fce6:	80 91 4d 39 	lds	r24, 0x394D
    fcea:	90 91 4e 39 	lds	r25, 0x394E
    fcee:	89 2b       	or	r24, r25
    fcf0:	49 f0       	breq	.+18     	; 0xfd04 <_ZN20PinoccioScoutHandler4loopEv+0x2e6>
      // TODO we could stop reading the HQ socket in this mode and then never get a busy?
      free(buffer);
    fcf2:	c8 01       	movw	r24, r16
    fcf4:	0e 94 c6 b0 	call	0x1618c	; 0x1618c <free>
      return leadCommandError(to,id,"busy");
    fcf8:	42 e3       	ldi	r20, 0x32	; 50
    fcfa:	5a e1       	ldi	r21, 0x1A	; 26
    fcfc:	b2 01       	movw	r22, r4
    fcfe:	c6 01       	movw	r24, r12
    fd00:	43 de       	rcall	.-890    	; 0xf988 <_Z16leadCommandErroriiPKc>
    fd02:	9e cf       	rjmp	.-196    	; 0xfc40 <_ZN20PinoccioScoutHandler4loopEv+0x222>
    }

    // send over mesh to recipient and cache id for any replies
    leadAnswerID = id;
    fd04:	50 92 2d 39 	sts	0x392D, r5
    fd08:	40 92 2c 39 	sts	0x392C, r4
    leadCommandTo = to;
    fd0c:	d0 92 4e 39 	sts	0x394E, r13
    fd10:	c0 92 4d 39 	sts	0x394D, r12
    leadCommandChunks = command;
    fd14:	b4 01       	movw	r22, r8
    fd16:	85 e4       	ldi	r24, 0x45	; 69
    fd18:	99 e3       	ldi	r25, 0x39	; 57
    fd1a:	0e 94 3a 18 	call	0x3074	; 0x3074 <_ZN6StringaSEPKc>
    leadCommandChunksAt = 0;
    fd1e:	10 92 44 39 	sts	0x3944, r1
    fd22:	10 92 43 39 	sts	0x3943, r1
    leadCommandRetries = 0;
    fd26:	10 92 42 39 	sts	0x3942, r1
    fd2a:	10 92 41 39 	sts	0x3941, r1
    leadCommandChunk();
    fd2e:	0e 94 d9 75 	call	0xebb2	; 0xebb2 <_ZL16leadCommandChunkv>
    fd32:	78 cf       	rjmp	.-272    	; 0xfc24 <_ZN20PinoccioScoutHandler4loopEv+0x206>

void PinoccioScoutHandler::loop() {
  if (Scout.isLeadScout()) {
    leadHQHandle();
  }
}
    fd34:	c8 5b       	subi	r28, 0xB8	; 184
    fd36:	df 4f       	sbci	r29, 0xFF	; 255
    fd38:	0f b6       	in	r0, 0x3f	; 63
    fd3a:	f8 94       	cli
    fd3c:	de bf       	out	0x3e, r29	; 62
    fd3e:	0f be       	out	0x3f, r0	; 63
    fd40:	cd bf       	out	0x3d, r28	; 61
    fd42:	df 91       	pop	r29
    fd44:	cf 91       	pop	r28
    fd46:	1f 91       	pop	r17
    fd48:	0f 91       	pop	r16
    fd4a:	ff 90       	pop	r15
    fd4c:	ef 90       	pop	r14
    fd4e:	df 90       	pop	r13
    fd50:	cf 90       	pop	r12
    fd52:	bf 90       	pop	r11
    fd54:	af 90       	pop	r10
    fd56:	9f 90       	pop	r9
    fd58:	8f 90       	pop	r8
    fd5a:	7f 90       	pop	r7
    fd5c:	6f 90       	pop	r6
    fd5e:	5f 90       	pop	r5
    fd60:	4f 90       	pop	r4
    fd62:	3f 90       	pop	r3
    fd64:	2f 90       	pop	r2
    fd66:	08 95       	ret

0000fd68 <_ZL23leadCommandChunkConfirmP13NWK_DataReq_t>:

  free(buffer);
}

// mesh callback when sending command chunks
static void leadCommandChunkConfirm(NWK_DataReq_t *req) {
    fd68:	cf 93       	push	r28
    fd6a:	df 93       	push	r29
    fd6c:	ec 01       	movw	r28, r24
  if (hqVerboseOutput) {
    fd6e:	80 91 b3 39 	lds	r24, 0x39B3
    fd72:	88 23       	and	r24, r24
    fd74:	31 f0       	breq	.+12     	; 0xfd82 <_ZL23leadCommandChunkConfirmP13NWK_DataReq_t+0x1a>
    Serial.print(F("  Message confirmation - "));
    fd76:	67 eb       	ldi	r22, 0xB7	; 183
    fd78:	7b e0       	ldi	r23, 0x0B	; 11
    fd7a:	84 e0       	ldi	r24, 0x04	; 4
    fd7c:	94 e2       	ldi	r25, 0x24	; 36
    fd7e:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
  }
  if (req->status == NWK_SUCCESS_STATUS) {
    fd82:	99 89       	ldd	r25, Y+17	; 0x11
    fd84:	80 91 b3 39 	lds	r24, 0x39B3
    fd88:	91 11       	cpse	r25, r1
    fd8a:	20 c0       	rjmp	.+64     	; 0xfdcc <_ZL23leadCommandChunkConfirmP13NWK_DataReq_t+0x64>
    if (hqVerboseOutput) {
    fd8c:	88 23       	and	r24, r24
    fd8e:	31 f0       	breq	.+12     	; 0xfd9c <_ZL23leadCommandChunkConfirmP13NWK_DataReq_t+0x34>
      Serial.println(F("success"));
    fd90:	6f ea       	ldi	r22, 0xAF	; 175
    fd92:	7b e0       	ldi	r23, 0x0B	; 11
    fd94:	84 e0       	ldi	r24, 0x04	; 4
    fd96:	94 e2       	ldi	r25, 0x24	; 36
    fd98:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <_ZN5Print7printlnEPK19__FlashStringHelper>
    }
    if (leadCommandChunks.length() - leadCommandChunksAt > 100) {
    fd9c:	20 91 43 39 	lds	r18, 0x3943
    fda0:	30 91 44 39 	lds	r19, 0x3944
    fda4:	80 91 49 39 	lds	r24, 0x3949
    fda8:	90 91 4a 39 	lds	r25, 0x394A
    fdac:	82 1b       	sub	r24, r18
    fdae:	93 0b       	sbc	r25, r19
    fdb0:	85 36       	cpi	r24, 0x65	; 101
    fdb2:	91 05       	cpc	r25, r1
    fdb4:	08 f4       	brcc	.+2      	; 0xfdb8 <_ZL23leadCommandChunkConfirmP13NWK_DataReq_t+0x50>
    fdb6:	3f c0       	rjmp	.+126    	; 0xfe36 <_ZL23leadCommandChunkConfirmP13NWK_DataReq_t+0xce>
      leadCommandChunksAt += 100;
    fdb8:	2c 59       	subi	r18, 0x9C	; 156
    fdba:	3f 4f       	sbci	r19, 0xFF	; 255
    fdbc:	30 93 44 39 	sts	0x3944, r19
    fdc0:	20 93 43 39 	sts	0x3943, r18
      return; // don't free yet
    }
  }
  leadCommandTo = 0;
  leadCommandChunks = (char*)NULL;
}
    fdc4:	df 91       	pop	r29
    fdc6:	cf 91       	pop	r28
    if (hqVerboseOutput) {
      Serial.println(F("success"));
    }
    if (leadCommandChunks.length() - leadCommandChunksAt > 100) {
      leadCommandChunksAt += 100;
      leadCommandChunk();
    fdc8:	0c 94 d9 75 	jmp	0xebb2	; 0xebb2 <_ZL16leadCommandChunkv>
      return; // don't free yet
    }
  } else {
    leadCommandRetries++;
    fdcc:	20 91 41 39 	lds	r18, 0x3941
    fdd0:	30 91 42 39 	lds	r19, 0x3942
    fdd4:	2f 5f       	subi	r18, 0xFF	; 255
    fdd6:	3f 4f       	sbci	r19, 0xFF	; 255
    fdd8:	30 93 42 39 	sts	0x3942, r19
    fddc:	20 93 41 39 	sts	0x3941, r18
    if (leadCommandRetries > 3) {
    fde0:	24 30       	cpi	r18, 0x04	; 4
    fde2:	31 05       	cpc	r19, r1
    fde4:	dc f0       	brlt	.+54     	; 0xfe1c <_ZL23leadCommandChunkConfirmP13NWK_DataReq_t+0xb4>
      if (hqVerboseOutput) {
    fde6:	88 23       	and	r24, r24
    fde8:	69 f0       	breq	.+26     	; 0xfe04 <_ZL23leadCommandChunkConfirmP13NWK_DataReq_t+0x9c>
        Serial.print(F("error: "));
    fdea:	67 ea       	ldi	r22, 0xA7	; 167
    fdec:	7b e0       	ldi	r23, 0x0B	; 11
    fdee:	84 e0       	ldi	r24, 0x04	; 4
    fdf0:	94 e2       	ldi	r25, 0x24	; 36
    fdf2:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
        Serial.println(req->status);
    fdf6:	4a e0       	ldi	r20, 0x0A	; 10
    fdf8:	50 e0       	ldi	r21, 0x00	; 0
    fdfa:	69 89       	ldd	r22, Y+17	; 0x11
    fdfc:	84 e0       	ldi	r24, 0x04	; 4
    fdfe:	94 e2       	ldi	r25, 0x24	; 36
    fe00:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <_ZN5Print7printlnEhi>
      }
      leadCommandError(leadCommandTo, leadAnswerID, "no response");
    fe04:	60 91 2c 39 	lds	r22, 0x392C
    fe08:	70 91 2d 39 	lds	r23, 0x392D
    fe0c:	47 e3       	ldi	r20, 0x37	; 55
    fe0e:	5a e1       	ldi	r21, 0x1A	; 26
    fe10:	80 91 4d 39 	lds	r24, 0x394D
    fe14:	90 91 4e 39 	lds	r25, 0x394E
    fe18:	b7 dd       	rcall	.-1170   	; 0xf988 <_Z16leadCommandErroriiPKc>
    fe1a:	0d c0       	rjmp	.+26     	; 0xfe36 <_ZL23leadCommandChunkConfirmP13NWK_DataReq_t+0xce>
    } else {
      if (hqVerboseOutput) {
    fe1c:	88 23       	and	r24, r24
    fe1e:	31 f0       	breq	.+12     	; 0xfe2c <_ZL23leadCommandChunkConfirmP13NWK_DataReq_t+0xc4>
        Serial.println(F("RETRY"));
    fe20:	61 ea       	ldi	r22, 0xA1	; 161
    fe22:	7b e0       	ldi	r23, 0x0B	; 11
    fe24:	84 e0       	ldi	r24, 0x04	; 4
    fe26:	94 e2       	ldi	r25, 0x24	; 36
    fe28:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <_ZN5Print7printlnEPK19__FlashStringHelper>
      }
      NWK_DataReq(req);
    fe2c:	ce 01       	movw	r24, r28
      return; // don't free yet
    }
  }
  leadCommandTo = 0;
  leadCommandChunks = (char*)NULL;
}
    fe2e:	df 91       	pop	r29
    fe30:	cf 91       	pop	r28
      leadCommandError(leadCommandTo, leadAnswerID, "no response");
    } else {
      if (hqVerboseOutput) {
        Serial.println(F("RETRY"));
      }
      NWK_DataReq(req);
    fe32:	0c 94 d7 4a 	jmp	0x95ae	; 0x95ae <NWK_DataReq>
      return; // don't free yet
    }
  }
  leadCommandTo = 0;
    fe36:	10 92 4e 39 	sts	0x394E, r1
    fe3a:	10 92 4d 39 	sts	0x394D, r1
  leadCommandChunks = (char*)NULL;
    fe3e:	60 e0       	ldi	r22, 0x00	; 0
    fe40:	70 e0       	ldi	r23, 0x00	; 0
    fe42:	85 e4       	ldi	r24, 0x45	; 69
    fe44:	99 e3       	ldi	r25, 0x39	; 57
}
    fe46:	df 91       	pop	r29
    fe48:	cf 91       	pop	r28
      NWK_DataReq(req);
      return; // don't free yet
    }
  }
  leadCommandTo = 0;
  leadCommandChunks = (char*)NULL;
    fe4a:	0c 94 3a 18 	jmp	0x3074	; 0x3074 <_ZN6StringaSEPKc>

0000fe4e <_GLOBAL__sub_I_fieldCommandOutput>:
  buf.appendJsonString(ind->data, ind->size, true);
  buf.appendSprintf(",\"end\":%s}\n",end ? "true" : "false");
  leadSignal(buf);

  return true;
}
    fe4e:	0f 93       	push	r16
    fe50:	00 e0       	ldi	r16, 0x00	; 0
    fe52:	20 e0       	ldi	r18, 0x00	; 0
    fe54:	40 e0       	ldi	r20, 0x00	; 0
    fe56:	60 e0       	ldi	r22, 0x00	; 0
    fe58:	84 eb       	ldi	r24, 0xB4	; 180
    fe5a:	99 e3       	ldi	r25, 0x39	; 57
    fe5c:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <_ZN9IPAddressC1Ehhhh>
                const typeof( ((type *)0)->member ) *__mptr = (ptr); \
                (type *)( (char *)__mptr - offsetof(type,member) );})

static bool hqVerboseOutput;

static StringBuffer fieldCommand(0, 16);
    fe60:	40 e1       	ldi	r20, 0x10	; 16
    fe62:	50 e0       	ldi	r21, 0x00	; 0
    fe64:	60 e0       	ldi	r22, 0x00	; 0
    fe66:	70 e0       	ldi	r23, 0x00	; 0
    fe68:	8b ea       	ldi	r24, 0xAB	; 171
    fe6a:	99 e3       	ldi	r25, 0x39	; 57
    fe6c:	0e 94 8d ab 	call	0x1571a	; 0x1571a <_ZN12StringBufferC1Ejj>
static char *fieldAnswerChunks;
static int fieldAnswerChunksAt;
static int fieldAnswerRetries;
static NWK_DataReq_t fieldAnswerReq;

StringBuffer fieldCommandOutput;
    fe70:	41 e0       	ldi	r20, 0x01	; 1
    fe72:	50 e0       	ldi	r21, 0x00	; 0
    fe74:	60 e0       	ldi	r22, 0x00	; 0
    fe76:	70 e0       	ldi	r23, 0x00	; 0
    fe78:	8a e8       	ldi	r24, 0x8A	; 138
    fe7a:	99 e3       	ldi	r25, 0x39	; 57
    fe7c:	0e 94 8d ab 	call	0x1571a	; 0x1571a <_ZN12StringBufferC1Ejj>
// simple wrapper for the incoming channel announcements up to HQ
static void leadAnnouncementSend(uint16_t chan, uint16_t from, const ConstBuf& message);

// necessities for tracking state when chunking up a large command into mesh requests
static int leadCommandTo = 0;
StringBuffer leadCommandChunks;
    fe80:	41 e0       	ldi	r20, 0x01	; 1
    fe82:	50 e0       	ldi	r21, 0x00	; 0
    fe84:	60 e0       	ldi	r22, 0x00	; 0
    fe86:	70 e0       	ldi	r23, 0x00	; 0
    fe88:	85 e4       	ldi	r24, 0x45	; 69
    fe8a:	99 e3       	ldi	r25, 0x39	; 57
    fe8c:	0e 94 8d ab 	call	0x1571a	; 0x1571a <_ZN12StringBufferC1Ejj>
    }
  }
}

// this is called on the main loop to process incoming data from HQ
static StringBuffer hqIncoming;
    fe90:	41 e0       	ldi	r20, 0x01	; 1
    fe92:	50 e0       	ldi	r21, 0x00	; 0
    fe94:	60 e0       	ldi	r22, 0x00	; 0
    fe96:	70 e0       	ldi	r23, 0x00	; 0
    fe98:	84 e2       	ldi	r24, 0x24	; 36
    fe9a:	99 e3       	ldi	r25, 0x39	; 57
    fe9c:	0e 94 8d ab 	call	0x1571a	; 0x1571a <_ZN12StringBufferC1Ejj>
  StringBuffer err(128);
  err.appendSprintf("{\"type\":\"reply\",\"from\":%d,\"id\":%d,\"err\":true,\"reply\":\"%s\"}\n", from, id, reason);
  leadSignal(err);
}

StringBuffer leadCommandOutput;
    fea0:	41 e0       	ldi	r20, 0x01	; 1
    fea2:	50 e0       	ldi	r21, 0x00	; 0
    fea4:	60 e0       	ldi	r22, 0x00	; 0
    fea6:	70 e0       	ldi	r23, 0x00	; 0
    fea8:	8c e1       	ldi	r24, 0x1C	; 28
    feaa:	99 e3       	ldi	r25, 0x39	; 57
  buf.appendJsonString(ind->data, ind->size, true);
  buf.appendSprintf(",\"end\":%s}\n",end ? "true" : "false");
  leadSignal(buf);

  return true;
}
    feac:	0f 91       	pop	r16
  StringBuffer err(128);
  err.appendSprintf("{\"type\":\"reply\",\"from\":%d,\"id\":%d,\"err\":true,\"reply\":\"%s\"}\n", from, id, reason);
  leadSignal(err);
}

StringBuffer leadCommandOutput;
    feae:	0c 94 8d ab 	jmp	0x1571a	; 0x1571a <_ZN12StringBufferC1Ejj>

0000feb2 <_GLOBAL__sub_D_fieldCommandOutput>:
  buf.appendJsonString(ind->data, ind->size, true);
  buf.appendSprintf(",\"end\":%s}\n",end ? "true" : "false");
  leadSignal(buf);

  return true;
}
    feb2:	e3 c8       	rjmp	.-3642   	; 0xf07a <_Z41__static_initialization_and_destruction_0ii.part.6>

0000feb4 <_ZL9goToSleepv>:
    }
  }
}

void PinoccioShell::disableShell() {
  isShellEnabled = false;
    feb4:	61 e0       	ldi	r22, 0x01	; 1
    feb6:	70 e0       	ldi	r23, 0x00	; 0
    feb8:	80 e0       	ldi	r24, 0x00	; 0
    feba:	90 e0       	ldi	r25, 0x00	; 0
    febc:	08 95       	ret

0000febe <_ZL10meshSignalv>:
    febe:	60 91 eb 39 	lds	r22, 0x39EB
    fec2:	70 91 ec 39 	lds	r23, 0x39EC
    fec6:	71 95       	neg	r23
    fec8:	61 95       	neg	r22
    feca:	71 09       	sbc	r23, r1
    fecc:	88 27       	eor	r24, r24
    fece:	77 fd       	sbrc	r23, 7
    fed0:	80 95       	com	r24
    fed2:	98 2f       	mov	r25, r24
    fed4:	08 95       	ret

0000fed6 <_ZL8meshLossv>:
    fed6:	60 91 e9 39 	lds	r22, 0x39E9
    feda:	70 91 ea 39 	lds	r23, 0x39EA
    fede:	88 27       	eor	r24, r24
    fee0:	77 fd       	sbrc	r23, 7
    fee2:	80 95       	com	r24
    fee4:	98 2f       	mov	r25, r24
    fee6:	08 95       	ret

0000fee8 <_ZL12pinConstHighv>:
    fee8:	61 e0       	ldi	r22, 0x01	; 1
    feea:	70 e0       	ldi	r23, 0x00	; 0
    feec:	80 e0       	ldi	r24, 0x00	; 0
    feee:	90 e0       	ldi	r25, 0x00	; 0
    fef0:	08 95       	ret

0000fef2 <_ZL11pinConstLowv>:
    fef2:	60 e0       	ldi	r22, 0x00	; 0
    fef4:	70 e0       	ldi	r23, 0x00	; 0
    fef6:	cb 01       	movw	r24, r22
    fef8:	08 95       	ret

0000fefa <_ZL13pinConstInputv>:
    fefa:	60 e0       	ldi	r22, 0x00	; 0
    fefc:	70 e0       	ldi	r23, 0x00	; 0
    fefe:	cb 01       	movw	r24, r22
    ff00:	08 95       	ret

0000ff02 <_ZL14pinConstOutputv>:
    ff02:	61 e0       	ldi	r22, 0x01	; 1
    ff04:	70 e0       	ldi	r23, 0x00	; 0
    ff06:	80 e0       	ldi	r24, 0x00	; 0
    ff08:	90 e0       	ldi	r25, 0x00	; 0
    ff0a:	08 95       	ret

0000ff0c <_ZL19pinConstInputPullupv>:
    ff0c:	62 e0       	ldi	r22, 0x02	; 2
    ff0e:	70 e0       	ldi	r23, 0x00	; 0
    ff10:	80 e0       	ldi	r24, 0x00	; 0
    ff12:	90 e0       	ldi	r25, 0x00	; 0
    ff14:	08 95       	ret

0000ff16 <_ZL4bootv>:
    ff16:	f8 94       	cli
    ff18:	28 e0       	ldi	r18, 0x08	; 8
    ff1a:	88 e1       	ldi	r24, 0x18	; 24
    ff1c:	90 e0       	ldi	r25, 0x00	; 0
    ff1e:	0f b6       	in	r0, 0x3f	; 63
    ff20:	f8 94       	cli
    ff22:	a8 95       	wdr
    ff24:	80 93 60 00 	sts	0x0060, r24
    ff28:	0f be       	out	0x3f, r0	; 63
    ff2a:	20 93 60 00 	sts	0x0060, r18
    ff2e:	ff cf       	rjmp	.-2      	; 0xff2e <_ZL4bootv+0x18>

0000ff30 <_ZL11wifiVerbosev>:
    ff30:	61 e0       	ldi	r22, 0x01	; 1
    ff32:	70 e0       	ldi	r23, 0x00	; 0
    ff34:	80 e0       	ldi	r24, 0x00	; 0
    ff36:	90 e0       	ldi	r25, 0x00	; 0
    ff38:	08 95       	ret

0000ff3a <_ZL16isScoutLeadScoutv>:
    ff3a:	80 ea       	ldi	r24, 0xA0	; 160
    ff3c:	95 e3       	ldi	r25, 0x35	; 53
    ff3e:	0e 94 b5 70 	call	0xe16a	; 0xe16a <_ZN13PinoccioScout11isLeadScoutEv>
    ff42:	68 2f       	mov	r22, r24
    ff44:	70 e0       	ldi	r23, 0x00	; 0
    ff46:	80 e0       	ldi	r24, 0x00	; 0
    ff48:	90 e0       	ldi	r25, 0x00	; 0
    ff4a:	08 95       	ret

0000ff4c <_ZL14receiveMessageP13NWK_DataInd_t>:
    ff4c:	8f 92       	push	r8
    ff4e:	9f 92       	push	r9
    ff50:	af 92       	push	r10
    ff52:	bf 92       	push	r11
    ff54:	cf 92       	push	r12
    ff56:	df 92       	push	r13
    ff58:	ef 92       	push	r14
    ff5a:	ff 92       	push	r15
    ff5c:	0f 93       	push	r16
    ff5e:	1f 93       	push	r17
    ff60:	cf 93       	push	r28
    ff62:	df 93       	push	r29
    ff64:	cd b7       	in	r28, 0x3d	; 61
    ff66:	de b7       	in	r29, 0x3e	; 62
    ff68:	c4 55       	subi	r28, 0x54	; 84
    ff6a:	d1 09       	sbc	r29, r1
    ff6c:	0f b6       	in	r0, 0x3f	; 63
    ff6e:	f8 94       	cli
    ff70:	de bf       	out	0x3e, r29	; 62
    ff72:	0f be       	out	0x3f, r0	; 63
    ff74:	cd bf       	out	0x3d, r28	; 61
    ff76:	7c 01       	movw	r14, r24
    ff78:	fc 01       	movw	r30, r24
    ff7a:	07 81       	ldd	r16, Z+7	; 0x07
    ff7c:	10 85       	ldd	r17, Z+8	; 0x08
    ff7e:	80 91 ed 39 	lds	r24, 0x39ED
    ff82:	88 23       	and	r24, r24
    ff84:	f1 f1       	breq	.+124    	; 0x10002 <_ZL14receiveMessageP13NWK_DataInd_t+0xb6>
    ff86:	67 e1       	ldi	r22, 0x17	; 23
    ff88:	77 e1       	ldi	r23, 0x17	; 23
    ff8a:	84 e0       	ldi	r24, 0x04	; 4
    ff8c:	94 e2       	ldi	r25, 0x24	; 36
    ff8e:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
    ff92:	b8 01       	movw	r22, r16
    ff94:	84 e0       	ldi	r24, 0x04	; 4
    ff96:	94 e2       	ldi	r25, 0x24	; 36
    ff98:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_ZN5Print5printEPKc>
    ff9c:	60 e1       	ldi	r22, 0x10	; 16
    ff9e:	77 e1       	ldi	r23, 0x17	; 23
    ffa0:	84 e0       	ldi	r24, 0x04	; 4
    ffa2:	94 e2       	ldi	r25, 0x24	; 36
    ffa4:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
    ffa8:	f7 01       	movw	r30, r14
    ffaa:	60 81       	ld	r22, Z
    ffac:	71 81       	ldd	r23, Z+1	; 0x01
    ffae:	4a e0       	ldi	r20, 0x0A	; 10
    ffb0:	50 e0       	ldi	r21, 0x00	; 0
    ffb2:	84 e0       	ldi	r24, 0x04	; 4
    ffb4:	94 e2       	ldi	r25, 0x24	; 36
    ffb6:	0e 94 91 10 	call	0x2122	; 0x2122 <_ZN5Print5printEji>
    ffba:	6a e0       	ldi	r22, 0x0A	; 10
    ffbc:	77 e1       	ldi	r23, 0x17	; 23
    ffbe:	84 e0       	ldi	r24, 0x04	; 4
    ffc0:	94 e2       	ldi	r25, 0x24	; 36
    ffc2:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
    ffc6:	4a e0       	ldi	r20, 0x0A	; 10
    ffc8:	50 e0       	ldi	r21, 0x00	; 0
    ffca:	f7 01       	movw	r30, r14
    ffcc:	62 85       	ldd	r22, Z+10	; 0x0a
    ffce:	84 e0       	ldi	r24, 0x04	; 4
    ffd0:	94 e2       	ldi	r25, 0x24	; 36
    ffd2:	0e 94 76 10 	call	0x20ec	; 0x20ec <_ZN5Print5printEhi>
    ffd6:	63 e0       	ldi	r22, 0x03	; 3
    ffd8:	77 e1       	ldi	r23, 0x17	; 23
    ffda:	84 e0       	ldi	r24, 0x04	; 4
    ffdc:	94 e2       	ldi	r25, 0x24	; 36
    ffde:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
    ffe2:	f7 01       	movw	r30, r14
    ffe4:	63 85       	ldd	r22, Z+11	; 0x0b
    ffe6:	77 27       	eor	r23, r23
    ffe8:	67 fd       	sbrc	r22, 7
    ffea:	70 95       	com	r23
    ffec:	77 ff       	sbrs	r23, 7
    ffee:	03 c0       	rjmp	.+6      	; 0xfff6 <_ZL14receiveMessageP13NWK_DataInd_t+0xaa>
    fff0:	71 95       	neg	r23
    fff2:	61 95       	neg	r22
    fff4:	71 09       	sbc	r23, r1
    fff6:	4a e0       	ldi	r20, 0x0A	; 10
    fff8:	50 e0       	ldi	r21, 0x00	; 0
    fffa:	84 e0       	ldi	r24, 0x04	; 4
    fffc:	94 e2       	ldi	r25, 0x24	; 36
    fffe:	0e 94 54 10 	call	0x20a8	; 0x20a8 <_ZN5Print7printlnEii>
   10002:	f7 01       	movw	r30, r14
   10004:	23 85       	ldd	r18, Z+11	; 0x0b
   10006:	33 27       	eor	r19, r19
   10008:	27 fd       	sbrc	r18, 7
   1000a:	30 95       	com	r19
   1000c:	37 ff       	sbrs	r19, 7
   1000e:	03 c0       	rjmp	.+6      	; 0x10016 <_ZL14receiveMessageP13NWK_DataInd_t+0xca>
   10010:	31 95       	neg	r19
   10012:	21 95       	neg	r18
   10014:	31 09       	sbc	r19, r1
   10016:	20 93 eb 39 	sts	0x39EB, r18
   1001a:	30 93 ec 39 	sts	0x39EC, r19
   1001e:	f7 01       	movw	r30, r14
   10020:	82 85       	ldd	r24, Z+10	; 0x0a
   10022:	90 e0       	ldi	r25, 0x00	; 0
   10024:	90 93 ea 39 	sts	0x39EA, r25
   10028:	80 93 e9 39 	sts	0x39E9, r24
   1002c:	82 2f       	mov	r24, r18
   1002e:	0e 94 a2 51 	call	0xa344	; 0xa344 <NWK_SetAckControl>
   10032:	f8 01       	movw	r30, r16
   10034:	01 90       	ld	r0, Z+
   10036:	00 20       	and	r0, r0
   10038:	e9 f7       	brne	.-6      	; 0x10034 <_ZL14receiveMessageP13NWK_DataInd_t+0xe8>
   1003a:	31 97       	sbiw	r30, 0x01	; 1
   1003c:	e0 1b       	sub	r30, r16
   1003e:	f1 0b       	sbc	r31, r17
   10040:	33 97       	sbiw	r30, 0x03	; 3
   10042:	08 f4       	brcc	.+2      	; 0x10046 <_ZL14receiveMessageP13NWK_DataInd_t+0xfa>
   10044:	91 c0       	rjmp	.+290    	; 0x10168 <_ZL14receiveMessageP13NWK_DataInd_t+0x21c>
   10046:	f8 01       	movw	r30, r16
   10048:	80 81       	ld	r24, Z
   1004a:	8b 35       	cpi	r24, 0x5B	; 91
   1004c:	09 f0       	breq	.+2      	; 0x10050 <_ZL14receiveMessageP13NWK_DataInd_t+0x104>
   1004e:	8c c0       	rjmp	.+280    	; 0x10168 <_ZL14receiveMessageP13NWK_DataInd_t+0x21c>
   10050:	0e 94 16 14 	call	0x282c	; 0x282c <millis>
   10054:	9b 01       	movw	r18, r22
   10056:	ac 01       	movw	r20, r24
   10058:	be 01       	movw	r22, r28
   1005a:	6f 5b       	subi	r22, 0xBF	; 191
   1005c:	7f 4f       	sbci	r23, 0xFF	; 255
   1005e:	c8 01       	movw	r24, r16
   10060:	0e 94 07 69 	call	0xd20e	; 0xd20e <keyLoad>
   10064:	63 e4       	ldi	r22, 0x43	; 67
   10066:	7a e1       	ldi	r23, 0x1A	; 26
   10068:	8e 01       	movw	r16, r28
   1006a:	0f 5f       	subi	r16, 0xFF	; 255
   1006c:	1f 4f       	sbci	r17, 0xFF	; 255
   1006e:	c8 01       	movw	r24, r16
   10070:	0e 94 77 b5 	call	0x16aee	; 0x16aee <strcpy>
   10074:	c8 01       	movw	r24, r16
   10076:	0e 94 0d 29 	call	0x521a	; 0x521a <_Z10findscriptPc>
   1007a:	88 23       	and	r24, r24
   1007c:	09 f4       	brne	.+2      	; 0x10080 <_ZL14receiveMessageP13NWK_DataInd_t+0x134>
   1007e:	76 c0       	rjmp	.+236    	; 0x1016c <_ZL14receiveMessageP13NWK_DataInd_t+0x220>
   10080:	f7 01       	movw	r30, r14
   10082:	81 81       	ldd	r24, Z+1	; 0x01
   10084:	8f 93       	push	r24
   10086:	80 81       	ld	r24, Z
   10088:	8f 93       	push	r24
   1008a:	81 e5       	ldi	r24, 0x51	; 81
   1008c:	9a e1       	ldi	r25, 0x1A	; 26
   1008e:	9f 93       	push	r25
   10090:	8f 93       	push	r24
   10092:	1f 92       	push	r1
   10094:	80 e4       	ldi	r24, 0x40	; 64
   10096:	8f 93       	push	r24
   10098:	1f 93       	push	r17
   1009a:	0f 93       	push	r16
   1009c:	0e 94 1d b6 	call	0x16c3a	; 0x16c3a <snprintf>
   100a0:	81 e4       	ldi	r24, 0x41	; 65
   100a2:	e8 2e       	mov	r14, r24
   100a4:	f1 2c       	mov	r15, r1
   100a6:	ec 0e       	add	r14, r28
   100a8:	fd 1e       	adc	r15, r29
   100aa:	f4 e0       	ldi	r31, 0x04	; 4
   100ac:	ef 0e       	add	r14, r31
   100ae:	f1 1c       	adc	r15, r1
   100b0:	0f b6       	in	r0, 0x3f	; 63
   100b2:	f8 94       	cli
   100b4:	de bf       	out	0x3e, r29	; 62
   100b6:	0f be       	out	0x3f, r0	; 63
   100b8:	cd bf       	out	0x3d, r28	; 61
   100ba:	92 e0       	ldi	r25, 0x02	; 2
   100bc:	c9 2e       	mov	r12, r25
   100be:	d1 2c       	mov	r13, r1
   100c0:	26 e3       	ldi	r18, 0x36	; 54
   100c2:	a2 2e       	mov	r10, r18
   100c4:	20 e1       	ldi	r18, 0x10	; 16
   100c6:	b2 2e       	mov	r11, r18
   100c8:	30 e4       	ldi	r19, 0x40	; 64
   100ca:	83 2e       	mov	r8, r19
   100cc:	91 2c       	mov	r9, r1
   100ce:	23 96       	adiw	r28, 0x03	; 3
   100d0:	8e ad       	ldd	r24, Y+62	; 0x3e
   100d2:	9f ad       	ldd	r25, Y+63	; 0x3f
   100d4:	23 97       	sbiw	r28, 0x03	; 3
   100d6:	8c 15       	cp	r24, r12
   100d8:	9d 05       	cpc	r25, r13
   100da:	2c f1       	brlt	.+74     	; 0x10126 <_ZL14receiveMessageP13NWK_DataInd_t+0x1da>
   100dc:	f7 01       	movw	r30, r14
   100de:	80 81       	ld	r24, Z
   100e0:	91 81       	ldd	r25, Z+1	; 0x01
   100e2:	f2 e0       	ldi	r31, 0x02	; 2
   100e4:	ef 0e       	add	r14, r31
   100e6:	f1 1c       	adc	r15, r1
   100e8:	f8 01       	movw	r30, r16
   100ea:	01 90       	ld	r0, Z+
   100ec:	00 20       	and	r0, r0
   100ee:	e9 f7       	brne	.-6      	; 0x100ea <_ZL14receiveMessageP13NWK_DataInd_t+0x19e>
   100f0:	31 97       	sbiw	r30, 0x01	; 1
   100f2:	e0 1b       	sub	r30, r16
   100f4:	f1 0b       	sbc	r31, r17
   100f6:	9f 93       	push	r25
   100f8:	8f 93       	push	r24
   100fa:	bf 92       	push	r11
   100fc:	af 92       	push	r10
   100fe:	c4 01       	movw	r24, r8
   10100:	8e 1b       	sub	r24, r30
   10102:	9f 0b       	sbc	r25, r31
   10104:	9f 93       	push	r25
   10106:	8f 93       	push	r24
   10108:	e0 0f       	add	r30, r16
   1010a:	f1 1f       	adc	r31, r17
   1010c:	ff 93       	push	r31
   1010e:	ef 93       	push	r30
   10110:	0e 94 1d b6 	call	0x16c3a	; 0x16c3a <snprintf>
   10114:	2f ef       	ldi	r18, 0xFF	; 255
   10116:	c2 1a       	sub	r12, r18
   10118:	d2 0a       	sbc	r13, r18
   1011a:	0f b6       	in	r0, 0x3f	; 63
   1011c:	f8 94       	cli
   1011e:	de bf       	out	0x3e, r29	; 62
   10120:	0f be       	out	0x3f, r0	; 63
   10122:	cd bf       	out	0x3d, r28	; 61
   10124:	d4 cf       	rjmp	.-88     	; 0x100ce <_ZL14receiveMessageP13NWK_DataInd_t+0x182>
   10126:	f8 01       	movw	r30, r16
   10128:	01 90       	ld	r0, Z+
   1012a:	00 20       	and	r0, r0
   1012c:	e9 f7       	brne	.-6      	; 0x10128 <_ZL14receiveMessageP13NWK_DataInd_t+0x1dc>
   1012e:	31 97       	sbiw	r30, 0x01	; 1
   10130:	e0 1b       	sub	r30, r16
   10132:	f1 0b       	sbc	r31, r17
   10134:	85 e6       	ldi	r24, 0x65	; 101
   10136:	9d e1       	ldi	r25, 0x1D	; 29
   10138:	9f 93       	push	r25
   1013a:	8f 93       	push	r24
   1013c:	80 e4       	ldi	r24, 0x40	; 64
   1013e:	90 e0       	ldi	r25, 0x00	; 0
   10140:	8e 1b       	sub	r24, r30
   10142:	9f 0b       	sbc	r25, r31
   10144:	9f 93       	push	r25
   10146:	8f 93       	push	r24
   10148:	e0 0f       	add	r30, r16
   1014a:	f1 1f       	adc	r31, r17
   1014c:	ff 93       	push	r31
   1014e:	ef 93       	push	r30
   10150:	0e 94 1d b6 	call	0x16c3a	; 0x16c3a <snprintf>
   10154:	c8 01       	movw	r24, r16
   10156:	0e 94 59 35 	call	0x6ab2	; 0x6ab2 <_Z9doCommandPc>
   1015a:	0f 90       	pop	r0
   1015c:	0f 90       	pop	r0
   1015e:	0f 90       	pop	r0
   10160:	0f 90       	pop	r0
   10162:	0f 90       	pop	r0
   10164:	0f 90       	pop	r0
   10166:	02 c0       	rjmp	.+4      	; 0x1016c <_ZL14receiveMessageP13NWK_DataInd_t+0x220>
   10168:	80 e0       	ldi	r24, 0x00	; 0
   1016a:	01 c0       	rjmp	.+2      	; 0x1016e <_ZL14receiveMessageP13NWK_DataInd_t+0x222>
   1016c:	81 e0       	ldi	r24, 0x01	; 1
   1016e:	cc 5a       	subi	r28, 0xAC	; 172
   10170:	df 4f       	sbci	r29, 0xFF	; 255
   10172:	0f b6       	in	r0, 0x3f	; 63
   10174:	f8 94       	cli
   10176:	de bf       	out	0x3e, r29	; 62
   10178:	0f be       	out	0x3f, r0	; 63
   1017a:	cd bf       	out	0x3d, r28	; 61
   1017c:	df 91       	pop	r29
   1017e:	cf 91       	pop	r28
   10180:	1f 91       	pop	r17
   10182:	0f 91       	pop	r16
   10184:	ff 90       	pop	r15
   10186:	ef 90       	pop	r14
   10188:	df 90       	pop	r13
   1018a:	cf 90       	pop	r12
   1018c:	bf 90       	pop	r11
   1018e:	af 90       	pop	r10
   10190:	9f 90       	pop	r9
   10192:	8f 90       	pop	r8
   10194:	08 95       	ret

00010196 <_ZL9ledGetHexv>:
   10196:	ef 92       	push	r14
   10198:	ff 92       	push	r15
   1019a:	0f 93       	push	r16
   1019c:	1f 93       	push	r17
   1019e:	cf 93       	push	r28
   101a0:	df 93       	push	r29
   101a2:	cd b7       	in	r28, 0x3d	; 61
   101a4:	de b7       	in	r29, 0x3e	; 62
   101a6:	28 97       	sbiw	r28, 0x08	; 8
   101a8:	0f b6       	in	r0, 0x3f	; 63
   101aa:	f8 94       	cli
   101ac:	de bf       	out	0x3e, r29	; 62
   101ae:	0f be       	out	0x3f, r0	; 63
   101b0:	cd bf       	out	0x3d, r28	; 61
   101b2:	88 e7       	ldi	r24, 0x78	; 120
   101b4:	95 e3       	ldi	r25, 0x35	; 53
   101b6:	0e 94 08 6a 	call	0xd410	; 0xd410 <_ZN9HalRgbLed12getBlueValueEv>
   101ba:	f8 2e       	mov	r15, r24
   101bc:	e9 2e       	mov	r14, r25
   101be:	88 e7       	ldi	r24, 0x78	; 120
   101c0:	95 e3       	ldi	r25, 0x35	; 53
   101c2:	0e 94 04 6a 	call	0xd408	; 0xd408 <_ZN9HalRgbLed13getGreenValueEv>
   101c6:	18 2f       	mov	r17, r24
   101c8:	09 2f       	mov	r16, r25
   101ca:	88 e7       	ldi	r24, 0x78	; 120
   101cc:	95 e3       	ldi	r25, 0x35	; 53
   101ce:	0e 94 00 6a 	call	0xd400	; 0xd400 <_ZN9HalRgbLed11getRedValueEv>
   101d2:	ef 92       	push	r14
   101d4:	ff 92       	push	r15
   101d6:	0f 93       	push	r16
   101d8:	1f 93       	push	r17
   101da:	9f 93       	push	r25
   101dc:	8f 93       	push	r24
   101de:	82 e6       	ldi	r24, 0x62	; 98
   101e0:	9a e1       	ldi	r25, 0x1A	; 26
   101e2:	9f 93       	push	r25
   101e4:	8f 93       	push	r24
   101e6:	1f 92       	push	r1
   101e8:	88 e0       	ldi	r24, 0x08	; 8
   101ea:	8f 93       	push	r24
   101ec:	8e 01       	movw	r16, r28
   101ee:	0f 5f       	subi	r16, 0xFF	; 255
   101f0:	1f 4f       	sbci	r17, 0xFF	; 255
   101f2:	1f 93       	push	r17
   101f4:	0f 93       	push	r16
   101f6:	0e 94 1d b6 	call	0x16c3a	; 0x16c3a <snprintf>
   101fa:	0e 94 16 14 	call	0x282c	; 0x282c <millis>
   101fe:	ab 01       	movw	r20, r22
   10200:	bc 01       	movw	r22, r24
   10202:	c8 01       	movw	r24, r16
   10204:	0e 94 2c 68 	call	0xd058	; 0xd058 <keyMap>
   10208:	bc 01       	movw	r22, r24
   1020a:	88 27       	eor	r24, r24
   1020c:	77 fd       	sbrc	r23, 7
   1020e:	80 95       	com	r24
   10210:	98 2f       	mov	r25, r24
   10212:	0f b6       	in	r0, 0x3f	; 63
   10214:	f8 94       	cli
   10216:	de bf       	out	0x3e, r29	; 62
   10218:	0f be       	out	0x3f, r0	; 63
   1021a:	cd bf       	out	0x3d, r28	; 61
   1021c:	28 96       	adiw	r28, 0x08	; 8
   1021e:	0f b6       	in	r0, 0x3f	; 63
   10220:	f8 94       	cli
   10222:	de bf       	out	0x3e, r29	; 62
   10224:	0f be       	out	0x3f, r0	; 63
   10226:	cd bf       	out	0x3d, r28	; 61
   10228:	df 91       	pop	r29
   1022a:	cf 91       	pop	r28
   1022c:	1f 91       	pop	r17
   1022e:	0f 91       	pop	r16
   10230:	ff 90       	pop	r15
   10232:	ef 90       	pop	r14
   10234:	08 95       	ret

00010236 <_ZL11ledReportHQv>:
   10236:	2f 92       	push	r2
   10238:	3f 92       	push	r3
   1023a:	4f 92       	push	r4
   1023c:	5f 92       	push	r5
   1023e:	6f 92       	push	r6
   10240:	7f 92       	push	r7
   10242:	8f 92       	push	r8
   10244:	9f 92       	push	r9
   10246:	af 92       	push	r10
   10248:	bf 92       	push	r11
   1024a:	cf 92       	push	r12
   1024c:	df 92       	push	r13
   1024e:	ef 92       	push	r14
   10250:	ff 92       	push	r15
   10252:	0f 93       	push	r16
   10254:	1f 93       	push	r17
   10256:	cf 93       	push	r28
   10258:	df 93       	push	r29
   1025a:	cd b7       	in	r28, 0x3d	; 61
   1025c:	de b7       	in	r29, 0x3e	; 62
   1025e:	2c 97       	sbiw	r28, 0x0c	; 12
   10260:	0f b6       	in	r0, 0x3f	; 63
   10262:	f8 94       	cli
   10264:	de bf       	out	0x3e, r29	; 62
   10266:	0f be       	out	0x3f, r0	; 63
   10268:	cd bf       	out	0x3d, r28	; 61
   1026a:	7c 01       	movw	r14, r24
   1026c:	41 e0       	ldi	r20, 0x01	; 1
   1026e:	50 e0       	ldi	r21, 0x00	; 0
   10270:	64 e6       	ldi	r22, 0x64	; 100
   10272:	70 e0       	ldi	r23, 0x00	; 0
   10274:	8e 01       	movw	r16, r28
   10276:	0f 5f       	subi	r16, 0xFF	; 255
   10278:	1f 4f       	sbci	r17, 0xFF	; 255
   1027a:	c8 01       	movw	r24, r16
   1027c:	0e 94 8d ab 	call	0x1571a	; 0x1571a <_ZN12StringBufferC1Ejj>
   10280:	88 e7       	ldi	r24, 0x78	; 120
   10282:	95 e3       	ldi	r25, 0x35	; 53
   10284:	0e 94 48 6a 	call	0xd490	; 0xd490 <_ZN9HalRgbLed17getBlueTorchValueEv>
   10288:	9c 01       	movw	r18, r24
   1028a:	88 e7       	ldi	r24, 0x78	; 120
   1028c:	95 e3       	ldi	r25, 0x35	; 53
   1028e:	2b 87       	std	Y+11, r18	; 0x0b
   10290:	3c 87       	std	Y+12, r19	; 0x0c
   10292:	0e 94 44 6a 	call	0xd488	; 0xd488 <_ZN9HalRgbLed18getGreenTorchValueEv>
   10296:	38 2e       	mov	r3, r24
   10298:	29 2e       	mov	r2, r25
   1029a:	88 e7       	ldi	r24, 0x78	; 120
   1029c:	95 e3       	ldi	r25, 0x35	; 53
   1029e:	0e 94 40 6a 	call	0xd480	; 0xd480 <_ZN9HalRgbLed16getRedTorchValueEv>
   102a2:	58 2e       	mov	r5, r24
   102a4:	49 2e       	mov	r4, r25
   102a6:	88 e7       	ldi	r24, 0x78	; 120
   102a8:	95 e3       	ldi	r25, 0x35	; 53
   102aa:	0e 94 08 6a 	call	0xd410	; 0xd410 <_ZN9HalRgbLed12getBlueValueEv>
   102ae:	78 2e       	mov	r7, r24
   102b0:	69 2e       	mov	r6, r25
   102b2:	88 e7       	ldi	r24, 0x78	; 120
   102b4:	95 e3       	ldi	r25, 0x35	; 53
   102b6:	0e 94 04 6a 	call	0xd408	; 0xd408 <_ZN9HalRgbLed13getGreenValueEv>
   102ba:	98 2e       	mov	r9, r24
   102bc:	89 2e       	mov	r8, r25
   102be:	88 e7       	ldi	r24, 0x78	; 120
   102c0:	95 e3       	ldi	r25, 0x35	; 53
   102c2:	0e 94 00 6a 	call	0xd400	; 0xd400 <_ZN9HalRgbLed11getRedValueEv>
   102c6:	b8 2e       	mov	r11, r24
   102c8:	a9 2e       	mov	r10, r25
   102ca:	40 e0       	ldi	r20, 0x00	; 0
   102cc:	50 e0       	ldi	r21, 0x00	; 0
   102ce:	ba 01       	movw	r22, r20
   102d0:	8a eb       	ldi	r24, 0xBA	; 186
   102d2:	90 e2       	ldi	r25, 0x20	; 32
   102d4:	0e 94 2c 68 	call	0xd058	; 0xd058 <keyMap>
   102d8:	d8 2e       	mov	r13, r24
   102da:	c9 2e       	mov	r12, r25
   102dc:	40 e0       	ldi	r20, 0x00	; 0
   102de:	50 e0       	ldi	r21, 0x00	; 0
   102e0:	ba 01       	movw	r22, r20
   102e2:	86 ec       	ldi	r24, 0xC6	; 198
   102e4:	98 e1       	ldi	r25, 0x18	; 24
   102e6:	0e 94 2c 68 	call	0xd058	; 0xd058 <keyMap>
   102ea:	89 87       	std	Y+9, r24	; 0x09
   102ec:	9a 87       	std	Y+10, r25	; 0x0a
   102ee:	40 e0       	ldi	r20, 0x00	; 0
   102f0:	50 e0       	ldi	r21, 0x00	; 0
   102f2:	ba 01       	movw	r22, r20
   102f4:	86 ec       	ldi	r24, 0xC6	; 198
   102f6:	98 e1       	ldi	r25, 0x18	; 24
   102f8:	0e 94 2c 68 	call	0xd058	; 0xd058 <keyMap>
   102fc:	3c 85       	ldd	r19, Y+12	; 0x0c
   102fe:	3f 93       	push	r19
   10300:	2b 85       	ldd	r18, Y+11	; 0x0b
   10302:	2f 93       	push	r18
   10304:	2f 92       	push	r2
   10306:	3f 92       	push	r3
   10308:	4f 92       	push	r4
   1030a:	5f 92       	push	r5
   1030c:	6f 92       	push	r6
   1030e:	7f 92       	push	r7
   10310:	8f 92       	push	r8
   10312:	9f 92       	push	r9
   10314:	af 92       	push	r10
   10316:	bf 92       	push	r11
   10318:	cf 92       	push	r12
   1031a:	df 92       	push	r13
   1031c:	2a 85       	ldd	r18, Y+10	; 0x0a
   1031e:	2f 93       	push	r18
   10320:	29 85       	ldd	r18, Y+9	; 0x09
   10322:	2f 93       	push	r18
   10324:	9f 93       	push	r25
   10326:	8f 93       	push	r24
   10328:	8f e6       	ldi	r24, 0x6F	; 111
   1032a:	9a e1       	ldi	r25, 0x1A	; 26
   1032c:	9f 93       	push	r25
   1032e:	8f 93       	push	r24
   10330:	1f 93       	push	r17
   10332:	0f 93       	push	r16
   10334:	0e 94 b2 ab 	call	0x15764	; 0x15764 <_ZN12StringBuffer13appendSprintfEPKcz>
   10338:	a8 01       	movw	r20, r16
   1033a:	6b ee       	ldi	r22, 0xEB	; 235
   1033c:	78 e3       	ldi	r23, 0x38	; 56
   1033e:	c7 01       	movw	r24, r14
   10340:	9e da       	rcall	.-2756   	; 0xf87e <_ZN20PinoccioScoutHandler6reportERK6String>
   10342:	c8 01       	movw	r24, r16
   10344:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   10348:	0f b6       	in	r0, 0x3f	; 63
   1034a:	f8 94       	cli
   1034c:	de bf       	out	0x3e, r29	; 62
   1034e:	0f be       	out	0x3f, r0	; 63
   10350:	cd bf       	out	0x3d, r28	; 61
   10352:	c7 01       	movw	r24, r14
   10354:	2c 96       	adiw	r28, 0x0c	; 12
   10356:	0f b6       	in	r0, 0x3f	; 63
   10358:	f8 94       	cli
   1035a:	de bf       	out	0x3e, r29	; 62
   1035c:	0f be       	out	0x3f, r0	; 63
   1035e:	cd bf       	out	0x3d, r28	; 61
   10360:	df 91       	pop	r29
   10362:	cf 91       	pop	r28
   10364:	1f 91       	pop	r17
   10366:	0f 91       	pop	r16
   10368:	ff 90       	pop	r15
   1036a:	ef 90       	pop	r14
   1036c:	df 90       	pop	r13
   1036e:	cf 90       	pop	r12
   10370:	bf 90       	pop	r11
   10372:	af 90       	pop	r10
   10374:	9f 90       	pop	r9
   10376:	8f 90       	pop	r8
   10378:	7f 90       	pop	r7
   1037a:	6f 90       	pop	r6
   1037c:	5f 90       	pop	r5
   1037e:	4f 90       	pop	r4
   10380:	3f 90       	pop	r3
   10382:	2f 90       	pop	r2
   10384:	08 95       	ret

00010386 <_ZL15ledEventHandlerhhh>:
   10386:	cf 93       	push	r28
   10388:	df 93       	push	r29
   1038a:	cd b7       	in	r28, 0x3d	; 61
   1038c:	de b7       	in	r29, 0x3e	; 62
   1038e:	28 97       	sbiw	r28, 0x08	; 8
   10390:	0f b6       	in	r0, 0x3f	; 63
   10392:	f8 94       	cli
   10394:	de bf       	out	0x3e, r29	; 62
   10396:	0f be       	out	0x3f, r0	; 63
   10398:	cd bf       	out	0x3d, r28	; 61
   1039a:	ce 01       	movw	r24, r28
   1039c:	01 96       	adiw	r24, 0x01	; 1
   1039e:	4b df       	rcall	.-362    	; 0x10236 <_ZL11ledReportHQv>
   103a0:	ce 01       	movw	r24, r28
   103a2:	01 96       	adiw	r24, 0x01	; 1
   103a4:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   103a8:	28 96       	adiw	r28, 0x08	; 8
   103aa:	0f b6       	in	r0, 0x3f	; 63
   103ac:	f8 94       	cli
   103ae:	de bf       	out	0x3e, r29	; 62
   103b0:	0f be       	out	0x3f, r0	; 63
   103b2:	cd bf       	out	0x3d, r28	; 61
   103b4:	df 91       	pop	r29
   103b6:	cf 91       	pop	r28
   103b8:	08 95       	ret

000103ba <_ZL12tempReportHQv>:
   103ba:	2f 92       	push	r2
   103bc:	3f 92       	push	r3
   103be:	4f 92       	push	r4
   103c0:	5f 92       	push	r5
   103c2:	6f 92       	push	r6
   103c4:	7f 92       	push	r7
   103c6:	8f 92       	push	r8
   103c8:	9f 92       	push	r9
   103ca:	af 92       	push	r10
   103cc:	bf 92       	push	r11
   103ce:	cf 92       	push	r12
   103d0:	df 92       	push	r13
   103d2:	ef 92       	push	r14
   103d4:	ff 92       	push	r15
   103d6:	0f 93       	push	r16
   103d8:	1f 93       	push	r17
   103da:	cf 93       	push	r28
   103dc:	df 93       	push	r29
   103de:	cd b7       	in	r28, 0x3d	; 61
   103e0:	de b7       	in	r29, 0x3e	; 62
   103e2:	28 97       	sbiw	r28, 0x08	; 8
   103e4:	0f b6       	in	r0, 0x3f	; 63
   103e6:	f8 94       	cli
   103e8:	de bf       	out	0x3e, r29	; 62
   103ea:	0f be       	out	0x3f, r0	; 63
   103ec:	cd bf       	out	0x3d, r28	; 61
   103ee:	6c 01       	movw	r12, r24
   103f0:	41 e0       	ldi	r20, 0x01	; 1
   103f2:	50 e0       	ldi	r21, 0x00	; 0
   103f4:	64 e6       	ldi	r22, 0x64	; 100
   103f6:	70 e0       	ldi	r23, 0x00	; 0
   103f8:	8e 01       	movw	r16, r28
   103fa:	0f 5f       	subi	r16, 0xFF	; 255
   103fc:	1f 4f       	sbci	r17, 0xFF	; 255
   103fe:	c8 01       	movw	r24, r16
   10400:	0e 94 8d ab 	call	0x1571a	; 0x1571a <_ZN12StringBufferC1Ejj>
   10404:	80 ea       	ldi	r24, 0xA0	; 160
   10406:	95 e3       	ldi	r25, 0x35	; 53
   10408:	0e 94 cc 6c 	call	0xd998	; 0xd998 <_ZN13PinoccioClass14getTemperatureEv>
   1040c:	b8 2e       	mov	r11, r24
   1040e:	e8 2e       	mov	r14, r24
   10410:	ff 24       	eor	r15, r15
   10412:	e7 fc       	sbrc	r14, 7
   10414:	f0 94       	com	r15
   10416:	20 91 d3 39 	lds	r18, 0x39D3
   1041a:	30 91 d4 39 	lds	r19, 0x39D4
   1041e:	2e 15       	cp	r18, r14
   10420:	3f 05       	cpc	r19, r15
   10422:	24 f4       	brge	.+8      	; 0x1042c <_ZL12tempReportHQv+0x72>
   10424:	f0 92 d4 39 	sts	0x39D4, r15
   10428:	e0 92 d3 39 	sts	0x39D3, r14
   1042c:	20 91 d1 39 	lds	r18, 0x39D1
   10430:	30 91 d2 39 	lds	r19, 0x39D2
   10434:	21 15       	cp	r18, r1
   10436:	31 05       	cpc	r19, r1
   10438:	19 f0       	breq	.+6      	; 0x10440 <_ZL12tempReportHQv+0x86>
   1043a:	e2 16       	cp	r14, r18
   1043c:	f3 06       	cpc	r15, r19
   1043e:	24 f4       	brge	.+8      	; 0x10448 <_ZL12tempReportHQv+0x8e>
   10440:	f0 92 d2 39 	sts	0x39D2, r15
   10444:	e0 92 d1 39 	sts	0x39D1, r14
   10448:	30 90 d1 39 	lds	r3, 0x39D1
   1044c:	20 90 d2 39 	lds	r2, 0x39D2
   10450:	50 90 d3 39 	lds	r5, 0x39D3
   10454:	40 90 d4 39 	lds	r4, 0x39D4
   10458:	40 e0       	ldi	r20, 0x00	; 0
   1045a:	50 e0       	ldi	r21, 0x00	; 0
   1045c:	ba 01       	movw	r22, r20
   1045e:	8d e9       	ldi	r24, 0x9D	; 157
   10460:	90 e2       	ldi	r25, 0x20	; 32
   10462:	0e 94 2c 68 	call	0xd058	; 0xd058 <keyMap>
   10466:	78 2e       	mov	r7, r24
   10468:	69 2e       	mov	r6, r25
   1046a:	40 e0       	ldi	r20, 0x00	; 0
   1046c:	50 e0       	ldi	r21, 0x00	; 0
   1046e:	ba 01       	movw	r22, r20
   10470:	84 e9       	ldi	r24, 0x94	; 148
   10472:	9a e1       	ldi	r25, 0x1A	; 26
   10474:	0e 94 2c 68 	call	0xd058	; 0xd058 <keyMap>
   10478:	98 2e       	mov	r9, r24
   1047a:	89 2e       	mov	r8, r25
   1047c:	40 e0       	ldi	r20, 0x00	; 0
   1047e:	50 e0       	ldi	r21, 0x00	; 0
   10480:	ba 01       	movw	r22, r20
   10482:	89 e9       	ldi	r24, 0x99	; 153
   10484:	9a e1       	ldi	r25, 0x1A	; 26
   10486:	0e 94 2c 68 	call	0xd058	; 0xd058 <keyMap>
   1048a:	e8 2e       	mov	r14, r24
   1048c:	a9 2e       	mov	r10, r25
   1048e:	40 e0       	ldi	r20, 0x00	; 0
   10490:	50 e0       	ldi	r21, 0x00	; 0
   10492:	ba 01       	movw	r22, r20
   10494:	81 ea       	ldi	r24, 0xA1	; 161
   10496:	9a e1       	ldi	r25, 0x1A	; 26
   10498:	0e 94 2c 68 	call	0xd058	; 0xd058 <keyMap>
   1049c:	2f 92       	push	r2
   1049e:	3f 92       	push	r3
   104a0:	4f 92       	push	r4
   104a2:	5f 92       	push	r5
   104a4:	ff 92       	push	r15
   104a6:	bf 92       	push	r11
   104a8:	6f 92       	push	r6
   104aa:	7f 92       	push	r7
   104ac:	8f 92       	push	r8
   104ae:	9f 92       	push	r9
   104b0:	af 92       	push	r10
   104b2:	ef 92       	push	r14
   104b4:	9f 93       	push	r25
   104b6:	8f 93       	push	r24
   104b8:	86 ea       	ldi	r24, 0xA6	; 166
   104ba:	9a e1       	ldi	r25, 0x1A	; 26
   104bc:	9f 93       	push	r25
   104be:	8f 93       	push	r24
   104c0:	1f 93       	push	r17
   104c2:	0f 93       	push	r16
   104c4:	0e 94 b2 ab 	call	0x15764	; 0x15764 <_ZN12StringBuffer13appendSprintfEPKcz>
   104c8:	a8 01       	movw	r20, r16
   104ca:	6b ee       	ldi	r22, 0xEB	; 235
   104cc:	78 e3       	ldi	r23, 0x38	; 56
   104ce:	c6 01       	movw	r24, r12
   104d0:	d6 d9       	rcall	.-3156   	; 0xf87e <_ZN20PinoccioScoutHandler6reportERK6String>
   104d2:	c8 01       	movw	r24, r16
   104d4:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   104d8:	0f b6       	in	r0, 0x3f	; 63
   104da:	f8 94       	cli
   104dc:	de bf       	out	0x3e, r29	; 62
   104de:	0f be       	out	0x3f, r0	; 63
   104e0:	cd bf       	out	0x3d, r28	; 61
   104e2:	c6 01       	movw	r24, r12
   104e4:	28 96       	adiw	r28, 0x08	; 8
   104e6:	0f b6       	in	r0, 0x3f	; 63
   104e8:	f8 94       	cli
   104ea:	de bf       	out	0x3e, r29	; 62
   104ec:	0f be       	out	0x3f, r0	; 63
   104ee:	cd bf       	out	0x3d, r28	; 61
   104f0:	df 91       	pop	r29
   104f2:	cf 91       	pop	r28
   104f4:	1f 91       	pop	r17
   104f6:	0f 91       	pop	r16
   104f8:	ff 90       	pop	r15
   104fa:	ef 90       	pop	r14
   104fc:	df 90       	pop	r13
   104fe:	cf 90       	pop	r12
   10500:	bf 90       	pop	r11
   10502:	af 90       	pop	r10
   10504:	9f 90       	pop	r9
   10506:	8f 90       	pop	r8
   10508:	7f 90       	pop	r7
   1050a:	6f 90       	pop	r6
   1050c:	5f 90       	pop	r5
   1050e:	4f 90       	pop	r4
   10510:	3f 90       	pop	r3
   10512:	2f 90       	pop	r2
   10514:	08 95       	ret

00010516 <_ZL17temperatureReportv>:
   10516:	cf 93       	push	r28
   10518:	df 93       	push	r29
   1051a:	cd b7       	in	r28, 0x3d	; 61
   1051c:	de b7       	in	r29, 0x3e	; 62
   1051e:	28 97       	sbiw	r28, 0x08	; 8
   10520:	0f b6       	in	r0, 0x3f	; 63
   10522:	f8 94       	cli
   10524:	de bf       	out	0x3e, r29	; 62
   10526:	0f be       	out	0x3f, r0	; 63
   10528:	cd bf       	out	0x3d, r28	; 61
   1052a:	ce 01       	movw	r24, r28
   1052c:	01 96       	adiw	r24, 0x01	; 1
   1052e:	45 df       	rcall	.-374    	; 0x103ba <_ZL12tempReportHQv>
   10530:	ce 01       	movw	r24, r28
   10532:	01 96       	adiw	r24, 0x01	; 1
   10534:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   10538:	61 e0       	ldi	r22, 0x01	; 1
   1053a:	70 e0       	ldi	r23, 0x00	; 0
   1053c:	80 e0       	ldi	r24, 0x00	; 0
   1053e:	90 e0       	ldi	r25, 0x00	; 0
   10540:	28 96       	adiw	r28, 0x08	; 8
   10542:	0f b6       	in	r0, 0x3f	; 63
   10544:	f8 94       	cli
   10546:	de bf       	out	0x3e, r29	; 62
   10548:	0f be       	out	0x3f, r0	; 63
   1054a:	cd bf       	out	0x3d, r28	; 61
   1054c:	df 91       	pop	r29
   1054e:	cf 91       	pop	r28
   10550:	08 95       	ret

00010552 <_ZL14getTemperaturev>:
   10552:	cf 93       	push	r28
   10554:	df 93       	push	r29
   10556:	cd b7       	in	r28, 0x3d	; 61
   10558:	de b7       	in	r29, 0x3e	; 62
   1055a:	28 97       	sbiw	r28, 0x08	; 8
   1055c:	0f b6       	in	r0, 0x3f	; 63
   1055e:	f8 94       	cli
   10560:	de bf       	out	0x3e, r29	; 62
   10562:	0f be       	out	0x3f, r0	; 63
   10564:	cd bf       	out	0x3d, r28	; 61
   10566:	ce 01       	movw	r24, r28
   10568:	01 96       	adiw	r24, 0x01	; 1
   1056a:	27 df       	rcall	.-434    	; 0x103ba <_ZL12tempReportHQv>
   1056c:	ce 01       	movw	r24, r28
   1056e:	01 96       	adiw	r24, 0x01	; 1
   10570:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   10574:	80 ea       	ldi	r24, 0xA0	; 160
   10576:	95 e3       	ldi	r25, 0x35	; 53
   10578:	0e 94 cc 6c 	call	0xd998	; 0xd998 <_ZN13PinoccioClass14getTemperatureEv>
   1057c:	68 2f       	mov	r22, r24
   1057e:	77 27       	eor	r23, r23
   10580:	67 fd       	sbrc	r22, 7
   10582:	70 95       	com	r23
   10584:	87 2f       	mov	r24, r23
   10586:	97 2f       	mov	r25, r23
   10588:	28 96       	adiw	r28, 0x08	; 8
   1058a:	0f b6       	in	r0, 0x3f	; 63
   1058c:	f8 94       	cli
   1058e:	de bf       	out	0x3e, r29	; 62
   10590:	0f be       	out	0x3f, r0	; 63
   10592:	cd bf       	out	0x3d, r28	; 61
   10594:	df 91       	pop	r29
   10596:	cf 91       	pop	r28
   10598:	08 95       	ret

0001059a <_ZL17isBatteryChargingv>:
   1059a:	80 ea       	ldi	r24, 0xA0	; 160
   1059c:	95 e3       	ldi	r25, 0x35	; 53
   1059e:	0e 94 8e 70 	call	0xe11c	; 0xe11c <_ZN13PinoccioScout17isBatteryChargingEv>
   105a2:	68 2f       	mov	r22, r24
   105a4:	70 e0       	ldi	r23, 0x00	; 0
   105a6:	80 e0       	ldi	r24, 0x00	; 0
   105a8:	90 e0       	ldi	r25, 0x00	; 0
   105aa:	08 95       	ret

000105ac <_ZL17getBatteryVoltagev>:
   105ac:	80 ea       	ldi	r24, 0xA0	; 160
   105ae:	95 e3       	ldi	r25, 0x35	; 53
   105b0:	0e 94 99 70 	call	0xe132	; 0xe132 <_ZN13PinoccioScout17getBatteryVoltageEv>
   105b4:	bc 01       	movw	r22, r24
   105b6:	88 27       	eor	r24, r24
   105b8:	77 fd       	sbrc	r23, 7
   105ba:	80 95       	com	r24
   105bc:	98 2f       	mov	r25, r24
   105be:	08 95       	ret

000105c0 <_ZL20getBatteryPercentagev>:
   105c0:	80 ea       	ldi	r24, 0xA0	; 160
   105c2:	95 e3       	ldi	r25, 0x35	; 53
   105c4:	0e 94 93 70 	call	0xe126	; 0xe126 <_ZN13PinoccioScout20getBatteryPercentageEv>
   105c8:	bc 01       	movw	r22, r24
   105ca:	88 27       	eor	r24, r24
   105cc:	77 fd       	sbrc	r23, 7
   105ce:	80 95       	com	r24
   105d0:	98 2f       	mov	r25, r24
   105d2:	08 95       	ret

000105d4 <_ZL13powerReportHQv>:
   105d4:	2f 92       	push	r2
   105d6:	3f 92       	push	r3
   105d8:	4f 92       	push	r4
   105da:	5f 92       	push	r5
   105dc:	6f 92       	push	r6
   105de:	7f 92       	push	r7
   105e0:	8f 92       	push	r8
   105e2:	9f 92       	push	r9
   105e4:	af 92       	push	r10
   105e6:	bf 92       	push	r11
   105e8:	cf 92       	push	r12
   105ea:	df 92       	push	r13
   105ec:	ef 92       	push	r14
   105ee:	ff 92       	push	r15
   105f0:	0f 93       	push	r16
   105f2:	1f 93       	push	r17
   105f4:	cf 93       	push	r28
   105f6:	df 93       	push	r29
   105f8:	cd b7       	in	r28, 0x3d	; 61
   105fa:	de b7       	in	r29, 0x3e	; 62
   105fc:	2c 97       	sbiw	r28, 0x0c	; 12
   105fe:	0f b6       	in	r0, 0x3f	; 63
   10600:	f8 94       	cli
   10602:	de bf       	out	0x3e, r29	; 62
   10604:	0f be       	out	0x3f, r0	; 63
   10606:	cd bf       	out	0x3d, r28	; 61
   10608:	6c 01       	movw	r12, r24
   1060a:	41 e0       	ldi	r20, 0x01	; 1
   1060c:	50 e0       	ldi	r21, 0x00	; 0
   1060e:	64 e6       	ldi	r22, 0x64	; 100
   10610:	70 e0       	ldi	r23, 0x00	; 0
   10612:	8e 01       	movw	r16, r28
   10614:	0f 5f       	subi	r16, 0xFF	; 255
   10616:	1f 4f       	sbci	r17, 0xFF	; 255
   10618:	c8 01       	movw	r24, r16
   1061a:	0e 94 8d ab 	call	0x1571a	; 0x1571a <_ZN12StringBufferC1Ejj>
   1061e:	80 ea       	ldi	r24, 0xA0	; 160
   10620:	95 e3       	ldi	r25, 0x35	; 53
   10622:	0e 94 b0 70 	call	0xe160	; 0xe160 <_ZN13PinoccioScout20isBackpackVccEnabledEv>
   10626:	88 23       	and	r24, r24
   10628:	29 f0       	breq	.+10     	; 0x10634 <_ZL13powerReportHQv+0x60>
   1062a:	5a ec       	ldi	r21, 0xCA	; 202
   1062c:	e5 2e       	mov	r14, r21
   1062e:	58 e1       	ldi	r21, 0x18	; 24
   10630:	f5 2e       	mov	r15, r21
   10632:	04 c0       	rjmp	.+8      	; 0x1063c <_ZL13powerReportHQv+0x68>
   10634:	4f ec       	ldi	r20, 0xCF	; 207
   10636:	e4 2e       	mov	r14, r20
   10638:	48 e1       	ldi	r20, 0x18	; 24
   1063a:	f4 2e       	mov	r15, r20
   1063c:	80 ea       	ldi	r24, 0xA0	; 160
   1063e:	95 e3       	ldi	r25, 0x35	; 53
   10640:	0e 94 8e 70 	call	0xe11c	; 0xe11c <_ZN13PinoccioScout17isBatteryChargingEv>
   10644:	88 23       	and	r24, r24
   10646:	19 f0       	breq	.+6      	; 0x1064e <_ZL13powerReportHQv+0x7a>
   10648:	2a ec       	ldi	r18, 0xCA	; 202
   1064a:	38 e1       	ldi	r19, 0x18	; 24
   1064c:	02 c0       	rjmp	.+4      	; 0x10652 <_ZL13powerReportHQv+0x7e>
   1064e:	2f ec       	ldi	r18, 0xCF	; 207
   10650:	38 e1       	ldi	r19, 0x18	; 24
   10652:	80 ea       	ldi	r24, 0xA0	; 160
   10654:	95 e3       	ldi	r25, 0x35	; 53
   10656:	2b 87       	std	Y+11, r18	; 0x0b
   10658:	3c 87       	std	Y+12, r19	; 0x0c
   1065a:	0e 94 99 70 	call	0xe132	; 0xe132 <_ZN13PinoccioScout17getBatteryVoltageEv>
   1065e:	89 87       	std	Y+9, r24	; 0x09
   10660:	9a 87       	std	Y+10, r25	; 0x0a
   10662:	80 ea       	ldi	r24, 0xA0	; 160
   10664:	95 e3       	ldi	r25, 0x35	; 53
   10666:	0e 94 93 70 	call	0xe126	; 0xe126 <_ZN13PinoccioScout20getBatteryPercentageEv>
   1066a:	38 2e       	mov	r3, r24
   1066c:	29 2e       	mov	r2, r25
   1066e:	40 e0       	ldi	r20, 0x00	; 0
   10670:	50 e0       	ldi	r21, 0x00	; 0
   10672:	ba 01       	movw	r22, r20
   10674:	81 e2       	ldi	r24, 0x21	; 33
   10676:	9f e1       	ldi	r25, 0x1F	; 31
   10678:	0e 94 2c 68 	call	0xd058	; 0xd058 <keyMap>
   1067c:	58 2e       	mov	r5, r24
   1067e:	49 2e       	mov	r4, r25
   10680:	40 e0       	ldi	r20, 0x00	; 0
   10682:	50 e0       	ldi	r21, 0x00	; 0
   10684:	ba 01       	movw	r22, r20
   10686:	84 ec       	ldi	r24, 0xC4	; 196
   10688:	9d e1       	ldi	r25, 0x1D	; 29
   1068a:	0e 94 2c 68 	call	0xd058	; 0xd058 <keyMap>
   1068e:	78 2e       	mov	r7, r24
   10690:	69 2e       	mov	r6, r25
   10692:	40 e0       	ldi	r20, 0x00	; 0
   10694:	50 e0       	ldi	r21, 0x00	; 0
   10696:	ba 01       	movw	r22, r20
   10698:	8d e0       	ldi	r24, 0x0D	; 13
   1069a:	9f e1       	ldi	r25, 0x1F	; 31
   1069c:	0e 94 2c 68 	call	0xd058	; 0xd058 <keyMap>
   106a0:	98 2e       	mov	r9, r24
   106a2:	89 2e       	mov	r8, r25
   106a4:	40 e0       	ldi	r20, 0x00	; 0
   106a6:	50 e0       	ldi	r21, 0x00	; 0
   106a8:	ba 01       	movw	r22, r20
   106aa:	81 ec       	ldi	r24, 0xC1	; 193
   106ac:	9a e1       	ldi	r25, 0x1A	; 26
   106ae:	0e 94 2c 68 	call	0xd058	; 0xd058 <keyMap>
   106b2:	b8 2e       	mov	r11, r24
   106b4:	a9 2e       	mov	r10, r25
   106b6:	40 e0       	ldi	r20, 0x00	; 0
   106b8:	50 e0       	ldi	r21, 0x00	; 0
   106ba:	ba 01       	movw	r22, r20
   106bc:	83 e6       	ldi	r24, 0x63	; 99
   106be:	9f e1       	ldi	r25, 0x1F	; 31
   106c0:	0e 94 2c 68 	call	0xd058	; 0xd058 <keyMap>
   106c4:	ff 92       	push	r15
   106c6:	ef 92       	push	r14
   106c8:	2b 85       	ldd	r18, Y+11	; 0x0b
   106ca:	3c 85       	ldd	r19, Y+12	; 0x0c
   106cc:	3f 93       	push	r19
   106ce:	2f 93       	push	r18
   106d0:	2a 85       	ldd	r18, Y+10	; 0x0a
   106d2:	2f 93       	push	r18
   106d4:	29 85       	ldd	r18, Y+9	; 0x09
   106d6:	2f 93       	push	r18
   106d8:	2f 92       	push	r2
   106da:	3f 92       	push	r3
   106dc:	4f 92       	push	r4
   106de:	5f 92       	push	r5
   106e0:	6f 92       	push	r6
   106e2:	7f 92       	push	r7
   106e4:	8f 92       	push	r8
   106e6:	9f 92       	push	r9
   106e8:	af 92       	push	r10
   106ea:	bf 92       	push	r11
   106ec:	9f 93       	push	r25
   106ee:	8f 93       	push	r24
   106f0:	89 ec       	ldi	r24, 0xC9	; 201
   106f2:	9a e1       	ldi	r25, 0x1A	; 26
   106f4:	9f 93       	push	r25
   106f6:	8f 93       	push	r24
   106f8:	1f 93       	push	r17
   106fa:	0f 93       	push	r16
   106fc:	0e 94 b2 ab 	call	0x15764	; 0x15764 <_ZN12StringBuffer13appendSprintfEPKcz>
   10700:	a8 01       	movw	r20, r16
   10702:	6b ee       	ldi	r22, 0xEB	; 235
   10704:	78 e3       	ldi	r23, 0x38	; 56
   10706:	c6 01       	movw	r24, r12
   10708:	ba d8       	rcall	.-3724   	; 0xf87e <_ZN20PinoccioScoutHandler6reportERK6String>
   1070a:	c8 01       	movw	r24, r16
   1070c:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   10710:	0f b6       	in	r0, 0x3f	; 63
   10712:	f8 94       	cli
   10714:	de bf       	out	0x3e, r29	; 62
   10716:	0f be       	out	0x3f, r0	; 63
   10718:	cd bf       	out	0x3d, r28	; 61
   1071a:	c6 01       	movw	r24, r12
   1071c:	2c 96       	adiw	r28, 0x0c	; 12
   1071e:	0f b6       	in	r0, 0x3f	; 63
   10720:	f8 94       	cli
   10722:	de bf       	out	0x3e, r29	; 62
   10724:	0f be       	out	0x3f, r0	; 63
   10726:	cd bf       	out	0x3d, r28	; 61
   10728:	df 91       	pop	r29
   1072a:	cf 91       	pop	r28
   1072c:	1f 91       	pop	r17
   1072e:	0f 91       	pop	r16
   10730:	ff 90       	pop	r15
   10732:	ef 90       	pop	r14
   10734:	df 90       	pop	r13
   10736:	cf 90       	pop	r12
   10738:	bf 90       	pop	r11
   1073a:	af 90       	pop	r10
   1073c:	9f 90       	pop	r9
   1073e:	8f 90       	pop	r8
   10740:	7f 90       	pop	r7
   10742:	6f 90       	pop	r6
   10744:	5f 90       	pop	r5
   10746:	4f 90       	pop	r4
   10748:	3f 90       	pop	r3
   1074a:	2f 90       	pop	r2
   1074c:	08 95       	ret

0001074e <_ZL17analogPinReportHQv>:
   1074e:	2f 92       	push	r2
   10750:	3f 92       	push	r3
   10752:	4f 92       	push	r4
   10754:	5f 92       	push	r5
   10756:	6f 92       	push	r6
   10758:	7f 92       	push	r7
   1075a:	8f 92       	push	r8
   1075c:	9f 92       	push	r9
   1075e:	af 92       	push	r10
   10760:	bf 92       	push	r11
   10762:	cf 92       	push	r12
   10764:	df 92       	push	r13
   10766:	ef 92       	push	r14
   10768:	ff 92       	push	r15
   1076a:	0f 93       	push	r16
   1076c:	1f 93       	push	r17
   1076e:	cf 93       	push	r28
   10770:	df 93       	push	r29
   10772:	cd b7       	in	r28, 0x3d	; 61
   10774:	de b7       	in	r29, 0x3e	; 62
   10776:	68 97       	sbiw	r28, 0x18	; 24
   10778:	0f b6       	in	r0, 0x3f	; 63
   1077a:	f8 94       	cli
   1077c:	de bf       	out	0x3e, r29	; 62
   1077e:	0f be       	out	0x3f, r0	; 63
   10780:	cd bf       	out	0x3d, r28	; 61
   10782:	7c 01       	movw	r14, r24
   10784:	41 e0       	ldi	r20, 0x01	; 1
   10786:	50 e0       	ldi	r21, 0x00	; 0
   10788:	64 e6       	ldi	r22, 0x64	; 100
   1078a:	70 e0       	ldi	r23, 0x00	; 0
   1078c:	8e 01       	movw	r16, r28
   1078e:	0f 5f       	subi	r16, 0xFF	; 255
   10790:	1f 4f       	sbci	r17, 0xFF	; 255
   10792:	c8 01       	movw	r24, r16
   10794:	0e 94 8d ab 	call	0x1571a	; 0x1571a <_ZN12StringBufferC1Ejj>
   10798:	eb ed       	ldi	r30, 0xDB	; 219
   1079a:	f5 e3       	ldi	r31, 0x35	; 53
   1079c:	20 81       	ld	r18, Z
   1079e:	29 87       	std	Y+9, r18	; 0x09
   107a0:	31 81       	ldd	r19, Z+1	; 0x01
   107a2:	e9 ed       	ldi	r30, 0xD9	; 217
   107a4:	f5 e3       	ldi	r31, 0x35	; 53
   107a6:	20 81       	ld	r18, Z
   107a8:	2a 87       	std	Y+10, r18	; 0x0a
   107aa:	21 81       	ldd	r18, Z+1	; 0x01
   107ac:	2b 87       	std	Y+11, r18	; 0x0b
   107ae:	e7 ed       	ldi	r30, 0xD7	; 215
   107b0:	f5 e3       	ldi	r31, 0x35	; 53
   107b2:	20 81       	ld	r18, Z
   107b4:	2c 87       	std	Y+12, r18	; 0x0c
   107b6:	21 81       	ldd	r18, Z+1	; 0x01
   107b8:	2d 87       	std	Y+13, r18	; 0x0d
   107ba:	e5 ed       	ldi	r30, 0xD5	; 213
   107bc:	f5 e3       	ldi	r31, 0x35	; 53
   107be:	20 81       	ld	r18, Z
   107c0:	2e 87       	std	Y+14, r18	; 0x0e
   107c2:	21 81       	ldd	r18, Z+1	; 0x01
   107c4:	2f 87       	std	Y+15, r18	; 0x0f
   107c6:	e3 ed       	ldi	r30, 0xD3	; 211
   107c8:	f5 e3       	ldi	r31, 0x35	; 53
   107ca:	20 81       	ld	r18, Z
   107cc:	28 8b       	std	Y+16, r18	; 0x10
   107ce:	21 81       	ldd	r18, Z+1	; 0x01
   107d0:	29 8b       	std	Y+17, r18	; 0x11
   107d2:	e1 ed       	ldi	r30, 0xD1	; 209
   107d4:	f5 e3       	ldi	r31, 0x35	; 53
   107d6:	20 81       	ld	r18, Z
   107d8:	2a 8b       	std	Y+18, r18	; 0x12
   107da:	21 81       	ldd	r18, Z+1	; 0x01
   107dc:	2b 8b       	std	Y+19, r18	; 0x13
   107de:	ef ec       	ldi	r30, 0xCF	; 207
   107e0:	f5 e3       	ldi	r31, 0x35	; 53
   107e2:	20 81       	ld	r18, Z
   107e4:	2c 8b       	std	Y+20, r18	; 0x14
   107e6:	21 81       	ldd	r18, Z+1	; 0x01
   107e8:	2d 8b       	std	Y+21, r18	; 0x15
   107ea:	ed ec       	ldi	r30, 0xCD	; 205
   107ec:	f5 e3       	ldi	r31, 0x35	; 53
   107ee:	20 81       	ld	r18, Z
   107f0:	2e 8b       	std	Y+22, r18	; 0x16
   107f2:	21 81       	ldd	r18, Z+1	; 0x01
   107f4:	6f e1       	ldi	r22, 0x1F	; 31
   107f6:	80 ea       	ldi	r24, 0xA0	; 160
   107f8:	95 e3       	ldi	r25, 0x35	; 53
   107fa:	28 8f       	std	Y+24, r18	; 0x18
   107fc:	3f 8b       	std	Y+23, r19	; 0x17
   107fe:	0e 94 3a 71 	call	0xe274	; 0xe274 <_ZN13PinoccioScout10getPinModeEh>
   10802:	68 2e       	mov	r6, r24
   10804:	6e e1       	ldi	r22, 0x1E	; 30
   10806:	80 ea       	ldi	r24, 0xA0	; 160
   10808:	95 e3       	ldi	r25, 0x35	; 53
   1080a:	0e 94 3a 71 	call	0xe274	; 0xe274 <_ZN13PinoccioScout10getPinModeEh>
   1080e:	78 2e       	mov	r7, r24
   10810:	6d e1       	ldi	r22, 0x1D	; 29
   10812:	80 ea       	ldi	r24, 0xA0	; 160
   10814:	95 e3       	ldi	r25, 0x35	; 53
   10816:	0e 94 3a 71 	call	0xe274	; 0xe274 <_ZN13PinoccioScout10getPinModeEh>
   1081a:	88 2e       	mov	r8, r24
   1081c:	6c e1       	ldi	r22, 0x1C	; 28
   1081e:	80 ea       	ldi	r24, 0xA0	; 160
   10820:	95 e3       	ldi	r25, 0x35	; 53
   10822:	0e 94 3a 71 	call	0xe274	; 0xe274 <_ZN13PinoccioScout10getPinModeEh>
   10826:	98 2e       	mov	r9, r24
   10828:	6b e1       	ldi	r22, 0x1B	; 27
   1082a:	80 ea       	ldi	r24, 0xA0	; 160
   1082c:	95 e3       	ldi	r25, 0x35	; 53
   1082e:	0e 94 3a 71 	call	0xe274	; 0xe274 <_ZN13PinoccioScout10getPinModeEh>
   10832:	a8 2e       	mov	r10, r24
   10834:	6a e1       	ldi	r22, 0x1A	; 26
   10836:	80 ea       	ldi	r24, 0xA0	; 160
   10838:	95 e3       	ldi	r25, 0x35	; 53
   1083a:	0e 94 3a 71 	call	0xe274	; 0xe274 <_ZN13PinoccioScout10getPinModeEh>
   1083e:	b8 2e       	mov	r11, r24
   10840:	69 e1       	ldi	r22, 0x19	; 25
   10842:	80 ea       	ldi	r24, 0xA0	; 160
   10844:	95 e3       	ldi	r25, 0x35	; 53
   10846:	0e 94 3a 71 	call	0xe274	; 0xe274 <_ZN13PinoccioScout10getPinModeEh>
   1084a:	c8 2e       	mov	r12, r24
   1084c:	68 e1       	ldi	r22, 0x18	; 24
   1084e:	80 ea       	ldi	r24, 0xA0	; 160
   10850:	95 e3       	ldi	r25, 0x35	; 53
   10852:	0e 94 3a 71 	call	0xe274	; 0xe274 <_ZN13PinoccioScout10getPinModeEh>
   10856:	d8 2e       	mov	r13, r24
   10858:	40 e0       	ldi	r20, 0x00	; 0
   1085a:	50 e0       	ldi	r21, 0x00	; 0
   1085c:	ba 01       	movw	r22, r20
   1085e:	8a ee       	ldi	r24, 0xEA	; 234
   10860:	9a e1       	ldi	r25, 0x1A	; 26
   10862:	0e 94 2c 68 	call	0xd058	; 0xd058 <keyMap>
   10866:	38 2e       	mov	r3, r24
   10868:	29 2e       	mov	r2, r25
   1086a:	40 e0       	ldi	r20, 0x00	; 0
   1086c:	50 e0       	ldi	r21, 0x00	; 0
   1086e:	ba 01       	movw	r22, r20
   10870:	82 e5       	ldi	r24, 0x52	; 82
   10872:	91 e2       	ldi	r25, 0x21	; 33
   10874:	0e 94 2c 68 	call	0xd058	; 0xd058 <keyMap>
   10878:	58 2e       	mov	r5, r24
   1087a:	49 2e       	mov	r4, r25
   1087c:	40 e0       	ldi	r20, 0x00	; 0
   1087e:	50 e0       	ldi	r21, 0x00	; 0
   10880:	ba 01       	movw	r22, r20
   10882:	89 e3       	ldi	r24, 0x39	; 57
   10884:	9b e1       	ldi	r25, 0x1B	; 27
   10886:	0e 94 2c 68 	call	0xd058	; 0xd058 <keyMap>
   1088a:	3f 89       	ldd	r19, Y+23	; 0x17
   1088c:	3f 93       	push	r19
   1088e:	39 85       	ldd	r19, Y+9	; 0x09
   10890:	3f 93       	push	r19
   10892:	3b 85       	ldd	r19, Y+11	; 0x0b
   10894:	3f 93       	push	r19
   10896:	3a 85       	ldd	r19, Y+10	; 0x0a
   10898:	3f 93       	push	r19
   1089a:	3d 85       	ldd	r19, Y+13	; 0x0d
   1089c:	3f 93       	push	r19
   1089e:	3c 85       	ldd	r19, Y+12	; 0x0c
   108a0:	3f 93       	push	r19
   108a2:	3f 85       	ldd	r19, Y+15	; 0x0f
   108a4:	3f 93       	push	r19
   108a6:	3e 85       	ldd	r19, Y+14	; 0x0e
   108a8:	3f 93       	push	r19
   108aa:	39 89       	ldd	r19, Y+17	; 0x11
   108ac:	3f 93       	push	r19
   108ae:	38 89       	ldd	r19, Y+16	; 0x10
   108b0:	3f 93       	push	r19
   108b2:	3b 89       	ldd	r19, Y+19	; 0x13
   108b4:	3f 93       	push	r19
   108b6:	3a 89       	ldd	r19, Y+18	; 0x12
   108b8:	3f 93       	push	r19
   108ba:	3d 89       	ldd	r19, Y+21	; 0x15
   108bc:	3f 93       	push	r19
   108be:	3c 89       	ldd	r19, Y+20	; 0x14
   108c0:	3f 93       	push	r19
   108c2:	28 8d       	ldd	r18, Y+24	; 0x18
   108c4:	2f 93       	push	r18
   108c6:	2e 89       	ldd	r18, Y+22	; 0x16
   108c8:	2f 93       	push	r18
   108ca:	26 2d       	mov	r18, r6
   108cc:	33 27       	eor	r19, r19
   108ce:	27 fd       	sbrc	r18, 7
   108d0:	30 95       	com	r19
   108d2:	3f 93       	push	r19
   108d4:	6f 92       	push	r6
   108d6:	27 2d       	mov	r18, r7
   108d8:	33 27       	eor	r19, r19
   108da:	27 fd       	sbrc	r18, 7
   108dc:	30 95       	com	r19
   108de:	3f 93       	push	r19
   108e0:	7f 92       	push	r7
   108e2:	28 2d       	mov	r18, r8
   108e4:	33 27       	eor	r19, r19
   108e6:	27 fd       	sbrc	r18, 7
   108e8:	30 95       	com	r19
   108ea:	3f 93       	push	r19
   108ec:	8f 92       	push	r8
   108ee:	29 2d       	mov	r18, r9
   108f0:	33 27       	eor	r19, r19
   108f2:	27 fd       	sbrc	r18, 7
   108f4:	30 95       	com	r19
   108f6:	3f 93       	push	r19
   108f8:	9f 92       	push	r9
   108fa:	2a 2d       	mov	r18, r10
   108fc:	33 27       	eor	r19, r19
   108fe:	27 fd       	sbrc	r18, 7
   10900:	30 95       	com	r19
   10902:	3f 93       	push	r19
   10904:	af 92       	push	r10
   10906:	2b 2d       	mov	r18, r11
   10908:	33 27       	eor	r19, r19
   1090a:	27 fd       	sbrc	r18, 7
   1090c:	30 95       	com	r19
   1090e:	3f 93       	push	r19
   10910:	bf 92       	push	r11
   10912:	2c 2d       	mov	r18, r12
   10914:	33 27       	eor	r19, r19
   10916:	27 fd       	sbrc	r18, 7
   10918:	30 95       	com	r19
   1091a:	3f 93       	push	r19
   1091c:	cf 92       	push	r12
   1091e:	2d 2d       	mov	r18, r13
   10920:	33 27       	eor	r19, r19
   10922:	27 fd       	sbrc	r18, 7
   10924:	30 95       	com	r19
   10926:	3f 93       	push	r19
   10928:	df 92       	push	r13
   1092a:	2f 92       	push	r2
   1092c:	3f 92       	push	r3
   1092e:	4f 92       	push	r4
   10930:	5f 92       	push	r5
   10932:	9f 93       	push	r25
   10934:	8f 93       	push	r24
   10936:	80 ef       	ldi	r24, 0xF0	; 240
   10938:	9a e1       	ldi	r25, 0x1A	; 26
   1093a:	9f 93       	push	r25
   1093c:	8f 93       	push	r24
   1093e:	1f 93       	push	r17
   10940:	0f 93       	push	r16
   10942:	0e 94 b2 ab 	call	0x15764	; 0x15764 <_ZN12StringBuffer13appendSprintfEPKcz>
   10946:	0f b6       	in	r0, 0x3f	; 63
   10948:	f8 94       	cli
   1094a:	de bf       	out	0x3e, r29	; 62
   1094c:	0f be       	out	0x3f, r0	; 63
   1094e:	cd bf       	out	0x3d, r28	; 61
   10950:	a8 01       	movw	r20, r16
   10952:	6b ee       	ldi	r22, 0xEB	; 235
   10954:	78 e3       	ldi	r23, 0x38	; 56
   10956:	c7 01       	movw	r24, r14
   10958:	0e 94 3f 7c 	call	0xf87e	; 0xf87e <_ZN20PinoccioScoutHandler6reportERK6String>
   1095c:	c8 01       	movw	r24, r16
   1095e:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   10962:	c7 01       	movw	r24, r14
   10964:	68 96       	adiw	r28, 0x18	; 24
   10966:	0f b6       	in	r0, 0x3f	; 63
   10968:	f8 94       	cli
   1096a:	de bf       	out	0x3e, r29	; 62
   1096c:	0f be       	out	0x3f, r0	; 63
   1096e:	cd bf       	out	0x3d, r28	; 61
   10970:	df 91       	pop	r29
   10972:	cf 91       	pop	r28
   10974:	1f 91       	pop	r17
   10976:	0f 91       	pop	r16
   10978:	ff 90       	pop	r15
   1097a:	ef 90       	pop	r14
   1097c:	df 90       	pop	r13
   1097e:	cf 90       	pop	r12
   10980:	bf 90       	pop	r11
   10982:	af 90       	pop	r10
   10984:	9f 90       	pop	r9
   10986:	8f 90       	pop	r8
   10988:	7f 90       	pop	r7
   1098a:	6f 90       	pop	r6
   1098c:	5f 90       	pop	r5
   1098e:	4f 90       	pop	r4
   10990:	3f 90       	pop	r3
   10992:	2f 90       	pop	r2
   10994:	08 95       	ret

00010996 <_ZL21analogPinEventHandlerhia>:
   10996:	7f 92       	push	r7
   10998:	8f 92       	push	r8
   1099a:	9f 92       	push	r9
   1099c:	af 92       	push	r10
   1099e:	bf 92       	push	r11
   109a0:	cf 92       	push	r12
   109a2:	df 92       	push	r13
   109a4:	ef 92       	push	r14
   109a6:	ff 92       	push	r15
   109a8:	0f 93       	push	r16
   109aa:	1f 93       	push	r17
   109ac:	cf 93       	push	r28
   109ae:	df 93       	push	r29
   109b0:	cd b7       	in	r28, 0x3d	; 61
   109b2:	de b7       	in	r29, 0x3e	; 62
   109b4:	e8 97       	sbiw	r28, 0x38	; 56
   109b6:	0f b6       	in	r0, 0x3f	; 63
   109b8:	f8 94       	cli
   109ba:	de bf       	out	0x3e, r29	; 62
   109bc:	0f be       	out	0x3f, r0	; 63
   109be:	cd bf       	out	0x3d, r28	; 61
   109c0:	b8 2e       	mov	r11, r24
   109c2:	96 2e       	mov	r9, r22
   109c4:	87 2e       	mov	r8, r23
   109c6:	a4 2e       	mov	r10, r20
   109c8:	0e 94 16 14 	call	0x282c	; 0x282c <millis>
   109cc:	6b 01       	movw	r12, r22
   109ce:	7c 01       	movw	r14, r24
   109d0:	8e 01       	movw	r16, r28
   109d2:	0f 5f       	subi	r16, 0xFF	; 255
   109d4:	1f 4f       	sbci	r17, 0xFF	; 255
   109d6:	c8 01       	movw	r24, r16
   109d8:	ba de       	rcall	.-652    	; 0x1074e <_ZL17analogPinReportHQv>
   109da:	c8 01       	movw	r24, r16
   109dc:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   109e0:	83 e3       	ldi	r24, 0x33	; 51
   109e2:	9b e1       	ldi	r25, 0x1B	; 27
   109e4:	0e 94 0d 29 	call	0x521a	; 0x521a <_Z10findscriptPc>
   109e8:	88 23       	and	r24, r24
   109ea:	09 f4       	brne	.+2      	; 0x109ee <_ZL21analogPinEventHandlerhia+0x58>
   109ec:	5c c0       	rjmp	.+184    	; 0x10aa6 <_ZL21analogPinEventHandlerhia+0x110>
   109ee:	4a e0       	ldi	r20, 0x0A	; 10
   109f0:	6a 2d       	mov	r22, r10
   109f2:	77 27       	eor	r23, r23
   109f4:	67 fd       	sbrc	r22, 7
   109f6:	70 95       	com	r23
   109f8:	c8 01       	movw	r24, r16
   109fa:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <_ZN6StringC1Eih>
   109fe:	4a e0       	ldi	r20, 0x0A	; 10
   10a00:	69 2d       	mov	r22, r9
   10a02:	78 2d       	mov	r23, r8
   10a04:	ce 01       	movw	r24, r28
   10a06:	81 96       	adiw	r24, 0x21	; 33
   10a08:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <_ZN6StringC1Eih>
   10a0c:	4a e0       	ldi	r20, 0x0A	; 10
   10a0e:	6b 2d       	mov	r22, r11
   10a10:	ce 01       	movw	r24, r28
   10a12:	8d 96       	adiw	r24, 0x2d	; 45
   10a14:	0e 94 50 18 	call	0x30a0	; 0x30a0 <_ZN6StringC1Ehh>
   10a18:	60 e4       	ldi	r22, 0x40	; 64
   10a1a:	7b e1       	ldi	r23, 0x1B	; 27
   10a1c:	ce 01       	movw	r24, r28
   10a1e:	87 96       	adiw	r24, 0x27	; 39
   10a20:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <_ZN6StringC1EPKc>
   10a24:	be 01       	movw	r22, r28
   10a26:	63 5d       	subi	r22, 0xD3	; 211
   10a28:	7f 4f       	sbci	r23, 0xFF	; 255
   10a2a:	ce 01       	movw	r24, r28
   10a2c:	87 96       	adiw	r24, 0x27	; 39
   10a2e:	0e 94 9f 19 	call	0x333e	; 0x333e <_ZplRK15StringSumHelperRK6String>
   10a32:	63 ec       	ldi	r22, 0xC3	; 195
   10a34:	7e e1       	ldi	r23, 0x1E	; 30
   10a36:	0e 94 b0 19 	call	0x3360	; 0x3360 <_ZplRK15StringSumHelperPKc>
   10a3a:	be 01       	movw	r22, r28
   10a3c:	6f 5d       	subi	r22, 0xDF	; 223
   10a3e:	7f 4f       	sbci	r23, 0xFF	; 255
   10a40:	0e 94 9f 19 	call	0x333e	; 0x333e <_ZplRK15StringSumHelperRK6String>
   10a44:	63 ec       	ldi	r22, 0xC3	; 195
   10a46:	7e e1       	ldi	r23, 0x1E	; 30
   10a48:	0e 94 b0 19 	call	0x3360	; 0x3360 <_ZplRK15StringSumHelperPKc>
   10a4c:	b8 01       	movw	r22, r16
   10a4e:	0e 94 9f 19 	call	0x333e	; 0x333e <_ZplRK15StringSumHelperRK6String>
   10a52:	65 e6       	ldi	r22, 0x65	; 101
   10a54:	7d e1       	ldi	r23, 0x1D	; 29
   10a56:	0e 94 b0 19 	call	0x3360	; 0x3360 <_ZplRK15StringSumHelperPKc>
   10a5a:	bc 01       	movw	r22, r24
   10a5c:	ce 01       	movw	r24, r28
   10a5e:	c3 96       	adiw	r24, 0x33	; 51
   10a60:	0e 94 32 18 	call	0x3064	; 0x3064 <_ZN6StringC1ERKS_>
   10a64:	ce 01       	movw	r24, r28
   10a66:	87 96       	adiw	r24, 0x27	; 39
   10a68:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   10a6c:	ce 01       	movw	r24, r28
   10a6e:	8d 96       	adiw	r24, 0x2d	; 45
   10a70:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   10a74:	ce 01       	movw	r24, r28
   10a76:	81 96       	adiw	r24, 0x21	; 33
   10a78:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   10a7c:	c8 01       	movw	r24, r16
   10a7e:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   10a82:	4f a9       	ldd	r20, Y+55	; 0x37
   10a84:	58 ad       	ldd	r21, Y+56	; 0x38
   10a86:	4f 5f       	subi	r20, 0xFF	; 255
   10a88:	5f 4f       	sbci	r21, 0xFF	; 255
   10a8a:	20 e0       	ldi	r18, 0x00	; 0
   10a8c:	30 e0       	ldi	r19, 0x00	; 0
   10a8e:	b8 01       	movw	r22, r16
   10a90:	ce 01       	movw	r24, r28
   10a92:	c3 96       	adiw	r24, 0x33	; 51
   10a94:	0e 94 da 19 	call	0x33b4	; 0x33b4 <_ZNK6String8getBytesEPhjj>
   10a98:	c8 01       	movw	r24, r16
   10a9a:	0e 94 59 35 	call	0x6ab2	; 0x6ab2 <_Z9doCommandPc>
   10a9e:	ce 01       	movw	r24, r28
   10aa0:	c3 96       	adiw	r24, 0x33	; 51
   10aa2:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   10aa6:	1f 92       	push	r1
   10aa8:	bf 92       	push	r11
   10aaa:	2e e4       	ldi	r18, 0x4E	; 78
   10aac:	3b e1       	ldi	r19, 0x1B	; 27
   10aae:	3f 93       	push	r19
   10ab0:	2f 93       	push	r18
   10ab2:	1f 92       	push	r1
   10ab4:	60 e2       	ldi	r22, 0x20	; 32
   10ab6:	76 2e       	mov	r7, r22
   10ab8:	7f 92       	push	r7
   10aba:	1f 93       	push	r17
   10abc:	0f 93       	push	r16
   10abe:	0e 94 1d b6 	call	0x16c3a	; 0x16c3a <snprintf>
   10ac2:	c8 01       	movw	r24, r16
   10ac4:	0e 94 0d 29 	call	0x521a	; 0x521a <_Z10findscriptPc>
   10ac8:	0f b6       	in	r0, 0x3f	; 63
   10aca:	f8 94       	cli
   10acc:	de bf       	out	0x3e, r29	; 62
   10ace:	0f be       	out	0x3f, r0	; 63
   10ad0:	cd bf       	out	0x3d, r28	; 61
   10ad2:	88 23       	and	r24, r24
   10ad4:	e1 f0       	breq	.+56     	; 0x10b0e <_ZL21analogPinEventHandlerhia+0x178>
   10ad6:	8a 2d       	mov	r24, r10
   10ad8:	99 27       	eor	r25, r25
   10ada:	87 fd       	sbrc	r24, 7
   10adc:	90 95       	com	r25
   10ade:	9f 93       	push	r25
   10ae0:	af 92       	push	r10
   10ae2:	8f 92       	push	r8
   10ae4:	9f 92       	push	r9
   10ae6:	1f 92       	push	r1
   10ae8:	bf 92       	push	r11
   10aea:	8d e5       	ldi	r24, 0x5D	; 93
   10aec:	9b e1       	ldi	r25, 0x1B	; 27
   10aee:	9f 93       	push	r25
   10af0:	8f 93       	push	r24
   10af2:	1f 92       	push	r1
   10af4:	7f 92       	push	r7
   10af6:	1f 93       	push	r17
   10af8:	0f 93       	push	r16
   10afa:	0e 94 1d b6 	call	0x16c3a	; 0x16c3a <snprintf>
   10afe:	c8 01       	movw	r24, r16
   10b00:	0e 94 59 35 	call	0x6ab2	; 0x6ab2 <_Z9doCommandPc>
   10b04:	0f b6       	in	r0, 0x3f	; 63
   10b06:	f8 94       	cli
   10b08:	de bf       	out	0x3e, r29	; 62
   10b0a:	0f be       	out	0x3f, r0	; 63
   10b0c:	cd bf       	out	0x3d, r28	; 61
   10b0e:	80 91 eb 35 	lds	r24, 0x35EB
   10b12:	88 23       	and	r24, r24
   10b14:	d1 f0       	breq	.+52     	; 0x10b4a <_ZL21analogPinEventHandlerhia+0x1b4>
   10b16:	64 ee       	ldi	r22, 0xE4	; 228
   10b18:	76 e1       	ldi	r23, 0x16	; 22
   10b1a:	84 e0       	ldi	r24, 0x04	; 4
   10b1c:	94 e2       	ldi	r25, 0x24	; 36
   10b1e:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
   10b22:	0e 94 16 14 	call	0x282c	; 0x282c <millis>
   10b26:	ab 01       	movw	r20, r22
   10b28:	bc 01       	movw	r22, r24
   10b2a:	4c 19       	sub	r20, r12
   10b2c:	5d 09       	sbc	r21, r13
   10b2e:	6e 09       	sbc	r22, r14
   10b30:	7f 09       	sbc	r23, r15
   10b32:	2a e0       	ldi	r18, 0x0A	; 10
   10b34:	30 e0       	ldi	r19, 0x00	; 0
   10b36:	84 e0       	ldi	r24, 0x04	; 4
   10b38:	94 e2       	ldi	r25, 0x24	; 36
   10b3a:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <_ZN5Print5printEmi>
   10b3e:	61 ee       	ldi	r22, 0xE1	; 225
   10b40:	76 e1       	ldi	r23, 0x16	; 22
   10b42:	84 e0       	ldi	r24, 0x04	; 4
   10b44:	94 e2       	ldi	r25, 0x24	; 36
   10b46:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <_ZN5Print7printlnEPK19__FlashStringHelper>
   10b4a:	e8 96       	adiw	r28, 0x38	; 56
   10b4c:	0f b6       	in	r0, 0x3f	; 63
   10b4e:	f8 94       	cli
   10b50:	de bf       	out	0x3e, r29	; 62
   10b52:	0f be       	out	0x3f, r0	; 63
   10b54:	cd bf       	out	0x3d, r28	; 61
   10b56:	df 91       	pop	r29
   10b58:	cf 91       	pop	r28
   10b5a:	1f 91       	pop	r17
   10b5c:	0f 91       	pop	r16
   10b5e:	ff 90       	pop	r15
   10b60:	ef 90       	pop	r14
   10b62:	df 90       	pop	r13
   10b64:	cf 90       	pop	r12
   10b66:	bf 90       	pop	r11
   10b68:	af 90       	pop	r10
   10b6a:	9f 90       	pop	r9
   10b6c:	8f 90       	pop	r8
   10b6e:	7f 90       	pop	r7
   10b70:	08 95       	ret

00010b72 <_ZL18digitalPinReportHQv>:
   10b72:	2f 92       	push	r2
   10b74:	3f 92       	push	r3
   10b76:	4f 92       	push	r4
   10b78:	5f 92       	push	r5
   10b7a:	6f 92       	push	r6
   10b7c:	7f 92       	push	r7
   10b7e:	8f 92       	push	r8
   10b80:	9f 92       	push	r9
   10b82:	af 92       	push	r10
   10b84:	bf 92       	push	r11
   10b86:	cf 92       	push	r12
   10b88:	df 92       	push	r13
   10b8a:	ef 92       	push	r14
   10b8c:	ff 92       	push	r15
   10b8e:	0f 93       	push	r16
   10b90:	1f 93       	push	r17
   10b92:	cf 93       	push	r28
   10b94:	df 93       	push	r29
   10b96:	cd b7       	in	r28, 0x3d	; 61
   10b98:	de b7       	in	r29, 0x3e	; 62
   10b9a:	6c 97       	sbiw	r28, 0x1c	; 28
   10b9c:	0f b6       	in	r0, 0x3f	; 63
   10b9e:	f8 94       	cli
   10ba0:	de bf       	out	0x3e, r29	; 62
   10ba2:	0f be       	out	0x3f, r0	; 63
   10ba4:	cd bf       	out	0x3d, r28	; 61
   10ba6:	1c 01       	movw	r2, r24
   10ba8:	41 e0       	ldi	r20, 0x01	; 1
   10baa:	50 e0       	ldi	r21, 0x00	; 0
   10bac:	64 e6       	ldi	r22, 0x64	; 100
   10bae:	70 e0       	ldi	r23, 0x00	; 0
   10bb0:	8e 01       	movw	r16, r28
   10bb2:	0f 5f       	subi	r16, 0xFF	; 255
   10bb4:	1f 4f       	sbci	r17, 0xFF	; 255
   10bb6:	c8 01       	movw	r24, r16
   10bb8:	0e 94 8d ab 	call	0x1571a	; 0x1571a <_ZN12StringBufferC1Ejj>
   10bbc:	40 90 c5 35 	lds	r4, 0x35C5
   10bc0:	24 2d       	mov	r18, r4
   10bc2:	33 27       	eor	r19, r19
   10bc4:	27 fd       	sbrc	r18, 7
   10bc6:	30 95       	com	r19
   10bc8:	3a 87       	std	Y+10, r19	; 0x0a
   10bca:	29 87       	std	Y+9, r18	; 0x09
   10bcc:	50 90 c4 35 	lds	r5, 0x35C4
   10bd0:	25 2d       	mov	r18, r5
   10bd2:	33 27       	eor	r19, r19
   10bd4:	27 fd       	sbrc	r18, 7
   10bd6:	30 95       	com	r19
   10bd8:	3c 87       	std	Y+12, r19	; 0x0c
   10bda:	2b 87       	std	Y+11, r18	; 0x0b
   10bdc:	60 90 c3 35 	lds	r6, 0x35C3
   10be0:	26 2d       	mov	r18, r6
   10be2:	33 27       	eor	r19, r19
   10be4:	27 fd       	sbrc	r18, 7
   10be6:	30 95       	com	r19
   10be8:	3e 87       	std	Y+14, r19	; 0x0e
   10bea:	2d 87       	std	Y+13, r18	; 0x0d
   10bec:	70 90 c2 35 	lds	r7, 0x35C2
   10bf0:	27 2d       	mov	r18, r7
   10bf2:	33 27       	eor	r19, r19
   10bf4:	27 fd       	sbrc	r18, 7
   10bf6:	30 95       	com	r19
   10bf8:	38 8b       	std	Y+16, r19	; 0x10
   10bfa:	2f 87       	std	Y+15, r18	; 0x0f
   10bfc:	80 90 c1 35 	lds	r8, 0x35C1
   10c00:	28 2d       	mov	r18, r8
   10c02:	33 27       	eor	r19, r19
   10c04:	27 fd       	sbrc	r18, 7
   10c06:	30 95       	com	r19
   10c08:	3a 8b       	std	Y+18, r19	; 0x12
   10c0a:	29 8b       	std	Y+17, r18	; 0x11
   10c0c:	30 91 c0 35 	lds	r19, 0x35C0
   10c10:	83 2f       	mov	r24, r19
   10c12:	99 27       	eor	r25, r25
   10c14:	87 fd       	sbrc	r24, 7
   10c16:	90 95       	com	r25
   10c18:	9c 8b       	std	Y+20, r25	; 0x14
   10c1a:	8b 8b       	std	Y+19, r24	; 0x13
   10c1c:	20 91 bf 35 	lds	r18, 0x35BF
   10c20:	82 2f       	mov	r24, r18
   10c22:	99 27       	eor	r25, r25
   10c24:	87 fd       	sbrc	r24, 7
   10c26:	90 95       	com	r25
   10c28:	9e 8b       	std	Y+22, r25	; 0x16
   10c2a:	8d 8b       	std	Y+21, r24	; 0x15
   10c2c:	68 e0       	ldi	r22, 0x08	; 8
   10c2e:	80 ea       	ldi	r24, 0xA0	; 160
   10c30:	95 e3       	ldi	r25, 0x35	; 53
   10c32:	2c 8f       	std	Y+28, r18	; 0x1c
   10c34:	3b 8f       	std	Y+27, r19	; 0x1b
   10c36:	0e 94 3a 71 	call	0xe274	; 0xe274 <_ZN13PinoccioScout10getPinModeEh>
   10c3a:	98 2e       	mov	r9, r24
   10c3c:	67 e0       	ldi	r22, 0x07	; 7
   10c3e:	80 ea       	ldi	r24, 0xA0	; 160
   10c40:	95 e3       	ldi	r25, 0x35	; 53
   10c42:	0e 94 3a 71 	call	0xe274	; 0xe274 <_ZN13PinoccioScout10getPinModeEh>
   10c46:	a8 2e       	mov	r10, r24
   10c48:	66 e0       	ldi	r22, 0x06	; 6
   10c4a:	80 ea       	ldi	r24, 0xA0	; 160
   10c4c:	95 e3       	ldi	r25, 0x35	; 53
   10c4e:	0e 94 3a 71 	call	0xe274	; 0xe274 <_ZN13PinoccioScout10getPinModeEh>
   10c52:	b8 2e       	mov	r11, r24
   10c54:	65 e0       	ldi	r22, 0x05	; 5
   10c56:	80 ea       	ldi	r24, 0xA0	; 160
   10c58:	95 e3       	ldi	r25, 0x35	; 53
   10c5a:	0e 94 3a 71 	call	0xe274	; 0xe274 <_ZN13PinoccioScout10getPinModeEh>
   10c5e:	c8 2e       	mov	r12, r24
   10c60:	64 e0       	ldi	r22, 0x04	; 4
   10c62:	80 ea       	ldi	r24, 0xA0	; 160
   10c64:	95 e3       	ldi	r25, 0x35	; 53
   10c66:	0e 94 3a 71 	call	0xe274	; 0xe274 <_ZN13PinoccioScout10getPinModeEh>
   10c6a:	d8 2e       	mov	r13, r24
   10c6c:	63 e0       	ldi	r22, 0x03	; 3
   10c6e:	80 ea       	ldi	r24, 0xA0	; 160
   10c70:	95 e3       	ldi	r25, 0x35	; 53
   10c72:	0e 94 3a 71 	call	0xe274	; 0xe274 <_ZN13PinoccioScout10getPinModeEh>
   10c76:	e8 2e       	mov	r14, r24
   10c78:	62 e0       	ldi	r22, 0x02	; 2
   10c7a:	80 ea       	ldi	r24, 0xA0	; 160
   10c7c:	95 e3       	ldi	r25, 0x35	; 53
   10c7e:	0e 94 3a 71 	call	0xe274	; 0xe274 <_ZN13PinoccioScout10getPinModeEh>
   10c82:	f8 2e       	mov	r15, r24
   10c84:	40 e0       	ldi	r20, 0x00	; 0
   10c86:	50 e0       	ldi	r21, 0x00	; 0
   10c88:	ba 01       	movw	r22, r20
   10c8a:	8a ee       	ldi	r24, 0xEA	; 234
   10c8c:	9a e1       	ldi	r25, 0x1A	; 26
   10c8e:	0e 94 2c 68 	call	0xd058	; 0xd058 <keyMap>
   10c92:	8f 8b       	std	Y+23, r24	; 0x17
   10c94:	98 8f       	std	Y+24, r25	; 0x18
   10c96:	40 e0       	ldi	r20, 0x00	; 0
   10c98:	50 e0       	ldi	r21, 0x00	; 0
   10c9a:	ba 01       	movw	r22, r20
   10c9c:	82 e5       	ldi	r24, 0x52	; 82
   10c9e:	91 e2       	ldi	r25, 0x21	; 33
   10ca0:	0e 94 2c 68 	call	0xd058	; 0xd058 <keyMap>
   10ca4:	89 8f       	std	Y+25, r24	; 0x19
   10ca6:	9a 8f       	std	Y+26, r25	; 0x1a
   10ca8:	40 e0       	ldi	r20, 0x00	; 0
   10caa:	50 e0       	ldi	r21, 0x00	; 0
   10cac:	ba 01       	movw	r22, r20
   10cae:	87 eb       	ldi	r24, 0xB7	; 183
   10cb0:	9b e1       	ldi	r25, 0x1B	; 27
   10cb2:	0e 94 2c 68 	call	0xd058	; 0xd058 <keyMap>
   10cb6:	4a 85       	ldd	r20, Y+10	; 0x0a
   10cb8:	4f 93       	push	r20
   10cba:	4f 92       	push	r4
   10cbc:	4c 85       	ldd	r20, Y+12	; 0x0c
   10cbe:	4f 93       	push	r20
   10cc0:	5f 92       	push	r5
   10cc2:	4e 85       	ldd	r20, Y+14	; 0x0e
   10cc4:	4f 93       	push	r20
   10cc6:	6f 92       	push	r6
   10cc8:	48 89       	ldd	r20, Y+16	; 0x10
   10cca:	4f 93       	push	r20
   10ccc:	7f 92       	push	r7
   10cce:	4a 89       	ldd	r20, Y+18	; 0x12
   10cd0:	4f 93       	push	r20
   10cd2:	8f 92       	push	r8
   10cd4:	4c 89       	ldd	r20, Y+20	; 0x14
   10cd6:	4f 93       	push	r20
   10cd8:	3b 8d       	ldd	r19, Y+27	; 0x1b
   10cda:	3f 93       	push	r19
   10cdc:	3e 89       	ldd	r19, Y+22	; 0x16
   10cde:	3f 93       	push	r19
   10ce0:	2c 8d       	ldd	r18, Y+28	; 0x1c
   10ce2:	2f 93       	push	r18
   10ce4:	49 2d       	mov	r20, r9
   10ce6:	55 27       	eor	r21, r21
   10ce8:	47 fd       	sbrc	r20, 7
   10cea:	50 95       	com	r21
   10cec:	5f 93       	push	r21
   10cee:	9f 92       	push	r9
   10cf0:	4a 2d       	mov	r20, r10
   10cf2:	55 27       	eor	r21, r21
   10cf4:	47 fd       	sbrc	r20, 7
   10cf6:	50 95       	com	r21
   10cf8:	5f 93       	push	r21
   10cfa:	af 92       	push	r10
   10cfc:	4b 2d       	mov	r20, r11
   10cfe:	55 27       	eor	r21, r21
   10d00:	47 fd       	sbrc	r20, 7
   10d02:	50 95       	com	r21
   10d04:	5f 93       	push	r21
   10d06:	bf 92       	push	r11
   10d08:	4c 2d       	mov	r20, r12
   10d0a:	55 27       	eor	r21, r21
   10d0c:	47 fd       	sbrc	r20, 7
   10d0e:	50 95       	com	r21
   10d10:	5f 93       	push	r21
   10d12:	cf 92       	push	r12
   10d14:	4d 2d       	mov	r20, r13
   10d16:	55 27       	eor	r21, r21
   10d18:	47 fd       	sbrc	r20, 7
   10d1a:	50 95       	com	r21
   10d1c:	5f 93       	push	r21
   10d1e:	df 92       	push	r13
   10d20:	4e 2d       	mov	r20, r14
   10d22:	55 27       	eor	r21, r21
   10d24:	47 fd       	sbrc	r20, 7
   10d26:	50 95       	com	r21
   10d28:	5f 93       	push	r21
   10d2a:	ef 92       	push	r14
   10d2c:	4f 2d       	mov	r20, r15
   10d2e:	55 27       	eor	r21, r21
   10d30:	47 fd       	sbrc	r20, 7
   10d32:	50 95       	com	r21
   10d34:	5f 93       	push	r21
   10d36:	ff 92       	push	r15
   10d38:	28 8d       	ldd	r18, Y+24	; 0x18
   10d3a:	2f 93       	push	r18
   10d3c:	3f 89       	ldd	r19, Y+23	; 0x17
   10d3e:	3f 93       	push	r19
   10d40:	2a 8d       	ldd	r18, Y+26	; 0x1a
   10d42:	2f 93       	push	r18
   10d44:	39 8d       	ldd	r19, Y+25	; 0x19
   10d46:	3f 93       	push	r19
   10d48:	9f 93       	push	r25
   10d4a:	8f 93       	push	r24
   10d4c:	84 e7       	ldi	r24, 0x74	; 116
   10d4e:	9b e1       	ldi	r25, 0x1B	; 27
   10d50:	9f 93       	push	r25
   10d52:	8f 93       	push	r24
   10d54:	1f 93       	push	r17
   10d56:	0f 93       	push	r16
   10d58:	0e 94 b2 ab 	call	0x15764	; 0x15764 <_ZN12StringBuffer13appendSprintfEPKcz>
   10d5c:	0f b6       	in	r0, 0x3f	; 63
   10d5e:	f8 94       	cli
   10d60:	de bf       	out	0x3e, r29	; 62
   10d62:	0f be       	out	0x3f, r0	; 63
   10d64:	cd bf       	out	0x3d, r28	; 61
   10d66:	a8 01       	movw	r20, r16
   10d68:	6b ee       	ldi	r22, 0xEB	; 235
   10d6a:	78 e3       	ldi	r23, 0x38	; 56
   10d6c:	c1 01       	movw	r24, r2
   10d6e:	0e 94 3f 7c 	call	0xf87e	; 0xf87e <_ZN20PinoccioScoutHandler6reportERK6String>
   10d72:	c8 01       	movw	r24, r16
   10d74:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   10d78:	c1 01       	movw	r24, r2
   10d7a:	6c 96       	adiw	r28, 0x1c	; 28
   10d7c:	0f b6       	in	r0, 0x3f	; 63
   10d7e:	f8 94       	cli
   10d80:	de bf       	out	0x3e, r29	; 62
   10d82:	0f be       	out	0x3f, r0	; 63
   10d84:	cd bf       	out	0x3d, r28	; 61
   10d86:	df 91       	pop	r29
   10d88:	cf 91       	pop	r28
   10d8a:	1f 91       	pop	r17
   10d8c:	0f 91       	pop	r16
   10d8e:	ff 90       	pop	r15
   10d90:	ef 90       	pop	r14
   10d92:	df 90       	pop	r13
   10d94:	cf 90       	pop	r12
   10d96:	bf 90       	pop	r11
   10d98:	af 90       	pop	r10
   10d9a:	9f 90       	pop	r9
   10d9c:	8f 90       	pop	r8
   10d9e:	7f 90       	pop	r7
   10da0:	6f 90       	pop	r6
   10da2:	5f 90       	pop	r5
   10da4:	4f 90       	pop	r4
   10da6:	3f 90       	pop	r3
   10da8:	2f 90       	pop	r2
   10daa:	08 95       	ret

00010dac <_ZL22digitalPinEventHandlerhaa>:
   10dac:	8f 92       	push	r8
   10dae:	9f 92       	push	r9
   10db0:	af 92       	push	r10
   10db2:	bf 92       	push	r11
   10db4:	cf 92       	push	r12
   10db6:	df 92       	push	r13
   10db8:	ef 92       	push	r14
   10dba:	ff 92       	push	r15
   10dbc:	0f 93       	push	r16
   10dbe:	1f 93       	push	r17
   10dc0:	cf 93       	push	r28
   10dc2:	df 93       	push	r29
   10dc4:	cd b7       	in	r28, 0x3d	; 61
   10dc6:	de b7       	in	r29, 0x3e	; 62
   10dc8:	e8 97       	sbiw	r28, 0x38	; 56
   10dca:	0f b6       	in	r0, 0x3f	; 63
   10dcc:	f8 94       	cli
   10dce:	de bf       	out	0x3e, r29	; 62
   10dd0:	0f be       	out	0x3f, r0	; 63
   10dd2:	cd bf       	out	0x3d, r28	; 61
   10dd4:	b8 2e       	mov	r11, r24
   10dd6:	96 2e       	mov	r9, r22
   10dd8:	a4 2e       	mov	r10, r20
   10dda:	0e 94 16 14 	call	0x282c	; 0x282c <millis>
   10dde:	6b 01       	movw	r12, r22
   10de0:	7c 01       	movw	r14, r24
   10de2:	8e 01       	movw	r16, r28
   10de4:	0f 5f       	subi	r16, 0xFF	; 255
   10de6:	1f 4f       	sbci	r17, 0xFF	; 255
   10de8:	c8 01       	movw	r24, r16
   10dea:	c3 de       	rcall	.-634    	; 0x10b72 <_ZL18digitalPinReportHQv>
   10dec:	c8 01       	movw	r24, r16
   10dee:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   10df2:	81 eb       	ldi	r24, 0xB1	; 177
   10df4:	9b e1       	ldi	r25, 0x1B	; 27
   10df6:	0e 94 0d 29 	call	0x521a	; 0x521a <_Z10findscriptPc>
   10dfa:	88 23       	and	r24, r24
   10dfc:	09 f4       	brne	.+2      	; 0x10e00 <_ZL22digitalPinEventHandlerhaa+0x54>
   10dfe:	5e c0       	rjmp	.+188    	; 0x10ebc <_ZL22digitalPinEventHandlerhaa+0x110>
   10e00:	4a e0       	ldi	r20, 0x0A	; 10
   10e02:	6a 2d       	mov	r22, r10
   10e04:	77 27       	eor	r23, r23
   10e06:	67 fd       	sbrc	r22, 7
   10e08:	70 95       	com	r23
   10e0a:	c8 01       	movw	r24, r16
   10e0c:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <_ZN6StringC1Eih>
   10e10:	4a e0       	ldi	r20, 0x0A	; 10
   10e12:	69 2d       	mov	r22, r9
   10e14:	77 27       	eor	r23, r23
   10e16:	67 fd       	sbrc	r22, 7
   10e18:	70 95       	com	r23
   10e1a:	ce 01       	movw	r24, r28
   10e1c:	81 96       	adiw	r24, 0x21	; 33
   10e1e:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <_ZN6StringC1Eih>
   10e22:	4a e0       	ldi	r20, 0x0A	; 10
   10e24:	6b 2d       	mov	r22, r11
   10e26:	ce 01       	movw	r24, r28
   10e28:	8d 96       	adiw	r24, 0x2d	; 45
   10e2a:	0e 94 50 18 	call	0x30a0	; 0x30a0 <_ZN6StringC1Ehh>
   10e2e:	6f eb       	ldi	r22, 0xBF	; 191
   10e30:	7b e1       	ldi	r23, 0x1B	; 27
   10e32:	ce 01       	movw	r24, r28
   10e34:	87 96       	adiw	r24, 0x27	; 39
   10e36:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <_ZN6StringC1EPKc>
   10e3a:	be 01       	movw	r22, r28
   10e3c:	63 5d       	subi	r22, 0xD3	; 211
   10e3e:	7f 4f       	sbci	r23, 0xFF	; 255
   10e40:	ce 01       	movw	r24, r28
   10e42:	87 96       	adiw	r24, 0x27	; 39
   10e44:	0e 94 9f 19 	call	0x333e	; 0x333e <_ZplRK15StringSumHelperRK6String>
   10e48:	63 ec       	ldi	r22, 0xC3	; 195
   10e4a:	7e e1       	ldi	r23, 0x1E	; 30
   10e4c:	0e 94 b0 19 	call	0x3360	; 0x3360 <_ZplRK15StringSumHelperPKc>
   10e50:	be 01       	movw	r22, r28
   10e52:	6f 5d       	subi	r22, 0xDF	; 223
   10e54:	7f 4f       	sbci	r23, 0xFF	; 255
   10e56:	0e 94 9f 19 	call	0x333e	; 0x333e <_ZplRK15StringSumHelperRK6String>
   10e5a:	63 ec       	ldi	r22, 0xC3	; 195
   10e5c:	7e e1       	ldi	r23, 0x1E	; 30
   10e5e:	0e 94 b0 19 	call	0x3360	; 0x3360 <_ZplRK15StringSumHelperPKc>
   10e62:	b8 01       	movw	r22, r16
   10e64:	0e 94 9f 19 	call	0x333e	; 0x333e <_ZplRK15StringSumHelperRK6String>
   10e68:	65 e6       	ldi	r22, 0x65	; 101
   10e6a:	7d e1       	ldi	r23, 0x1D	; 29
   10e6c:	0e 94 b0 19 	call	0x3360	; 0x3360 <_ZplRK15StringSumHelperPKc>
   10e70:	bc 01       	movw	r22, r24
   10e72:	ce 01       	movw	r24, r28
   10e74:	c3 96       	adiw	r24, 0x33	; 51
   10e76:	0e 94 32 18 	call	0x3064	; 0x3064 <_ZN6StringC1ERKS_>
   10e7a:	ce 01       	movw	r24, r28
   10e7c:	87 96       	adiw	r24, 0x27	; 39
   10e7e:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   10e82:	ce 01       	movw	r24, r28
   10e84:	8d 96       	adiw	r24, 0x2d	; 45
   10e86:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   10e8a:	ce 01       	movw	r24, r28
   10e8c:	81 96       	adiw	r24, 0x21	; 33
   10e8e:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   10e92:	c8 01       	movw	r24, r16
   10e94:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   10e98:	4f a9       	ldd	r20, Y+55	; 0x37
   10e9a:	58 ad       	ldd	r21, Y+56	; 0x38
   10e9c:	4f 5f       	subi	r20, 0xFF	; 255
   10e9e:	5f 4f       	sbci	r21, 0xFF	; 255
   10ea0:	20 e0       	ldi	r18, 0x00	; 0
   10ea2:	30 e0       	ldi	r19, 0x00	; 0
   10ea4:	b8 01       	movw	r22, r16
   10ea6:	ce 01       	movw	r24, r28
   10ea8:	c3 96       	adiw	r24, 0x33	; 51
   10eaa:	0e 94 da 19 	call	0x33b4	; 0x33b4 <_ZNK6String8getBytesEPhjj>
   10eae:	c8 01       	movw	r24, r16
   10eb0:	0e 94 59 35 	call	0x6ab2	; 0x6ab2 <_Z9doCommandPc>
   10eb4:	ce 01       	movw	r24, r28
   10eb6:	c3 96       	adiw	r24, 0x33	; 51
   10eb8:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   10ebc:	1f 92       	push	r1
   10ebe:	bf 92       	push	r11
   10ec0:	2e ec       	ldi	r18, 0xCE	; 206
   10ec2:	3b e1       	ldi	r19, 0x1B	; 27
   10ec4:	3f 93       	push	r19
   10ec6:	2f 93       	push	r18
   10ec8:	1f 92       	push	r1
   10eca:	70 e2       	ldi	r23, 0x20	; 32
   10ecc:	87 2e       	mov	r8, r23
   10ece:	8f 92       	push	r8
   10ed0:	1f 93       	push	r17
   10ed2:	0f 93       	push	r16
   10ed4:	0e 94 1d b6 	call	0x16c3a	; 0x16c3a <snprintf>
   10ed8:	c8 01       	movw	r24, r16
   10eda:	0e 94 0d 29 	call	0x521a	; 0x521a <_Z10findscriptPc>
   10ede:	0f b6       	in	r0, 0x3f	; 63
   10ee0:	f8 94       	cli
   10ee2:	de bf       	out	0x3e, r29	; 62
   10ee4:	0f be       	out	0x3f, r0	; 63
   10ee6:	cd bf       	out	0x3d, r28	; 61
   10ee8:	88 23       	and	r24, r24
   10eea:	01 f1       	breq	.+64     	; 0x10f2c <_ZL22digitalPinEventHandlerhaa+0x180>
   10eec:	8a 2d       	mov	r24, r10
   10eee:	99 27       	eor	r25, r25
   10ef0:	87 fd       	sbrc	r24, 7
   10ef2:	90 95       	com	r25
   10ef4:	9f 93       	push	r25
   10ef6:	af 92       	push	r10
   10ef8:	89 2d       	mov	r24, r9
   10efa:	99 27       	eor	r25, r25
   10efc:	87 fd       	sbrc	r24, 7
   10efe:	90 95       	com	r25
   10f00:	9f 93       	push	r25
   10f02:	9f 92       	push	r9
   10f04:	1f 92       	push	r1
   10f06:	bf 92       	push	r11
   10f08:	2e ed       	ldi	r18, 0xDE	; 222
   10f0a:	3b e1       	ldi	r19, 0x1B	; 27
   10f0c:	3f 93       	push	r19
   10f0e:	2f 93       	push	r18
   10f10:	1f 92       	push	r1
   10f12:	8f 92       	push	r8
   10f14:	1f 93       	push	r17
   10f16:	0f 93       	push	r16
   10f18:	0e 94 1d b6 	call	0x16c3a	; 0x16c3a <snprintf>
   10f1c:	c8 01       	movw	r24, r16
   10f1e:	0e 94 59 35 	call	0x6ab2	; 0x6ab2 <_Z9doCommandPc>
   10f22:	0f b6       	in	r0, 0x3f	; 63
   10f24:	f8 94       	cli
   10f26:	de bf       	out	0x3e, r29	; 62
   10f28:	0f be       	out	0x3f, r0	; 63
   10f2a:	cd bf       	out	0x3d, r28	; 61
   10f2c:	91 10       	cpse	r9, r1
   10f2e:	1d c0       	rjmp	.+58     	; 0x10f6a <_ZL22digitalPinEventHandlerhaa+0x1be>
   10f30:	8a 2d       	mov	r24, r10
   10f32:	8d 7f       	andi	r24, 0xFD	; 253
   10f34:	d1 f4       	brne	.+52     	; 0x10f6a <_ZL22digitalPinEventHandlerhaa+0x1be>
   10f36:	1f 92       	push	r1
   10f38:	bf 92       	push	r11
   10f3a:	86 ef       	ldi	r24, 0xF6	; 246
   10f3c:	9b e1       	ldi	r25, 0x1B	; 27
   10f3e:	9f 93       	push	r25
   10f40:	8f 93       	push	r24
   10f42:	1f 92       	push	r1
   10f44:	80 e2       	ldi	r24, 0x20	; 32
   10f46:	8f 93       	push	r24
   10f48:	1f 93       	push	r17
   10f4a:	0f 93       	push	r16
   10f4c:	0e 94 1d b6 	call	0x16c3a	; 0x16c3a <snprintf>
   10f50:	c8 01       	movw	r24, r16
   10f52:	0e 94 0d 29 	call	0x521a	; 0x521a <_Z10findscriptPc>
   10f56:	0f b6       	in	r0, 0x3f	; 63
   10f58:	f8 94       	cli
   10f5a:	de bf       	out	0x3e, r29	; 62
   10f5c:	0f be       	out	0x3f, r0	; 63
   10f5e:	cd bf       	out	0x3d, r28	; 61
   10f60:	88 23       	and	r24, r24
   10f62:	19 f0       	breq	.+6      	; 0x10f6a <_ZL22digitalPinEventHandlerhaa+0x1be>
   10f64:	c8 01       	movw	r24, r16
   10f66:	0e 94 59 35 	call	0x6ab2	; 0x6ab2 <_Z9doCommandPc>
   10f6a:	80 91 eb 35 	lds	r24, 0x35EB
   10f6e:	88 23       	and	r24, r24
   10f70:	d1 f0       	breq	.+52     	; 0x10fa6 <_ZL22digitalPinEventHandlerhaa+0x1fa>
   10f72:	61 ec       	ldi	r22, 0xC1	; 193
   10f74:	76 e1       	ldi	r23, 0x16	; 22
   10f76:	84 e0       	ldi	r24, 0x04	; 4
   10f78:	94 e2       	ldi	r25, 0x24	; 36
   10f7a:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
   10f7e:	0e 94 16 14 	call	0x282c	; 0x282c <millis>
   10f82:	ab 01       	movw	r20, r22
   10f84:	bc 01       	movw	r22, r24
   10f86:	4c 19       	sub	r20, r12
   10f88:	5d 09       	sbc	r21, r13
   10f8a:	6e 09       	sbc	r22, r14
   10f8c:	7f 09       	sbc	r23, r15
   10f8e:	2a e0       	ldi	r18, 0x0A	; 10
   10f90:	30 e0       	ldi	r19, 0x00	; 0
   10f92:	84 e0       	ldi	r24, 0x04	; 4
   10f94:	94 e2       	ldi	r25, 0x24	; 36
   10f96:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <_ZN5Print5printEmi>
   10f9a:	6e eb       	ldi	r22, 0xBE	; 190
   10f9c:	76 e1       	ldi	r23, 0x16	; 22
   10f9e:	84 e0       	ldi	r24, 0x04	; 4
   10fa0:	94 e2       	ldi	r25, 0x24	; 36
   10fa2:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <_ZN5Print7printlnEPK19__FlashStringHelper>
   10fa6:	e8 96       	adiw	r28, 0x38	; 56
   10fa8:	0f b6       	in	r0, 0x3f	; 63
   10faa:	f8 94       	cli
   10fac:	de bf       	out	0x3e, r29	; 62
   10fae:	0f be       	out	0x3f, r0	; 63
   10fb0:	cd bf       	out	0x3d, r28	; 61
   10fb2:	df 91       	pop	r29
   10fb4:	cf 91       	pop	r28
   10fb6:	1f 91       	pop	r17
   10fb8:	0f 91       	pop	r16
   10fba:	ff 90       	pop	r15
   10fbc:	ef 90       	pop	r14
   10fbe:	df 90       	pop	r13
   10fc0:	cf 90       	pop	r12
   10fc2:	bf 90       	pop	r11
   10fc4:	af 90       	pop	r10
   10fc6:	9f 90       	pop	r9
   10fc8:	8f 90       	pop	r8
   10fca:	08 95       	ret

00010fcc <_ZL9wifiStatsv>:
   10fcc:	cf 93       	push	r28
   10fce:	df 93       	push	r29
   10fd0:	00 d0       	rcall	.+0      	; 0x10fd2 <_ZL9wifiStatsv+0x6>
   10fd2:	00 d0       	rcall	.+0      	; 0x10fd4 <_ZL9wifiStatsv+0x8>
   10fd4:	cd b7       	in	r28, 0x3d	; 61
   10fd6:	de b7       	in	r29, 0x3e	; 62
   10fd8:	65 e9       	ldi	r22, 0x95	; 149
   10fda:	76 e1       	ldi	r23, 0x16	; 22
   10fdc:	ce 01       	movw	r24, r28
   10fde:	01 96       	adiw	r24, 0x01	; 1
   10fe0:	0e 94 4a 19 	call	0x3294	; 0x3294 <_ZN6StringC1EPK19__FlashStringHelper>
   10fe4:	ce 01       	movw	r24, r28
   10fe6:	01 96       	adiw	r24, 0x01	; 1
   10fe8:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <_Z2spRK6String>
   10fec:	ce 01       	movw	r24, r28
   10fee:	01 96       	adiw	r24, 0x01	; 1
   10ff0:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   10ff4:	80 91 06 36 	lds	r24, 0x3606
   10ff8:	90 91 07 36 	lds	r25, 0x3607
   10ffc:	0e 94 7d 1f 	call	0x3efa	; 0x3efa <_Z5speolj>
   11000:	6c e6       	ldi	r22, 0x6C	; 108
   11002:	76 e1       	ldi	r23, 0x16	; 22
   11004:	ce 01       	movw	r24, r28
   11006:	01 96       	adiw	r24, 0x01	; 1
   11008:	0e 94 4a 19 	call	0x3294	; 0x3294 <_ZN6StringC1EPK19__FlashStringHelper>
   1100c:	ce 01       	movw	r24, r28
   1100e:	01 96       	adiw	r24, 0x01	; 1
   11010:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <_Z2spRK6String>
   11014:	ce 01       	movw	r24, r28
   11016:	01 96       	adiw	r24, 0x01	; 1
   11018:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   1101c:	80 91 08 36 	lds	r24, 0x3608
   11020:	90 91 09 36 	lds	r25, 0x3609
   11024:	0e 94 7d 1f 	call	0x3efa	; 0x3efa <_Z5speolj>
   11028:	26 96       	adiw	r28, 0x06	; 6
   1102a:	0f b6       	in	r0, 0x3f	; 63
   1102c:	f8 94       	cli
   1102e:	de bf       	out	0x3e, r29	; 62
   11030:	0f be       	out	0x3f, r0	; 63
   11032:	cd bf       	out	0x3d, r28	; 61
   11034:	df 91       	pop	r29
   11036:	cf 91       	pop	r28
   11038:	08 95       	ret

0001103a <_ZL15analogPinReportv>:
   1103a:	cf 93       	push	r28
   1103c:	df 93       	push	r29
   1103e:	cd b7       	in	r28, 0x3d	; 61
   11040:	de b7       	in	r29, 0x3e	; 62
   11042:	28 97       	sbiw	r28, 0x08	; 8
   11044:	0f b6       	in	r0, 0x3f	; 63
   11046:	f8 94       	cli
   11048:	de bf       	out	0x3e, r29	; 62
   1104a:	0f be       	out	0x3f, r0	; 63
   1104c:	cd bf       	out	0x3d, r28	; 61
   1104e:	ce 01       	movw	r24, r28
   11050:	01 96       	adiw	r24, 0x01	; 1
   11052:	7d db       	rcall	.-2310   	; 0x1074e <_ZL17analogPinReportHQv>
   11054:	ce 01       	movw	r24, r28
   11056:	01 96       	adiw	r24, 0x01	; 1
   11058:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <_Z5speolRK6String>
   1105c:	ce 01       	movw	r24, r28
   1105e:	01 96       	adiw	r24, 0x01	; 1
   11060:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   11064:	61 e0       	ldi	r22, 0x01	; 1
   11066:	70 e0       	ldi	r23, 0x00	; 0
   11068:	80 e0       	ldi	r24, 0x00	; 0
   1106a:	90 e0       	ldi	r25, 0x00	; 0
   1106c:	28 96       	adiw	r28, 0x08	; 8
   1106e:	0f b6       	in	r0, 0x3f	; 63
   11070:	f8 94       	cli
   11072:	de bf       	out	0x3e, r29	; 62
   11074:	0f be       	out	0x3f, r0	; 63
   11076:	cd bf       	out	0x3d, r28	; 61
   11078:	df 91       	pop	r29
   1107a:	cf 91       	pop	r28
   1107c:	08 95       	ret

0001107e <_ZL16digitalPinReportv>:
   1107e:	cf 93       	push	r28
   11080:	df 93       	push	r29
   11082:	cd b7       	in	r28, 0x3d	; 61
   11084:	de b7       	in	r29, 0x3e	; 62
   11086:	28 97       	sbiw	r28, 0x08	; 8
   11088:	0f b6       	in	r0, 0x3f	; 63
   1108a:	f8 94       	cli
   1108c:	de bf       	out	0x3e, r29	; 62
   1108e:	0f be       	out	0x3f, r0	; 63
   11090:	cd bf       	out	0x3d, r28	; 61
   11092:	ce 01       	movw	r24, r28
   11094:	01 96       	adiw	r24, 0x01	; 1
   11096:	6d dd       	rcall	.-1318   	; 0x10b72 <_ZL18digitalPinReportHQv>
   11098:	ce 01       	movw	r24, r28
   1109a:	01 96       	adiw	r24, 0x01	; 1
   1109c:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <_Z5speolRK6String>
   110a0:	ce 01       	movw	r24, r28
   110a2:	01 96       	adiw	r24, 0x01	; 1
   110a4:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   110a8:	61 e0       	ldi	r22, 0x01	; 1
   110aa:	70 e0       	ldi	r23, 0x00	; 0
   110ac:	80 e0       	ldi	r24, 0x00	; 0
   110ae:	90 e0       	ldi	r25, 0x00	; 0
   110b0:	28 96       	adiw	r28, 0x08	; 8
   110b2:	0f b6       	in	r0, 0x3f	; 63
   110b4:	f8 94       	cli
   110b6:	de bf       	out	0x3e, r29	; 62
   110b8:	0f be       	out	0x3f, r0	; 63
   110ba:	cd bf       	out	0x3d, r28	; 61
   110bc:	df 91       	pop	r29
   110be:	cf 91       	pop	r28
   110c0:	08 95       	ret

000110c2 <_ZL9ledReportv>:
   110c2:	cf 93       	push	r28
   110c4:	df 93       	push	r29
   110c6:	cd b7       	in	r28, 0x3d	; 61
   110c8:	de b7       	in	r29, 0x3e	; 62
   110ca:	28 97       	sbiw	r28, 0x08	; 8
   110cc:	0f b6       	in	r0, 0x3f	; 63
   110ce:	f8 94       	cli
   110d0:	de bf       	out	0x3e, r29	; 62
   110d2:	0f be       	out	0x3f, r0	; 63
   110d4:	cd bf       	out	0x3d, r28	; 61
   110d6:	ce 01       	movw	r24, r28
   110d8:	01 96       	adiw	r24, 0x01	; 1
   110da:	ad d8       	rcall	.-3750   	; 0x10236 <_ZL11ledReportHQv>
   110dc:	ce 01       	movw	r24, r28
   110de:	01 96       	adiw	r24, 0x01	; 1
   110e0:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <_Z5speolRK6String>
   110e4:	ce 01       	movw	r24, r28
   110e6:	01 96       	adiw	r24, 0x01	; 1
   110e8:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   110ec:	61 e0       	ldi	r22, 0x01	; 1
   110ee:	70 e0       	ldi	r23, 0x00	; 0
   110f0:	80 e0       	ldi	r24, 0x00	; 0
   110f2:	90 e0       	ldi	r25, 0x00	; 0
   110f4:	28 96       	adiw	r28, 0x08	; 8
   110f6:	0f b6       	in	r0, 0x3f	; 63
   110f8:	f8 94       	cli
   110fa:	de bf       	out	0x3e, r29	; 62
   110fc:	0f be       	out	0x3f, r0	; 63
   110fe:	cd bf       	out	0x3d, r28	; 61
   11100:	df 91       	pop	r29
   11102:	cf 91       	pop	r28
   11104:	08 95       	ret

00011106 <_ZL11powerReportv>:
   11106:	cf 93       	push	r28
   11108:	df 93       	push	r29
   1110a:	cd b7       	in	r28, 0x3d	; 61
   1110c:	de b7       	in	r29, 0x3e	; 62
   1110e:	28 97       	sbiw	r28, 0x08	; 8
   11110:	0f b6       	in	r0, 0x3f	; 63
   11112:	f8 94       	cli
   11114:	de bf       	out	0x3e, r29	; 62
   11116:	0f be       	out	0x3f, r0	; 63
   11118:	cd bf       	out	0x3d, r28	; 61
   1111a:	ce 01       	movw	r24, r28
   1111c:	01 96       	adiw	r24, 0x01	; 1
   1111e:	5a da       	rcall	.-2892   	; 0x105d4 <_ZL13powerReportHQv>
   11120:	ce 01       	movw	r24, r28
   11122:	01 96       	adiw	r24, 0x01	; 1
   11124:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <_Z5speolRK6String>
   11128:	ce 01       	movw	r24, r28
   1112a:	01 96       	adiw	r24, 0x01	; 1
   1112c:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   11130:	61 e0       	ldi	r22, 0x01	; 1
   11132:	70 e0       	ldi	r23, 0x00	; 0
   11134:	80 e0       	ldi	r24, 0x00	; 0
   11136:	90 e0       	ldi	r25, 0x00	; 0
   11138:	28 96       	adiw	r28, 0x08	; 8
   1113a:	0f b6       	in	r0, 0x3f	; 63
   1113c:	f8 94       	cli
   1113e:	de bf       	out	0x3e, r29	; 62
   11140:	0f be       	out	0x3f, r0	; 63
   11142:	cd bf       	out	0x3d, r28	; 61
   11144:	df 91       	pop	r29
   11146:	cf 91       	pop	r28
   11148:	08 95       	ret

0001114a <_ZL16wifiDisassociatev>:
   1114a:	87 ef       	ldi	r24, 0xF7	; 247
   1114c:	95 e3       	ldi	r25, 0x35	; 53
   1114e:	0e 94 77 67 	call	0xceee	; 0xceee <_ZN12WiFiBackpack12disassociateEv>
   11152:	61 e0       	ldi	r22, 0x01	; 1
   11154:	70 e0       	ldi	r23, 0x00	; 0
   11156:	80 e0       	ldi	r24, 0x00	; 0
   11158:	90 e0       	ldi	r25, 0x00	; 0
   1115a:	08 95       	ret

0001115c <_ZL15wifiReassociatev>:
   1115c:	87 ef       	ldi	r24, 0xF7	; 247
   1115e:	95 e3       	ldi	r25, 0x35	; 53
   11160:	0e 94 a9 66 	call	0xcd52	; 0xcd52 <_ZN12WiFiBackpack13autoConnectHqEv>
   11164:	68 2f       	mov	r22, r24
   11166:	70 e0       	ldi	r23, 0x00	; 0
   11168:	80 e0       	ldi	r24, 0x00	; 0
   1116a:	90 e0       	ldi	r25, 0x00	; 0
   1116c:	08 95       	ret

0001116e <_ZL10wifiStaticv>:
   1116e:	0f 93       	push	r16
   11170:	1f 93       	push	r17
   11172:	cf 93       	push	r28
   11174:	df 93       	push	r29
   11176:	cd b7       	in	r28, 0x3d	; 61
   11178:	de b7       	in	r29, 0x3e	; 62
   1117a:	e0 97       	sbiw	r28, 0x30	; 48
   1117c:	0f b6       	in	r0, 0x3f	; 63
   1117e:	f8 94       	cli
   11180:	de bf       	out	0x3e, r29	; 62
   11182:	0f be       	out	0x3f, r0	; 63
   11184:	cd bf       	out	0x3d, r28	; 61
   11186:	ce 01       	movw	r24, r28
   11188:	8b 96       	adiw	r24, 0x2b	; 43
   1118a:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <_ZN9IPAddressC1Ev>
   1118e:	ce 01       	movw	r24, r28
   11190:	85 96       	adiw	r24, 0x25	; 37
   11192:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <_ZN9IPAddressC1Ev>
   11196:	ce 01       	movw	r24, r28
   11198:	4f 96       	adiw	r24, 0x1f	; 31
   1119a:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <_ZN9IPAddressC1Ev>
   1119e:	ce 01       	movw	r24, r28
   111a0:	49 96       	adiw	r24, 0x19	; 25
   111a2:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <_ZN9IPAddressC1Ev>
   111a6:	61 e0       	ldi	r22, 0x01	; 1
   111a8:	70 e0       	ldi	r23, 0x00	; 0
   111aa:	80 e0       	ldi	r24, 0x00	; 0
   111ac:	90 e0       	ldi	r25, 0x00	; 0
   111ae:	0e 94 8f 24 	call	0x491e	; 0x491e <_Z12getstringargl>
   111b2:	40 e0       	ldi	r20, 0x00	; 0
   111b4:	50 e0       	ldi	r21, 0x00	; 0
   111b6:	ce 01       	movw	r24, r28
   111b8:	8b 96       	adiw	r24, 0x2b	; 43
   111ba:	0e 94 cc 37 	call	0x6f98	; 0x6f98 <_ZN6GSCore14parseIpAddressEP9IPAddressPKcj>
   111be:	81 11       	cpse	r24, r1
   111c0:	03 c0       	rjmp	.+6      	; 0x111c8 <_ZL10wifiStaticv+0x5a>
   111c2:	66 e7       	ldi	r22, 0x76	; 118
   111c4:	75 e1       	ldi	r23, 0x15	; 21
   111c6:	32 c0       	rjmp	.+100    	; 0x1122c <_ZL10wifiStaticv+0xbe>
   111c8:	62 e0       	ldi	r22, 0x02	; 2
   111ca:	70 e0       	ldi	r23, 0x00	; 0
   111cc:	80 e0       	ldi	r24, 0x00	; 0
   111ce:	90 e0       	ldi	r25, 0x00	; 0
   111d0:	0e 94 8f 24 	call	0x491e	; 0x491e <_Z12getstringargl>
   111d4:	40 e0       	ldi	r20, 0x00	; 0
   111d6:	50 e0       	ldi	r21, 0x00	; 0
   111d8:	ce 01       	movw	r24, r28
   111da:	85 96       	adiw	r24, 0x25	; 37
   111dc:	0e 94 cc 37 	call	0x6f98	; 0x6f98 <_ZN6GSCore14parseIpAddressEP9IPAddressPKcj>
   111e0:	81 11       	cpse	r24, r1
   111e2:	03 c0       	rjmp	.+6      	; 0x111ea <_ZL10wifiStaticv+0x7c>
   111e4:	6f e5       	ldi	r22, 0x5F	; 95
   111e6:	75 e1       	ldi	r23, 0x15	; 21
   111e8:	21 c0       	rjmp	.+66     	; 0x1122c <_ZL10wifiStaticv+0xbe>
   111ea:	63 e0       	ldi	r22, 0x03	; 3
   111ec:	70 e0       	ldi	r23, 0x00	; 0
   111ee:	80 e0       	ldi	r24, 0x00	; 0
   111f0:	90 e0       	ldi	r25, 0x00	; 0
   111f2:	0e 94 8f 24 	call	0x491e	; 0x491e <_Z12getstringargl>
   111f6:	40 e0       	ldi	r20, 0x00	; 0
   111f8:	50 e0       	ldi	r21, 0x00	; 0
   111fa:	ce 01       	movw	r24, r28
   111fc:	4f 96       	adiw	r24, 0x1f	; 31
   111fe:	0e 94 cc 37 	call	0x6f98	; 0x6f98 <_ZN6GSCore14parseIpAddressEP9IPAddressPKcj>
   11202:	81 11       	cpse	r24, r1
   11204:	03 c0       	rjmp	.+6      	; 0x1120c <_ZL10wifiStaticv+0x9e>
   11206:	68 e4       	ldi	r22, 0x48	; 72
   11208:	75 e1       	ldi	r23, 0x15	; 21
   1120a:	10 c0       	rjmp	.+32     	; 0x1122c <_ZL10wifiStaticv+0xbe>
   1120c:	63 e0       	ldi	r22, 0x03	; 3
   1120e:	70 e0       	ldi	r23, 0x00	; 0
   11210:	80 e0       	ldi	r24, 0x00	; 0
   11212:	90 e0       	ldi	r25, 0x00	; 0
   11214:	0e 94 8f 24 	call	0x491e	; 0x491e <_Z12getstringargl>
   11218:	40 e0       	ldi	r20, 0x00	; 0
   1121a:	50 e0       	ldi	r21, 0x00	; 0
   1121c:	ce 01       	movw	r24, r28
   1121e:	49 96       	adiw	r24, 0x19	; 25
   11220:	0e 94 cc 37 	call	0x6f98	; 0x6f98 <_ZN6GSCore14parseIpAddressEP9IPAddressPKcj>
   11224:	81 11       	cpse	r24, r1
   11226:	0d c0       	rjmp	.+26     	; 0x11242 <_ZL10wifiStaticv+0xd4>
   11228:	6e e2       	ldi	r22, 0x2E	; 46
   1122a:	75 e1       	ldi	r23, 0x15	; 21
   1122c:	ce 01       	movw	r24, r28
   1122e:	01 96       	adiw	r24, 0x01	; 1
   11230:	0e 94 4a 19 	call	0x3294	; 0x3294 <_ZN6StringC1EPK19__FlashStringHelper>
   11234:	ce 01       	movw	r24, r28
   11236:	01 96       	adiw	r24, 0x01	; 1
   11238:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <_Z5speolRK6String>
   1123c:	ce 01       	movw	r24, r28
   1123e:	01 96       	adiw	r24, 0x01	; 1
   11240:	45 c0       	rjmp	.+138    	; 0x112cc <_ZL10wifiStaticv+0x15e>
   11242:	24 e6       	ldi	r18, 0x64	; 100
   11244:	3c e0       	ldi	r19, 0x0C	; 12
   11246:	3a 83       	std	Y+2, r19	; 0x02
   11248:	29 83       	std	Y+1, r18	; 0x01
   1124a:	8b 8d       	ldd	r24, Y+27	; 0x1b
   1124c:	9c 8d       	ldd	r25, Y+28	; 0x1c
   1124e:	ad 8d       	ldd	r26, Y+29	; 0x1d
   11250:	be 8d       	ldd	r27, Y+30	; 0x1e
   11252:	8b 83       	std	Y+3, r24	; 0x03
   11254:	9c 83       	std	Y+4, r25	; 0x04
   11256:	ad 83       	std	Y+5, r26	; 0x05
   11258:	be 83       	std	Y+6, r27	; 0x06
   1125a:	38 87       	std	Y+8, r19	; 0x08
   1125c:	2f 83       	std	Y+7, r18	; 0x07
   1125e:	89 a1       	ldd	r24, Y+33	; 0x21
   11260:	9a a1       	ldd	r25, Y+34	; 0x22
   11262:	ab a1       	ldd	r26, Y+35	; 0x23
   11264:	bc a1       	ldd	r27, Y+36	; 0x24
   11266:	89 87       	std	Y+9, r24	; 0x09
   11268:	9a 87       	std	Y+10, r25	; 0x0a
   1126a:	ab 87       	std	Y+11, r26	; 0x0b
   1126c:	bc 87       	std	Y+12, r27	; 0x0c
   1126e:	3e 87       	std	Y+14, r19	; 0x0e
   11270:	2d 87       	std	Y+13, r18	; 0x0d
   11272:	8f a1       	ldd	r24, Y+39	; 0x27
   11274:	98 a5       	ldd	r25, Y+40	; 0x28
   11276:	a9 a5       	ldd	r26, Y+41	; 0x29
   11278:	ba a5       	ldd	r27, Y+42	; 0x2a
   1127a:	8f 87       	std	Y+15, r24	; 0x0f
   1127c:	98 8b       	std	Y+16, r25	; 0x10
   1127e:	a9 8b       	std	Y+17, r26	; 0x11
   11280:	ba 8b       	std	Y+18, r27	; 0x12
   11282:	3c 8b       	std	Y+20, r19	; 0x14
   11284:	2b 8b       	std	Y+19, r18	; 0x13
   11286:	8d a5       	ldd	r24, Y+45	; 0x2d
   11288:	9e a5       	ldd	r25, Y+46	; 0x2e
   1128a:	af a5       	ldd	r26, Y+47	; 0x2f
   1128c:	b8 a9       	ldd	r27, Y+48	; 0x30
   1128e:	8d 8b       	std	Y+21, r24	; 0x15
   11290:	9e 8b       	std	Y+22, r25	; 0x16
   11292:	af 8b       	std	Y+23, r26	; 0x17
   11294:	b8 8f       	std	Y+24, r27	; 0x18
   11296:	8e 01       	movw	r16, r28
   11298:	0f 5f       	subi	r16, 0xFF	; 255
   1129a:	1f 4f       	sbci	r17, 0xFF	; 255
   1129c:	9e 01       	movw	r18, r28
   1129e:	29 5f       	subi	r18, 0xF9	; 249
   112a0:	3f 4f       	sbci	r19, 0xFF	; 255
   112a2:	ae 01       	movw	r20, r28
   112a4:	43 5f       	subi	r20, 0xF3	; 243
   112a6:	5f 4f       	sbci	r21, 0xFF	; 255
   112a8:	be 01       	movw	r22, r28
   112aa:	6d 5e       	subi	r22, 0xED	; 237
   112ac:	7f 4f       	sbci	r23, 0xFF	; 255
   112ae:	87 ef       	ldi	r24, 0xF7	; 247
   112b0:	95 e3       	ldi	r25, 0x35	; 53
   112b2:	0e 94 4d 66 	call	0xcc9a	; 0xcc9a <_ZN12WiFiBackpack10wifiStaticE9IPAddressS0_S0_S0_>
   112b6:	81 11       	cpse	r24, r1
   112b8:	0f c0       	rjmp	.+30     	; 0x112d8 <_ZL10wifiStaticv+0x16a>
   112ba:	6b ef       	ldi	r22, 0xFB	; 251
   112bc:	74 e1       	ldi	r23, 0x14	; 20
   112be:	c8 01       	movw	r24, r16
   112c0:	0e 94 4a 19 	call	0x3294	; 0x3294 <_ZN6StringC1EPK19__FlashStringHelper>
   112c4:	c8 01       	movw	r24, r16
   112c6:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <_Z5speolRK6String>
   112ca:	c8 01       	movw	r24, r16
   112cc:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   112d0:	60 e0       	ldi	r22, 0x00	; 0
   112d2:	70 e0       	ldi	r23, 0x00	; 0
   112d4:	cb 01       	movw	r24, r22
   112d6:	04 c0       	rjmp	.+8      	; 0x112e0 <_ZL10wifiStaticv+0x172>
   112d8:	61 e0       	ldi	r22, 0x01	; 1
   112da:	70 e0       	ldi	r23, 0x00	; 0
   112dc:	80 e0       	ldi	r24, 0x00	; 0
   112de:	90 e0       	ldi	r25, 0x00	; 0
   112e0:	e0 96       	adiw	r28, 0x30	; 48
   112e2:	0f b6       	in	r0, 0x3f	; 63
   112e4:	f8 94       	cli
   112e6:	de bf       	out	0x3e, r29	; 62
   112e8:	0f be       	out	0x3f, r0	; 63
   112ea:	cd bf       	out	0x3d, r28	; 61
   112ec:	df 91       	pop	r29
   112ee:	cf 91       	pop	r28
   112f0:	1f 91       	pop	r17
   112f2:	0f 91       	pop	r16
   112f4:	08 95       	ret

000112f6 <_ZL15setEventVerbosev>:
   112f6:	61 e0       	ldi	r22, 0x01	; 1
   112f8:	70 e0       	ldi	r23, 0x00	; 0
   112fa:	80 e0       	ldi	r24, 0x00	; 0
   112fc:	90 e0       	ldi	r25, 0x00	; 0
   112fe:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   11302:	21 e0       	ldi	r18, 0x01	; 1
   11304:	67 2b       	or	r22, r23
   11306:	68 2b       	or	r22, r24
   11308:	69 2b       	or	r22, r25
   1130a:	09 f4       	brne	.+2      	; 0x1130e <_ZL15setEventVerbosev+0x18>
   1130c:	20 e0       	ldi	r18, 0x00	; 0
   1130e:	20 93 eb 35 	sts	0x35EB, r18
   11312:	61 e0       	ldi	r22, 0x01	; 1
   11314:	70 e0       	ldi	r23, 0x00	; 0
   11316:	80 e0       	ldi	r24, 0x00	; 0
   11318:	90 e0       	ldi	r25, 0x00	; 0
   1131a:	08 95       	ret

0001131c <_ZL11meshVerbosev>:
   1131c:	61 e0       	ldi	r22, 0x01	; 1
   1131e:	70 e0       	ldi	r23, 0x00	; 0
   11320:	80 e0       	ldi	r24, 0x00	; 0
   11322:	90 e0       	ldi	r25, 0x00	; 0
   11324:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   11328:	21 e0       	ldi	r18, 0x01	; 1
   1132a:	67 2b       	or	r22, r23
   1132c:	68 2b       	or	r22, r24
   1132e:	69 2b       	or	r22, r25
   11330:	09 f4       	brne	.+2      	; 0x11334 <_ZL11meshVerbosev+0x18>
   11332:	20 e0       	ldi	r18, 0x00	; 0
   11334:	20 93 ed 39 	sts	0x39ED, r18
   11338:	61 e0       	ldi	r22, 0x01	; 1
   1133a:	70 e0       	ldi	r23, 0x00	; 0
   1133c:	80 e0       	ldi	r24, 0x00	; 0
   1133e:	90 e0       	ldi	r25, 0x00	; 0
   11340:	08 95       	ret

00011342 <_ZL10wifiReportv>:
   11342:	8f 92       	push	r8
   11344:	9f 92       	push	r9
   11346:	af 92       	push	r10
   11348:	bf 92       	push	r11
   1134a:	cf 92       	push	r12
   1134c:	df 92       	push	r13
   1134e:	ef 92       	push	r14
   11350:	ff 92       	push	r15
   11352:	0f 93       	push	r16
   11354:	1f 93       	push	r17
   11356:	cf 93       	push	r28
   11358:	df 93       	push	r29
   1135a:	cd b7       	in	r28, 0x3d	; 61
   1135c:	de b7       	in	r29, 0x3e	; 62
   1135e:	60 97       	sbiw	r28, 0x10	; 16
   11360:	0f b6       	in	r0, 0x3f	; 63
   11362:	f8 94       	cli
   11364:	de bf       	out	0x3e, r29	; 62
   11366:	0f be       	out	0x3f, r0	; 63
   11368:	cd bf       	out	0x3d, r28	; 61
   1136a:	41 e0       	ldi	r20, 0x01	; 1
   1136c:	50 e0       	ldi	r21, 0x00	; 0
   1136e:	64 e6       	ldi	r22, 0x64	; 100
   11370:	70 e0       	ldi	r23, 0x00	; 0
   11372:	8e 01       	movw	r16, r28
   11374:	0f 5f       	subi	r16, 0xFF	; 255
   11376:	1f 4f       	sbci	r17, 0xFF	; 255
   11378:	c8 01       	movw	r24, r16
   1137a:	0e 94 8d ab 	call	0x1571a	; 0x1571a <_ZN12StringBufferC1Ejj>
   1137e:	87 ef       	ldi	r24, 0xF7	; 247
   11380:	95 e3       	ldi	r25, 0x35	; 53
   11382:	0e 94 a6 67 	call	0xcf4c	; 0xcf4c <_ZN12WiFiBackpack13isHQConnectedEv>
   11386:	88 23       	and	r24, r24
   11388:	29 f0       	breq	.+10     	; 0x11394 <_ZL10wifiReportv+0x52>
   1138a:	ba ec       	ldi	r27, 0xCA	; 202
   1138c:	eb 2e       	mov	r14, r27
   1138e:	b8 e1       	ldi	r27, 0x18	; 24
   11390:	fb 2e       	mov	r15, r27
   11392:	04 c0       	rjmp	.+8      	; 0x1139c <_ZL10wifiReportv+0x5a>
   11394:	af ec       	ldi	r26, 0xCF	; 207
   11396:	ea 2e       	mov	r14, r26
   11398:	a8 e1       	ldi	r26, 0x18	; 24
   1139a:	fa 2e       	mov	r15, r26
   1139c:	87 ef       	ldi	r24, 0xF7	; 247
   1139e:	95 e3       	ldi	r25, 0x35	; 53
   113a0:	0e 94 96 67 	call	0xcf2c	; 0xcf2c <_ZN12WiFiBackpack13isAPConnectedEv>
   113a4:	88 23       	and	r24, r24
   113a6:	29 f0       	breq	.+10     	; 0x113b2 <_ZL10wifiReportv+0x70>
   113a8:	fa ec       	ldi	r31, 0xCA	; 202
   113aa:	cf 2e       	mov	r12, r31
   113ac:	f8 e1       	ldi	r31, 0x18	; 24
   113ae:	df 2e       	mov	r13, r31
   113b0:	04 c0       	rjmp	.+8      	; 0x113ba <_ZL10wifiReportv+0x78>
   113b2:	ef ec       	ldi	r30, 0xCF	; 207
   113b4:	ce 2e       	mov	r12, r30
   113b6:	e8 e1       	ldi	r30, 0x18	; 24
   113b8:	de 2e       	mov	r13, r30
   113ba:	40 e0       	ldi	r20, 0x00	; 0
   113bc:	50 e0       	ldi	r21, 0x00	; 0
   113be:	ba 01       	movw	r22, r20
   113c0:	85 e0       	ldi	r24, 0x05	; 5
   113c2:	9c e1       	ldi	r25, 0x1C	; 28
   113c4:	0e 94 2c 68 	call	0xd058	; 0xd058 <keyMap>
   113c8:	98 2e       	mov	r9, r24
   113ca:	89 2e       	mov	r8, r25
   113cc:	40 e0       	ldi	r20, 0x00	; 0
   113ce:	50 e0       	ldi	r21, 0x00	; 0
   113d0:	ba 01       	movw	r22, r20
   113d2:	88 e0       	ldi	r24, 0x08	; 8
   113d4:	9c e1       	ldi	r25, 0x1C	; 28
   113d6:	0e 94 2c 68 	call	0xd058	; 0xd058 <keyMap>
   113da:	b8 2e       	mov	r11, r24
   113dc:	a9 2e       	mov	r10, r25
   113de:	40 e0       	ldi	r20, 0x00	; 0
   113e0:	50 e0       	ldi	r21, 0x00	; 0
   113e2:	ba 01       	movw	r22, r20
   113e4:	82 e1       	ldi	r24, 0x12	; 18
   113e6:	9c e1       	ldi	r25, 0x1C	; 28
   113e8:	0e 94 2c 68 	call	0xd058	; 0xd058 <keyMap>
   113ec:	ff 92       	push	r15
   113ee:	ef 92       	push	r14
   113f0:	df 92       	push	r13
   113f2:	cf 92       	push	r12
   113f4:	8f 92       	push	r8
   113f6:	9f 92       	push	r9
   113f8:	af 92       	push	r10
   113fa:	bf 92       	push	r11
   113fc:	9f 93       	push	r25
   113fe:	8f 93       	push	r24
   11400:	87 e1       	ldi	r24, 0x17	; 23
   11402:	9c e1       	ldi	r25, 0x1C	; 28
   11404:	9f 93       	push	r25
   11406:	8f 93       	push	r24
   11408:	1f 93       	push	r17
   1140a:	0f 93       	push	r16
   1140c:	0e 94 b2 ab 	call	0x15764	; 0x15764 <_ZN12StringBuffer13appendSprintfEPKcz>
   11410:	a8 01       	movw	r20, r16
   11412:	6b ee       	ldi	r22, 0xEB	; 235
   11414:	78 e3       	ldi	r23, 0x38	; 56
   11416:	ce 01       	movw	r24, r28
   11418:	09 96       	adiw	r24, 0x09	; 9
   1141a:	0e 94 3f 7c 	call	0xf87e	; 0xf87e <_ZN20PinoccioScoutHandler6reportERK6String>
   1141e:	c8 01       	movw	r24, r16
   11420:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   11424:	ce 01       	movw	r24, r28
   11426:	09 96       	adiw	r24, 0x09	; 9
   11428:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <_Z5speolRK6String>
   1142c:	ce 01       	movw	r24, r28
   1142e:	09 96       	adiw	r24, 0x09	; 9
   11430:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   11434:	0f b6       	in	r0, 0x3f	; 63
   11436:	f8 94       	cli
   11438:	de bf       	out	0x3e, r29	; 62
   1143a:	0f be       	out	0x3f, r0	; 63
   1143c:	cd bf       	out	0x3d, r28	; 61
   1143e:	61 e0       	ldi	r22, 0x01	; 1
   11440:	70 e0       	ldi	r23, 0x00	; 0
   11442:	80 e0       	ldi	r24, 0x00	; 0
   11444:	90 e0       	ldi	r25, 0x00	; 0
   11446:	60 96       	adiw	r28, 0x10	; 16
   11448:	0f b6       	in	r0, 0x3f	; 63
   1144a:	f8 94       	cli
   1144c:	de bf       	out	0x3e, r29	; 62
   1144e:	0f be       	out	0x3f, r0	; 63
   11450:	cd bf       	out	0x3d, r28	; 61
   11452:	df 91       	pop	r29
   11454:	cf 91       	pop	r28
   11456:	1f 91       	pop	r17
   11458:	0f 91       	pop	r16
   1145a:	ff 90       	pop	r15
   1145c:	ef 90       	pop	r14
   1145e:	df 90       	pop	r13
   11460:	cf 90       	pop	r12
   11462:	bf 90       	pop	r11
   11464:	af 90       	pop	r10
   11466:	9f 90       	pop	r9
   11468:	8f 90       	pop	r8
   1146a:	08 95       	ret

0001146c <_ZL9keyNumberv>:
   1146c:	61 e0       	ldi	r22, 0x01	; 1
   1146e:	70 e0       	ldi	r23, 0x00	; 0
   11470:	80 e0       	ldi	r24, 0x00	; 0
   11472:	90 e0       	ldi	r25, 0x00	; 0
   11474:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   11478:	cb 01       	movw	r24, r22
   1147a:	0e 94 ab 68 	call	0xd156	; 0xd156 <keyGet>
   1147e:	00 97       	sbiw	r24, 0x00	; 0
   11480:	41 f0       	breq	.+16     	; 0x11492 <_ZL9keyNumberv+0x26>
   11482:	0e 94 67 b4 	call	0x168ce	; 0x168ce <atoi>
   11486:	bc 01       	movw	r22, r24
   11488:	88 27       	eor	r24, r24
   1148a:	77 fd       	sbrc	r23, 7
   1148c:	80 95       	com	r24
   1148e:	98 2f       	mov	r25, r24
   11490:	08 95       	ret
   11492:	60 e0       	ldi	r22, 0x00	; 0
   11494:	70 e0       	ldi	r23, 0x00	; 0
   11496:	cb 01       	movw	r24, r22
   11498:	08 95       	ret

0001149a <_ZL8keyPrintv>:
   1149a:	61 e0       	ldi	r22, 0x01	; 1
   1149c:	70 e0       	ldi	r23, 0x00	; 0
   1149e:	80 e0       	ldi	r24, 0x00	; 0
   114a0:	90 e0       	ldi	r25, 0x00	; 0
   114a2:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   114a6:	cb 01       	movw	r24, r22
   114a8:	0e 94 ab 68 	call	0xd156	; 0xd156 <keyGet>
   114ac:	00 97       	sbiw	r24, 0x00	; 0
   114ae:	39 f0       	breq	.+14     	; 0x114be <_ZL8keyPrintv+0x24>
   114b0:	0e 94 79 1f 	call	0x3ef2	; 0x3ef2 <_Z5speolPKc>
   114b4:	61 e0       	ldi	r22, 0x01	; 1
   114b6:	70 e0       	ldi	r23, 0x00	; 0
   114b8:	80 e0       	ldi	r24, 0x00	; 0
   114ba:	90 e0       	ldi	r25, 0x00	; 0
   114bc:	08 95       	ret
   114be:	60 e0       	ldi	r22, 0x00	; 0
   114c0:	70 e0       	ldi	r23, 0x00	; 0
   114c2:	cb 01       	movw	r24, r22
   114c4:	08 95       	ret

000114c6 <_ZL13setEventCyclev>:
   114c6:	8f 92       	push	r8
   114c8:	9f 92       	push	r9
   114ca:	af 92       	push	r10
   114cc:	bf 92       	push	r11
   114ce:	cf 92       	push	r12
   114d0:	df 92       	push	r13
   114d2:	ef 92       	push	r14
   114d4:	ff 92       	push	r15
   114d6:	0f 93       	push	r16
   114d8:	1f 93       	push	r17
   114da:	63 e0       	ldi	r22, 0x03	; 3
   114dc:	70 e0       	ldi	r23, 0x00	; 0
   114de:	80 e0       	ldi	r24, 0x00	; 0
   114e0:	90 e0       	ldi	r25, 0x00	; 0
   114e2:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   114e6:	6b 01       	movw	r12, r22
   114e8:	7c 01       	movw	r14, r24
   114ea:	62 e0       	ldi	r22, 0x02	; 2
   114ec:	70 e0       	ldi	r23, 0x00	; 0
   114ee:	80 e0       	ldi	r24, 0x00	; 0
   114f0:	90 e0       	ldi	r25, 0x00	; 0
   114f2:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   114f6:	4b 01       	movw	r8, r22
   114f8:	5c 01       	movw	r10, r24
   114fa:	61 e0       	ldi	r22, 0x01	; 1
   114fc:	70 e0       	ldi	r23, 0x00	; 0
   114fe:	80 e0       	ldi	r24, 0x00	; 0
   11500:	90 e0       	ldi	r25, 0x00	; 0
   11502:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   11506:	ab 01       	movw	r20, r22
   11508:	bc 01       	movw	r22, r24
   1150a:	95 01       	movw	r18, r10
   1150c:	84 01       	movw	r16, r8
   1150e:	80 ea       	ldi	r24, 0xA0	; 160
   11510:	95 e3       	ldi	r25, 0x35	; 53
   11512:	0e 94 da 70 	call	0xe1b4	; 0xe1b4 <_ZN13PinoccioScout24setStateChangeEventCycleEmmm>
   11516:	61 e0       	ldi	r22, 0x01	; 1
   11518:	70 e0       	ldi	r23, 0x00	; 0
   1151a:	80 e0       	ldi	r24, 0x00	; 0
   1151c:	90 e0       	ldi	r25, 0x00	; 0
   1151e:	1f 91       	pop	r17
   11520:	0f 91       	pop	r16
   11522:	ff 90       	pop	r15
   11524:	ef 90       	pop	r14
   11526:	df 90       	pop	r13
   11528:	cf 90       	pop	r12
   1152a:	bf 90       	pop	r11
   1152c:	af 90       	pop	r10
   1152e:	9f 90       	pop	r9
   11530:	8f 90       	pop	r8
   11532:	08 95       	ret

00011534 <_ZL21stopStateChangeEventsv>:
   11534:	80 ea       	ldi	r24, 0xA0	; 160
   11536:	95 e3       	ldi	r25, 0x35	; 53
   11538:	0e 94 c6 70 	call	0xe18c	; 0xe18c <_ZN13PinoccioScout28stopDigitalStateChangeEventsEv>
   1153c:	80 ea       	ldi	r24, 0xA0	; 160
   1153e:	95 e3       	ldi	r25, 0x35	; 53
   11540:	0e 94 ce 70 	call	0xe19c	; 0xe19c <_ZN13PinoccioScout27stopAnalogStateChangeEventsEv>
   11544:	80 ea       	ldi	r24, 0xA0	; 160
   11546:	95 e3       	ldi	r25, 0x35	; 53
   11548:	0e 94 d6 70 	call	0xe1ac	; 0xe1ac <_ZN13PinoccioScout31stopPeripheralStateChangeEventsEv>
   1154c:	61 e0       	ldi	r22, 0x01	; 1
   1154e:	70 e0       	ldi	r23, 0x00	; 0
   11550:	80 e0       	ldi	r24, 0x00	; 0
   11552:	90 e0       	ldi	r25, 0x00	; 0
   11554:	08 95       	ret

00011556 <_ZL22startStateChangeEventsv>:
   11556:	80 ea       	ldi	r24, 0xA0	; 160
   11558:	95 e3       	ldi	r25, 0x35	; 53
   1155a:	0e 94 c2 70 	call	0xe184	; 0xe184 <_ZN13PinoccioScout29startDigitalStateChangeEventsEv>
   1155e:	80 ea       	ldi	r24, 0xA0	; 160
   11560:	95 e3       	ldi	r25, 0x35	; 53
   11562:	0e 94 ca 70 	call	0xe194	; 0xe194 <_ZN13PinoccioScout28startAnalogStateChangeEventsEv>
   11566:	80 ea       	ldi	r24, 0xA0	; 160
   11568:	95 e3       	ldi	r25, 0x35	; 53
   1156a:	0e 94 d2 70 	call	0xe1a4	; 0xe1a4 <_ZN13PinoccioScout32startPeripheralStateChangeEventsEv>
   1156e:	61 e0       	ldi	r22, 0x01	; 1
   11570:	70 e0       	ldi	r23, 0x00	; 0
   11572:	80 e0       	ldi	r24, 0x00	; 0
   11574:	90 e0       	ldi	r25, 0x00	; 0
   11576:	08 95       	ret

00011578 <_ZL9hqVerbosev>:
   11578:	61 e0       	ldi	r22, 0x01	; 1
   1157a:	70 e0       	ldi	r23, 0x00	; 0
   1157c:	80 e0       	ldi	r24, 0x00	; 0
   1157e:	90 e0       	ldi	r25, 0x00	; 0
   11580:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   11584:	21 e0       	ldi	r18, 0x01	; 1
   11586:	67 2b       	or	r22, r23
   11588:	68 2b       	or	r22, r24
   1158a:	69 2b       	or	r22, r25
   1158c:	09 f4       	brne	.+2      	; 0x11590 <_ZL9hqVerbosev+0x18>
   1158e:	20 e0       	ldi	r18, 0x00	; 0
   11590:	62 2f       	mov	r22, r18
   11592:	8b ee       	ldi	r24, 0xEB	; 235
   11594:	98 e3       	ldi	r25, 0x38	; 56
   11596:	0e 94 99 78 	call	0xf132	; 0xf132 <_ZN20PinoccioScoutHandler10setVerboseEb>
   1159a:	61 e0       	ldi	r22, 0x01	; 1
   1159c:	70 e0       	ldi	r23, 0x00	; 0
   1159e:	80 e0       	ldi	r24, 0x00	; 0
   115a0:	90 e0       	ldi	r25, 0x00	; 0
   115a2:	08 95       	ret

000115a4 <_ZL10allVerbosev>:
   115a4:	61 e0       	ldi	r22, 0x01	; 1
   115a6:	70 e0       	ldi	r23, 0x00	; 0
   115a8:	80 e0       	ldi	r24, 0x00	; 0
   115aa:	90 e0       	ldi	r25, 0x00	; 0
   115ac:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   115b0:	21 e0       	ldi	r18, 0x01	; 1
   115b2:	67 2b       	or	r22, r23
   115b4:	68 2b       	or	r22, r24
   115b6:	69 2b       	or	r22, r25
   115b8:	09 f4       	brne	.+2      	; 0x115bc <_ZL10allVerbosev+0x18>
   115ba:	20 e0       	ldi	r18, 0x00	; 0
   115bc:	62 2f       	mov	r22, r18
   115be:	8b ee       	ldi	r24, 0xEB	; 235
   115c0:	98 e3       	ldi	r25, 0x38	; 56
   115c2:	0e 94 99 78 	call	0xf132	; 0xf132 <_ZN20PinoccioScoutHandler10setVerboseEb>
   115c6:	61 e0       	ldi	r22, 0x01	; 1
   115c8:	70 e0       	ldi	r23, 0x00	; 0
   115ca:	80 e0       	ldi	r24, 0x00	; 0
   115cc:	90 e0       	ldi	r25, 0x00	; 0
   115ce:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   115d2:	21 e0       	ldi	r18, 0x01	; 1
   115d4:	67 2b       	or	r22, r23
   115d6:	68 2b       	or	r22, r24
   115d8:	69 2b       	or	r22, r25
   115da:	09 f4       	brne	.+2      	; 0x115de <_ZL10allVerbosev+0x3a>
   115dc:	20 e0       	ldi	r18, 0x00	; 0
   115de:	20 93 ed 39 	sts	0x39ED, r18
   115e2:	61 e0       	ldi	r22, 0x01	; 1
   115e4:	70 e0       	ldi	r23, 0x00	; 0
   115e6:	80 e0       	ldi	r24, 0x00	; 0
   115e8:	90 e0       	ldi	r25, 0x00	; 0
   115ea:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   115ee:	21 e0       	ldi	r18, 0x01	; 1
   115f0:	67 2b       	or	r22, r23
   115f2:	68 2b       	or	r22, r24
   115f4:	69 2b       	or	r22, r25
   115f6:	09 f4       	brne	.+2      	; 0x115fa <_ZL10allVerbosev+0x56>
   115f8:	20 e0       	ldi	r18, 0x00	; 0
   115fa:	20 93 eb 35 	sts	0x35EB, r18
   115fe:	61 e0       	ldi	r22, 0x01	; 1
   11600:	70 e0       	ldi	r23, 0x00	; 0
   11602:	80 e0       	ldi	r24, 0x00	; 0
   11604:	90 e0       	ldi	r25, 0x00	; 0
   11606:	08 95       	ret

00011608 <_ZL10getHQTokenv>:
   11608:	cf 93       	push	r28
   1160a:	df 93       	push	r29
   1160c:	cd b7       	in	r28, 0x3d	; 61
   1160e:	de b7       	in	r29, 0x3e	; 62
   11610:	a1 97       	sbiw	r28, 0x21	; 33
   11612:	0f b6       	in	r0, 0x3f	; 63
   11614:	f8 94       	cli
   11616:	de bf       	out	0x3e, r29	; 62
   11618:	0f be       	out	0x3f, r0	; 63
   1161a:	cd bf       	out	0x3d, r28	; 61
   1161c:	be 01       	movw	r22, r28
   1161e:	6f 5f       	subi	r22, 0xFF	; 255
   11620:	7f 4f       	sbci	r23, 0xFF	; 255
   11622:	80 ea       	ldi	r24, 0xA0	; 160
   11624:	95 e3       	ldi	r25, 0x35	; 53
   11626:	0e 94 ea 6c 	call	0xd9d4	; 0xd9d4 <_ZN13PinoccioClass10getHQTokenEPc>
   1162a:	19 a2       	std	Y+33, r1	; 0x21
   1162c:	ce 01       	movw	r24, r28
   1162e:	01 96       	adiw	r24, 0x01	; 1
   11630:	0e 94 79 1f 	call	0x3ef2	; 0x3ef2 <_Z5speolPKc>
   11634:	0e 94 16 14 	call	0x282c	; 0x282c <millis>
   11638:	ab 01       	movw	r20, r22
   1163a:	bc 01       	movw	r22, r24
   1163c:	ce 01       	movw	r24, r28
   1163e:	01 96       	adiw	r24, 0x01	; 1
   11640:	0e 94 2c 68 	call	0xd058	; 0xd058 <keyMap>
   11644:	bc 01       	movw	r22, r24
   11646:	88 27       	eor	r24, r24
   11648:	77 fd       	sbrc	r23, 7
   1164a:	80 95       	com	r24
   1164c:	98 2f       	mov	r25, r24
   1164e:	a1 96       	adiw	r28, 0x21	; 33
   11650:	0f b6       	in	r0, 0x3f	; 63
   11652:	f8 94       	cli
   11654:	de bf       	out	0x3e, r29	; 62
   11656:	0f be       	out	0x3f, r0	; 63
   11658:	cd bf       	out	0x3d, r28	; 61
   1165a:	df 91       	pop	r29
   1165c:	cf 91       	pop	r28
   1165e:	08 95       	ret

00011660 <_ZL10setHQTokenv>:
   11660:	61 e0       	ldi	r22, 0x01	; 1
   11662:	70 e0       	ldi	r23, 0x00	; 0
   11664:	80 e0       	ldi	r24, 0x00	; 0
   11666:	90 e0       	ldi	r25, 0x00	; 0
   11668:	0e 94 8f 24 	call	0x491e	; 0x491e <_Z12getstringargl>
   1166c:	80 ea       	ldi	r24, 0xA0	; 160
   1166e:	95 e3       	ldi	r25, 0x35	; 53
   11670:	0e 94 d3 6c 	call	0xd9a6	; 0xd9a6 <_ZN13PinoccioClass10setHQTokenEPKc>
   11674:	61 e0       	ldi	r22, 0x01	; 1
   11676:	70 e0       	ldi	r23, 0x00	; 0
   11678:	80 e0       	ldi	r24, 0x00	; 0
   1167a:	90 e0       	ldi	r25, 0x00	; 0
   1167c:	08 95       	ret

0001167e <_ZL7otaBootv>:
   1167e:	80 ea       	ldi	r24, 0xA0	; 160
   11680:	95 e3       	ldi	r25, 0x35	; 53
   11682:	0e 94 11 6d 	call	0xda22	; 0xda22 <_ZN13PinoccioClass10setOTAFlagEv>
   11686:	f8 94       	cli
   11688:	28 e0       	ldi	r18, 0x08	; 8
   1168a:	88 e1       	ldi	r24, 0x18	; 24
   1168c:	90 e0       	ldi	r25, 0x00	; 0
   1168e:	0f b6       	in	r0, 0x3f	; 63
   11690:	f8 94       	cli
   11692:	a8 95       	wdr
   11694:	80 93 60 00 	sts	0x0060, r24
   11698:	0f be       	out	0x3f, r0	; 63
   1169a:	20 93 60 00 	sts	0x0060, r18
   1169e:	ff cf       	rjmp	.-2      	; 0x1169e <_ZL7otaBootv+0x20>

000116a0 <_ZL12meshResetKeyv>:
   116a0:	80 ea       	ldi	r24, 0xA0	; 160
   116a2:	95 e3       	ldi	r25, 0x35	; 53
   116a4:	0e 94 79 6e 	call	0xdcf2	; 0xdcf2 <_ZN13PinoccioClass20meshResetSecurityKeyEv>
   116a8:	61 e0       	ldi	r22, 0x01	; 1
   116aa:	70 e0       	ldi	r23, 0x00	; 0
   116ac:	80 e0       	ldi	r24, 0x00	; 0
   116ae:	90 e0       	ldi	r25, 0x00	; 0
   116b0:	08 95       	ret

000116b2 <_ZL10meshConfigv>:
   116b2:	0f 93       	push	r16
   116b4:	1f 93       	push	r17
   116b6:	cf 93       	push	r28
   116b8:	df 93       	push	r29
   116ba:	1f 92       	push	r1
   116bc:	cd b7       	in	r28, 0x3d	; 61
   116be:	de b7       	in	r29, 0x3e	; 62
   116c0:	60 e0       	ldi	r22, 0x00	; 0
   116c2:	70 e0       	ldi	r23, 0x00	; 0
   116c4:	cb 01       	movw	r24, r22
   116c6:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   116ca:	62 30       	cpi	r22, 0x02	; 2
   116cc:	71 05       	cpc	r23, r1
   116ce:	81 05       	cpc	r24, r1
   116d0:	91 05       	cpc	r25, r1
   116d2:	44 f0       	brlt	.+16     	; 0x116e4 <_ZL10meshConfigv+0x32>
   116d4:	62 e0       	ldi	r22, 0x02	; 2
   116d6:	70 e0       	ldi	r23, 0x00	; 0
   116d8:	80 e0       	ldi	r24, 0x00	; 0
   116da:	90 e0       	ldi	r25, 0x00	; 0
   116dc:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   116e0:	8b 01       	movw	r16, r22
   116e2:	02 c0       	rjmp	.+4      	; 0x116e8 <_ZL10meshConfigv+0x36>
   116e4:	07 e6       	ldi	r16, 0x67	; 103
   116e6:	15 e4       	ldi	r17, 0x45	; 69
   116e8:	60 e0       	ldi	r22, 0x00	; 0
   116ea:	70 e0       	ldi	r23, 0x00	; 0
   116ec:	cb 01       	movw	r24, r22
   116ee:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   116f2:	63 30       	cpi	r22, 0x03	; 3
   116f4:	71 05       	cpc	r23, r1
   116f6:	81 05       	cpc	r24, r1
   116f8:	91 05       	cpc	r25, r1
   116fa:	44 f0       	brlt	.+16     	; 0x1170c <_ZL10meshConfigv+0x5a>
   116fc:	63 e0       	ldi	r22, 0x03	; 3
   116fe:	70 e0       	ldi	r23, 0x00	; 0
   11700:	80 e0       	ldi	r24, 0x00	; 0
   11702:	90 e0       	ldi	r25, 0x00	; 0
   11704:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   11708:	26 2f       	mov	r18, r22
   1170a:	01 c0       	rjmp	.+2      	; 0x1170e <_ZL10meshConfigv+0x5c>
   1170c:	24 e1       	ldi	r18, 0x14	; 20
   1170e:	61 e0       	ldi	r22, 0x01	; 1
   11710:	70 e0       	ldi	r23, 0x00	; 0
   11712:	80 e0       	ldi	r24, 0x00	; 0
   11714:	90 e0       	ldi	r25, 0x00	; 0
   11716:	29 83       	std	Y+1, r18	; 0x01
   11718:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   1171c:	29 81       	ldd	r18, Y+1	; 0x01
   1171e:	a8 01       	movw	r20, r16
   11720:	80 ea       	ldi	r24, 0xA0	; 160
   11722:	95 e3       	ldi	r25, 0x35	; 53
   11724:	0e 94 4c 6d 	call	0xda98	; 0xda98 <_ZN13PinoccioClass12meshSetRadioEjjh>
   11728:	61 e0       	ldi	r22, 0x01	; 1
   1172a:	70 e0       	ldi	r23, 0x00	; 0
   1172c:	80 e0       	ldi	r24, 0x00	; 0
   1172e:	90 e0       	ldi	r25, 0x00	; 0
   11730:	0f 90       	pop	r0
   11732:	df 91       	pop	r29
   11734:	cf 91       	pop	r28
   11736:	1f 91       	pop	r17
   11738:	0f 91       	pop	r16
   1173a:	08 95       	ret

0001173c <_ZL9scoutFreev>:
   1173c:	0e 94 35 ab 	call	0x1566a	; 0x1566a <showMemory>
   11740:	0e 94 dc aa 	call	0x155b8	; 0x155b8 <getFreeMemory>
   11744:	bc 01       	movw	r22, r24
   11746:	80 e0       	ldi	r24, 0x00	; 0
   11748:	90 e0       	ldi	r25, 0x00	; 0
   1174a:	08 95       	ret

0001174c <_ZL17delayTimerHandlerP11SYS_Timer_t>:
   1174c:	cf 93       	push	r28
   1174e:	df 93       	push	r29
   11750:	c0 91 c2 39 	lds	r28, 0x39C2
   11754:	d0 91 c3 39 	lds	r29, 0x39C3
   11758:	10 92 c3 39 	sts	0x39C3, r1
   1175c:	10 92 c2 39 	sts	0x39C2, r1
   11760:	ce 01       	movw	r24, r28
   11762:	0e 94 59 35 	call	0x6ab2	; 0x6ab2 <_Z9doCommandPc>
   11766:	ce 01       	movw	r24, r28
   11768:	df 91       	pop	r29
   1176a:	cf 91       	pop	r28
   1176c:	0c 94 c6 b0 	jmp	0x1618c	; 0x1618c <free>

00011770 <_ZL13scoutReportHQv>:
   11770:	2f 92       	push	r2
   11772:	3f 92       	push	r3
   11774:	4f 92       	push	r4
   11776:	5f 92       	push	r5
   11778:	6f 92       	push	r6
   1177a:	7f 92       	push	r7
   1177c:	8f 92       	push	r8
   1177e:	9f 92       	push	r9
   11780:	af 92       	push	r10
   11782:	bf 92       	push	r11
   11784:	cf 92       	push	r12
   11786:	df 92       	push	r13
   11788:	ef 92       	push	r14
   1178a:	ff 92       	push	r15
   1178c:	0f 93       	push	r16
   1178e:	1f 93       	push	r17
   11790:	cf 93       	push	r28
   11792:	df 93       	push	r29
   11794:	cd b7       	in	r28, 0x3d	; 61
   11796:	de b7       	in	r29, 0x3e	; 62
   11798:	6c 97       	sbiw	r28, 0x1c	; 28
   1179a:	0f b6       	in	r0, 0x3f	; 63
   1179c:	f8 94       	cli
   1179e:	de bf       	out	0x3e, r29	; 62
   117a0:	0f be       	out	0x3f, r0	; 63
   117a2:	cd bf       	out	0x3d, r28	; 61
   117a4:	7c 01       	movw	r14, r24
   117a6:	41 e0       	ldi	r20, 0x01	; 1
   117a8:	50 e0       	ldi	r21, 0x00	; 0
   117aa:	64 e6       	ldi	r22, 0x64	; 100
   117ac:	70 e0       	ldi	r23, 0x00	; 0
   117ae:	ce 01       	movw	r24, r28
   117b0:	01 96       	adiw	r24, 0x01	; 1
   117b2:	0e 94 8d ab 	call	0x1571a	; 0x1571a <_ZN12StringBufferC1Ejj>
   117b6:	80 ea       	ldi	r24, 0xA0	; 160
   117b8:	95 e3       	ldi	r25, 0x35	; 53
   117ba:	0e 94 cf 6e 	call	0xdd9e	; 0xdd9e <_ZN13PinoccioClass17getSketchRevisionEv>
   117be:	18 2f       	mov	r17, r24
   117c0:	09 2f       	mov	r16, r25
   117c2:	80 ea       	ldi	r24, 0xA0	; 160
   117c4:	95 e3       	ldi	r25, 0x35	; 53
   117c6:	0e 94 d3 6e 	call	0xdda6	; 0xdda6 <_ZN13PinoccioClass14getSketchBuildEv>
   117ca:	6b 87       	std	Y+11, r22	; 0x0b
   117cc:	7c 87       	std	Y+12, r23	; 0x0c
   117ce:	8d 87       	std	Y+13, r24	; 0x0d
   117d0:	9e 87       	std	Y+14, r25	; 0x0e
   117d2:	80 ea       	ldi	r24, 0xA0	; 160
   117d4:	95 e3       	ldi	r25, 0x35	; 53
   117d6:	0e 94 cb 6e 	call	0xdd96	; 0xdd96 <_ZN13PinoccioClass13getSketchNameEv>
   117da:	8f 87       	std	Y+15, r24	; 0x0f
   117dc:	98 8b       	std	Y+16, r25	; 0x10
   117de:	80 ea       	ldi	r24, 0xA0	; 160
   117e0:	95 e3       	ldi	r25, 0x35	; 53
   117e2:	0e 94 16 6d 	call	0xda2c	; 0xda2c <_ZN13PinoccioClass11getHwSerialEv>
   117e6:	69 8b       	std	Y+17, r22	; 0x11
   117e8:	7a 8b       	std	Y+18, r23	; 0x12
   117ea:	8b 8b       	std	Y+19, r24	; 0x13
   117ec:	9c 8b       	std	Y+20, r25	; 0x14
   117ee:	80 ea       	ldi	r24, 0xA0	; 160
   117f0:	95 e3       	ldi	r25, 0x35	; 53
   117f2:	0e 94 1a 6d 	call	0xda34	; 0xda34 <_ZN13PinoccioClass11getHwFamilyEv>
   117f6:	8d 8b       	std	Y+21, r24	; 0x15
   117f8:	9e 8b       	std	Y+22, r25	; 0x16
   117fa:	80 ea       	ldi	r24, 0xA0	; 160
   117fc:	95 e3       	ldi	r25, 0x35	; 53
   117fe:	0e 94 1e 6d 	call	0xda3c	; 0xda3c <_ZN13PinoccioClass12getHwVersionEv>
   11802:	89 87       	std	Y+9, r24	; 0x09
   11804:	80 ea       	ldi	r24, 0xA0	; 160
   11806:	95 e3       	ldi	r25, 0x35	; 53
   11808:	0e 94 22 6d 	call	0xda44	; 0xda44 <_ZN13PinoccioClass16getEEPROMVersionEv>
   1180c:	8a 87       	std	Y+10, r24	; 0x0a
   1180e:	80 ea       	ldi	r24, 0xA0	; 160
   11810:	95 e3       	ldi	r25, 0x35	; 53
   11812:	0e 94 b5 70 	call	0xe16a	; 0xe16a <_ZN13PinoccioScout11isLeadScoutEv>
   11816:	88 23       	and	r24, r24
   11818:	19 f0       	breq	.+6      	; 0x11820 <_ZL13scoutReportHQv+0xb0>
   1181a:	2a ec       	ldi	r18, 0xCA	; 202
   1181c:	38 e1       	ldi	r19, 0x18	; 24
   1181e:	02 c0       	rjmp	.+4      	; 0x11824 <_ZL13scoutReportHQv+0xb4>
   11820:	2f ec       	ldi	r18, 0xCF	; 207
   11822:	38 e1       	ldi	r19, 0x18	; 24
   11824:	40 e0       	ldi	r20, 0x00	; 0
   11826:	50 e0       	ldi	r21, 0x00	; 0
   11828:	ba 01       	movw	r22, r20
   1182a:	8c e2       	ldi	r24, 0x2C	; 44
   1182c:	9c e1       	ldi	r25, 0x1C	; 28
   1182e:	2b 8f       	std	Y+27, r18	; 0x1b
   11830:	3c 8f       	std	Y+28, r19	; 0x1c
   11832:	0e 94 2c 68 	call	0xd058	; 0xd058 <keyMap>
   11836:	8f 8b       	std	Y+23, r24	; 0x17
   11838:	98 8f       	std	Y+24, r25	; 0x18
   1183a:	40 e0       	ldi	r20, 0x00	; 0
   1183c:	50 e0       	ldi	r21, 0x00	; 0
   1183e:	ba 01       	movw	r22, r20
   11840:	85 e3       	ldi	r24, 0x35	; 53
   11842:	9c e1       	ldi	r25, 0x1C	; 28
   11844:	0e 94 2c 68 	call	0xd058	; 0xd058 <keyMap>
   11848:	38 2e       	mov	r3, r24
   1184a:	29 2e       	mov	r2, r25
   1184c:	40 e0       	ldi	r20, 0x00	; 0
   1184e:	50 e0       	ldi	r21, 0x00	; 0
   11850:	ba 01       	movw	r22, r20
   11852:	8b e3       	ldi	r24, 0x3B	; 59
   11854:	9c e1       	ldi	r25, 0x1C	; 28
   11856:	0e 94 2c 68 	call	0xd058	; 0xd058 <keyMap>
   1185a:	58 2e       	mov	r5, r24
   1185c:	49 2e       	mov	r4, r25
   1185e:	40 e0       	ldi	r20, 0x00	; 0
   11860:	50 e0       	ldi	r21, 0x00	; 0
   11862:	ba 01       	movw	r22, r20
   11864:	82 e4       	ldi	r24, 0x42	; 66
   11866:	9c e1       	ldi	r25, 0x1C	; 28
   11868:	0e 94 2c 68 	call	0xd058	; 0xd058 <keyMap>
   1186c:	78 2e       	mov	r7, r24
   1186e:	69 2e       	mov	r6, r25
   11870:	40 e0       	ldi	r20, 0x00	; 0
   11872:	50 e0       	ldi	r21, 0x00	; 0
   11874:	ba 01       	movw	r22, r20
   11876:	89 e4       	ldi	r24, 0x49	; 73
   11878:	9c e1       	ldi	r25, 0x1C	; 28
   1187a:	0e 94 2c 68 	call	0xd058	; 0xd058 <keyMap>
   1187e:	98 2e       	mov	r9, r24
   11880:	89 2e       	mov	r8, r25
   11882:	40 e0       	ldi	r20, 0x00	; 0
   11884:	50 e0       	ldi	r21, 0x00	; 0
   11886:	ba 01       	movw	r22, r20
   11888:	80 e5       	ldi	r24, 0x50	; 80
   1188a:	9c e1       	ldi	r25, 0x1C	; 28
   1188c:	0e 94 2c 68 	call	0xd058	; 0xd058 <keyMap>
   11890:	b8 2e       	mov	r11, r24
   11892:	a9 2e       	mov	r10, r25
   11894:	40 e0       	ldi	r20, 0x00	; 0
   11896:	50 e0       	ldi	r21, 0x00	; 0
   11898:	ba 01       	movw	r22, r20
   1189a:	89 e5       	ldi	r24, 0x59	; 89
   1189c:	9c e1       	ldi	r25, 0x1C	; 28
   1189e:	0e 94 2c 68 	call	0xd058	; 0xd058 <keyMap>
   118a2:	d8 2e       	mov	r13, r24
   118a4:	c9 2e       	mov	r12, r25
   118a6:	40 e0       	ldi	r20, 0x00	; 0
   118a8:	50 e0       	ldi	r21, 0x00	; 0
   118aa:	ba 01       	movw	r22, r20
   118ac:	81 e6       	ldi	r24, 0x61	; 97
   118ae:	9c e1       	ldi	r25, 0x1C	; 28
   118b0:	0e 94 2c 68 	call	0xd058	; 0xd058 <keyMap>
   118b4:	89 8f       	std	Y+25, r24	; 0x19
   118b6:	9a 8f       	std	Y+26, r25	; 0x1a
   118b8:	40 e0       	ldi	r20, 0x00	; 0
   118ba:	50 e0       	ldi	r21, 0x00	; 0
   118bc:	ba 01       	movw	r22, r20
   118be:	89 e1       	ldi	r24, 0x19	; 25
   118c0:	92 e2       	ldi	r25, 0x22	; 34
   118c2:	0e 94 2c 68 	call	0xd058	; 0xd058 <keyMap>
   118c6:	0f 93       	push	r16
   118c8:	1f 93       	push	r17
   118ca:	4e 85       	ldd	r20, Y+14	; 0x0e
   118cc:	4f 93       	push	r20
   118ce:	4d 85       	ldd	r20, Y+13	; 0x0d
   118d0:	4f 93       	push	r20
   118d2:	4c 85       	ldd	r20, Y+12	; 0x0c
   118d4:	4f 93       	push	r20
   118d6:	4b 85       	ldd	r20, Y+11	; 0x0b
   118d8:	4f 93       	push	r20
   118da:	48 89       	ldd	r20, Y+16	; 0x10
   118dc:	4f 93       	push	r20
   118de:	4f 85       	ldd	r20, Y+15	; 0x0f
   118e0:	4f 93       	push	r20
   118e2:	4c 89       	ldd	r20, Y+20	; 0x14
   118e4:	4f 93       	push	r20
   118e6:	4b 89       	ldd	r20, Y+19	; 0x13
   118e8:	4f 93       	push	r20
   118ea:	4a 89       	ldd	r20, Y+18	; 0x12
   118ec:	4f 93       	push	r20
   118ee:	49 89       	ldd	r20, Y+17	; 0x11
   118f0:	4f 93       	push	r20
   118f2:	4e 89       	ldd	r20, Y+22	; 0x16
   118f4:	4f 93       	push	r20
   118f6:	4d 89       	ldd	r20, Y+21	; 0x15
   118f8:	4f 93       	push	r20
   118fa:	1f 92       	push	r1
   118fc:	49 85       	ldd	r20, Y+9	; 0x09
   118fe:	4f 93       	push	r20
   11900:	1f 92       	push	r1
   11902:	4a 85       	ldd	r20, Y+10	; 0x0a
   11904:	4f 93       	push	r20
   11906:	2b 8d       	ldd	r18, Y+27	; 0x1b
   11908:	3c 8d       	ldd	r19, Y+28	; 0x1c
   1190a:	3f 93       	push	r19
   1190c:	2f 93       	push	r18
   1190e:	28 8d       	ldd	r18, Y+24	; 0x18
   11910:	2f 93       	push	r18
   11912:	2f 89       	ldd	r18, Y+23	; 0x17
   11914:	2f 93       	push	r18
   11916:	2f 92       	push	r2
   11918:	3f 92       	push	r3
   1191a:	4f 92       	push	r4
   1191c:	5f 92       	push	r5
   1191e:	6f 92       	push	r6
   11920:	7f 92       	push	r7
   11922:	8f 92       	push	r8
   11924:	9f 92       	push	r9
   11926:	af 92       	push	r10
   11928:	bf 92       	push	r11
   1192a:	cf 92       	push	r12
   1192c:	df 92       	push	r13
   1192e:	2a 8d       	ldd	r18, Y+26	; 0x1a
   11930:	2f 93       	push	r18
   11932:	29 8d       	ldd	r18, Y+25	; 0x19
   11934:	2f 93       	push	r18
   11936:	9f 93       	push	r25
   11938:	8f 93       	push	r24
   1193a:	86 e6       	ldi	r24, 0x66	; 102
   1193c:	9c e1       	ldi	r25, 0x1C	; 28
   1193e:	9f 93       	push	r25
   11940:	8f 93       	push	r24
   11942:	8e 01       	movw	r16, r28
   11944:	0f 5f       	subi	r16, 0xFF	; 255
   11946:	1f 4f       	sbci	r17, 0xFF	; 255
   11948:	1f 93       	push	r17
   1194a:	0f 93       	push	r16
   1194c:	0e 94 b2 ab 	call	0x15764	; 0x15764 <_ZN12StringBuffer13appendSprintfEPKcz>
   11950:	0f b6       	in	r0, 0x3f	; 63
   11952:	f8 94       	cli
   11954:	de bf       	out	0x3e, r29	; 62
   11956:	0f be       	out	0x3f, r0	; 63
   11958:	cd bf       	out	0x3d, r28	; 61
   1195a:	a8 01       	movw	r20, r16
   1195c:	6b ee       	ldi	r22, 0xEB	; 235
   1195e:	78 e3       	ldi	r23, 0x38	; 56
   11960:	c7 01       	movw	r24, r14
   11962:	0e 94 3f 7c 	call	0xf87e	; 0xf87e <_ZN20PinoccioScoutHandler6reportERK6String>
   11966:	c8 01       	movw	r24, r16
   11968:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   1196c:	c7 01       	movw	r24, r14
   1196e:	6c 96       	adiw	r28, 0x1c	; 28
   11970:	0f b6       	in	r0, 0x3f	; 63
   11972:	f8 94       	cli
   11974:	de bf       	out	0x3e, r29	; 62
   11976:	0f be       	out	0x3f, r0	; 63
   11978:	cd bf       	out	0x3d, r28	; 61
   1197a:	df 91       	pop	r29
   1197c:	cf 91       	pop	r28
   1197e:	1f 91       	pop	r17
   11980:	0f 91       	pop	r16
   11982:	ff 90       	pop	r15
   11984:	ef 90       	pop	r14
   11986:	df 90       	pop	r13
   11988:	cf 90       	pop	r12
   1198a:	bf 90       	pop	r11
   1198c:	af 90       	pop	r10
   1198e:	9f 90       	pop	r9
   11990:	8f 90       	pop	r8
   11992:	7f 90       	pop	r7
   11994:	6f 90       	pop	r6
   11996:	5f 90       	pop	r5
   11998:	4f 90       	pop	r4
   1199a:	3f 90       	pop	r3
   1199c:	2f 90       	pop	r2
   1199e:	08 95       	ret

000119a0 <_ZL11scoutReportv>:
   119a0:	cf 93       	push	r28
   119a2:	df 93       	push	r29
   119a4:	cd b7       	in	r28, 0x3d	; 61
   119a6:	de b7       	in	r29, 0x3e	; 62
   119a8:	28 97       	sbiw	r28, 0x08	; 8
   119aa:	0f b6       	in	r0, 0x3f	; 63
   119ac:	f8 94       	cli
   119ae:	de bf       	out	0x3e, r29	; 62
   119b0:	0f be       	out	0x3f, r0	; 63
   119b2:	cd bf       	out	0x3d, r28	; 61
   119b4:	ce 01       	movw	r24, r28
   119b6:	01 96       	adiw	r24, 0x01	; 1
   119b8:	db de       	rcall	.-586    	; 0x11770 <_ZL13scoutReportHQv>
   119ba:	ce 01       	movw	r24, r28
   119bc:	01 96       	adiw	r24, 0x01	; 1
   119be:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <_Z5speolRK6String>
   119c2:	ce 01       	movw	r24, r28
   119c4:	01 96       	adiw	r24, 0x01	; 1
   119c6:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   119ca:	61 e0       	ldi	r22, 0x01	; 1
   119cc:	70 e0       	ldi	r23, 0x00	; 0
   119ce:	80 e0       	ldi	r24, 0x00	; 0
   119d0:	90 e0       	ldi	r25, 0x00	; 0
   119d2:	28 96       	adiw	r28, 0x08	; 8
   119d4:	0f b6       	in	r0, 0x3f	; 63
   119d6:	f8 94       	cli
   119d8:	de bf       	out	0x3e, r29	; 62
   119da:	0f be       	out	0x3f, r0	; 63
   119dc:	cd bf       	out	0x3d, r28	; 61
   119de:	df 91       	pop	r29
   119e0:	cf 91       	pop	r28
   119e2:	08 95       	ret

000119e4 <_ZL11sendConfirmP13NWK_DataReq_t>:
   119e4:	ef 92       	push	r14
   119e6:	ff 92       	push	r15
   119e8:	0f 93       	push	r16
   119ea:	1f 93       	push	r17
   119ec:	cf 93       	push	r28
   119ee:	df 93       	push	r29
   119f0:	cd b7       	in	r28, 0x3d	; 61
   119f2:	de b7       	in	r29, 0x3e	; 62
   119f4:	a0 97       	sbiw	r28, 0x20	; 32
   119f6:	0f b6       	in	r0, 0x3f	; 63
   119f8:	f8 94       	cli
   119fa:	de bf       	out	0x3e, r29	; 62
   119fc:	0f be       	out	0x3f, r0	; 63
   119fe:	cd bf       	out	0x3d, r28	; 61
   11a00:	8c 01       	movw	r16, r24
   11a02:	10 92 d5 39 	sts	0x39D5, r1
   11a06:	fc 01       	movw	r30, r24
   11a08:	84 85       	ldd	r24, Z+12	; 0x0c
   11a0a:	95 85       	ldd	r25, Z+13	; 0x0d
   11a0c:	0e 94 c6 b0 	call	0x1618c	; 0x1618c <free>
   11a10:	80 91 ed 39 	lds	r24, 0x39ED
   11a14:	88 23       	and	r24, r24
   11a16:	09 f4       	brne	.+2      	; 0x11a1a <_ZL11sendConfirmP13NWK_DataReq_t+0x36>
   11a18:	6b c0       	rjmp	.+214    	; 0x11af0 <_ZL11sendConfirmP13NWK_DataReq_t+0x10c>
   11a1a:	f8 01       	movw	r30, r16
   11a1c:	81 89       	ldd	r24, Z+17	; 0x11
   11a1e:	81 11       	cpse	r24, r1
   11a20:	2c c0       	rjmp	.+88     	; 0x11a7a <_ZL11sendConfirmP13NWK_DataReq_t+0x96>
   11a22:	66 ea       	ldi	r22, 0xA6	; 166
   11a24:	7e e0       	ldi	r23, 0x0E	; 14
   11a26:	84 e0       	ldi	r24, 0x04	; 4
   11a28:	94 e2       	ldi	r25, 0x24	; 36
   11a2a:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
   11a2e:	f8 01       	movw	r30, r16
   11a30:	65 81       	ldd	r22, Z+5	; 0x05
   11a32:	76 81       	ldd	r23, Z+6	; 0x06
   11a34:	4a e0       	ldi	r20, 0x0A	; 10
   11a36:	50 e0       	ldi	r21, 0x00	; 0
   11a38:	84 e0       	ldi	r24, 0x04	; 4
   11a3a:	94 e2       	ldi	r25, 0x24	; 36
   11a3c:	0e 94 91 10 	call	0x2122	; 0x2122 <_ZN5Print5printEji>
   11a40:	f8 01       	movw	r30, r16
   11a42:	82 89       	ldd	r24, Z+18	; 0x12
   11a44:	88 23       	and	r24, r24
   11a46:	a1 f0       	breq	.+40     	; 0x11a70 <_ZL11sendConfirmP13NWK_DataReq_t+0x8c>
   11a48:	66 e8       	ldi	r22, 0x86	; 134
   11a4a:	7e e0       	ldi	r23, 0x0E	; 14
   11a4c:	84 e0       	ldi	r24, 0x04	; 4
   11a4e:	94 e2       	ldi	r25, 0x24	; 36
   11a50:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
   11a54:	4a e0       	ldi	r20, 0x0A	; 10
   11a56:	50 e0       	ldi	r21, 0x00	; 0
   11a58:	f8 01       	movw	r30, r16
   11a5a:	62 89       	ldd	r22, Z+18	; 0x12
   11a5c:	84 e0       	ldi	r24, 0x04	; 4
   11a5e:	94 e2       	ldi	r25, 0x24	; 36
   11a60:	0e 94 76 10 	call	0x20ec	; 0x20ec <_ZN5Print5printEhi>
   11a64:	64 e8       	ldi	r22, 0x84	; 132
   11a66:	7e e0       	ldi	r23, 0x0E	; 14
   11a68:	84 e0       	ldi	r24, 0x04	; 4
   11a6a:	94 e2       	ldi	r25, 0x24	; 36
   11a6c:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
   11a70:	84 e0       	ldi	r24, 0x04	; 4
   11a72:	94 e2       	ldi	r25, 0x24	; 36
   11a74:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <_ZN5Print7printlnEv>
   11a78:	3b c0       	rjmp	.+118    	; 0x11af0 <_ZL11sendConfirmP13NWK_DataReq_t+0x10c>
   11a7a:	6c e7       	ldi	r22, 0x7C	; 124
   11a7c:	7e e0       	ldi	r23, 0x0E	; 14
   11a7e:	84 e0       	ldi	r24, 0x04	; 4
   11a80:	94 e2       	ldi	r25, 0x24	; 36
   11a82:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
   11a86:	f8 01       	movw	r30, r16
   11a88:	81 89       	ldd	r24, Z+17	; 0x11
   11a8a:	81 31       	cpi	r24, 0x11	; 17
   11a8c:	89 f0       	breq	.+34     	; 0x11ab0 <_ZL11sendConfirmP13NWK_DataReq_t+0xcc>
   11a8e:	28 f4       	brcc	.+10     	; 0x11a9a <_ZL11sendConfirmP13NWK_DataReq_t+0xb6>
   11a90:	82 30       	cpi	r24, 0x02	; 2
   11a92:	41 f0       	breq	.+16     	; 0x11aa4 <_ZL11sendConfirmP13NWK_DataReq_t+0xc0>
   11a94:	80 31       	cpi	r24, 0x10	; 16
   11a96:	49 f0       	breq	.+18     	; 0x11aaa <_ZL11sendConfirmP13NWK_DataReq_t+0xc6>
   11a98:	11 c0       	rjmp	.+34     	; 0x11abc <_ZL11sendConfirmP13NWK_DataReq_t+0xd8>
   11a9a:	80 32       	cpi	r24, 0x20	; 32
   11a9c:	61 f0       	breq	.+24     	; 0x11ab6 <_ZL11sendConfirmP13NWK_DataReq_t+0xd2>
   11a9e:	81 32       	cpi	r24, 0x21	; 33
   11aa0:	21 f0       	breq	.+8      	; 0x11aaa <_ZL11sendConfirmP13NWK_DataReq_t+0xc6>
   11aa2:	0c c0       	rjmp	.+24     	; 0x11abc <_ZL11sendConfirmP13NWK_DataReq_t+0xd8>
   11aa4:	6c e6       	ldi	r22, 0x6C	; 108
   11aa6:	7e e0       	ldi	r23, 0x0E	; 14
   11aa8:	0b c0       	rjmp	.+22     	; 0x11ac0 <_ZL11sendConfirmP13NWK_DataReq_t+0xdc>
   11aaa:	6e e4       	ldi	r22, 0x4E	; 78
   11aac:	7e e0       	ldi	r23, 0x0E	; 14
   11aae:	08 c0       	rjmp	.+16     	; 0x11ac0 <_ZL11sendConfirmP13NWK_DataReq_t+0xdc>
   11ab0:	64 e3       	ldi	r22, 0x34	; 52
   11ab2:	7e e0       	ldi	r23, 0x0E	; 14
   11ab4:	05 c0       	rjmp	.+10     	; 0x11ac0 <_ZL11sendConfirmP13NWK_DataReq_t+0xdc>
   11ab6:	62 e1       	ldi	r22, 0x12	; 18
   11ab8:	7e e0       	ldi	r23, 0x0E	; 14
   11aba:	02 c0       	rjmp	.+4      	; 0x11ac0 <_ZL11sendConfirmP13NWK_DataReq_t+0xdc>
   11abc:	60 e0       	ldi	r22, 0x00	; 0
   11abe:	7e e0       	ldi	r23, 0x0E	; 14
   11ac0:	84 e0       	ldi	r24, 0x04	; 4
   11ac2:	94 e2       	ldi	r25, 0x24	; 36
   11ac4:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
   11ac8:	6e ef       	ldi	r22, 0xFE	; 254
   11aca:	7d e0       	ldi	r23, 0x0D	; 13
   11acc:	84 e0       	ldi	r24, 0x04	; 4
   11ace:	94 e2       	ldi	r25, 0x24	; 36
   11ad0:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
   11ad4:	40 e1       	ldi	r20, 0x10	; 16
   11ad6:	50 e0       	ldi	r21, 0x00	; 0
   11ad8:	f8 01       	movw	r30, r16
   11ada:	61 89       	ldd	r22, Z+17	; 0x11
   11adc:	84 e0       	ldi	r24, 0x04	; 4
   11ade:	94 e2       	ldi	r25, 0x24	; 36
   11ae0:	0e 94 76 10 	call	0x20ec	; 0x20ec <_ZN5Print5printEhi>
   11ae4:	6c ef       	ldi	r22, 0xFC	; 252
   11ae6:	7d e0       	ldi	r23, 0x0D	; 13
   11ae8:	84 e0       	ldi	r24, 0x04	; 4
   11aea:	94 e2       	ldi	r25, 0x24	; 36
   11aec:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <_ZN5Print7printlnEPK19__FlashStringHelper>
   11af0:	f8 01       	movw	r30, r16
   11af2:	82 89       	ldd	r24, Z+18	; 0x12
   11af4:	90 e0       	ldi	r25, 0x00	; 0
   11af6:	90 93 ec 39 	sts	0x39EC, r25
   11afa:	80 93 eb 39 	sts	0x39EB, r24
   11afe:	65 ea       	ldi	r22, 0xA5	; 165
   11b00:	7c e1       	ldi	r23, 0x1C	; 28
   11b02:	ce 01       	movw	r24, r28
   11b04:	01 96       	adiw	r24, 0x01	; 1
   11b06:	7c 01       	movw	r14, r24
   11b08:	0e 94 77 b5 	call	0x16aee	; 0x16aee <strcpy>
   11b0c:	c7 01       	movw	r24, r14
   11b0e:	0e 94 0d 29 	call	0x521a	; 0x521a <_Z10findscriptPc>
   11b12:	88 23       	and	r24, r24
   11b14:	19 f1       	breq	.+70     	; 0x11b5c <_ZL11sendConfirmP13NWK_DataReq_t+0x178>
   11b16:	f8 01       	movw	r30, r16
   11b18:	81 89       	ldd	r24, Z+17	; 0x11
   11b1a:	81 11       	cpse	r24, r1
   11b1c:	03 c0       	rjmp	.+6      	; 0x11b24 <_ZL11sendConfirmP13NWK_DataReq_t+0x140>
   11b1e:	82 89       	ldd	r24, Z+18	; 0x12
   11b20:	90 e0       	ldi	r25, 0x00	; 0
   11b22:	02 c0       	rjmp	.+4      	; 0x11b28 <_ZL11sendConfirmP13NWK_DataReq_t+0x144>
   11b24:	80 e0       	ldi	r24, 0x00	; 0
   11b26:	90 e0       	ldi	r25, 0x00	; 0
   11b28:	9f 93       	push	r25
   11b2a:	8f 93       	push	r24
   11b2c:	f8 01       	movw	r30, r16
   11b2e:	86 81       	ldd	r24, Z+6	; 0x06
   11b30:	8f 93       	push	r24
   11b32:	85 81       	ldd	r24, Z+5	; 0x05
   11b34:	8f 93       	push	r24
   11b36:	8f ea       	ldi	r24, 0xAF	; 175
   11b38:	9c e1       	ldi	r25, 0x1C	; 28
   11b3a:	9f 93       	push	r25
   11b3c:	8f 93       	push	r24
   11b3e:	1f 92       	push	r1
   11b40:	80 e2       	ldi	r24, 0x20	; 32
   11b42:	8f 93       	push	r24
   11b44:	ff 92       	push	r15
   11b46:	ef 92       	push	r14
   11b48:	0e 94 1d b6 	call	0x16c3a	; 0x16c3a <snprintf>
   11b4c:	c7 01       	movw	r24, r14
   11b4e:	0e 94 59 35 	call	0x6ab2	; 0x6ab2 <_Z9doCommandPc>
   11b52:	0f b6       	in	r0, 0x3f	; 63
   11b54:	f8 94       	cli
   11b56:	de bf       	out	0x3e, r29	; 62
   11b58:	0f be       	out	0x3f, r0	; 63
   11b5a:	cd bf       	out	0x3d, r28	; 61
   11b5c:	a0 96       	adiw	r28, 0x20	; 32
   11b5e:	0f b6       	in	r0, 0x3f	; 63
   11b60:	f8 94       	cli
   11b62:	de bf       	out	0x3e, r29	; 62
   11b64:	0f be       	out	0x3f, r0	; 63
   11b66:	cd bf       	out	0x3d, r28	; 61
   11b68:	df 91       	pop	r29
   11b6a:	cf 91       	pop	r28
   11b6c:	1f 91       	pop	r17
   11b6e:	0f 91       	pop	r16
   11b70:	ff 90       	pop	r15
   11b72:	ef 90       	pop	r14
   11b74:	08 95       	ret

00011b76 <_ZL14backpackDetailv>:
   11b76:	ef 92       	push	r14
   11b78:	ff 92       	push	r15
   11b7a:	0f 93       	push	r16
   11b7c:	1f 93       	push	r17
   11b7e:	cf 93       	push	r28
   11b80:	df 93       	push	r29
   11b82:	61 e0       	ldi	r22, 0x01	; 1
   11b84:	70 e0       	ldi	r23, 0x00	; 0
   11b86:	80 e0       	ldi	r24, 0x00	; 0
   11b88:	90 e0       	ldi	r25, 0x00	; 0
   11b8a:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   11b8e:	97 fd       	sbrc	r25, 7
   11b90:	0a c0       	rjmp	.+20     	; 0x11ba6 <_ZL14backpackDetailv+0x30>
   11b92:	00 91 6d 35 	lds	r16, 0x356D
   11b96:	10 e0       	ldi	r17, 0x00	; 0
   11b98:	20 e0       	ldi	r18, 0x00	; 0
   11b9a:	30 e0       	ldi	r19, 0x00	; 0
   11b9c:	60 17       	cp	r22, r16
   11b9e:	71 07       	cpc	r23, r17
   11ba0:	82 07       	cpc	r24, r18
   11ba2:	93 07       	cpc	r25, r19
   11ba4:	54 f0       	brlt	.+20     	; 0x11bba <_ZL14backpackDetailv+0x44>
   11ba6:	68 e8       	ldi	r22, 0x88	; 136
   11ba8:	72 e1       	ldi	r23, 0x12	; 18
   11baa:	84 e0       	ldi	r24, 0x04	; 4
   11bac:	94 e2       	ldi	r25, 0x24	; 36
   11bae:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <_ZN5Print7printlnEPK19__FlashStringHelper>
   11bb2:	60 e0       	ldi	r22, 0x00	; 0
   11bb4:	70 e0       	ldi	r23, 0x00	; 0
   11bb6:	cb 01       	movw	r24, r22
   11bb8:	c3 c0       	rjmp	.+390    	; 0x11d40 <_ZL14backpackDetailv+0x1ca>
   11bba:	22 e1       	ldi	r18, 0x12	; 18
   11bbc:	26 9f       	mul	r18, r22
   11bbe:	70 01       	movw	r14, r0
   11bc0:	27 9f       	mul	r18, r23
   11bc2:	f0 0c       	add	r15, r0
   11bc4:	11 24       	eor	r1, r1
   11bc6:	80 91 6b 35 	lds	r24, 0x356B
   11bca:	90 91 6c 35 	lds	r25, 0x356C
   11bce:	8e 0d       	add	r24, r14
   11bd0:	9f 1d       	adc	r25, r15
   11bd2:	0e 94 15 63 	call	0xc62a	; 0xc62a <_ZN12BackpackInfo9getHeaderEv>
   11bd6:	8c 01       	movw	r16, r24
   11bd8:	c0 91 6b 35 	lds	r28, 0x356B
   11bdc:	d0 91 6c 35 	lds	r29, 0x356C
   11be0:	ce 0d       	add	r28, r14
   11be2:	df 1d       	adc	r29, r15
   11be4:	68 e7       	ldi	r22, 0x78	; 120
   11be6:	72 e1       	ldi	r23, 0x12	; 18
   11be8:	84 e0       	ldi	r24, 0x04	; 4
   11bea:	94 e2       	ldi	r25, 0x24	; 36
   11bec:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
   11bf0:	b8 01       	movw	r22, r16
   11bf2:	6b 5f       	subi	r22, 0xFB	; 251
   11bf4:	7f 4f       	sbci	r23, 0xFF	; 255
   11bf6:	84 e0       	ldi	r24, 0x04	; 4
   11bf8:	94 e2       	ldi	r25, 0x24	; 36
   11bfa:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <_ZN5Print7printlnEPKc>
   11bfe:	67 e6       	ldi	r22, 0x67	; 103
   11c00:	72 e1       	ldi	r23, 0x12	; 18
   11c02:	84 e0       	ldi	r24, 0x04	; 4
   11c04:	94 e2       	ldi	r25, 0x24	; 36
   11c06:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
   11c0a:	79 81       	ldd	r23, Y+1	; 0x01
   11c0c:	6a 81       	ldd	r22, Y+2	; 0x02
   11c0e:	40 e1       	ldi	r20, 0x10	; 16
   11c10:	50 e0       	ldi	r21, 0x00	; 0
   11c12:	84 e0       	ldi	r24, 0x04	; 4
   11c14:	94 e2       	ldi	r25, 0x24	; 36
   11c16:	0e 94 96 10 	call	0x212c	; 0x212c <_ZN5Print7printlnEji>
   11c1a:	66 e5       	ldi	r22, 0x56	; 86
   11c1c:	72 e1       	ldi	r23, 0x12	; 18
   11c1e:	84 e0       	ldi	r24, 0x04	; 4
   11c20:	94 e2       	ldi	r25, 0x24	; 36
   11c22:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
   11c26:	fb 80       	ldd	r15, Y+3	; 0x03
   11c28:	6f 2d       	mov	r22, r15
   11c2a:	70 e0       	ldi	r23, 0x00	; 0
   11c2c:	84 e0       	ldi	r24, 0x04	; 4
   11c2e:	75 95       	asr	r23
   11c30:	67 95       	ror	r22
   11c32:	8a 95       	dec	r24
   11c34:	e1 f7       	brne	.-8      	; 0x11c2e <_ZL14backpackDetailv+0xb8>
   11c36:	4a e0       	ldi	r20, 0x0A	; 10
   11c38:	50 e0       	ldi	r21, 0x00	; 0
   11c3a:	84 e0       	ldi	r24, 0x04	; 4
   11c3c:	94 e2       	ldi	r25, 0x24	; 36
   11c3e:	0e 94 76 10 	call	0x20ec	; 0x20ec <_ZN5Print5printEhi>
   11c42:	64 e5       	ldi	r22, 0x54	; 84
   11c44:	72 e1       	ldi	r23, 0x12	; 18
   11c46:	84 e0       	ldi	r24, 0x04	; 4
   11c48:	94 e2       	ldi	r25, 0x24	; 36
   11c4a:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
   11c4e:	6f 2d       	mov	r22, r15
   11c50:	6f 70       	andi	r22, 0x0F	; 15
   11c52:	4a e0       	ldi	r20, 0x0A	; 10
   11c54:	50 e0       	ldi	r21, 0x00	; 0
   11c56:	84 e0       	ldi	r24, 0x04	; 4
   11c58:	94 e2       	ldi	r25, 0x24	; 36
   11c5a:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <_ZN5Print7printlnEhi>
   11c5e:	62 e4       	ldi	r22, 0x42	; 66
   11c60:	72 e1       	ldi	r23, 0x12	; 18
   11c62:	84 e0       	ldi	r24, 0x04	; 4
   11c64:	94 e2       	ldi	r25, 0x24	; 36
   11c66:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
   11c6a:	6c 81       	ldd	r22, Y+4	; 0x04
   11c6c:	5d 81       	ldd	r21, Y+5	; 0x05
   11c6e:	4e 81       	ldd	r20, Y+6	; 0x06
   11c70:	20 e1       	ldi	r18, 0x10	; 16
   11c72:	30 e0       	ldi	r19, 0x00	; 0
   11c74:	70 e0       	ldi	r23, 0x00	; 0
   11c76:	84 e0       	ldi	r24, 0x04	; 4
   11c78:	94 e2       	ldi	r25, 0x24	; 36
   11c7a:	0e 94 aa 10 	call	0x2154	; 0x2154 <_ZN5Print7printlnEmi>
   11c7e:	62 e2       	ldi	r22, 0x22	; 34
   11c80:	72 e1       	ldi	r23, 0x12	; 18
   11c82:	84 e0       	ldi	r24, 0x04	; 4
   11c84:	94 e2       	ldi	r25, 0x24	; 36
   11c86:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
   11c8a:	4a e0       	ldi	r20, 0x0A	; 10
   11c8c:	50 e0       	ldi	r21, 0x00	; 0
   11c8e:	68 81       	ld	r22, Y
   11c90:	84 e0       	ldi	r24, 0x04	; 4
   11c92:	94 e2       	ldi	r25, 0x24	; 36
   11c94:	0e 94 76 10 	call	0x20ec	; 0x20ec <_ZN5Print5printEhi>
   11c98:	6f e1       	ldi	r22, 0x1F	; 31
   11c9a:	72 e1       	ldi	r23, 0x12	; 18
   11c9c:	84 e0       	ldi	r24, 0x04	; 4
   11c9e:	94 e2       	ldi	r25, 0x24	; 36
   11ca0:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <_ZN5Print7printlnEPK19__FlashStringHelper>
   11ca4:	6f ef       	ldi	r22, 0xFF	; 255
   11ca6:	71 e1       	ldi	r23, 0x11	; 17
   11ca8:	84 e0       	ldi	r24, 0x04	; 4
   11caa:	94 e2       	ldi	r25, 0x24	; 36
   11cac:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
   11cb0:	4a e0       	ldi	r20, 0x0A	; 10
   11cb2:	50 e0       	ldi	r21, 0x00	; 0
   11cb4:	f8 01       	movw	r30, r16
   11cb6:	63 81       	ldd	r22, Z+3	; 0x03
   11cb8:	84 e0       	ldi	r24, 0x04	; 4
   11cba:	94 e2       	ldi	r25, 0x24	; 36
   11cbc:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <_ZN5Print7printlnEhi>
   11cc0:	67 ee       	ldi	r22, 0xE7	; 231
   11cc2:	71 e1       	ldi	r23, 0x11	; 17
   11cc4:	84 e0       	ldi	r24, 0x04	; 4
   11cc6:	94 e2       	ldi	r25, 0x24	; 36
   11cc8:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
   11ccc:	4a e0       	ldi	r20, 0x0A	; 10
   11cce:	50 e0       	ldi	r21, 0x00	; 0
   11cd0:	f8 01       	movw	r30, r16
   11cd2:	60 81       	ld	r22, Z
   11cd4:	84 e0       	ldi	r24, 0x04	; 4
   11cd6:	94 e2       	ldi	r25, 0x24	; 36
   11cd8:	0e 94 76 10 	call	0x20ec	; 0x20ec <_ZN5Print5printEhi>
   11cdc:	64 ee       	ldi	r22, 0xE4	; 228
   11cde:	71 e1       	ldi	r23, 0x11	; 17
   11ce0:	84 e0       	ldi	r24, 0x04	; 4
   11ce2:	94 e2       	ldi	r25, 0x24	; 36
   11ce4:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <_ZN5Print7printlnEPK19__FlashStringHelper>
   11ce8:	66 ed       	ldi	r22, 0xD6	; 214
   11cea:	71 e1       	ldi	r23, 0x11	; 17
   11cec:	84 e0       	ldi	r24, 0x04	; 4
   11cee:	94 e2       	ldi	r25, 0x24	; 36
   11cf0:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
   11cf4:	4a e0       	ldi	r20, 0x0A	; 10
   11cf6:	50 e0       	ldi	r21, 0x00	; 0
   11cf8:	f8 01       	movw	r30, r16
   11cfa:	61 81       	ldd	r22, Z+1	; 0x01
   11cfc:	84 e0       	ldi	r24, 0x04	; 4
   11cfe:	94 e2       	ldi	r25, 0x24	; 36
   11d00:	0e 94 76 10 	call	0x20ec	; 0x20ec <_ZN5Print5printEhi>
   11d04:	6f ec       	ldi	r22, 0xCF	; 207
   11d06:	71 e1       	ldi	r23, 0x11	; 17
   11d08:	84 e0       	ldi	r24, 0x04	; 4
   11d0a:	94 e2       	ldi	r25, 0x24	; 36
   11d0c:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <_ZN5Print7printlnEPK19__FlashStringHelper>
   11d10:	61 ec       	ldi	r22, 0xC1	; 193
   11d12:	71 e1       	ldi	r23, 0x11	; 17
   11d14:	84 e0       	ldi	r24, 0x04	; 4
   11d16:	94 e2       	ldi	r25, 0x24	; 36
   11d18:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
   11d1c:	4a e0       	ldi	r20, 0x0A	; 10
   11d1e:	50 e0       	ldi	r21, 0x00	; 0
   11d20:	f8 01       	movw	r30, r16
   11d22:	62 81       	ldd	r22, Z+2	; 0x02
   11d24:	84 e0       	ldi	r24, 0x04	; 4
   11d26:	94 e2       	ldi	r25, 0x24	; 36
   11d28:	0e 94 76 10 	call	0x20ec	; 0x20ec <_ZN5Print5printEhi>
   11d2c:	6a eb       	ldi	r22, 0xBA	; 186
   11d2e:	71 e1       	ldi	r23, 0x11	; 17
   11d30:	84 e0       	ldi	r24, 0x04	; 4
   11d32:	94 e2       	ldi	r25, 0x24	; 36
   11d34:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <_ZN5Print7printlnEPK19__FlashStringHelper>
   11d38:	61 e0       	ldi	r22, 0x01	; 1
   11d3a:	70 e0       	ldi	r23, 0x00	; 0
   11d3c:	80 e0       	ldi	r24, 0x00	; 0
   11d3e:	90 e0       	ldi	r25, 0x00	; 0
   11d40:	df 91       	pop	r29
   11d42:	cf 91       	pop	r28
   11d44:	1f 91       	pop	r17
   11d46:	0f 91       	pop	r16
   11d48:	ff 90       	pop	r15
   11d4a:	ef 90       	pop	r14
   11d4c:	08 95       	ret

00011d4e <_ZL16backpackReportHQv>:
   11d4e:	cf 92       	push	r12
   11d50:	df 92       	push	r13
   11d52:	ef 92       	push	r14
   11d54:	ff 92       	push	r15
   11d56:	0f 93       	push	r16
   11d58:	1f 93       	push	r17
   11d5a:	cf 93       	push	r28
   11d5c:	df 93       	push	r29
   11d5e:	cd b7       	in	r28, 0x3d	; 61
   11d60:	de b7       	in	r29, 0x3e	; 62
   11d62:	28 97       	sbiw	r28, 0x08	; 8
   11d64:	0f b6       	in	r0, 0x3f	; 63
   11d66:	f8 94       	cli
   11d68:	de bf       	out	0x3e, r29	; 62
   11d6a:	0f be       	out	0x3f, r0	; 63
   11d6c:	cd bf       	out	0x3d, r28	; 61
   11d6e:	7c 01       	movw	r14, r24
   11d70:	41 e0       	ldi	r20, 0x01	; 1
   11d72:	50 e0       	ldi	r21, 0x00	; 0
   11d74:	64 e6       	ldi	r22, 0x64	; 100
   11d76:	70 e0       	ldi	r23, 0x00	; 0
   11d78:	8e 01       	movw	r16, r28
   11d7a:	0f 5f       	subi	r16, 0xFF	; 255
   11d7c:	1f 4f       	sbci	r17, 0xFF	; 255
   11d7e:	c8 01       	movw	r24, r16
   11d80:	0e 94 8d ab 	call	0x1571a	; 0x1571a <_ZN12StringBufferC1Ejj>
   11d84:	40 e0       	ldi	r20, 0x00	; 0
   11d86:	50 e0       	ldi	r21, 0x00	; 0
   11d88:	ba 01       	movw	r22, r20
   11d8a:	8f ee       	ldi	r24, 0xEF	; 239
   11d8c:	92 e2       	ldi	r25, 0x22	; 34
   11d8e:	0e 94 2c 68 	call	0xd058	; 0xd058 <keyMap>
   11d92:	d8 2e       	mov	r13, r24
   11d94:	c9 2e       	mov	r12, r25
   11d96:	40 e0       	ldi	r20, 0x00	; 0
   11d98:	50 e0       	ldi	r21, 0x00	; 0
   11d9a:	ba 01       	movw	r22, r20
   11d9c:	81 ec       	ldi	r24, 0xC1	; 193
   11d9e:	9c e1       	ldi	r25, 0x1C	; 28
   11da0:	0e 94 2c 68 	call	0xd058	; 0xd058 <keyMap>
   11da4:	cf 92       	push	r12
   11da6:	df 92       	push	r13
   11da8:	9f 93       	push	r25
   11daa:	8f 93       	push	r24
   11dac:	8b ec       	ldi	r24, 0xCB	; 203
   11dae:	9c e1       	ldi	r25, 0x1C	; 28
   11db0:	9f 93       	push	r25
   11db2:	8f 93       	push	r24
   11db4:	1f 93       	push	r17
   11db6:	0f 93       	push	r16
   11db8:	0e 94 b2 ab 	call	0x15764	; 0x15764 <_ZN12StringBuffer13appendSprintfEPKcz>
   11dbc:	6f e2       	ldi	r22, 0x2F	; 47
   11dbe:	7b e1       	ldi	r23, 0x1B	; 27
   11dc0:	c8 01       	movw	r24, r16
   11dc2:	0e 94 7d 19 	call	0x32fa	; 0x32fa <_ZN6String6concatEPKc>
   11dc6:	a8 01       	movw	r20, r16
   11dc8:	6b ee       	ldi	r22, 0xEB	; 235
   11dca:	78 e3       	ldi	r23, 0x38	; 56
   11dcc:	c7 01       	movw	r24, r14
   11dce:	0e 94 3f 7c 	call	0xf87e	; 0xf87e <_ZN20PinoccioScoutHandler6reportERK6String>
   11dd2:	c8 01       	movw	r24, r16
   11dd4:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   11dd8:	0f b6       	in	r0, 0x3f	; 63
   11dda:	f8 94       	cli
   11ddc:	de bf       	out	0x3e, r29	; 62
   11dde:	0f be       	out	0x3f, r0	; 63
   11de0:	cd bf       	out	0x3d, r28	; 61
   11de2:	c7 01       	movw	r24, r14
   11de4:	28 96       	adiw	r28, 0x08	; 8
   11de6:	0f b6       	in	r0, 0x3f	; 63
   11de8:	f8 94       	cli
   11dea:	de bf       	out	0x3e, r29	; 62
   11dec:	0f be       	out	0x3f, r0	; 63
   11dee:	cd bf       	out	0x3d, r28	; 61
   11df0:	df 91       	pop	r29
   11df2:	cf 91       	pop	r28
   11df4:	1f 91       	pop	r17
   11df6:	0f 91       	pop	r16
   11df8:	ff 90       	pop	r15
   11dfa:	ef 90       	pop	r14
   11dfc:	df 90       	pop	r13
   11dfe:	cf 90       	pop	r12
   11e00:	08 95       	ret

00011e02 <_ZL14backpackReportv>:
   11e02:	cf 93       	push	r28
   11e04:	df 93       	push	r29
   11e06:	cd b7       	in	r28, 0x3d	; 61
   11e08:	de b7       	in	r29, 0x3e	; 62
   11e0a:	28 97       	sbiw	r28, 0x08	; 8
   11e0c:	0f b6       	in	r0, 0x3f	; 63
   11e0e:	f8 94       	cli
   11e10:	de bf       	out	0x3e, r29	; 62
   11e12:	0f be       	out	0x3f, r0	; 63
   11e14:	cd bf       	out	0x3d, r28	; 61
   11e16:	ce 01       	movw	r24, r28
   11e18:	01 96       	adiw	r24, 0x01	; 1
   11e1a:	99 df       	rcall	.-206    	; 0x11d4e <_ZL16backpackReportHQv>
   11e1c:	ce 01       	movw	r24, r28
   11e1e:	01 96       	adiw	r24, 0x01	; 1
   11e20:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <_Z5speolRK6String>
   11e24:	ce 01       	movw	r24, r28
   11e26:	01 96       	adiw	r24, 0x01	; 1
   11e28:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   11e2c:	61 e0       	ldi	r22, 0x01	; 1
   11e2e:	70 e0       	ldi	r23, 0x00	; 0
   11e30:	80 e0       	ldi	r24, 0x00	; 0
   11e32:	90 e0       	ldi	r25, 0x00	; 0
   11e34:	28 96       	adiw	r28, 0x08	; 8
   11e36:	0f b6       	in	r0, 0x3f	; 63
   11e38:	f8 94       	cli
   11e3a:	de bf       	out	0x3e, r29	; 62
   11e3c:	0f be       	out	0x3f, r0	; 63
   11e3e:	cd bf       	out	0x3d, r28	; 61
   11e40:	df 91       	pop	r29
   11e42:	cf 91       	pop	r28
   11e44:	08 95       	ret

00011e46 <_ZL12ledSaveTorchv>:
   11e46:	cf 92       	push	r12
   11e48:	df 92       	push	r13
   11e4a:	ef 92       	push	r14
   11e4c:	ff 92       	push	r15
   11e4e:	cf 93       	push	r28
   11e50:	df 93       	push	r29
   11e52:	00 d0       	rcall	.+0      	; 0x11e54 <_ZL12ledSaveTorchv+0xe>
   11e54:	1f 92       	push	r1
   11e56:	cd b7       	in	r28, 0x3d	; 61
   11e58:	de b7       	in	r29, 0x3e	; 62
   11e5a:	63 e0       	ldi	r22, 0x03	; 3
   11e5c:	70 e0       	ldi	r23, 0x00	; 0
   11e5e:	80 e0       	ldi	r24, 0x00	; 0
   11e60:	90 e0       	ldi	r25, 0x00	; 0
   11e62:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   11e66:	9b 01       	movw	r18, r22
   11e68:	ac 01       	movw	r20, r24
   11e6a:	62 e0       	ldi	r22, 0x02	; 2
   11e6c:	70 e0       	ldi	r23, 0x00	; 0
   11e6e:	80 e0       	ldi	r24, 0x00	; 0
   11e70:	90 e0       	ldi	r25, 0x00	; 0
   11e72:	29 83       	std	Y+1, r18	; 0x01
   11e74:	3a 83       	std	Y+2, r19	; 0x02
   11e76:	4b 83       	std	Y+3, r20	; 0x03
   11e78:	5c 83       	std	Y+4, r21	; 0x04
   11e7a:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   11e7e:	6b 01       	movw	r12, r22
   11e80:	7c 01       	movw	r14, r24
   11e82:	61 e0       	ldi	r22, 0x01	; 1
   11e84:	70 e0       	ldi	r23, 0x00	; 0
   11e86:	80 e0       	ldi	r24, 0x00	; 0
   11e88:	90 e0       	ldi	r25, 0x00	; 0
   11e8a:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   11e8e:	29 81       	ldd	r18, Y+1	; 0x01
   11e90:	3a 81       	ldd	r19, Y+2	; 0x02
   11e92:	a6 01       	movw	r20, r12
   11e94:	88 e7       	ldi	r24, 0x78	; 120
   11e96:	95 e3       	ldi	r25, 0x35	; 53
   11e98:	0e 94 0c 6a 	call	0xd418	; 0xd418 <_ZN9HalRgbLed9saveTorchEsss>
   11e9c:	61 e0       	ldi	r22, 0x01	; 1
   11e9e:	70 e0       	ldi	r23, 0x00	; 0
   11ea0:	80 e0       	ldi	r24, 0x00	; 0
   11ea2:	90 e0       	ldi	r25, 0x00	; 0
   11ea4:	0f 90       	pop	r0
   11ea6:	0f 90       	pop	r0
   11ea8:	0f 90       	pop	r0
   11eaa:	0f 90       	pop	r0
   11eac:	df 91       	pop	r29
   11eae:	cf 91       	pop	r28
   11eb0:	ff 90       	pop	r15
   11eb2:	ef 90       	pop	r14
   11eb4:	df 90       	pop	r13
   11eb6:	cf 90       	pop	r12
   11eb8:	08 95       	ret

00011eba <_ZL8ledIsOffv>:
   11eba:	88 e7       	ldi	r24, 0x78	; 120
   11ebc:	95 e3       	ldi	r25, 0x35	; 53
   11ebe:	0e 94 ab 69 	call	0xd356	; 0xd356 <_ZN9HalRgbLed5isOffEv>
   11ec2:	68 2f       	mov	r22, r24
   11ec4:	70 e0       	ldi	r23, 0x00	; 0
   11ec6:	80 e0       	ldi	r24, 0x00	; 0
   11ec8:	90 e0       	ldi	r25, 0x00	; 0
   11eca:	08 95       	ret

00011ecc <_ZL9ledSetRgbv>:
   11ecc:	cf 92       	push	r12
   11ece:	df 92       	push	r13
   11ed0:	ef 92       	push	r14
   11ed2:	ff 92       	push	r15
   11ed4:	cf 93       	push	r28
   11ed6:	df 93       	push	r29
   11ed8:	00 d0       	rcall	.+0      	; 0x11eda <_ZL9ledSetRgbv+0xe>
   11eda:	1f 92       	push	r1
   11edc:	cd b7       	in	r28, 0x3d	; 61
   11ede:	de b7       	in	r29, 0x3e	; 62
   11ee0:	63 e0       	ldi	r22, 0x03	; 3
   11ee2:	70 e0       	ldi	r23, 0x00	; 0
   11ee4:	80 e0       	ldi	r24, 0x00	; 0
   11ee6:	90 e0       	ldi	r25, 0x00	; 0
   11ee8:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   11eec:	9b 01       	movw	r18, r22
   11eee:	ac 01       	movw	r20, r24
   11ef0:	62 e0       	ldi	r22, 0x02	; 2
   11ef2:	70 e0       	ldi	r23, 0x00	; 0
   11ef4:	80 e0       	ldi	r24, 0x00	; 0
   11ef6:	90 e0       	ldi	r25, 0x00	; 0
   11ef8:	29 83       	std	Y+1, r18	; 0x01
   11efa:	3a 83       	std	Y+2, r19	; 0x02
   11efc:	4b 83       	std	Y+3, r20	; 0x03
   11efe:	5c 83       	std	Y+4, r21	; 0x04
   11f00:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   11f04:	6b 01       	movw	r12, r22
   11f06:	7c 01       	movw	r14, r24
   11f08:	61 e0       	ldi	r22, 0x01	; 1
   11f0a:	70 e0       	ldi	r23, 0x00	; 0
   11f0c:	80 e0       	ldi	r24, 0x00	; 0
   11f0e:	90 e0       	ldi	r25, 0x00	; 0
   11f10:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   11f14:	29 81       	ldd	r18, Y+1	; 0x01
   11f16:	3a 81       	ldd	r19, Y+2	; 0x02
   11f18:	a6 01       	movw	r20, r12
   11f1a:	88 e7       	ldi	r24, 0x78	; 120
   11f1c:	95 e3       	ldi	r25, 0x35	; 53
   11f1e:	0e 94 96 6a 	call	0xd52c	; 0xd52c <_ZN9HalRgbLed8setColorEsss>
   11f22:	61 e0       	ldi	r22, 0x01	; 1
   11f24:	70 e0       	ldi	r23, 0x00	; 0
   11f26:	80 e0       	ldi	r24, 0x00	; 0
   11f28:	90 e0       	ldi	r25, 0x00	; 0
   11f2a:	0f 90       	pop	r0
   11f2c:	0f 90       	pop	r0
   11f2e:	0f 90       	pop	r0
   11f30:	0f 90       	pop	r0
   11f32:	df 91       	pop	r29
   11f34:	cf 91       	pop	r28
   11f36:	ff 90       	pop	r15
   11f38:	ef 90       	pop	r14
   11f3a:	df 90       	pop	r13
   11f3c:	cf 90       	pop	r12
   11f3e:	08 95       	ret

00011f40 <_ZL8ledBlinkv>:
   11f40:	4f 92       	push	r4
   11f42:	5f 92       	push	r5
   11f44:	6f 92       	push	r6
   11f46:	7f 92       	push	r7
   11f48:	8f 92       	push	r8
   11f4a:	9f 92       	push	r9
   11f4c:	af 92       	push	r10
   11f4e:	bf 92       	push	r11
   11f50:	cf 92       	push	r12
   11f52:	df 92       	push	r13
   11f54:	ef 92       	push	r14
   11f56:	ff 92       	push	r15
   11f58:	0f 93       	push	r16
   11f5a:	1f 93       	push	r17
   11f5c:	cf 93       	push	r28
   11f5e:	df 93       	push	r29
   11f60:	00 d0       	rcall	.+0      	; 0x11f62 <_ZL8ledBlinkv+0x22>
   11f62:	1f 92       	push	r1
   11f64:	cd b7       	in	r28, 0x3d	; 61
   11f66:	de b7       	in	r29, 0x3e	; 62
   11f68:	60 e0       	ldi	r22, 0x00	; 0
   11f6a:	70 e0       	ldi	r23, 0x00	; 0
   11f6c:	cb 01       	movw	r24, r22
   11f6e:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   11f72:	65 30       	cpi	r22, 0x05	; 5
   11f74:	71 05       	cpc	r23, r1
   11f76:	81 05       	cpc	r24, r1
   11f78:	91 05       	cpc	r25, r1
   11f7a:	b1 f5       	brne	.+108    	; 0x11fe8 <_ZL8ledBlinkv+0xa8>
   11f7c:	65 e0       	ldi	r22, 0x05	; 5
   11f7e:	70 e0       	ldi	r23, 0x00	; 0
   11f80:	80 e0       	ldi	r24, 0x00	; 0
   11f82:	90 e0       	ldi	r25, 0x00	; 0
   11f84:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   11f88:	6b 01       	movw	r12, r22
   11f8a:	7c 01       	movw	r14, r24
   11f8c:	64 e0       	ldi	r22, 0x04	; 4
   11f8e:	70 e0       	ldi	r23, 0x00	; 0
   11f90:	80 e0       	ldi	r24, 0x00	; 0
   11f92:	90 e0       	ldi	r25, 0x00	; 0
   11f94:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   11f98:	4b 01       	movw	r8, r22
   11f9a:	5c 01       	movw	r10, r24
   11f9c:	63 e0       	ldi	r22, 0x03	; 3
   11f9e:	70 e0       	ldi	r23, 0x00	; 0
   11fa0:	80 e0       	ldi	r24, 0x00	; 0
   11fa2:	90 e0       	ldi	r25, 0x00	; 0
   11fa4:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   11fa8:	9b 01       	movw	r18, r22
   11faa:	ac 01       	movw	r20, r24
   11fac:	62 e0       	ldi	r22, 0x02	; 2
   11fae:	70 e0       	ldi	r23, 0x00	; 0
   11fb0:	80 e0       	ldi	r24, 0x00	; 0
   11fb2:	90 e0       	ldi	r25, 0x00	; 0
   11fb4:	29 83       	std	Y+1, r18	; 0x01
   11fb6:	3a 83       	std	Y+2, r19	; 0x02
   11fb8:	4b 83       	std	Y+3, r20	; 0x03
   11fba:	5c 83       	std	Y+4, r21	; 0x04
   11fbc:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   11fc0:	2b 01       	movw	r4, r22
   11fc2:	3c 01       	movw	r6, r24
   11fc4:	61 e0       	ldi	r22, 0x01	; 1
   11fc6:	70 e0       	ldi	r23, 0x00	; 0
   11fc8:	80 e0       	ldi	r24, 0x00	; 0
   11fca:	90 e0       	ldi	r25, 0x00	; 0
   11fcc:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   11fd0:	e1 e0       	ldi	r30, 0x01	; 1
   11fd2:	29 81       	ldd	r18, Y+1	; 0x01
   11fd4:	3a 81       	ldd	r19, Y+2	; 0x02
   11fd6:	cd 28       	or	r12, r13
   11fd8:	ce 28       	or	r12, r14
   11fda:	cf 28       	or	r12, r15
   11fdc:	09 f4       	brne	.+2      	; 0x11fe0 <_ZL8ledBlinkv+0xa0>
   11fde:	e0 e0       	ldi	r30, 0x00	; 0
   11fe0:	ee 2e       	mov	r14, r30
   11fe2:	84 01       	movw	r16, r8
   11fe4:	a2 01       	movw	r20, r4
   11fe6:	4f c0       	rjmp	.+158    	; 0x12086 <_ZL8ledBlinkv+0x146>
   11fe8:	60 e0       	ldi	r22, 0x00	; 0
   11fea:	70 e0       	ldi	r23, 0x00	; 0
   11fec:	cb 01       	movw	r24, r22
   11fee:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   11ff2:	64 30       	cpi	r22, 0x04	; 4
   11ff4:	71 05       	cpc	r23, r1
   11ff6:	81 05       	cpc	r24, r1
   11ff8:	91 05       	cpc	r25, r1
   11ffa:	29 f5       	brne	.+74     	; 0x12046 <_ZL8ledBlinkv+0x106>
   11ffc:	64 e0       	ldi	r22, 0x04	; 4
   11ffe:	70 e0       	ldi	r23, 0x00	; 0
   12000:	80 e0       	ldi	r24, 0x00	; 0
   12002:	90 e0       	ldi	r25, 0x00	; 0
   12004:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   12008:	2b 01       	movw	r4, r22
   1200a:	3c 01       	movw	r6, r24
   1200c:	63 e0       	ldi	r22, 0x03	; 3
   1200e:	70 e0       	ldi	r23, 0x00	; 0
   12010:	80 e0       	ldi	r24, 0x00	; 0
   12012:	90 e0       	ldi	r25, 0x00	; 0
   12014:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   12018:	9b 01       	movw	r18, r22
   1201a:	ac 01       	movw	r20, r24
   1201c:	62 e0       	ldi	r22, 0x02	; 2
   1201e:	70 e0       	ldi	r23, 0x00	; 0
   12020:	80 e0       	ldi	r24, 0x00	; 0
   12022:	90 e0       	ldi	r25, 0x00	; 0
   12024:	29 83       	std	Y+1, r18	; 0x01
   12026:	3a 83       	std	Y+2, r19	; 0x02
   12028:	4b 83       	std	Y+3, r20	; 0x03
   1202a:	5c 83       	std	Y+4, r21	; 0x04
   1202c:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   12030:	4b 01       	movw	r8, r22
   12032:	5c 01       	movw	r10, r24
   12034:	61 e0       	ldi	r22, 0x01	; 1
   12036:	70 e0       	ldi	r23, 0x00	; 0
   12038:	80 e0       	ldi	r24, 0x00	; 0
   1203a:	90 e0       	ldi	r25, 0x00	; 0
   1203c:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   12040:	e1 2c       	mov	r14, r1
   12042:	82 01       	movw	r16, r4
   12044:	1d c0       	rjmp	.+58     	; 0x12080 <_ZL8ledBlinkv+0x140>
   12046:	63 e0       	ldi	r22, 0x03	; 3
   12048:	70 e0       	ldi	r23, 0x00	; 0
   1204a:	80 e0       	ldi	r24, 0x00	; 0
   1204c:	90 e0       	ldi	r25, 0x00	; 0
   1204e:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   12052:	9b 01       	movw	r18, r22
   12054:	ac 01       	movw	r20, r24
   12056:	62 e0       	ldi	r22, 0x02	; 2
   12058:	70 e0       	ldi	r23, 0x00	; 0
   1205a:	80 e0       	ldi	r24, 0x00	; 0
   1205c:	90 e0       	ldi	r25, 0x00	; 0
   1205e:	29 83       	std	Y+1, r18	; 0x01
   12060:	3a 83       	std	Y+2, r19	; 0x02
   12062:	4b 83       	std	Y+3, r20	; 0x03
   12064:	5c 83       	std	Y+4, r21	; 0x04
   12066:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   1206a:	4b 01       	movw	r8, r22
   1206c:	5c 01       	movw	r10, r24
   1206e:	61 e0       	ldi	r22, 0x01	; 1
   12070:	70 e0       	ldi	r23, 0x00	; 0
   12072:	80 e0       	ldi	r24, 0x00	; 0
   12074:	90 e0       	ldi	r25, 0x00	; 0
   12076:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   1207a:	e1 2c       	mov	r14, r1
   1207c:	04 ef       	ldi	r16, 0xF4	; 244
   1207e:	11 e0       	ldi	r17, 0x01	; 1
   12080:	29 81       	ldd	r18, Y+1	; 0x01
   12082:	3a 81       	ldd	r19, Y+2	; 0x02
   12084:	a4 01       	movw	r20, r8
   12086:	88 e7       	ldi	r24, 0x78	; 120
   12088:	95 e3       	ldi	r25, 0x35	; 53
   1208a:	0e 94 5f 6b 	call	0xd6be	; 0xd6be <_ZN9HalRgbLed10blinkColorEsssjb>
   1208e:	61 e0       	ldi	r22, 0x01	; 1
   12090:	70 e0       	ldi	r23, 0x00	; 0
   12092:	80 e0       	ldi	r24, 0x00	; 0
   12094:	90 e0       	ldi	r25, 0x00	; 0
   12096:	0f 90       	pop	r0
   12098:	0f 90       	pop	r0
   1209a:	0f 90       	pop	r0
   1209c:	0f 90       	pop	r0
   1209e:	df 91       	pop	r29
   120a0:	cf 91       	pop	r28
   120a2:	1f 91       	pop	r17
   120a4:	0f 91       	pop	r16
   120a6:	ff 90       	pop	r15
   120a8:	ef 90       	pop	r14
   120aa:	df 90       	pop	r13
   120ac:	cf 90       	pop	r12
   120ae:	bf 90       	pop	r11
   120b0:	af 90       	pop	r10
   120b2:	9f 90       	pop	r9
   120b4:	8f 90       	pop	r8
   120b6:	7f 90       	pop	r7
   120b8:	6f 90       	pop	r6
   120ba:	5f 90       	pop	r5
   120bc:	4f 90       	pop	r4
   120be:	08 95       	ret

000120c0 <_ZL6ledOffv>:
   120c0:	88 e7       	ldi	r24, 0x78	; 120
   120c2:	95 e3       	ldi	r25, 0x35	; 53
   120c4:	0e 94 dd 6a 	call	0xd5ba	; 0xd5ba <_ZN9HalRgbLed7turnOffEv>
   120c8:	61 e0       	ldi	r22, 0x01	; 1
   120ca:	70 e0       	ldi	r23, 0x00	; 0
   120cc:	80 e0       	ldi	r24, 0x00	; 0
   120ce:	90 e0       	ldi	r25, 0x00	; 0
   120d0:	08 95       	ret

000120d2 <_ZL15getRandomNumberv>:
   120d2:	0e 94 4a b3 	call	0x16694	; 0x16694 <random>
   120d6:	88 27       	eor	r24, r24
   120d8:	77 fd       	sbrc	r23, 7
   120da:	80 95       	com	r24
   120dc:	98 2f       	mov	r25, r24
   120de:	08 95       	ret

000120e0 <_ZL17getLastResetCausev>:
   120e0:	cf 92       	push	r12
   120e2:	df 92       	push	r13
   120e4:	ef 92       	push	r14
   120e6:	ff 92       	push	r15
   120e8:	0f 93       	push	r16
   120ea:	1f 93       	push	r17
   120ec:	cf 93       	push	r28
   120ee:	df 93       	push	r29
   120f0:	cd b7       	in	r28, 0x3d	; 61
   120f2:	de b7       	in	r29, 0x3e	; 62
   120f4:	64 97       	sbiw	r28, 0x14	; 20
   120f6:	0f b6       	in	r0, 0x3f	; 63
   120f8:	f8 94       	cli
   120fa:	de bf       	out	0x3e, r29	; 62
   120fc:	0f be       	out	0x3f, r0	; 63
   120fe:	cd bf       	out	0x3d, r28	; 61
   12100:	80 ea       	ldi	r24, 0xA0	; 160
   12102:	95 e3       	ldi	r25, 0x35	; 53
   12104:	0e 94 bb 6c 	call	0xd976	; 0xd976 <_ZN13PinoccioClass17getLastResetCauseEv>
   12108:	19 82       	std	Y+1, r1	; 0x01
   1210a:	fc 01       	movw	r30, r24
   1210c:	8e 01       	movw	r16, r28
   1210e:	0f 5f       	subi	r16, 0xFF	; 255
   12110:	1f 4f       	sbci	r17, 0xFF	; 255
   12112:	9d ec       	ldi	r25, 0xCD	; 205
   12114:	e9 2e       	mov	r14, r25
   12116:	9e e1       	ldi	r25, 0x1E	; 30
   12118:	f9 2e       	mov	r15, r25
   1211a:	84 91       	lpm	r24, Z
   1211c:	6f 01       	movw	r12, r30
   1211e:	9f ef       	ldi	r25, 0xFF	; 255
   12120:	c9 1a       	sub	r12, r25
   12122:	d9 0a       	sbc	r13, r25
   12124:	88 23       	and	r24, r24
   12126:	a9 f0       	breq	.+42     	; 0x12152 <_ZL17getLastResetCausev+0x72>
   12128:	d8 01       	movw	r26, r16
   1212a:	0d 90       	ld	r0, X+
   1212c:	00 20       	and	r0, r0
   1212e:	e9 f7       	brne	.-6      	; 0x1212a <_ZL17getLastResetCausev+0x4a>
   12130:	1f 92       	push	r1
   12132:	8f 93       	push	r24
   12134:	ff 92       	push	r15
   12136:	ef 92       	push	r14
   12138:	11 97       	sbiw	r26, 0x01	; 1
   1213a:	bf 93       	push	r27
   1213c:	af 93       	push	r26
   1213e:	0e 94 59 b6 	call	0x16cb2	; 0x16cb2 <sprintf>
   12142:	f6 01       	movw	r30, r12
   12144:	0f 90       	pop	r0
   12146:	0f 90       	pop	r0
   12148:	0f 90       	pop	r0
   1214a:	0f 90       	pop	r0
   1214c:	0f 90       	pop	r0
   1214e:	0f 90       	pop	r0
   12150:	e4 cf       	rjmp	.-56     	; 0x1211a <_ZL17getLastResetCausev+0x3a>
   12152:	c8 01       	movw	r24, r16
   12154:	0e 94 79 1f 	call	0x3ef2	; 0x3ef2 <_Z5speolPKc>
   12158:	61 e0       	ldi	r22, 0x01	; 1
   1215a:	70 e0       	ldi	r23, 0x00	; 0
   1215c:	80 e0       	ldi	r24, 0x00	; 0
   1215e:	90 e0       	ldi	r25, 0x00	; 0
   12160:	64 96       	adiw	r28, 0x14	; 20
   12162:	0f b6       	in	r0, 0x3f	; 63
   12164:	f8 94       	cli
   12166:	de bf       	out	0x3e, r29	; 62
   12168:	0f be       	out	0x3f, r0	; 63
   1216a:	cd bf       	out	0x3d, r28	; 61
   1216c:	df 91       	pop	r29
   1216e:	cf 91       	pop	r28
   12170:	1f 91       	pop	r17
   12172:	0f 91       	pop	r16
   12174:	ff 90       	pop	r15
   12176:	ef 90       	pop	r14
   12178:	df 90       	pop	r13
   1217a:	cf 90       	pop	r12
   1217c:	08 95       	ret

0001217e <_ZL11meshRoutingv>:
   1217e:	af 92       	push	r10
   12180:	bf 92       	push	r11
   12182:	cf 92       	push	r12
   12184:	df 92       	push	r13
   12186:	ef 92       	push	r14
   12188:	ff 92       	push	r15
   1218a:	0f 93       	push	r16
   1218c:	1f 93       	push	r17
   1218e:	cf 93       	push	r28
   12190:	df 93       	push	r29
   12192:	00 d0       	rcall	.+0      	; 0x12194 <_ZL11meshRoutingv+0x16>
   12194:	00 d0       	rcall	.+0      	; 0x12196 <_ZL11meshRoutingv+0x18>
   12196:	cd b7       	in	r28, 0x3d	; 61
   12198:	de b7       	in	r29, 0x3e	; 62
   1219a:	67 e4       	ldi	r22, 0x47	; 71
   1219c:	7f e0       	ldi	r23, 0x0F	; 15
   1219e:	ce 01       	movw	r24, r28
   121a0:	01 96       	adiw	r24, 0x01	; 1
   121a2:	0e 94 4a 19 	call	0x3294	; 0x3294 <_ZN6StringC1EPK19__FlashStringHelper>
   121a6:	ce 01       	movw	r24, r28
   121a8:	01 96       	adiw	r24, 0x01	; 1
   121aa:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <_Z2spRK6String>
   121ae:	ce 01       	movw	r24, r28
   121b0:	01 96       	adiw	r24, 0x01	; 1
   121b2:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   121b6:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <_Z5speolv>
   121ba:	0e 94 4a 4d 	call	0x9a94	; 0x9a94 <NWK_RouteTable>
   121be:	6c 01       	movw	r12, r24
   121c0:	8c 01       	movw	r16, r24
   121c2:	e1 2c       	mov	r14, r1
   121c4:	f1 2c       	mov	r15, r1
   121c6:	f8 01       	movw	r30, r16
   121c8:	81 81       	ldd	r24, Z+1	; 0x01
   121ca:	92 81       	ldd	r25, Z+2	; 0x02
   121cc:	01 96       	adiw	r24, 0x01	; 1
   121ce:	09 f4       	brne	.+2      	; 0x121d2 <_ZL11meshRoutingv+0x54>
   121d0:	98 c0       	rjmp	.+304    	; 0x12302 <_ZL11meshRoutingv+0x184>
   121d2:	6f e3       	ldi	r22, 0x3F	; 63
   121d4:	7f e0       	ldi	r23, 0x0F	; 15
   121d6:	ce 01       	movw	r24, r28
   121d8:	01 96       	adiw	r24, 0x01	; 1
   121da:	0e 94 4a 19 	call	0x3294	; 0x3294 <_ZN6StringC1EPK19__FlashStringHelper>
   121de:	ce 01       	movw	r24, r28
   121e0:	01 96       	adiw	r24, 0x01	; 1
   121e2:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <_Z2spRK6String>
   121e6:	ce 01       	movw	r24, r28
   121e8:	01 96       	adiw	r24, 0x01	; 1
   121ea:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   121ee:	f8 01       	movw	r30, r16
   121f0:	80 81       	ld	r24, Z
   121f2:	81 70       	andi	r24, 0x01	; 1
   121f4:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <_Z2sph>
   121f8:	61 e3       	ldi	r22, 0x31	; 49
   121fa:	7f e0       	ldi	r23, 0x0F	; 15
   121fc:	ce 01       	movw	r24, r28
   121fe:	01 96       	adiw	r24, 0x01	; 1
   12200:	0e 94 4a 19 	call	0x3294	; 0x3294 <_ZN6StringC1EPK19__FlashStringHelper>
   12204:	ce 01       	movw	r24, r28
   12206:	01 96       	adiw	r24, 0x01	; 1
   12208:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <_Z2spRK6String>
   1220c:	ce 01       	movw	r24, r28
   1220e:	01 96       	adiw	r24, 0x01	; 1
   12210:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   12214:	f8 01       	movw	r30, r16
   12216:	80 81       	ld	r24, Z
   12218:	86 95       	lsr	r24
   1221a:	81 70       	andi	r24, 0x01	; 1
   1221c:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <_Z2sph>
   12220:	63 e2       	ldi	r22, 0x23	; 35
   12222:	7f e0       	ldi	r23, 0x0F	; 15
   12224:	ce 01       	movw	r24, r28
   12226:	01 96       	adiw	r24, 0x01	; 1
   12228:	0e 94 4a 19 	call	0x3294	; 0x3294 <_ZN6StringC1EPK19__FlashStringHelper>
   1222c:	ce 01       	movw	r24, r28
   1222e:	01 96       	adiw	r24, 0x01	; 1
   12230:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <_Z2spRK6String>
   12234:	ce 01       	movw	r24, r28
   12236:	01 96       	adiw	r24, 0x01	; 1
   12238:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   1223c:	f8 01       	movw	r30, r16
   1223e:	80 81       	ld	r24, Z
   12240:	82 95       	swap	r24
   12242:	8f 70       	andi	r24, 0x0F	; 15
   12244:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <_Z2sph>
   12248:	65 e1       	ldi	r22, 0x15	; 21
   1224a:	7f e0       	ldi	r23, 0x0F	; 15
   1224c:	ce 01       	movw	r24, r28
   1224e:	01 96       	adiw	r24, 0x01	; 1
   12250:	0e 94 4a 19 	call	0x3294	; 0x3294 <_ZN6StringC1EPK19__FlashStringHelper>
   12254:	ce 01       	movw	r24, r28
   12256:	01 96       	adiw	r24, 0x01	; 1
   12258:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <_Z2spRK6String>
   1225c:	ce 01       	movw	r24, r28
   1225e:	01 96       	adiw	r24, 0x01	; 1
   12260:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   12264:	f8 01       	movw	r30, r16
   12266:	81 81       	ldd	r24, Z+1	; 0x01
   12268:	92 81       	ldd	r25, Z+2	; 0x02
   1226a:	0e 94 ed 1e 	call	0x3dda	; 0x3dda <_Z2spj>
   1226e:	67 e0       	ldi	r22, 0x07	; 7
   12270:	7f e0       	ldi	r23, 0x0F	; 15
   12272:	ce 01       	movw	r24, r28
   12274:	01 96       	adiw	r24, 0x01	; 1
   12276:	0e 94 4a 19 	call	0x3294	; 0x3294 <_ZN6StringC1EPK19__FlashStringHelper>
   1227a:	ce 01       	movw	r24, r28
   1227c:	01 96       	adiw	r24, 0x01	; 1
   1227e:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <_Z2spRK6String>
   12282:	ce 01       	movw	r24, r28
   12284:	01 96       	adiw	r24, 0x01	; 1
   12286:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   1228a:	f8 01       	movw	r30, r16
   1228c:	83 81       	ldd	r24, Z+3	; 0x03
   1228e:	94 81       	ldd	r25, Z+4	; 0x04
   12290:	0e 94 ed 1e 	call	0x3dda	; 0x3dda <_Z2spj>
   12294:	6a ef       	ldi	r22, 0xFA	; 250
   12296:	7e e0       	ldi	r23, 0x0E	; 14
   12298:	ce 01       	movw	r24, r28
   1229a:	01 96       	adiw	r24, 0x01	; 1
   1229c:	0e 94 4a 19 	call	0x3294	; 0x3294 <_ZN6StringC1EPK19__FlashStringHelper>
   122a0:	ce 01       	movw	r24, r28
   122a2:	01 96       	adiw	r24, 0x01	; 1
   122a4:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <_Z2spRK6String>
   122a8:	ce 01       	movw	r24, r28
   122aa:	01 96       	adiw	r24, 0x01	; 1
   122ac:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   122b0:	56 01       	movw	r10, r12
   122b2:	ae 0c       	add	r10, r14
   122b4:	bf 1c       	adc	r11, r15
   122b6:	f5 01       	movw	r30, r10
   122b8:	85 81       	ldd	r24, Z+5	; 0x05
   122ba:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <_Z2sph>
   122be:	6e ee       	ldi	r22, 0xEE	; 238
   122c0:	7e e0       	ldi	r23, 0x0E	; 14
   122c2:	ce 01       	movw	r24, r28
   122c4:	01 96       	adiw	r24, 0x01	; 1
   122c6:	0e 94 4a 19 	call	0x3294	; 0x3294 <_ZN6StringC1EPK19__FlashStringHelper>
   122ca:	ce 01       	movw	r24, r28
   122cc:	01 96       	adiw	r24, 0x01	; 1
   122ce:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <_Z2spRK6String>
   122d2:	ce 01       	movw	r24, r28
   122d4:	01 96       	adiw	r24, 0x01	; 1
   122d6:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   122da:	f5 01       	movw	r30, r10
   122dc:	86 81       	ldd	r24, Z+6	; 0x06
   122de:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <_Z2sph>
   122e2:	67 ee       	ldi	r22, 0xE7	; 231
   122e4:	7e e0       	ldi	r23, 0x0E	; 14
   122e6:	ce 01       	movw	r24, r28
   122e8:	01 96       	adiw	r24, 0x01	; 1
   122ea:	0e 94 4a 19 	call	0x3294	; 0x3294 <_ZN6StringC1EPK19__FlashStringHelper>
   122ee:	ce 01       	movw	r24, r28
   122f0:	01 96       	adiw	r24, 0x01	; 1
   122f2:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <_Z2spRK6String>
   122f6:	ce 01       	movw	r24, r28
   122f8:	01 96       	adiw	r24, 0x01	; 1
   122fa:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   122fe:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <_Z5speolv>
   12302:	f7 e0       	ldi	r31, 0x07	; 7
   12304:	ef 0e       	add	r14, r31
   12306:	f1 1c       	adc	r15, r1
   12308:	09 5f       	subi	r16, 0xF9	; 249
   1230a:	1f 4f       	sbci	r17, 0xFF	; 255
   1230c:	2c e8       	ldi	r18, 0x8C	; 140
   1230e:	e2 16       	cp	r14, r18
   12310:	f1 04       	cpc	r15, r1
   12312:	09 f0       	breq	.+2      	; 0x12316 <_ZL11meshRoutingv+0x198>
   12314:	58 cf       	rjmp	.-336    	; 0x121c6 <_ZL11meshRoutingv+0x48>
   12316:	61 e0       	ldi	r22, 0x01	; 1
   12318:	70 e0       	ldi	r23, 0x00	; 0
   1231a:	80 e0       	ldi	r24, 0x00	; 0
   1231c:	90 e0       	ldi	r25, 0x00	; 0
   1231e:	26 96       	adiw	r28, 0x06	; 6
   12320:	0f b6       	in	r0, 0x3f	; 63
   12322:	f8 94       	cli
   12324:	de bf       	out	0x3e, r29	; 62
   12326:	0f be       	out	0x3f, r0	; 63
   12328:	cd bf       	out	0x3d, r28	; 61
   1232a:	df 91       	pop	r29
   1232c:	cf 91       	pop	r28
   1232e:	1f 91       	pop	r17
   12330:	0f 91       	pop	r16
   12332:	ff 90       	pop	r15
   12334:	ef 90       	pop	r14
   12336:	df 90       	pop	r13
   12338:	cf 90       	pop	r12
   1233a:	bf 90       	pop	r11
   1233c:	af 90       	pop	r10
   1233e:	08 95       	ret

00012340 <_ZL12meshReportHQv>:
   12340:	2f 92       	push	r2
   12342:	3f 92       	push	r3
   12344:	4f 92       	push	r4
   12346:	5f 92       	push	r5
   12348:	6f 92       	push	r6
   1234a:	7f 92       	push	r7
   1234c:	8f 92       	push	r8
   1234e:	9f 92       	push	r9
   12350:	af 92       	push	r10
   12352:	bf 92       	push	r11
   12354:	cf 92       	push	r12
   12356:	df 92       	push	r13
   12358:	ef 92       	push	r14
   1235a:	ff 92       	push	r15
   1235c:	0f 93       	push	r16
   1235e:	1f 93       	push	r17
   12360:	cf 93       	push	r28
   12362:	df 93       	push	r29
   12364:	cd b7       	in	r28, 0x3d	; 61
   12366:	de b7       	in	r29, 0x3e	; 62
   12368:	2f 97       	sbiw	r28, 0x0f	; 15
   1236a:	0f b6       	in	r0, 0x3f	; 63
   1236c:	f8 94       	cli
   1236e:	de bf       	out	0x3e, r29	; 62
   12370:	0f be       	out	0x3f, r0	; 63
   12372:	cd bf       	out	0x3d, r28	; 61
   12374:	7c 01       	movw	r14, r24
   12376:	41 e0       	ldi	r20, 0x01	; 1
   12378:	50 e0       	ldi	r21, 0x00	; 0
   1237a:	64 e6       	ldi	r22, 0x64	; 100
   1237c:	70 e0       	ldi	r23, 0x00	; 0
   1237e:	9e 01       	movw	r18, r28
   12380:	2f 5f       	subi	r18, 0xFF	; 255
   12382:	3f 4f       	sbci	r19, 0xFF	; 255
   12384:	69 01       	movw	r12, r18
   12386:	c9 01       	movw	r24, r18
   12388:	0e 94 8d ab 	call	0x1571a	; 0x1571a <_ZN12StringBufferC1Ejj>
   1238c:	0e 94 4a 4d 	call	0x9a94	; 0x9a94 <NWK_RouteTable>
   12390:	20 e0       	ldi	r18, 0x00	; 0
   12392:	30 e0       	ldi	r19, 0x00	; 0
   12394:	00 e0       	ldi	r16, 0x00	; 0
   12396:	10 e0       	ldi	r17, 0x00	; 0
   12398:	fc 01       	movw	r30, r24
   1239a:	e2 0f       	add	r30, r18
   1239c:	f3 1f       	adc	r31, r19
   1239e:	41 81       	ldd	r20, Z+1	; 0x01
   123a0:	52 81       	ldd	r21, Z+2	; 0x02
   123a2:	4f 3f       	cpi	r20, 0xFF	; 255
   123a4:	5f 4f       	sbci	r21, 0xFF	; 255
   123a6:	11 f0       	breq	.+4      	; 0x123ac <_ZL12meshReportHQv+0x6c>
   123a8:	0f 5f       	subi	r16, 0xFF	; 255
   123aa:	1f 4f       	sbci	r17, 0xFF	; 255
   123ac:	29 5f       	subi	r18, 0xF9	; 249
   123ae:	3f 4f       	sbci	r19, 0xFF	; 255
   123b0:	2c 38       	cpi	r18, 0x8C	; 140
   123b2:	31 05       	cpc	r19, r1
   123b4:	89 f7       	brne	.-30     	; 0x12398 <_ZL12meshReportHQv+0x58>
   123b6:	80 ea       	ldi	r24, 0xA0	; 160
   123b8:	95 e3       	ldi	r25, 0x35	; 53
   123ba:	0e 94 c8 6e 	call	0xdd90	; 0xdd90 <_ZN13PinoccioClass10getChannelEv>
   123be:	28 2f       	mov	r18, r24
   123c0:	80 ea       	ldi	r24, 0xA0	; 160
   123c2:	95 e3       	ldi	r25, 0x35	; 53
   123c4:	2f 87       	std	Y+15, r18	; 0x0f
   123c6:	0e 94 c4 6e 	call	0xdd88	; 0xdd88 <_ZN13PinoccioClass8getPanIdEv>
   123ca:	38 2e       	mov	r3, r24
   123cc:	29 2e       	mov	r2, r25
   123ce:	80 ea       	ldi	r24, 0xA0	; 160
   123d0:	95 e3       	ldi	r25, 0x35	; 53
   123d2:	0e 94 c0 6e 	call	0xdd80	; 0xdd80 <_ZN13PinoccioClass10getAddressEv>
   123d6:	58 2e       	mov	r5, r24
   123d8:	49 2e       	mov	r4, r25
   123da:	40 e0       	ldi	r20, 0x00	; 0
   123dc:	50 e0       	ldi	r21, 0x00	; 0
   123de:	ba 01       	movw	r22, r20
   123e0:	83 e6       	ldi	r24, 0x63	; 99
   123e2:	9f e1       	ldi	r25, 0x1F	; 31
   123e4:	0e 94 2c 68 	call	0xd058	; 0xd058 <keyMap>
   123e8:	78 2e       	mov	r7, r24
   123ea:	69 2e       	mov	r6, r25
   123ec:	40 e0       	ldi	r20, 0x00	; 0
   123ee:	50 e0       	ldi	r21, 0x00	; 0
   123f0:	ba 01       	movw	r22, r20
   123f2:	85 e7       	ldi	r24, 0x75	; 117
   123f4:	9f e1       	ldi	r25, 0x1F	; 31
   123f6:	0e 94 2c 68 	call	0xd058	; 0xd058 <keyMap>
   123fa:	98 2e       	mov	r9, r24
   123fc:	89 2e       	mov	r8, r25
   123fe:	40 e0       	ldi	r20, 0x00	; 0
   12400:	50 e0       	ldi	r21, 0x00	; 0
   12402:	ba 01       	movw	r22, r20
   12404:	87 ed       	ldi	r24, 0xD7	; 215
   12406:	9c e1       	ldi	r25, 0x1C	; 28
   12408:	0e 94 2c 68 	call	0xd058	; 0xd058 <keyMap>
   1240c:	b8 2e       	mov	r11, r24
   1240e:	a9 2e       	mov	r10, r25
   12410:	40 e0       	ldi	r20, 0x00	; 0
   12412:	50 e0       	ldi	r21, 0x00	; 0
   12414:	ba 01       	movw	r22, r20
   12416:	8f ed       	ldi	r24, 0xDF	; 223
   12418:	9c e1       	ldi	r25, 0x1C	; 28
   1241a:	0e 94 2c 68 	call	0xd058	; 0xd058 <keyMap>
   1241e:	89 87       	std	Y+9, r24	; 0x09
   12420:	9a 87       	std	Y+10, r25	; 0x0a
   12422:	40 e0       	ldi	r20, 0x00	; 0
   12424:	50 e0       	ldi	r21, 0x00	; 0
   12426:	ba 01       	movw	r22, r20
   12428:	86 ee       	ldi	r24, 0xE6	; 230
   1242a:	9c e1       	ldi	r25, 0x1C	; 28
   1242c:	0e 94 2c 68 	call	0xd058	; 0xd058 <keyMap>
   12430:	8b 87       	std	Y+11, r24	; 0x0b
   12432:	9c 87       	std	Y+12, r25	; 0x0c
   12434:	40 e0       	ldi	r20, 0x00	; 0
   12436:	50 e0       	ldi	r21, 0x00	; 0
   12438:	ba 01       	movw	r22, r20
   1243a:	8e ee       	ldi	r24, 0xEE	; 238
   1243c:	9c e1       	ldi	r25, 0x1C	; 28
   1243e:	0e 94 2c 68 	call	0xd058	; 0xd058 <keyMap>
   12442:	38 2f       	mov	r19, r24
   12444:	9d 87       	std	Y+13, r25	; 0x0d
   12446:	40 e0       	ldi	r20, 0x00	; 0
   12448:	50 e0       	ldi	r21, 0x00	; 0
   1244a:	ba 01       	movw	r22, r20
   1244c:	86 ef       	ldi	r24, 0xF6	; 246
   1244e:	9c e1       	ldi	r25, 0x1C	; 28
   12450:	3e 87       	std	Y+14, r19	; 0x0e
   12452:	0e 94 2c 68 	call	0xd058	; 0xd058 <keyMap>
   12456:	1f 92       	push	r1
   12458:	2f 85       	ldd	r18, Y+15	; 0x0f
   1245a:	2f 93       	push	r18
   1245c:	1f 93       	push	r17
   1245e:	0f 93       	push	r16
   12460:	2f 92       	push	r2
   12462:	3f 92       	push	r3
   12464:	4f 92       	push	r4
   12466:	5f 92       	push	r5
   12468:	6f 92       	push	r6
   1246a:	7f 92       	push	r7
   1246c:	8f 92       	push	r8
   1246e:	9f 92       	push	r9
   12470:	af 92       	push	r10
   12472:	bf 92       	push	r11
   12474:	2a 85       	ldd	r18, Y+10	; 0x0a
   12476:	2f 93       	push	r18
   12478:	29 85       	ldd	r18, Y+9	; 0x09
   1247a:	2f 93       	push	r18
   1247c:	2c 85       	ldd	r18, Y+12	; 0x0c
   1247e:	2f 93       	push	r18
   12480:	2b 85       	ldd	r18, Y+11	; 0x0b
   12482:	2f 93       	push	r18
   12484:	2d 85       	ldd	r18, Y+13	; 0x0d
   12486:	2f 93       	push	r18
   12488:	3e 85       	ldd	r19, Y+14	; 0x0e
   1248a:	3f 93       	push	r19
   1248c:	9f 93       	push	r25
   1248e:	8f 93       	push	r24
   12490:	8b ef       	ldi	r24, 0xFB	; 251
   12492:	9c e1       	ldi	r25, 0x1C	; 28
   12494:	9f 93       	push	r25
   12496:	8f 93       	push	r24
   12498:	df 92       	push	r13
   1249a:	cf 92       	push	r12
   1249c:	0e 94 b2 ab 	call	0x15764	; 0x15764 <_ZN12StringBuffer13appendSprintfEPKcz>
   124a0:	80 ea       	ldi	r24, 0xA0	; 160
   124a2:	95 e3       	ldi	r25, 0x35	; 53
   124a4:	0e 94 e9 6e 	call	0xddd2	; 0xddd2 <_ZN13PinoccioClass15getDataRatekbpsEv>
   124a8:	0f b6       	in	r0, 0x3f	; 63
   124aa:	f8 94       	cli
   124ac:	de bf       	out	0x3e, r29	; 62
   124ae:	0f be       	out	0x3f, r0	; 63
   124b0:	cd bf       	out	0x3d, r28	; 61
   124b2:	fc 01       	movw	r30, r24
   124b4:	64 91       	lpm	r22, Z
   124b6:	8c 01       	movw	r16, r24
   124b8:	0f 5f       	subi	r16, 0xFF	; 255
   124ba:	1f 4f       	sbci	r17, 0xFF	; 255
   124bc:	66 23       	and	r22, r22
   124be:	29 f0       	breq	.+10     	; 0x124ca <_ZL12meshReportHQv+0x18a>
   124c0:	c6 01       	movw	r24, r12
   124c2:	0e 94 8c 19 	call	0x3318	; 0x3318 <_ZN6String6concatEc>
   124c6:	c8 01       	movw	r24, r16
   124c8:	f4 cf       	rjmp	.-24     	; 0x124b2 <_ZL12meshReportHQv+0x172>
   124ca:	62 e2       	ldi	r22, 0x22	; 34
   124cc:	7d e1       	ldi	r23, 0x1D	; 29
   124ce:	c6 01       	movw	r24, r12
   124d0:	0e 94 7d 19 	call	0x32fa	; 0x32fa <_ZN6String6concatEPKc>
   124d4:	80 ea       	ldi	r24, 0xA0	; 160
   124d6:	95 e3       	ldi	r25, 0x35	; 53
   124d8:	0e 94 d9 6e 	call	0xddb2	; 0xddb2 <_ZN13PinoccioClass12getTxPowerDbEv>
   124dc:	fc 01       	movw	r30, r24
   124de:	64 91       	lpm	r22, Z
   124e0:	8c 01       	movw	r16, r24
   124e2:	0f 5f       	subi	r16, 0xFF	; 255
   124e4:	1f 4f       	sbci	r17, 0xFF	; 255
   124e6:	66 23       	and	r22, r22
   124e8:	29 f0       	breq	.+10     	; 0x124f4 <_ZL12meshReportHQv+0x1b4>
   124ea:	c6 01       	movw	r24, r12
   124ec:	0e 94 8c 19 	call	0x3318	; 0x3318 <_ZN6String6concatEc>
   124f0:	c8 01       	movw	r24, r16
   124f2:	f4 cf       	rjmp	.-24     	; 0x124dc <_ZL12meshReportHQv+0x19c>
   124f4:	6a e7       	ldi	r22, 0x7A	; 122
   124f6:	7d e1       	ldi	r23, 0x1D	; 29
   124f8:	c6 01       	movw	r24, r12
   124fa:	0e 94 7d 19 	call	0x32fa	; 0x32fa <_ZN6String6concatEPKc>
   124fe:	a6 01       	movw	r20, r12
   12500:	6b ee       	ldi	r22, 0xEB	; 235
   12502:	78 e3       	ldi	r23, 0x38	; 56
   12504:	c7 01       	movw	r24, r14
   12506:	0e 94 3f 7c 	call	0xf87e	; 0xf87e <_ZN20PinoccioScoutHandler6reportERK6String>
   1250a:	c6 01       	movw	r24, r12
   1250c:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   12510:	c7 01       	movw	r24, r14
   12512:	2f 96       	adiw	r28, 0x0f	; 15
   12514:	0f b6       	in	r0, 0x3f	; 63
   12516:	f8 94       	cli
   12518:	de bf       	out	0x3e, r29	; 62
   1251a:	0f be       	out	0x3f, r0	; 63
   1251c:	cd bf       	out	0x3d, r28	; 61
   1251e:	df 91       	pop	r29
   12520:	cf 91       	pop	r28
   12522:	1f 91       	pop	r17
   12524:	0f 91       	pop	r16
   12526:	ff 90       	pop	r15
   12528:	ef 90       	pop	r14
   1252a:	df 90       	pop	r13
   1252c:	cf 90       	pop	r12
   1252e:	bf 90       	pop	r11
   12530:	af 90       	pop	r10
   12532:	9f 90       	pop	r9
   12534:	8f 90       	pop	r8
   12536:	7f 90       	pop	r7
   12538:	6f 90       	pop	r6
   1253a:	5f 90       	pop	r5
   1253c:	4f 90       	pop	r4
   1253e:	3f 90       	pop	r3
   12540:	2f 90       	pop	r2
   12542:	08 95       	ret

00012544 <_ZL10meshReportv>:
   12544:	cf 93       	push	r28
   12546:	df 93       	push	r29
   12548:	cd b7       	in	r28, 0x3d	; 61
   1254a:	de b7       	in	r29, 0x3e	; 62
   1254c:	28 97       	sbiw	r28, 0x08	; 8
   1254e:	0f b6       	in	r0, 0x3f	; 63
   12550:	f8 94       	cli
   12552:	de bf       	out	0x3e, r29	; 62
   12554:	0f be       	out	0x3f, r0	; 63
   12556:	cd bf       	out	0x3d, r28	; 61
   12558:	ce 01       	movw	r24, r28
   1255a:	01 96       	adiw	r24, 0x01	; 1
   1255c:	f1 de       	rcall	.-542    	; 0x12340 <_ZL12meshReportHQv>
   1255e:	ce 01       	movw	r24, r28
   12560:	01 96       	adiw	r24, 0x01	; 1
   12562:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <_Z5speolRK6String>
   12566:	ce 01       	movw	r24, r28
   12568:	01 96       	adiw	r24, 0x01	; 1
   1256a:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   1256e:	61 e0       	ldi	r22, 0x01	; 1
   12570:	70 e0       	ldi	r23, 0x00	; 0
   12572:	80 e0       	ldi	r24, 0x00	; 0
   12574:	90 e0       	ldi	r25, 0x00	; 0
   12576:	28 96       	adiw	r28, 0x08	; 8
   12578:	0f b6       	in	r0, 0x3f	; 63
   1257a:	f8 94       	cli
   1257c:	de bf       	out	0x3e, r29	; 62
   1257e:	0f be       	out	0x3f, r0	; 63
   12580:	cd bf       	out	0x3d, r28	; 61
   12582:	df 91       	pop	r29
   12584:	cf 91       	pop	r28
   12586:	08 95       	ret

00012588 <_ZL13meshIsInGroupv>:
   12588:	61 e0       	ldi	r22, 0x01	; 1
   1258a:	70 e0       	ldi	r23, 0x00	; 0
   1258c:	80 e0       	ldi	r24, 0x00	; 0
   1258e:	90 e0       	ldi	r25, 0x00	; 0
   12590:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   12594:	80 ea       	ldi	r24, 0xA0	; 160
   12596:	95 e3       	ldi	r25, 0x35	; 53
   12598:	0e 94 bd 6e 	call	0xdd7a	; 0xdd7a <_ZN13PinoccioClass13meshIsInGroupEj>
   1259c:	68 2f       	mov	r22, r24
   1259e:	70 e0       	ldi	r23, 0x00	; 0
   125a0:	80 e0       	ldi	r24, 0x00	; 0
   125a2:	90 e0       	ldi	r25, 0x00	; 0
   125a4:	08 95       	ret

000125a6 <_ZL14meshLeaveGroupv>:
   125a6:	61 e0       	ldi	r22, 0x01	; 1
   125a8:	70 e0       	ldi	r23, 0x00	; 0
   125aa:	80 e0       	ldi	r24, 0x00	; 0
   125ac:	90 e0       	ldi	r25, 0x00	; 0
   125ae:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   125b2:	80 ea       	ldi	r24, 0xA0	; 160
   125b4:	95 e3       	ldi	r25, 0x35	; 53
   125b6:	0e 94 ad 6e 	call	0xdd5a	; 0xdd5a <_ZN13PinoccioClass14meshLeaveGroupEj>
   125ba:	61 e0       	ldi	r22, 0x01	; 1
   125bc:	70 e0       	ldi	r23, 0x00	; 0
   125be:	80 e0       	ldi	r24, 0x00	; 0
   125c0:	90 e0       	ldi	r25, 0x00	; 0
   125c2:	08 95       	ret

000125c4 <_ZL13meshJoinGroupv>:
   125c4:	61 e0       	ldi	r22, 0x01	; 1
   125c6:	70 e0       	ldi	r23, 0x00	; 0
   125c8:	80 e0       	ldi	r24, 0x00	; 0
   125ca:	90 e0       	ldi	r25, 0x00	; 0
   125cc:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   125d0:	80 ea       	ldi	r24, 0xA0	; 160
   125d2:	95 e3       	ldi	r25, 0x35	; 53
   125d4:	0e 94 9d 6e 	call	0xdd3a	; 0xdd3a <_ZN13PinoccioClass13meshJoinGroupEj>
   125d8:	61 e0       	ldi	r22, 0x01	; 1
   125da:	70 e0       	ldi	r23, 0x00	; 0
   125dc:	80 e0       	ldi	r24, 0x00	; 0
   125de:	90 e0       	ldi	r25, 0x00	; 0
   125e0:	08 95       	ret

000125e2 <_ZL10meshGetKeyv>:
   125e2:	cf 93       	push	r28
   125e4:	df 93       	push	r29
   125e6:	cd b7       	in	r28, 0x3d	; 61
   125e8:	de b7       	in	r29, 0x3e	; 62
   125ea:	61 97       	sbiw	r28, 0x11	; 17
   125ec:	0f b6       	in	r0, 0x3f	; 63
   125ee:	f8 94       	cli
   125f0:	de bf       	out	0x3e, r29	; 62
   125f2:	0f be       	out	0x3f, r0	; 63
   125f4:	cd bf       	out	0x3d, r28	; 61
   125f6:	be 01       	movw	r22, r28
   125f8:	6f 5f       	subi	r22, 0xFF	; 255
   125fa:	7f 4f       	sbci	r23, 0xFF	; 255
   125fc:	80 ea       	ldi	r24, 0xA0	; 160
   125fe:	95 e3       	ldi	r25, 0x35	; 53
   12600:	0e 94 62 6e 	call	0xdcc4	; 0xdcc4 <_ZN13PinoccioClass18meshGetSecurityKeyEPc>
   12604:	19 8a       	std	Y+17, r1	; 0x11
   12606:	ce 01       	movw	r24, r28
   12608:	01 96       	adiw	r24, 0x01	; 1
   1260a:	0e 94 79 1f 	call	0x3ef2	; 0x3ef2 <_Z5speolPKc>
   1260e:	0e 94 16 14 	call	0x282c	; 0x282c <millis>
   12612:	ab 01       	movw	r20, r22
   12614:	bc 01       	movw	r22, r24
   12616:	ce 01       	movw	r24, r28
   12618:	01 96       	adiw	r24, 0x01	; 1
   1261a:	0e 94 2c 68 	call	0xd058	; 0xd058 <keyMap>
   1261e:	bc 01       	movw	r22, r24
   12620:	88 27       	eor	r24, r24
   12622:	77 fd       	sbrc	r23, 7
   12624:	80 95       	com	r24
   12626:	98 2f       	mov	r25, r24
   12628:	61 96       	adiw	r28, 0x11	; 17
   1262a:	0f b6       	in	r0, 0x3f	; 63
   1262c:	f8 94       	cli
   1262e:	de bf       	out	0x3e, r29	; 62
   12630:	0f be       	out	0x3f, r0	; 63
   12632:	cd bf       	out	0x3d, r28	; 61
   12634:	df 91       	pop	r29
   12636:	cf 91       	pop	r28
   12638:	08 95       	ret

0001263a <_ZL10meshSetKeyv>:
   1263a:	61 e0       	ldi	r22, 0x01	; 1
   1263c:	70 e0       	ldi	r23, 0x00	; 0
   1263e:	80 e0       	ldi	r24, 0x00	; 0
   12640:	90 e0       	ldi	r25, 0x00	; 0
   12642:	0e 94 8f 24 	call	0x491e	; 0x491e <_Z12getstringargl>
   12646:	80 ea       	ldi	r24, 0xA0	; 160
   12648:	95 e3       	ldi	r25, 0x35	; 53
   1264a:	0e 94 86 6d 	call	0xdb0c	; 0xdb0c <_ZN13PinoccioClass18meshSetSecurityKeyEPKh>
   1264e:	61 e0       	ldi	r22, 0x01	; 1
   12650:	70 e0       	ldi	r23, 0x00	; 0
   12652:	80 e0       	ldi	r24, 0x00	; 0
   12654:	90 e0       	ldi	r25, 0x00	; 0
   12656:	08 95       	ret

00012658 <_ZL15meshSetDataRatev>:
   12658:	61 e0       	ldi	r22, 0x01	; 1
   1265a:	70 e0       	ldi	r23, 0x00	; 0
   1265c:	80 e0       	ldi	r24, 0x00	; 0
   1265e:	90 e0       	ldi	r25, 0x00	; 0
   12660:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   12664:	80 ea       	ldi	r24, 0xA0	; 160
   12666:	95 e3       	ldi	r25, 0x35	; 53
   12668:	0e 94 3e 6d 	call	0xda7c	; 0xda7c <_ZN13PinoccioClass15meshSetDataRateEh>
   1266c:	61 e0       	ldi	r22, 0x01	; 1
   1266e:	70 e0       	ldi	r23, 0x00	; 0
   12670:	80 e0       	ldi	r24, 0x00	; 0
   12672:	90 e0       	ldi	r25, 0x00	; 0
   12674:	08 95       	ret

00012676 <_ZL12meshSetPowerv>:
   12676:	61 e0       	ldi	r22, 0x01	; 1
   12678:	70 e0       	ldi	r23, 0x00	; 0
   1267a:	80 e0       	ldi	r24, 0x00	; 0
   1267c:	90 e0       	ldi	r25, 0x00	; 0
   1267e:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   12682:	80 ea       	ldi	r24, 0xA0	; 160
   12684:	95 e3       	ldi	r25, 0x35	; 53
   12686:	0e 94 26 6d 	call	0xda4c	; 0xda4c <_ZN13PinoccioClass12meshSetPowerEh>
   1268a:	61 e0       	ldi	r22, 0x01	; 1
   1268c:	70 e0       	ldi	r23, 0x00	; 0
   1268e:	80 e0       	ldi	r24, 0x00	; 0
   12690:	90 e0       	ldi	r25, 0x00	; 0
   12692:	08 95       	ret

00012694 <_ZL18disableBackpackVccv>:
   12694:	80 ea       	ldi	r24, 0xA0	; 160
   12696:	95 e3       	ldi	r25, 0x35	; 53
   12698:	0e 94 a8 70 	call	0xe150	; 0xe150 <_ZN13PinoccioScout18disableBackpackVccEv>
   1269c:	61 e0       	ldi	r22, 0x01	; 1
   1269e:	70 e0       	ldi	r23, 0x00	; 0
   126a0:	80 e0       	ldi	r24, 0x00	; 0
   126a2:	90 e0       	ldi	r25, 0x00	; 0
   126a4:	08 95       	ret

000126a6 <_ZL17enableBackpackVccv>:
   126a6:	80 ea       	ldi	r24, 0xA0	; 160
   126a8:	95 e3       	ldi	r25, 0x35	; 53
   126aa:	0e 94 9f 70 	call	0xe13e	; 0xe13e <_ZN13PinoccioScout17enableBackpackVccEv>
   126ae:	61 e0       	ldi	r22, 0x01	; 1
   126b0:	70 e0       	ldi	r23, 0x00	; 0
   126b2:	80 e0       	ldi	r24, 0x00	; 0
   126b4:	90 e0       	ldi	r25, 0x00	; 0
   126b6:	08 95       	ret

000126b8 <_ZL14pinoccioBannerv>:
   126b8:	cf 93       	push	r28
   126ba:	df 93       	push	r29
   126bc:	00 d0       	rcall	.+0      	; 0x126be <_ZL14pinoccioBannerv+0x6>
   126be:	00 d0       	rcall	.+0      	; 0x126c0 <_ZL14pinoccioBannerv+0x8>
   126c0:	cd b7       	in	r28, 0x3d	; 61
   126c2:	de b7       	in	r29, 0x3e	; 62
   126c4:	67 ee       	ldi	r22, 0xE7	; 231
   126c6:	7d e0       	ldi	r23, 0x0D	; 13
   126c8:	ce 01       	movw	r24, r28
   126ca:	01 96       	adiw	r24, 0x01	; 1
   126cc:	0e 94 4a 19 	call	0x3294	; 0x3294 <_ZN6StringC1EPK19__FlashStringHelper>
   126d0:	ce 01       	movw	r24, r28
   126d2:	01 96       	adiw	r24, 0x01	; 1
   126d4:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <_Z5speolRK6String>
   126d8:	ce 01       	movw	r24, r28
   126da:	01 96       	adiw	r24, 0x01	; 1
   126dc:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   126e0:	66 eb       	ldi	r22, 0xB6	; 182
   126e2:	7d e0       	ldi	r23, 0x0D	; 13
   126e4:	ce 01       	movw	r24, r28
   126e6:	01 96       	adiw	r24, 0x01	; 1
   126e8:	0e 94 4a 19 	call	0x3294	; 0x3294 <_ZN6StringC1EPK19__FlashStringHelper>
   126ec:	ce 01       	movw	r24, r28
   126ee:	01 96       	adiw	r24, 0x01	; 1
   126f0:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <_Z5speolRK6String>
   126f4:	ce 01       	movw	r24, r28
   126f6:	01 96       	adiw	r24, 0x01	; 1
   126f8:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   126fc:	64 eb       	ldi	r22, 0xB4	; 180
   126fe:	7d e0       	ldi	r23, 0x0D	; 13
   12700:	ce 01       	movw	r24, r28
   12702:	01 96       	adiw	r24, 0x01	; 1
   12704:	0e 94 4a 19 	call	0x3294	; 0x3294 <_ZN6StringC1EPK19__FlashStringHelper>
   12708:	ce 01       	movw	r24, r28
   1270a:	01 96       	adiw	r24, 0x01	; 1
   1270c:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <_Z2spRK6String>
   12710:	ce 01       	movw	r24, r28
   12712:	01 96       	adiw	r24, 0x01	; 1
   12714:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   12718:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <_Z9func_freev>
   1271c:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <_Z2spl>
   12720:	68 ea       	ldi	r22, 0xA8	; 168
   12722:	7d e0       	ldi	r23, 0x0D	; 13
   12724:	ce 01       	movw	r24, r28
   12726:	01 96       	adiw	r24, 0x01	; 1
   12728:	0e 94 4a 19 	call	0x3294	; 0x3294 <_ZN6StringC1EPK19__FlashStringHelper>
   1272c:	ce 01       	movw	r24, r28
   1272e:	01 96       	adiw	r24, 0x01	; 1
   12730:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <_Z5speolRK6String>
   12734:	ce 01       	movw	r24, r28
   12736:	01 96       	adiw	r24, 0x01	; 1
   12738:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   1273c:	66 ea       	ldi	r22, 0xA6	; 166
   1273e:	7d e0       	ldi	r23, 0x0D	; 13
   12740:	ce 01       	movw	r24, r28
   12742:	01 96       	adiw	r24, 0x01	; 1
   12744:	0e 94 4a 19 	call	0x3294	; 0x3294 <_ZN6StringC1EPK19__FlashStringHelper>
   12748:	ce 01       	movw	r24, r28
   1274a:	01 96       	adiw	r24, 0x01	; 1
   1274c:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <_Z2spRK6String>
   12750:	ce 01       	movw	r24, r28
   12752:	01 96       	adiw	r24, 0x01	; 1
   12754:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   12758:	80 ea       	ldi	r24, 0xA0	; 160
   1275a:	95 e3       	ldi	r25, 0x35	; 53
   1275c:	0e 94 cb 6e 	call	0xdd96	; 0xdd96 <_ZN13PinoccioClass13getSketchNameEv>
   12760:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <_Z2spPKc>
   12764:	6e e9       	ldi	r22, 0x9E	; 158
   12766:	7d e0       	ldi	r23, 0x0D	; 13
   12768:	ce 01       	movw	r24, r28
   1276a:	01 96       	adiw	r24, 0x01	; 1
   1276c:	0e 94 4a 19 	call	0x3294	; 0x3294 <_ZN6StringC1EPK19__FlashStringHelper>
   12770:	ce 01       	movw	r24, r28
   12772:	01 96       	adiw	r24, 0x01	; 1
   12774:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <_Z2spRK6String>
   12778:	ce 01       	movw	r24, r28
   1277a:	01 96       	adiw	r24, 0x01	; 1
   1277c:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   12780:	80 ea       	ldi	r24, 0xA0	; 160
   12782:	95 e3       	ldi	r25, 0x35	; 53
   12784:	0e 94 d3 6e 	call	0xdda6	; 0xdda6 <_ZN13PinoccioClass14getSketchBuildEv>
   12788:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <_Z2spl>
   1278c:	67 e9       	ldi	r22, 0x97	; 151
   1278e:	7d e0       	ldi	r23, 0x0D	; 13
   12790:	ce 01       	movw	r24, r28
   12792:	01 96       	adiw	r24, 0x01	; 1
   12794:	0e 94 4a 19 	call	0x3294	; 0x3294 <_ZN6StringC1EPK19__FlashStringHelper>
   12798:	ce 01       	movw	r24, r28
   1279a:	01 96       	adiw	r24, 0x01	; 1
   1279c:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <_Z2spRK6String>
   127a0:	ce 01       	movw	r24, r28
   127a2:	01 96       	adiw	r24, 0x01	; 1
   127a4:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   127a8:	80 ea       	ldi	r24, 0xA0	; 160
   127aa:	95 e3       	ldi	r25, 0x35	; 53
   127ac:	0e 94 cf 6e 	call	0xdd9e	; 0xdd9e <_ZN13PinoccioClass17getSketchRevisionEv>
   127b0:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <_Z2spPKc>
   127b4:	65 e9       	ldi	r22, 0x95	; 149
   127b6:	7d e0       	ldi	r23, 0x0D	; 13
   127b8:	ce 01       	movw	r24, r28
   127ba:	01 96       	adiw	r24, 0x01	; 1
   127bc:	0e 94 4a 19 	call	0x3294	; 0x3294 <_ZN6StringC1EPK19__FlashStringHelper>
   127c0:	ce 01       	movw	r24, r28
   127c2:	01 96       	adiw	r24, 0x01	; 1
   127c4:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <_Z5speolRK6String>
   127c8:	ce 01       	movw	r24, r28
   127ca:	01 96       	adiw	r24, 0x01	; 1
   127cc:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   127d0:	80 ea       	ldi	r24, 0xA0	; 160
   127d2:	95 e3       	ldi	r25, 0x35	; 53
   127d4:	0e 94 b5 70 	call	0xe16a	; 0xe16a <_ZN13PinoccioScout11isLeadScoutEv>
   127d8:	88 23       	and	r24, r24
   127da:	19 f0       	breq	.+6      	; 0x127e2 <_ZL14pinoccioBannerv+0x12a>
   127dc:	63 e8       	ldi	r22, 0x83	; 131
   127de:	7d e0       	ldi	r23, 0x0D	; 13
   127e0:	02 c0       	rjmp	.+4      	; 0x127e6 <_ZL14pinoccioBannerv+0x12e>
   127e2:	60 e7       	ldi	r22, 0x70	; 112
   127e4:	7d e0       	ldi	r23, 0x0D	; 13
   127e6:	ce 01       	movw	r24, r28
   127e8:	01 96       	adiw	r24, 0x01	; 1
   127ea:	0e 94 4a 19 	call	0x3294	; 0x3294 <_ZN6StringC1EPK19__FlashStringHelper>
   127ee:	ce 01       	movw	r24, r28
   127f0:	01 96       	adiw	r24, 0x01	; 1
   127f2:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <_Z5speolRK6String>
   127f6:	ce 01       	movw	r24, r28
   127f8:	01 96       	adiw	r24, 0x01	; 1
   127fa:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   127fe:	61 e0       	ldi	r22, 0x01	; 1
   12800:	70 e0       	ldi	r23, 0x00	; 0
   12802:	80 e0       	ldi	r24, 0x00	; 0
   12804:	90 e0       	ldi	r25, 0x00	; 0
   12806:	26 96       	adiw	r28, 0x06	; 6
   12808:	0f b6       	in	r0, 0x3f	; 63
   1280a:	f8 94       	cli
   1280c:	de bf       	out	0x3e, r29	; 62
   1280e:	0f be       	out	0x3f, r0	; 63
   12810:	cd bf       	out	0x3d, r28	; 61
   12812:	df 91       	pop	r29
   12814:	cf 91       	pop	r28
   12816:	08 95       	ret

00012818 <_ZL10wifiWakeupv>:
   12818:	cf 93       	push	r28
   1281a:	df 93       	push	r29
   1281c:	00 d0       	rcall	.+0      	; 0x1281e <_ZL10wifiWakeupv+0x6>
   1281e:	00 d0       	rcall	.+0      	; 0x12820 <_ZL10wifiWakeupv+0x8>
   12820:	cd b7       	in	r28, 0x3d	; 61
   12822:	de b7       	in	r29, 0x3e	; 62
   12824:	87 ef       	ldi	r24, 0xF7	; 247
   12826:	95 e3       	ldi	r25, 0x35	; 53
   12828:	0e 94 1c 68 	call	0xd038	; 0xd038 <_ZN12WiFiBackpack6wakeUpEv>
   1282c:	81 11       	cpse	r24, r1
   1282e:	0e c0       	rjmp	.+28     	; 0x1284c <_ZL10wifiWakeupv+0x34>
   12830:	69 e4       	ldi	r22, 0x49	; 73
   12832:	76 e1       	ldi	r23, 0x16	; 22
   12834:	ce 01       	movw	r24, r28
   12836:	01 96       	adiw	r24, 0x01	; 1
   12838:	0e 94 4a 19 	call	0x3294	; 0x3294 <_ZN6StringC1EPK19__FlashStringHelper>
   1283c:	ce 01       	movw	r24, r28
   1283e:	01 96       	adiw	r24, 0x01	; 1
   12840:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <_Z5speolRK6String>
   12844:	ce 01       	movw	r24, r28
   12846:	01 96       	adiw	r24, 0x01	; 1
   12848:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   1284c:	61 e0       	ldi	r22, 0x01	; 1
   1284e:	70 e0       	ldi	r23, 0x00	; 0
   12850:	80 e0       	ldi	r24, 0x00	; 0
   12852:	90 e0       	ldi	r25, 0x00	; 0
   12854:	26 96       	adiw	r28, 0x06	; 6
   12856:	0f b6       	in	r0, 0x3f	; 63
   12858:	f8 94       	cli
   1285a:	de bf       	out	0x3e, r29	; 62
   1285c:	0f be       	out	0x3f, r0	; 63
   1285e:	cd bf       	out	0x3d, r28	; 61
   12860:	df 91       	pop	r29
   12862:	cf 91       	pop	r28
   12864:	08 95       	ret

00012866 <_ZL9wifiSleepv>:
   12866:	cf 93       	push	r28
   12868:	df 93       	push	r29
   1286a:	00 d0       	rcall	.+0      	; 0x1286c <_ZL9wifiSleepv+0x6>
   1286c:	00 d0       	rcall	.+0      	; 0x1286e <_ZL9wifiSleepv+0x8>
   1286e:	cd b7       	in	r28, 0x3d	; 61
   12870:	de b7       	in	r29, 0x3e	; 62
   12872:	87 ef       	ldi	r24, 0xF7	; 247
   12874:	95 e3       	ldi	r25, 0x35	; 53
   12876:	0e 94 1a 68 	call	0xd034	; 0xd034 <_ZN12WiFiBackpack9goToSleepEv>
   1287a:	81 11       	cpse	r24, r1
   1287c:	0e c0       	rjmp	.+28     	; 0x1289a <_ZL9wifiSleepv+0x34>
   1287e:	67 e2       	ldi	r22, 0x27	; 39
   12880:	76 e1       	ldi	r23, 0x16	; 22
   12882:	ce 01       	movw	r24, r28
   12884:	01 96       	adiw	r24, 0x01	; 1
   12886:	0e 94 4a 19 	call	0x3294	; 0x3294 <_ZN6StringC1EPK19__FlashStringHelper>
   1288a:	ce 01       	movw	r24, r28
   1288c:	01 96       	adiw	r24, 0x01	; 1
   1288e:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <_Z5speolRK6String>
   12892:	ce 01       	movw	r24, r28
   12894:	01 96       	adiw	r24, 0x01	; 1
   12896:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   1289a:	61 e0       	ldi	r22, 0x01	; 1
   1289c:	70 e0       	ldi	r23, 0x00	; 0
   1289e:	80 e0       	ldi	r24, 0x00	; 0
   128a0:	90 e0       	ldi	r25, 0x00	; 0
   128a2:	26 96       	adiw	r28, 0x06	; 6
   128a4:	0f b6       	in	r0, 0x3f	; 63
   128a6:	f8 94       	cli
   128a8:	de bf       	out	0x3e, r29	; 62
   128aa:	0f be       	out	0x3f, r0	; 63
   128ac:	cd bf       	out	0x3d, r28	; 61
   128ae:	df 91       	pop	r29
   128b0:	cf 91       	pop	r28
   128b2:	08 95       	ret

000128b4 <_ZL11wifiGetTimev>:
   128b4:	cf 93       	push	r28
   128b6:	df 93       	push	r29
   128b8:	00 d0       	rcall	.+0      	; 0x128ba <_ZL11wifiGetTimev+0x6>
   128ba:	00 d0       	rcall	.+0      	; 0x128bc <_ZL11wifiGetTimev+0x8>
   128bc:	cd b7       	in	r28, 0x3d	; 61
   128be:	de b7       	in	r29, 0x3e	; 62
   128c0:	64 e0       	ldi	r22, 0x04	; 4
   128c2:	74 e2       	ldi	r23, 0x24	; 36
   128c4:	87 ef       	ldi	r24, 0xF7	; 247
   128c6:	95 e3       	ldi	r25, 0x35	; 53
   128c8:	0e 94 1e 68 	call	0xd03c	; 0xd03c <_ZN12WiFiBackpack9printTimeER5Print>
   128cc:	81 11       	cpse	r24, r1
   128ce:	0e c0       	rjmp	.+28     	; 0x128ec <_ZL11wifiGetTimev+0x38>
   128d0:	6b ef       	ldi	r22, 0xFB	; 251
   128d2:	75 e1       	ldi	r23, 0x15	; 21
   128d4:	ce 01       	movw	r24, r28
   128d6:	01 96       	adiw	r24, 0x01	; 1
   128d8:	0e 94 4a 19 	call	0x3294	; 0x3294 <_ZN6StringC1EPK19__FlashStringHelper>
   128dc:	ce 01       	movw	r24, r28
   128de:	01 96       	adiw	r24, 0x01	; 1
   128e0:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <_Z5speolRK6String>
   128e4:	ce 01       	movw	r24, r28
   128e6:	01 96       	adiw	r24, 0x01	; 1
   128e8:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   128ec:	61 e0       	ldi	r22, 0x01	; 1
   128ee:	70 e0       	ldi	r23, 0x00	; 0
   128f0:	80 e0       	ldi	r24, 0x00	; 0
   128f2:	90 e0       	ldi	r25, 0x00	; 0
   128f4:	26 96       	adiw	r28, 0x06	; 6
   128f6:	0f b6       	in	r0, 0x3f	; 63
   128f8:	f8 94       	cli
   128fa:	de bf       	out	0x3e, r29	; 62
   128fc:	0f be       	out	0x3f, r0	; 63
   128fe:	cd bf       	out	0x3d, r28	; 61
   12900:	df 91       	pop	r29
   12902:	cf 91       	pop	r28
   12904:	08 95       	ret

00012906 <_ZL13wifiDNSLookupv>:
   12906:	cf 93       	push	r28
   12908:	df 93       	push	r29
   1290a:	00 d0       	rcall	.+0      	; 0x1290c <_ZL13wifiDNSLookupv+0x6>
   1290c:	00 d0       	rcall	.+0      	; 0x1290e <_ZL13wifiDNSLookupv+0x8>
   1290e:	cd b7       	in	r28, 0x3d	; 61
   12910:	de b7       	in	r29, 0x3e	; 62
   12912:	61 e0       	ldi	r22, 0x01	; 1
   12914:	70 e0       	ldi	r23, 0x00	; 0
   12916:	80 e0       	ldi	r24, 0x00	; 0
   12918:	90 e0       	ldi	r25, 0x00	; 0
   1291a:	0e 94 8f 24 	call	0x491e	; 0x491e <_Z12getstringargl>
   1291e:	ab 01       	movw	r20, r22
   12920:	64 e0       	ldi	r22, 0x04	; 4
   12922:	74 e2       	ldi	r23, 0x24	; 36
   12924:	87 ef       	ldi	r24, 0xF7	; 247
   12926:	95 e3       	ldi	r25, 0x35	; 53
   12928:	0e 94 be 67 	call	0xcf7c	; 0xcf7c <_ZN12WiFiBackpack9dnsLookupER5PrintPKc>
   1292c:	81 11       	cpse	r24, r1
   1292e:	0e c0       	rjmp	.+28     	; 0x1294c <_ZL13wifiDNSLookupv+0x46>
   12930:	64 ed       	ldi	r22, 0xD4	; 212
   12932:	75 e1       	ldi	r23, 0x15	; 21
   12934:	ce 01       	movw	r24, r28
   12936:	01 96       	adiw	r24, 0x01	; 1
   12938:	0e 94 4a 19 	call	0x3294	; 0x3294 <_ZN6StringC1EPK19__FlashStringHelper>
   1293c:	ce 01       	movw	r24, r28
   1293e:	01 96       	adiw	r24, 0x01	; 1
   12940:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <_Z5speolRK6String>
   12944:	ce 01       	movw	r24, r28
   12946:	01 96       	adiw	r24, 0x01	; 1
   12948:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   1294c:	61 e0       	ldi	r22, 0x01	; 1
   1294e:	70 e0       	ldi	r23, 0x00	; 0
   12950:	80 e0       	ldi	r24, 0x00	; 0
   12952:	90 e0       	ldi	r25, 0x00	; 0
   12954:	26 96       	adiw	r28, 0x06	; 6
   12956:	0f b6       	in	r0, 0x3f	; 63
   12958:	f8 94       	cli
   1295a:	de bf       	out	0x3e, r29	; 62
   1295c:	0f be       	out	0x3f, r0	; 63
   1295e:	cd bf       	out	0x3d, r28	; 61
   12960:	df 91       	pop	r29
   12962:	cf 91       	pop	r28
   12964:	08 95       	ret

00012966 <_ZL8wifiPingv>:
   12966:	cf 93       	push	r28
   12968:	df 93       	push	r29
   1296a:	00 d0       	rcall	.+0      	; 0x1296c <_ZL8wifiPingv+0x6>
   1296c:	00 d0       	rcall	.+0      	; 0x1296e <_ZL8wifiPingv+0x8>
   1296e:	cd b7       	in	r28, 0x3d	; 61
   12970:	de b7       	in	r29, 0x3e	; 62
   12972:	61 e0       	ldi	r22, 0x01	; 1
   12974:	70 e0       	ldi	r23, 0x00	; 0
   12976:	80 e0       	ldi	r24, 0x00	; 0
   12978:	90 e0       	ldi	r25, 0x00	; 0
   1297a:	0e 94 8f 24 	call	0x491e	; 0x491e <_Z12getstringargl>
   1297e:	ab 01       	movw	r20, r22
   12980:	64 e0       	ldi	r22, 0x04	; 4
   12982:	74 e2       	ldi	r23, 0x24	; 36
   12984:	87 ef       	ldi	r24, 0xF7	; 247
   12986:	95 e3       	ldi	r25, 0x35	; 53
   12988:	0e 94 c0 67 	call	0xcf80	; 0xcf80 <_ZN12WiFiBackpack4pingER5PrintPKc>
   1298c:	81 11       	cpse	r24, r1
   1298e:	0e c0       	rjmp	.+28     	; 0x129ac <_ZL8wifiPingv+0x46>
   12990:	63 eb       	ldi	r22, 0xB3	; 179
   12992:	75 e1       	ldi	r23, 0x15	; 21
   12994:	ce 01       	movw	r24, r28
   12996:	01 96       	adiw	r24, 0x01	; 1
   12998:	0e 94 4a 19 	call	0x3294	; 0x3294 <_ZN6StringC1EPK19__FlashStringHelper>
   1299c:	ce 01       	movw	r24, r28
   1299e:	01 96       	adiw	r24, 0x01	; 1
   129a0:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <_Z5speolRK6String>
   129a4:	ce 01       	movw	r24, r28
   129a6:	01 96       	adiw	r24, 0x01	; 1
   129a8:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   129ac:	61 e0       	ldi	r22, 0x01	; 1
   129ae:	70 e0       	ldi	r23, 0x00	; 0
   129b0:	80 e0       	ldi	r24, 0x00	; 0
   129b2:	90 e0       	ldi	r25, 0x00	; 0
   129b4:	26 96       	adiw	r28, 0x06	; 6
   129b6:	0f b6       	in	r0, 0x3f	; 63
   129b8:	f8 94       	cli
   129ba:	de bf       	out	0x3e, r29	; 62
   129bc:	0f be       	out	0x3f, r0	; 63
   129be:	cd bf       	out	0x3d, r28	; 61
   129c0:	df 91       	pop	r29
   129c2:	cf 91       	pop	r28
   129c4:	08 95       	ret

000129c6 <_ZL11wifiCommandv>:
   129c6:	cf 93       	push	r28
   129c8:	df 93       	push	r29
   129ca:	00 d0       	rcall	.+0      	; 0x129cc <_ZL11wifiCommandv+0x6>
   129cc:	00 d0       	rcall	.+0      	; 0x129ce <_ZL11wifiCommandv+0x8>
   129ce:	cd b7       	in	r28, 0x3d	; 61
   129d0:	de b7       	in	r29, 0x3e	; 62
   129d2:	61 e0       	ldi	r22, 0x01	; 1
   129d4:	70 e0       	ldi	r23, 0x00	; 0
   129d6:	80 e0       	ldi	r24, 0x00	; 0
   129d8:	90 e0       	ldi	r25, 0x00	; 0
   129da:	0e 94 8f 24 	call	0x491e	; 0x491e <_Z12getstringargl>
   129de:	ab 01       	movw	r20, r22
   129e0:	64 e0       	ldi	r22, 0x04	; 4
   129e2:	74 e2       	ldi	r23, 0x24	; 36
   129e4:	87 ef       	ldi	r24, 0xF7	; 247
   129e6:	95 e3       	ldi	r25, 0x35	; 53
   129e8:	0e 94 c2 67 	call	0xcf84	; 0xcf84 <_ZN12WiFiBackpack16runDirectCommandER5PrintPKc>
   129ec:	81 11       	cpse	r24, r1
   129ee:	0e c0       	rjmp	.+28     	; 0x12a0c <_ZL11wifiCommandv+0x46>
   129f0:	60 e9       	ldi	r22, 0x90	; 144
   129f2:	75 e1       	ldi	r23, 0x15	; 21
   129f4:	ce 01       	movw	r24, r28
   129f6:	01 96       	adiw	r24, 0x01	; 1
   129f8:	0e 94 4a 19 	call	0x3294	; 0x3294 <_ZN6StringC1EPK19__FlashStringHelper>
   129fc:	ce 01       	movw	r24, r28
   129fe:	01 96       	adiw	r24, 0x01	; 1
   12a00:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <_Z5speolRK6String>
   12a04:	ce 01       	movw	r24, r28
   12a06:	01 96       	adiw	r24, 0x01	; 1
   12a08:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   12a0c:	61 e0       	ldi	r22, 0x01	; 1
   12a0e:	70 e0       	ldi	r23, 0x00	; 0
   12a10:	80 e0       	ldi	r24, 0x00	; 0
   12a12:	90 e0       	ldi	r25, 0x00	; 0
   12a14:	26 96       	adiw	r28, 0x06	; 6
   12a16:	0f b6       	in	r0, 0x3f	; 63
   12a18:	f8 94       	cli
   12a1a:	de bf       	out	0x3e, r29	; 62
   12a1c:	0f be       	out	0x3f, r0	; 63
   12a1e:	cd bf       	out	0x3d, r28	; 61
   12a20:	df 91       	pop	r29
   12a22:	cf 91       	pop	r28
   12a24:	08 95       	ret

00012a26 <_ZL8wifiDhcpv>:
   12a26:	cf 93       	push	r28
   12a28:	df 93       	push	r29
   12a2a:	00 d0       	rcall	.+0      	; 0x12a2c <_ZL8wifiDhcpv+0x6>
   12a2c:	00 d0       	rcall	.+0      	; 0x12a2e <_ZL8wifiDhcpv+0x8>
   12a2e:	cd b7       	in	r28, 0x3d	; 61
   12a30:	de b7       	in	r29, 0x3e	; 62
   12a32:	60 e0       	ldi	r22, 0x00	; 0
   12a34:	70 e0       	ldi	r23, 0x00	; 0
   12a36:	cb 01       	movw	r24, r22
   12a38:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   12a3c:	16 16       	cp	r1, r22
   12a3e:	17 06       	cpc	r1, r23
   12a40:	18 06       	cpc	r1, r24
   12a42:	19 06       	cpc	r1, r25
   12a44:	3c f4       	brge	.+14     	; 0x12a54 <_ZL8wifiDhcpv+0x2e>
   12a46:	61 e0       	ldi	r22, 0x01	; 1
   12a48:	70 e0       	ldi	r23, 0x00	; 0
   12a4a:	80 e0       	ldi	r24, 0x00	; 0
   12a4c:	90 e0       	ldi	r25, 0x00	; 0
   12a4e:	0e 94 8f 24 	call	0x491e	; 0x491e <_Z12getstringargl>
   12a52:	02 c0       	rjmp	.+4      	; 0x12a58 <_ZL8wifiDhcpv+0x32>
   12a54:	60 e0       	ldi	r22, 0x00	; 0
   12a56:	70 e0       	ldi	r23, 0x00	; 0
   12a58:	87 ef       	ldi	r24, 0xF7	; 247
   12a5a:	95 e3       	ldi	r25, 0x35	; 53
   12a5c:	0e 94 1a 66 	call	0xcc34	; 0xcc34 <_ZN12WiFiBackpack8wifiDhcpEPKc>
   12a60:	81 11       	cpse	r24, r1
   12a62:	0e c0       	rjmp	.+28     	; 0x12a80 <_ZL8wifiDhcpv+0x5a>
   12a64:	68 ec       	ldi	r22, 0xC8	; 200
   12a66:	74 e1       	ldi	r23, 0x14	; 20
   12a68:	ce 01       	movw	r24, r28
   12a6a:	01 96       	adiw	r24, 0x01	; 1
   12a6c:	0e 94 4a 19 	call	0x3294	; 0x3294 <_ZN6StringC1EPK19__FlashStringHelper>
   12a70:	ce 01       	movw	r24, r28
   12a72:	01 96       	adiw	r24, 0x01	; 1
   12a74:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <_Z5speolRK6String>
   12a78:	ce 01       	movw	r24, r28
   12a7a:	01 96       	adiw	r24, 0x01	; 1
   12a7c:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   12a80:	61 e0       	ldi	r22, 0x01	; 1
   12a82:	70 e0       	ldi	r23, 0x00	; 0
   12a84:	80 e0       	ldi	r24, 0x00	; 0
   12a86:	90 e0       	ldi	r25, 0x00	; 0
   12a88:	26 96       	adiw	r28, 0x06	; 6
   12a8a:	0f b6       	in	r0, 0x3f	; 63
   12a8c:	f8 94       	cli
   12a8e:	de bf       	out	0x3e, r29	; 62
   12a90:	0f be       	out	0x3f, r0	; 63
   12a92:	cd bf       	out	0x3d, r28	; 61
   12a94:	df 91       	pop	r29
   12a96:	cf 91       	pop	r28
   12a98:	08 95       	ret

00012a9a <_ZL10wifiConfigv>:
   12a9a:	cf 92       	push	r12
   12a9c:	df 92       	push	r13
   12a9e:	ef 92       	push	r14
   12aa0:	ff 92       	push	r15
   12aa2:	cf 93       	push	r28
   12aa4:	df 93       	push	r29
   12aa6:	00 d0       	rcall	.+0      	; 0x12aa8 <_ZL10wifiConfigv+0xe>
   12aa8:	00 d0       	rcall	.+0      	; 0x12aaa <_ZL10wifiConfigv+0x10>
   12aaa:	cd b7       	in	r28, 0x3d	; 61
   12aac:	de b7       	in	r29, 0x3e	; 62
   12aae:	62 e0       	ldi	r22, 0x02	; 2
   12ab0:	70 e0       	ldi	r23, 0x00	; 0
   12ab2:	80 e0       	ldi	r24, 0x00	; 0
   12ab4:	90 e0       	ldi	r25, 0x00	; 0
   12ab6:	0e 94 8f 24 	call	0x491e	; 0x491e <_Z12getstringargl>
   12aba:	6b 01       	movw	r12, r22
   12abc:	7c 01       	movw	r14, r24
   12abe:	61 e0       	ldi	r22, 0x01	; 1
   12ac0:	70 e0       	ldi	r23, 0x00	; 0
   12ac2:	80 e0       	ldi	r24, 0x00	; 0
   12ac4:	90 e0       	ldi	r25, 0x00	; 0
   12ac6:	0e 94 8f 24 	call	0x491e	; 0x491e <_Z12getstringargl>
   12aca:	a6 01       	movw	r20, r12
   12acc:	87 ef       	ldi	r24, 0xF7	; 247
   12ace:	95 e3       	ldi	r25, 0x35	; 53
   12ad0:	0e 94 5b 65 	call	0xcab6	; 0xcab6 <_ZN12WiFiBackpack10wifiConfigEPKcS1_>
   12ad4:	81 11       	cpse	r24, r1
   12ad6:	0e c0       	rjmp	.+28     	; 0x12af4 <_ZL10wifiConfigv+0x5a>
   12ad8:	65 e9       	ldi	r22, 0x95	; 149
   12ada:	74 e1       	ldi	r23, 0x14	; 20
   12adc:	ce 01       	movw	r24, r28
   12ade:	01 96       	adiw	r24, 0x01	; 1
   12ae0:	0e 94 4a 19 	call	0x3294	; 0x3294 <_ZN6StringC1EPK19__FlashStringHelper>
   12ae4:	ce 01       	movw	r24, r28
   12ae6:	01 96       	adiw	r24, 0x01	; 1
   12ae8:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <_Z5speolRK6String>
   12aec:	ce 01       	movw	r24, r28
   12aee:	01 96       	adiw	r24, 0x01	; 1
   12af0:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   12af4:	61 e0       	ldi	r22, 0x01	; 1
   12af6:	70 e0       	ldi	r23, 0x00	; 0
   12af8:	80 e0       	ldi	r24, 0x00	; 0
   12afa:	90 e0       	ldi	r25, 0x00	; 0
   12afc:	26 96       	adiw	r28, 0x06	; 6
   12afe:	0f b6       	in	r0, 0x3f	; 63
   12b00:	f8 94       	cli
   12b02:	de bf       	out	0x3e, r29	; 62
   12b04:	0f be       	out	0x3f, r0	; 63
   12b06:	cd bf       	out	0x3d, r28	; 61
   12b08:	df 91       	pop	r29
   12b0a:	cf 91       	pop	r28
   12b0c:	ff 90       	pop	r15
   12b0e:	ef 90       	pop	r14
   12b10:	df 90       	pop	r13
   12b12:	cf 90       	pop	r12
   12b14:	08 95       	ret

00012b16 <_ZL8wifiListv>:
   12b16:	cf 93       	push	r28
   12b18:	df 93       	push	r29
   12b1a:	00 d0       	rcall	.+0      	; 0x12b1c <_ZL8wifiListv+0x6>
   12b1c:	00 d0       	rcall	.+0      	; 0x12b1e <_ZL8wifiListv+0x8>
   12b1e:	cd b7       	in	r28, 0x3d	; 61
   12b20:	de b7       	in	r29, 0x3e	; 62
   12b22:	64 e0       	ldi	r22, 0x04	; 4
   12b24:	74 e2       	ldi	r23, 0x24	; 36
   12b26:	87 ef       	ldi	r24, 0xF7	; 247
   12b28:	95 e3       	ldi	r25, 0x35	; 53
   12b2a:	0e 94 e6 67 	call	0xcfcc	; 0xcfcc <_ZN12WiFiBackpack8printAPsER5Print>
   12b2e:	81 11       	cpse	r24, r1
   12b30:	12 c0       	rjmp	.+36     	; 0x12b56 <_ZL8wifiListv+0x40>
   12b32:	62 e8       	ldi	r22, 0x82	; 130
   12b34:	74 e1       	ldi	r23, 0x14	; 20
   12b36:	ce 01       	movw	r24, r28
   12b38:	01 96       	adiw	r24, 0x01	; 1
   12b3a:	0e 94 4a 19 	call	0x3294	; 0x3294 <_ZN6StringC1EPK19__FlashStringHelper>
   12b3e:	ce 01       	movw	r24, r28
   12b40:	01 96       	adiw	r24, 0x01	; 1
   12b42:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <_Z5speolRK6String>
   12b46:	ce 01       	movw	r24, r28
   12b48:	01 96       	adiw	r24, 0x01	; 1
   12b4a:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   12b4e:	60 e0       	ldi	r22, 0x00	; 0
   12b50:	70 e0       	ldi	r23, 0x00	; 0
   12b52:	cb 01       	movw	r24, r22
   12b54:	04 c0       	rjmp	.+8      	; 0x12b5e <_ZL8wifiListv+0x48>
   12b56:	61 e0       	ldi	r22, 0x01	; 1
   12b58:	70 e0       	ldi	r23, 0x00	; 0
   12b5a:	80 e0       	ldi	r24, 0x00	; 0
   12b5c:	90 e0       	ldi	r25, 0x00	; 0
   12b5e:	26 96       	adiw	r28, 0x06	; 6
   12b60:	0f b6       	in	r0, 0x3f	; 63
   12b62:	f8 94       	cli
   12b64:	de bf       	out	0x3e, r29	; 62
   12b66:	0f be       	out	0x3f, r0	; 63
   12b68:	cd bf       	out	0x3d, r28	; 61
   12b6a:	df 91       	pop	r29
   12b6c:	cf 91       	pop	r28
   12b6e:	08 95       	ret

00012b70 <_ZL10wifiStatusv>:
   12b70:	60 e0       	ldi	r22, 0x00	; 0
   12b72:	70 e0       	ldi	r23, 0x00	; 0
   12b74:	cb 01       	movw	r24, r22
   12b76:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   12b7a:	16 16       	cp	r1, r22
   12b7c:	17 06       	cpc	r1, r23
   12b7e:	18 06       	cpc	r1, r24
   12b80:	19 06       	cpc	r1, r25
   12b82:	5c f4       	brge	.+22     	; 0x12b9a <_ZL10wifiStatusv+0x2a>
   12b84:	61 e0       	ldi	r22, 0x01	; 1
   12b86:	70 e0       	ldi	r23, 0x00	; 0
   12b88:	80 e0       	ldi	r24, 0x00	; 0
   12b8a:	90 e0       	ldi	r25, 0x00	; 0
   12b8c:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   12b90:	61 30       	cpi	r22, 0x01	; 1
   12b92:	71 05       	cpc	r23, r1
   12b94:	81 05       	cpc	r24, r1
   12b96:	91 05       	cpc	r25, r1
   12b98:	69 f0       	breq	.+26     	; 0x12bb4 <_ZL10wifiStatusv+0x44>
   12b9a:	64 e0       	ldi	r22, 0x04	; 4
   12b9c:	74 e2       	ldi	r23, 0x24	; 36
   12b9e:	87 ef       	ldi	r24, 0xF7	; 247
   12ba0:	95 e3       	ldi	r25, 0x35	; 53
   12ba2:	0e 94 17 68 	call	0xd02e	; 0xd02e <_ZN12WiFiBackpack21printFirmwareVersionsER5Print>
   12ba6:	64 e0       	ldi	r22, 0x04	; 4
   12ba8:	74 e2       	ldi	r23, 0x24	; 36
   12baa:	87 ef       	ldi	r24, 0xF7	; 247
   12bac:	95 e3       	ldi	r25, 0x35	; 53
   12bae:	0e 94 05 68 	call	0xd00a	; 0xd00a <_ZN12WiFiBackpack25printCurrentNetworkStatusER5Print>
   12bb2:	06 c0       	rjmp	.+12     	; 0x12bc0 <_ZL10wifiStatusv+0x50>
   12bb4:	64 e0       	ldi	r22, 0x04	; 4
   12bb6:	74 e2       	ldi	r23, 0x24	; 36
   12bb8:	87 ef       	ldi	r24, 0xF7	; 247
   12bba:	95 e3       	ldi	r25, 0x35	; 53
   12bbc:	0e 94 02 68 	call	0xd004	; 0xd004 <_ZN12WiFiBackpack13printProfilesER5Print>
   12bc0:	61 e0       	ldi	r22, 0x01	; 1
   12bc2:	70 e0       	ldi	r23, 0x00	; 0
   12bc4:	80 e0       	ldi	r24, 0x00	; 0
   12bc6:	90 e0       	ldi	r25, 0x00	; 0
   12bc8:	08 95       	ret

00012bca <_ZL6keyMapv>:
   12bca:	61 e0       	ldi	r22, 0x01	; 1
   12bcc:	70 e0       	ldi	r23, 0x00	; 0
   12bce:	80 e0       	ldi	r24, 0x00	; 0
   12bd0:	90 e0       	ldi	r25, 0x00	; 0
   12bd2:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <_Z11isstringargl>
   12bd6:	67 2b       	or	r22, r23
   12bd8:	68 2b       	or	r22, r24
   12bda:	69 2b       	or	r22, r25
   12bdc:	99 f0       	breq	.+38     	; 0x12c04 <_ZL6keyMapv+0x3a>
   12bde:	61 e0       	ldi	r22, 0x01	; 1
   12be0:	70 e0       	ldi	r23, 0x00	; 0
   12be2:	80 e0       	ldi	r24, 0x00	; 0
   12be4:	90 e0       	ldi	r25, 0x00	; 0
   12be6:	0e 94 8f 24 	call	0x491e	; 0x491e <_Z12getstringargl>
   12bea:	dc 01       	movw	r26, r24
   12bec:	cb 01       	movw	r24, r22
   12bee:	40 e0       	ldi	r20, 0x00	; 0
   12bf0:	50 e0       	ldi	r21, 0x00	; 0
   12bf2:	ba 01       	movw	r22, r20
   12bf4:	0e 94 2c 68 	call	0xd058	; 0xd058 <keyMap>
   12bf8:	bc 01       	movw	r22, r24
   12bfa:	88 27       	eor	r24, r24
   12bfc:	77 fd       	sbrc	r23, 7
   12bfe:	80 95       	com	r24
   12c00:	98 2f       	mov	r25, r24
   12c02:	08 95       	ret
   12c04:	61 e0       	ldi	r22, 0x01	; 1
   12c06:	70 e0       	ldi	r23, 0x00	; 0
   12c08:	80 e0       	ldi	r24, 0x00	; 0
   12c0a:	90 e0       	ldi	r25, 0x00	; 0
   12c0c:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   12c10:	9f 93       	push	r25
   12c12:	8f 93       	push	r24
   12c14:	7f 93       	push	r23
   12c16:	6f 93       	push	r22
   12c18:	86 e2       	ldi	r24, 0x26	; 38
   12c1a:	9d e1       	ldi	r25, 0x1D	; 29
   12c1c:	9f 93       	push	r25
   12c1e:	8f 93       	push	r24
   12c20:	1f 92       	push	r1
   12c22:	88 e0       	ldi	r24, 0x08	; 8
   12c24:	8f 93       	push	r24
   12c26:	8a eb       	ldi	r24, 0xBA	; 186
   12c28:	99 e3       	ldi	r25, 0x39	; 57
   12c2a:	9f 93       	push	r25
   12c2c:	8f 93       	push	r24
   12c2e:	0e 94 1d b6 	call	0x16c3a	; 0x16c3a <snprintf>
   12c32:	40 e0       	ldi	r20, 0x00	; 0
   12c34:	50 e0       	ldi	r21, 0x00	; 0
   12c36:	ba 01       	movw	r22, r20
   12c38:	8a eb       	ldi	r24, 0xBA	; 186
   12c3a:	99 e3       	ldi	r25, 0x39	; 57
   12c3c:	0e 94 2c 68 	call	0xd058	; 0xd058 <keyMap>
   12c40:	bc 01       	movw	r22, r24
   12c42:	88 27       	eor	r24, r24
   12c44:	77 fd       	sbrc	r23, 7
   12c46:	80 95       	com	r24
   12c48:	98 2f       	mov	r25, r24
   12c4a:	2d b7       	in	r18, 0x3d	; 61
   12c4c:	3e b7       	in	r19, 0x3e	; 62
   12c4e:	26 5f       	subi	r18, 0xF6	; 246
   12c50:	3f 4f       	sbci	r19, 0xFF	; 255
   12c52:	0f b6       	in	r0, 0x3f	; 63
   12c54:	f8 94       	cli
   12c56:	3e bf       	out	0x3e, r19	; 62
   12c58:	0f be       	out	0x3f, r0	; 63
   12c5a:	2d bf       	out	0x3d, r18	; 61
   12c5c:	08 95       	ret

00012c5e <_ZL7keySavev>:
   12c5e:	0f 93       	push	r16
   12c60:	1f 93       	push	r17
   12c62:	cf 93       	push	r28
   12c64:	df 93       	push	r29
   12c66:	cd b7       	in	r28, 0x3d	; 61
   12c68:	de b7       	in	r29, 0x3e	; 62
   12c6a:	aa 97       	sbiw	r28, 0x2a	; 42
   12c6c:	0f b6       	in	r0, 0x3f	; 63
   12c6e:	f8 94       	cli
   12c70:	de bf       	out	0x3e, r29	; 62
   12c72:	0f be       	out	0x3f, r0	; 63
   12c74:	cd bf       	out	0x3d, r28	; 61
   12c76:	60 e0       	ldi	r22, 0x00	; 0
   12c78:	70 e0       	ldi	r23, 0x00	; 0
   12c7a:	cb 01       	movw	r24, r22
   12c7c:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   12c80:	62 30       	cpi	r22, 0x02	; 2
   12c82:	71 05       	cpc	r23, r1
   12c84:	81 05       	cpc	r24, r1
   12c86:	91 05       	cpc	r25, r1
   12c88:	51 f4       	brne	.+20     	; 0x12c9e <_ZL7keySavev+0x40>
   12c8a:	61 e0       	ldi	r22, 0x01	; 1
   12c8c:	70 e0       	ldi	r23, 0x00	; 0
   12c8e:	80 e0       	ldi	r24, 0x00	; 0
   12c90:	90 e0       	ldi	r25, 0x00	; 0
   12c92:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <_Z11isstringargl>
   12c96:	67 2b       	or	r22, r23
   12c98:	68 2b       	or	r22, r24
   12c9a:	69 2b       	or	r22, r25
   12c9c:	21 f4       	brne	.+8      	; 0x12ca6 <_ZL7keySavev+0x48>
   12c9e:	60 e0       	ldi	r22, 0x00	; 0
   12ca0:	70 e0       	ldi	r23, 0x00	; 0
   12ca2:	cb 01       	movw	r24, r22
   12ca4:	31 c0       	rjmp	.+98     	; 0x12d08 <_ZL7keySavev+0xaa>
   12ca6:	61 e0       	ldi	r22, 0x01	; 1
   12ca8:	70 e0       	ldi	r23, 0x00	; 0
   12caa:	80 e0       	ldi	r24, 0x00	; 0
   12cac:	90 e0       	ldi	r25, 0x00	; 0
   12cae:	0e 94 8f 24 	call	0x491e	; 0x491e <_Z12getstringargl>
   12cb2:	16 2f       	mov	r17, r22
   12cb4:	07 2f       	mov	r16, r23
   12cb6:	62 e0       	ldi	r22, 0x02	; 2
   12cb8:	70 e0       	ldi	r23, 0x00	; 0
   12cba:	80 e0       	ldi	r24, 0x00	; 0
   12cbc:	90 e0       	ldi	r25, 0x00	; 0
   12cbe:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   12cc2:	cb 01       	movw	r24, r22
   12cc4:	0e 94 ab 68 	call	0xd156	; 0xd156 <keyGet>
   12cc8:	9f 93       	push	r25
   12cca:	8f 93       	push	r24
   12ccc:	0f 93       	push	r16
   12cce:	1f 93       	push	r17
   12cd0:	0f 93       	push	r16
   12cd2:	1f 93       	push	r17
   12cd4:	8a e2       	ldi	r24, 0x2A	; 42
   12cd6:	9d e1       	ldi	r25, 0x1D	; 29
   12cd8:	9f 93       	push	r25
   12cda:	8f 93       	push	r24
   12cdc:	1f 92       	push	r1
   12cde:	8a e2       	ldi	r24, 0x2A	; 42
   12ce0:	8f 93       	push	r24
   12ce2:	8e 01       	movw	r16, r28
   12ce4:	0f 5f       	subi	r16, 0xFF	; 255
   12ce6:	1f 4f       	sbci	r17, 0xFF	; 255
   12ce8:	1f 93       	push	r17
   12cea:	0f 93       	push	r16
   12cec:	0e 94 1d b6 	call	0x16c3a	; 0x16c3a <snprintf>
   12cf0:	c8 01       	movw	r24, r16
   12cf2:	0e 94 59 35 	call	0x6ab2	; 0x6ab2 <_Z9doCommandPc>
   12cf6:	0f b6       	in	r0, 0x3f	; 63
   12cf8:	f8 94       	cli
   12cfa:	de bf       	out	0x3e, r29	; 62
   12cfc:	0f be       	out	0x3f, r0	; 63
   12cfe:	cd bf       	out	0x3d, r28	; 61
   12d00:	61 e0       	ldi	r22, 0x01	; 1
   12d02:	70 e0       	ldi	r23, 0x00	; 0
   12d04:	80 e0       	ldi	r24, 0x00	; 0
   12d06:	90 e0       	ldi	r25, 0x00	; 0
   12d08:	aa 96       	adiw	r28, 0x2a	; 42
   12d0a:	0f b6       	in	r0, 0x3f	; 63
   12d0c:	f8 94       	cli
   12d0e:	de bf       	out	0x3e, r29	; 62
   12d10:	0f be       	out	0x3f, r0	; 63
   12d12:	cd bf       	out	0x3d, r28	; 61
   12d14:	df 91       	pop	r29
   12d16:	cf 91       	pop	r28
   12d18:	1f 91       	pop	r17
   12d1a:	0f 91       	pop	r16
   12d1c:	08 95       	ret

00012d1e <_ZL10scoutDelayv>:
   12d1e:	cf 93       	push	r28
   12d20:	df 93       	push	r29
   12d22:	60 e0       	ldi	r22, 0x00	; 0
   12d24:	70 e0       	ldi	r23, 0x00	; 0
   12d26:	cb 01       	movw	r24, r22
   12d28:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   12d2c:	62 30       	cpi	r22, 0x02	; 2
   12d2e:	71 05       	cpc	r23, r1
   12d30:	81 05       	cpc	r24, r1
   12d32:	91 05       	cpc	r25, r1
   12d34:	41 f0       	breq	.+16     	; 0x12d46 <_ZL10scoutDelayv+0x28>
   12d36:	8b e4       	ldi	r24, 0x4B	; 75
   12d38:	9d e1       	ldi	r25, 0x1D	; 29
   12d3a:	0e 94 79 1f 	call	0x3ef2	; 0x3ef2 <_Z5speolPKc>
   12d3e:	60 e0       	ldi	r22, 0x00	; 0
   12d40:	70 e0       	ldi	r23, 0x00	; 0
   12d42:	cb 01       	movw	r24, r22
   12d44:	51 c0       	rjmp	.+162    	; 0x12de8 <_ZL10scoutDelayv+0xca>
   12d46:	62 e0       	ldi	r22, 0x02	; 2
   12d48:	70 e0       	ldi	r23, 0x00	; 0
   12d4a:	80 e0       	ldi	r24, 0x00	; 0
   12d4c:	90 e0       	ldi	r25, 0x00	; 0
   12d4e:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <_Z11isstringargl>
   12d52:	67 2b       	or	r22, r23
   12d54:	68 2b       	or	r22, r24
   12d56:	69 2b       	or	r22, r25
   12d58:	41 f0       	breq	.+16     	; 0x12d6a <_ZL10scoutDelayv+0x4c>
   12d5a:	62 e0       	ldi	r22, 0x02	; 2
   12d5c:	70 e0       	ldi	r23, 0x00	; 0
   12d5e:	80 e0       	ldi	r24, 0x00	; 0
   12d60:	90 e0       	ldi	r25, 0x00	; 0
   12d62:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   12d66:	eb 01       	movw	r28, r22
   12d68:	0a c0       	rjmp	.+20     	; 0x12d7e <_ZL10scoutDelayv+0x60>
   12d6a:	62 e0       	ldi	r22, 0x02	; 2
   12d6c:	70 e0       	ldi	r23, 0x00	; 0
   12d6e:	80 e0       	ldi	r24, 0x00	; 0
   12d70:	90 e0       	ldi	r25, 0x00	; 0
   12d72:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   12d76:	cb 01       	movw	r24, r22
   12d78:	0e 94 ab 68 	call	0xd156	; 0xd156 <keyGet>
   12d7c:	ec 01       	movw	r28, r24
   12d7e:	80 91 c2 39 	lds	r24, 0x39C2
   12d82:	90 91 c3 39 	lds	r25, 0x39C3
   12d86:	89 2b       	or	r24, r25
   12d88:	51 f0       	breq	.+20     	; 0x12d9e <_ZL10scoutDelayv+0x80>
   12d8a:	84 ec       	ldi	r24, 0xC4	; 196
   12d8c:	99 e3       	ldi	r25, 0x39	; 57
   12d8e:	0e 94 d5 59 	call	0xb3aa	; 0xb3aa <SYS_TimerStop>
   12d92:	80 91 c2 39 	lds	r24, 0x39C2
   12d96:	90 91 c3 39 	lds	r25, 0x39C3
   12d9a:	0e 94 c6 b0 	call	0x1618c	; 0x1618c <free>
   12d9e:	10 92 ce 39 	sts	0x39CE, r1
   12da2:	86 ea       	ldi	r24, 0xA6	; 166
   12da4:	9b e8       	ldi	r25, 0x8B	; 139
   12da6:	90 93 d0 39 	sts	0x39D0, r25
   12daa:	80 93 cf 39 	sts	0x39CF, r24
   12dae:	61 e0       	ldi	r22, 0x01	; 1
   12db0:	70 e0       	ldi	r23, 0x00	; 0
   12db2:	80 e0       	ldi	r24, 0x00	; 0
   12db4:	90 e0       	ldi	r25, 0x00	; 0
   12db6:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   12dba:	60 93 ca 39 	sts	0x39CA, r22
   12dbe:	70 93 cb 39 	sts	0x39CB, r23
   12dc2:	80 93 cc 39 	sts	0x39CC, r24
   12dc6:	90 93 cd 39 	sts	0x39CD, r25
   12dca:	ce 01       	movw	r24, r28
   12dcc:	0e 94 2a b5 	call	0x16a54	; 0x16a54 <strdup>
   12dd0:	90 93 c3 39 	sts	0x39C3, r25
   12dd4:	80 93 c2 39 	sts	0x39C2, r24
   12dd8:	84 ec       	ldi	r24, 0xC4	; 196
   12dda:	99 e3       	ldi	r25, 0x39	; 57
   12ddc:	0e 94 2f 5a 	call	0xb45e	; 0xb45e <SYS_TimerStart>
   12de0:	61 e0       	ldi	r22, 0x01	; 1
   12de2:	70 e0       	ldi	r23, 0x00	; 0
   12de4:	80 e0       	ldi	r24, 0x00	; 0
   12de6:	90 e0       	ldi	r25, 0x00	; 0
   12de8:	df 91       	pop	r29
   12dea:	cf 91       	pop	r28
   12dec:	08 95       	ret

00012dee <_ZL8ledTorchv>:
   12dee:	cf 92       	push	r12
   12df0:	df 92       	push	r13
   12df2:	ef 92       	push	r14
   12df4:	ff 92       	push	r15
   12df6:	60 e0       	ldi	r22, 0x00	; 0
   12df8:	70 e0       	ldi	r23, 0x00	; 0
   12dfa:	cb 01       	movw	r24, r22
   12dfc:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   12e00:	62 30       	cpi	r22, 0x02	; 2
   12e02:	71 05       	cpc	r23, r1
   12e04:	81 05       	cpc	r24, r1
   12e06:	91 05       	cpc	r25, r1
   12e08:	c9 f4       	brne	.+50     	; 0x12e3c <_ZL8ledTorchv+0x4e>
   12e0a:	62 e0       	ldi	r22, 0x02	; 2
   12e0c:	70 e0       	ldi	r23, 0x00	; 0
   12e0e:	80 e0       	ldi	r24, 0x00	; 0
   12e10:	90 e0       	ldi	r25, 0x00	; 0
   12e12:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   12e16:	6b 01       	movw	r12, r22
   12e18:	7c 01       	movw	r14, r24
   12e1a:	61 e0       	ldi	r22, 0x01	; 1
   12e1c:	70 e0       	ldi	r23, 0x00	; 0
   12e1e:	80 e0       	ldi	r24, 0x00	; 0
   12e20:	90 e0       	ldi	r25, 0x00	; 0
   12e22:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   12e26:	41 e0       	ldi	r20, 0x01	; 1
   12e28:	cd 28       	or	r12, r13
   12e2a:	ce 28       	or	r12, r14
   12e2c:	cf 28       	or	r12, r15
   12e2e:	09 f4       	brne	.+2      	; 0x12e32 <_ZL8ledTorchv+0x44>
   12e30:	40 e0       	ldi	r20, 0x00	; 0
   12e32:	88 e7       	ldi	r24, 0x78	; 120
   12e34:	95 e3       	ldi	r25, 0x35	; 53
   12e36:	0e 94 1d 6c 	call	0xd83a	; 0xd83a <_ZN9HalRgbLed10blinkTorchEjb>
   12e3a:	15 c0       	rjmp	.+42     	; 0x12e66 <_ZL8ledTorchv+0x78>
   12e3c:	60 e0       	ldi	r22, 0x00	; 0
   12e3e:	70 e0       	ldi	r23, 0x00	; 0
   12e40:	cb 01       	movw	r24, r22
   12e42:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   12e46:	61 30       	cpi	r22, 0x01	; 1
   12e48:	71 05       	cpc	r23, r1
   12e4a:	81 05       	cpc	r24, r1
   12e4c:	91 05       	cpc	r25, r1
   12e4e:	39 f4       	brne	.+14     	; 0x12e5e <_ZL8ledTorchv+0x70>
   12e50:	61 e0       	ldi	r22, 0x01	; 1
   12e52:	70 e0       	ldi	r23, 0x00	; 0
   12e54:	80 e0       	ldi	r24, 0x00	; 0
   12e56:	90 e0       	ldi	r25, 0x00	; 0
   12e58:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   12e5c:	e9 cf       	rjmp	.-46     	; 0x12e30 <_ZL8ledTorchv+0x42>
   12e5e:	88 e7       	ldi	r24, 0x78	; 120
   12e60:	95 e3       	ldi	r25, 0x35	; 53
   12e62:	0e 94 5c 6c 	call	0xd8b8	; 0xd8b8 <_ZN9HalRgbLed8setTorchEv>
   12e66:	61 e0       	ldi	r22, 0x01	; 1
   12e68:	70 e0       	ldi	r23, 0x00	; 0
   12e6a:	80 e0       	ldi	r24, 0x00	; 0
   12e6c:	90 e0       	ldi	r25, 0x00	; 0
   12e6e:	ff 90       	pop	r15
   12e70:	ef 90       	pop	r14
   12e72:	df 90       	pop	r13
   12e74:	cf 90       	pop	r12
   12e76:	08 95       	ret

00012e78 <_ZL8ledWhitev>:
   12e78:	cf 92       	push	r12
   12e7a:	df 92       	push	r13
   12e7c:	ef 92       	push	r14
   12e7e:	ff 92       	push	r15
   12e80:	60 e0       	ldi	r22, 0x00	; 0
   12e82:	70 e0       	ldi	r23, 0x00	; 0
   12e84:	cb 01       	movw	r24, r22
   12e86:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   12e8a:	62 30       	cpi	r22, 0x02	; 2
   12e8c:	71 05       	cpc	r23, r1
   12e8e:	81 05       	cpc	r24, r1
   12e90:	91 05       	cpc	r25, r1
   12e92:	c9 f4       	brne	.+50     	; 0x12ec6 <_ZL8ledWhitev+0x4e>
   12e94:	62 e0       	ldi	r22, 0x02	; 2
   12e96:	70 e0       	ldi	r23, 0x00	; 0
   12e98:	80 e0       	ldi	r24, 0x00	; 0
   12e9a:	90 e0       	ldi	r25, 0x00	; 0
   12e9c:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   12ea0:	6b 01       	movw	r12, r22
   12ea2:	7c 01       	movw	r14, r24
   12ea4:	61 e0       	ldi	r22, 0x01	; 1
   12ea6:	70 e0       	ldi	r23, 0x00	; 0
   12ea8:	80 e0       	ldi	r24, 0x00	; 0
   12eaa:	90 e0       	ldi	r25, 0x00	; 0
   12eac:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   12eb0:	41 e0       	ldi	r20, 0x01	; 1
   12eb2:	cd 28       	or	r12, r13
   12eb4:	ce 28       	or	r12, r14
   12eb6:	cf 28       	or	r12, r15
   12eb8:	09 f4       	brne	.+2      	; 0x12ebc <_ZL8ledWhitev+0x44>
   12eba:	40 e0       	ldi	r20, 0x00	; 0
   12ebc:	88 e7       	ldi	r24, 0x78	; 120
   12ebe:	95 e3       	ldi	r25, 0x35	; 53
   12ec0:	0e 94 0d 6c 	call	0xd81a	; 0xd81a <_ZN9HalRgbLed10blinkWhiteEjb>
   12ec4:	15 c0       	rjmp	.+42     	; 0x12ef0 <_ZL8ledWhitev+0x78>
   12ec6:	60 e0       	ldi	r22, 0x00	; 0
   12ec8:	70 e0       	ldi	r23, 0x00	; 0
   12eca:	cb 01       	movw	r24, r22
   12ecc:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   12ed0:	61 30       	cpi	r22, 0x01	; 1
   12ed2:	71 05       	cpc	r23, r1
   12ed4:	81 05       	cpc	r24, r1
   12ed6:	91 05       	cpc	r25, r1
   12ed8:	39 f4       	brne	.+14     	; 0x12ee8 <_ZL8ledWhitev+0x70>
   12eda:	61 e0       	ldi	r22, 0x01	; 1
   12edc:	70 e0       	ldi	r23, 0x00	; 0
   12ede:	80 e0       	ldi	r24, 0x00	; 0
   12ee0:	90 e0       	ldi	r25, 0x00	; 0
   12ee2:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   12ee6:	e9 cf       	rjmp	.-46     	; 0x12eba <_ZL8ledWhitev+0x42>
   12ee8:	88 e7       	ldi	r24, 0x78	; 120
   12eea:	95 e3       	ldi	r25, 0x35	; 53
   12eec:	0e 94 58 6b 	call	0xd6b0	; 0xd6b0 <_ZN9HalRgbLed5whiteEv>
   12ef0:	61 e0       	ldi	r22, 0x01	; 1
   12ef2:	70 e0       	ldi	r23, 0x00	; 0
   12ef4:	80 e0       	ldi	r24, 0x00	; 0
   12ef6:	90 e0       	ldi	r25, 0x00	; 0
   12ef8:	ff 90       	pop	r15
   12efa:	ef 90       	pop	r14
   12efc:	df 90       	pop	r13
   12efe:	cf 90       	pop	r12
   12f00:	08 95       	ret

00012f02 <_ZL9ledOrangev>:
   12f02:	cf 92       	push	r12
   12f04:	df 92       	push	r13
   12f06:	ef 92       	push	r14
   12f08:	ff 92       	push	r15
   12f0a:	60 e0       	ldi	r22, 0x00	; 0
   12f0c:	70 e0       	ldi	r23, 0x00	; 0
   12f0e:	cb 01       	movw	r24, r22
   12f10:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   12f14:	62 30       	cpi	r22, 0x02	; 2
   12f16:	71 05       	cpc	r23, r1
   12f18:	81 05       	cpc	r24, r1
   12f1a:	91 05       	cpc	r25, r1
   12f1c:	c9 f4       	brne	.+50     	; 0x12f50 <_ZL9ledOrangev+0x4e>
   12f1e:	62 e0       	ldi	r22, 0x02	; 2
   12f20:	70 e0       	ldi	r23, 0x00	; 0
   12f22:	80 e0       	ldi	r24, 0x00	; 0
   12f24:	90 e0       	ldi	r25, 0x00	; 0
   12f26:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   12f2a:	6b 01       	movw	r12, r22
   12f2c:	7c 01       	movw	r14, r24
   12f2e:	61 e0       	ldi	r22, 0x01	; 1
   12f30:	70 e0       	ldi	r23, 0x00	; 0
   12f32:	80 e0       	ldi	r24, 0x00	; 0
   12f34:	90 e0       	ldi	r25, 0x00	; 0
   12f36:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   12f3a:	41 e0       	ldi	r20, 0x01	; 1
   12f3c:	cd 28       	or	r12, r13
   12f3e:	ce 28       	or	r12, r14
   12f40:	cf 28       	or	r12, r15
   12f42:	09 f4       	brne	.+2      	; 0x12f46 <_ZL9ledOrangev+0x44>
   12f44:	40 e0       	ldi	r20, 0x00	; 0
   12f46:	88 e7       	ldi	r24, 0x78	; 120
   12f48:	95 e3       	ldi	r25, 0x35	; 53
   12f4a:	0e 94 fd 6b 	call	0xd7fa	; 0xd7fa <_ZN9HalRgbLed11blinkOrangeEjb>
   12f4e:	15 c0       	rjmp	.+42     	; 0x12f7a <_ZL9ledOrangev+0x78>
   12f50:	60 e0       	ldi	r22, 0x00	; 0
   12f52:	70 e0       	ldi	r23, 0x00	; 0
   12f54:	cb 01       	movw	r24, r22
   12f56:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   12f5a:	61 30       	cpi	r22, 0x01	; 1
   12f5c:	71 05       	cpc	r23, r1
   12f5e:	81 05       	cpc	r24, r1
   12f60:	91 05       	cpc	r25, r1
   12f62:	39 f4       	brne	.+14     	; 0x12f72 <_ZL9ledOrangev+0x70>
   12f64:	61 e0       	ldi	r22, 0x01	; 1
   12f66:	70 e0       	ldi	r23, 0x00	; 0
   12f68:	80 e0       	ldi	r24, 0x00	; 0
   12f6a:	90 e0       	ldi	r25, 0x00	; 0
   12f6c:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   12f70:	e9 cf       	rjmp	.-46     	; 0x12f44 <_ZL9ledOrangev+0x42>
   12f72:	88 e7       	ldi	r24, 0x78	; 120
   12f74:	95 e3       	ldi	r25, 0x35	; 53
   12f76:	0e 94 51 6b 	call	0xd6a2	; 0xd6a2 <_ZN9HalRgbLed6orangeEv>
   12f7a:	61 e0       	ldi	r22, 0x01	; 1
   12f7c:	70 e0       	ldi	r23, 0x00	; 0
   12f7e:	80 e0       	ldi	r24, 0x00	; 0
   12f80:	90 e0       	ldi	r25, 0x00	; 0
   12f82:	ff 90       	pop	r15
   12f84:	ef 90       	pop	r14
   12f86:	df 90       	pop	r13
   12f88:	cf 90       	pop	r12
   12f8a:	08 95       	ret

00012f8c <_ZL9ledYellowv>:
   12f8c:	cf 92       	push	r12
   12f8e:	df 92       	push	r13
   12f90:	ef 92       	push	r14
   12f92:	ff 92       	push	r15
   12f94:	60 e0       	ldi	r22, 0x00	; 0
   12f96:	70 e0       	ldi	r23, 0x00	; 0
   12f98:	cb 01       	movw	r24, r22
   12f9a:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   12f9e:	62 30       	cpi	r22, 0x02	; 2
   12fa0:	71 05       	cpc	r23, r1
   12fa2:	81 05       	cpc	r24, r1
   12fa4:	91 05       	cpc	r25, r1
   12fa6:	c9 f4       	brne	.+50     	; 0x12fda <_ZL9ledYellowv+0x4e>
   12fa8:	62 e0       	ldi	r22, 0x02	; 2
   12faa:	70 e0       	ldi	r23, 0x00	; 0
   12fac:	80 e0       	ldi	r24, 0x00	; 0
   12fae:	90 e0       	ldi	r25, 0x00	; 0
   12fb0:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   12fb4:	6b 01       	movw	r12, r22
   12fb6:	7c 01       	movw	r14, r24
   12fb8:	61 e0       	ldi	r22, 0x01	; 1
   12fba:	70 e0       	ldi	r23, 0x00	; 0
   12fbc:	80 e0       	ldi	r24, 0x00	; 0
   12fbe:	90 e0       	ldi	r25, 0x00	; 0
   12fc0:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   12fc4:	41 e0       	ldi	r20, 0x01	; 1
   12fc6:	cd 28       	or	r12, r13
   12fc8:	ce 28       	or	r12, r14
   12fca:	cf 28       	or	r12, r15
   12fcc:	09 f4       	brne	.+2      	; 0x12fd0 <_ZL9ledYellowv+0x44>
   12fce:	40 e0       	ldi	r20, 0x00	; 0
   12fd0:	88 e7       	ldi	r24, 0x78	; 120
   12fd2:	95 e3       	ldi	r25, 0x35	; 53
   12fd4:	0e 94 ed 6b 	call	0xd7da	; 0xd7da <_ZN9HalRgbLed11blinkYellowEjb>
   12fd8:	15 c0       	rjmp	.+42     	; 0x13004 <_ZL9ledYellowv+0x78>
   12fda:	60 e0       	ldi	r22, 0x00	; 0
   12fdc:	70 e0       	ldi	r23, 0x00	; 0
   12fde:	cb 01       	movw	r24, r22
   12fe0:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   12fe4:	61 30       	cpi	r22, 0x01	; 1
   12fe6:	71 05       	cpc	r23, r1
   12fe8:	81 05       	cpc	r24, r1
   12fea:	91 05       	cpc	r25, r1
   12fec:	39 f4       	brne	.+14     	; 0x12ffc <_ZL9ledYellowv+0x70>
   12fee:	61 e0       	ldi	r22, 0x01	; 1
   12ff0:	70 e0       	ldi	r23, 0x00	; 0
   12ff2:	80 e0       	ldi	r24, 0x00	; 0
   12ff4:	90 e0       	ldi	r25, 0x00	; 0
   12ff6:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   12ffa:	e9 cf       	rjmp	.-46     	; 0x12fce <_ZL9ledYellowv+0x42>
   12ffc:	88 e7       	ldi	r24, 0x78	; 120
   12ffe:	95 e3       	ldi	r25, 0x35	; 53
   13000:	0e 94 4a 6b 	call	0xd694	; 0xd694 <_ZN9HalRgbLed6yellowEv>
   13004:	61 e0       	ldi	r22, 0x01	; 1
   13006:	70 e0       	ldi	r23, 0x00	; 0
   13008:	80 e0       	ldi	r24, 0x00	; 0
   1300a:	90 e0       	ldi	r25, 0x00	; 0
   1300c:	ff 90       	pop	r15
   1300e:	ef 90       	pop	r14
   13010:	df 90       	pop	r13
   13012:	cf 90       	pop	r12
   13014:	08 95       	ret

00013016 <_ZL10ledMagentav>:
   13016:	cf 92       	push	r12
   13018:	df 92       	push	r13
   1301a:	ef 92       	push	r14
   1301c:	ff 92       	push	r15
   1301e:	60 e0       	ldi	r22, 0x00	; 0
   13020:	70 e0       	ldi	r23, 0x00	; 0
   13022:	cb 01       	movw	r24, r22
   13024:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   13028:	62 30       	cpi	r22, 0x02	; 2
   1302a:	71 05       	cpc	r23, r1
   1302c:	81 05       	cpc	r24, r1
   1302e:	91 05       	cpc	r25, r1
   13030:	c9 f4       	brne	.+50     	; 0x13064 <_ZL10ledMagentav+0x4e>
   13032:	62 e0       	ldi	r22, 0x02	; 2
   13034:	70 e0       	ldi	r23, 0x00	; 0
   13036:	80 e0       	ldi	r24, 0x00	; 0
   13038:	90 e0       	ldi	r25, 0x00	; 0
   1303a:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   1303e:	6b 01       	movw	r12, r22
   13040:	7c 01       	movw	r14, r24
   13042:	61 e0       	ldi	r22, 0x01	; 1
   13044:	70 e0       	ldi	r23, 0x00	; 0
   13046:	80 e0       	ldi	r24, 0x00	; 0
   13048:	90 e0       	ldi	r25, 0x00	; 0
   1304a:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   1304e:	41 e0       	ldi	r20, 0x01	; 1
   13050:	cd 28       	or	r12, r13
   13052:	ce 28       	or	r12, r14
   13054:	cf 28       	or	r12, r15
   13056:	09 f4       	brne	.+2      	; 0x1305a <_ZL10ledMagentav+0x44>
   13058:	40 e0       	ldi	r20, 0x00	; 0
   1305a:	88 e7       	ldi	r24, 0x78	; 120
   1305c:	95 e3       	ldi	r25, 0x35	; 53
   1305e:	0e 94 dd 6b 	call	0xd7ba	; 0xd7ba <_ZN9HalRgbLed12blinkMagentaEjb>
   13062:	15 c0       	rjmp	.+42     	; 0x1308e <_ZL10ledMagentav+0x78>
   13064:	60 e0       	ldi	r22, 0x00	; 0
   13066:	70 e0       	ldi	r23, 0x00	; 0
   13068:	cb 01       	movw	r24, r22
   1306a:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   1306e:	61 30       	cpi	r22, 0x01	; 1
   13070:	71 05       	cpc	r23, r1
   13072:	81 05       	cpc	r24, r1
   13074:	91 05       	cpc	r25, r1
   13076:	39 f4       	brne	.+14     	; 0x13086 <_ZL10ledMagentav+0x70>
   13078:	61 e0       	ldi	r22, 0x01	; 1
   1307a:	70 e0       	ldi	r23, 0x00	; 0
   1307c:	80 e0       	ldi	r24, 0x00	; 0
   1307e:	90 e0       	ldi	r25, 0x00	; 0
   13080:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   13084:	e9 cf       	rjmp	.-46     	; 0x13058 <_ZL10ledMagentav+0x42>
   13086:	88 e7       	ldi	r24, 0x78	; 120
   13088:	95 e3       	ldi	r25, 0x35	; 53
   1308a:	0e 94 43 6b 	call	0xd686	; 0xd686 <_ZN9HalRgbLed7magentaEv>
   1308e:	61 e0       	ldi	r22, 0x01	; 1
   13090:	70 e0       	ldi	r23, 0x00	; 0
   13092:	80 e0       	ldi	r24, 0x00	; 0
   13094:	90 e0       	ldi	r25, 0x00	; 0
   13096:	ff 90       	pop	r15
   13098:	ef 90       	pop	r14
   1309a:	df 90       	pop	r13
   1309c:	cf 90       	pop	r12
   1309e:	08 95       	ret

000130a0 <_ZL9ledPurplev>:
   130a0:	cf 92       	push	r12
   130a2:	df 92       	push	r13
   130a4:	ef 92       	push	r14
   130a6:	ff 92       	push	r15
   130a8:	60 e0       	ldi	r22, 0x00	; 0
   130aa:	70 e0       	ldi	r23, 0x00	; 0
   130ac:	cb 01       	movw	r24, r22
   130ae:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   130b2:	62 30       	cpi	r22, 0x02	; 2
   130b4:	71 05       	cpc	r23, r1
   130b6:	81 05       	cpc	r24, r1
   130b8:	91 05       	cpc	r25, r1
   130ba:	c9 f4       	brne	.+50     	; 0x130ee <_ZL9ledPurplev+0x4e>
   130bc:	62 e0       	ldi	r22, 0x02	; 2
   130be:	70 e0       	ldi	r23, 0x00	; 0
   130c0:	80 e0       	ldi	r24, 0x00	; 0
   130c2:	90 e0       	ldi	r25, 0x00	; 0
   130c4:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   130c8:	6b 01       	movw	r12, r22
   130ca:	7c 01       	movw	r14, r24
   130cc:	61 e0       	ldi	r22, 0x01	; 1
   130ce:	70 e0       	ldi	r23, 0x00	; 0
   130d0:	80 e0       	ldi	r24, 0x00	; 0
   130d2:	90 e0       	ldi	r25, 0x00	; 0
   130d4:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   130d8:	41 e0       	ldi	r20, 0x01	; 1
   130da:	cd 28       	or	r12, r13
   130dc:	ce 28       	or	r12, r14
   130de:	cf 28       	or	r12, r15
   130e0:	09 f4       	brne	.+2      	; 0x130e4 <_ZL9ledPurplev+0x44>
   130e2:	40 e0       	ldi	r20, 0x00	; 0
   130e4:	88 e7       	ldi	r24, 0x78	; 120
   130e6:	95 e3       	ldi	r25, 0x35	; 53
   130e8:	0e 94 cd 6b 	call	0xd79a	; 0xd79a <_ZN9HalRgbLed11blinkPurpleEjb>
   130ec:	15 c0       	rjmp	.+42     	; 0x13118 <_ZL9ledPurplev+0x78>
   130ee:	60 e0       	ldi	r22, 0x00	; 0
   130f0:	70 e0       	ldi	r23, 0x00	; 0
   130f2:	cb 01       	movw	r24, r22
   130f4:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   130f8:	61 30       	cpi	r22, 0x01	; 1
   130fa:	71 05       	cpc	r23, r1
   130fc:	81 05       	cpc	r24, r1
   130fe:	91 05       	cpc	r25, r1
   13100:	39 f4       	brne	.+14     	; 0x13110 <_ZL9ledPurplev+0x70>
   13102:	61 e0       	ldi	r22, 0x01	; 1
   13104:	70 e0       	ldi	r23, 0x00	; 0
   13106:	80 e0       	ldi	r24, 0x00	; 0
   13108:	90 e0       	ldi	r25, 0x00	; 0
   1310a:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   1310e:	e9 cf       	rjmp	.-46     	; 0x130e2 <_ZL9ledPurplev+0x42>
   13110:	88 e7       	ldi	r24, 0x78	; 120
   13112:	95 e3       	ldi	r25, 0x35	; 53
   13114:	0e 94 3c 6b 	call	0xd678	; 0xd678 <_ZN9HalRgbLed6purpleEv>
   13118:	61 e0       	ldi	r22, 0x01	; 1
   1311a:	70 e0       	ldi	r23, 0x00	; 0
   1311c:	80 e0       	ldi	r24, 0x00	; 0
   1311e:	90 e0       	ldi	r25, 0x00	; 0
   13120:	ff 90       	pop	r15
   13122:	ef 90       	pop	r14
   13124:	df 90       	pop	r13
   13126:	cf 90       	pop	r12
   13128:	08 95       	ret

0001312a <_ZL7ledCyanv>:
   1312a:	cf 92       	push	r12
   1312c:	df 92       	push	r13
   1312e:	ef 92       	push	r14
   13130:	ff 92       	push	r15
   13132:	60 e0       	ldi	r22, 0x00	; 0
   13134:	70 e0       	ldi	r23, 0x00	; 0
   13136:	cb 01       	movw	r24, r22
   13138:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   1313c:	62 30       	cpi	r22, 0x02	; 2
   1313e:	71 05       	cpc	r23, r1
   13140:	81 05       	cpc	r24, r1
   13142:	91 05       	cpc	r25, r1
   13144:	c9 f4       	brne	.+50     	; 0x13178 <_ZL7ledCyanv+0x4e>
   13146:	62 e0       	ldi	r22, 0x02	; 2
   13148:	70 e0       	ldi	r23, 0x00	; 0
   1314a:	80 e0       	ldi	r24, 0x00	; 0
   1314c:	90 e0       	ldi	r25, 0x00	; 0
   1314e:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   13152:	6b 01       	movw	r12, r22
   13154:	7c 01       	movw	r14, r24
   13156:	61 e0       	ldi	r22, 0x01	; 1
   13158:	70 e0       	ldi	r23, 0x00	; 0
   1315a:	80 e0       	ldi	r24, 0x00	; 0
   1315c:	90 e0       	ldi	r25, 0x00	; 0
   1315e:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   13162:	41 e0       	ldi	r20, 0x01	; 1
   13164:	cd 28       	or	r12, r13
   13166:	ce 28       	or	r12, r14
   13168:	cf 28       	or	r12, r15
   1316a:	09 f4       	brne	.+2      	; 0x1316e <_ZL7ledCyanv+0x44>
   1316c:	40 e0       	ldi	r20, 0x00	; 0
   1316e:	88 e7       	ldi	r24, 0x78	; 120
   13170:	95 e3       	ldi	r25, 0x35	; 53
   13172:	0e 94 bd 6b 	call	0xd77a	; 0xd77a <_ZN9HalRgbLed9blinkCyanEjb>
   13176:	15 c0       	rjmp	.+42     	; 0x131a2 <_ZL7ledCyanv+0x78>
   13178:	60 e0       	ldi	r22, 0x00	; 0
   1317a:	70 e0       	ldi	r23, 0x00	; 0
   1317c:	cb 01       	movw	r24, r22
   1317e:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   13182:	61 30       	cpi	r22, 0x01	; 1
   13184:	71 05       	cpc	r23, r1
   13186:	81 05       	cpc	r24, r1
   13188:	91 05       	cpc	r25, r1
   1318a:	39 f4       	brne	.+14     	; 0x1319a <_ZL7ledCyanv+0x70>
   1318c:	61 e0       	ldi	r22, 0x01	; 1
   1318e:	70 e0       	ldi	r23, 0x00	; 0
   13190:	80 e0       	ldi	r24, 0x00	; 0
   13192:	90 e0       	ldi	r25, 0x00	; 0
   13194:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   13198:	e9 cf       	rjmp	.-46     	; 0x1316c <_ZL7ledCyanv+0x42>
   1319a:	88 e7       	ldi	r24, 0x78	; 120
   1319c:	95 e3       	ldi	r25, 0x35	; 53
   1319e:	0e 94 35 6b 	call	0xd66a	; 0xd66a <_ZN9HalRgbLed4cyanEv>
   131a2:	61 e0       	ldi	r22, 0x01	; 1
   131a4:	70 e0       	ldi	r23, 0x00	; 0
   131a6:	80 e0       	ldi	r24, 0x00	; 0
   131a8:	90 e0       	ldi	r25, 0x00	; 0
   131aa:	ff 90       	pop	r15
   131ac:	ef 90       	pop	r14
   131ae:	df 90       	pop	r13
   131b0:	cf 90       	pop	r12
   131b2:	08 95       	ret

000131b4 <_ZL7ledBluev>:
   131b4:	cf 92       	push	r12
   131b6:	df 92       	push	r13
   131b8:	ef 92       	push	r14
   131ba:	ff 92       	push	r15
   131bc:	60 e0       	ldi	r22, 0x00	; 0
   131be:	70 e0       	ldi	r23, 0x00	; 0
   131c0:	cb 01       	movw	r24, r22
   131c2:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   131c6:	62 30       	cpi	r22, 0x02	; 2
   131c8:	71 05       	cpc	r23, r1
   131ca:	81 05       	cpc	r24, r1
   131cc:	91 05       	cpc	r25, r1
   131ce:	c9 f4       	brne	.+50     	; 0x13202 <_ZL7ledBluev+0x4e>
   131d0:	62 e0       	ldi	r22, 0x02	; 2
   131d2:	70 e0       	ldi	r23, 0x00	; 0
   131d4:	80 e0       	ldi	r24, 0x00	; 0
   131d6:	90 e0       	ldi	r25, 0x00	; 0
   131d8:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   131dc:	6b 01       	movw	r12, r22
   131de:	7c 01       	movw	r14, r24
   131e0:	61 e0       	ldi	r22, 0x01	; 1
   131e2:	70 e0       	ldi	r23, 0x00	; 0
   131e4:	80 e0       	ldi	r24, 0x00	; 0
   131e6:	90 e0       	ldi	r25, 0x00	; 0
   131e8:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   131ec:	41 e0       	ldi	r20, 0x01	; 1
   131ee:	cd 28       	or	r12, r13
   131f0:	ce 28       	or	r12, r14
   131f2:	cf 28       	or	r12, r15
   131f4:	09 f4       	brne	.+2      	; 0x131f8 <_ZL7ledBluev+0x44>
   131f6:	40 e0       	ldi	r20, 0x00	; 0
   131f8:	88 e7       	ldi	r24, 0x78	; 120
   131fa:	95 e3       	ldi	r25, 0x35	; 53
   131fc:	0e 94 ad 6b 	call	0xd75a	; 0xd75a <_ZN9HalRgbLed9blinkBlueEjb>
   13200:	15 c0       	rjmp	.+42     	; 0x1322c <_ZL7ledBluev+0x78>
   13202:	60 e0       	ldi	r22, 0x00	; 0
   13204:	70 e0       	ldi	r23, 0x00	; 0
   13206:	cb 01       	movw	r24, r22
   13208:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   1320c:	61 30       	cpi	r22, 0x01	; 1
   1320e:	71 05       	cpc	r23, r1
   13210:	81 05       	cpc	r24, r1
   13212:	91 05       	cpc	r25, r1
   13214:	39 f4       	brne	.+14     	; 0x13224 <_ZL7ledBluev+0x70>
   13216:	61 e0       	ldi	r22, 0x01	; 1
   13218:	70 e0       	ldi	r23, 0x00	; 0
   1321a:	80 e0       	ldi	r24, 0x00	; 0
   1321c:	90 e0       	ldi	r25, 0x00	; 0
   1321e:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   13222:	e9 cf       	rjmp	.-46     	; 0x131f6 <_ZL7ledBluev+0x42>
   13224:	88 e7       	ldi	r24, 0x78	; 120
   13226:	95 e3       	ldi	r25, 0x35	; 53
   13228:	0e 94 2e 6b 	call	0xd65c	; 0xd65c <_ZN9HalRgbLed4blueEv>
   1322c:	61 e0       	ldi	r22, 0x01	; 1
   1322e:	70 e0       	ldi	r23, 0x00	; 0
   13230:	80 e0       	ldi	r24, 0x00	; 0
   13232:	90 e0       	ldi	r25, 0x00	; 0
   13234:	ff 90       	pop	r15
   13236:	ef 90       	pop	r14
   13238:	df 90       	pop	r13
   1323a:	cf 90       	pop	r12
   1323c:	08 95       	ret

0001323e <_ZL8ledGreenv>:
   1323e:	cf 92       	push	r12
   13240:	df 92       	push	r13
   13242:	ef 92       	push	r14
   13244:	ff 92       	push	r15
   13246:	60 e0       	ldi	r22, 0x00	; 0
   13248:	70 e0       	ldi	r23, 0x00	; 0
   1324a:	cb 01       	movw	r24, r22
   1324c:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   13250:	62 30       	cpi	r22, 0x02	; 2
   13252:	71 05       	cpc	r23, r1
   13254:	81 05       	cpc	r24, r1
   13256:	91 05       	cpc	r25, r1
   13258:	c9 f4       	brne	.+50     	; 0x1328c <_ZL8ledGreenv+0x4e>
   1325a:	62 e0       	ldi	r22, 0x02	; 2
   1325c:	70 e0       	ldi	r23, 0x00	; 0
   1325e:	80 e0       	ldi	r24, 0x00	; 0
   13260:	90 e0       	ldi	r25, 0x00	; 0
   13262:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   13266:	6b 01       	movw	r12, r22
   13268:	7c 01       	movw	r14, r24
   1326a:	61 e0       	ldi	r22, 0x01	; 1
   1326c:	70 e0       	ldi	r23, 0x00	; 0
   1326e:	80 e0       	ldi	r24, 0x00	; 0
   13270:	90 e0       	ldi	r25, 0x00	; 0
   13272:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   13276:	41 e0       	ldi	r20, 0x01	; 1
   13278:	cd 28       	or	r12, r13
   1327a:	ce 28       	or	r12, r14
   1327c:	cf 28       	or	r12, r15
   1327e:	09 f4       	brne	.+2      	; 0x13282 <_ZL8ledGreenv+0x44>
   13280:	40 e0       	ldi	r20, 0x00	; 0
   13282:	88 e7       	ldi	r24, 0x78	; 120
   13284:	95 e3       	ldi	r25, 0x35	; 53
   13286:	0e 94 9d 6b 	call	0xd73a	; 0xd73a <_ZN9HalRgbLed10blinkGreenEjb>
   1328a:	15 c0       	rjmp	.+42     	; 0x132b6 <_ZL8ledGreenv+0x78>
   1328c:	60 e0       	ldi	r22, 0x00	; 0
   1328e:	70 e0       	ldi	r23, 0x00	; 0
   13290:	cb 01       	movw	r24, r22
   13292:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   13296:	61 30       	cpi	r22, 0x01	; 1
   13298:	71 05       	cpc	r23, r1
   1329a:	81 05       	cpc	r24, r1
   1329c:	91 05       	cpc	r25, r1
   1329e:	39 f4       	brne	.+14     	; 0x132ae <_ZL8ledGreenv+0x70>
   132a0:	61 e0       	ldi	r22, 0x01	; 1
   132a2:	70 e0       	ldi	r23, 0x00	; 0
   132a4:	80 e0       	ldi	r24, 0x00	; 0
   132a6:	90 e0       	ldi	r25, 0x00	; 0
   132a8:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   132ac:	e9 cf       	rjmp	.-46     	; 0x13280 <_ZL8ledGreenv+0x42>
   132ae:	88 e7       	ldi	r24, 0x78	; 120
   132b0:	95 e3       	ldi	r25, 0x35	; 53
   132b2:	0e 94 27 6b 	call	0xd64e	; 0xd64e <_ZN9HalRgbLed5greenEv>
   132b6:	61 e0       	ldi	r22, 0x01	; 1
   132b8:	70 e0       	ldi	r23, 0x00	; 0
   132ba:	80 e0       	ldi	r24, 0x00	; 0
   132bc:	90 e0       	ldi	r25, 0x00	; 0
   132be:	ff 90       	pop	r15
   132c0:	ef 90       	pop	r14
   132c2:	df 90       	pop	r13
   132c4:	cf 90       	pop	r12
   132c6:	08 95       	ret

000132c8 <_ZL6ledRedv>:
   132c8:	cf 92       	push	r12
   132ca:	df 92       	push	r13
   132cc:	ef 92       	push	r14
   132ce:	ff 92       	push	r15
   132d0:	60 e0       	ldi	r22, 0x00	; 0
   132d2:	70 e0       	ldi	r23, 0x00	; 0
   132d4:	cb 01       	movw	r24, r22
   132d6:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   132da:	62 30       	cpi	r22, 0x02	; 2
   132dc:	71 05       	cpc	r23, r1
   132de:	81 05       	cpc	r24, r1
   132e0:	91 05       	cpc	r25, r1
   132e2:	c9 f4       	brne	.+50     	; 0x13316 <_ZL6ledRedv+0x4e>
   132e4:	62 e0       	ldi	r22, 0x02	; 2
   132e6:	70 e0       	ldi	r23, 0x00	; 0
   132e8:	80 e0       	ldi	r24, 0x00	; 0
   132ea:	90 e0       	ldi	r25, 0x00	; 0
   132ec:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   132f0:	6b 01       	movw	r12, r22
   132f2:	7c 01       	movw	r14, r24
   132f4:	61 e0       	ldi	r22, 0x01	; 1
   132f6:	70 e0       	ldi	r23, 0x00	; 0
   132f8:	80 e0       	ldi	r24, 0x00	; 0
   132fa:	90 e0       	ldi	r25, 0x00	; 0
   132fc:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   13300:	41 e0       	ldi	r20, 0x01	; 1
   13302:	cd 28       	or	r12, r13
   13304:	ce 28       	or	r12, r14
   13306:	cf 28       	or	r12, r15
   13308:	09 f4       	brne	.+2      	; 0x1330c <_ZL6ledRedv+0x44>
   1330a:	40 e0       	ldi	r20, 0x00	; 0
   1330c:	88 e7       	ldi	r24, 0x78	; 120
   1330e:	95 e3       	ldi	r25, 0x35	; 53
   13310:	0e 94 8d 6b 	call	0xd71a	; 0xd71a <_ZN9HalRgbLed8blinkRedEjb>
   13314:	15 c0       	rjmp	.+42     	; 0x13340 <_ZL6ledRedv+0x78>
   13316:	60 e0       	ldi	r22, 0x00	; 0
   13318:	70 e0       	ldi	r23, 0x00	; 0
   1331a:	cb 01       	movw	r24, r22
   1331c:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   13320:	61 30       	cpi	r22, 0x01	; 1
   13322:	71 05       	cpc	r23, r1
   13324:	81 05       	cpc	r24, r1
   13326:	91 05       	cpc	r25, r1
   13328:	39 f4       	brne	.+14     	; 0x13338 <_ZL6ledRedv+0x70>
   1332a:	61 e0       	ldi	r22, 0x01	; 1
   1332c:	70 e0       	ldi	r23, 0x00	; 0
   1332e:	80 e0       	ldi	r24, 0x00	; 0
   13330:	90 e0       	ldi	r25, 0x00	; 0
   13332:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   13336:	e9 cf       	rjmp	.-46     	; 0x1330a <_ZL6ledRedv+0x42>
   13338:	88 e7       	ldi	r24, 0x78	; 120
   1333a:	95 e3       	ldi	r25, 0x35	; 53
   1333c:	0e 94 20 6b 	call	0xd640	; 0xd640 <_ZN9HalRgbLed3redEv>
   13340:	61 e0       	ldi	r22, 0x01	; 1
   13342:	70 e0       	ldi	r23, 0x00	; 0
   13344:	80 e0       	ldi	r24, 0x00	; 0
   13346:	90 e0       	ldi	r25, 0x00	; 0
   13348:	ff 90       	pop	r15
   1334a:	ef 90       	pop	r14
   1334c:	df 90       	pop	r13
   1334e:	cf 90       	pop	r12
   13350:	08 95       	ret

00013352 <_Z41__static_initialization_and_destruction_0ii.part.28>:
   13352:	0f 93       	push	r16
   13354:	00 e0       	ldi	r16, 0x00	; 0
   13356:	20 e0       	ldi	r18, 0x00	; 0
   13358:	40 e0       	ldi	r20, 0x00	; 0
   1335a:	60 e0       	ldi	r22, 0x00	; 0
   1335c:	81 ef       	ldi	r24, 0xF1	; 241
   1335e:	99 e3       	ldi	r25, 0x39	; 57
   13360:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <_ZN9IPAddressC1Ehhhh>
   13364:	81 e0       	ldi	r24, 0x01	; 1
   13366:	80 93 f0 39 	sts	0x39F0, r24
   1336a:	0f 91       	pop	r16
   1336c:	08 95       	ret

0001336e <_ZL9daisyWipev>:
   1336e:	ef 92       	push	r14
   13370:	ff 92       	push	r15
   13372:	0f 93       	push	r16
   13374:	1f 93       	push	r17
   13376:	cf 93       	push	r28
   13378:	df 93       	push	r29
   1337a:	cd b7       	in	r28, 0x3d	; 61
   1337c:	de b7       	in	r29, 0x3e	; 62
   1337e:	ae 97       	sbiw	r28, 0x2e	; 46
   13380:	0f b6       	in	r0, 0x3f	; 63
   13382:	f8 94       	cli
   13384:	de bf       	out	0x3e, r29	; 62
   13386:	0f be       	out	0x3f, r0	; 63
   13388:	cd bf       	out	0x3d, r28	; 61
   1338a:	80 ea       	ldi	r24, 0xA0	; 160
   1338c:	95 e3       	ldi	r25, 0x35	; 53
   1338e:	0e 94 b9 70 	call	0xe172	; 0xe172 <_ZN13PinoccioScout12factoryResetEv>
   13392:	8e 01       	movw	r16, r28
   13394:	0f 5f       	subi	r16, 0xFF	; 255
   13396:	1f 4f       	sbci	r17, 0xFF	; 255
   13398:	81 11       	cpse	r24, r1
   1339a:	0f c0       	rjmp	.+30     	; 0x133ba <_ZL9daisyWipev+0x4c>
   1339c:	6a e4       	ldi	r22, 0x4A	; 74
   1339e:	74 e1       	ldi	r23, 0x14	; 20
   133a0:	c8 01       	movw	r24, r16
   133a2:	0e 94 4a 19 	call	0x3294	; 0x3294 <_ZN6StringC1EPK19__FlashStringHelper>
   133a6:	c8 01       	movw	r24, r16
   133a8:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <_Z5speolRK6String>
   133ac:	c8 01       	movw	r24, r16
   133ae:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   133b2:	60 e0       	ldi	r22, 0x00	; 0
   133b4:	70 e0       	ldi	r23, 0x00	; 0
   133b6:	cb 01       	movw	r24, r22
   133b8:	9f c0       	rjmp	.+318    	; 0x134f8 <_ZL9daisyWipev+0x18a>
   133ba:	6b e2       	ldi	r22, 0x2B	; 43
   133bc:	74 e1       	ldi	r23, 0x14	; 20
   133be:	c8 01       	movw	r24, r16
   133c0:	0e 94 4a 19 	call	0x3294	; 0x3294 <_ZN6StringC1EPK19__FlashStringHelper>
   133c4:	c8 01       	movw	r24, r16
   133c6:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <_Z5speolRK6String>
   133ca:	c8 01       	movw	r24, r16
   133cc:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   133d0:	40 e0       	ldi	r20, 0x00	; 0
   133d2:	50 e0       	ldi	r21, 0x00	; 0
   133d4:	ba 01       	movw	r22, r20
   133d6:	87 e6       	ldi	r24, 0x67	; 103
   133d8:	9d e1       	ldi	r25, 0x1D	; 29
   133da:	0e 94 2c 68 	call	0xd058	; 0xd058 <keyMap>
   133de:	f8 2e       	mov	r15, r24
   133e0:	e9 2e       	mov	r14, r25
   133e2:	40 e0       	ldi	r20, 0x00	; 0
   133e4:	50 e0       	ldi	r21, 0x00	; 0
   133e6:	ba 01       	movw	r22, r20
   133e8:	8c e3       	ldi	r24, 0x3C	; 60
   133ea:	92 e2       	ldi	r25, 0x22	; 34
   133ec:	0e 94 2c 68 	call	0xd058	; 0xd058 <keyMap>
   133f0:	ef 92       	push	r14
   133f2:	ff 92       	push	r15
   133f4:	9f 93       	push	r25
   133f6:	8f 93       	push	r24
   133f8:	8c e6       	ldi	r24, 0x6C	; 108
   133fa:	9d e1       	ldi	r25, 0x1D	; 29
   133fc:	9f 93       	push	r25
   133fe:	8f 93       	push	r24
   13400:	1f 92       	push	r1
   13402:	80 e2       	ldi	r24, 0x20	; 32
   13404:	8f 93       	push	r24
   13406:	1f 93       	push	r17
   13408:	0f 93       	push	r16
   1340a:	0e 94 1d b6 	call	0x16c3a	; 0x16c3a <snprintf>
   1340e:	b8 01       	movw	r22, r16
   13410:	ce 01       	movw	r24, r28
   13412:	89 96       	adiw	r24, 0x29	; 41
   13414:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <_ZN6StringC1EPKc>
   13418:	ae 01       	movw	r20, r28
   1341a:	47 5d       	subi	r20, 0xD7	; 215
   1341c:	5f 4f       	sbci	r21, 0xFF	; 255
   1341e:	6b ee       	ldi	r22, 0xEB	; 235
   13420:	78 e3       	ldi	r23, 0x38	; 56
   13422:	ce 01       	movw	r24, r28
   13424:	81 96       	adiw	r24, 0x21	; 33
   13426:	0e 94 3f 7c 	call	0xf87e	; 0xf87e <_ZN20PinoccioScoutHandler6reportERK6String>
   1342a:	ce 01       	movw	r24, r28
   1342c:	81 96       	adiw	r24, 0x21	; 33
   1342e:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   13432:	ce 01       	movw	r24, r28
   13434:	89 96       	adiw	r24, 0x29	; 41
   13436:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   1343a:	80 ea       	ldi	r24, 0xA0	; 160
   1343c:	95 e3       	ldi	r25, 0x35	; 53
   1343e:	0e 94 b5 70 	call	0xe16a	; 0xe16a <_ZN13PinoccioScout11isLeadScoutEv>
   13442:	0f b6       	in	r0, 0x3f	; 63
   13444:	f8 94       	cli
   13446:	de bf       	out	0x3e, r29	; 62
   13448:	0f be       	out	0x3f, r0	; 63
   1344a:	cd bf       	out	0x3d, r28	; 61
   1344c:	81 11       	cpse	r24, r1
   1344e:	1a c0       	rjmp	.+52     	; 0x13484 <_ZL9daisyWipev+0x116>
   13450:	80 ea       	ldi	r24, 0xA0	; 160
   13452:	95 e3       	ldi	r25, 0x35	; 53
   13454:	0e 94 79 6e 	call	0xdcf2	; 0xdcf2 <_ZN13PinoccioClass20meshResetSecurityKeyEv>
   13458:	24 e1       	ldi	r18, 0x14	; 20
   1345a:	40 e0       	ldi	r20, 0x00	; 0
   1345c:	50 e0       	ldi	r21, 0x00	; 0
   1345e:	60 e0       	ldi	r22, 0x00	; 0
   13460:	70 e0       	ldi	r23, 0x00	; 0
   13462:	80 ea       	ldi	r24, 0xA0	; 160
   13464:	95 e3       	ldi	r25, 0x35	; 53
   13466:	0e 94 4c 6d 	call	0xda98	; 0xda98 <_ZN13PinoccioClass12meshSetRadioEjjh>
   1346a:	80 ea       	ldi	r24, 0xA0	; 160
   1346c:	95 e3       	ldi	r25, 0x35	; 53
   1346e:	0e 94 01 6d 	call	0xda02	; 0xda02 <_ZN13PinoccioClass12resetHQTokenEv>
   13472:	8e e7       	ldi	r24, 0x7E	; 126
   13474:	9d e1       	ldi	r25, 0x1D	; 29
   13476:	0e 94 59 35 	call	0x6ab2	; 0x6ab2 <_Z9doCommandPc>
   1347a:	83 e8       	ldi	r24, 0x83	; 131
   1347c:	9d e1       	ldi	r25, 0x1D	; 29
   1347e:	0e 94 59 35 	call	0x6ab2	; 0x6ab2 <_Z9doCommandPc>
   13482:	36 c0       	rjmp	.+108    	; 0x134f0 <_ZL9daisyWipev+0x182>
   13484:	4e e8       	ldi	r20, 0x8E	; 142
   13486:	5d e1       	ldi	r21, 0x1D	; 29
   13488:	64 e0       	ldi	r22, 0x04	; 4
   1348a:	74 e2       	ldi	r23, 0x24	; 36
   1348c:	87 ef       	ldi	r24, 0xF7	; 247
   1348e:	95 e3       	ldi	r25, 0x35	; 53
   13490:	0e 94 c2 67 	call	0xcf84	; 0xcf84 <_ZN12WiFiBackpack16runDirectCommandER5PrintPKc>
   13494:	81 11       	cpse	r24, r1
   13496:	10 c0       	rjmp	.+32     	; 0x134b8 <_ZL9daisyWipev+0x14a>
   13498:	68 e0       	ldi	r22, 0x08	; 8
   1349a:	74 e1       	ldi	r23, 0x14	; 20
   1349c:	ce 01       	movw	r24, r28
   1349e:	81 96       	adiw	r24, 0x21	; 33
   134a0:	0e 94 4a 19 	call	0x3294	; 0x3294 <_ZN6StringC1EPK19__FlashStringHelper>
   134a4:	ce 01       	movw	r24, r28
   134a6:	81 96       	adiw	r24, 0x21	; 33
   134a8:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <_Z2spRK6String>
   134ac:	ce 01       	movw	r24, r28
   134ae:	81 96       	adiw	r24, 0x21	; 33
   134b0:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   134b4:	10 e0       	ldi	r17, 0x00	; 0
   134b6:	01 c0       	rjmp	.+2      	; 0x134ba <_ZL9daisyWipev+0x14c>
   134b8:	11 e0       	ldi	r17, 0x01	; 1
   134ba:	43 e9       	ldi	r20, 0x93	; 147
   134bc:	5d e1       	ldi	r21, 0x1D	; 29
   134be:	64 e0       	ldi	r22, 0x04	; 4
   134c0:	74 e2       	ldi	r23, 0x24	; 36
   134c2:	87 ef       	ldi	r24, 0xF7	; 247
   134c4:	95 e3       	ldi	r25, 0x35	; 53
   134c6:	0e 94 c2 67 	call	0xcf84	; 0xcf84 <_ZN12WiFiBackpack16runDirectCommandER5PrintPKc>
   134ca:	81 11       	cpse	r24, r1
   134cc:	0f c0       	rjmp	.+30     	; 0x134ec <_ZL9daisyWipev+0x17e>
   134ce:	65 ee       	ldi	r22, 0xE5	; 229
   134d0:	73 e1       	ldi	r23, 0x13	; 19
   134d2:	ce 01       	movw	r24, r28
   134d4:	81 96       	adiw	r24, 0x21	; 33
   134d6:	0e 94 4a 19 	call	0x3294	; 0x3294 <_ZN6StringC1EPK19__FlashStringHelper>
   134da:	ce 01       	movw	r24, r28
   134dc:	81 96       	adiw	r24, 0x21	; 33
   134de:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <_Z2spRK6String>
   134e2:	ce 01       	movw	r24, r28
   134e4:	81 96       	adiw	r24, 0x21	; 33
   134e6:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   134ea:	02 c0       	rjmp	.+4      	; 0x134f0 <_ZL9daisyWipev+0x182>
   134ec:	11 11       	cpse	r17, r1
   134ee:	b0 cf       	rjmp	.-160    	; 0x13450 <_ZL9daisyWipev+0xe2>
   134f0:	61 e0       	ldi	r22, 0x01	; 1
   134f2:	70 e0       	ldi	r23, 0x00	; 0
   134f4:	80 e0       	ldi	r24, 0x00	; 0
   134f6:	90 e0       	ldi	r25, 0x00	; 0
   134f8:	ae 96       	adiw	r28, 0x2e	; 46
   134fa:	0f b6       	in	r0, 0x3f	; 63
   134fc:	f8 94       	cli
   134fe:	de bf       	out	0x3e, r29	; 62
   13500:	0f be       	out	0x3f, r0	; 63
   13502:	cd bf       	out	0x3d, r28	; 61
   13504:	df 91       	pop	r29
   13506:	cf 91       	pop	r28
   13508:	1f 91       	pop	r17
   1350a:	0f 91       	pop	r16
   1350c:	ff 90       	pop	r15
   1350e:	ef 90       	pop	r14
   13510:	08 95       	ret

00013512 <_ZL23temperatureEventHandlerh>:
   13512:	cf 93       	push	r28
   13514:	df 93       	push	r29
   13516:	cd b7       	in	r28, 0x3d	; 61
   13518:	de b7       	in	r29, 0x3e	; 62
   1351a:	ad 97       	sbiw	r28, 0x2d	; 45
   1351c:	0f b6       	in	r0, 0x3f	; 63
   1351e:	f8 94       	cli
   13520:	de bf       	out	0x3e, r29	; 62
   13522:	0f be       	out	0x3f, r0	; 63
   13524:	cd bf       	out	0x3d, r28	; 61
   13526:	68 2f       	mov	r22, r24
   13528:	ce 01       	movw	r24, r28
   1352a:	01 96       	adiw	r24, 0x01	; 1
   1352c:	6d a7       	std	Y+45, r22	; 0x2d
   1352e:	0e 94 dd 81 	call	0x103ba	; 0x103ba <_ZL12tempReportHQv>
   13532:	ce 01       	movw	r24, r28
   13534:	01 96       	adiw	r24, 0x01	; 1
   13536:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   1353a:	89 e9       	ldi	r24, 0x99	; 153
   1353c:	9d e1       	ldi	r25, 0x1D	; 29
   1353e:	0e 94 0d 29 	call	0x521a	; 0x521a <_Z10findscriptPc>
   13542:	6d a5       	ldd	r22, Y+45	; 0x2d
   13544:	88 23       	and	r24, r24
   13546:	c1 f1       	breq	.+112    	; 0x135b8 <_ZL23temperatureEventHandlerh+0xa6>
   13548:	4a e0       	ldi	r20, 0x0A	; 10
   1354a:	ce 01       	movw	r24, r28
   1354c:	81 96       	adiw	r24, 0x21	; 33
   1354e:	0e 94 50 18 	call	0x30a0	; 0x30a0 <_ZN6StringC1Ehh>
   13552:	6b ea       	ldi	r22, 0xAB	; 171
   13554:	7d e1       	ldi	r23, 0x1D	; 29
   13556:	ce 01       	movw	r24, r28
   13558:	01 96       	adiw	r24, 0x01	; 1
   1355a:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <_ZN6StringC1EPKc>
   1355e:	be 01       	movw	r22, r28
   13560:	6f 5d       	subi	r22, 0xDF	; 223
   13562:	7f 4f       	sbci	r23, 0xFF	; 255
   13564:	ce 01       	movw	r24, r28
   13566:	01 96       	adiw	r24, 0x01	; 1
   13568:	0e 94 9f 19 	call	0x333e	; 0x333e <_ZplRK15StringSumHelperRK6String>
   1356c:	65 e6       	ldi	r22, 0x65	; 101
   1356e:	7d e1       	ldi	r23, 0x1D	; 29
   13570:	0e 94 b0 19 	call	0x3360	; 0x3360 <_ZplRK15StringSumHelperPKc>
   13574:	bc 01       	movw	r22, r24
   13576:	ce 01       	movw	r24, r28
   13578:	87 96       	adiw	r24, 0x27	; 39
   1357a:	0e 94 32 18 	call	0x3064	; 0x3064 <_ZN6StringC1ERKS_>
   1357e:	ce 01       	movw	r24, r28
   13580:	01 96       	adiw	r24, 0x01	; 1
   13582:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   13586:	ce 01       	movw	r24, r28
   13588:	81 96       	adiw	r24, 0x21	; 33
   1358a:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   1358e:	4b a5       	ldd	r20, Y+43	; 0x2b
   13590:	5c a5       	ldd	r21, Y+44	; 0x2c
   13592:	4f 5f       	subi	r20, 0xFF	; 255
   13594:	5f 4f       	sbci	r21, 0xFF	; 255
   13596:	20 e0       	ldi	r18, 0x00	; 0
   13598:	30 e0       	ldi	r19, 0x00	; 0
   1359a:	be 01       	movw	r22, r28
   1359c:	6f 5f       	subi	r22, 0xFF	; 255
   1359e:	7f 4f       	sbci	r23, 0xFF	; 255
   135a0:	ce 01       	movw	r24, r28
   135a2:	87 96       	adiw	r24, 0x27	; 39
   135a4:	0e 94 da 19 	call	0x33b4	; 0x33b4 <_ZNK6String8getBytesEPhjj>
   135a8:	ce 01       	movw	r24, r28
   135aa:	01 96       	adiw	r24, 0x01	; 1
   135ac:	0e 94 59 35 	call	0x6ab2	; 0x6ab2 <_Z9doCommandPc>
   135b0:	ce 01       	movw	r24, r28
   135b2:	87 96       	adiw	r24, 0x27	; 39
   135b4:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   135b8:	ad 96       	adiw	r28, 0x2d	; 45
   135ba:	0f b6       	in	r0, 0x3f	; 63
   135bc:	f8 94       	cli
   135be:	de bf       	out	0x3e, r29	; 62
   135c0:	0f be       	out	0x3f, r0	; 63
   135c2:	cd bf       	out	0x3d, r28	; 61
   135c4:	df 91       	pop	r29
   135c6:	cf 91       	pop	r28
   135c8:	08 95       	ret

000135ca <_ZL27batteryChargingEventHandlerh>:
   135ca:	cf 93       	push	r28
   135cc:	df 93       	push	r29
   135ce:	cd b7       	in	r28, 0x3d	; 61
   135d0:	de b7       	in	r29, 0x3e	; 62
   135d2:	ad 97       	sbiw	r28, 0x2d	; 45
   135d4:	0f b6       	in	r0, 0x3f	; 63
   135d6:	f8 94       	cli
   135d8:	de bf       	out	0x3e, r29	; 62
   135da:	0f be       	out	0x3f, r0	; 63
   135dc:	cd bf       	out	0x3d, r28	; 61
   135de:	68 2f       	mov	r22, r24
   135e0:	ce 01       	movw	r24, r28
   135e2:	01 96       	adiw	r24, 0x01	; 1
   135e4:	6d a7       	std	Y+45, r22	; 0x2d
   135e6:	0e 94 ea 82 	call	0x105d4	; 0x105d4 <_ZL13powerReportHQv>
   135ea:	ce 01       	movw	r24, r28
   135ec:	01 96       	adiw	r24, 0x01	; 1
   135ee:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   135f2:	8e eb       	ldi	r24, 0xBE	; 190
   135f4:	9d e1       	ldi	r25, 0x1D	; 29
   135f6:	0e 94 0d 29 	call	0x521a	; 0x521a <_Z10findscriptPc>
   135fa:	6d a5       	ldd	r22, Y+45	; 0x2d
   135fc:	88 23       	and	r24, r24
   135fe:	c1 f1       	breq	.+112    	; 0x13670 <_ZL27batteryChargingEventHandlerh+0xa6>
   13600:	4a e0       	ldi	r20, 0x0A	; 10
   13602:	ce 01       	movw	r24, r28
   13604:	81 96       	adiw	r24, 0x21	; 33
   13606:	0e 94 50 18 	call	0x30a0	; 0x30a0 <_ZN6StringC1Ehh>
   1360a:	6d ec       	ldi	r22, 0xCD	; 205
   1360c:	7d e1       	ldi	r23, 0x1D	; 29
   1360e:	ce 01       	movw	r24, r28
   13610:	01 96       	adiw	r24, 0x01	; 1
   13612:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <_ZN6StringC1EPKc>
   13616:	be 01       	movw	r22, r28
   13618:	6f 5d       	subi	r22, 0xDF	; 223
   1361a:	7f 4f       	sbci	r23, 0xFF	; 255
   1361c:	ce 01       	movw	r24, r28
   1361e:	01 96       	adiw	r24, 0x01	; 1
   13620:	0e 94 9f 19 	call	0x333e	; 0x333e <_ZplRK15StringSumHelperRK6String>
   13624:	65 e6       	ldi	r22, 0x65	; 101
   13626:	7d e1       	ldi	r23, 0x1D	; 29
   13628:	0e 94 b0 19 	call	0x3360	; 0x3360 <_ZplRK15StringSumHelperPKc>
   1362c:	bc 01       	movw	r22, r24
   1362e:	ce 01       	movw	r24, r28
   13630:	87 96       	adiw	r24, 0x27	; 39
   13632:	0e 94 32 18 	call	0x3064	; 0x3064 <_ZN6StringC1ERKS_>
   13636:	ce 01       	movw	r24, r28
   13638:	01 96       	adiw	r24, 0x01	; 1
   1363a:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   1363e:	ce 01       	movw	r24, r28
   13640:	81 96       	adiw	r24, 0x21	; 33
   13642:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   13646:	4b a5       	ldd	r20, Y+43	; 0x2b
   13648:	5c a5       	ldd	r21, Y+44	; 0x2c
   1364a:	4f 5f       	subi	r20, 0xFF	; 255
   1364c:	5f 4f       	sbci	r21, 0xFF	; 255
   1364e:	20 e0       	ldi	r18, 0x00	; 0
   13650:	30 e0       	ldi	r19, 0x00	; 0
   13652:	be 01       	movw	r22, r28
   13654:	6f 5f       	subi	r22, 0xFF	; 255
   13656:	7f 4f       	sbci	r23, 0xFF	; 255
   13658:	ce 01       	movw	r24, r28
   1365a:	87 96       	adiw	r24, 0x27	; 39
   1365c:	0e 94 da 19 	call	0x33b4	; 0x33b4 <_ZNK6String8getBytesEPhjj>
   13660:	ce 01       	movw	r24, r28
   13662:	01 96       	adiw	r24, 0x01	; 1
   13664:	0e 94 59 35 	call	0x6ab2	; 0x6ab2 <_Z9doCommandPc>
   13668:	ce 01       	movw	r24, r28
   1366a:	87 96       	adiw	r24, 0x27	; 39
   1366c:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   13670:	ad 96       	adiw	r28, 0x2d	; 45
   13672:	0f b6       	in	r0, 0x3f	; 63
   13674:	f8 94       	cli
   13676:	de bf       	out	0x3e, r29	; 62
   13678:	0f be       	out	0x3f, r0	; 63
   1367a:	cd bf       	out	0x3d, r28	; 61
   1367c:	df 91       	pop	r29
   1367e:	cf 91       	pop	r28
   13680:	08 95       	ret

00013682 <_ZL26batteryVoltageEventHandlerh>:
   13682:	cf 93       	push	r28
   13684:	df 93       	push	r29
   13686:	cd b7       	in	r28, 0x3d	; 61
   13688:	de b7       	in	r29, 0x3e	; 62
   1368a:	ad 97       	sbiw	r28, 0x2d	; 45
   1368c:	0f b6       	in	r0, 0x3f	; 63
   1368e:	f8 94       	cli
   13690:	de bf       	out	0x3e, r29	; 62
   13692:	0f be       	out	0x3f, r0	; 63
   13694:	cd bf       	out	0x3d, r28	; 61
   13696:	68 2f       	mov	r22, r24
   13698:	ce 01       	movw	r24, r28
   1369a:	01 96       	adiw	r24, 0x01	; 1
   1369c:	6d a7       	std	Y+45, r22	; 0x2d
   1369e:	0e 94 ea 82 	call	0x105d4	; 0x105d4 <_ZL13powerReportHQv>
   136a2:	ce 01       	movw	r24, r28
   136a4:	01 96       	adiw	r24, 0x01	; 1
   136a6:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   136aa:	8d ed       	ldi	r24, 0xDD	; 221
   136ac:	9d e1       	ldi	r25, 0x1D	; 29
   136ae:	0e 94 0d 29 	call	0x521a	; 0x521a <_Z10findscriptPc>
   136b2:	6d a5       	ldd	r22, Y+45	; 0x2d
   136b4:	88 23       	and	r24, r24
   136b6:	c1 f1       	breq	.+112    	; 0x13728 <_ZL26batteryVoltageEventHandlerh+0xa6>
   136b8:	4a e0       	ldi	r20, 0x0A	; 10
   136ba:	ce 01       	movw	r24, r28
   136bc:	81 96       	adiw	r24, 0x21	; 33
   136be:	0e 94 50 18 	call	0x30a0	; 0x30a0 <_ZN6StringC1Ehh>
   136c2:	6b ee       	ldi	r22, 0xEB	; 235
   136c4:	7d e1       	ldi	r23, 0x1D	; 29
   136c6:	ce 01       	movw	r24, r28
   136c8:	01 96       	adiw	r24, 0x01	; 1
   136ca:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <_ZN6StringC1EPKc>
   136ce:	be 01       	movw	r22, r28
   136d0:	6f 5d       	subi	r22, 0xDF	; 223
   136d2:	7f 4f       	sbci	r23, 0xFF	; 255
   136d4:	ce 01       	movw	r24, r28
   136d6:	01 96       	adiw	r24, 0x01	; 1
   136d8:	0e 94 9f 19 	call	0x333e	; 0x333e <_ZplRK15StringSumHelperRK6String>
   136dc:	65 e6       	ldi	r22, 0x65	; 101
   136de:	7d e1       	ldi	r23, 0x1D	; 29
   136e0:	0e 94 b0 19 	call	0x3360	; 0x3360 <_ZplRK15StringSumHelperPKc>
   136e4:	bc 01       	movw	r22, r24
   136e6:	ce 01       	movw	r24, r28
   136e8:	87 96       	adiw	r24, 0x27	; 39
   136ea:	0e 94 32 18 	call	0x3064	; 0x3064 <_ZN6StringC1ERKS_>
   136ee:	ce 01       	movw	r24, r28
   136f0:	01 96       	adiw	r24, 0x01	; 1
   136f2:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   136f6:	ce 01       	movw	r24, r28
   136f8:	81 96       	adiw	r24, 0x21	; 33
   136fa:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   136fe:	4b a5       	ldd	r20, Y+43	; 0x2b
   13700:	5c a5       	ldd	r21, Y+44	; 0x2c
   13702:	4f 5f       	subi	r20, 0xFF	; 255
   13704:	5f 4f       	sbci	r21, 0xFF	; 255
   13706:	20 e0       	ldi	r18, 0x00	; 0
   13708:	30 e0       	ldi	r19, 0x00	; 0
   1370a:	be 01       	movw	r22, r28
   1370c:	6f 5f       	subi	r22, 0xFF	; 255
   1370e:	7f 4f       	sbci	r23, 0xFF	; 255
   13710:	ce 01       	movw	r24, r28
   13712:	87 96       	adiw	r24, 0x27	; 39
   13714:	0e 94 da 19 	call	0x33b4	; 0x33b4 <_ZNK6String8getBytesEPhjj>
   13718:	ce 01       	movw	r24, r28
   1371a:	01 96       	adiw	r24, 0x01	; 1
   1371c:	0e 94 59 35 	call	0x6ab2	; 0x6ab2 <_Z9doCommandPc>
   13720:	ce 01       	movw	r24, r28
   13722:	87 96       	adiw	r24, 0x27	; 39
   13724:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   13728:	ad 96       	adiw	r28, 0x2d	; 45
   1372a:	0f b6       	in	r0, 0x3f	; 63
   1372c:	f8 94       	cli
   1372e:	de bf       	out	0x3e, r29	; 62
   13730:	0f be       	out	0x3f, r0	; 63
   13732:	cd bf       	out	0x3d, r28	; 61
   13734:	df 91       	pop	r29
   13736:	cf 91       	pop	r28
   13738:	08 95       	ret

0001373a <_ZL29batteryPercentageEventHandlerh>:
   1373a:	cf 93       	push	r28
   1373c:	df 93       	push	r29
   1373e:	cd b7       	in	r28, 0x3d	; 61
   13740:	de b7       	in	r29, 0x3e	; 62
   13742:	ad 97       	sbiw	r28, 0x2d	; 45
   13744:	0f b6       	in	r0, 0x3f	; 63
   13746:	f8 94       	cli
   13748:	de bf       	out	0x3e, r29	; 62
   1374a:	0f be       	out	0x3f, r0	; 63
   1374c:	cd bf       	out	0x3d, r28	; 61
   1374e:	68 2f       	mov	r22, r24
   13750:	ce 01       	movw	r24, r28
   13752:	01 96       	adiw	r24, 0x01	; 1
   13754:	6d a7       	std	Y+45, r22	; 0x2d
   13756:	0e 94 ea 82 	call	0x105d4	; 0x105d4 <_ZL13powerReportHQv>
   1375a:	ce 01       	movw	r24, r28
   1375c:	01 96       	adiw	r24, 0x01	; 1
   1375e:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   13762:	8a ef       	ldi	r24, 0xFA	; 250
   13764:	9d e1       	ldi	r25, 0x1D	; 29
   13766:	0e 94 0d 29 	call	0x521a	; 0x521a <_Z10findscriptPc>
   1376a:	6d a5       	ldd	r22, Y+45	; 0x2d
   1376c:	88 23       	and	r24, r24
   1376e:	c1 f1       	breq	.+112    	; 0x137e0 <_ZL29batteryPercentageEventHandlerh+0xa6>
   13770:	4a e0       	ldi	r20, 0x0A	; 10
   13772:	ce 01       	movw	r24, r28
   13774:	81 96       	adiw	r24, 0x21	; 33
   13776:	0e 94 50 18 	call	0x30a0	; 0x30a0 <_ZN6StringC1Ehh>
   1377a:	68 e0       	ldi	r22, 0x08	; 8
   1377c:	7e e1       	ldi	r23, 0x1E	; 30
   1377e:	ce 01       	movw	r24, r28
   13780:	01 96       	adiw	r24, 0x01	; 1
   13782:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <_ZN6StringC1EPKc>
   13786:	be 01       	movw	r22, r28
   13788:	6f 5d       	subi	r22, 0xDF	; 223
   1378a:	7f 4f       	sbci	r23, 0xFF	; 255
   1378c:	ce 01       	movw	r24, r28
   1378e:	01 96       	adiw	r24, 0x01	; 1
   13790:	0e 94 9f 19 	call	0x333e	; 0x333e <_ZplRK15StringSumHelperRK6String>
   13794:	65 e6       	ldi	r22, 0x65	; 101
   13796:	7d e1       	ldi	r23, 0x1D	; 29
   13798:	0e 94 b0 19 	call	0x3360	; 0x3360 <_ZplRK15StringSumHelperPKc>
   1379c:	bc 01       	movw	r22, r24
   1379e:	ce 01       	movw	r24, r28
   137a0:	87 96       	adiw	r24, 0x27	; 39
   137a2:	0e 94 32 18 	call	0x3064	; 0x3064 <_ZN6StringC1ERKS_>
   137a6:	ce 01       	movw	r24, r28
   137a8:	01 96       	adiw	r24, 0x01	; 1
   137aa:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   137ae:	ce 01       	movw	r24, r28
   137b0:	81 96       	adiw	r24, 0x21	; 33
   137b2:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   137b6:	4b a5       	ldd	r20, Y+43	; 0x2b
   137b8:	5c a5       	ldd	r21, Y+44	; 0x2c
   137ba:	4f 5f       	subi	r20, 0xFF	; 255
   137bc:	5f 4f       	sbci	r21, 0xFF	; 255
   137be:	20 e0       	ldi	r18, 0x00	; 0
   137c0:	30 e0       	ldi	r19, 0x00	; 0
   137c2:	be 01       	movw	r22, r28
   137c4:	6f 5f       	subi	r22, 0xFF	; 255
   137c6:	7f 4f       	sbci	r23, 0xFF	; 255
   137c8:	ce 01       	movw	r24, r28
   137ca:	87 96       	adiw	r24, 0x27	; 39
   137cc:	0e 94 da 19 	call	0x33b4	; 0x33b4 <_ZNK6String8getBytesEPhjj>
   137d0:	ce 01       	movw	r24, r28
   137d2:	01 96       	adiw	r24, 0x01	; 1
   137d4:	0e 94 59 35 	call	0x6ab2	; 0x6ab2 <_Z9doCommandPc>
   137d8:	ce 01       	movw	r24, r28
   137da:	87 96       	adiw	r24, 0x27	; 39
   137dc:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   137e0:	ad 96       	adiw	r28, 0x2d	; 45
   137e2:	0f b6       	in	r0, 0x3f	; 63
   137e4:	f8 94       	cli
   137e6:	de bf       	out	0x3e, r29	; 62
   137e8:	0f be       	out	0x3f, r0	; 63
   137ea:	cd bf       	out	0x3d, r28	; 61
   137ec:	df 91       	pop	r29
   137ee:	cf 91       	pop	r28
   137f0:	08 95       	ret

000137f2 <_ZL14printHexBufferR5PrintPKhjPKc.constprop.40>:
   137f2:	bf 92       	push	r11
   137f4:	cf 92       	push	r12
   137f6:	df 92       	push	r13
   137f8:	ef 92       	push	r14
   137fa:	ff 92       	push	r15
   137fc:	0f 93       	push	r16
   137fe:	1f 93       	push	r17
   13800:	cf 93       	push	r28
   13802:	df 93       	push	r29
   13804:	6c 01       	movw	r12, r24
   13806:	7b 01       	movw	r14, r22
   13808:	ea 01       	movw	r28, r20
   1380a:	b1 2c       	mov	r11, r1
   1380c:	0b 2d       	mov	r16, r11
   1380e:	10 e0       	ldi	r17, 0x00	; 0
   13810:	0e 15       	cp	r16, r14
   13812:	1f 05       	cpc	r17, r15
   13814:	e0 f4       	brcc	.+56     	; 0x1384e <_ZL14printHexBufferR5PrintPKhjPKc.constprop.40+0x5c>
   13816:	0c 0d       	add	r16, r12
   13818:	1d 1d       	adc	r17, r13
   1381a:	f8 01       	movw	r30, r16
   1381c:	80 81       	ld	r24, Z
   1381e:	80 31       	cpi	r24, 0x10	; 16
   13820:	28 f4       	brcc	.+10     	; 0x1382c <_ZL14printHexBufferR5PrintPKhjPKc.constprop.40+0x3a>
   13822:	60 e3       	ldi	r22, 0x30	; 48
   13824:	84 e0       	ldi	r24, 0x04	; 4
   13826:	94 e2       	ldi	r25, 0x24	; 36
   13828:	0e 94 65 0f 	call	0x1eca	; 0x1eca <_ZN5Print5printEc>
   1382c:	40 e1       	ldi	r20, 0x10	; 16
   1382e:	50 e0       	ldi	r21, 0x00	; 0
   13830:	f8 01       	movw	r30, r16
   13832:	60 81       	ld	r22, Z
   13834:	84 e0       	ldi	r24, 0x04	; 4
   13836:	94 e2       	ldi	r25, 0x24	; 36
   13838:	0e 94 76 10 	call	0x20ec	; 0x20ec <_ZN5Print5printEhi>
   1383c:	20 97       	sbiw	r28, 0x00	; 0
   1383e:	29 f0       	breq	.+10     	; 0x1384a <_ZL14printHexBufferR5PrintPKhjPKc.constprop.40+0x58>
   13840:	be 01       	movw	r22, r28
   13842:	84 e0       	ldi	r24, 0x04	; 4
   13844:	94 e2       	ldi	r25, 0x24	; 36
   13846:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_ZN5Print5printEPKc>
   1384a:	b3 94       	inc	r11
   1384c:	df cf       	rjmp	.-66     	; 0x1380c <_ZL14printHexBufferR5PrintPKhjPKc.constprop.40+0x1a>
   1384e:	df 91       	pop	r29
   13850:	cf 91       	pop	r28
   13852:	1f 91       	pop	r17
   13854:	0f 91       	pop	r16
   13856:	ff 90       	pop	r15
   13858:	ef 90       	pop	r14
   1385a:	df 90       	pop	r13
   1385c:	cf 90       	pop	r12
   1385e:	bf 90       	pop	r11
   13860:	08 95       	ret

00013862 <_ZL12backpackListv>:
   13862:	0f 93       	push	r16
   13864:	1f 93       	push	r17
   13866:	cf 93       	push	r28
   13868:	df 93       	push	r29
   1386a:	cd b7       	in	r28, 0x3d	; 61
   1386c:	de b7       	in	r29, 0x3e	; 62
   1386e:	27 97       	sbiw	r28, 0x07	; 7
   13870:	0f b6       	in	r0, 0x3f	; 63
   13872:	f8 94       	cli
   13874:	de bf       	out	0x3e, r29	; 62
   13876:	0f be       	out	0x3f, r0	; 63
   13878:	cd bf       	out	0x3d, r28	; 61
   1387a:	80 91 6d 35 	lds	r24, 0x356D
   1387e:	81 11       	cpse	r24, r1
   13880:	0f c0       	rjmp	.+30     	; 0x138a0 <_ZL12backpackListv+0x3e>
   13882:	61 e3       	ldi	r22, 0x31	; 49
   13884:	71 e1       	ldi	r23, 0x11	; 17
   13886:	ce 01       	movw	r24, r28
   13888:	01 96       	adiw	r24, 0x01	; 1
   1388a:	0e 94 4a 19 	call	0x3294	; 0x3294 <_ZN6StringC1EPK19__FlashStringHelper>
   1388e:	ce 01       	movw	r24, r28
   13890:	01 96       	adiw	r24, 0x01	; 1
   13892:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <_Z5speolRK6String>
   13896:	ce 01       	movw	r24, r28
   13898:	01 96       	adiw	r24, 0x01	; 1
   1389a:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   1389e:	62 c0       	rjmp	.+196    	; 0x13964 <_ZL12backpackListv+0x102>
   138a0:	1f 82       	std	Y+7, r1	; 0x07
   138a2:	8f 81       	ldd	r24, Y+7	; 0x07
   138a4:	90 91 6d 35 	lds	r25, 0x356D
   138a8:	89 17       	cp	r24, r25
   138aa:	08 f0       	brcs	.+2      	; 0x138ae <_ZL12backpackListv+0x4c>
   138ac:	5b c0       	rjmp	.+182    	; 0x13964 <_ZL12backpackListv+0x102>
   138ae:	00 91 6b 35 	lds	r16, 0x356B
   138b2:	10 91 6c 35 	lds	r17, 0x356C
   138b6:	92 e1       	ldi	r25, 0x12	; 18
   138b8:	89 9f       	mul	r24, r25
   138ba:	00 0d       	add	r16, r0
   138bc:	11 1d       	adc	r17, r1
   138be:	11 24       	eor	r1, r1
   138c0:	40 e0       	ldi	r20, 0x00	; 0
   138c2:	50 e0       	ldi	r21, 0x00	; 0
   138c4:	61 e0       	ldi	r22, 0x01	; 1
   138c6:	70 e0       	ldi	r23, 0x00	; 0
   138c8:	ce 01       	movw	r24, r28
   138ca:	07 96       	adiw	r24, 0x07	; 7
   138cc:	92 df       	rcall	.-220    	; 0x137f2 <_ZL14printHexBufferR5PrintPKhjPKc.constprop.40>
   138ce:	6e e2       	ldi	r22, 0x2E	; 46
   138d0:	71 e1       	ldi	r23, 0x11	; 17
   138d2:	ce 01       	movw	r24, r28
   138d4:	01 96       	adiw	r24, 0x01	; 1
   138d6:	0e 94 4a 19 	call	0x3294	; 0x3294 <_ZN6StringC1EPK19__FlashStringHelper>
   138da:	ce 01       	movw	r24, r28
   138dc:	01 96       	adiw	r24, 0x01	; 1
   138de:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <_Z2spRK6String>
   138e2:	ce 01       	movw	r24, r28
   138e4:	01 96       	adiw	r24, 0x01	; 1
   138e6:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   138ea:	c8 01       	movw	r24, r16
   138ec:	0e 94 15 63 	call	0xc62a	; 0xc62a <_ZN12BackpackInfo9getHeaderEv>
   138f0:	00 97       	sbiw	r24, 0x00	; 0
   138f2:	79 f4       	brne	.+30     	; 0x13912 <_ZL12backpackListv+0xb0>
   138f4:	6b e1       	ldi	r22, 0x1B	; 27
   138f6:	71 e1       	ldi	r23, 0x11	; 17
   138f8:	ce 01       	movw	r24, r28
   138fa:	01 96       	adiw	r24, 0x01	; 1
   138fc:	0e 94 4a 19 	call	0x3294	; 0x3294 <_ZN6StringC1EPK19__FlashStringHelper>
   13900:	ce 01       	movw	r24, r28
   13902:	01 96       	adiw	r24, 0x01	; 1
   13904:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <_Z2spRK6String>
   13908:	ce 01       	movw	r24, r28
   1390a:	01 96       	adiw	r24, 0x01	; 1
   1390c:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   13910:	03 c0       	rjmp	.+6      	; 0x13918 <_ZL12backpackListv+0xb6>
   13912:	05 96       	adiw	r24, 0x05	; 5
   13914:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <_Z2spPKc>
   13918:	68 e1       	ldi	r22, 0x18	; 24
   1391a:	71 e1       	ldi	r23, 0x11	; 17
   1391c:	ce 01       	movw	r24, r28
   1391e:	01 96       	adiw	r24, 0x01	; 1
   13920:	0e 94 4a 19 	call	0x3294	; 0x3294 <_ZN6StringC1EPK19__FlashStringHelper>
   13924:	ce 01       	movw	r24, r28
   13926:	01 96       	adiw	r24, 0x01	; 1
   13928:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <_Z2spRK6String>
   1392c:	ce 01       	movw	r24, r28
   1392e:	01 96       	adiw	r24, 0x01	; 1
   13930:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   13934:	40 e0       	ldi	r20, 0x00	; 0
   13936:	50 e0       	ldi	r21, 0x00	; 0
   13938:	68 e0       	ldi	r22, 0x08	; 8
   1393a:	70 e0       	ldi	r23, 0x00	; 0
   1393c:	c8 01       	movw	r24, r16
   1393e:	59 df       	rcall	.-334    	; 0x137f2 <_ZL14printHexBufferR5PrintPKhjPKc.constprop.40>
   13940:	66 e1       	ldi	r22, 0x16	; 22
   13942:	71 e1       	ldi	r23, 0x11	; 17
   13944:	ce 01       	movw	r24, r28
   13946:	01 96       	adiw	r24, 0x01	; 1
   13948:	0e 94 4a 19 	call	0x3294	; 0x3294 <_ZN6StringC1EPK19__FlashStringHelper>
   1394c:	ce 01       	movw	r24, r28
   1394e:	01 96       	adiw	r24, 0x01	; 1
   13950:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <_Z5speolRK6String>
   13954:	ce 01       	movw	r24, r28
   13956:	01 96       	adiw	r24, 0x01	; 1
   13958:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   1395c:	8f 81       	ldd	r24, Y+7	; 0x07
   1395e:	8f 5f       	subi	r24, 0xFF	; 255
   13960:	8f 83       	std	Y+7, r24	; 0x07
   13962:	9f cf       	rjmp	.-194    	; 0x138a2 <_ZL12backpackListv+0x40>
   13964:	60 e0       	ldi	r22, 0x00	; 0
   13966:	70 e0       	ldi	r23, 0x00	; 0
   13968:	cb 01       	movw	r24, r22
   1396a:	27 96       	adiw	r28, 0x07	; 7
   1396c:	0f b6       	in	r0, 0x3f	; 63
   1396e:	f8 94       	cli
   13970:	de bf       	out	0x3e, r29	; 62
   13972:	0f be       	out	0x3f, r0	; 63
   13974:	cd bf       	out	0x3d, r28	; 61
   13976:	df 91       	pop	r29
   13978:	cf 91       	pop	r28
   1397a:	1f 91       	pop	r17
   1397c:	0f 91       	pop	r16
   1397e:	08 95       	ret

00013980 <_ZL14backpackEepromv>:
   13980:	cf 92       	push	r12
   13982:	df 92       	push	r13
   13984:	ef 92       	push	r14
   13986:	ff 92       	push	r15
   13988:	0f 93       	push	r16
   1398a:	1f 93       	push	r17
   1398c:	cf 93       	push	r28
   1398e:	df 93       	push	r29
   13990:	00 d0       	rcall	.+0      	; 0x13992 <_ZL14backpackEepromv+0x12>
   13992:	00 d0       	rcall	.+0      	; 0x13994 <_ZL14backpackEepromv+0x14>
   13994:	cd b7       	in	r28, 0x3d	; 61
   13996:	de b7       	in	r29, 0x3e	; 62
   13998:	61 e0       	ldi	r22, 0x01	; 1
   1399a:	70 e0       	ldi	r23, 0x00	; 0
   1399c:	80 e0       	ldi	r24, 0x00	; 0
   1399e:	90 e0       	ldi	r25, 0x00	; 0
   139a0:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   139a4:	97 fd       	sbrc	r25, 7
   139a6:	0a c0       	rjmp	.+20     	; 0x139bc <_ZL14backpackEepromv+0x3c>
   139a8:	00 91 6d 35 	lds	r16, 0x356D
   139ac:	10 e0       	ldi	r17, 0x00	; 0
   139ae:	20 e0       	ldi	r18, 0x00	; 0
   139b0:	30 e0       	ldi	r19, 0x00	; 0
   139b2:	60 17       	cp	r22, r16
   139b4:	71 07       	cpc	r23, r17
   139b6:	82 07       	cpc	r24, r18
   139b8:	93 07       	cpc	r25, r19
   139ba:	1c f0       	brlt	.+6      	; 0x139c2 <_ZL14backpackEepromv+0x42>
   139bc:	6b e5       	ldi	r22, 0x5B	; 91
   139be:	71 e1       	ldi	r23, 0x11	; 17
   139c0:	1c c0       	rjmp	.+56     	; 0x139fa <_ZL14backpackEepromv+0x7a>
   139c2:	42 e1       	ldi	r20, 0x12	; 18
   139c4:	46 9f       	mul	r20, r22
   139c6:	90 01       	movw	r18, r0
   139c8:	47 9f       	mul	r20, r23
   139ca:	30 0d       	add	r19, r0
   139cc:	11 24       	eor	r1, r1
   139ce:	80 91 6b 35 	lds	r24, 0x356B
   139d2:	90 91 6c 35 	lds	r25, 0x356C
   139d6:	60 e0       	ldi	r22, 0x00	; 0
   139d8:	70 e0       	ldi	r23, 0x00	; 0
   139da:	82 0f       	add	r24, r18
   139dc:	93 1f       	adc	r25, r19
   139de:	0e 94 f3 62 	call	0xc5e6	; 0xc5e6 <_ZN12BackpackInfo9getEepromEPj>
   139e2:	7c 01       	movw	r14, r24
   139e4:	00 97       	sbiw	r24, 0x00	; 0
   139e6:	39 f0       	breq	.+14     	; 0x139f6 <_ZL14backpackEepromv+0x76>
   139e8:	00 e0       	ldi	r16, 0x00	; 0
   139ea:	10 e0       	ldi	r17, 0x00	; 0
   139ec:	6c 01       	movw	r12, r24
   139ee:	8f ef       	ldi	r24, 0xFF	; 255
   139f0:	c8 1a       	sub	r12, r24
   139f2:	d8 0a       	sbc	r13, r24
   139f4:	25 c0       	rjmp	.+74     	; 0x13a40 <_ZL14backpackEepromv+0xc0>
   139f6:	64 e4       	ldi	r22, 0x44	; 68
   139f8:	71 e1       	ldi	r23, 0x11	; 17
   139fa:	ce 01       	movw	r24, r28
   139fc:	01 96       	adiw	r24, 0x01	; 1
   139fe:	0e 94 4a 19 	call	0x3294	; 0x3294 <_ZN6StringC1EPK19__FlashStringHelper>
   13a02:	ce 01       	movw	r24, r28
   13a04:	01 96       	adiw	r24, 0x01	; 1
   13a06:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <_Z5speolRK6String>
   13a0a:	ce 01       	movw	r24, r28
   13a0c:	01 96       	adiw	r24, 0x01	; 1
   13a0e:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   13a12:	60 e0       	ldi	r22, 0x00	; 0
   13a14:	70 e0       	ldi	r23, 0x00	; 0
   13a16:	cb 01       	movw	r24, r22
   13a18:	1d c0       	rjmp	.+58     	; 0x13a54 <_ZL14backpackEepromv+0xd4>
   13a1a:	60 1b       	sub	r22, r16
   13a1c:	71 0b       	sbc	r23, r17
   13a1e:	69 30       	cpi	r22, 0x09	; 9
   13a20:	71 05       	cpc	r23, r1
   13a22:	10 f0       	brcs	.+4      	; 0x13a28 <_ZL14backpackEepromv+0xa8>
   13a24:	68 e0       	ldi	r22, 0x08	; 8
   13a26:	70 e0       	ldi	r23, 0x00	; 0
   13a28:	4a e9       	ldi	r20, 0x9A	; 154
   13a2a:	50 e1       	ldi	r21, 0x10	; 16
   13a2c:	c6 01       	movw	r24, r12
   13a2e:	80 0f       	add	r24, r16
   13a30:	91 1f       	adc	r25, r17
   13a32:	df de       	rcall	.-578    	; 0x137f2 <_ZL14printHexBufferR5PrintPKhjPKc.constprop.40>
   13a34:	84 e0       	ldi	r24, 0x04	; 4
   13a36:	94 e2       	ldi	r25, 0x24	; 36
   13a38:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <_ZN5Print7printlnEv>
   13a3c:	08 5f       	subi	r16, 0xF8	; 248
   13a3e:	1f 4f       	sbci	r17, 0xFF	; 255
   13a40:	f7 01       	movw	r30, r14
   13a42:	60 81       	ld	r22, Z
   13a44:	70 e0       	ldi	r23, 0x00	; 0
   13a46:	06 17       	cp	r16, r22
   13a48:	17 07       	cpc	r17, r23
   13a4a:	38 f3       	brcs	.-50     	; 0x13a1a <_ZL14backpackEepromv+0x9a>
   13a4c:	61 e0       	ldi	r22, 0x01	; 1
   13a4e:	70 e0       	ldi	r23, 0x00	; 0
   13a50:	80 e0       	ldi	r24, 0x00	; 0
   13a52:	90 e0       	ldi	r25, 0x00	; 0
   13a54:	26 96       	adiw	r28, 0x06	; 6
   13a56:	0f b6       	in	r0, 0x3f	; 63
   13a58:	f8 94       	cli
   13a5a:	de bf       	out	0x3e, r29	; 62
   13a5c:	0f be       	out	0x3f, r0	; 63
   13a5e:	cd bf       	out	0x3d, r28	; 61
   13a60:	df 91       	pop	r29
   13a62:	cf 91       	pop	r28
   13a64:	1f 91       	pop	r17
   13a66:	0f 91       	pop	r16
   13a68:	ff 90       	pop	r15
   13a6a:	ef 90       	pop	r14
   13a6c:	df 90       	pop	r13
   13a6e:	cf 90       	pop	r12
   13a70:	08 95       	ret

00013a72 <_ZL13getPinFromArgi.constprop.41>:
   13a72:	61 e0       	ldi	r22, 0x01	; 1
   13a74:	70 e0       	ldi	r23, 0x00	; 0
   13a76:	80 e0       	ldi	r24, 0x00	; 0
   13a78:	90 e0       	ldi	r25, 0x00	; 0
   13a7a:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <_Z11isstringargl>
   13a7e:	67 2b       	or	r22, r23
   13a80:	68 2b       	or	r22, r24
   13a82:	69 2b       	or	r22, r25
   13a84:	71 f0       	breq	.+28     	; 0x13aa2 <_ZL13getPinFromArgi.constprop.41+0x30>
   13a86:	61 e0       	ldi	r22, 0x01	; 1
   13a88:	70 e0       	ldi	r23, 0x00	; 0
   13a8a:	80 e0       	ldi	r24, 0x00	; 0
   13a8c:	90 e0       	ldi	r25, 0x00	; 0
   13a8e:	0e 94 8f 24 	call	0x491e	; 0x491e <_Z12getstringargl>
   13a92:	80 ea       	ldi	r24, 0xA0	; 160
   13a94:	95 e3       	ldi	r25, 0x35	; 53
   13a96:	0e 94 78 71 	call	0xe2f0	; 0xe2f0 <_ZN13PinoccioScout14getPinFromNameEPKc>
   13a9a:	99 27       	eor	r25, r25
   13a9c:	87 fd       	sbrc	r24, 7
   13a9e:	90 95       	com	r25
   13aa0:	08 95       	ret
   13aa2:	61 e0       	ldi	r22, 0x01	; 1
   13aa4:	70 e0       	ldi	r23, 0x00	; 0
   13aa6:	80 e0       	ldi	r24, 0x00	; 0
   13aa8:	90 e0       	ldi	r25, 0x00	; 0
   13aaa:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   13aae:	80 ea       	ldi	r24, 0xA0	; 160
   13ab0:	95 e3       	ldi	r25, 0x35	; 53
   13ab2:	0e 94 4d 71 	call	0xe29a	; 0xe29a <_ZN13PinoccioScout12isDigitalPinEh>
   13ab6:	81 11       	cpse	r24, r1
   13ab8:	0f c0       	rjmp	.+30     	; 0x13ad8 <_ZL13getPinFromArgi.constprop.41+0x66>
   13aba:	61 e0       	ldi	r22, 0x01	; 1
   13abc:	70 e0       	ldi	r23, 0x00	; 0
   13abe:	80 e0       	ldi	r24, 0x00	; 0
   13ac0:	90 e0       	ldi	r25, 0x00	; 0
   13ac2:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   13ac6:	80 ea       	ldi	r24, 0xA0	; 160
   13ac8:	95 e3       	ldi	r25, 0x35	; 53
   13aca:	0e 94 53 71 	call	0xe2a6	; 0xe2a6 <_ZN13PinoccioScout11isAnalogPinEh>
   13ace:	81 11       	cpse	r24, r1
   13ad0:	03 c0       	rjmp	.+6      	; 0x13ad8 <_ZL13getPinFromArgi.constprop.41+0x66>
   13ad2:	8f ef       	ldi	r24, 0xFF	; 255
   13ad4:	9f ef       	ldi	r25, 0xFF	; 255
   13ad6:	08 95       	ret
   13ad8:	61 e0       	ldi	r22, 0x01	; 1
   13ada:	70 e0       	ldi	r23, 0x00	; 0
   13adc:	80 e0       	ldi	r24, 0x00	; 0
   13ade:	90 e0       	ldi	r25, 0x00	; 0
   13ae0:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   13ae4:	cb 01       	movw	r24, r22
   13ae6:	08 95       	ret

00013ae8 <_ZL12pinMakeInputv>:
   13ae8:	1f 93       	push	r17
   13aea:	cf 93       	push	r28
   13aec:	df 93       	push	r29
   13aee:	cd b7       	in	r28, 0x3d	; 61
   13af0:	de b7       	in	r29, 0x3e	; 62
   13af2:	28 97       	sbiw	r28, 0x08	; 8
   13af4:	0f b6       	in	r0, 0x3f	; 63
   13af6:	f8 94       	cli
   13af8:	de bf       	out	0x3e, r29	; 62
   13afa:	0f be       	out	0x3f, r0	; 63
   13afc:	cd bf       	out	0x3d, r28	; 61
   13afe:	b9 df       	rcall	.-142    	; 0x13a72 <_ZL13getPinFromArgi.constprop.41>
   13b00:	18 2f       	mov	r17, r24
   13b02:	8f 3f       	cpi	r24, 0xFF	; 255
   13b04:	19 f4       	brne	.+6      	; 0x13b0c <_ZL12pinMakeInputv+0x24>
   13b06:	62 ee       	ldi	r22, 0xE2	; 226
   13b08:	7f e0       	ldi	r23, 0x0F	; 15
   13b0a:	1f c0       	rjmp	.+62     	; 0x13b4a <_ZL12pinMakeInputv+0x62>
   13b0c:	60 e0       	ldi	r22, 0x00	; 0
   13b0e:	70 e0       	ldi	r23, 0x00	; 0
   13b10:	cb 01       	movw	r24, r22
   13b12:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   13b16:	62 30       	cpi	r22, 0x02	; 2
   13b18:	71 05       	cpc	r23, r1
   13b1a:	81 05       	cpc	r24, r1
   13b1c:	91 05       	cpc	r25, r1
   13b1e:	09 f0       	breq	.+2      	; 0x13b22 <_ZL12pinMakeInputv+0x3a>
   13b20:	47 c0       	rjmp	.+142    	; 0x13bb0 <_ZL12pinMakeInputv+0xc8>
   13b22:	62 e0       	ldi	r22, 0x02	; 2
   13b24:	70 e0       	ldi	r23, 0x00	; 0
   13b26:	80 e0       	ldi	r24, 0x00	; 0
   13b28:	90 e0       	ldi	r25, 0x00	; 0
   13b2a:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   13b2e:	67 2b       	or	r22, r23
   13b30:	68 2b       	or	r22, r24
   13b32:	69 2b       	or	r22, r25
   13b34:	e9 f5       	brne	.+122    	; 0x13bb0 <_ZL12pinMakeInputv+0xc8>
   13b36:	40 e0       	ldi	r20, 0x00	; 0
   13b38:	61 2f       	mov	r22, r17
   13b3a:	80 ea       	ldi	r24, 0xA0	; 160
   13b3c:	95 e3       	ldi	r25, 0x35	; 53
   13b3e:	0e 94 49 73 	call	0xe692	; 0xe692 <_ZN13PinoccioScout9makeInputEhb>
   13b42:	81 11       	cpse	r24, r1
   13b44:	12 c0       	rjmp	.+36     	; 0x13b6a <_ZL12pinMakeInputv+0x82>
   13b46:	6f eb       	ldi	r22, 0xBF	; 191
   13b48:	7f e0       	ldi	r23, 0x0F	; 15
   13b4a:	ce 01       	movw	r24, r28
   13b4c:	01 96       	adiw	r24, 0x01	; 1
   13b4e:	0e 94 4a 19 	call	0x3294	; 0x3294 <_ZN6StringC1EPK19__FlashStringHelper>
   13b52:	ce 01       	movw	r24, r28
   13b54:	01 96       	adiw	r24, 0x01	; 1
   13b56:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <_Z5speolRK6String>
   13b5a:	ce 01       	movw	r24, r28
   13b5c:	01 96       	adiw	r24, 0x01	; 1
   13b5e:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   13b62:	60 e0       	ldi	r22, 0x00	; 0
   13b64:	70 e0       	ldi	r23, 0x00	; 0
   13b66:	cb 01       	movw	r24, r22
   13b68:	25 c0       	rjmp	.+74     	; 0x13bb4 <_ZL12pinMakeInputv+0xcc>
   13b6a:	61 2f       	mov	r22, r17
   13b6c:	80 ea       	ldi	r24, 0xA0	; 160
   13b6e:	95 e3       	ldi	r25, 0x35	; 53
   13b70:	0e 94 4d 71 	call	0xe29a	; 0xe29a <_ZN13PinoccioScout12isDigitalPinEh>
   13b74:	88 23       	and	r24, r24
   13b76:	41 f0       	breq	.+16     	; 0x13b88 <_ZL12pinMakeInputv+0xa0>
   13b78:	ce 01       	movw	r24, r28
   13b7a:	01 96       	adiw	r24, 0x01	; 1
   13b7c:	0e 94 b9 85 	call	0x10b72	; 0x10b72 <_ZL18digitalPinReportHQv>
   13b80:	ce 01       	movw	r24, r28
   13b82:	01 96       	adiw	r24, 0x01	; 1
   13b84:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   13b88:	61 2f       	mov	r22, r17
   13b8a:	80 ea       	ldi	r24, 0xA0	; 160
   13b8c:	95 e3       	ldi	r25, 0x35	; 53
   13b8e:	0e 94 53 71 	call	0xe2a6	; 0xe2a6 <_ZN13PinoccioScout11isAnalogPinEh>
   13b92:	88 23       	and	r24, r24
   13b94:	41 f0       	breq	.+16     	; 0x13ba6 <_ZL12pinMakeInputv+0xbe>
   13b96:	ce 01       	movw	r24, r28
   13b98:	01 96       	adiw	r24, 0x01	; 1
   13b9a:	0e 94 a7 83 	call	0x1074e	; 0x1074e <_ZL17analogPinReportHQv>
   13b9e:	ce 01       	movw	r24, r28
   13ba0:	01 96       	adiw	r24, 0x01	; 1
   13ba2:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   13ba6:	61 e0       	ldi	r22, 0x01	; 1
   13ba8:	70 e0       	ldi	r23, 0x00	; 0
   13baa:	80 e0       	ldi	r24, 0x00	; 0
   13bac:	90 e0       	ldi	r25, 0x00	; 0
   13bae:	02 c0       	rjmp	.+4      	; 0x13bb4 <_ZL12pinMakeInputv+0xcc>
   13bb0:	41 e0       	ldi	r20, 0x01	; 1
   13bb2:	c2 cf       	rjmp	.-124    	; 0x13b38 <_ZL12pinMakeInputv+0x50>
   13bb4:	28 96       	adiw	r28, 0x08	; 8
   13bb6:	0f b6       	in	r0, 0x3f	; 63
   13bb8:	f8 94       	cli
   13bba:	de bf       	out	0x3e, r29	; 62
   13bbc:	0f be       	out	0x3f, r0	; 63
   13bbe:	cd bf       	out	0x3d, r28	; 61
   13bc0:	df 91       	pop	r29
   13bc2:	cf 91       	pop	r28
   13bc4:	1f 91       	pop	r17
   13bc6:	08 95       	ret

00013bc8 <_ZL13pinMakeOutputv>:
   13bc8:	1f 93       	push	r17
   13bca:	cf 93       	push	r28
   13bcc:	df 93       	push	r29
   13bce:	cd b7       	in	r28, 0x3d	; 61
   13bd0:	de b7       	in	r29, 0x3e	; 62
   13bd2:	28 97       	sbiw	r28, 0x08	; 8
   13bd4:	0f b6       	in	r0, 0x3f	; 63
   13bd6:	f8 94       	cli
   13bd8:	de bf       	out	0x3e, r29	; 62
   13bda:	0f be       	out	0x3f, r0	; 63
   13bdc:	cd bf       	out	0x3d, r28	; 61
   13bde:	49 df       	rcall	.-366    	; 0x13a72 <_ZL13getPinFromArgi.constprop.41>
   13be0:	18 2f       	mov	r17, r24
   13be2:	8f 3f       	cpi	r24, 0xFF	; 255
   13be4:	19 f4       	brne	.+6      	; 0x13bec <_ZL13pinMakeOutputv+0x24>
   13be6:	68 e1       	ldi	r22, 0x18	; 24
   13be8:	70 e1       	ldi	r23, 0x10	; 16
   13bea:	09 c0       	rjmp	.+18     	; 0x13bfe <_ZL13pinMakeOutputv+0x36>
   13bec:	68 2f       	mov	r22, r24
   13bee:	80 ea       	ldi	r24, 0xA0	; 160
   13bf0:	95 e3       	ldi	r25, 0x35	; 53
   13bf2:	0e 94 9f 73 	call	0xe73e	; 0xe73e <_ZN13PinoccioScout10makeOutputEh>
   13bf6:	81 11       	cpse	r24, r1
   13bf8:	12 c0       	rjmp	.+36     	; 0x13c1e <_ZL13pinMakeOutputv+0x56>
   13bfa:	65 ef       	ldi	r22, 0xF5	; 245
   13bfc:	7f e0       	ldi	r23, 0x0F	; 15
   13bfe:	ce 01       	movw	r24, r28
   13c00:	01 96       	adiw	r24, 0x01	; 1
   13c02:	0e 94 4a 19 	call	0x3294	; 0x3294 <_ZN6StringC1EPK19__FlashStringHelper>
   13c06:	ce 01       	movw	r24, r28
   13c08:	01 96       	adiw	r24, 0x01	; 1
   13c0a:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <_Z5speolRK6String>
   13c0e:	ce 01       	movw	r24, r28
   13c10:	01 96       	adiw	r24, 0x01	; 1
   13c12:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   13c16:	60 e0       	ldi	r22, 0x00	; 0
   13c18:	70 e0       	ldi	r23, 0x00	; 0
   13c1a:	cb 01       	movw	r24, r22
   13c1c:	22 c0       	rjmp	.+68     	; 0x13c62 <_ZL13pinMakeOutputv+0x9a>
   13c1e:	61 2f       	mov	r22, r17
   13c20:	80 ea       	ldi	r24, 0xA0	; 160
   13c22:	95 e3       	ldi	r25, 0x35	; 53
   13c24:	0e 94 4d 71 	call	0xe29a	; 0xe29a <_ZN13PinoccioScout12isDigitalPinEh>
   13c28:	88 23       	and	r24, r24
   13c2a:	41 f0       	breq	.+16     	; 0x13c3c <_ZL13pinMakeOutputv+0x74>
   13c2c:	ce 01       	movw	r24, r28
   13c2e:	01 96       	adiw	r24, 0x01	; 1
   13c30:	0e 94 b9 85 	call	0x10b72	; 0x10b72 <_ZL18digitalPinReportHQv>
   13c34:	ce 01       	movw	r24, r28
   13c36:	01 96       	adiw	r24, 0x01	; 1
   13c38:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   13c3c:	61 2f       	mov	r22, r17
   13c3e:	80 ea       	ldi	r24, 0xA0	; 160
   13c40:	95 e3       	ldi	r25, 0x35	; 53
   13c42:	0e 94 53 71 	call	0xe2a6	; 0xe2a6 <_ZN13PinoccioScout11isAnalogPinEh>
   13c46:	88 23       	and	r24, r24
   13c48:	41 f0       	breq	.+16     	; 0x13c5a <_ZL13pinMakeOutputv+0x92>
   13c4a:	ce 01       	movw	r24, r28
   13c4c:	01 96       	adiw	r24, 0x01	; 1
   13c4e:	0e 94 a7 83 	call	0x1074e	; 0x1074e <_ZL17analogPinReportHQv>
   13c52:	ce 01       	movw	r24, r28
   13c54:	01 96       	adiw	r24, 0x01	; 1
   13c56:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   13c5a:	61 e0       	ldi	r22, 0x01	; 1
   13c5c:	70 e0       	ldi	r23, 0x00	; 0
   13c5e:	80 e0       	ldi	r24, 0x00	; 0
   13c60:	90 e0       	ldi	r25, 0x00	; 0
   13c62:	28 96       	adiw	r28, 0x08	; 8
   13c64:	0f b6       	in	r0, 0x3f	; 63
   13c66:	f8 94       	cli
   13c68:	de bf       	out	0x3e, r29	; 62
   13c6a:	0f be       	out	0x3f, r0	; 63
   13c6c:	cd bf       	out	0x3d, r28	; 61
   13c6e:	df 91       	pop	r29
   13c70:	cf 91       	pop	r28
   13c72:	1f 91       	pop	r17
   13c74:	08 95       	ret

00013c76 <_ZL10pinDisablev>:
   13c76:	1f 93       	push	r17
   13c78:	cf 93       	push	r28
   13c7a:	df 93       	push	r29
   13c7c:	cd b7       	in	r28, 0x3d	; 61
   13c7e:	de b7       	in	r29, 0x3e	; 62
   13c80:	28 97       	sbiw	r28, 0x08	; 8
   13c82:	0f b6       	in	r0, 0x3f	; 63
   13c84:	f8 94       	cli
   13c86:	de bf       	out	0x3e, r29	; 62
   13c88:	0f be       	out	0x3f, r0	; 63
   13c8a:	cd bf       	out	0x3d, r28	; 61
   13c8c:	f2 de       	rcall	.-540    	; 0x13a72 <_ZL13getPinFromArgi.constprop.41>
   13c8e:	18 2f       	mov	r17, r24
   13c90:	8f 3f       	cpi	r24, 0xFF	; 255
   13c92:	19 f4       	brne	.+6      	; 0x13c9a <_ZL10pinDisablev+0x24>
   13c94:	6e e4       	ldi	r22, 0x4E	; 78
   13c96:	70 e1       	ldi	r23, 0x10	; 16
   13c98:	09 c0       	rjmp	.+18     	; 0x13cac <_ZL10pinDisablev+0x36>
   13c9a:	68 2f       	mov	r22, r24
   13c9c:	80 ea       	ldi	r24, 0xA0	; 160
   13c9e:	95 e3       	ldi	r25, 0x35	; 53
   13ca0:	0e 94 de 73 	call	0xe7bc	; 0xe7bc <_ZN13PinoccioScout12makeDisabledEh>
   13ca4:	81 11       	cpse	r24, r1
   13ca6:	12 c0       	rjmp	.+36     	; 0x13ccc <_ZL10pinDisablev+0x56>
   13ca8:	6b e2       	ldi	r22, 0x2B	; 43
   13caa:	70 e1       	ldi	r23, 0x10	; 16
   13cac:	ce 01       	movw	r24, r28
   13cae:	01 96       	adiw	r24, 0x01	; 1
   13cb0:	0e 94 4a 19 	call	0x3294	; 0x3294 <_ZN6StringC1EPK19__FlashStringHelper>
   13cb4:	ce 01       	movw	r24, r28
   13cb6:	01 96       	adiw	r24, 0x01	; 1
   13cb8:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <_Z5speolRK6String>
   13cbc:	ce 01       	movw	r24, r28
   13cbe:	01 96       	adiw	r24, 0x01	; 1
   13cc0:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   13cc4:	60 e0       	ldi	r22, 0x00	; 0
   13cc6:	70 e0       	ldi	r23, 0x00	; 0
   13cc8:	cb 01       	movw	r24, r22
   13cca:	22 c0       	rjmp	.+68     	; 0x13d10 <_ZL10pinDisablev+0x9a>
   13ccc:	61 2f       	mov	r22, r17
   13cce:	80 ea       	ldi	r24, 0xA0	; 160
   13cd0:	95 e3       	ldi	r25, 0x35	; 53
   13cd2:	0e 94 4d 71 	call	0xe29a	; 0xe29a <_ZN13PinoccioScout12isDigitalPinEh>
   13cd6:	88 23       	and	r24, r24
   13cd8:	41 f0       	breq	.+16     	; 0x13cea <_ZL10pinDisablev+0x74>
   13cda:	ce 01       	movw	r24, r28
   13cdc:	01 96       	adiw	r24, 0x01	; 1
   13cde:	0e 94 b9 85 	call	0x10b72	; 0x10b72 <_ZL18digitalPinReportHQv>
   13ce2:	ce 01       	movw	r24, r28
   13ce4:	01 96       	adiw	r24, 0x01	; 1
   13ce6:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   13cea:	61 2f       	mov	r22, r17
   13cec:	80 ea       	ldi	r24, 0xA0	; 160
   13cee:	95 e3       	ldi	r25, 0x35	; 53
   13cf0:	0e 94 53 71 	call	0xe2a6	; 0xe2a6 <_ZN13PinoccioScout11isAnalogPinEh>
   13cf4:	88 23       	and	r24, r24
   13cf6:	41 f0       	breq	.+16     	; 0x13d08 <_ZL10pinDisablev+0x92>
   13cf8:	ce 01       	movw	r24, r28
   13cfa:	01 96       	adiw	r24, 0x01	; 1
   13cfc:	0e 94 a7 83 	call	0x1074e	; 0x1074e <_ZL17analogPinReportHQv>
   13d00:	ce 01       	movw	r24, r28
   13d02:	01 96       	adiw	r24, 0x01	; 1
   13d04:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   13d08:	61 e0       	ldi	r22, 0x01	; 1
   13d0a:	70 e0       	ldi	r23, 0x00	; 0
   13d0c:	80 e0       	ldi	r24, 0x00	; 0
   13d0e:	90 e0       	ldi	r25, 0x00	; 0
   13d10:	28 96       	adiw	r28, 0x08	; 8
   13d12:	0f b6       	in	r0, 0x3f	; 63
   13d14:	f8 94       	cli
   13d16:	de bf       	out	0x3e, r29	; 62
   13d18:	0f be       	out	0x3f, r0	; 63
   13d1a:	cd bf       	out	0x3d, r28	; 61
   13d1c:	df 91       	pop	r29
   13d1e:	cf 91       	pop	r28
   13d20:	1f 91       	pop	r17
   13d22:	08 95       	ret

00013d24 <_ZL10pinSetModev>:
   13d24:	1f 93       	push	r17
   13d26:	cf 93       	push	r28
   13d28:	df 93       	push	r29
   13d2a:	cd b7       	in	r28, 0x3d	; 61
   13d2c:	de b7       	in	r29, 0x3e	; 62
   13d2e:	28 97       	sbiw	r28, 0x08	; 8
   13d30:	0f b6       	in	r0, 0x3f	; 63
   13d32:	f8 94       	cli
   13d34:	de bf       	out	0x3e, r29	; 62
   13d36:	0f be       	out	0x3f, r0	; 63
   13d38:	cd bf       	out	0x3d, r28	; 61
   13d3a:	9b de       	rcall	.-714    	; 0x13a72 <_ZL13getPinFromArgi.constprop.41>
   13d3c:	18 2f       	mov	r17, r24
   13d3e:	8f 3f       	cpi	r24, 0xFF	; 255
   13d40:	19 f4       	brne	.+6      	; 0x13d48 <_ZL10pinSetModev+0x24>
   13d42:	64 e8       	ldi	r22, 0x84	; 132
   13d44:	70 e1       	ldi	r23, 0x10	; 16
   13d46:	10 c0       	rjmp	.+32     	; 0x13d68 <_ZL10pinSetModev+0x44>
   13d48:	62 e0       	ldi	r22, 0x02	; 2
   13d4a:	70 e0       	ldi	r23, 0x00	; 0
   13d4c:	80 e0       	ldi	r24, 0x00	; 0
   13d4e:	90 e0       	ldi	r25, 0x00	; 0
   13d50:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   13d54:	46 2f       	mov	r20, r22
   13d56:	61 2f       	mov	r22, r17
   13d58:	80 ea       	ldi	r24, 0xA0	; 160
   13d5a:	95 e3       	ldi	r25, 0x35	; 53
   13d5c:	0e 94 e5 74 	call	0xe9ca	; 0xe9ca <_ZN13PinoccioScout7setModeEhh>
   13d60:	81 11       	cpse	r24, r1
   13d62:	12 c0       	rjmp	.+36     	; 0x13d88 <_ZL10pinSetModev+0x64>
   13d64:	61 e6       	ldi	r22, 0x61	; 97
   13d66:	70 e1       	ldi	r23, 0x10	; 16
   13d68:	ce 01       	movw	r24, r28
   13d6a:	01 96       	adiw	r24, 0x01	; 1
   13d6c:	0e 94 4a 19 	call	0x3294	; 0x3294 <_ZN6StringC1EPK19__FlashStringHelper>
   13d70:	ce 01       	movw	r24, r28
   13d72:	01 96       	adiw	r24, 0x01	; 1
   13d74:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <_Z5speolRK6String>
   13d78:	ce 01       	movw	r24, r28
   13d7a:	01 96       	adiw	r24, 0x01	; 1
   13d7c:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   13d80:	60 e0       	ldi	r22, 0x00	; 0
   13d82:	70 e0       	ldi	r23, 0x00	; 0
   13d84:	cb 01       	movw	r24, r22
   13d86:	22 c0       	rjmp	.+68     	; 0x13dcc <_ZL10pinSetModev+0xa8>
   13d88:	61 2f       	mov	r22, r17
   13d8a:	80 ea       	ldi	r24, 0xA0	; 160
   13d8c:	95 e3       	ldi	r25, 0x35	; 53
   13d8e:	0e 94 4d 71 	call	0xe29a	; 0xe29a <_ZN13PinoccioScout12isDigitalPinEh>
   13d92:	88 23       	and	r24, r24
   13d94:	41 f0       	breq	.+16     	; 0x13da6 <_ZL10pinSetModev+0x82>
   13d96:	ce 01       	movw	r24, r28
   13d98:	01 96       	adiw	r24, 0x01	; 1
   13d9a:	0e 94 b9 85 	call	0x10b72	; 0x10b72 <_ZL18digitalPinReportHQv>
   13d9e:	ce 01       	movw	r24, r28
   13da0:	01 96       	adiw	r24, 0x01	; 1
   13da2:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   13da6:	61 2f       	mov	r22, r17
   13da8:	80 ea       	ldi	r24, 0xA0	; 160
   13daa:	95 e3       	ldi	r25, 0x35	; 53
   13dac:	0e 94 53 71 	call	0xe2a6	; 0xe2a6 <_ZN13PinoccioScout11isAnalogPinEh>
   13db0:	88 23       	and	r24, r24
   13db2:	41 f0       	breq	.+16     	; 0x13dc4 <_ZL10pinSetModev+0xa0>
   13db4:	ce 01       	movw	r24, r28
   13db6:	01 96       	adiw	r24, 0x01	; 1
   13db8:	0e 94 a7 83 	call	0x1074e	; 0x1074e <_ZL17analogPinReportHQv>
   13dbc:	ce 01       	movw	r24, r28
   13dbe:	01 96       	adiw	r24, 0x01	; 1
   13dc0:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   13dc4:	61 e0       	ldi	r22, 0x01	; 1
   13dc6:	70 e0       	ldi	r23, 0x00	; 0
   13dc8:	80 e0       	ldi	r24, 0x00	; 0
   13dca:	90 e0       	ldi	r25, 0x00	; 0
   13dcc:	28 96       	adiw	r28, 0x08	; 8
   13dce:	0f b6       	in	r0, 0x3f	; 63
   13dd0:	f8 94       	cli
   13dd2:	de bf       	out	0x3e, r29	; 62
   13dd4:	0f be       	out	0x3f, r0	; 63
   13dd6:	cd bf       	out	0x3d, r28	; 61
   13dd8:	df 91       	pop	r29
   13dda:	cf 91       	pop	r28
   13ddc:	1f 91       	pop	r17
   13dde:	08 95       	ret

00013de0 <_ZL8pinWritev>:
   13de0:	0f 93       	push	r16
   13de2:	1f 93       	push	r17
   13de4:	cf 93       	push	r28
   13de6:	df 93       	push	r29
   13de8:	cd b7       	in	r28, 0x3d	; 61
   13dea:	de b7       	in	r29, 0x3e	; 62
   13dec:	28 97       	sbiw	r28, 0x08	; 8
   13dee:	0f b6       	in	r0, 0x3f	; 63
   13df0:	f8 94       	cli
   13df2:	de bf       	out	0x3e, r29	; 62
   13df4:	0f be       	out	0x3f, r0	; 63
   13df6:	cd bf       	out	0x3d, r28	; 61
   13df8:	3c de       	rcall	.-904    	; 0x13a72 <_ZL13getPinFromArgi.constprop.41>
   13dfa:	18 2f       	mov	r17, r24
   13dfc:	62 e0       	ldi	r22, 0x02	; 2
   13dfe:	70 e0       	ldi	r23, 0x00	; 0
   13e00:	80 e0       	ldi	r24, 0x00	; 0
   13e02:	90 e0       	ldi	r25, 0x00	; 0
   13e04:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   13e08:	06 2f       	mov	r16, r22
   13e0a:	1f 3f       	cpi	r17, 0xFF	; 255
   13e0c:	19 f4       	brne	.+6      	; 0x13e14 <_ZL8pinWritev+0x34>
   13e0e:	6c eb       	ldi	r22, 0xBC	; 188
   13e10:	70 e1       	ldi	r23, 0x10	; 16
   13e12:	04 c0       	rjmp	.+8      	; 0x13e1c <_ZL8pinWritev+0x3c>
   13e14:	62 30       	cpi	r22, 0x02	; 2
   13e16:	90 f0       	brcs	.+36     	; 0x13e3c <_ZL8pinWritev+0x5c>
   13e18:	6a ea       	ldi	r22, 0xAA	; 170
   13e1a:	70 e1       	ldi	r23, 0x10	; 16
   13e1c:	ce 01       	movw	r24, r28
   13e1e:	01 96       	adiw	r24, 0x01	; 1
   13e20:	0e 94 4a 19 	call	0x3294	; 0x3294 <_ZN6StringC1EPK19__FlashStringHelper>
   13e24:	ce 01       	movw	r24, r28
   13e26:	01 96       	adiw	r24, 0x01	; 1
   13e28:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <_Z5speolRK6String>
   13e2c:	ce 01       	movw	r24, r28
   13e2e:	01 96       	adiw	r24, 0x01	; 1
   13e30:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   13e34:	60 e0       	ldi	r22, 0x00	; 0
   13e36:	70 e0       	ldi	r23, 0x00	; 0
   13e38:	cb 01       	movw	r24, r22
   13e3a:	2e c0       	rjmp	.+92     	; 0x13e98 <_ZL8pinWritev+0xb8>
   13e3c:	61 2f       	mov	r22, r17
   13e3e:	80 ea       	ldi	r24, 0xA0	; 160
   13e40:	95 e3       	ldi	r25, 0x35	; 53
   13e42:	0e 94 4d 71 	call	0xe29a	; 0xe29a <_ZN13PinoccioScout12isDigitalPinEh>
   13e46:	88 23       	and	r24, r24
   13e48:	71 f0       	breq	.+28     	; 0x13e66 <_ZL8pinWritev+0x86>
   13e4a:	40 2f       	mov	r20, r16
   13e4c:	61 2f       	mov	r22, r17
   13e4e:	80 ea       	ldi	r24, 0xA0	; 160
   13e50:	95 e3       	ldi	r25, 0x35	; 53
   13e52:	0e 94 25 75 	call	0xea4a	; 0xea4a <_ZN13PinoccioScout8pinWriteEhh>
   13e56:	ce 01       	movw	r24, r28
   13e58:	01 96       	adiw	r24, 0x01	; 1
   13e5a:	0e 94 b9 85 	call	0x10b72	; 0x10b72 <_ZL18digitalPinReportHQv>
   13e5e:	ce 01       	movw	r24, r28
   13e60:	01 96       	adiw	r24, 0x01	; 1
   13e62:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   13e66:	61 2f       	mov	r22, r17
   13e68:	80 ea       	ldi	r24, 0xA0	; 160
   13e6a:	95 e3       	ldi	r25, 0x35	; 53
   13e6c:	0e 94 53 71 	call	0xe2a6	; 0xe2a6 <_ZN13PinoccioScout11isAnalogPinEh>
   13e70:	88 23       	and	r24, r24
   13e72:	71 f0       	breq	.+28     	; 0x13e90 <_ZL8pinWritev+0xb0>
   13e74:	40 2f       	mov	r20, r16
   13e76:	61 2f       	mov	r22, r17
   13e78:	80 ea       	ldi	r24, 0xA0	; 160
   13e7a:	95 e3       	ldi	r25, 0x35	; 53
   13e7c:	0e 94 25 75 	call	0xea4a	; 0xea4a <_ZN13PinoccioScout8pinWriteEhh>
   13e80:	ce 01       	movw	r24, r28
   13e82:	01 96       	adiw	r24, 0x01	; 1
   13e84:	0e 94 a7 83 	call	0x1074e	; 0x1074e <_ZL17analogPinReportHQv>
   13e88:	ce 01       	movw	r24, r28
   13e8a:	01 96       	adiw	r24, 0x01	; 1
   13e8c:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   13e90:	61 e0       	ldi	r22, 0x01	; 1
   13e92:	70 e0       	ldi	r23, 0x00	; 0
   13e94:	80 e0       	ldi	r24, 0x00	; 0
   13e96:	90 e0       	ldi	r25, 0x00	; 0
   13e98:	28 96       	adiw	r28, 0x08	; 8
   13e9a:	0f b6       	in	r0, 0x3f	; 63
   13e9c:	f8 94       	cli
   13e9e:	de bf       	out	0x3e, r29	; 62
   13ea0:	0f be       	out	0x3f, r0	; 63
   13ea2:	cd bf       	out	0x3d, r28	; 61
   13ea4:	df 91       	pop	r29
   13ea6:	cf 91       	pop	r28
   13ea8:	1f 91       	pop	r17
   13eaa:	0f 91       	pop	r16
   13eac:	08 95       	ret

00013eae <_ZL7pinSavev>:
   13eae:	bf 92       	push	r11
   13eb0:	cf 92       	push	r12
   13eb2:	df 92       	push	r13
   13eb4:	ef 92       	push	r14
   13eb6:	ff 92       	push	r15
   13eb8:	0f 93       	push	r16
   13eba:	1f 93       	push	r17
   13ebc:	cf 93       	push	r28
   13ebe:	df 93       	push	r29
   13ec0:	cd b7       	in	r28, 0x3d	; 61
   13ec2:	de b7       	in	r29, 0x3e	; 62
   13ec4:	c8 58       	subi	r28, 0x88	; 136
   13ec6:	d1 09       	sbc	r29, r1
   13ec8:	0f b6       	in	r0, 0x3f	; 63
   13eca:	f8 94       	cli
   13ecc:	de bf       	out	0x3e, r29	; 62
   13ece:	0f be       	out	0x3f, r0	; 63
   13ed0:	cd bf       	out	0x3d, r28	; 61
   13ed2:	cf dd       	rcall	.-1122   	; 0x13a72 <_ZL13getPinFromArgi.constprop.41>
   13ed4:	f8 2e       	mov	r15, r24
   13ed6:	62 e0       	ldi	r22, 0x02	; 2
   13ed8:	70 e0       	ldi	r23, 0x00	; 0
   13eda:	80 e0       	ldi	r24, 0x00	; 0
   13edc:	90 e0       	ldi	r25, 0x00	; 0
   13ede:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   13ee2:	e6 2e       	mov	r14, r22
   13ee4:	8e 01       	movw	r16, r28
   13ee6:	0f 5f       	subi	r16, 0xFF	; 255
   13ee8:	1f 4f       	sbci	r17, 0xFF	; 255
   13eea:	8f ef       	ldi	r24, 0xFF	; 255
   13eec:	f8 12       	cpse	r15, r24
   13eee:	03 c0       	rjmp	.+6      	; 0x13ef6 <_ZL7pinSavev+0x48>
   13ef0:	63 e0       	ldi	r22, 0x03	; 3
   13ef2:	71 e1       	ldi	r23, 0x11	; 17
   13ef4:	10 c0       	rjmp	.+32     	; 0x13f16 <_ZL7pinSavev+0x68>
   13ef6:	6f 2d       	mov	r22, r15
   13ef8:	80 ea       	ldi	r24, 0xA0	; 160
   13efa:	95 e3       	ldi	r25, 0x35	; 53
   13efc:	0e 94 93 71 	call	0xe326	; 0xe326 <_ZN13PinoccioScout13isPinReservedEh>
   13f00:	88 23       	and	r24, r24
   13f02:	19 f0       	breq	.+6      	; 0x13f0a <_ZL7pinSavev+0x5c>
   13f04:	60 ee       	ldi	r22, 0xE0	; 224
   13f06:	70 e1       	ldi	r23, 0x10	; 16
   13f08:	06 c0       	rjmp	.+12     	; 0x13f16 <_ZL7pinSavev+0x68>
   13f0a:	81 e0       	ldi	r24, 0x01	; 1
   13f0c:	8e 0d       	add	r24, r14
   13f0e:	84 30       	cpi	r24, 0x04	; 4
   13f10:	78 f0       	brcs	.+30     	; 0x13f30 <_ZL7pinSavev+0x82>
   13f12:	6f ec       	ldi	r22, 0xCF	; 207
   13f14:	70 e1       	ldi	r23, 0x10	; 16
   13f16:	c8 01       	movw	r24, r16
   13f18:	0e 94 4a 19 	call	0x3294	; 0x3294 <_ZN6StringC1EPK19__FlashStringHelper>
   13f1c:	c8 01       	movw	r24, r16
   13f1e:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <_Z5speolRK6String>
   13f22:	c8 01       	movw	r24, r16
   13f24:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   13f28:	60 e0       	ldi	r22, 0x00	; 0
   13f2a:	70 e0       	ldi	r23, 0x00	; 0
   13f2c:	cb 01       	movw	r24, r22
   13f2e:	96 c0       	rjmp	.+300    	; 0x1405c <_ZL7pinSavev+0x1ae>
   13f30:	4e 2d       	mov	r20, r14
   13f32:	6f 2d       	mov	r22, r15
   13f34:	80 ea       	ldi	r24, 0xA0	; 160
   13f36:	95 e3       	ldi	r25, 0x35	; 53
   13f38:	0e 94 e5 74 	call	0xe9ca	; 0xe9ca <_ZN13PinoccioScout7setModeEhh>
   13f3c:	61 e0       	ldi	r22, 0x01	; 1
   13f3e:	70 e0       	ldi	r23, 0x00	; 0
   13f40:	80 e0       	ldi	r24, 0x00	; 0
   13f42:	90 e0       	ldi	r25, 0x00	; 0
   13f44:	0e 94 8f 24 	call	0x491e	; 0x491e <_Z12getstringargl>
   13f48:	d6 2e       	mov	r13, r22
   13f4a:	c7 2e       	mov	r12, r23
   13f4c:	9f ef       	ldi	r25, 0xFF	; 255
   13f4e:	e9 12       	cpse	r14, r25
   13f50:	0e c0       	rjmp	.+28     	; 0x13f6e <_ZL7pinSavev+0xc0>
   13f52:	cf 92       	push	r12
   13f54:	df 92       	push	r13
   13f56:	27 e1       	ldi	r18, 0x17	; 23
   13f58:	3e e1       	ldi	r19, 0x1E	; 30
   13f5a:	3f 93       	push	r19
   13f5c:	2f 93       	push	r18
   13f5e:	1f 92       	push	r1
   13f60:	80 e8       	ldi	r24, 0x80	; 128
   13f62:	8f 93       	push	r24
   13f64:	1f 93       	push	r17
   13f66:	0f 93       	push	r16
   13f68:	0e 94 1d b6 	call	0x16c3a	; 0x16c3a <snprintf>
   13f6c:	49 c0       	rjmp	.+146    	; 0x14000 <_ZL7pinSavev+0x152>
   13f6e:	60 e0       	ldi	r22, 0x00	; 0
   13f70:	70 e0       	ldi	r23, 0x00	; 0
   13f72:	cb 01       	movw	r24, r22
   13f74:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   13f78:	63 30       	cpi	r22, 0x03	; 3
   13f7a:	71 05       	cpc	r23, r1
   13f7c:	81 05       	cpc	r24, r1
   13f7e:	91 05       	cpc	r25, r1
   13f80:	51 f5       	brne	.+84     	; 0x13fd6 <_ZL7pinSavev+0x128>
   13f82:	91 e0       	ldi	r25, 0x01	; 1
   13f84:	e9 12       	cpse	r14, r25
   13f86:	27 c0       	rjmp	.+78     	; 0x13fd6 <_ZL7pinSavev+0x128>
   13f88:	63 e0       	ldi	r22, 0x03	; 3
   13f8a:	70 e0       	ldi	r23, 0x00	; 0
   13f8c:	80 e0       	ldi	r24, 0x00	; 0
   13f8e:	90 e0       	ldi	r25, 0x00	; 0
   13f90:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   13f94:	b6 2e       	mov	r11, r22
   13f96:	46 2f       	mov	r20, r22
   13f98:	6f 2d       	mov	r22, r15
   13f9a:	80 ea       	ldi	r24, 0xA0	; 160
   13f9c:	95 e3       	ldi	r25, 0x35	; 53
   13f9e:	0e 94 25 75 	call	0xea4a	; 0xea4a <_ZN13PinoccioScout8pinWriteEhh>
   13fa2:	1f 92       	push	r1
   13fa4:	bf 92       	push	r11
   13fa6:	8f 2d       	mov	r24, r15
   13fa8:	99 27       	eor	r25, r25
   13faa:	87 fd       	sbrc	r24, 7
   13fac:	90 95       	com	r25
   13fae:	9f 93       	push	r25
   13fb0:	ff 92       	push	r15
   13fb2:	1f 92       	push	r1
   13fb4:	ef 92       	push	r14
   13fb6:	cf 92       	push	r12
   13fb8:	df 92       	push	r13
   13fba:	cf 92       	push	r12
   13fbc:	df 92       	push	r13
   13fbe:	25 e2       	ldi	r18, 0x25	; 37
   13fc0:	3e e1       	ldi	r19, 0x1E	; 30
   13fc2:	3f 93       	push	r19
   13fc4:	2f 93       	push	r18
   13fc6:	1f 92       	push	r1
   13fc8:	80 e8       	ldi	r24, 0x80	; 128
   13fca:	8f 93       	push	r24
   13fcc:	1f 93       	push	r17
   13fce:	0f 93       	push	r16
   13fd0:	0e 94 1d b6 	call	0x16c3a	; 0x16c3a <snprintf>
   13fd4:	15 c0       	rjmp	.+42     	; 0x14000 <_ZL7pinSavev+0x152>
   13fd6:	2e 2d       	mov	r18, r14
   13fd8:	33 27       	eor	r19, r19
   13fda:	27 fd       	sbrc	r18, 7
   13fdc:	30 95       	com	r19
   13fde:	3f 93       	push	r19
   13fe0:	ef 92       	push	r14
   13fe2:	cf 92       	push	r12
   13fe4:	df 92       	push	r13
   13fe6:	cf 92       	push	r12
   13fe8:	df 92       	push	r13
   13fea:	24 e6       	ldi	r18, 0x64	; 100
   13fec:	3e e1       	ldi	r19, 0x1E	; 30
   13fee:	3f 93       	push	r19
   13ff0:	2f 93       	push	r18
   13ff2:	1f 92       	push	r1
   13ff4:	80 e8       	ldi	r24, 0x80	; 128
   13ff6:	8f 93       	push	r24
   13ff8:	1f 93       	push	r17
   13ffa:	0f 93       	push	r16
   13ffc:	0e 94 1d b6 	call	0x16c3a	; 0x16c3a <snprintf>
   14000:	0f b6       	in	r0, 0x3f	; 63
   14002:	f8 94       	cli
   14004:	de bf       	out	0x3e, r29	; 62
   14006:	0f be       	out	0x3f, r0	; 63
   14008:	cd bf       	out	0x3d, r28	; 61
   1400a:	c8 01       	movw	r24, r16
   1400c:	0e 94 59 35 	call	0x6ab2	; 0x6ab2 <_Z9doCommandPc>
   14010:	6f 2d       	mov	r22, r15
   14012:	80 ea       	ldi	r24, 0xA0	; 160
   14014:	95 e3       	ldi	r25, 0x35	; 53
   14016:	0e 94 4d 71 	call	0xe29a	; 0xe29a <_ZN13PinoccioScout12isDigitalPinEh>
   1401a:	88 23       	and	r24, r24
   1401c:	51 f0       	breq	.+20     	; 0x14032 <_ZL7pinSavev+0x184>
   1401e:	ce 01       	movw	r24, r28
   14020:	8f 57       	subi	r24, 0x7F	; 127
   14022:	9f 4f       	sbci	r25, 0xFF	; 255
   14024:	0e 94 b9 85 	call	0x10b72	; 0x10b72 <_ZL18digitalPinReportHQv>
   14028:	ce 01       	movw	r24, r28
   1402a:	8f 57       	subi	r24, 0x7F	; 127
   1402c:	9f 4f       	sbci	r25, 0xFF	; 255
   1402e:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   14032:	6f 2d       	mov	r22, r15
   14034:	80 ea       	ldi	r24, 0xA0	; 160
   14036:	95 e3       	ldi	r25, 0x35	; 53
   14038:	0e 94 53 71 	call	0xe2a6	; 0xe2a6 <_ZN13PinoccioScout11isAnalogPinEh>
   1403c:	88 23       	and	r24, r24
   1403e:	51 f0       	breq	.+20     	; 0x14054 <_ZL7pinSavev+0x1a6>
   14040:	ce 01       	movw	r24, r28
   14042:	8f 57       	subi	r24, 0x7F	; 127
   14044:	9f 4f       	sbci	r25, 0xFF	; 255
   14046:	0e 94 a7 83 	call	0x1074e	; 0x1074e <_ZL17analogPinReportHQv>
   1404a:	ce 01       	movw	r24, r28
   1404c:	8f 57       	subi	r24, 0x7F	; 127
   1404e:	9f 4f       	sbci	r25, 0xFF	; 255
   14050:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   14054:	61 e0       	ldi	r22, 0x01	; 1
   14056:	70 e0       	ldi	r23, 0x00	; 0
   14058:	80 e0       	ldi	r24, 0x00	; 0
   1405a:	90 e0       	ldi	r25, 0x00	; 0
   1405c:	c8 57       	subi	r28, 0x78	; 120
   1405e:	df 4f       	sbci	r29, 0xFF	; 255
   14060:	0f b6       	in	r0, 0x3f	; 63
   14062:	f8 94       	cli
   14064:	de bf       	out	0x3e, r29	; 62
   14066:	0f be       	out	0x3f, r0	; 63
   14068:	cd bf       	out	0x3d, r28	; 61
   1406a:	df 91       	pop	r29
   1406c:	cf 91       	pop	r28
   1406e:	1f 91       	pop	r17
   14070:	0f 91       	pop	r16
   14072:	ff 90       	pop	r15
   14074:	ef 90       	pop	r14
   14076:	df 90       	pop	r13
   14078:	cf 90       	pop	r12
   1407a:	bf 90       	pop	r11
   1407c:	08 95       	ret

0001407e <_ZL7pinReadv>:
   1407e:	cf 93       	push	r28
   14080:	df 93       	push	r29
   14082:	00 d0       	rcall	.+0      	; 0x14084 <_ZL7pinReadv+0x6>
   14084:	00 d0       	rcall	.+0      	; 0x14086 <_ZL7pinReadv+0x8>
   14086:	cd b7       	in	r28, 0x3d	; 61
   14088:	de b7       	in	r29, 0x3e	; 62
   1408a:	f3 dc       	rcall	.-1562   	; 0x13a72 <_ZL13getPinFromArgi.constprop.41>
   1408c:	8f 3f       	cpi	r24, 0xFF	; 255
   1408e:	91 f4       	brne	.+36     	; 0x140b4 <_ZL7pinReadv+0x36>
   14090:	67 e9       	ldi	r22, 0x97	; 151
   14092:	70 e1       	ldi	r23, 0x10	; 16
   14094:	ce 01       	movw	r24, r28
   14096:	01 96       	adiw	r24, 0x01	; 1
   14098:	0e 94 4a 19 	call	0x3294	; 0x3294 <_ZN6StringC1EPK19__FlashStringHelper>
   1409c:	ce 01       	movw	r24, r28
   1409e:	01 96       	adiw	r24, 0x01	; 1
   140a0:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <_Z5speolRK6String>
   140a4:	ce 01       	movw	r24, r28
   140a6:	01 96       	adiw	r24, 0x01	; 1
   140a8:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   140ac:	60 e0       	ldi	r22, 0x00	; 0
   140ae:	70 e0       	ldi	r23, 0x00	; 0
   140b0:	cb 01       	movw	r24, r22
   140b2:	08 c0       	rjmp	.+16     	; 0x140c4 <_ZL7pinReadv+0x46>
   140b4:	68 2f       	mov	r22, r24
   140b6:	80 ea       	ldi	r24, 0xA0	; 160
   140b8:	95 e3       	ldi	r25, 0x35	; 53
   140ba:	0e 94 59 71 	call	0xe2b2	; 0xe2b2 <_ZN13PinoccioScout7pinReadEh>
   140be:	bc 01       	movw	r22, r24
   140c0:	80 e0       	ldi	r24, 0x00	; 0
   140c2:	90 e0       	ldi	r25, 0x00	; 0
   140c4:	26 96       	adiw	r28, 0x06	; 6
   140c6:	0f b6       	in	r0, 0x3f	; 63
   140c8:	f8 94       	cli
   140ca:	de bf       	out	0x3e, r29	; 62
   140cc:	0f be       	out	0x3f, r0	; 63
   140ce:	cd bf       	out	0x3d, r28	; 61
   140d0:	df 91       	pop	r29
   140d2:	cf 91       	pop	r28
   140d4:	08 95       	ret

000140d6 <_ZL14uptimeReportHQv>:
   140d6:	2f 92       	push	r2
   140d8:	3f 92       	push	r3
   140da:	4f 92       	push	r4
   140dc:	5f 92       	push	r5
   140de:	6f 92       	push	r6
   140e0:	7f 92       	push	r7
   140e2:	8f 92       	push	r8
   140e4:	9f 92       	push	r9
   140e6:	af 92       	push	r10
   140e8:	bf 92       	push	r11
   140ea:	cf 92       	push	r12
   140ec:	df 92       	push	r13
   140ee:	ef 92       	push	r14
   140f0:	ff 92       	push	r15
   140f2:	0f 93       	push	r16
   140f4:	1f 93       	push	r17
   140f6:	cf 93       	push	r28
   140f8:	df 93       	push	r29
   140fa:	cd b7       	in	r28, 0x3d	; 61
   140fc:	de b7       	in	r29, 0x3e	; 62
   140fe:	a4 97       	sbiw	r28, 0x24	; 36
   14100:	0f b6       	in	r0, 0x3f	; 63
   14102:	f8 94       	cli
   14104:	de bf       	out	0x3e, r29	; 62
   14106:	0f be       	out	0x3f, r0	; 63
   14108:	cd bf       	out	0x3d, r28	; 61
   1410a:	7c 01       	movw	r14, r24
   1410c:	8e 01       	movw	r16, r28
   1410e:	0b 5e       	subi	r16, 0xEB	; 235
   14110:	1f 4f       	sbci	r17, 0xFF	; 255
   14112:	41 e0       	ldi	r20, 0x01	; 1
   14114:	50 e0       	ldi	r21, 0x00	; 0
   14116:	64 e6       	ldi	r22, 0x64	; 100
   14118:	70 e0       	ldi	r23, 0x00	; 0
   1411a:	c8 01       	movw	r24, r16
   1411c:	0e 94 8d ab 	call	0x1571a	; 0x1571a <_ZN12StringBufferC1Ejj>
   14120:	80 ea       	ldi	r24, 0xA0	; 160
   14122:	95 e3       	ldi	r25, 0x35	; 53
   14124:	0e 94 bb 6c 	call	0xd976	; 0xd976 <_ZN13PinoccioClass17getLastResetCauseEv>
   14128:	44 e1       	ldi	r20, 0x14	; 20
   1412a:	50 e0       	ldi	r21, 0x00	; 0
   1412c:	bc 01       	movw	r22, r24
   1412e:	ce 01       	movw	r24, r28
   14130:	01 96       	adiw	r24, 0x01	; 1
   14132:	6c 01       	movw	r12, r24
   14134:	0e 94 1b b5 	call	0x16a36	; 0x16a36 <strncpy_P>
   14138:	1c 8a       	std	Y+20, r1	; 0x14
   1413a:	0e 94 4a b3 	call	0x16694	; 0x16694 <random>
   1413e:	9b 01       	movw	r18, r22
   14140:	fe 01       	movw	r30, r28
   14142:	e4 5e       	subi	r30, 0xE4	; 228
   14144:	fa 43       	sbci	r31, 0x3A	; 58
   14146:	f8 a3       	std	Y+32, r31	; 0x20
   14148:	ef 8f       	std	Y+31, r30	; 0x1f
   1414a:	6b a3       	std	Y+35, r22	; 0x23
   1414c:	3c a3       	std	Y+36, r19	; 0x24
   1414e:	0e 94 16 14 	call	0x282c	; 0x282c <millis>
   14152:	56 2e       	mov	r5, r22
   14154:	47 2e       	mov	r4, r23
   14156:	38 2e       	mov	r3, r24
   14158:	29 2e       	mov	r2, r25
   1415a:	40 e0       	ldi	r20, 0x00	; 0
   1415c:	50 e0       	ldi	r21, 0x00	; 0
   1415e:	ba 01       	movw	r22, r20
   14160:	8d e4       	ldi	r24, 0x4D	; 77
   14162:	90 e2       	ldi	r25, 0x20	; 32
   14164:	0e 94 2c 68 	call	0xd058	; 0xd058 <keyMap>
   14168:	78 2e       	mov	r7, r24
   1416a:	69 2e       	mov	r6, r25
   1416c:	40 e0       	ldi	r20, 0x00	; 0
   1416e:	50 e0       	ldi	r21, 0x00	; 0
   14170:	ba 01       	movw	r22, r20
   14172:	82 e9       	ldi	r24, 0x92	; 146
   14174:	9e e1       	ldi	r25, 0x1E	; 30
   14176:	0e 94 2c 68 	call	0xd058	; 0xd058 <keyMap>
   1417a:	98 2e       	mov	r9, r24
   1417c:	89 2e       	mov	r8, r25
   1417e:	40 e0       	ldi	r20, 0x00	; 0
   14180:	50 e0       	ldi	r21, 0x00	; 0
   14182:	ba 01       	movw	r22, r20
   14184:	81 e3       	ldi	r24, 0x31	; 49
   14186:	92 e2       	ldi	r25, 0x22	; 34
   14188:	0e 94 2c 68 	call	0xd058	; 0xd058 <keyMap>
   1418c:	b8 2e       	mov	r11, r24
   1418e:	a9 2e       	mov	r10, r25
   14190:	40 e0       	ldi	r20, 0x00	; 0
   14192:	50 e0       	ldi	r21, 0x00	; 0
   14194:	ba 01       	movw	r22, r20
   14196:	89 e9       	ldi	r24, 0x99	; 153
   14198:	9e e1       	ldi	r25, 0x1E	; 30
   1419a:	0e 94 2c 68 	call	0xd058	; 0xd058 <keyMap>
   1419e:	89 a3       	std	Y+33, r24	; 0x21
   141a0:	9a a3       	std	Y+34, r25	; 0x22
   141a2:	40 e0       	ldi	r20, 0x00	; 0
   141a4:	50 e0       	ldi	r21, 0x00	; 0
   141a6:	ba 01       	movw	r22, r20
   141a8:	80 ea       	ldi	r24, 0xA0	; 160
   141aa:	9e e1       	ldi	r25, 0x1E	; 30
   141ac:	0e 94 2c 68 	call	0xd058	; 0xd058 <keyMap>
   141b0:	3c a1       	ldd	r19, Y+36	; 0x24
   141b2:	3f 93       	push	r19
   141b4:	2b a1       	ldd	r18, Y+35	; 0x23
   141b6:	2f 93       	push	r18
   141b8:	f8 a1       	ldd	r31, Y+32	; 0x20
   141ba:	ff 93       	push	r31
   141bc:	2f 8d       	ldd	r18, Y+31	; 0x1f
   141be:	2f 93       	push	r18
   141c0:	2f 92       	push	r2
   141c2:	3f 92       	push	r3
   141c4:	4f 92       	push	r4
   141c6:	5f 92       	push	r5
   141c8:	6f 92       	push	r6
   141ca:	7f 92       	push	r7
   141cc:	8f 92       	push	r8
   141ce:	9f 92       	push	r9
   141d0:	af 92       	push	r10
   141d2:	bf 92       	push	r11
   141d4:	2a a1       	ldd	r18, Y+34	; 0x22
   141d6:	2f 93       	push	r18
   141d8:	29 a1       	ldd	r18, Y+33	; 0x21
   141da:	2f 93       	push	r18
   141dc:	9f 93       	push	r25
   141de:	8f 93       	push	r24
   141e0:	87 ea       	ldi	r24, 0xA7	; 167
   141e2:	9e e1       	ldi	r25, 0x1E	; 30
   141e4:	9f 93       	push	r25
   141e6:	8f 93       	push	r24
   141e8:	1f 93       	push	r17
   141ea:	0f 93       	push	r16
   141ec:	0e 94 b2 ab 	call	0x15764	; 0x15764 <_ZN12StringBuffer13appendSprintfEPKcz>
   141f0:	f6 01       	movw	r30, r12
   141f2:	01 90       	ld	r0, Z+
   141f4:	00 20       	and	r0, r0
   141f6:	e9 f7       	brne	.-6      	; 0x141f2 <_ZL14uptimeReportHQv+0x11c>
   141f8:	af 01       	movw	r20, r30
   141fa:	41 50       	subi	r20, 0x01	; 1
   141fc:	51 09       	sbc	r21, r1
   141fe:	4c 19       	sub	r20, r12
   14200:	5d 09       	sbc	r21, r13
   14202:	21 e0       	ldi	r18, 0x01	; 1
   14204:	b6 01       	movw	r22, r12
   14206:	c8 01       	movw	r24, r16
   14208:	0e 94 66 ac 	call	0x158cc	; 0x158cc <_ZN12StringBuffer16appendJsonStringEPKcjb>
   1420c:	6b e7       	ldi	r22, 0x7B	; 123
   1420e:	7d e1       	ldi	r23, 0x1D	; 29
   14210:	c8 01       	movw	r24, r16
   14212:	0e 94 7d 19 	call	0x32fa	; 0x32fa <_ZN6String6concatEPKc>
   14216:	a8 01       	movw	r20, r16
   14218:	6b ee       	ldi	r22, 0xEB	; 235
   1421a:	78 e3       	ldi	r23, 0x38	; 56
   1421c:	c7 01       	movw	r24, r14
   1421e:	0e 94 3f 7c 	call	0xf87e	; 0xf87e <_ZN20PinoccioScoutHandler6reportERK6String>
   14222:	c8 01       	movw	r24, r16
   14224:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   14228:	0f b6       	in	r0, 0x3f	; 63
   1422a:	f8 94       	cli
   1422c:	de bf       	out	0x3e, r29	; 62
   1422e:	0f be       	out	0x3f, r0	; 63
   14230:	cd bf       	out	0x3d, r28	; 61
   14232:	c7 01       	movw	r24, r14
   14234:	a4 96       	adiw	r28, 0x24	; 36
   14236:	0f b6       	in	r0, 0x3f	; 63
   14238:	f8 94       	cli
   1423a:	de bf       	out	0x3e, r29	; 62
   1423c:	0f be       	out	0x3f, r0	; 63
   1423e:	cd bf       	out	0x3d, r28	; 61
   14240:	df 91       	pop	r29
   14242:	cf 91       	pop	r28
   14244:	1f 91       	pop	r17
   14246:	0f 91       	pop	r16
   14248:	ff 90       	pop	r15
   1424a:	ef 90       	pop	r14
   1424c:	df 90       	pop	r13
   1424e:	cf 90       	pop	r12
   14250:	bf 90       	pop	r11
   14252:	af 90       	pop	r10
   14254:	9f 90       	pop	r9
   14256:	8f 90       	pop	r8
   14258:	7f 90       	pop	r7
   1425a:	6f 90       	pop	r6
   1425c:	5f 90       	pop	r5
   1425e:	4f 90       	pop	r4
   14260:	3f 90       	pop	r3
   14262:	2f 90       	pop	r2
   14264:	08 95       	ret

00014266 <_ZL12uptimeReportv>:
   14266:	cf 93       	push	r28
   14268:	df 93       	push	r29
   1426a:	cd b7       	in	r28, 0x3d	; 61
   1426c:	de b7       	in	r29, 0x3e	; 62
   1426e:	28 97       	sbiw	r28, 0x08	; 8
   14270:	0f b6       	in	r0, 0x3f	; 63
   14272:	f8 94       	cli
   14274:	de bf       	out	0x3e, r29	; 62
   14276:	0f be       	out	0x3f, r0	; 63
   14278:	cd bf       	out	0x3d, r28	; 61
   1427a:	ce 01       	movw	r24, r28
   1427c:	01 96       	adiw	r24, 0x01	; 1
   1427e:	2b df       	rcall	.-426    	; 0x140d6 <_ZL14uptimeReportHQv>
   14280:	ce 01       	movw	r24, r28
   14282:	01 96       	adiw	r24, 0x01	; 1
   14284:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   14288:	0e 94 16 14 	call	0x282c	; 0x282c <millis>
   1428c:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <_Z2spm>
   14290:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <_Z5speolv>
   14294:	61 e0       	ldi	r22, 0x01	; 1
   14296:	70 e0       	ldi	r23, 0x00	; 0
   14298:	80 e0       	ldi	r24, 0x00	; 0
   1429a:	90 e0       	ldi	r25, 0x00	; 0
   1429c:	28 96       	adiw	r28, 0x08	; 8
   1429e:	0f b6       	in	r0, 0x3f	; 63
   142a0:	f8 94       	cli
   142a2:	de bf       	out	0x3e, r29	; 62
   142a4:	0f be       	out	0x3f, r0	; 63
   142a6:	cd bf       	out	0x3d, r28	; 61
   142a8:	df 91       	pop	r29
   142aa:	cf 91       	pop	r28
   142ac:	08 95       	ret

000142ae <_ZN13PinoccioShell11allReportHQEv>:
   142ae:	cf 93       	push	r28
   142b0:	df 93       	push	r29
   142b2:	cd b7       	in	r28, 0x3d	; 61
   142b4:	de b7       	in	r29, 0x3e	; 62
   142b6:	28 97       	sbiw	r28, 0x08	; 8
   142b8:	0f b6       	in	r0, 0x3f	; 63
   142ba:	f8 94       	cli
   142bc:	de bf       	out	0x3e, r29	; 62
   142be:	0f be       	out	0x3f, r0	; 63
   142c0:	cd bf       	out	0x3d, r28	; 61
   142c2:	ce 01       	movw	r24, r28
   142c4:	01 96       	adiw	r24, 0x01	; 1
   142c6:	0e 94 b8 8b 	call	0x11770	; 0x11770 <_ZL13scoutReportHQv>
   142ca:	ce 01       	movw	r24, r28
   142cc:	01 96       	adiw	r24, 0x01	; 1
   142ce:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   142d2:	ce 01       	movw	r24, r28
   142d4:	01 96       	adiw	r24, 0x01	; 1
   142d6:	ff de       	rcall	.-514    	; 0x140d6 <_ZL14uptimeReportHQv>
   142d8:	ce 01       	movw	r24, r28
   142da:	01 96       	adiw	r24, 0x01	; 1
   142dc:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   142e0:	ce 01       	movw	r24, r28
   142e2:	01 96       	adiw	r24, 0x01	; 1
   142e4:	0e 94 ea 82 	call	0x105d4	; 0x105d4 <_ZL13powerReportHQv>
   142e8:	ce 01       	movw	r24, r28
   142ea:	01 96       	adiw	r24, 0x01	; 1
   142ec:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   142f0:	ce 01       	movw	r24, r28
   142f2:	01 96       	adiw	r24, 0x01	; 1
   142f4:	0e 94 a7 8e 	call	0x11d4e	; 0x11d4e <_ZL16backpackReportHQv>
   142f8:	ce 01       	movw	r24, r28
   142fa:	01 96       	adiw	r24, 0x01	; 1
   142fc:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   14300:	ce 01       	movw	r24, r28
   14302:	01 96       	adiw	r24, 0x01	; 1
   14304:	0e 94 b9 85 	call	0x10b72	; 0x10b72 <_ZL18digitalPinReportHQv>
   14308:	ce 01       	movw	r24, r28
   1430a:	01 96       	adiw	r24, 0x01	; 1
   1430c:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   14310:	ce 01       	movw	r24, r28
   14312:	01 96       	adiw	r24, 0x01	; 1
   14314:	0e 94 a7 83 	call	0x1074e	; 0x1074e <_ZL17analogPinReportHQv>
   14318:	ce 01       	movw	r24, r28
   1431a:	01 96       	adiw	r24, 0x01	; 1
   1431c:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   14320:	ce 01       	movw	r24, r28
   14322:	01 96       	adiw	r24, 0x01	; 1
   14324:	0e 94 a0 91 	call	0x12340	; 0x12340 <_ZL12meshReportHQv>
   14328:	ce 01       	movw	r24, r28
   1432a:	01 96       	adiw	r24, 0x01	; 1
   1432c:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   14330:	ce 01       	movw	r24, r28
   14332:	01 96       	adiw	r24, 0x01	; 1
   14334:	0e 94 dd 81 	call	0x103ba	; 0x103ba <_ZL12tempReportHQv>
   14338:	ce 01       	movw	r24, r28
   1433a:	01 96       	adiw	r24, 0x01	; 1
   1433c:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   14340:	ce 01       	movw	r24, r28
   14342:	01 96       	adiw	r24, 0x01	; 1
   14344:	0e 94 1b 81 	call	0x10236	; 0x10236 <_ZL11ledReportHQv>
   14348:	ce 01       	movw	r24, r28
   1434a:	01 96       	adiw	r24, 0x01	; 1
   1434c:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   14350:	28 96       	adiw	r28, 0x08	; 8
   14352:	0f b6       	in	r0, 0x3f	; 63
   14354:	f8 94       	cli
   14356:	de bf       	out	0x3e, r29	; 62
   14358:	0f be       	out	0x3f, r0	; 63
   1435a:	cd bf       	out	0x3d, r28	; 61
   1435c:	df 91       	pop	r29
   1435e:	cf 91       	pop	r28
   14360:	08 95       	ret

00014362 <_ZL9allReportv>:
   14362:	cf 93       	push	r28
   14364:	df 93       	push	r29
   14366:	00 d0       	rcall	.+0      	; 0x14368 <_ZL9allReportv+0x6>
   14368:	00 d0       	rcall	.+0      	; 0x1436a <_ZL9allReportv+0x8>
   1436a:	cd b7       	in	r28, 0x3d	; 61
   1436c:	de b7       	in	r29, 0x3e	; 62
   1436e:	6b ea       	ldi	r22, 0xAB	; 171
   14370:	7f e0       	ldi	r23, 0x0F	; 15
   14372:	ce 01       	movw	r24, r28
   14374:	01 96       	adiw	r24, 0x01	; 1
   14376:	0e 94 4a 19 	call	0x3294	; 0x3294 <_ZN6StringC1EPK19__FlashStringHelper>
   1437a:	ce 01       	movw	r24, r28
   1437c:	01 96       	adiw	r24, 0x01	; 1
   1437e:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <_Z5speolRK6String>
   14382:	ce 01       	movw	r24, r28
   14384:	01 96       	adiw	r24, 0x01	; 1
   14386:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   1438a:	8e ee       	ldi	r24, 0xEE	; 238
   1438c:	99 e3       	ldi	r25, 0x39	; 57
   1438e:	8f df       	rcall	.-226    	; 0x142ae <_ZN13PinoccioShell11allReportHQEv>
   14390:	61 e0       	ldi	r22, 0x01	; 1
   14392:	70 e0       	ldi	r23, 0x00	; 0
   14394:	80 e0       	ldi	r24, 0x00	; 0
   14396:	90 e0       	ldi	r25, 0x00	; 0
   14398:	26 96       	adiw	r28, 0x06	; 6
   1439a:	0f b6       	in	r0, 0x3f	; 63
   1439c:	f8 94       	cli
   1439e:	de bf       	out	0x3e, r29	; 62
   143a0:	0f be       	out	0x3f, r0	; 63
   143a2:	cd bf       	out	0x3d, r28	; 61
   143a4:	df 91       	pop	r29
   143a6:	cf 91       	pop	r28
   143a8:	08 95       	ret

000143aa <_ZN13PinoccioShell8parseHexEc>:
   143aa:	90 ed       	ldi	r25, 0xD0	; 208
   143ac:	98 0f       	add	r25, r24
   143ae:	9a 30       	cpi	r25, 0x0A	; 10
   143b0:	88 f0       	brcs	.+34     	; 0x143d4 <_ZN13PinoccioShell8parseHexEc+0x2a>
   143b2:	9f e9       	ldi	r25, 0x9F	; 159
   143b4:	98 0f       	add	r25, r24
   143b6:	9a 31       	cpi	r25, 0x1A	; 26
   143b8:	10 f4       	brcc	.+4      	; 0x143be <_ZN13PinoccioShell8parseHexEc+0x14>
   143ba:	87 55       	subi	r24, 0x57	; 87
   143bc:	08 95       	ret
   143be:	9f eb       	ldi	r25, 0xBF	; 191
   143c0:	98 0f       	add	r25, r24
   143c2:	9a 31       	cpi	r25, 0x1A	; 26
   143c4:	10 f4       	brcc	.+4      	; 0x143ca <_ZN13PinoccioShell8parseHexEc+0x20>
   143c6:	87 53       	subi	r24, 0x37	; 55
   143c8:	08 95       	ret
   143ca:	8e e0       	ldi	r24, 0x0E	; 14
   143cc:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <_Z10unexpectedh>
   143d0:	80 e0       	ldi	r24, 0x00	; 0
   143d2:	08 95       	ret
   143d4:	89 2f       	mov	r24, r25
   143d6:	08 95       	ret

000143d8 <_ZN13PinoccioShell8parseHexEPKcjPh>:
   143d8:	7f 92       	push	r7
   143da:	8f 92       	push	r8
   143dc:	9f 92       	push	r9
   143de:	af 92       	push	r10
   143e0:	bf 92       	push	r11
   143e2:	cf 92       	push	r12
   143e4:	df 92       	push	r13
   143e6:	ef 92       	push	r14
   143e8:	ff 92       	push	r15
   143ea:	0f 93       	push	r16
   143ec:	1f 93       	push	r17
   143ee:	cf 93       	push	r28
   143f0:	df 93       	push	r29
   143f2:	6c 01       	movw	r12, r24
   143f4:	8b 01       	movw	r16, r22
   143f6:	4a 01       	movw	r8, r20
   143f8:	60 ff       	sbrs	r22, 0
   143fa:	03 c0       	rjmp	.+6      	; 0x14402 <_ZN13PinoccioShell8parseHexEPKcjPh+0x2a>
   143fc:	8e e0       	ldi	r24, 0x0E	; 14
   143fe:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <_Z10unexpectedh>
   14402:	c0 e0       	ldi	r28, 0x00	; 0
   14404:	d0 e0       	ldi	r29, 0x00	; 0
   14406:	c0 17       	cp	r28, r16
   14408:	d1 07       	cpc	r29, r17
   1440a:	c0 f4       	brcc	.+48     	; 0x1443c <_ZN13PinoccioShell8parseHexEPKcjPh+0x64>
   1440c:	7e 01       	movw	r14, r28
   1440e:	f6 94       	lsr	r15
   14410:	e7 94       	ror	r14
   14412:	e8 0c       	add	r14, r8
   14414:	f9 1c       	adc	r15, r9
   14416:	56 01       	movw	r10, r12
   14418:	ac 0e       	add	r10, r28
   1441a:	bd 1e       	adc	r11, r29
   1441c:	f5 01       	movw	r30, r10
   1441e:	80 81       	ld	r24, Z
   14420:	c4 df       	rcall	.-120    	; 0x143aa <_ZN13PinoccioShell8parseHexEc>
   14422:	78 2e       	mov	r7, r24
   14424:	f5 01       	movw	r30, r10
   14426:	81 81       	ldd	r24, Z+1	; 0x01
   14428:	c0 df       	rcall	.-128    	; 0x143aa <_ZN13PinoccioShell8parseHexEc>
   1442a:	f0 e1       	ldi	r31, 0x10	; 16
   1442c:	7f 9e       	mul	r7, r31
   1442e:	90 01       	movw	r18, r0
   14430:	11 24       	eor	r1, r1
   14432:	82 2b       	or	r24, r18
   14434:	f7 01       	movw	r30, r14
   14436:	80 83       	st	Z, r24
   14438:	22 96       	adiw	r28, 0x02	; 2
   1443a:	e5 cf       	rjmp	.-54     	; 0x14406 <_ZN13PinoccioShell8parseHexEPKcjPh+0x2e>
   1443c:	f6 01       	movw	r30, r12
   1443e:	e0 0f       	add	r30, r16
   14440:	f1 1f       	adc	r31, r17
   14442:	80 81       	ld	r24, Z
   14444:	88 23       	and	r24, r24
   14446:	81 f0       	breq	.+32     	; 0x14468 <_ZN13PinoccioShell8parseHexEPKcjPh+0x90>
   14448:	8e e0       	ldi	r24, 0x0E	; 14
   1444a:	df 91       	pop	r29
   1444c:	cf 91       	pop	r28
   1444e:	1f 91       	pop	r17
   14450:	0f 91       	pop	r16
   14452:	ff 90       	pop	r15
   14454:	ef 90       	pop	r14
   14456:	df 90       	pop	r13
   14458:	cf 90       	pop	r12
   1445a:	bf 90       	pop	r11
   1445c:	af 90       	pop	r10
   1445e:	9f 90       	pop	r9
   14460:	8f 90       	pop	r8
   14462:	7f 90       	pop	r7
   14464:	0c 94 f8 20 	jmp	0x41f0	; 0x41f0 <_Z10unexpectedh>
   14468:	df 91       	pop	r29
   1446a:	cf 91       	pop	r28
   1446c:	1f 91       	pop	r17
   1446e:	0f 91       	pop	r16
   14470:	ff 90       	pop	r15
   14472:	ef 90       	pop	r14
   14474:	df 90       	pop	r13
   14476:	cf 90       	pop	r12
   14478:	bf 90       	pop	r11
   1447a:	af 90       	pop	r10
   1447c:	9f 90       	pop	r9
   1447e:	8f 90       	pop	r8
   14480:	7f 90       	pop	r7
   14482:	08 95       	ret

00014484 <_ZL20backpackUpdateEepromv>:
   14484:	2f 92       	push	r2
   14486:	3f 92       	push	r3
   14488:	4f 92       	push	r4
   1448a:	5f 92       	push	r5
   1448c:	6f 92       	push	r6
   1448e:	7f 92       	push	r7
   14490:	8f 92       	push	r8
   14492:	9f 92       	push	r9
   14494:	af 92       	push	r10
   14496:	bf 92       	push	r11
   14498:	cf 92       	push	r12
   1449a:	df 92       	push	r13
   1449c:	ef 92       	push	r14
   1449e:	ff 92       	push	r15
   144a0:	0f 93       	push	r16
   144a2:	1f 93       	push	r17
   144a4:	cf 93       	push	r28
   144a6:	df 93       	push	r29
   144a8:	00 d0       	rcall	.+0      	; 0x144aa <_ZL20backpackUpdateEepromv+0x26>
   144aa:	00 d0       	rcall	.+0      	; 0x144ac <_ZL20backpackUpdateEepromv+0x28>
   144ac:	cd b7       	in	r28, 0x3d	; 61
   144ae:	de b7       	in	r29, 0x3e	; 62
   144b0:	0d b7       	in	r16, 0x3d	; 61
   144b2:	1e b7       	in	r17, 0x3e	; 62
   144b4:	61 e0       	ldi	r22, 0x01	; 1
   144b6:	70 e0       	ldi	r23, 0x00	; 0
   144b8:	80 e0       	ldi	r24, 0x00	; 0
   144ba:	90 e0       	ldi	r25, 0x00	; 0
   144bc:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   144c0:	6b 01       	movw	r12, r22
   144c2:	7c 01       	movw	r14, r24
   144c4:	97 fd       	sbrc	r25, 7
   144c6:	0a c0       	rjmp	.+20     	; 0x144dc <_ZL20backpackUpdateEepromv+0x58>
   144c8:	80 91 6d 35 	lds	r24, 0x356D
   144cc:	90 e0       	ldi	r25, 0x00	; 0
   144ce:	a0 e0       	ldi	r26, 0x00	; 0
   144d0:	b0 e0       	ldi	r27, 0x00	; 0
   144d2:	c8 16       	cp	r12, r24
   144d4:	d9 06       	cpc	r13, r25
   144d6:	ea 06       	cpc	r14, r26
   144d8:	fb 06       	cpc	r15, r27
   144da:	1c f0       	brlt	.+6      	; 0x144e2 <_ZL20backpackUpdateEepromv+0x5e>
   144dc:	62 ea       	ldi	r22, 0xA2	; 162
   144de:	71 e1       	ldi	r23, 0x11	; 17
   144e0:	70 c0       	rjmp	.+224    	; 0x145c2 <_ZL20backpackUpdateEepromv+0x13e>
   144e2:	60 e0       	ldi	r22, 0x00	; 0
   144e4:	70 e0       	ldi	r23, 0x00	; 0
   144e6:	cb 01       	movw	r24, r22
   144e8:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   144ec:	62 30       	cpi	r22, 0x02	; 2
   144ee:	71 05       	cpc	r23, r1
   144f0:	81 05       	cpc	r24, r1
   144f2:	91 05       	cpc	r25, r1
   144f4:	59 f4       	brne	.+22     	; 0x1450c <_ZL20backpackUpdateEepromv+0x88>
   144f6:	62 e0       	ldi	r22, 0x02	; 2
   144f8:	70 e0       	ldi	r23, 0x00	; 0
   144fa:	80 e0       	ldi	r24, 0x00	; 0
   144fc:	90 e0       	ldi	r25, 0x00	; 0
   144fe:	0e 94 8f 24 	call	0x491e	; 0x491e <_Z12getstringargl>
   14502:	cb 01       	movw	r24, r22
   14504:	21 2c       	mov	r2, r1
   14506:	31 2c       	mov	r3, r1
   14508:	21 01       	movw	r4, r2
   1450a:	0f c0       	rjmp	.+30     	; 0x1452a <_ZL20backpackUpdateEepromv+0xa6>
   1450c:	62 e0       	ldi	r22, 0x02	; 2
   1450e:	70 e0       	ldi	r23, 0x00	; 0
   14510:	80 e0       	ldi	r24, 0x00	; 0
   14512:	90 e0       	ldi	r25, 0x00	; 0
   14514:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   14518:	1b 01       	movw	r2, r22
   1451a:	2c 01       	movw	r4, r24
   1451c:	63 e0       	ldi	r22, 0x03	; 3
   1451e:	70 e0       	ldi	r23, 0x00	; 0
   14520:	80 e0       	ldi	r24, 0x00	; 0
   14522:	90 e0       	ldi	r25, 0x00	; 0
   14524:	0e 94 8f 24 	call	0x491e	; 0x491e <_Z12getstringargl>
   14528:	cb 01       	movw	r24, r22
   1452a:	fc 01       	movw	r30, r24
   1452c:	01 90       	ld	r0, Z+
   1452e:	00 20       	and	r0, r0
   14530:	e9 f7       	brne	.-6      	; 0x1452c <_ZL20backpackUpdateEepromv+0xa8>
   14532:	bf 01       	movw	r22, r30
   14534:	61 50       	subi	r22, 0x01	; 1
   14536:	71 09       	sbc	r23, r1
   14538:	68 1b       	sub	r22, r24
   1453a:	79 0b       	sbc	r23, r25
   1453c:	3b 01       	movw	r6, r22
   1453e:	76 94       	lsr	r7
   14540:	67 94       	ror	r6
   14542:	2d b7       	in	r18, 0x3d	; 61
   14544:	3e b7       	in	r19, 0x3e	; 62
   14546:	26 19       	sub	r18, r6
   14548:	37 09       	sbc	r19, r7
   1454a:	0f b6       	in	r0, 0x3f	; 63
   1454c:	f8 94       	cli
   1454e:	3e bf       	out	0x3e, r19	; 62
   14550:	0f be       	out	0x3f, r0	; 63
   14552:	2d bf       	out	0x3d, r18	; 61
   14554:	ed b7       	in	r30, 0x3d	; 61
   14556:	fe b7       	in	r31, 0x3e	; 62
   14558:	31 96       	adiw	r30, 0x01	; 1
   1455a:	4f 01       	movw	r8, r30
   1455c:	af 01       	movw	r20, r30
   1455e:	3c df       	rcall	.-392    	; 0x143d8 <_ZN13PinoccioShell8parseHexEPKcjPh>
   14560:	22 e1       	ldi	r18, 0x12	; 18
   14562:	2c 9d       	mul	r18, r12
   14564:	c0 01       	movw	r24, r0
   14566:	2d 9d       	mul	r18, r13
   14568:	90 0d       	add	r25, r0
   1456a:	11 24       	eor	r1, r1
   1456c:	a0 90 6b 35 	lds	r10, 0x356B
   14570:	b0 90 6c 35 	lds	r11, 0x356C
   14574:	a8 0e       	add	r10, r24
   14576:	b9 1e       	adc	r11, r25
   14578:	60 e0       	ldi	r22, 0x00	; 0
   1457a:	70 e0       	ldi	r23, 0x00	; 0
   1457c:	c5 01       	movw	r24, r10
   1457e:	0e 94 f3 62 	call	0xc5e6	; 0xc5e6 <_ZN12BackpackInfo9getEepromEPj>
   14582:	c5 01       	movw	r24, r10
   14584:	0e 94 31 63 	call	0xc662	; 0xc662 <_ZN12BackpackInfo10freeHeaderEv>
   14588:	c5 01       	movw	r24, r10
   1458a:	0e 94 3d 63 	call	0xc67a	; 0xc67a <_ZN12BackpackInfo18freeAllDescriptorsEv>
   1458e:	26 2d       	mov	r18, r6
   14590:	a4 01       	movw	r20, r8
   14592:	b1 01       	movw	r22, r2
   14594:	f5 01       	movw	r30, r10
   14596:	80 85       	ldd	r24, Z+8	; 0x08
   14598:	91 85       	ldd	r25, Z+9	; 0x09
   1459a:	0e 94 26 5e 	call	0xbc4c	; 0xbc4c <_ZN4Pbbe12updateEepromEPNS_6EepromEjPKhh>
   1459e:	00 97       	sbiw	r24, 0x00	; 0
   145a0:	19 f4       	brne	.+6      	; 0x145a8 <_ZL20backpackUpdateEepromv+0x124>
   145a2:	6a e8       	ldi	r22, 0x8A	; 138
   145a4:	71 e1       	ldi	r23, 0x11	; 17
   145a6:	0d c0       	rjmp	.+26     	; 0x145c2 <_ZL20backpackUpdateEepromv+0x13e>
   145a8:	f5 01       	movw	r30, r10
   145aa:	91 87       	std	Z+9, r25	; 0x09
   145ac:	80 87       	std	Z+8, r24	; 0x08
   145ae:	ac 01       	movw	r20, r24
   145b0:	6c 2d       	mov	r22, r12
   145b2:	80 e6       	ldi	r24, 0x60	; 96
   145b4:	95 e3       	ldi	r25, 0x35	; 53
   145b6:	0e 94 52 5d 	call	0xbaa4	; 0xbaa4 <_ZN4Pbbe11writeEepromER4PBBPhPKNS_6EepromE>
   145ba:	81 11       	cpse	r24, r1
   145bc:	12 c0       	rjmp	.+36     	; 0x145e2 <_ZL20backpackUpdateEepromv+0x15e>
   145be:	63 e7       	ldi	r22, 0x73	; 115
   145c0:	71 e1       	ldi	r23, 0x11	; 17
   145c2:	ce 01       	movw	r24, r28
   145c4:	01 96       	adiw	r24, 0x01	; 1
   145c6:	0e 94 4a 19 	call	0x3294	; 0x3294 <_ZN6StringC1EPK19__FlashStringHelper>
   145ca:	ce 01       	movw	r24, r28
   145cc:	01 96       	adiw	r24, 0x01	; 1
   145ce:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <_Z5speolRK6String>
   145d2:	ce 01       	movw	r24, r28
   145d4:	01 96       	adiw	r24, 0x01	; 1
   145d6:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   145da:	60 e0       	ldi	r22, 0x00	; 0
   145dc:	70 e0       	ldi	r23, 0x00	; 0
   145de:	cb 01       	movw	r24, r22
   145e0:	04 c0       	rjmp	.+8      	; 0x145ea <_ZL20backpackUpdateEepromv+0x166>
   145e2:	61 e0       	ldi	r22, 0x01	; 1
   145e4:	70 e0       	ldi	r23, 0x00	; 0
   145e6:	80 e0       	ldi	r24, 0x00	; 0
   145e8:	90 e0       	ldi	r25, 0x00	; 0
   145ea:	0f b6       	in	r0, 0x3f	; 63
   145ec:	f8 94       	cli
   145ee:	1e bf       	out	0x3e, r17	; 62
   145f0:	0f be       	out	0x3f, r0	; 63
   145f2:	0d bf       	out	0x3d, r16	; 61
   145f4:	26 96       	adiw	r28, 0x06	; 6
   145f6:	0f b6       	in	r0, 0x3f	; 63
   145f8:	f8 94       	cli
   145fa:	de bf       	out	0x3e, r29	; 62
   145fc:	0f be       	out	0x3f, r0	; 63
   145fe:	cd bf       	out	0x3d, r28	; 61
   14600:	df 91       	pop	r29
   14602:	cf 91       	pop	r28
   14604:	1f 91       	pop	r17
   14606:	0f 91       	pop	r16
   14608:	ff 90       	pop	r15
   1460a:	ef 90       	pop	r14
   1460c:	df 90       	pop	r13
   1460e:	cf 90       	pop	r12
   14610:	bf 90       	pop	r11
   14612:	af 90       	pop	r10
   14614:	9f 90       	pop	r9
   14616:	8f 90       	pop	r8
   14618:	7f 90       	pop	r7
   1461a:	6f 90       	pop	r6
   1461c:	5f 90       	pop	r5
   1461e:	4f 90       	pop	r4
   14620:	3f 90       	pop	r3
   14622:	2f 90       	pop	r2
   14624:	08 95       	ret

00014626 <_ZL9ledSetHexv>:
   14626:	cf 93       	push	r28
   14628:	df 93       	push	r29
   1462a:	00 d0       	rcall	.+0      	; 0x1462c <_ZL9ledSetHexv+0x6>
   1462c:	cd b7       	in	r28, 0x3d	; 61
   1462e:	de b7       	in	r29, 0x3e	; 62
   14630:	61 e0       	ldi	r22, 0x01	; 1
   14632:	70 e0       	ldi	r23, 0x00	; 0
   14634:	80 e0       	ldi	r24, 0x00	; 0
   14636:	90 e0       	ldi	r25, 0x00	; 0
   14638:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   1463c:	67 2b       	or	r22, r23
   1463e:	68 2b       	or	r22, r24
   14640:	69 2b       	or	r22, r25
   14642:	81 f1       	breq	.+96     	; 0x146a4 <_ZL9ledSetHexv+0x7e>
   14644:	61 e0       	ldi	r22, 0x01	; 1
   14646:	70 e0       	ldi	r23, 0x00	; 0
   14648:	80 e0       	ldi	r24, 0x00	; 0
   1464a:	90 e0       	ldi	r25, 0x00	; 0
   1464c:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <_Z11isstringargl>
   14650:	67 2b       	or	r22, r23
   14652:	68 2b       	or	r22, r24
   14654:	69 2b       	or	r22, r25
   14656:	41 f0       	breq	.+16     	; 0x14668 <_ZL9ledSetHexv+0x42>
   14658:	61 e0       	ldi	r22, 0x01	; 1
   1465a:	70 e0       	ldi	r23, 0x00	; 0
   1465c:	80 e0       	ldi	r24, 0x00	; 0
   1465e:	90 e0       	ldi	r25, 0x00	; 0
   14660:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   14664:	cb 01       	movw	r24, r22
   14666:	09 c0       	rjmp	.+18     	; 0x1467a <_ZL9ledSetHexv+0x54>
   14668:	61 e0       	ldi	r22, 0x01	; 1
   1466a:	70 e0       	ldi	r23, 0x00	; 0
   1466c:	80 e0       	ldi	r24, 0x00	; 0
   1466e:	90 e0       	ldi	r25, 0x00	; 0
   14670:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   14674:	cb 01       	movw	r24, r22
   14676:	0e 94 ab 68 	call	0xd156	; 0xd156 <keyGet>
   1467a:	ae 01       	movw	r20, r28
   1467c:	4f 5f       	subi	r20, 0xFF	; 255
   1467e:	5f 4f       	sbci	r21, 0xFF	; 255
   14680:	66 e0       	ldi	r22, 0x06	; 6
   14682:	70 e0       	ldi	r23, 0x00	; 0
   14684:	a9 de       	rcall	.-686    	; 0x143d8 <_ZN13PinoccioShell8parseHexEPKcjPh>
   14686:	2b 81       	ldd	r18, Y+3	; 0x03
   14688:	30 e0       	ldi	r19, 0x00	; 0
   1468a:	4a 81       	ldd	r20, Y+2	; 0x02
   1468c:	50 e0       	ldi	r21, 0x00	; 0
   1468e:	69 81       	ldd	r22, Y+1	; 0x01
   14690:	70 e0       	ldi	r23, 0x00	; 0
   14692:	88 e7       	ldi	r24, 0x78	; 120
   14694:	95 e3       	ldi	r25, 0x35	; 53
   14696:	0e 94 96 6a 	call	0xd52c	; 0xd52c <_ZN9HalRgbLed8setColorEsss>
   1469a:	61 e0       	ldi	r22, 0x01	; 1
   1469c:	70 e0       	ldi	r23, 0x00	; 0
   1469e:	80 e0       	ldi	r24, 0x00	; 0
   146a0:	90 e0       	ldi	r25, 0x00	; 0
   146a2:	03 c0       	rjmp	.+6      	; 0x146aa <_ZL9ledSetHexv+0x84>
   146a4:	60 e0       	ldi	r22, 0x00	; 0
   146a6:	70 e0       	ldi	r23, 0x00	; 0
   146a8:	cb 01       	movw	r24, r22
   146aa:	0f 90       	pop	r0
   146ac:	0f 90       	pop	r0
   146ae:	0f 90       	pop	r0
   146b0:	df 91       	pop	r29
   146b2:	cf 91       	pop	r28
   146b4:	08 95       	ret

000146b6 <_ZN13PinoccioShell4loopEv>:
   146b6:	fc 01       	movw	r30, r24
   146b8:	82 81       	ldd	r24, Z+2	; 0x02
   146ba:	88 23       	and	r24, r24
   146bc:	31 f0       	breq	.+12     	; 0x146ca <_ZN13PinoccioShell4loopEv+0x14>
   146be:	0e 94 d4 36 	call	0x6da8	; 0x6da8 <_Z10runBitlashv>
   146c2:	0e 94 16 14 	call	0x282c	; 0x282c <millis>
   146c6:	0c 94 d6 68 	jmp	0xd1ac	; 0xd1ac <keyLoop>
   146ca:	08 95       	ret

000146cc <_ZN13PinoccioShell10startShellEv>:
   146cc:	bf 92       	push	r11
   146ce:	cf 92       	push	r12
   146d0:	df 92       	push	r13
   146d2:	ef 92       	push	r14
   146d4:	ff 92       	push	r15
   146d6:	0f 93       	push	r16
   146d8:	1f 93       	push	r17
   146da:	cf 93       	push	r28
   146dc:	df 93       	push	r29
   146de:	cd b7       	in	r28, 0x3d	; 61
   146e0:	de b7       	in	r29, 0x3e	; 62
   146e2:	a0 97       	sbiw	r28, 0x20	; 32
   146e4:	0f b6       	in	r0, 0x3f	; 63
   146e6:	f8 94       	cli
   146e8:	de bf       	out	0x3e, r29	; 62
   146ea:	0f be       	out	0x3f, r0	; 63
   146ec:	cd bf       	out	0x3d, r28	; 61
   146ee:	21 e0       	ldi	r18, 0x01	; 1
   146f0:	fc 01       	movw	r30, r24
   146f2:	22 83       	std	Z+2, r18	; 0x02
   146f4:	60 e0       	ldi	r22, 0x00	; 0
   146f6:	72 ec       	ldi	r23, 0xC2	; 194
   146f8:	81 e0       	ldi	r24, 0x01	; 1
   146fa:	90 e0       	ldi	r25, 0x00	; 0
   146fc:	0e 94 b4 36 	call	0x6d68	; 0x6d68 <_Z11initBitlashm>
   14700:	f1 e6       	ldi	r31, 0x61	; 97
   14702:	ef 2e       	mov	r14, r31
   14704:	f1 2c       	mov	r15, r1
   14706:	a5 ec       	ldi	r26, 0xC5	; 197
   14708:	ca 2e       	mov	r12, r26
   1470a:	ae e1       	ldi	r26, 0x1E	; 30
   1470c:	da 2e       	mov	r13, r26
   1470e:	b0 e2       	ldi	r27, 0x20	; 32
   14710:	bb 2e       	mov	r11, r27
   14712:	8e 01       	movw	r16, r28
   14714:	0f 5f       	subi	r16, 0xFF	; 255
   14716:	1f 4f       	sbci	r17, 0xFF	; 255
   14718:	ff 92       	push	r15
   1471a:	ef 92       	push	r14
   1471c:	df 92       	push	r13
   1471e:	cf 92       	push	r12
   14720:	1f 92       	push	r1
   14722:	bf 92       	push	r11
   14724:	1f 93       	push	r17
   14726:	0f 93       	push	r16
   14728:	0e 94 1d b6 	call	0x16c3a	; 0x16c3a <snprintf>
   1472c:	c8 01       	movw	r24, r16
   1472e:	0e 94 0d 29 	call	0x521a	; 0x521a <_Z10findscriptPc>
   14732:	0f b6       	in	r0, 0x3f	; 63
   14734:	f8 94       	cli
   14736:	de bf       	out	0x3e, r29	; 62
   14738:	0f be       	out	0x3f, r0	; 63
   1473a:	cd bf       	out	0x3d, r28	; 61
   1473c:	88 23       	and	r24, r24
   1473e:	19 f0       	breq	.+6      	; 0x14746 <_ZN13PinoccioShell10startShellEv+0x7a>
   14740:	c8 01       	movw	r24, r16
   14742:	0e 94 59 35 	call	0x6ab2	; 0x6ab2 <_Z9doCommandPc>
   14746:	3f ef       	ldi	r19, 0xFF	; 255
   14748:	e3 1a       	sub	r14, r19
   1474a:	f3 0a       	sbc	r15, r19
   1474c:	8a e7       	ldi	r24, 0x7A	; 122
   1474e:	e8 16       	cp	r14, r24
   14750:	f1 04       	cpc	r15, r1
   14752:	11 f7       	brne	.-60     	; 0x14718 <_ZN13PinoccioShell10startShellEv+0x4c>
   14754:	62 e0       	ldi	r22, 0x02	; 2
   14756:	e6 2e       	mov	r14, r22
   14758:	f1 2c       	mov	r15, r1
   1475a:	70 ed       	ldi	r23, 0xD0	; 208
   1475c:	c7 2e       	mov	r12, r23
   1475e:	7e e1       	ldi	r23, 0x1E	; 30
   14760:	d7 2e       	mov	r13, r23
   14762:	e0 e2       	ldi	r30, 0x20	; 32
   14764:	be 2e       	mov	r11, r30
   14766:	ff 92       	push	r15
   14768:	ef 92       	push	r14
   1476a:	df 92       	push	r13
   1476c:	cf 92       	push	r12
   1476e:	1f 92       	push	r1
   14770:	bf 92       	push	r11
   14772:	1f 93       	push	r17
   14774:	0f 93       	push	r16
   14776:	0e 94 1d b6 	call	0x16c3a	; 0x16c3a <snprintf>
   1477a:	c8 01       	movw	r24, r16
   1477c:	0e 94 0d 29 	call	0x521a	; 0x521a <_Z10findscriptPc>
   14780:	0f b6       	in	r0, 0x3f	; 63
   14782:	f8 94       	cli
   14784:	de bf       	out	0x3e, r29	; 62
   14786:	0f be       	out	0x3f, r0	; 63
   14788:	cd bf       	out	0x3d, r28	; 61
   1478a:	88 23       	and	r24, r24
   1478c:	19 f0       	breq	.+6      	; 0x14794 <_ZN13PinoccioShell10startShellEv+0xc8>
   1478e:	c8 01       	movw	r24, r16
   14790:	0e 94 59 35 	call	0x6ab2	; 0x6ab2 <_Z9doCommandPc>
   14794:	ff ef       	ldi	r31, 0xFF	; 255
   14796:	ef 1a       	sub	r14, r31
   14798:	ff 0a       	sbc	r15, r31
   1479a:	29 e0       	ldi	r18, 0x09	; 9
   1479c:	e2 16       	cp	r14, r18
   1479e:	f1 04       	cpc	r15, r1
   147a0:	11 f7       	brne	.-60     	; 0x14766 <_ZN13PinoccioShell10startShellEv+0x9a>
   147a2:	e1 2c       	mov	r14, r1
   147a4:	f1 2c       	mov	r15, r1
   147a6:	4c ed       	ldi	r20, 0xDC	; 220
   147a8:	c4 2e       	mov	r12, r20
   147aa:	4e e1       	ldi	r20, 0x1E	; 30
   147ac:	d4 2e       	mov	r13, r20
   147ae:	50 e2       	ldi	r21, 0x20	; 32
   147b0:	b5 2e       	mov	r11, r21
   147b2:	ff 92       	push	r15
   147b4:	ef 92       	push	r14
   147b6:	df 92       	push	r13
   147b8:	cf 92       	push	r12
   147ba:	1f 92       	push	r1
   147bc:	bf 92       	push	r11
   147be:	1f 93       	push	r17
   147c0:	0f 93       	push	r16
   147c2:	0e 94 1d b6 	call	0x16c3a	; 0x16c3a <snprintf>
   147c6:	c8 01       	movw	r24, r16
   147c8:	0e 94 0d 29 	call	0x521a	; 0x521a <_Z10findscriptPc>
   147cc:	0f b6       	in	r0, 0x3f	; 63
   147ce:	f8 94       	cli
   147d0:	de bf       	out	0x3e, r29	; 62
   147d2:	0f be       	out	0x3f, r0	; 63
   147d4:	cd bf       	out	0x3d, r28	; 61
   147d6:	88 23       	and	r24, r24
   147d8:	19 f0       	breq	.+6      	; 0x147e0 <_ZN13PinoccioShell10startShellEv+0x114>
   147da:	c8 01       	movw	r24, r16
   147dc:	0e 94 59 35 	call	0x6ab2	; 0x6ab2 <_Z9doCommandPc>
   147e0:	ff ef       	ldi	r31, 0xFF	; 255
   147e2:	ef 1a       	sub	r14, r31
   147e4:	ff 0a       	sbc	r15, r31
   147e6:	28 e0       	ldi	r18, 0x08	; 8
   147e8:	e2 16       	cp	r14, r18
   147ea:	f1 04       	cpc	r15, r1
   147ec:	11 f7       	brne	.-60     	; 0x147b2 <_ZN13PinoccioShell10startShellEv+0xe6>
   147ee:	a0 96       	adiw	r28, 0x20	; 32
   147f0:	0f b6       	in	r0, 0x3f	; 63
   147f2:	f8 94       	cli
   147f4:	de bf       	out	0x3e, r29	; 62
   147f6:	0f be       	out	0x3f, r0	; 63
   147f8:	cd bf       	out	0x3d, r28	; 61
   147fa:	df 91       	pop	r29
   147fc:	cf 91       	pop	r28
   147fe:	1f 91       	pop	r17
   14800:	0f 91       	pop	r16
   14802:	ff 90       	pop	r15
   14804:	ef 90       	pop	r14
   14806:	df 90       	pop	r13
   14808:	cf 90       	pop	r12
   1480a:	bf 90       	pop	r11
   1480c:	08 95       	ret

0001480e <_ZN13PinoccioShell5setupEv>:
   1480e:	cf 93       	push	r28
   14810:	df 93       	push	r29
   14812:	ec 01       	movw	r28, r24
   14814:	0e 94 87 69 	call	0xd30e	; 0xd30e <keyInit>
   14818:	6c e5       	ldi	r22, 0x5C	; 92
   1481a:	73 e9       	ldi	r23, 0x93	; 147
   1481c:	86 ea       	ldi	r24, 0xA6	; 166
   1481e:	9c e0       	ldi	r25, 0x0C	; 12
   14820:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14824:	6d ec       	ldi	r22, 0xCD	; 205
   14826:	72 e8       	ldi	r23, 0x82	; 130
   14828:	88 ee       	ldi	r24, 0xE8	; 232
   1482a:	9e e1       	ldi	r25, 0x1E	; 30
   1482c:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14830:	60 ee       	ldi	r22, 0xE0	; 224
   14832:	72 e8       	ldi	r23, 0x82	; 130
   14834:	89 ef       	ldi	r24, 0xF9	; 249
   14836:	9e e1       	ldi	r25, 0x1E	; 30
   14838:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   1483c:	66 ed       	ldi	r22, 0xD6	; 214
   1483e:	72 e8       	ldi	r23, 0x82	; 130
   14840:	87 e0       	ldi	r24, 0x07	; 7
   14842:	9f e1       	ldi	r25, 0x1F	; 31
   14844:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14848:	63 e5       	ldi	r22, 0x53	; 83
   1484a:	73 e9       	ldi	r23, 0x93	; 147
   1484c:	85 e1       	ldi	r24, 0x15	; 21
   1484e:	9f e1       	ldi	r25, 0x1F	; 31
   14850:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14854:	6a e4       	ldi	r22, 0x4A	; 74
   14856:	73 e9       	ldi	r23, 0x93	; 147
   14858:	85 e2       	ldi	r24, 0x25	; 37
   1485a:	9f e1       	ldi	r25, 0x1F	; 31
   1485c:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14860:	6a e5       	ldi	r22, 0x5A	; 90
   14862:	7f e7       	ldi	r23, 0x7F	; 127
   14864:	86 e3       	ldi	r24, 0x36	; 54
   14866:	9f e1       	ldi	r25, 0x1F	; 31
   14868:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   1486c:	63 e8       	ldi	r22, 0x83	; 131
   1486e:	78 e8       	ldi	r23, 0x88	; 136
   14870:	82 e4       	ldi	r24, 0x42	; 66
   14872:	9f e1       	ldi	r25, 0x1F	; 31
   14874:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14878:	69 e5       	ldi	r22, 0x59	; 89
   1487a:	7b e8       	ldi	r23, 0x8B	; 139
   1487c:	8f e4       	ldi	r24, 0x4F	; 79
   1487e:	9f e1       	ldi	r25, 0x1F	; 31
   14880:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14884:	6b e3       	ldi	r22, 0x3B	; 59
   14886:	73 e9       	ldi	r23, 0x93	; 147
   14888:	8b e5       	ldi	r24, 0x5B	; 91
   1488a:	9f e1       	ldi	r25, 0x1F	; 31
   1488c:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14890:	6c e2       	ldi	r22, 0x2C	; 44
   14892:	73 e9       	ldi	r23, 0x93	; 147
   14894:	89 e6       	ldi	r24, 0x69	; 105
   14896:	9f e1       	ldi	r25, 0x1F	; 31
   14898:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   1489c:	6d e1       	ldi	r22, 0x1D	; 29
   1489e:	73 e9       	ldi	r23, 0x93	; 147
   148a0:	8a e7       	ldi	r24, 0x7A	; 122
   148a2:	9f e1       	ldi	r25, 0x1F	; 31
   148a4:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   148a8:	6d e1       	ldi	r22, 0x1D	; 29
   148aa:	73 e9       	ldi	r23, 0x93	; 147
   148ac:	83 e8       	ldi	r24, 0x83	; 131
   148ae:	9f e1       	ldi	r25, 0x1F	; 31
   148b0:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   148b4:	61 ef       	ldi	r22, 0xF1	; 241
   148b6:	72 e9       	ldi	r23, 0x92	; 146
   148b8:	8f e8       	ldi	r24, 0x8F	; 143
   148ba:	9f e1       	ldi	r25, 0x1F	; 31
   148bc:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   148c0:	60 e5       	ldi	r22, 0x50	; 80
   148c2:	7b e8       	ldi	r23, 0x8B	; 139
   148c4:	8b e9       	ldi	r24, 0x9B	; 155
   148c6:	9f e1       	ldi	r25, 0x1F	; 31
   148c8:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   148cc:	62 ee       	ldi	r22, 0xE2	; 226
   148ce:	72 e9       	ldi	r23, 0x92	; 146
   148d0:	89 ea       	ldi	r24, 0xA9	; 169
   148d2:	9f e1       	ldi	r25, 0x1F	; 31
   148d4:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   148d8:	63 ed       	ldi	r22, 0xD3	; 211
   148da:	72 e9       	ldi	r23, 0x92	; 146
   148dc:	88 eb       	ldi	r24, 0xB8	; 184
   148de:	9f e1       	ldi	r25, 0x1F	; 31
   148e0:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   148e4:	64 ec       	ldi	r22, 0xC4	; 196
   148e6:	72 e9       	ldi	r23, 0x92	; 146
   148e8:	88 ec       	ldi	r24, 0xC8	; 200
   148ea:	9f e1       	ldi	r25, 0x1F	; 31
   148ec:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   148f0:	69 ee       	ldi	r22, 0xE9	; 233
   148f2:	77 ea       	ldi	r23, 0xA7	; 167
   148f4:	85 ed       	ldi	r24, 0xD5	; 213
   148f6:	9f e1       	ldi	r25, 0x1F	; 31
   148f8:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   148fc:	6e e8       	ldi	r22, 0x8E	; 142
   148fe:	79 e8       	ldi	r23, 0x89	; 137
   14900:	8f ed       	ldi	r24, 0xDF	; 223
   14902:	9f e1       	ldi	r25, 0x1F	; 31
   14904:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14908:	62 ea       	ldi	r22, 0xA2	; 162
   1490a:	72 e9       	ldi	r23, 0x92	; 146
   1490c:	8c ee       	ldi	r24, 0xEC	; 236
   1490e:	9f e1       	ldi	r25, 0x1F	; 31
   14910:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14914:	6f eb       	ldi	r22, 0xBF	; 191
   14916:	70 e9       	ldi	r23, 0x90	; 144
   14918:	88 ef       	ldi	r24, 0xF8	; 248
   1491a:	9f e1       	ldi	r25, 0x1F	; 31
   1491c:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14920:	6f ea       	ldi	r22, 0xAF	; 175
   14922:	77 ea       	ldi	r23, 0xA7	; 167
   14924:	85 e0       	ldi	r24, 0x05	; 5
   14926:	90 e2       	ldi	r25, 0x20	; 32
   14928:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   1492c:	6f e5       	ldi	r22, 0x5F	; 95
   1492e:	7f e7       	ldi	r23, 0x7F	; 127
   14930:	83 e1       	ldi	r24, 0x13	; 19
   14932:	90 e2       	ldi	r25, 0x20	; 32
   14934:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14938:	6b e6       	ldi	r22, 0x6B	; 107
   1493a:	7f e7       	ldi	r23, 0x7F	; 127
   1493c:	8f e1       	ldi	r24, 0x1F	; 31
   1493e:	90 e2       	ldi	r25, 0x20	; 32
   14940:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14944:	69 ea       	ldi	r22, 0xA9	; 169
   14946:	72 e8       	ldi	r23, 0x82	; 130
   14948:	8f e9       	ldi	r24, 0x9F	; 159
   1494a:	9d e1       	ldi	r25, 0x1D	; 29
   1494c:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14950:	6b e8       	ldi	r22, 0x8B	; 139
   14952:	72 e8       	ldi	r23, 0x82	; 130
   14954:	89 e2       	ldi	r24, 0x29	; 41
   14956:	90 e2       	ldi	r25, 0x20	; 32
   14958:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   1495c:	69 e6       	ldi	r22, 0x69	; 105
   1495e:	70 e9       	ldi	r23, 0x90	; 144
   14960:	8c e3       	ldi	r24, 0x3C	; 60
   14962:	90 e2       	ldi	r25, 0x20	; 32
   14964:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14968:	60 e7       	ldi	r22, 0x70	; 112
   1496a:	70 e9       	ldi	r23, 0x90	; 144
   1496c:	89 e4       	ldi	r24, 0x49	; 73
   1496e:	90 e2       	ldi	r25, 0x20	; 32
   14970:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14974:	63 e3       	ldi	r22, 0x33	; 51
   14976:	71 ea       	ldi	r23, 0xA1	; 161
   14978:	80 ea       	ldi	r24, 0xA0	; 160
   1497a:	9e e1       	ldi	r25, 0x1E	; 30
   1497c:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14980:	61 eb       	ldi	r22, 0xB1	; 177
   14982:	71 ea       	ldi	r23, 0xA1	; 161
   14984:	8e e0       	ldi	r24, 0x0E	; 14
   14986:	91 e2       	ldi	r25, 0x21	; 33
   14988:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   1498c:	62 ed       	ldi	r22, 0xD2	; 210
   1498e:	7a e8       	ldi	r23, 0x8A	; 138
   14990:	84 ee       	ldi	r24, 0xE4	; 228
   14992:	9f e1       	ldi	r25, 0x1F	; 31
   14994:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14998:	60 e6       	ldi	r22, 0x60	; 96
   1499a:	70 e9       	ldi	r23, 0x90	; 144
   1499c:	83 e5       	ldi	r24, 0x53	; 83
   1499e:	90 e2       	ldi	r25, 0x20	; 32
   149a0:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   149a4:	64 e6       	ldi	r22, 0x64	; 100
   149a6:	79 e9       	ldi	r23, 0x99	; 153
   149a8:	8b e5       	ldi	r24, 0x5B	; 91
   149aa:	90 e2       	ldi	r25, 0x20	; 32
   149ac:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   149b0:	6f e1       	ldi	r22, 0x1F	; 31
   149b2:	79 e9       	ldi	r23, 0x99	; 153
   149b4:	83 e6       	ldi	r24, 0x63	; 99
   149b6:	90 e2       	ldi	r25, 0x20	; 32
   149b8:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   149bc:	6a ed       	ldi	r22, 0xDA	; 218
   149be:	78 e9       	ldi	r23, 0x98	; 152
   149c0:	8d e6       	ldi	r24, 0x6D	; 109
   149c2:	90 e2       	ldi	r25, 0x20	; 32
   149c4:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   149c8:	65 e9       	ldi	r22, 0x95	; 149
   149ca:	78 e9       	ldi	r23, 0x98	; 152
   149cc:	86 e7       	ldi	r24, 0x76	; 118
   149ce:	90 e2       	ldi	r25, 0x20	; 32
   149d0:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   149d4:	60 e5       	ldi	r22, 0x50	; 80
   149d6:	78 e9       	ldi	r23, 0x98	; 152
   149d8:	8f e7       	ldi	r24, 0x7F	; 127
   149da:	90 e2       	ldi	r25, 0x20	; 32
   149dc:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   149e0:	6b e0       	ldi	r22, 0x0B	; 11
   149e2:	78 e9       	ldi	r23, 0x98	; 152
   149e4:	8a e8       	ldi	r24, 0x8A	; 138
   149e6:	90 e2       	ldi	r25, 0x20	; 32
   149e8:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   149ec:	66 ec       	ldi	r22, 0xC6	; 198
   149ee:	77 e9       	ldi	r23, 0x97	; 151
   149f0:	86 e9       	ldi	r24, 0x96	; 150
   149f2:	90 e2       	ldi	r25, 0x20	; 32
   149f4:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   149f8:	61 e8       	ldi	r22, 0x81	; 129
   149fa:	77 e9       	ldi	r23, 0x97	; 151
   149fc:	81 ea       	ldi	r24, 0xA1	; 161
   149fe:	90 e2       	ldi	r25, 0x20	; 32
   14a00:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14a04:	6c e3       	ldi	r22, 0x3C	; 60
   14a06:	77 e9       	ldi	r23, 0x97	; 151
   14a08:	8c ea       	ldi	r24, 0xAC	; 172
   14a0a:	90 e2       	ldi	r25, 0x20	; 32
   14a0c:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14a10:	67 ef       	ldi	r22, 0xF7	; 247
   14a12:	76 e9       	ldi	r23, 0x96	; 150
   14a14:	86 eb       	ldi	r24, 0xB6	; 182
   14a16:	90 e2       	ldi	r25, 0x20	; 32
   14a18:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14a1c:	67 ef       	ldi	r22, 0xF7	; 247
   14a1e:	76 e9       	ldi	r23, 0x96	; 150
   14a20:	80 ec       	ldi	r24, 0xC0	; 192
   14a22:	90 e2       	ldi	r25, 0x20	; 32
   14a24:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14a28:	60 ea       	ldi	r22, 0xA0	; 160
   14a2a:	7f e8       	ldi	r23, 0x8F	; 143
   14a2c:	87 ec       	ldi	r24, 0xC7	; 199
   14a2e:	90 e2       	ldi	r25, 0x20	; 32
   14a30:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14a34:	63 e1       	ldi	r22, 0x13	; 19
   14a36:	73 ea       	ldi	r23, 0xA3	; 163
   14a38:	81 ed       	ldi	r24, 0xD1	; 209
   14a3a:	90 e2       	ldi	r25, 0x20	; 32
   14a3c:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14a40:	6b ec       	ldi	r22, 0xCB	; 203
   14a42:	70 e8       	ldi	r23, 0x80	; 128
   14a44:	8c ed       	ldi	r24, 0xDC	; 220
   14a46:	90 e2       	ldi	r25, 0x20	; 32
   14a48:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14a4c:	66 e6       	ldi	r22, 0x66	; 102
   14a4e:	7f e8       	ldi	r23, 0x8F	; 143
   14a50:	87 ee       	ldi	r24, 0xE7	; 231
   14a52:	90 e2       	ldi	r25, 0x20	; 32
   14a54:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14a58:	6d e5       	ldi	r22, 0x5D	; 93
   14a5a:	7f e8       	ldi	r23, 0x8F	; 143
   14a5c:	82 ef       	ldi	r24, 0xF2	; 242
   14a5e:	90 e2       	ldi	r25, 0x20	; 32
   14a60:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14a64:	63 e2       	ldi	r22, 0x23	; 35
   14a66:	7f e8       	ldi	r23, 0x8F	; 143
   14a68:	8c ef       	ldi	r24, 0xFC	; 252
   14a6a:	90 e2       	ldi	r25, 0x20	; 32
   14a6c:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14a70:	61 e6       	ldi	r22, 0x61	; 97
   14a72:	78 e8       	ldi	r23, 0x88	; 136
   14a74:	8a e0       	ldi	r24, 0x0A	; 10
   14a76:	91 e2       	ldi	r25, 0x21	; 33
   14a78:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14a7c:	64 e7       	ldi	r22, 0x74	; 116
   14a7e:	7f e7       	ldi	r23, 0x7F	; 127
   14a80:	84 e9       	ldi	r24, 0x94	; 148
   14a82:	9a e1       	ldi	r25, 0x1A	; 26
   14a84:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14a88:	69 e7       	ldi	r22, 0x79	; 121
   14a8a:	7f e7       	ldi	r23, 0x7F	; 127
   14a8c:	8d e9       	ldi	r24, 0x9D	; 157
   14a8e:	90 e2       	ldi	r25, 0x20	; 32
   14a90:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14a94:	6d e7       	ldi	r22, 0x7D	; 125
   14a96:	7f e7       	ldi	r23, 0x7F	; 127
   14a98:	8a e2       	ldi	r24, 0x2A	; 42
   14a9a:	91 e2       	ldi	r25, 0x21	; 33
   14a9c:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14aa0:	61 e8       	ldi	r22, 0x81	; 129
   14aa2:	7f e7       	ldi	r23, 0x7F	; 127
   14aa4:	88 e3       	ldi	r24, 0x38	; 56
   14aa6:	91 e2       	ldi	r25, 0x21	; 33
   14aa8:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14aac:	66 e8       	ldi	r22, 0x86	; 134
   14aae:	7f e7       	ldi	r23, 0x7F	; 127
   14ab0:	85 e1       	ldi	r24, 0x15	; 21
   14ab2:	91 e2       	ldi	r25, 0x21	; 33
   14ab4:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14ab8:	64 e7       	ldi	r22, 0x74	; 116
   14aba:	7d e9       	ldi	r23, 0x9D	; 157
   14abc:	82 e2       	ldi	r24, 0x22	; 34
   14abe:	91 e2       	ldi	r25, 0x21	; 33
   14ac0:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14ac4:	64 ee       	ldi	r22, 0xE4	; 228
   14ac6:	7d e9       	ldi	r23, 0x9D	; 157
   14ac8:	80 e3       	ldi	r24, 0x30	; 48
   14aca:	91 e2       	ldi	r25, 0x21	; 33
   14acc:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14ad0:	6b e3       	ldi	r22, 0x3B	; 59
   14ad2:	7e e9       	ldi	r23, 0x9E	; 158
   14ad4:	8f e3       	ldi	r24, 0x3F	; 63
   14ad6:	91 e2       	ldi	r25, 0x21	; 33
   14ad8:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14adc:	62 e9       	ldi	r22, 0x92	; 146
   14ade:	7e e9       	ldi	r23, 0x9E	; 158
   14ae0:	8b e4       	ldi	r24, 0x4B	; 75
   14ae2:	91 e2       	ldi	r25, 0x21	; 33
   14ae4:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14ae8:	6f e3       	ldi	r22, 0x3F	; 63
   14aea:	70 ea       	ldi	r23, 0xA0	; 160
   14aec:	87 e5       	ldi	r24, 0x57	; 87
   14aee:	91 e2       	ldi	r25, 0x21	; 33
   14af0:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14af4:	60 ef       	ldi	r22, 0xF0	; 240
   14af6:	7e e9       	ldi	r23, 0x9E	; 158
   14af8:	80 e6       	ldi	r24, 0x60	; 96
   14afa:	91 e2       	ldi	r25, 0x21	; 33
   14afc:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14b00:	67 e5       	ldi	r22, 0x57	; 87
   14b02:	7f e9       	ldi	r23, 0x9F	; 159
   14b04:	8a e6       	ldi	r24, 0x6A	; 106
   14b06:	91 e2       	ldi	r25, 0x21	; 33
   14b08:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14b0c:	6f e3       	ldi	r22, 0x3F	; 63
   14b0e:	78 e8       	ldi	r23, 0x88	; 136
   14b10:	83 e7       	ldi	r24, 0x73	; 115
   14b12:	91 e2       	ldi	r25, 0x21	; 33
   14b14:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14b18:	6d e1       	ldi	r22, 0x1D	; 29
   14b1a:	78 e8       	ldi	r23, 0x88	; 136
   14b1c:	86 e8       	ldi	r24, 0x86	; 134
   14b1e:	91 e2       	ldi	r25, 0x21	; 33
   14b20:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14b24:	61 e0       	ldi	r22, 0x01	; 1
   14b26:	7f e8       	ldi	r23, 0x8F	; 143
   14b28:	88 e9       	ldi	r24, 0x98	; 152
   14b2a:	91 e2       	ldi	r25, 0x21	; 33
   14b2c:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14b30:	61 e3       	ldi	r22, 0x31	; 49
   14b32:	7c e9       	ldi	r23, 0x9C	; 156
   14b34:	88 ea       	ldi	r24, 0xA8	; 168
   14b36:	91 e2       	ldi	r25, 0x21	; 33
   14b38:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14b3c:	60 ec       	ldi	r22, 0xC0	; 192
   14b3e:	7c e9       	ldi	r23, 0x9C	; 156
   14b40:	86 eb       	ldi	r24, 0xB6	; 182
   14b42:	91 e2       	ldi	r25, 0x21	; 33
   14b44:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14b48:	62 e4       	ldi	r22, 0x42	; 66
   14b4a:	72 ea       	ldi	r23, 0xA2	; 162
   14b4c:	86 ec       	ldi	r24, 0xC6	; 198
   14b4e:	91 e2       	ldi	r25, 0x21	; 33
   14b50:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14b54:	6b eb       	ldi	r22, 0xBB	; 187
   14b56:	7d e8       	ldi	r23, 0x8D	; 141
   14b58:	8d ed       	ldi	r24, 0xDD	; 221
   14b5a:	91 e2       	ldi	r25, 0x21	; 33
   14b5c:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14b60:	6f ea       	ldi	r22, 0xAF	; 175
   14b62:	78 ea       	ldi	r23, 0xA8	; 168
   14b64:	8d ee       	ldi	r24, 0xED	; 237
   14b66:	91 e2       	ldi	r25, 0x21	; 33
   14b68:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14b6c:	60 ed       	ldi	r22, 0xD0	; 208
   14b6e:	7c e8       	ldi	r23, 0x8C	; 140
   14b70:	80 e0       	ldi	r24, 0x00	; 0
   14b72:	92 e2       	ldi	r25, 0x22	; 34
   14b74:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14b78:	6d e9       	ldi	r22, 0x9D	; 157
   14b7a:	7f e7       	ldi	r23, 0x7F	; 127
   14b7c:	8d e0       	ldi	r24, 0x0D	; 13
   14b7e:	92 e2       	ldi	r25, 0x22	; 34
   14b80:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14b84:	6f e8       	ldi	r22, 0x8F	; 143
   14b86:	76 e9       	ldi	r23, 0x96	; 150
   14b88:	8f e1       	ldi	r24, 0x1F	; 31
   14b8a:	92 e2       	ldi	r25, 0x22	; 34
   14b8c:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14b90:	6e e9       	ldi	r22, 0x9E	; 158
   14b92:	7b e8       	ldi	r23, 0x8B	; 139
   14b94:	8b e2       	ldi	r24, 0x2B	; 43
   14b96:	92 e2       	ldi	r25, 0x22	; 34
   14b98:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14b9c:	67 eb       	ldi	r22, 0xB7	; 183
   14b9e:	79 e9       	ldi	r23, 0x99	; 153
   14ba0:	86 e3       	ldi	r24, 0x36	; 54
   14ba2:	92 e2       	ldi	r25, 0x22	; 34
   14ba4:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14ba8:	6b e8       	ldi	r22, 0x8B	; 139
   14baa:	7f e7       	ldi	r23, 0x7F	; 127
   14bac:	83 e8       	ldi	r24, 0x83	; 131
   14bae:	9d e1       	ldi	r25, 0x1D	; 29
   14bb0:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14bb4:	6f e3       	ldi	r22, 0x3F	; 63
   14bb6:	7b e8       	ldi	r23, 0x8B	; 139
   14bb8:	82 e4       	ldi	r24, 0x42	; 66
   14bba:	92 e2       	ldi	r25, 0x22	; 34
   14bbc:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14bc0:	60 e3       	ldi	r22, 0x30	; 48
   14bc2:	7b e8       	ldi	r23, 0x8B	; 139
   14bc4:	80 e5       	ldi	r24, 0x50	; 80
   14bc6:	92 e2       	ldi	r25, 0x22	; 34
   14bc8:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14bcc:	64 e0       	ldi	r22, 0x04	; 4
   14bce:	7b e8       	ldi	r23, 0x8B	; 139
   14bd0:	8c e5       	ldi	r24, 0x5C	; 92
   14bd2:	92 e2       	ldi	r25, 0x22	; 34
   14bd4:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14bd8:	6c eb       	ldi	r22, 0xBC	; 188
   14bda:	7a e8       	ldi	r23, 0x8A	; 138
   14bdc:	88 e6       	ldi	r24, 0x68	; 104
   14bde:	92 e2       	ldi	r25, 0x22	; 34
   14be0:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14be4:	69 e7       	ldi	r22, 0x79	; 121
   14be6:	77 ea       	ldi	r23, 0xA7	; 167
   14be8:	83 e7       	ldi	r24, 0x73	; 115
   14bea:	92 e2       	ldi	r25, 0x22	; 34
   14bec:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14bf0:	6b ea       	ldi	r22, 0xAB	; 171
   14bf2:	7a e8       	ldi	r23, 0x8A	; 138
   14bf4:	8c e7       	ldi	r24, 0x7C	; 124
   14bf6:	92 e2       	ldi	r25, 0x22	; 34
   14bf8:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14bfc:	6a e9       	ldi	r22, 0x9A	; 154
   14bfe:	7a e8       	ldi	r23, 0x8A	; 138
   14c00:	89 e8       	ldi	r24, 0x89	; 137
   14c02:	92 e2       	ldi	r25, 0x22	; 34
   14c04:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14c08:	63 e6       	ldi	r22, 0x63	; 99
   14c0a:	7a e8       	ldi	r23, 0x8A	; 138
   14c0c:	85 e9       	ldi	r24, 0x95	; 149
   14c0e:	92 e2       	ldi	r25, 0x22	; 34
   14c10:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14c14:	6b e7       	ldi	r22, 0x7B	; 123
   14c16:	79 e8       	ldi	r23, 0x89	; 137
   14c18:	85 ea       	ldi	r24, 0xA5	; 165
   14c1a:	92 e2       	ldi	r25, 0x22	; 34
   14c1c:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14c20:	65 ee       	ldi	r22, 0xE5	; 229
   14c22:	75 e9       	ldi	r23, 0x95	; 149
   14c24:	8f e7       	ldi	r24, 0x7F	; 127
   14c26:	9f e1       	ldi	r25, 0x1F	; 31
   14c28:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14c2c:	6d e4       	ldi	r22, 0x4D	; 77
   14c2e:	7a e8       	ldi	r23, 0x8A	; 138
   14c30:	84 eb       	ldi	r24, 0xB4	; 180
   14c32:	92 e2       	ldi	r25, 0x22	; 34
   14c34:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14c38:	66 e3       	ldi	r22, 0x36	; 54
   14c3a:	7a e8       	ldi	r23, 0x8A	; 138
   14c3c:	8e eb       	ldi	r24, 0xBE	; 190
   14c3e:	92 e2       	ldi	r25, 0x22	; 34
   14c40:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14c44:	6f e2       	ldi	r22, 0x2F	; 47
   14c46:	76 e9       	ldi	r23, 0x96	; 150
   14c48:	89 ec       	ldi	r24, 0xC9	; 201
   14c4a:	92 e2       	ldi	r25, 0x22	; 34
   14c4c:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14c50:	80 ea       	ldi	r24, 0xA0	; 160
   14c52:	95 e3       	ldi	r25, 0x35	; 53
   14c54:	0e 94 b5 70 	call	0xe16a	; 0xe16a <_ZN13PinoccioScout11isLeadScoutEv>
   14c58:	88 23       	and	r24, r24
   14c5a:	09 f4       	brne	.+2      	; 0x14c5e <_ZN13PinoccioShell5setupEv+0x450>
   14c5c:	60 c0       	rjmp	.+192    	; 0x14d1e <_ZN13PinoccioShell5setupEv+0x510>
   14c5e:	61 ea       	ldi	r22, 0xA1	; 161
   14c60:	79 e8       	ldi	r23, 0x89	; 137
   14c62:	82 ed       	ldi	r24, 0xD2	; 210
   14c64:	92 e2       	ldi	r25, 0x22	; 34
   14c66:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14c6a:	68 eb       	ldi	r22, 0xB8	; 184
   14c6c:	75 e9       	ldi	r23, 0x95	; 149
   14c6e:	8e ed       	ldi	r24, 0xDE	; 222
   14c70:	92 e2       	ldi	r25, 0x22	; 34
   14c72:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14c76:	6b e8       	ldi	r22, 0x8B	; 139
   14c78:	75 e9       	ldi	r23, 0x95	; 149
   14c7a:	8a ee       	ldi	r24, 0xEA	; 234
   14c7c:	92 e2       	ldi	r25, 0x22	; 34
   14c7e:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14c82:	6d e4       	ldi	r22, 0x4D	; 77
   14c84:	75 e9       	ldi	r23, 0x95	; 149
   14c86:	84 ef       	ldi	r24, 0xF4	; 244
   14c88:	92 e2       	ldi	r25, 0x22	; 34
   14c8a:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14c8e:	63 e1       	ldi	r22, 0x13	; 19
   14c90:	75 e9       	ldi	r23, 0x95	; 149
   14c92:	80 e0       	ldi	r24, 0x00	; 0
   14c94:	93 e2       	ldi	r25, 0x23	; 35
   14c96:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14c9a:	67 eb       	ldi	r22, 0xB7	; 183
   14c9c:	78 e8       	ldi	r23, 0x88	; 136
   14c9e:	8a e0       	ldi	r24, 0x0A	; 10
   14ca0:	93 e2       	ldi	r25, 0x23	; 35
   14ca2:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14ca6:	6e ea       	ldi	r22, 0xAE	; 174
   14ca8:	78 e8       	ldi	r23, 0x88	; 136
   14caa:	86 e1       	ldi	r24, 0x16	; 22
   14cac:	93 e2       	ldi	r25, 0x23	; 35
   14cae:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14cb2:	65 ea       	ldi	r22, 0xA5	; 165
   14cb4:	78 e8       	ldi	r23, 0x88	; 136
   14cb6:	87 e2       	ldi	r24, 0x27	; 39
   14cb8:	93 e2       	ldi	r25, 0x23	; 35
   14cba:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14cbe:	63 ee       	ldi	r22, 0xE3	; 227
   14cc0:	74 e9       	ldi	r23, 0x94	; 148
   14cc2:	89 e3       	ldi	r24, 0x39	; 57
   14cc4:	93 e2       	ldi	r25, 0x23	; 35
   14cc6:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14cca:	63 eb       	ldi	r22, 0xB3	; 179
   14ccc:	74 e9       	ldi	r23, 0x94	; 148
   14cce:	86 e4       	ldi	r24, 0x46	; 70
   14cd0:	93 e2       	ldi	r25, 0x23	; 35
   14cd2:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14cd6:	63 e8       	ldi	r22, 0x83	; 131
   14cd8:	74 e9       	ldi	r23, 0x94	; 148
   14cda:	80 e5       	ldi	r24, 0x50	; 80
   14cdc:	93 e2       	ldi	r25, 0x23	; 35
   14cde:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14ce2:	6a e5       	ldi	r22, 0x5A	; 90
   14ce4:	74 e9       	ldi	r23, 0x94	; 148
   14ce6:	8f e5       	ldi	r24, 0x5F	; 95
   14ce8:	93 e2       	ldi	r25, 0x23	; 35
   14cea:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14cee:	63 e3       	ldi	r22, 0x33	; 51
   14cf0:	74 e9       	ldi	r23, 0x94	; 148
   14cf2:	8c e6       	ldi	r24, 0x6C	; 108
   14cf4:	93 e2       	ldi	r25, 0x23	; 35
   14cf6:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14cfa:	6c e0       	ldi	r22, 0x0C	; 12
   14cfc:	74 e9       	ldi	r23, 0x94	; 148
   14cfe:	87 e7       	ldi	r24, 0x77	; 119
   14d00:	93 e2       	ldi	r25, 0x23	; 35
   14d02:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14d06:	68 e9       	ldi	r22, 0x98	; 152
   14d08:	7f e7       	ldi	r23, 0x7F	; 127
   14d0a:	83 e8       	ldi	r24, 0x83	; 131
   14d0c:	93 e2       	ldi	r25, 0x23	; 35
   14d0e:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14d12:	66 ee       	ldi	r22, 0xE6	; 230
   14d14:	77 e8       	ldi	r23, 0x87	; 135
   14d16:	80 e9       	ldi	r24, 0x90	; 144
   14d18:	93 e2       	ldi	r25, 0x23	; 35
   14d1a:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
   14d1e:	86 ed       	ldi	r24, 0xD6	; 214
   14d20:	96 e8       	ldi	r25, 0x86	; 134
   14d22:	90 93 b2 35 	sts	0x35B2, r25
   14d26:	80 93 b1 35 	sts	0x35B1, r24
   14d2a:	8b ec       	ldi	r24, 0xCB	; 203
   14d2c:	94 e8       	ldi	r25, 0x84	; 132
   14d2e:	90 93 b4 35 	sts	0x35B4, r25
   14d32:	80 93 b3 35 	sts	0x35B3, r24
   14d36:	8d e9       	ldi	r24, 0x9D	; 157
   14d38:	9b e9       	ldi	r25, 0x9B	; 155
   14d3a:	90 93 b6 35 	sts	0x35B6, r25
   14d3e:	80 93 b5 35 	sts	0x35B5, r24
   14d42:	81 e4       	ldi	r24, 0x41	; 65
   14d44:	9b e9       	ldi	r25, 0x9B	; 155
   14d46:	90 93 b8 35 	sts	0x35B8, r25
   14d4a:	80 93 b7 35 	sts	0x35B7, r24
   14d4e:	85 ee       	ldi	r24, 0xE5	; 229
   14d50:	9a e9       	ldi	r25, 0x9A	; 154
   14d52:	90 93 ba 35 	sts	0x35BA, r25
   14d56:	80 93 b9 35 	sts	0x35B9, r24
   14d5a:	89 e8       	ldi	r24, 0x89	; 137
   14d5c:	9a e9       	ldi	r25, 0x9A	; 154
   14d5e:	90 93 be 35 	sts	0x35BE, r25
   14d62:	80 93 bd 35 	sts	0x35BD, r24
   14d66:	83 ec       	ldi	r24, 0xC3	; 195
   14d68:	91 e8       	ldi	r25, 0x81	; 129
   14d6a:	90 93 79 35 	sts	0x3579, r25
   14d6e:	80 93 78 35 	sts	0x3578, r24
   14d72:	8a 81       	ldd	r24, Y+2	; 0x02
   14d74:	88 23       	and	r24, r24
   14d76:	19 f0       	breq	.+6      	; 0x14d7e <_ZN13PinoccioShell5setupEv+0x570>
   14d78:	ce 01       	movw	r24, r28
   14d7a:	a8 dc       	rcall	.-1712   	; 0x146cc <_ZN13PinoccioShell10startShellEv>
   14d7c:	09 c0       	rjmp	.+18     	; 0x14d90 <_ZN13PinoccioShell5setupEv+0x582>
   14d7e:	26 e0       	ldi	r18, 0x06	; 6
   14d80:	40 e0       	ldi	r20, 0x00	; 0
   14d82:	52 ec       	ldi	r21, 0xC2	; 194
   14d84:	61 e0       	ldi	r22, 0x01	; 1
   14d86:	70 e0       	ldi	r23, 0x00	; 0
   14d88:	84 e0       	ldi	r24, 0x04	; 4
   14d8a:	94 e2       	ldi	r25, 0x24	; 36
   14d8c:	0e 94 cd 0c 	call	0x199a	; 0x199a <_ZN14HardwareSerial5beginEmh>
   14d90:	46 ea       	ldi	r20, 0xA6	; 166
   14d92:	5f e7       	ldi	r21, 0x7F	; 127
   14d94:	61 e0       	ldi	r22, 0x01	; 1
   14d96:	80 ea       	ldi	r24, 0xA0	; 160
   14d98:	95 e3       	ldi	r25, 0x35	; 53
   14d9a:	0e 94 99 6e 	call	0xdd32	; 0xdd32 <_ZN13PinoccioClass10meshListenEhPFbP13NWK_DataInd_tE>
   14d9e:	80 ea       	ldi	r24, 0xA0	; 160
   14da0:	95 e3       	ldi	r25, 0x35	; 53
   14da2:	0e 94 b5 70 	call	0xe16a	; 0xe16a <_ZN13PinoccioScout11isLeadScoutEv>
   14da6:	81 11       	cpse	r24, r1
   14da8:	05 c0       	rjmp	.+10     	; 0x14db4 <_ZN13PinoccioShell5setupEv+0x5a6>
   14daa:	8e ee       	ldi	r24, 0xEE	; 238
   14dac:	99 e3       	ldi	r25, 0x39	; 57
   14dae:	df 91       	pop	r29
   14db0:	cf 91       	pop	r28
   14db2:	7d ca       	rjmp	.-2822   	; 0x142ae <_ZN13PinoccioShell11allReportHQEv>
   14db4:	df 91       	pop	r29
   14db6:	cf 91       	pop	r28
   14db8:	08 95       	ret

00014dba <_Z9arg2arrayi>:
  bool inGroup = Scout.meshIsInGroup(getarg(1));
  return inGroup;
}

// ver = 0 means all args, ver > 1 means ignore first arg
StringBuffer arg2array(int ver) {
   14dba:	2f 92       	push	r2
   14dbc:	3f 92       	push	r3
   14dbe:	4f 92       	push	r4
   14dc0:	5f 92       	push	r5
   14dc2:	6f 92       	push	r6
   14dc4:	7f 92       	push	r7
   14dc6:	8f 92       	push	r8
   14dc8:	9f 92       	push	r9
   14dca:	af 92       	push	r10
   14dcc:	bf 92       	push	r11
   14dce:	cf 92       	push	r12
   14dd0:	df 92       	push	r13
   14dd2:	ef 92       	push	r14
   14dd4:	ff 92       	push	r15
   14dd6:	0f 93       	push	r16
   14dd8:	1f 93       	push	r17
   14dda:	cf 93       	push	r28
   14ddc:	df 93       	push	r29
   14dde:	3c 01       	movw	r6, r24
   14de0:	eb 01       	movw	r28, r22
  StringBuffer buf(100);
   14de2:	41 e0       	ldi	r20, 0x01	; 1
   14de4:	50 e0       	ldi	r21, 0x00	; 0
   14de6:	64 e6       	ldi	r22, 0x64	; 100
   14de8:	70 e0       	ldi	r23, 0x00	; 0
   14dea:	97 d4       	rcall	.+2350   	; 0x1571a <_ZN12StringBufferC1Ejj>
  int i;
  int args = getarg(0);
   14dec:	60 e0       	ldi	r22, 0x00	; 0
   14dee:	70 e0       	ldi	r23, 0x00	; 0
   14df0:	cb 01       	movw	r24, r22
   14df2:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   14df6:	8b 01       	movw	r16, r22
   14df8:	69 30       	cpi	r22, 0x09	; 9
   14dfa:	71 05       	cpc	r23, r1
   14dfc:	14 f0       	brlt	.+4      	; 0x14e02 <_Z9arg2arrayi+0x48>
   14dfe:	08 e0       	ldi	r16, 0x08	; 8
   14e00:	10 e0       	ldi	r17, 0x00	; 0
  if (args > 8) {
    args = 8;
  }
  buf.appendSprintf("[%d,", ver);
   14e02:	df 93       	push	r29
   14e04:	cf 93       	push	r28
   14e06:	8b e9       	ldi	r24, 0x9B	; 155
   14e08:	93 e2       	ldi	r25, 0x23	; 35
   14e0a:	9f 93       	push	r25
   14e0c:	8f 93       	push	r24
   14e0e:	7f 92       	push	r7
   14e10:	6f 92       	push	r6
   14e12:	a8 d4       	rcall	.+2384   	; 0x15764 <_ZN12StringBuffer13appendSprintfEPKcz>
  for (i=ver?2:1; i<=args; i++) {
   14e14:	0f 90       	pop	r0
   14e16:	0f 90       	pop	r0
   14e18:	0f 90       	pop	r0
   14e1a:	0f 90       	pop	r0
   14e1c:	0f 90       	pop	r0
   14e1e:	0f 90       	pop	r0
   14e20:	cd 2b       	or	r28, r29
   14e22:	11 f0       	breq	.+4      	; 0x14e28 <_Z9arg2arrayi+0x6e>
   14e24:	92 e0       	ldi	r25, 0x02	; 2
   14e26:	01 c0       	rjmp	.+2      	; 0x14e2a <_Z9arg2arrayi+0x70>
   14e28:	91 e0       	ldi	r25, 0x01	; 1
   14e2a:	80 e0       	ldi	r24, 0x00	; 0
   14e2c:	c9 2f       	mov	r28, r25
   14e2e:	d8 2f       	mov	r29, r24
   14e30:	c1 2c       	mov	r12, r1
   14e32:	d1 2c       	mov	r13, r1
   14e34:	76 01       	movw	r14, r12
   14e36:	4e 01       	movw	r8, r28
   14e38:	aa 24       	eor	r10, r10
   14e3a:	97 fc       	sbrc	r9, 7
   14e3c:	a0 94       	com	r10
   14e3e:	ba 2c       	mov	r11, r10
   14e40:	0c 17       	cp	r16, r28
   14e42:	1d 07       	cpc	r17, r29
   14e44:	ec f1       	brlt	.+122    	; 0x14ec0 <_Z9arg2arrayi+0x106>
   14e46:	16 01       	movw	r2, r12
   14e48:	27 01       	movw	r4, r14
   14e4a:	28 0c       	add	r2, r8
   14e4c:	39 1c       	adc	r3, r9
   14e4e:	4a 1c       	adc	r4, r10
   14e50:	5b 1c       	adc	r5, r11
    int key = (isstringarg(i)) ? keyMap((char*)getstringarg(i), 0) : getarg(i);
   14e52:	c2 01       	movw	r24, r4
   14e54:	b1 01       	movw	r22, r2
   14e56:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <_Z11isstringargl>
   14e5a:	67 2b       	or	r22, r23
   14e5c:	68 2b       	or	r22, r24
   14e5e:	69 2b       	or	r22, r25
   14e60:	61 f0       	breq	.+24     	; 0x14e7a <_Z9arg2arrayi+0xc0>
   14e62:	c2 01       	movw	r24, r4
   14e64:	b1 01       	movw	r22, r2
   14e66:	0e 94 8f 24 	call	0x491e	; 0x491e <_Z12getstringargl>
   14e6a:	dc 01       	movw	r26, r24
   14e6c:	cb 01       	movw	r24, r22
   14e6e:	40 e0       	ldi	r20, 0x00	; 0
   14e70:	50 e0       	ldi	r21, 0x00	; 0
   14e72:	ba 01       	movw	r22, r20
   14e74:	0e 94 2c 68 	call	0xd058	; 0xd058 <keyMap>
   14e78:	05 c0       	rjmp	.+10     	; 0x14e84 <_Z9arg2arrayi+0xca>
   14e7a:	c2 01       	movw	r24, r4
   14e7c:	b1 01       	movw	r22, r2
   14e7e:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   14e82:	cb 01       	movw	r24, r22
    buf.appendJsonString(keyGet(key), true);
   14e84:	0e 94 ab 68 	call	0xd156	; 0xd156 <keyGet>
   14e88:	bc 01       	movw	r22, r24

  // Initialize from a (non-terminated) buffer of the given length
  ConstBuf(const char *buf, size_t len) : buffer((const uint8_t*)buf), len(len) { }
  ConstBuf(const uint8_t *buf, size_t len) : buffer(buf), len(len) { }
  // Intialize from a regular (nul-terminated!) string
  ConstBuf(const char *str) : buffer((const uint8_t*)str), len(strlen(str)) { }
   14e8a:	fc 01       	movw	r30, r24
   14e8c:	01 90       	ld	r0, Z+
   14e8e:	00 20       	and	r0, r0
   14e90:	e9 f7       	brne	.-6      	; 0x14e8c <_Z9arg2arrayi+0xd2>
   14e92:	af 01       	movw	r20, r30
   14e94:	41 50       	subi	r20, 0x01	; 1
   14e96:	51 09       	sbc	r21, r1
   14e98:	48 1b       	sub	r20, r24
   14e9a:	59 0b       	sbc	r21, r25

    // Helper methods
    size_t appendSprintf(const char *fmt, ...);
    size_t appendJsonString(const char *in, size_t len, bool add_quotes);
    size_t appendJsonString(const uint8_t *in, size_t len, bool add_quotes) {
      return appendJsonString((const char *)in, len, add_quotes);
   14e9c:	21 e0       	ldi	r18, 0x01	; 1
   14e9e:	c3 01       	movw	r24, r6
   14ea0:	15 d5       	rcall	.+2602   	; 0x158cc <_ZN12StringBuffer16appendJsonStringEPKcjb>
    if(i+1 <= args) buf += ",";
   14ea2:	c0 17       	cp	r28, r16
   14ea4:	d1 07       	cpc	r29, r17
   14ea6:	2c f4       	brge	.+10     	; 0x14eb2 <_Z9arg2arrayi+0xf8>
   14ea8:	63 ec       	ldi	r22, 0xC3	; 195
   14eaa:	7e e1       	ldi	r23, 0x1E	; 30
   14eac:	c3 01       	movw	r24, r6
   14eae:	0e 94 7d 19 	call	0x32fa	; 0x32fa <_ZN6String6concatEPKc>
  int args = getarg(0);
  if (args > 8) {
    args = 8;
  }
  buf.appendSprintf("[%d,", ver);
  for (i=ver?2:1; i<=args; i++) {
   14eb2:	21 96       	adiw	r28, 0x01	; 1
   14eb4:	ff ef       	ldi	r31, 0xFF	; 255
   14eb6:	cf 1a       	sub	r12, r31
   14eb8:	df 0a       	sbc	r13, r31
   14eba:	ef 0a       	sbc	r14, r31
   14ebc:	ff 0a       	sbc	r15, r31
   14ebe:	c0 cf       	rjmp	.-128    	; 0x14e40 <_Z9arg2arrayi+0x86>
   14ec0:	6d e6       	ldi	r22, 0x6D	; 109
   14ec2:	78 e1       	ldi	r23, 0x18	; 24
   14ec4:	c3 01       	movw	r24, r6
   14ec6:	0e 94 7d 19 	call	0x32fa	; 0x32fa <_ZN6String6concatEPKc>
    buf.appendJsonString(keyGet(key), true);
    if(i+1 <= args) buf += ",";
  }
  buf += "]";
  return buf;
}
   14eca:	c3 01       	movw	r24, r6
   14ecc:	df 91       	pop	r29
   14ece:	cf 91       	pop	r28
   14ed0:	1f 91       	pop	r17
   14ed2:	0f 91       	pop	r16
   14ed4:	ff 90       	pop	r15
   14ed6:	ef 90       	pop	r14
   14ed8:	df 90       	pop	r13
   14eda:	cf 90       	pop	r12
   14edc:	bf 90       	pop	r11
   14ede:	af 90       	pop	r10
   14ee0:	9f 90       	pop	r9
   14ee2:	8f 90       	pop	r8
   14ee4:	7f 90       	pop	r7
   14ee6:	6f 90       	pop	r6
   14ee8:	5f 90       	pop	r5
   14eea:	4f 90       	pop	r4
   14eec:	3f 90       	pop	r3
   14eee:	2f 90       	pop	r2
   14ef0:	08 95       	ret

00014ef2 <_ZL7hqPrintv>:
static numvar hqVerbose(void) {
  Scout.handler.setVerbose(getarg(1));
  return 1;
}

static numvar hqPrint(void) {
   14ef2:	cf 93       	push	r28
   14ef4:	df 93       	push	r29
   14ef6:	cd b7       	in	r28, 0x3d	; 61
   14ef8:	de b7       	in	r29, 0x3e	; 62
   14efa:	28 97       	sbiw	r28, 0x08	; 8
   14efc:	0f b6       	in	r0, 0x3f	; 63
   14efe:	f8 94       	cli
   14f00:	de bf       	out	0x3e, r29	; 62
   14f02:	0f be       	out	0x3f, r0	; 63
   14f04:	cd bf       	out	0x3d, r28	; 61
  if (!getarg(0)) {
   14f06:	60 e0       	ldi	r22, 0x00	; 0
   14f08:	70 e0       	ldi	r23, 0x00	; 0
   14f0a:	cb 01       	movw	r24, r22
   14f0c:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   14f10:	67 2b       	or	r22, r23
   14f12:	68 2b       	or	r22, r24
   14f14:	69 2b       	or	r22, r25
   14f16:	b9 f0       	breq	.+46     	; 0x14f46 <_ZL7hqPrintv+0x54>
    return false;
  }
  Scout.handler.announce(0, arg2array(0));
   14f18:	60 e0       	ldi	r22, 0x00	; 0
   14f1a:	70 e0       	ldi	r23, 0x00	; 0
   14f1c:	ce 01       	movw	r24, r28
   14f1e:	01 96       	adiw	r24, 0x01	; 1
   14f20:	4c df       	rcall	.-360    	; 0x14dba <_Z9arg2arrayi>
   14f22:	ae 01       	movw	r20, r28
   14f24:	4f 5f       	subi	r20, 0xFF	; 255
   14f26:	5f 4f       	sbci	r21, 0xFF	; 255
   14f28:	60 e0       	ldi	r22, 0x00	; 0
   14f2a:	70 e0       	ldi	r23, 0x00	; 0
   14f2c:	8b ee       	ldi	r24, 0xEB	; 235
   14f2e:	98 e3       	ldi	r25, 0x38	; 56
   14f30:	0e 94 ad 7b 	call	0xf75a	; 0xf75a <_ZN20PinoccioScoutHandler8announceEjRK6String>
/**
 * Extend the Arduino String class with some operations that make using
 * it as buffer for reading input or building output more efficient
 * (e.g,. without copying data).
 */
class StringBuffer : public String {
   14f34:	ce 01       	movw	r24, r28
   14f36:	01 96       	adiw	r24, 0x01	; 1
   14f38:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   14f3c:	61 e0       	ldi	r22, 0x01	; 1
   14f3e:	70 e0       	ldi	r23, 0x00	; 0
   14f40:	80 e0       	ldi	r24, 0x00	; 0
   14f42:	90 e0       	ldi	r25, 0x00	; 0
   14f44:	03 c0       	rjmp	.+6      	; 0x14f4c <_ZL7hqPrintv+0x5a>
  return 1;
}

static numvar hqPrint(void) {
  if (!getarg(0)) {
    return false;
   14f46:	60 e0       	ldi	r22, 0x00	; 0
   14f48:	70 e0       	ldi	r23, 0x00	; 0
   14f4a:	cb 01       	movw	r24, r22
  }
  Scout.handler.announce(0, arg2array(0));
  return true;
}
   14f4c:	28 96       	adiw	r28, 0x08	; 8
   14f4e:	0f b6       	in	r0, 0x3f	; 63
   14f50:	f8 94       	cli
   14f52:	de bf       	out	0x3e, r29	; 62
   14f54:	0f be       	out	0x3f, r0	; 63
   14f56:	cd bf       	out	0x3d, r28	; 61
   14f58:	df 91       	pop	r29
   14f5a:	cf 91       	pop	r28
   14f5c:	08 95       	ret

00014f5e <_ZL12meshAnnouncev>:

  sendMessage(getarg(1), arg2array(1));
  return true;
}

static numvar meshAnnounce(void) {
   14f5e:	cf 93       	push	r28
   14f60:	df 93       	push	r29
   14f62:	cd b7       	in	r28, 0x3d	; 61
   14f64:	de b7       	in	r29, 0x3e	; 62
   14f66:	28 97       	sbiw	r28, 0x08	; 8
   14f68:	0f b6       	in	r0, 0x3f	; 63
   14f6a:	f8 94       	cli
   14f6c:	de bf       	out	0x3e, r29	; 62
   14f6e:	0f be       	out	0x3f, r0	; 63
   14f70:	cd bf       	out	0x3d, r28	; 61
  if (!getarg(0)) {
   14f72:	60 e0       	ldi	r22, 0x00	; 0
   14f74:	70 e0       	ldi	r23, 0x00	; 0
   14f76:	cb 01       	movw	r24, r22
   14f78:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   14f7c:	67 2b       	or	r22, r23
   14f7e:	68 2b       	or	r22, r24
   14f80:	69 2b       	or	r22, r25
   14f82:	d9 f0       	breq	.+54     	; 0x14fba <_ZL12meshAnnouncev+0x5c>
    return false;
  }
  Scout.handler.announce(getarg(1), arg2array(1));
   14f84:	61 e0       	ldi	r22, 0x01	; 1
   14f86:	70 e0       	ldi	r23, 0x00	; 0
   14f88:	ce 01       	movw	r24, r28
   14f8a:	01 96       	adiw	r24, 0x01	; 1
   14f8c:	16 df       	rcall	.-468    	; 0x14dba <_Z9arg2arrayi>
   14f8e:	61 e0       	ldi	r22, 0x01	; 1
   14f90:	70 e0       	ldi	r23, 0x00	; 0
   14f92:	80 e0       	ldi	r24, 0x00	; 0
   14f94:	90 e0       	ldi	r25, 0x00	; 0
   14f96:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   14f9a:	ae 01       	movw	r20, r28
   14f9c:	4f 5f       	subi	r20, 0xFF	; 255
   14f9e:	5f 4f       	sbci	r21, 0xFF	; 255
   14fa0:	8b ee       	ldi	r24, 0xEB	; 235
   14fa2:	98 e3       	ldi	r25, 0x38	; 56
   14fa4:	0e 94 ad 7b 	call	0xf75a	; 0xf75a <_ZN20PinoccioScoutHandler8announceEjRK6String>
   14fa8:	ce 01       	movw	r24, r28
   14faa:	01 96       	adiw	r24, 0x01	; 1
   14fac:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
   14fb0:	61 e0       	ldi	r22, 0x01	; 1
   14fb2:	70 e0       	ldi	r23, 0x00	; 0
   14fb4:	80 e0       	ldi	r24, 0x00	; 0
   14fb6:	90 e0       	ldi	r25, 0x00	; 0
   14fb8:	03 c0       	rjmp	.+6      	; 0x14fc0 <_ZL12meshAnnouncev+0x62>
  return true;
}

static numvar meshAnnounce(void) {
  if (!getarg(0)) {
    return false;
   14fba:	60 e0       	ldi	r22, 0x00	; 0
   14fbc:	70 e0       	ldi	r23, 0x00	; 0
   14fbe:	cb 01       	movw	r24, r22
  }
  Scout.handler.announce(getarg(1), arg2array(1));
  return true;
}
   14fc0:	28 96       	adiw	r28, 0x08	; 8
   14fc2:	0f b6       	in	r0, 0x3f	; 63
   14fc4:	f8 94       	cli
   14fc6:	de bf       	out	0x3e, r29	; 62
   14fc8:	0f be       	out	0x3f, r0	; 63
   14fca:	cd bf       	out	0x3d, r28	; 61
   14fcc:	df 91       	pop	r29
   14fce:	cf 91       	pop	r28
   14fd0:	08 95       	ret

00014fd2 <_ZL8meshSendv>:
  }
  buf += "]";
  return buf;
}

static numvar meshSend(void) {
   14fd2:	cf 92       	push	r12
   14fd4:	df 92       	push	r13
   14fd6:	ef 92       	push	r14
   14fd8:	ff 92       	push	r15
   14fda:	1f 93       	push	r17
   14fdc:	cf 93       	push	r28
   14fde:	df 93       	push	r29
   14fe0:	cd b7       	in	r28, 0x3d	; 61
   14fe2:	de b7       	in	r29, 0x3e	; 62
   14fe4:	28 97       	sbiw	r28, 0x08	; 8
   14fe6:	0f b6       	in	r0, 0x3f	; 63
   14fe8:	f8 94       	cli
   14fea:	de bf       	out	0x3e, r29	; 62
   14fec:	0f be       	out	0x3f, r0	; 63
   14fee:	cd bf       	out	0x3d, r28	; 61
  if (!getarg(0)) {
   14ff0:	60 e0       	ldi	r22, 0x00	; 0
   14ff2:	70 e0       	ldi	r23, 0x00	; 0
   14ff4:	cb 01       	movw	r24, r22
   14ff6:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   14ffa:	67 2b       	or	r22, r23
   14ffc:	68 2b       	or	r22, r24
   14ffe:	69 2b       	or	r22, r25
   15000:	09 f4       	brne	.+2      	; 0x15004 <_ZL8meshSendv+0x32>
   15002:	5c c0       	rjmp	.+184    	; 0x150bc <_ZL8meshSendv+0xea>
    return false;
  }

  sendMessage(getarg(1), arg2array(1));
   15004:	61 e0       	ldi	r22, 0x01	; 1
   15006:	70 e0       	ldi	r23, 0x00	; 0
   15008:	ce 01       	movw	r24, r28
   1500a:	01 96       	adiw	r24, 0x01	; 1
   1500c:	d6 de       	rcall	.-596    	; 0x14dba <_Z9arg2arrayi>
   1500e:	61 e0       	ldi	r22, 0x01	; 1
   15010:	70 e0       	ldi	r23, 0x00	; 0
   15012:	80 e0       	ldi	r24, 0x00	; 0
   15014:	90 e0       	ldi	r25, 0x00	; 0
   15016:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   1501a:	6b 01       	movw	r12, r22
   1501c:	7c 01       	movw	r14, r24
  }
  return true;
}

static void sendMessage(int address, const String &data) {
  if (sendDataReqBusy) {
   1501e:	80 91 d5 39 	lds	r24, 0x39D5
   15022:	81 11       	cpse	r24, r1
   15024:	42 c0       	rjmp	.+132    	; 0x150aa <_ZL8meshSendv+0xd8>
    return;
  }

  sendDataReq.dstAddr = address;
   15026:	d0 92 dc 39 	sts	0x39DC, r13
   1502a:	c0 92 db 39 	sts	0x39DB, r12
  sendDataReq.dstEndpoint = 1;
   1502e:	11 e0       	ldi	r17, 0x01	; 1
   15030:	10 93 dd 39 	sts	0x39DD, r17
  sendDataReq.srcEndpoint = 1;
   15034:	10 93 de 39 	sts	0x39DE, r17
  sendDataReq.options = NWK_OPT_ACK_REQUEST|NWK_OPT_ENABLE_SECURITY;
   15038:	83 e0       	ldi	r24, 0x03	; 3
   1503a:	80 93 df 39 	sts	0x39DF, r24
  sendDataReq.data = (uint8_t*)strdup(data.c_str());
   1503e:	89 81       	ldd	r24, Y+1	; 0x01
   15040:	9a 81       	ldd	r25, Y+2	; 0x02
   15042:	0e 94 2a b5 	call	0x16a54	; 0x16a54 <strdup>
   15046:	90 93 e3 39 	sts	0x39E3, r25
   1504a:	80 93 e2 39 	sts	0x39E2, r24
  sendDataReq.size = data.length() + 1;
   1504e:	8d 81       	ldd	r24, Y+5	; 0x05
   15050:	8f 5f       	subi	r24, 0xFF	; 255
   15052:	80 93 e4 39 	sts	0x39E4, r24
  sendDataReq.confirm = sendConfirm;
   15056:	82 ef       	ldi	r24, 0xF2	; 242
   15058:	9c e8       	ldi	r25, 0x8C	; 140
   1505a:	90 93 e6 39 	sts	0x39E6, r25
   1505e:	80 93 e5 39 	sts	0x39E5, r24
  NWK_DataReq(&sendDataReq);
   15062:	86 ed       	ldi	r24, 0xD6	; 214
   15064:	99 e3       	ldi	r25, 0x39	; 57
   15066:	0e 94 d7 4a 	call	0x95ae	; 0x95ae <NWK_DataReq>

  sendDataReqBusy = true;
   1506a:	10 93 d5 39 	sts	0x39D5, r17

  if (isMeshVerbose) {
   1506e:	80 91 ed 39 	lds	r24, 0x39ED
   15072:	88 23       	and	r24, r24
   15074:	d1 f0       	breq	.+52     	; 0x150aa <_ZL8meshSendv+0xd8>
    Serial.print(F("Sent message to Scout "));
   15076:	60 ed       	ldi	r22, 0xD0	; 208
   15078:	7e e0       	ldi	r23, 0x0E	; 14
   1507a:	84 e0       	ldi	r24, 0x04	; 4
   1507c:	94 e2       	ldi	r25, 0x24	; 36
   1507e:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.print(address);
   15082:	4a e0       	ldi	r20, 0x0A	; 10
   15084:	50 e0       	ldi	r21, 0x00	; 0
   15086:	b6 01       	movw	r22, r12
   15088:	84 e0       	ldi	r24, 0x04	; 4
   1508a:	94 e2       	ldi	r25, 0x24	; 36
   1508c:	0e 94 4d 10 	call	0x209a	; 0x209a <_ZN5Print5printEii>
    Serial.print(F(": "));
   15090:	6d ec       	ldi	r22, 0xCD	; 205
   15092:	7e e0       	ldi	r23, 0x0E	; 14
   15094:	84 e0       	ldi	r24, 0x04	; 4
   15096:	94 e2       	ldi	r25, 0x24	; 36
   15098:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.println(data);
   1509c:	be 01       	movw	r22, r28
   1509e:	6f 5f       	subi	r22, 0xFF	; 255
   150a0:	7f 4f       	sbci	r23, 0xFF	; 255
   150a2:	84 e0       	ldi	r24, 0x04	; 4
   150a4:	94 e2       	ldi	r25, 0x24	; 36
   150a6:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <_ZN5Print7printlnERK6String>
   150aa:	ce 01       	movw	r24, r28
   150ac:	01 96       	adiw	r24, 0x01	; 1
   150ae:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6StringD1Ev>
static numvar meshSend(void) {
  if (!getarg(0)) {
    return false;
  }

  sendMessage(getarg(1), arg2array(1));
   150b2:	61 e0       	ldi	r22, 0x01	; 1
   150b4:	70 e0       	ldi	r23, 0x00	; 0
   150b6:	80 e0       	ldi	r24, 0x00	; 0
   150b8:	90 e0       	ldi	r25, 0x00	; 0
   150ba:	03 c0       	rjmp	.+6      	; 0x150c2 <_ZL8meshSendv+0xf0>
  return buf;
}

static numvar meshSend(void) {
  if (!getarg(0)) {
    return false;
   150bc:	60 e0       	ldi	r22, 0x00	; 0
   150be:	70 e0       	ldi	r23, 0x00	; 0
   150c0:	cb 01       	movw	r24, r22
  }

  sendMessage(getarg(1), arg2array(1));
  return true;
}
   150c2:	28 96       	adiw	r28, 0x08	; 8
   150c4:	0f b6       	in	r0, 0x3f	; 63
   150c6:	f8 94       	cli
   150c8:	de bf       	out	0x3e, r29	; 62
   150ca:	0f be       	out	0x3f, r0	; 63
   150cc:	cd bf       	out	0x3d, r28	; 61
   150ce:	df 91       	pop	r29
   150d0:	cf 91       	pop	r28
   150d2:	1f 91       	pop	r17
   150d4:	ff 90       	pop	r15
   150d6:	ef 90       	pop	r14
   150d8:	df 90       	pop	r13
   150da:	cf 90       	pop	r12
   150dc:	08 95       	ret

000150de <_ZNK9MinifloatILj4ELj4ELin4EEcvfEv>:
    // every extra significand bit gives 1 extra exponent, while every
    // exponent bit _doubles_ the number of exponents).
    static_assert(from_min_exp >= to_min_exp - extra_significand_bits, "Smallest exponent too low for lossless conversion to float");

    ieee754_float res;
    res.sign = 0;
   150de:	20 e0       	ldi	r18, 0x00	; 0
   150e0:	2f 77       	andi	r18, 0x7F	; 127
    raw_exp_t e = raw_exponent();
    return (e == 0 ? (exp_t)1 : (exp_t)raw_exponent) - exponent_bias;
  }

  raw_exp_t raw_exponent() const {
    return (val >> significand_bits) & ((1 << exponent_bits) - 1);
   150e2:	fc 01       	movw	r30, r24
   150e4:	80 81       	ld	r24, Z
   150e6:	38 2f       	mov	r19, r24
   150e8:	32 95       	swap	r19
   150ea:	3f 70       	andi	r19, 0x0F	; 15
    // The next case is when the target minimal exponent is smaller than
    // the source one:
    //   source exponent range:            |--------|
    //   target exponent range:        |----------------|
    if (from_min_exp > to_min_exp) {
      if (raw_exponent() > 0) {
   150ec:	99 f0       	breq	.+38     	; 0x15114 <_ZNK9MinifloatILj4ELj4ELin4EEcvfEv+0x36>

    return res.f;
  }

  sig_t raw_significand() const {
    return val & ((1 << significand_bits) - 1);
   150ee:	8f 70       	andi	r24, 0x0F	; 15
    //   source exponent range:            |--------|
    //   target exponent range:        |----------------|
    if (from_min_exp > to_min_exp) {
      if (raw_exponent() > 0) {
        // Normal numbers can still be copied as-is,
        res.significand = (uint32_t)raw_significand() << extra_significand_bits;
   150f0:	90 e0       	ldi	r25, 0x00	; 0
   150f2:	a0 e0       	ldi	r26, 0x00	; 0
   150f4:	f3 e1       	ldi	r31, 0x13	; 19
   150f6:	88 0f       	add	r24, r24
   150f8:	99 1f       	adc	r25, r25
   150fa:	aa 1f       	adc	r26, r26
   150fc:	fa 95       	dec	r31
   150fe:	d9 f7       	brne	.-10     	; 0x150f6 <_ZNK9MinifloatILj4ELj4ELin4EEcvfEv+0x18>
   15100:	58 2f       	mov	r21, r24
   15102:	49 2f       	mov	r20, r25
        res.exponent = raw_exponent() + exponent_bias_offset;
   15104:	3d 57       	subi	r19, 0x7D	; 125
   15106:	8a 2f       	mov	r24, r26
   15108:	30 fb       	bst	r19, 0
   1510a:	87 f9       	bld	r24, 7
   1510c:	36 95       	lsr	r19
   1510e:	20 78       	andi	r18, 0x80	; 128
   15110:	23 2b       	or	r18, r19
   15112:	21 c0       	rjmp	.+66     	; 0x15156 <_ZNK9MinifloatILj4ELj4ELin4EEcvfEv+0x78>
      } else {
        // Denormal numbers
        if (raw_significand() == 0) {
   15114:	81 11       	cpse	r24, r1
   15116:	04 c0       	rjmp	.+8      	; 0x15120 <_ZNK9MinifloatILj4ELj4ELin4EEcvfEv+0x42>
          // Special case: zero
          res.significand = 0;
   15118:	50 e0       	ldi	r21, 0x00	; 0
   1511a:	40 e0       	ldi	r20, 0x00	; 0
          res.exponent = 0;
   1511c:	20 78       	andi	r18, 0x80	; 128
   1511e:	1b c0       	rjmp	.+54     	; 0x15156 <_ZNK9MinifloatILj4ELj4ELin4EEcvfEv+0x78>
        // Normal numbers can still be copied as-is,
        res.significand = (uint32_t)raw_significand() << extra_significand_bits;
        res.exponent = raw_exponent() + exponent_bias_offset;
      } else {
        // Denormal numbers
        if (raw_significand() == 0) {
   15120:	33 e8       	ldi	r19, 0x83	; 131
              }
            }

            // Shift left until a "1" is about to be shifted out. If so,
            // stop _after_ shifting off that one.
            if ((significand & (1L << (significand_bits - 1))))
   15122:	48 2f       	mov	r20, r24
   15124:	48 70       	andi	r20, 0x08	; 8
              done = true;

            significand <<= 1;
   15126:	88 0f       	add	r24, r24
   15128:	9f ef       	ldi	r25, 0xFF	; 255
   1512a:	93 0f       	add	r25, r19
          // either:
          //  - We shift out a leading 1, making it a normal number
          //  - We reach the target minimal exponent
          res.exponent = 1 + exponent_bias_offset;
          bool done = false;
          do {
   1512c:	41 11       	cpse	r20, r1
   1512e:	02 c0       	rjmp	.+4      	; 0x15134 <_ZNK9MinifloatILj4ELj4ELin4EEcvfEv+0x56>
   15130:	39 2f       	mov	r19, r25
   15132:	f7 cf       	rjmp	.-18     	; 0x15122 <_ZNK9MinifloatILj4ELj4ELin4EEcvfEv+0x44>
   15134:	93 2f       	mov	r25, r19
   15136:	96 95       	lsr	r25
   15138:	20 78       	andi	r18, 0x80	; 128
   1513a:	29 2b       	or	r18, r25
              done = true;

            significand <<= 1;
            res.exponent--;
          } while (!done);
          res.significand = (uint32_t)significand << extra_significand_bits;
   1513c:	90 e0       	ldi	r25, 0x00	; 0
   1513e:	a0 e0       	ldi	r26, 0x00	; 0
   15140:	43 e1       	ldi	r20, 0x13	; 19
   15142:	88 0f       	add	r24, r24
   15144:	99 1f       	adc	r25, r25
   15146:	aa 1f       	adc	r26, r26
   15148:	4a 95       	dec	r20
   1514a:	d9 f7       	brne	.-10     	; 0x15142 <_ZNK9MinifloatILj4ELj4ELin4EEcvfEv+0x64>
   1514c:	58 2f       	mov	r21, r24
   1514e:	49 2f       	mov	r20, r25
   15150:	8a 2f       	mov	r24, r26
   15152:	30 fb       	bst	r19, 0
   15154:	87 f9       	bld	r24, 7
        res.exponent = 0;
      }
    }

    return res.f;
  }
   15156:	65 2f       	mov	r22, r21
   15158:	74 2f       	mov	r23, r20
   1515a:	92 2f       	mov	r25, r18
   1515c:	08 95       	ret

0001515e <_ZL17backpackResourcesv>:
  Serial.print(h->used_eeprom_size);
  Serial.println(F(" bytes"));
  return 1;
}

static numvar backpackResources(void) {
   1515e:	8f 92       	push	r8
   15160:	9f 92       	push	r9
   15162:	af 92       	push	r10
   15164:	bf 92       	push	r11
   15166:	cf 92       	push	r12
   15168:	df 92       	push	r13
   1516a:	ef 92       	push	r14
   1516c:	ff 92       	push	r15
   1516e:	0f 93       	push	r16
   15170:	1f 93       	push	r17
   15172:	cf 93       	push	r28
   15174:	df 93       	push	r29
  numvar addr = getarg(1);
   15176:	61 e0       	ldi	r22, 0x01	; 1
   15178:	70 e0       	ldi	r23, 0x00	; 0
   1517a:	80 e0       	ldi	r24, 0x00	; 0
   1517c:	90 e0       	ldi	r25, 0x00	; 0
   1517e:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
  if (addr < 0 || addr >= Backpacks::num_backpacks) {
   15182:	97 fd       	sbrc	r25, 7
   15184:	0a c0       	rjmp	.+20     	; 0x1519a <_ZL17backpackResourcesv+0x3c>
   15186:	c0 90 6d 35 	lds	r12, 0x356D
   1518a:	d1 2c       	mov	r13, r1
   1518c:	e1 2c       	mov	r14, r1
   1518e:	f1 2c       	mov	r15, r1
   15190:	6c 15       	cp	r22, r12
   15192:	7d 05       	cpc	r23, r13
   15194:	8e 05       	cpc	r24, r14
   15196:	9f 05       	cpc	r25, r15
   15198:	1c f0       	brlt	.+6      	; 0x151a0 <_ZL17backpackResourcesv+0x42>
    Serial.println(F("Invalid backpack number"));
   1519a:	6d ec       	ldi	r22, 0xCD	; 205
   1519c:	73 e1       	ldi	r23, 0x13	; 19
   1519e:	19 c0       	rjmp	.+50     	; 0x151d2 <_ZL17backpackResourcesv+0x74>
    return 0;
  }

  Pbbe::DescriptorList *list = Backpacks::info[addr].getAllDescriptors();
   151a0:	42 e1       	ldi	r20, 0x12	; 18
   151a2:	46 9f       	mul	r20, r22
   151a4:	90 01       	movw	r18, r0
   151a6:	47 9f       	mul	r20, r23
   151a8:	30 0d       	add	r19, r0
   151aa:	11 24       	eor	r1, r1
   151ac:	80 91 6b 35 	lds	r24, 0x356B
   151b0:	90 91 6c 35 	lds	r25, 0x356C
   151b4:	82 0f       	add	r24, r18
   151b6:	93 1f       	adc	r25, r19
   151b8:	0e 94 6d 63 	call	0xc6da	; 0xc6da <_ZN12BackpackInfo17getAllDescriptorsEv>
   151bc:	4c 01       	movw	r8, r24
  if (!list) {
   151be:	00 97       	sbiw	r24, 0x00	; 0
   151c0:	31 f0       	breq	.+12     	; 0x151ce <_ZL17backpackResourcesv+0x70>
   151c2:	e1 2c       	mov	r14, r1
    Serial.println(F("Failed to fetch or parse resource descriptors"));
    return 0;
  }
  for (uint8_t i = 0; i < list->num_descriptors; ++i) {
    Pbbe::DescriptorInfo &info = list->info[i];
   151c4:	c7 e0       	ldi	r28, 0x07	; 7
   151c6:	dc 2e       	mov	r13, r28
      }
      case Pbbe::DT_IOPIN: {
        Pbbe::IoPinDescriptor& d = static_cast<Pbbe::IoPinDescriptor&>(*info.parsed);
        Serial.print(d.name);
        Serial.print(F(": gpio, pin = "));
        Serial.print(d.pin.name());
   151c8:	d6 e0       	ldi	r29, 0x06	; 6
   151ca:	fd 2e       	mov	r15, r29
   151cc:	2d c0       	rjmp	.+90     	; 0x15228 <_ZL17backpackResourcesv+0xca>
    return 0;
  }

  Pbbe::DescriptorList *list = Backpacks::info[addr].getAllDescriptors();
  if (!list) {
    Serial.println(F("Failed to fetch or parse resource descriptors"));
   151ce:	6f e9       	ldi	r22, 0x9F	; 159
   151d0:	73 e1       	ldi	r23, 0x13	; 19
   151d2:	84 e0       	ldi	r24, 0x04	; 4
   151d4:	94 e2       	ldi	r25, 0x24	; 36
   151d6:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <_ZN5Print7printlnEPK19__FlashStringHelper>
    return 0;
   151da:	60 e0       	ldi	r22, 0x00	; 0
   151dc:	70 e0       	ldi	r23, 0x00	; 0
   151de:	cb 01       	movw	r24, r22
   151e0:	b7 c1       	rjmp	.+878    	; 0x15550 <_ZL17backpackResourcesv+0x3f2>
  }
  for (uint8_t i = 0; i < list->num_descriptors; ++i) {
    Pbbe::DescriptorInfo &info = list->info[i];
   151e2:	e4 01       	movw	r28, r8
   151e4:	de 9c       	mul	r13, r14
   151e6:	c0 0d       	add	r28, r0
   151e8:	d1 1d       	adc	r29, r1
   151ea:	11 24       	eor	r1, r1
   151ec:	21 96       	adiw	r28, 0x01	; 1
    if (info.group) {
   151ee:	eb 81       	ldd	r30, Y+3	; 0x03
   151f0:	fc 81       	ldd	r31, Y+4	; 0x04
   151f2:	30 97       	sbiw	r30, 0x00	; 0
   151f4:	61 f0       	breq	.+24     	; 0x1520e <_ZL17backpackResourcesv+0xb0>
      Pbbe::GroupDescriptor& d = static_cast<Pbbe::GroupDescriptor&>(*info.group->parsed);
      Serial.print(d.name);
   151f6:	65 81       	ldd	r22, Z+5	; 0x05
   151f8:	76 81       	ldd	r23, Z+6	; 0x06
   151fa:	84 e0       	ldi	r24, 0x04	; 4
   151fc:	94 e2       	ldi	r25, 0x24	; 36
   151fe:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_ZN5Print5printEPKc>
      Serial.print(".");
   15202:	62 e7       	ldi	r22, 0x72	; 114
   15204:	7c e0       	ldi	r23, 0x0C	; 12
   15206:	84 e0       	ldi	r24, 0x04	; 4
   15208:	94 e2       	ldi	r25, 0x24	; 36
   1520a:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_ZN5Print5printEPKc>
    }

    switch (info.type) {
   1520e:	88 81       	ld	r24, Y
   15210:	84 30       	cpi	r24, 0x04	; 4
   15212:	09 f4       	brne	.+2      	; 0x15216 <_ZL17backpackResourcesv+0xb8>
   15214:	ee c0       	rjmp	.+476    	; 0x153f2 <_ZL17backpackResourcesv+0x294>
   15216:	68 f0       	brcs	.+26     	; 0x15232 <_ZL17backpackResourcesv+0xd4>
   15218:	86 30       	cpi	r24, 0x06	; 6
   1521a:	09 f4       	brne	.+2      	; 0x1521e <_ZL17backpackResourcesv+0xc0>
   1521c:	68 c1       	rjmp	.+720    	; 0x154ee <_ZL17backpackResourcesv+0x390>
   1521e:	08 f4       	brcc	.+2      	; 0x15222 <_ZL17backpackResourcesv+0xc4>
   15220:	a3 c0       	rjmp	.+326    	; 0x15368 <_ZL17backpackResourcesv+0x20a>
   15222:	87 30       	cpi	r24, 0x07	; 7
   15224:	99 f1       	breq	.+102    	; 0x1528c <_ZL17backpackResourcesv+0x12e>
  Pbbe::DescriptorList *list = Backpacks::info[addr].getAllDescriptors();
  if (!list) {
    Serial.println(F("Failed to fetch or parse resource descriptors"));
    return 0;
  }
  for (uint8_t i = 0; i < list->num_descriptors; ++i) {
   15226:	e3 94       	inc	r14
   15228:	f4 01       	movw	r30, r8
   1522a:	80 81       	ld	r24, Z
   1522c:	e8 16       	cp	r14, r24
   1522e:	c8 f2       	brcs	.-78     	; 0x151e2 <_ZL17backpackResourcesv+0x84>
   15230:	8b c1       	rjmp	.+790    	; 0x15548 <_ZL17backpackResourcesv+0x3ea>
      Pbbe::GroupDescriptor& d = static_cast<Pbbe::GroupDescriptor&>(*info.group->parsed);
      Serial.print(d.name);
      Serial.print(".");
    }

    switch (info.type) {
   15232:	82 30       	cpi	r24, 0x02	; 2
   15234:	09 f4       	brne	.+2      	; 0x15238 <_ZL17backpackResourcesv+0xda>
   15236:	f4 c0       	rjmp	.+488    	; 0x15420 <_ZL17backpackResourcesv+0x2c2>
   15238:	83 30       	cpi	r24, 0x03	; 3
   1523a:	a9 f7       	brne	.-22     	; 0x15226 <_ZL17backpackResourcesv+0xc8>
        Serial.print(F("kbps"));
        Serial.println();
        break;
      }
      case Pbbe::DT_DATA: {
        Pbbe::DataDescriptor& d = static_cast<Pbbe::DataDescriptor&>(*info.parsed);
   1523c:	ad 80       	ldd	r10, Y+5	; 0x05
   1523e:	be 80       	ldd	r11, Y+6	; 0x06
        Serial.print(d.name);
   15240:	4a e0       	ldi	r20, 0x0A	; 10
   15242:	50 e0       	ldi	r21, 0x00	; 0
   15244:	f5 01       	movw	r30, r10
   15246:	63 81       	ldd	r22, Z+3	; 0x03
   15248:	84 e0       	ldi	r24, 0x04	; 4
   1524a:	94 e2       	ldi	r25, 0x24	; 36
   1524c:	0e 94 76 10 	call	0x20ec	; 0x20ec <_ZN5Print5printEhi>
        Serial.print(F(": data, length = "));
   15250:	6d ea       	ldi	r22, 0xAD	; 173
   15252:	72 e1       	ldi	r23, 0x12	; 18
   15254:	84 e0       	ldi	r24, 0x04	; 4
   15256:	94 e2       	ldi	r25, 0x24	; 36
   15258:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
        Serial.print(d.length);
   1525c:	4a e0       	ldi	r20, 0x0A	; 10
   1525e:	50 e0       	ldi	r21, 0x00	; 0
   15260:	f5 01       	movw	r30, r10
   15262:	60 81       	ld	r22, Z
   15264:	84 e0       	ldi	r24, 0x04	; 4
   15266:	94 e2       	ldi	r25, 0x24	; 36
   15268:	0e 94 76 10 	call	0x20ec	; 0x20ec <_ZN5Print5printEhi>
        Serial.print(F(", content = "));
   1526c:	60 ea       	ldi	r22, 0xA0	; 160
   1526e:	72 e1       	ldi	r23, 0x12	; 18
   15270:	84 e0       	ldi	r24, 0x04	; 4
   15272:	94 e2       	ldi	r25, 0x24	; 36
   15274:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
        printHexBuffer(Serial, d.data, d.length);
   15278:	f5 01       	movw	r30, r10
   1527a:	60 81       	ld	r22, Z
   1527c:	70 e0       	ldi	r23, 0x00	; 0
   1527e:	40 e0       	ldi	r20, 0x00	; 0
   15280:	50 e0       	ldi	r21, 0x00	; 0
   15282:	81 81       	ldd	r24, Z+1	; 0x01
   15284:	92 81       	ldd	r25, Z+2	; 0x02
   15286:	0e 94 f9 9b 	call	0x137f2	; 0x137f2 <_ZL14printHexBufferR5PrintPKhjPKc.constprop.40>
   1528a:	59 c1       	rjmp	.+690    	; 0x1553e <_ZL17backpackResourcesv+0x3e0>
      Serial.print(".");
    }

    switch (info.type) {
      case Pbbe::DT_SPI_SLAVE: {
        Pbbe::SpiSlaveDescriptor& d = static_cast<Pbbe::SpiSlaveDescriptor&>(*info.parsed);
   1528c:	0d 80       	ldd	r0, Y+5	; 0x05
   1528e:	de 81       	ldd	r29, Y+6	; 0x06
   15290:	c0 2d       	mov	r28, r0
        Serial.print(d.name);
   15292:	be 01       	movw	r22, r28
   15294:	6e 5f       	subi	r22, 0xFE	; 254
   15296:	7f 4f       	sbci	r23, 0xFF	; 255
   15298:	84 e0       	ldi	r24, 0x04	; 4
   1529a:	94 e2       	ldi	r25, 0x24	; 36
   1529c:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_ZN5Print5printEPKc>
        Serial.print(F(": spi, ss = "));
   152a0:	62 e9       	ldi	r22, 0x92	; 146
   152a2:	73 e1       	ldi	r23, 0x13	; 19
   152a4:	84 e0       	ldi	r24, 0x04	; 4
   152a6:	94 e2       	ldi	r25, 0x24	; 36
   152a8:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
  struct PhysicalPin {
    PhysicalPin(uint8_t val) : val(val) { }
    operator uint8_t() {return this->val; }

    const __FlashStringHelper *name() {
      return reinterpret_cast<const __FlashStringHelper *>(&physical_pin_info[this->val].name);
   152ac:	68 81       	ld	r22, Y
        Serial.print(d.ss_pin.name());
   152ae:	f6 9e       	mul	r15, r22
   152b0:	b0 01       	movw	r22, r0
   152b2:	11 24       	eor	r1, r1
   152b4:	64 59       	subi	r22, 0x94	; 148
   152b6:	77 4f       	sbci	r23, 0xF7	; 247
   152b8:	84 e0       	ldi	r24, 0x04	; 4
   152ba:	94 e2       	ldi	r25, 0x24	; 36
   152bc:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
        Serial.print(F(", max speed = "));
   152c0:	63 e8       	ldi	r22, 0x83	; 131
   152c2:	73 e1       	ldi	r23, 0x13	; 19
   152c4:	84 e0       	ldi	r24, 0x04	; 4
   152c6:	94 e2       	ldi	r25, 0x24	; 36
   152c8:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
  raw_exp_t raw_exponent() const {
    return (val >> significand_bits) & ((1 << exponent_bits) - 1);
  }

  raw_t raw() const {
    return val;
   152cc:	89 81       	ldd	r24, Y+1	; 0x01
        if (d.speed.raw()) {
   152ce:	88 23       	and	r24, r24
   152d0:	09 f4       	brne	.+2      	; 0x152d4 <_ZL17backpackResourcesv+0x176>
   152d2:	43 c0       	rjmp	.+134    	; 0x1535a <_ZL17backpackResourcesv+0x1fc>
    // every extra significand bit gives 1 extra exponent, while every
    // exponent bit _doubles_ the number of exponents).
    static_assert(from_min_exp >= to_min_exp - extra_significand_bits, "Smallest exponent too low for lossless conversion to float");

    ieee754_float res;
    res.sign = 0;
   152d4:	1f 77       	andi	r17, 0x7F	; 127
    raw_exp_t e = raw_exponent();
    return (e == 0 ? (exp_t)1 : (exp_t)raw_exponent) - exponent_bias;
  }

  raw_exp_t raw_exponent() const {
    return (val >> significand_bits) & ((1 << exponent_bits) - 1);
   152d6:	48 2f       	mov	r20, r24
   152d8:	42 95       	swap	r20
   152da:	4f 70       	andi	r20, 0x0F	; 15
    // The next case is when the target minimal exponent is smaller than
    // the source one:
    //   source exponent range:            |--------|
    //   target exponent range:        |----------------|
    if (from_min_exp > to_min_exp) {
      if (raw_exponent() > 0) {
   152dc:	99 f0       	breq	.+38     	; 0x15304 <_ZL17backpackResourcesv+0x1a6>

    return res.f;
  }

  sig_t raw_significand() const {
    return val & ((1 << significand_bits) - 1);
   152de:	8f 70       	andi	r24, 0x0F	; 15
    //   source exponent range:            |--------|
    //   target exponent range:        |----------------|
    if (from_min_exp > to_min_exp) {
      if (raw_exponent() > 0) {
        // Normal numbers can still be copied as-is,
        res.significand = (uint32_t)raw_significand() << extra_significand_bits;
   152e0:	90 e0       	ldi	r25, 0x00	; 0
   152e2:	a0 e0       	ldi	r26, 0x00	; 0
   152e4:	23 e1       	ldi	r18, 0x13	; 19
   152e6:	88 0f       	add	r24, r24
   152e8:	99 1f       	adc	r25, r25
   152ea:	aa 1f       	adc	r26, r26
   152ec:	2a 95       	dec	r18
   152ee:	d9 f7       	brne	.-10     	; 0x152e6 <_ZL17backpackResourcesv+0x188>
   152f0:	38 2f       	mov	r19, r24
   152f2:	29 2f       	mov	r18, r25
        res.exponent = raw_exponent() + exponent_bias_offset;
   152f4:	47 58       	subi	r20, 0x87	; 135
   152f6:	0a 2f       	mov	r16, r26
   152f8:	40 fb       	bst	r20, 0
   152fa:	07 f9       	bld	r16, 7
   152fc:	46 95       	lsr	r20
   152fe:	10 78       	andi	r17, 0x80	; 128
   15300:	14 2b       	or	r17, r20
   15302:	1d c0       	rjmp	.+58     	; 0x1533e <_ZL17backpackResourcesv+0x1e0>
    // The next case is when the target minimal exponent is smaller than
    // the source one:
    //   source exponent range:            |--------|
    //   target exponent range:        |----------------|
    if (from_min_exp > to_min_exp) {
      if (raw_exponent() > 0) {
   15304:	99 e7       	ldi	r25, 0x79	; 121
              }
            }

            // Shift left until a "1" is about to be shifted out. If so,
            // stop _after_ shifting off that one.
            if ((significand & (1L << (significand_bits - 1))))
   15306:	38 2f       	mov	r19, r24
   15308:	38 70       	andi	r19, 0x08	; 8
              done = true;

            significand <<= 1;
   1530a:	88 0f       	add	r24, r24
   1530c:	2f ef       	ldi	r18, 0xFF	; 255
   1530e:	29 0f       	add	r18, r25
          // either:
          //  - We shift out a leading 1, making it a normal number
          //  - We reach the target minimal exponent
          res.exponent = 1 + exponent_bias_offset;
          bool done = false;
          do {
   15310:	31 11       	cpse	r19, r1
   15312:	02 c0       	rjmp	.+4      	; 0x15318 <_ZL17backpackResourcesv+0x1ba>
   15314:	92 2f       	mov	r25, r18
   15316:	f7 cf       	rjmp	.-18     	; 0x15306 <_ZL17backpackResourcesv+0x1a8>
   15318:	90 fb       	bst	r25, 0
   1531a:	07 f9       	bld	r16, 7
   1531c:	96 95       	lsr	r25
   1531e:	10 78       	andi	r17, 0x80	; 128
   15320:	19 2b       	or	r17, r25
              done = true;

            significand <<= 1;
            res.exponent--;
          } while (!done);
          res.significand = (uint32_t)significand << extra_significand_bits;
   15322:	90 e0       	ldi	r25, 0x00	; 0
   15324:	a0 e0       	ldi	r26, 0x00	; 0
   15326:	e3 e1       	ldi	r30, 0x13	; 19
   15328:	88 0f       	add	r24, r24
   1532a:	99 1f       	adc	r25, r25
   1532c:	aa 1f       	adc	r26, r26
   1532e:	ea 95       	dec	r30
   15330:	d9 f7       	brne	.-10     	; 0x15328 <_ZL17backpackResourcesv+0x1ca>
   15332:	38 2f       	mov	r19, r24
   15334:	29 2f       	mov	r18, r25
   15336:	8a 2f       	mov	r24, r26
   15338:	8f 77       	andi	r24, 0x7F	; 127
   1533a:	00 78       	andi	r16, 0x80	; 128
   1533c:	08 2b       	or	r16, r24
        res.significand = (uint32_t)raw_significand() << (extra_significand_bits - shift_right);
        res.exponent = 0;
      }
    }

    return res.f;
   1533e:	f9 01       	movw	r30, r18
          Serial.print((float)d.speed, 2);
   15340:	22 e0       	ldi	r18, 0x02	; 2
   15342:	30 e0       	ldi	r19, 0x00	; 0
   15344:	4f 2f       	mov	r20, r31
   15346:	5e 2f       	mov	r21, r30
   15348:	60 2f       	mov	r22, r16
   1534a:	71 2f       	mov	r23, r17
   1534c:	84 e0       	ldi	r24, 0x04	; 4
   1534e:	94 e2       	ldi	r25, 0x24	; 36
   15350:	0e 94 a0 11 	call	0x2340	; 0x2340 <_ZN5Print5printEdi>
          Serial.print(F("Mhz"));
   15354:	6f e7       	ldi	r22, 0x7F	; 127
   15356:	73 e1       	ldi	r23, 0x13	; 19
   15358:	02 c0       	rjmp	.+4      	; 0x1535e <_ZL17backpackResourcesv+0x200>
        } else {
          Serial.print(F("unknown"));
   1535a:	67 e7       	ldi	r22, 0x77	; 119
   1535c:	73 e1       	ldi	r23, 0x13	; 19
   1535e:	84 e0       	ldi	r24, 0x04	; 4
   15360:	94 e2       	ldi	r25, 0x24	; 36
   15362:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
   15366:	eb c0       	rjmp	.+470    	; 0x1553e <_ZL17backpackResourcesv+0x3e0>
        }
        Serial.println();
        break;
      }
      case Pbbe::DT_UART: {
        Pbbe::UartDescriptor& d = static_cast<Pbbe::UartDescriptor&>(*info.parsed);
   15368:	0d 80       	ldd	r0, Y+5	; 0x05
   1536a:	de 81       	ldd	r29, Y+6	; 0x06
   1536c:	c0 2d       	mov	r28, r0
        Serial.print(d.name);
   1536e:	be 01       	movw	r22, r28
   15370:	6a 5f       	subi	r22, 0xFA	; 250
   15372:	7f 4f       	sbci	r23, 0xFF	; 255
   15374:	84 e0       	ldi	r24, 0x04	; 4
   15376:	94 e2       	ldi	r25, 0x24	; 36
   15378:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_ZN5Print5printEPKc>
        Serial.print(F(": uart, tx = "));
   1537c:	69 e6       	ldi	r22, 0x69	; 105
   1537e:	73 e1       	ldi	r23, 0x13	; 19
   15380:	84 e0       	ldi	r24, 0x04	; 4
   15382:	94 e2       	ldi	r25, 0x24	; 36
   15384:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
   15388:	68 81       	ld	r22, Y
        Serial.print(d.tx_pin.name());
   1538a:	f6 9e       	mul	r15, r22
   1538c:	b0 01       	movw	r22, r0
   1538e:	11 24       	eor	r1, r1
   15390:	64 59       	subi	r22, 0x94	; 148
   15392:	77 4f       	sbci	r23, 0xF7	; 247
   15394:	84 e0       	ldi	r24, 0x04	; 4
   15396:	94 e2       	ldi	r25, 0x24	; 36
   15398:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
        Serial.print(F(", rx = "));
   1539c:	61 e6       	ldi	r22, 0x61	; 97
   1539e:	73 e1       	ldi	r23, 0x13	; 19
   153a0:	84 e0       	ldi	r24, 0x04	; 4
   153a2:	94 e2       	ldi	r25, 0x24	; 36
   153a4:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
   153a8:	69 81       	ldd	r22, Y+1	; 0x01
        Serial.print(d.rx_pin.name());
   153aa:	f6 9e       	mul	r15, r22
   153ac:	b0 01       	movw	r22, r0
   153ae:	11 24       	eor	r1, r1
   153b0:	64 59       	subi	r22, 0x94	; 148
   153b2:	77 4f       	sbci	r23, 0xF7	; 247
   153b4:	84 e0       	ldi	r24, 0x04	; 4
   153b6:	94 e2       	ldi	r25, 0x24	; 36
   153b8:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
        Serial.print(F(", speed = "));
   153bc:	66 e5       	ldi	r22, 0x56	; 86
   153be:	73 e1       	ldi	r23, 0x13	; 19
   153c0:	84 e0       	ldi	r24, 0x04	; 4
   153c2:	94 e2       	ldi	r25, 0x24	; 36
   153c4:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
        if (d.speed) {
   153c8:	4a 81       	ldd	r20, Y+2	; 0x02
   153ca:	5b 81       	ldd	r21, Y+3	; 0x03
   153cc:	6c 81       	ldd	r22, Y+4	; 0x04
   153ce:	7d 81       	ldd	r23, Y+5	; 0x05
   153d0:	41 15       	cp	r20, r1
   153d2:	51 05       	cpc	r21, r1
   153d4:	61 05       	cpc	r22, r1
   153d6:	71 05       	cpc	r23, r1
   153d8:	49 f0       	breq	.+18     	; 0x153ec <_ZL17backpackResourcesv+0x28e>
          Serial.print(d.speed);
   153da:	2a e0       	ldi	r18, 0x0A	; 10
   153dc:	30 e0       	ldi	r19, 0x00	; 0
   153de:	84 e0       	ldi	r24, 0x04	; 4
   153e0:	94 e2       	ldi	r25, 0x24	; 36
   153e2:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <_ZN5Print5printEmi>
          Serial.print(F("bps"));
   153e6:	62 e5       	ldi	r22, 0x52	; 82
   153e8:	73 e1       	ldi	r23, 0x13	; 19
   153ea:	b9 cf       	rjmp	.-142    	; 0x1535e <_ZL17backpackResourcesv+0x200>
        } else {
          Serial.print(F("unknown"));
   153ec:	6a e4       	ldi	r22, 0x4A	; 74
   153ee:	73 e1       	ldi	r23, 0x13	; 19
   153f0:	b6 cf       	rjmp	.-148    	; 0x1535e <_ZL17backpackResourcesv+0x200>
        }
        Serial.println();
        break;
      }
      case Pbbe::DT_IOPIN: {
        Pbbe::IoPinDescriptor& d = static_cast<Pbbe::IoPinDescriptor&>(*info.parsed);
   153f2:	0d 80       	ldd	r0, Y+5	; 0x05
   153f4:	de 81       	ldd	r29, Y+6	; 0x06
   153f6:	c0 2d       	mov	r28, r0
        Serial.print(d.name);
   153f8:	be 01       	movw	r22, r28
   153fa:	6f 5f       	subi	r22, 0xFF	; 255
   153fc:	7f 4f       	sbci	r23, 0xFF	; 255
   153fe:	84 e0       	ldi	r24, 0x04	; 4
   15400:	94 e2       	ldi	r25, 0x24	; 36
   15402:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_ZN5Print5printEPKc>
        Serial.print(F(": gpio, pin = "));
   15406:	6b e3       	ldi	r22, 0x3B	; 59
   15408:	73 e1       	ldi	r23, 0x13	; 19
   1540a:	84 e0       	ldi	r24, 0x04	; 4
   1540c:	94 e2       	ldi	r25, 0x24	; 36
   1540e:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
   15412:	68 81       	ld	r22, Y
        Serial.print(d.pin.name());
   15414:	f6 9e       	mul	r15, r22
   15416:	b0 01       	movw	r22, r0
   15418:	11 24       	eor	r1, r1
   1541a:	64 59       	subi	r22, 0x94	; 148
   1541c:	77 4f       	sbci	r23, 0xF7	; 247
   1541e:	9f cf       	rjmp	.-194    	; 0x1535e <_ZL17backpackResourcesv+0x200>
      case Pbbe::DT_GROUP: {
  // Ignore
        break;
      }
      case Pbbe::DT_POWER_USAGE: {
        Pbbe::PowerUsageDescriptor& d = static_cast<Pbbe::PowerUsageDescriptor&>(*info.parsed);
   15420:	0d 80       	ldd	r0, Y+5	; 0x05
   15422:	de 81       	ldd	r29, Y+6	; 0x06
   15424:	c0 2d       	mov	r28, r0
        Serial.print(F("power: pin = "));
   15426:	6d e2       	ldi	r22, 0x2D	; 45
   15428:	73 e1       	ldi	r23, 0x13	; 19
   1542a:	84 e0       	ldi	r24, 0x04	; 4
   1542c:	94 e2       	ldi	r25, 0x24	; 36
   1542e:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
   15432:	68 81       	ld	r22, Y
        Serial.print(d.power_pin.name());
   15434:	f6 9e       	mul	r15, r22
   15436:	b0 01       	movw	r22, r0
   15438:	11 24       	eor	r1, r1
   1543a:	64 59       	subi	r22, 0x94	; 148
   1543c:	77 4f       	sbci	r23, 0xF7	; 247
   1543e:	84 e0       	ldi	r24, 0x04	; 4
   15440:	94 e2       	ldi	r25, 0x24	; 36
   15442:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
        Serial.print(F(", minimum = "));
   15446:	60 e2       	ldi	r22, 0x20	; 32
   15448:	73 e1       	ldi	r23, 0x13	; 19
   1544a:	84 e0       	ldi	r24, 0x04	; 4
   1544c:	94 e2       	ldi	r25, 0x24	; 36
   1544e:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
        if (d.minimum.raw()) {
   15452:	89 81       	ldd	r24, Y+1	; 0x01
   15454:	88 23       	and	r24, r24
   15456:	71 f0       	breq	.+28     	; 0x15474 <_ZL17backpackResourcesv+0x316>
          Serial.print((float)d.minimum, 2);
   15458:	ce 01       	movw	r24, r28
   1545a:	01 96       	adiw	r24, 0x01	; 1
   1545c:	40 de       	rcall	.-896    	; 0x150de <_ZNK9MinifloatILj4ELj4ELin4EEcvfEv>
   1545e:	ab 01       	movw	r20, r22
   15460:	bc 01       	movw	r22, r24
   15462:	22 e0       	ldi	r18, 0x02	; 2
   15464:	30 e0       	ldi	r19, 0x00	; 0
   15466:	84 e0       	ldi	r24, 0x04	; 4
   15468:	94 e2       	ldi	r25, 0x24	; 36
   1546a:	0e 94 a0 11 	call	0x2340	; 0x2340 <_ZN5Print5printEdi>
          Serial.print(F("uA"));
   1546e:	6d e1       	ldi	r22, 0x1D	; 29
   15470:	73 e1       	ldi	r23, 0x13	; 19
   15472:	02 c0       	rjmp	.+4      	; 0x15478 <_ZL17backpackResourcesv+0x31a>
        } else {
          Serial.print(F("unknown"));
   15474:	65 e1       	ldi	r22, 0x15	; 21
   15476:	73 e1       	ldi	r23, 0x13	; 19
   15478:	84 e0       	ldi	r24, 0x04	; 4
   1547a:	94 e2       	ldi	r25, 0x24	; 36
   1547c:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
        }
        Serial.print(F(", typical = "));
   15480:	68 e0       	ldi	r22, 0x08	; 8
   15482:	73 e1       	ldi	r23, 0x13	; 19
   15484:	84 e0       	ldi	r24, 0x04	; 4
   15486:	94 e2       	ldi	r25, 0x24	; 36
   15488:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
        if (d.typical.raw()) {
   1548c:	8a 81       	ldd	r24, Y+2	; 0x02
   1548e:	88 23       	and	r24, r24
   15490:	71 f0       	breq	.+28     	; 0x154ae <_ZL17backpackResourcesv+0x350>
          Serial.print((float)d.typical, 2);
   15492:	ce 01       	movw	r24, r28
   15494:	02 96       	adiw	r24, 0x02	; 2
   15496:	23 de       	rcall	.-954    	; 0x150de <_ZNK9MinifloatILj4ELj4ELin4EEcvfEv>
   15498:	ab 01       	movw	r20, r22
   1549a:	bc 01       	movw	r22, r24
   1549c:	22 e0       	ldi	r18, 0x02	; 2
   1549e:	30 e0       	ldi	r19, 0x00	; 0
   154a0:	84 e0       	ldi	r24, 0x04	; 4
   154a2:	94 e2       	ldi	r25, 0x24	; 36
   154a4:	0e 94 a0 11 	call	0x2340	; 0x2340 <_ZN5Print5printEdi>
          Serial.print(F("uA"));
   154a8:	65 e0       	ldi	r22, 0x05	; 5
   154aa:	73 e1       	ldi	r23, 0x13	; 19
   154ac:	02 c0       	rjmp	.+4      	; 0x154b2 <_ZL17backpackResourcesv+0x354>
        } else {
          Serial.print(F("unknown"));
   154ae:	6d ef       	ldi	r22, 0xFD	; 253
   154b0:	72 e1       	ldi	r23, 0x12	; 18
   154b2:	84 e0       	ldi	r24, 0x04	; 4
   154b4:	94 e2       	ldi	r25, 0x24	; 36
   154b6:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
        }
        Serial.print(F(", maximum = "));
   154ba:	60 ef       	ldi	r22, 0xF0	; 240
   154bc:	72 e1       	ldi	r23, 0x12	; 18
   154be:	84 e0       	ldi	r24, 0x04	; 4
   154c0:	94 e2       	ldi	r25, 0x24	; 36
   154c2:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
        if (d.maximum.raw()) {
   154c6:	8b 81       	ldd	r24, Y+3	; 0x03
   154c8:	88 23       	and	r24, r24
   154ca:	71 f0       	breq	.+28     	; 0x154e8 <_ZL17backpackResourcesv+0x38a>
          Serial.print((float)d.maximum, 2);
   154cc:	ce 01       	movw	r24, r28
   154ce:	03 96       	adiw	r24, 0x03	; 3
   154d0:	06 de       	rcall	.-1012   	; 0x150de <_ZNK9MinifloatILj4ELj4ELin4EEcvfEv>
   154d2:	ab 01       	movw	r20, r22
   154d4:	bc 01       	movw	r22, r24
   154d6:	22 e0       	ldi	r18, 0x02	; 2
   154d8:	30 e0       	ldi	r19, 0x00	; 0
   154da:	84 e0       	ldi	r24, 0x04	; 4
   154dc:	94 e2       	ldi	r25, 0x24	; 36
   154de:	0e 94 a0 11 	call	0x2340	; 0x2340 <_ZN5Print5printEdi>
          Serial.print(F("uA"));
   154e2:	6d ee       	ldi	r22, 0xED	; 237
   154e4:	72 e1       	ldi	r23, 0x12	; 18
   154e6:	3b cf       	rjmp	.-394    	; 0x1535e <_ZL17backpackResourcesv+0x200>
        } else {
          Serial.print(F("unknown"));
   154e8:	65 ee       	ldi	r22, 0xE5	; 229
   154ea:	72 e1       	ldi	r23, 0x12	; 18
   154ec:	38 cf       	rjmp	.-400    	; 0x1535e <_ZL17backpackResourcesv+0x200>
        }
        Serial.println();
        break;
      }
      case Pbbe::DT_I2C_SLAVE: {
        Pbbe::I2cSlaveDescriptor& d = static_cast<Pbbe::I2cSlaveDescriptor&>(*info.parsed);
   154ee:	0d 80       	ldd	r0, Y+5	; 0x05
   154f0:	de 81       	ldd	r29, Y+6	; 0x06
   154f2:	c0 2d       	mov	r28, r0
        Serial.print(d.name);
   154f4:	be 01       	movw	r22, r28
   154f6:	6d 5f       	subi	r22, 0xFD	; 253
   154f8:	7f 4f       	sbci	r23, 0xFF	; 255
   154fa:	84 e0       	ldi	r24, 0x04	; 4
   154fc:	94 e2       	ldi	r25, 0x24	; 36
   154fe:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_ZN5Print5printEPKc>
        Serial.print(F(": i2c, address = "));
   15502:	63 ed       	ldi	r22, 0xD3	; 211
   15504:	72 e1       	ldi	r23, 0x12	; 18
   15506:	84 e0       	ldi	r24, 0x04	; 4
   15508:	94 e2       	ldi	r25, 0x24	; 36
   1550a:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
        Serial.print(d.addr);
   1550e:	4a e0       	ldi	r20, 0x0A	; 10
   15510:	50 e0       	ldi	r21, 0x00	; 0
   15512:	68 81       	ld	r22, Y
   15514:	84 e0       	ldi	r24, 0x04	; 4
   15516:	94 e2       	ldi	r25, 0x24	; 36
   15518:	0e 94 76 10 	call	0x20ec	; 0x20ec <_ZN5Print5printEhi>
        Serial.print(F(", max speed = "));
   1551c:	64 ec       	ldi	r22, 0xC4	; 196
   1551e:	72 e1       	ldi	r23, 0x12	; 18
   15520:	84 e0       	ldi	r24, 0x04	; 4
   15522:	94 e2       	ldi	r25, 0x24	; 36
   15524:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN5Print5printEPK19__FlashStringHelper>
        Serial.print(d.speed);
   15528:	69 81       	ldd	r22, Y+1	; 0x01
   1552a:	7a 81       	ldd	r23, Y+2	; 0x02
   1552c:	4a e0       	ldi	r20, 0x0A	; 10
   1552e:	50 e0       	ldi	r21, 0x00	; 0
   15530:	84 e0       	ldi	r24, 0x04	; 4
   15532:	94 e2       	ldi	r25, 0x24	; 36
   15534:	0e 94 91 10 	call	0x2122	; 0x2122 <_ZN5Print5printEji>
        Serial.print(F("kbps"));
   15538:	6f eb       	ldi	r22, 0xBF	; 191
   1553a:	72 e1       	ldi	r23, 0x12	; 18
   1553c:	10 cf       	rjmp	.-480    	; 0x1535e <_ZL17backpackResourcesv+0x200>
        Serial.print(d.name);
        Serial.print(F(": data, length = "));
        Serial.print(d.length);
        Serial.print(F(", content = "));
        printHexBuffer(Serial, d.data, d.length);
        Serial.println();
   1553e:	84 e0       	ldi	r24, 0x04	; 4
   15540:	94 e2       	ldi	r25, 0x24	; 36
   15542:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <_ZN5Print7printlnEv>
        break;
   15546:	6f ce       	rjmp	.-802    	; 0x15226 <_ZL17backpackResourcesv+0xc8>
        break;
      }
    }
  }

  return 1;
   15548:	61 e0       	ldi	r22, 0x01	; 1
   1554a:	70 e0       	ldi	r23, 0x00	; 0
   1554c:	80 e0       	ldi	r24, 0x00	; 0
   1554e:	90 e0       	ldi	r25, 0x00	; 0
}
   15550:	df 91       	pop	r29
   15552:	cf 91       	pop	r28
   15554:	1f 91       	pop	r17
   15556:	0f 91       	pop	r16
   15558:	ff 90       	pop	r15
   1555a:	ef 90       	pop	r14
   1555c:	df 90       	pop	r13
   1555e:	cf 90       	pop	r12
   15560:	bf 90       	pop	r11
   15562:	af 90       	pop	r10
   15564:	9f 90       	pop	r9
   15566:	8f 90       	pop	r8
   15568:	08 95       	ret

0001556a <_GLOBAL__sub_I_Shell>:
  }
}

static void ledEventHandler(uint8_t redValue, uint8_t greenValue, uint8_t blueValue) {
  ledReportHQ();
}
   1556a:	0c 94 a9 99 	jmp	0x13352	; 0x13352 <_Z41__static_initialization_and_destruction_0ii.part.28>

0001556e <getMemoryUsed>:
  FREELIST *fp;
  size_t size;

  for(size=0,fp=__flp;fp;fp=fp->nx,size+=fp->sz+sizeof(size_t));
  return size;
}
   1556e:	20 91 fb 3a 	lds	r18, 0x3AFB
   15572:	30 91 fc 3a 	lds	r19, 0x3AFC
   15576:	21 15       	cp	r18, r1
   15578:	31 05       	cpc	r19, r1
   1557a:	d9 f0       	breq	.+54     	; 0x155b2 <getMemoryUsed+0x44>
   1557c:	80 91 3c 0c 	lds	r24, 0x0C3C
   15580:	90 91 3d 0c 	lds	r25, 0x0C3D
   15584:	28 1b       	sub	r18, r24
   15586:	39 0b       	sbc	r19, r25
   15588:	e0 91 fd 3a 	lds	r30, 0x3AFD
   1558c:	f0 91 fe 3a 	lds	r31, 0x3AFE
   15590:	8e ef       	ldi	r24, 0xFE	; 254
   15592:	9f ef       	ldi	r25, 0xFF	; 255
   15594:	30 97       	sbiw	r30, 0x00	; 0
   15596:	59 f0       	breq	.+22     	; 0x155ae <getMemoryUsed+0x40>
   15598:	40 81       	ld	r20, Z
   1559a:	51 81       	ldd	r21, Z+1	; 0x01
   1559c:	bc 01       	movw	r22, r24
   1559e:	64 1b       	sub	r22, r20
   155a0:	75 0b       	sbc	r23, r21
   155a2:	26 0f       	add	r18, r22
   155a4:	37 1f       	adc	r19, r23
   155a6:	02 80       	ldd	r0, Z+2	; 0x02
   155a8:	f3 81       	ldd	r31, Z+3	; 0x03
   155aa:	e0 2d       	mov	r30, r0
   155ac:	f3 cf       	rjmp	.-26     	; 0x15594 <getMemoryUsed+0x26>
   155ae:	c9 01       	movw	r24, r18
   155b0:	08 95       	ret
   155b2:	80 e0       	ldi	r24, 0x00	; 0
   155b4:	90 e0       	ldi	r25, 0x00	; 0
   155b6:	08 95       	ret

000155b8 <getFreeMemory>:
   155b8:	cf 93       	push	r28
   155ba:	df 93       	push	r29
   155bc:	cd b7       	in	r28, 0x3d	; 61
   155be:	de b7       	in	r29, 0x3e	; 62
   155c0:	80 91 3e 0c 	lds	r24, 0x0C3E
   155c4:	90 91 3f 0c 	lds	r25, 0x0C3F
   155c8:	c8 1b       	sub	r28, r24
   155ca:	d9 0b       	sbc	r29, r25
   155cc:	80 91 3c 0c 	lds	r24, 0x0C3C
   155d0:	90 91 3d 0c 	lds	r25, 0x0C3D
   155d4:	c8 1b       	sub	r28, r24
   155d6:	d9 0b       	sbc	r29, r25
   155d8:	ca df       	rcall	.-108    	; 0x1556e <getMemoryUsed>
   155da:	9e 01       	movw	r18, r28
   155dc:	28 1b       	sub	r18, r24
   155de:	39 0b       	sbc	r19, r25
   155e0:	c9 01       	movw	r24, r18
   155e2:	df 91       	pop	r29
   155e4:	cf 91       	pop	r28
   155e6:	08 95       	ret

000155e8 <getLargestBlockInFreeList>:
   155e8:	e0 91 fd 3a 	lds	r30, 0x3AFD
   155ec:	f0 91 fe 3a 	lds	r31, 0x3AFE
   155f0:	80 e0       	ldi	r24, 0x00	; 0
   155f2:	90 e0       	ldi	r25, 0x00	; 0
   155f4:	30 97       	sbiw	r30, 0x00	; 0
   155f6:	51 f0       	breq	.+20     	; 0x1560c <getLargestBlockInFreeList+0x24>
   155f8:	20 81       	ld	r18, Z
   155fa:	31 81       	ldd	r19, Z+1	; 0x01
   155fc:	82 17       	cp	r24, r18
   155fe:	93 07       	cpc	r25, r19
   15600:	08 f4       	brcc	.+2      	; 0x15604 <getLargestBlockInFreeList+0x1c>
   15602:	c9 01       	movw	r24, r18
   15604:	02 80       	ldd	r0, Z+2	; 0x02
   15606:	f3 81       	ldd	r31, Z+3	; 0x03
   15608:	e0 2d       	mov	r30, r0
   1560a:	f4 cf       	rjmp	.-24     	; 0x155f4 <getLargestBlockInFreeList+0xc>
   1560c:	08 95       	ret

0001560e <getLargestNonFreeListBlock>:
{
  char *cp,*brkval;

// this code is an adapted fragment from malloc() itself

  brkval=__brkval == 0 ? __malloc_heap_start : __brkval;
   1560e:	20 91 fb 3a 	lds	r18, 0x3AFB
   15612:	30 91 fc 3a 	lds	r19, 0x3AFC
   15616:	21 15       	cp	r18, r1
   15618:	31 05       	cpc	r19, r1
   1561a:	21 f4       	brne	.+8      	; 0x15624 <getLargestNonFreeListBlock+0x16>
   1561c:	20 91 3c 0c 	lds	r18, 0x0C3C
   15620:	30 91 3d 0c 	lds	r19, 0x0C3D

  if((cp=__malloc_heap_end)==NULL)
   15624:	80 91 3a 0c 	lds	r24, 0x0C3A
   15628:	90 91 3b 0c 	lds	r25, 0x0C3B
   1562c:	00 97       	sbiw	r24, 0x00	; 0
   1562e:	41 f4       	brne	.+16     	; 0x15640 <getLargestNonFreeListBlock+0x32>
    cp=(char *)AVR_STACK_POINTER_REG-__malloc_margin;
   15630:	8d b7       	in	r24, 0x3d	; 61
   15632:	9e b7       	in	r25, 0x3e	; 62
   15634:	40 91 3e 0c 	lds	r20, 0x0C3E
   15638:	50 91 3f 0c 	lds	r21, 0x0C3F
   1563c:	84 1b       	sub	r24, r20
   1563e:	95 0b       	sbc	r25, r21
  if(cp<=brkval)
   15640:	28 17       	cp	r18, r24
   15642:	39 07       	cpc	r19, r25
   15644:	18 f4       	brcc	.+6      	; 0x1564c <getLargestNonFreeListBlock+0x3e>
    return 0;

  return cp-brkval;
   15646:	82 1b       	sub	r24, r18
   15648:	93 0b       	sbc	r25, r19
   1564a:	08 95       	ret
  brkval=__brkval == 0 ? __malloc_heap_start : __brkval;

  if((cp=__malloc_heap_end)==NULL)
    cp=(char *)AVR_STACK_POINTER_REG-__malloc_margin;
  if(cp<=brkval)
    return 0;
   1564c:	80 e0       	ldi	r24, 0x00	; 0
   1564e:	90 e0       	ldi	r25, 0x00	; 0

  return cp-brkval;
}
   15650:	08 95       	ret

00015652 <getLargestAvailableMemoryBlock>:
 * Get the largest available block that can be successfully
 * allocated by malloc()
 */

size_t getLargestAvailableMemoryBlock()
{
   15652:	cf 93       	push	r28
   15654:	df 93       	push	r29
  size_t a,b;

  a=getLargestBlockInFreeList();
   15656:	c8 df       	rcall	.-112    	; 0x155e8 <getLargestBlockInFreeList>
   15658:	ec 01       	movw	r28, r24
  b=getLargestNonFreeListBlock();
   1565a:	d9 df       	rcall	.-78     	; 0x1560e <getLargestNonFreeListBlock>
   1565c:	8c 17       	cp	r24, r28
   1565e:	9d 07       	cpc	r25, r29
   15660:	08 f4       	brcc	.+2      	; 0x15664 <getLargestAvailableMemoryBlock+0x12>
   15662:	ce 01       	movw	r24, r28

  return a>b ? a : b;
}
   15664:	df 91       	pop	r29
   15666:	cf 91       	pop	r28
   15668:	08 95       	ret

0001566a <showMemory>:
    return 0;

  return cp-brkval;
}

void showMemory(void) {
   1566a:	ef 92       	push	r14
   1566c:	ff 92       	push	r15
   1566e:	0f 93       	push	r16
   15670:	1f 93       	push	r17
   15672:	cf 93       	push	r28
   15674:	df 93       	push	r29
   15676:	cd b7       	in	r28, 0x3d	; 61
   15678:	de b7       	in	r29, 0x3e	; 62
   1567a:	c4 56       	subi	r28, 0x64	; 100
   1567c:	d1 09       	sbc	r29, r1
   1567e:	0f b6       	in	r0, 0x3f	; 63
   15680:	f8 94       	cli
   15682:	de bf       	out	0x3e, r29	; 62
   15684:	0f be       	out	0x3f, r0	; 63
   15686:	cd bf       	out	0x3d, r28	; 61

  snprintf(buffer, sizeof(buffer), "%04u %04u %04u : used/free/large",
      getMemoryUsed(),
      getFreeMemory(),
      getLargestAvailableMemoryBlock()
    );
   15688:	e4 df       	rcall	.-56     	; 0x15652 <getLargestAvailableMemoryBlock>
   1568a:	f8 2e       	mov	r15, r24
   1568c:	e9 2e       	mov	r14, r25
   1568e:	94 df       	rcall	.-216    	; 0x155b8 <getFreeMemory>
   15690:	18 2f       	mov	r17, r24
   15692:	09 2f       	mov	r16, r25
   15694:	6c df       	rcall	.-296    	; 0x1556e <getMemoryUsed>
   15696:	ef 92       	push	r14
   15698:	ff 92       	push	r15
   1569a:	0f 93       	push	r16
   1569c:	1f 93       	push	r17
   1569e:	9f 93       	push	r25
   156a0:	8f 93       	push	r24
   156a2:	80 ea       	ldi	r24, 0xA0	; 160
   156a4:	93 e2       	ldi	r25, 0x23	; 35
   156a6:	9f 93       	push	r25
   156a8:	8f 93       	push	r24
   156aa:	1f 92       	push	r1
   156ac:	84 e6       	ldi	r24, 0x64	; 100
   156ae:	8f 93       	push	r24
   156b0:	8e 01       	movw	r16, r28
   156b2:	0f 5f       	subi	r16, 0xFF	; 255
   156b4:	1f 4f       	sbci	r17, 0xFF	; 255
   156b6:	1f 93       	push	r17
   156b8:	0f 93       	push	r16
   156ba:	0e 94 1d b6 	call	0x16c3a	; 0x16c3a <snprintf>

  speol(buffer);
   156be:	c8 01       	movw	r24, r16
   156c0:	0e 94 79 1f 	call	0x3ef2	; 0x3ef2 <_Z5speolPKc>
   156c4:	0f b6       	in	r0, 0x3f	; 63
   156c6:	f8 94       	cli
   156c8:	de bf       	out	0x3e, r29	; 62
   156ca:	0f be       	out	0x3f, r0	; 63
   156cc:	cd bf       	out	0x3d, r28	; 61
}
   156ce:	cc 59       	subi	r28, 0x9C	; 156
   156d0:	df 4f       	sbci	r29, 0xFF	; 255
   156d2:	0f b6       	in	r0, 0x3f	; 63
   156d4:	f8 94       	cli
   156d6:	de bf       	out	0x3e, r29	; 62
   156d8:	0f be       	out	0x3f, r0	; 63
   156da:	cd bf       	out	0x3d, r28	; 61
   156dc:	df 91       	pop	r29
   156de:	cf 91       	pop	r28
   156e0:	1f 91       	pop	r17
   156e2:	0f 91       	pop	r16
   156e4:	ff 90       	pop	r15
   156e6:	ef 90       	pop	r14
   156e8:	08 95       	ret

000156ea <_ZN12StringBuffer12blockReserveEj>:
  if (initial)
    blockReserve(initial);
}

bool StringBuffer::blockReserve(size_t size) {
  if (this->capacity > size)
   156ea:	fc 01       	movw	r30, r24
   156ec:	22 81       	ldd	r18, Z+2	; 0x02
   156ee:	33 81       	ldd	r19, Z+3	; 0x03
   156f0:	62 17       	cp	r22, r18
   156f2:	73 07       	cpc	r23, r19
   156f4:	78 f0       	brcs	.+30     	; 0x15714 <_ZN12StringBuffer12blockReserveEj+0x2a>
    return true; // short circuit for the common case

  // Round up to a full block size
  size = (size + this->block_size_mask) & ~this->block_size_mask;
   156f6:	26 81       	ldd	r18, Z+6	; 0x06
   156f8:	37 81       	ldd	r19, Z+7	; 0x07
   156fa:	62 0f       	add	r22, r18
   156fc:	73 1f       	adc	r23, r19
   156fe:	20 95       	com	r18
   15700:	30 95       	com	r19
   15702:	62 23       	and	r22, r18
   15704:	73 23       	and	r23, r19
  return reserve(size);
   15706:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <_ZN6String7reserveEj>
   1570a:	91 e0       	ldi	r25, 0x01	; 1
   1570c:	81 11       	cpse	r24, r1
   1570e:	03 c0       	rjmp	.+6      	; 0x15716 <_ZN12StringBuffer12blockReserveEj+0x2c>
   15710:	90 e0       	ldi	r25, 0x00	; 0
   15712:	01 c0       	rjmp	.+2      	; 0x15716 <_ZN12StringBuffer12blockReserveEj+0x2c>
    blockReserve(initial);
}

bool StringBuffer::blockReserve(size_t size) {
  if (this->capacity > size)
    return true; // short circuit for the common case
   15714:	91 e0       	ldi	r25, 0x01	; 1

  // Round up to a full block size
  size = (size + this->block_size_mask) & ~this->block_size_mask;
  return reserve(size);
}
   15716:	89 2f       	mov	r24, r25
   15718:	08 95       	ret

0001571a <_ZN12StringBufferC1Ejj>:
 */

#include <Arduino.h>
#include "StringBuffer.h"

StringBuffer::StringBuffer(size_t initial, size_t block_size) {
   1571a:	ef 92       	push	r14
   1571c:	ff 92       	push	r15
   1571e:	0f 93       	push	r16
   15720:	1f 93       	push	r17
   15722:	cf 93       	push	r28
   15724:	df 93       	push	r29
   15726:	ec 01       	movw	r28, r24
   15728:	8b 01       	movw	r16, r22
   1572a:	7a 01       	movw	r14, r20
   1572c:	6f ea       	ldi	r22, 0xAF	; 175
   1572e:	79 e1       	ldi	r23, 0x19	; 25
   15730:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <_ZN6StringC1EPKc>
  this->block_size_mask = block_size - 1;
   15734:	81 e0       	ldi	r24, 0x01	; 1
   15736:	e8 1a       	sub	r14, r24
   15738:	f1 08       	sbc	r15, r1
   1573a:	ff 82       	std	Y+7, r15	; 0x07
   1573c:	ee 82       	std	Y+6, r14	; 0x06

  if (initial)
   1573e:	01 15       	cp	r16, r1
   15740:	11 05       	cpc	r17, r1
   15742:	49 f0       	breq	.+18     	; 0x15756 <_ZN12StringBufferC1Ejj+0x3c>
    blockReserve(initial);
   15744:	b8 01       	movw	r22, r16
   15746:	ce 01       	movw	r24, r28
}
   15748:	df 91       	pop	r29
   1574a:	cf 91       	pop	r28
   1574c:	1f 91       	pop	r17
   1574e:	0f 91       	pop	r16
   15750:	ff 90       	pop	r15
   15752:	ef 90       	pop	r14

StringBuffer::StringBuffer(size_t initial, size_t block_size) {
  this->block_size_mask = block_size - 1;

  if (initial)
    blockReserve(initial);
   15754:	ca cf       	rjmp	.-108    	; 0x156ea <_ZN12StringBuffer12blockReserveEj>
}
   15756:	df 91       	pop	r29
   15758:	cf 91       	pop	r28
   1575a:	1f 91       	pop	r17
   1575c:	0f 91       	pop	r16
   1575e:	ff 90       	pop	r15
   15760:	ef 90       	pop	r14
   15762:	08 95       	ret

00015764 <_ZN12StringBuffer13appendSprintfEPKcz>:
  size = (size + this->block_size_mask) & ~this->block_size_mask;
  return reserve(size);
}

size_t StringBuffer::appendSprintf(const char *fmt, ...)
{
   15764:	cf 92       	push	r12
   15766:	df 92       	push	r13
   15768:	ef 92       	push	r14
   1576a:	ff 92       	push	r15
   1576c:	0f 93       	push	r16
   1576e:	1f 93       	push	r17
   15770:	cf 93       	push	r28
   15772:	df 93       	push	r29
   15774:	cd b7       	in	r28, 0x3d	; 61
   15776:	de b7       	in	r29, 0x3e	; 62
   15778:	ec 84       	ldd	r14, Y+12	; 0x0c
   1577a:	fd 84       	ldd	r15, Y+13	; 0x0d
   1577c:	ce 84       	ldd	r12, Y+14	; 0x0e
   1577e:	df 84       	ldd	r13, Y+15	; 0x0f
  va_list args, args2;
  va_start(args, fmt);
  va_copy(args2, args);

  size_t avail, len;
  if (this->buffer) {
   15780:	d7 01       	movw	r26, r14
   15782:	ed 91       	ld	r30, X+
   15784:	fc 91       	ld	r31, X
   15786:	11 97       	sbiw	r26, 0x01	; 1
   15788:	30 97       	sbiw	r30, 0x00	; 0
   1578a:	b1 f0       	breq	.+44     	; 0x157b8 <_ZN12StringBuffer13appendSprintfEPKcz+0x54>

    // Calculate the unused buffer size. This is the size for actual
    // characters, there's additionally room for the nul byte.
    avail = this->capacity - this->len;
   1578c:	14 96       	adiw	r26, 0x04	; 4
   1578e:	8d 91       	ld	r24, X+
   15790:	9c 91       	ld	r25, X
   15792:	15 97       	sbiw	r26, 0x05	; 5
   15794:	12 96       	adiw	r26, 0x02	; 2
   15796:	0d 91       	ld	r16, X+
   15798:	1c 91       	ld	r17, X
   1579a:	13 97       	sbiw	r26, 0x03	; 3
   1579c:	08 1b       	sub	r16, r24
   1579e:	19 0b       	sbc	r17, r25

    // Try to sprintf into the available buffer space (+ 1 since avail
    // excludes the room for the nul byte).
    len = vsnprintf(this->buffer + this->len, avail + 1, fmt, args);
   157a0:	b8 01       	movw	r22, r16
   157a2:	6f 5f       	subi	r22, 0xFF	; 255
   157a4:	7f 4f       	sbci	r23, 0xFF	; 255
   157a6:	9e 01       	movw	r18, r28
   157a8:	20 5f       	subi	r18, 0xF0	; 240
   157aa:	3f 4f       	sbci	r19, 0xFF	; 255
   157ac:	a6 01       	movw	r20, r12
   157ae:	8e 0f       	add	r24, r30
   157b0:	9f 1f       	adc	r25, r31
   157b2:	0e 94 87 b6 	call	0x16d0e	; 0x16d0e <vsnprintf>
   157b6:	0c c0       	rjmp	.+24     	; 0x157d0 <_ZN12StringBuffer13appendSprintfEPKcz+0x6c>
  } else {
    // Special case: No buffer allocated yet. Call vsnprintf with a zero
    // size argument, so it won't write anything but just tells use how
    // much to allocate.
    avail = 0;
    len = vsnprintf(NULL, 0, fmt, args);
   157b8:	9e 01       	movw	r18, r28
   157ba:	20 5f       	subi	r18, 0xF0	; 240
   157bc:	3f 4f       	sbci	r19, 0xFF	; 255
   157be:	a6 01       	movw	r20, r12
   157c0:	60 e0       	ldi	r22, 0x00	; 0
   157c2:	70 e0       	ldi	r23, 0x00	; 0
   157c4:	80 e0       	ldi	r24, 0x00	; 0
   157c6:	90 e0       	ldi	r25, 0x00	; 0
   157c8:	0e 94 87 b6 	call	0x16d0e	; 0x16d0e <vsnprintf>
    len = vsnprintf(this->buffer + this->len, avail + 1, fmt, args);
  } else {
    // Special case: No buffer allocated yet. Call vsnprintf with a zero
    // size argument, so it won't write anything but just tells use how
    // much to allocate.
    avail = 0;
   157cc:	00 e0       	ldi	r16, 0x00	; 0
   157ce:	10 e0       	ldi	r17, 0x00	; 0
  }

  // Len returned is the string length that is, or would be, written,
  // excluding the nul byte. If that's more than avail, the buffer was
  // too small and we need to expand.
  if (len > avail) {
   157d0:	08 17       	cp	r16, r24
   157d2:	19 07       	cpc	r17, r25
   157d4:	10 f5       	brcc	.+68     	; 0x1581a <_ZN12StringBuffer13appendSprintfEPKcz+0xb6>
    blockReserve(this->len + len);
   157d6:	f7 01       	movw	r30, r14
   157d8:	64 81       	ldd	r22, Z+4	; 0x04
   157da:	75 81       	ldd	r23, Z+5	; 0x05
   157dc:	68 0f       	add	r22, r24
   157de:	79 1f       	adc	r23, r25
   157e0:	c7 01       	movw	r24, r14
   157e2:	83 df       	rcall	.-250    	; 0x156ea <_ZN12StringBuffer12blockReserveEj>
    if (!this->buffer)
   157e4:	d7 01       	movw	r26, r14
   157e6:	ed 91       	ld	r30, X+
   157e8:	fc 91       	ld	r31, X
   157ea:	11 97       	sbiw	r26, 0x01	; 1
   157ec:	30 97       	sbiw	r30, 0x00	; 0
   157ee:	19 f1       	breq	.+70     	; 0x15836 <_ZN12StringBuffer13appendSprintfEPKcz+0xd2>
      return 0;
    avail = this->capacity - this->len;
   157f0:	14 96       	adiw	r26, 0x04	; 4
   157f2:	8d 91       	ld	r24, X+
   157f4:	9c 91       	ld	r25, X
   157f6:	15 97       	sbiw	r26, 0x05	; 5
   157f8:	12 96       	adiw	r26, 0x02	; 2
   157fa:	0d 91       	ld	r16, X+
   157fc:	1c 91       	ld	r17, X
   157fe:	13 97       	sbiw	r26, 0x03	; 3
   15800:	08 1b       	sub	r16, r24
   15802:	19 0b       	sbc	r17, r25
    len = vsnprintf(this->buffer + this->len, avail + 1, fmt, args2);
   15804:	b8 01       	movw	r22, r16
   15806:	6f 5f       	subi	r22, 0xFF	; 255
   15808:	7f 4f       	sbci	r23, 0xFF	; 255
   1580a:	9e 01       	movw	r18, r28
   1580c:	20 5f       	subi	r18, 0xF0	; 240
   1580e:	3f 4f       	sbci	r19, 0xFF	; 255
   15810:	a6 01       	movw	r20, r12
   15812:	8e 0f       	add	r24, r30
   15814:	9f 1f       	adc	r25, r31
   15816:	0e 94 87 b6 	call	0x16d0e	; 0x16d0e <vsnprintf>
   1581a:	9c 01       	movw	r18, r24
   1581c:	08 17       	cp	r16, r24
   1581e:	19 07       	cpc	r17, r25
   15820:	08 f4       	brcc	.+2      	; 0x15824 <_ZN12StringBuffer13appendSprintfEPKcz+0xc0>
   15822:	98 01       	movw	r18, r16

  // This shouldn't happen, but check anyway
  if (len > avail)
    len = avail;

  this->len += len;
   15824:	f7 01       	movw	r30, r14
   15826:	84 81       	ldd	r24, Z+4	; 0x04
   15828:	95 81       	ldd	r25, Z+5	; 0x05
   1582a:	82 0f       	add	r24, r18
   1582c:	93 1f       	adc	r25, r19
   1582e:	95 83       	std	Z+5, r25	; 0x05
   15830:	84 83       	std	Z+4, r24	; 0x04
  return len;
   15832:	c9 01       	movw	r24, r18
   15834:	02 c0       	rjmp	.+4      	; 0x1583a <_ZN12StringBuffer13appendSprintfEPKcz+0xd6>
  // excluding the nul byte. If that's more than avail, the buffer was
  // too small and we need to expand.
  if (len > avail) {
    blockReserve(this->len + len);
    if (!this->buffer)
      return 0;
   15836:	80 e0       	ldi	r24, 0x00	; 0
   15838:	90 e0       	ldi	r25, 0x00	; 0
  if (len > avail)
    len = avail;

  this->len += len;
  return len;
}
   1583a:	df 91       	pop	r29
   1583c:	cf 91       	pop	r28
   1583e:	1f 91       	pop	r17
   15840:	0f 91       	pop	r16
   15842:	ff 90       	pop	r15
   15844:	ef 90       	pop	r14
   15846:	df 90       	pop	r13
   15848:	cf 90       	pop	r12
   1584a:	08 95       	ret

0001584c <_ZN12StringBuffer10readClientER6Clientj>:

int StringBuffer::readClient(Client& c, size_t size) {
   1584c:	ef 92       	push	r14
   1584e:	ff 92       	push	r15
   15850:	0f 93       	push	r16
   15852:	1f 93       	push	r17
   15854:	cf 93       	push	r28
   15856:	df 93       	push	r29
   15858:	1f 92       	push	r1
   1585a:	1f 92       	push	r1
   1585c:	cd b7       	in	r28, 0x3d	; 61
   1585e:	de b7       	in	r29, 0x3e	; 62
   15860:	7c 01       	movw	r14, r24
   15862:	8b 01       	movw	r16, r22
  // Make sure we have enough room
  blockReserve(this->len + size);
   15864:	dc 01       	movw	r26, r24
   15866:	14 96       	adiw	r26, 0x04	; 4
   15868:	6d 91       	ld	r22, X+
   1586a:	7c 91       	ld	r23, X
   1586c:	15 97       	sbiw	r26, 0x05	; 5
   1586e:	64 0f       	add	r22, r20
   15870:	75 1f       	adc	r23, r21
   15872:	49 83       	std	Y+1, r20	; 0x01
   15874:	5a 83       	std	Y+2, r21	; 0x02
   15876:	39 df       	rcall	.-398    	; 0x156ea <_ZN12StringBuffer12blockReserveEj>
  int read = c.read((uint8_t *)this->buffer + this->len, size);
   15878:	d8 01       	movw	r26, r16
   1587a:	ed 91       	ld	r30, X+
   1587c:	fc 91       	ld	r31, X
   1587e:	d7 01       	movw	r26, r14
   15880:	6d 91       	ld	r22, X+
   15882:	7c 91       	ld	r23, X
   15884:	11 97       	sbiw	r26, 0x01	; 1
   15886:	14 96       	adiw	r26, 0x04	; 4
   15888:	8d 91       	ld	r24, X+
   1588a:	9c 91       	ld	r25, X
   1588c:	15 97       	sbiw	r26, 0x05	; 5
   1588e:	68 0f       	add	r22, r24
   15890:	79 1f       	adc	r23, r25
   15892:	00 88       	ldd	r0, Z+16	; 0x10
   15894:	f1 89       	ldd	r31, Z+17	; 0x11
   15896:	e0 2d       	mov	r30, r0
   15898:	49 81       	ldd	r20, Y+1	; 0x01
   1589a:	5a 81       	ldd	r21, Y+2	; 0x02
   1589c:	c8 01       	movw	r24, r16
   1589e:	19 95       	eicall
  this->len += read;
   158a0:	f7 01       	movw	r30, r14
   158a2:	24 81       	ldd	r18, Z+4	; 0x04
   158a4:	35 81       	ldd	r19, Z+5	; 0x05
   158a6:	28 0f       	add	r18, r24
   158a8:	39 1f       	adc	r19, r25
   158aa:	35 83       	std	Z+5, r19	; 0x05
   158ac:	24 83       	std	Z+4, r18	; 0x04
  this->buffer[this->len] = 0;
   158ae:	01 90       	ld	r0, Z+
   158b0:	f0 81       	ld	r31, Z
   158b2:	e0 2d       	mov	r30, r0
   158b4:	e2 0f       	add	r30, r18
   158b6:	f3 1f       	adc	r31, r19
   158b8:	10 82       	st	Z, r1
  return read;
}
   158ba:	0f 90       	pop	r0
   158bc:	0f 90       	pop	r0
   158be:	df 91       	pop	r29
   158c0:	cf 91       	pop	r28
   158c2:	1f 91       	pop	r17
   158c4:	0f 91       	pop	r16
   158c6:	ff 90       	pop	r15
   158c8:	ef 90       	pop	r14
   158ca:	08 95       	ret

000158cc <_ZN12StringBuffer16appendJsonStringEPKcjb>:

size_t StringBuffer::appendJsonString(const char *in, size_t len, bool add_quotes) {
   158cc:	2f 92       	push	r2
   158ce:	3f 92       	push	r3
   158d0:	4f 92       	push	r4
   158d2:	5f 92       	push	r5
   158d4:	6f 92       	push	r6
   158d6:	7f 92       	push	r7
   158d8:	8f 92       	push	r8
   158da:	9f 92       	push	r9
   158dc:	af 92       	push	r10
   158de:	bf 92       	push	r11
   158e0:	cf 92       	push	r12
   158e2:	df 92       	push	r13
   158e4:	ef 92       	push	r14
   158e6:	ff 92       	push	r15
   158e8:	0f 93       	push	r16
   158ea:	1f 93       	push	r17
   158ec:	cf 93       	push	r28
   158ee:	df 93       	push	r29
   158f0:	00 d0       	rcall	.+0      	; 0x158f2 <_ZN12StringBuffer16appendJsonStringEPKcjb+0x26>
   158f2:	cd b7       	in	r28, 0x3d	; 61
   158f4:	de b7       	in	r29, 0x3e	; 62
   158f6:	9b 83       	std	Y+3, r25	; 0x03
   158f8:	8a 83       	std	Y+2, r24	; 0x02
   158fa:	4b 01       	movw	r8, r22
   158fc:	3a 01       	movw	r6, r20
   158fe:	32 2e       	mov	r3, r18
  const int ESCAPE_LEN = 6; // \uXXXX escape sequence is 6 bytes

  // First, allocate memory enough for to add the string as-is. This
  // should be enough if no characters need escaping
  size_t needed = this->len + len;
   15900:	dc 01       	movw	r26, r24
   15902:	14 96       	adiw	r26, 0x04	; 4
   15904:	cd 90       	ld	r12, X+
   15906:	dc 90       	ld	r13, X
   15908:	15 97       	sbiw	r26, 0x05	; 5
   1590a:	c4 0e       	add	r12, r20
   1590c:	d5 1e       	adc	r13, r21

  if (add_quotes)
   1590e:	22 23       	and	r18, r18
   15910:	19 f0       	breq	.+6      	; 0x15918 <_ZN12StringBuffer16appendJsonStringEPKcjb+0x4c>
    needed += 2;
   15912:	b2 e0       	ldi	r27, 0x02	; 2
   15914:	cb 0e       	add	r12, r27
   15916:	d1 1c       	adc	r13, r1

  if (!blockReserve(needed))
   15918:	b6 01       	movw	r22, r12
   1591a:	8a 81       	ldd	r24, Y+2	; 0x02
   1591c:	9b 81       	ldd	r25, Y+3	; 0x03
   1591e:	e5 de       	rcall	.-566    	; 0x156ea <_ZN12StringBuffer12blockReserveEj>
   15920:	81 11       	cpse	r24, r1
   15922:	03 c0       	rjmp	.+6      	; 0x1592a <_ZN12StringBuffer16appendJsonStringEPKcjb+0x5e>
    return 0;
   15924:	80 e0       	ldi	r24, 0x00	; 0
   15926:	90 e0       	ldi	r25, 0x00	; 0
   15928:	b4 c0       	rjmp	.+360    	; 0x15a92 <_ZN12StringBuffer16appendJsonStringEPKcjb+0x1c6>

  size_t written = 0;

  if (add_quotes) {
   1592a:	33 20       	and	r3, r3
   1592c:	81 f0       	breq	.+32     	; 0x1594e <_ZN12StringBuffer16appendJsonStringEPKcjb+0x82>
    this->buffer[this->len] = '"';
   1592e:	aa 81       	ldd	r26, Y+2	; 0x02
   15930:	bb 81       	ldd	r27, Y+3	; 0x03
   15932:	ed 91       	ld	r30, X+
   15934:	fc 91       	ld	r31, X
   15936:	11 97       	sbiw	r26, 0x01	; 1
   15938:	14 96       	adiw	r26, 0x04	; 4
   1593a:	8d 91       	ld	r24, X+
   1593c:	9c 91       	ld	r25, X
   1593e:	15 97       	sbiw	r26, 0x05	; 5
   15940:	e8 0f       	add	r30, r24
   15942:	f9 1f       	adc	r31, r25
   15944:	82 e2       	ldi	r24, 0x22	; 34
   15946:	80 83       	st	Z, r24
    ++written;
   15948:	01 e0       	ldi	r16, 0x01	; 1
   1594a:	10 e0       	ldi	r17, 0x00	; 0
   1594c:	02 c0       	rjmp	.+4      	; 0x15952 <_ZN12StringBuffer16appendJsonStringEPKcjb+0x86>
    needed += 2;

  if (!blockReserve(needed))
    return 0;

  size_t written = 0;
   1594e:	00 e0       	ldi	r16, 0x00	; 0
   15950:	10 e0       	ldi	r17, 0x00	; 0

  if (add_quotes) {
    this->buffer[this->len] = '"';
    ++written;
   15952:	32 e0       	ldi	r19, 0x02	; 2
      char c = *in;
      if (c <= 0x1f || c == '\\' || c == '"') {
        // Escape
        if (room < ESCAPE_LEN)
          break;
        snprintf(out, ESCAPE_LEN + 1, "\\u%04x", c);
   15954:	87 e0       	ldi	r24, 0x07	; 7
   15956:	28 2e       	mov	r2, r24

  // 2 tries should normally always work, but keep a count to guarantee
  // we can't get into an infinite loop
  uint8_t tries = 2;
  while(tries--) {
    char *out = this->buffer + this->len + written;
   15958:	ea 81       	ldd	r30, Y+2	; 0x02
   1595a:	fb 81       	ldd	r31, Y+3	; 0x03
   1595c:	84 81       	ldd	r24, Z+4	; 0x04
   1595e:	95 81       	ldd	r25, Z+5	; 0x05
   15960:	a8 01       	movw	r20, r16
   15962:	48 0f       	add	r20, r24
   15964:	59 1f       	adc	r21, r25
   15966:	a0 80       	ld	r10, Z
   15968:	b1 80       	ldd	r11, Z+1	; 0x01
   1596a:	a4 0e       	add	r10, r20
   1596c:	b5 1e       	adc	r11, r21
    size_t room = this->capacity - this->len - written;
   1596e:	e2 80       	ldd	r14, Z+2	; 0x02
   15970:	f3 80       	ldd	r15, Z+3	; 0x03
   15972:	e8 1a       	sub	r14, r24
   15974:	f9 0a       	sbc	r15, r25
   15976:	e0 1a       	sub	r14, r16
   15978:	f1 0a       	sbc	r15, r17

    // Reserve space for the closing quote
    if (add_quotes)
   1597a:	33 20       	and	r3, r3
   1597c:	19 f0       	breq	.+6      	; 0x15984 <_ZN12StringBuffer16appendJsonStringEPKcjb+0xb8>
      room--;
   1597e:	f1 e0       	ldi	r31, 0x01	; 1
   15980:	ef 1a       	sub	r14, r31
   15982:	f1 08       	sbc	r15, r1
  }

  // 2 tries should normally always work, but keep a count to guarantee
  // we can't get into an infinite loop
  uint8_t tries = 2;
  while(tries--) {
   15984:	31 50       	subi	r19, 0x01	; 1
   15986:	24 01       	movw	r4, r8
   15988:	42 01       	movw	r8, r4

    // Then, copy over characters, replacing the JSON special ones with
    // \uXXXX escape sequences. Using \\, \", \n etc. where possible would
    // result in smaller JSON, but would require more code space, so we
    // just use the \uXXXX sequence for everything
    while(room && len) {
   1598a:	e1 14       	cp	r14, r1
   1598c:	f1 04       	cpc	r15, r1
   1598e:	c9 f1       	breq	.+114    	; 0x15a02 <_ZN12StringBuffer16appendJsonStringEPKcjb+0x136>
   15990:	61 14       	cp	r6, r1
   15992:	71 04       	cpc	r7, r1
   15994:	09 f4       	brne	.+2      	; 0x15998 <_ZN12StringBuffer16appendJsonStringEPKcjb+0xcc>
   15996:	59 c0       	rjmp	.+178    	; 0x15a4a <_ZN12StringBuffer16appendJsonStringEPKcjb+0x17e>
      char c = *in;
   15998:	d2 01       	movw	r26, r4
   1599a:	8d 91       	ld	r24, X+
   1599c:	2d 01       	movw	r4, r26
      if (c <= 0x1f || c == '\\' || c == '"') {
   1599e:	80 32       	cpi	r24, 0x20	; 32
   159a0:	20 f0       	brcs	.+8      	; 0x159aa <_ZN12StringBuffer16appendJsonStringEPKcjb+0xde>
   159a2:	8c 35       	cpi	r24, 0x5C	; 92
   159a4:	11 f0       	breq	.+4      	; 0x159aa <_ZN12StringBuffer16appendJsonStringEPKcjb+0xde>
   159a6:	82 32       	cpi	r24, 0x22	; 34
   159a8:	01 f5       	brne	.+64     	; 0x159ea <_ZN12StringBuffer16appendJsonStringEPKcjb+0x11e>
        // Escape
        if (room < ESCAPE_LEN)
   159aa:	b6 e0       	ldi	r27, 0x06	; 6
   159ac:	eb 16       	cp	r14, r27
   159ae:	f1 04       	cpc	r15, r1
   159b0:	58 f1       	brcs	.+86     	; 0x15a08 <_ZN12StringBuffer16appendJsonStringEPKcjb+0x13c>
          break;
        snprintf(out, ESCAPE_LEN + 1, "\\u%04x", c);
   159b2:	1f 92       	push	r1
   159b4:	8f 93       	push	r24
   159b6:	a1 ec       	ldi	r26, 0xC1	; 193
   159b8:	b3 e2       	ldi	r27, 0x23	; 35
   159ba:	bf 93       	push	r27
   159bc:	af 93       	push	r26
   159be:	1f 92       	push	r1
   159c0:	2f 92       	push	r2
   159c2:	bf 92       	push	r11
   159c4:	af 92       	push	r10
   159c6:	39 83       	std	Y+1, r19	; 0x01
   159c8:	0e 94 1d b6 	call	0x16c3a	; 0x16c3a <snprintf>
        room -= ESCAPE_LEN;
   159cc:	f6 e0       	ldi	r31, 0x06	; 6
   159ce:	ef 1a       	sub	r14, r31
   159d0:	f1 08       	sbc	r15, r1
        out += ESCAPE_LEN;
   159d2:	26 e0       	ldi	r18, 0x06	; 6
   159d4:	a2 0e       	add	r10, r18
   159d6:	b1 1c       	adc	r11, r1
        written += ESCAPE_LEN;
   159d8:	0a 5f       	subi	r16, 0xFA	; 250
   159da:	1f 4f       	sbci	r17, 0xFF	; 255
   159dc:	0f b6       	in	r0, 0x3f	; 63
   159de:	f8 94       	cli
   159e0:	de bf       	out	0x3e, r29	; 62
   159e2:	0f be       	out	0x3f, r0	; 63
   159e4:	cd bf       	out	0x3d, r28	; 61
   159e6:	39 81       	ldd	r19, Y+1	; 0x01
   159e8:	08 c0       	rjmp	.+16     	; 0x159fa <_ZN12StringBuffer16appendJsonStringEPKcjb+0x12e>
      } else {
        // Normal
        *out = c;
   159ea:	d5 01       	movw	r26, r10
   159ec:	8d 93       	st	X+, r24
   159ee:	5d 01       	movw	r10, r26
        ++out;
        --room;
   159f0:	b1 e0       	ldi	r27, 0x01	; 1
   159f2:	eb 1a       	sub	r14, r27
   159f4:	f1 08       	sbc	r15, r1
        ++written;
   159f6:	0f 5f       	subi	r16, 0xFF	; 255
   159f8:	1f 4f       	sbci	r17, 0xFF	; 255
      }
      ++in;
      --len;
   159fa:	e1 e0       	ldi	r30, 0x01	; 1
   159fc:	6e 1a       	sub	r6, r30
   159fe:	71 08       	sbc	r7, r1
   15a00:	c3 cf       	rjmp	.-122    	; 0x15988 <_ZN12StringBuffer16appendJsonStringEPKcjb+0xbc>
    }

    if (len != 0 && tries) {
   15a02:	61 14       	cp	r6, r1
   15a04:	71 04       	cpc	r7, r1
   15a06:	09 f1       	breq	.+66     	; 0x15a4a <_ZN12StringBuffer16appendJsonStringEPKcjb+0x17e>
   15a08:	33 23       	and	r19, r19
   15a0a:	09 f1       	breq	.+66     	; 0x15a4e <_ZN12StringBuffer16appendJsonStringEPKcjb+0x182>
      // If there are still bytes left to write, we ran out of room.
      // Find out how many bytes we'll need.

      // Any bytes left in the input take up at least one byte
      needed += len;
   15a0c:	c6 0c       	add	r12, r6
   15a0e:	d7 1c       	adc	r13, r7
      // Any room we have left (can happen when an escape sequence
      // didn't fit), we don't have to allocate again
      needed -= room;
   15a10:	ce 18       	sub	r12, r14
   15a12:	df 08       	sbc	r13, r15
   15a14:	f4 01       	movw	r30, r8
   15a16:	c4 01       	movw	r24, r8
   15a18:	86 0d       	add	r24, r6
   15a1a:	97 1d       	adc	r25, r7
      // Find out how many escape sequences left in the string
      size_t len2 = len;
      const char *in2 = in;
      while (len2--) {
   15a1c:	e8 17       	cp	r30, r24
   15a1e:	f9 07       	cpc	r31, r25
   15a20:	59 f0       	breq	.+22     	; 0x15a38 <_ZN12StringBuffer16appendJsonStringEPKcjb+0x16c>
        char c = *in2++;
   15a22:	31 91       	ld	r19, Z+
        if (c <= 0x1f || c == '\\' || c == '"')
   15a24:	30 32       	cpi	r19, 0x20	; 32
   15a26:	20 f0       	brcs	.+8      	; 0x15a30 <_ZN12StringBuffer16appendJsonStringEPKcjb+0x164>
   15a28:	3c 35       	cpi	r19, 0x5C	; 92
   15a2a:	11 f0       	breq	.+4      	; 0x15a30 <_ZN12StringBuffer16appendJsonStringEPKcjb+0x164>
   15a2c:	32 32       	cpi	r19, 0x22	; 34
   15a2e:	b1 f7       	brne	.-20     	; 0x15a1c <_ZN12StringBuffer16appendJsonStringEPKcjb+0x150>
          // One byte was already accounted for above
          needed += ESCAPE_LEN - 1;
   15a30:	25 e0       	ldi	r18, 0x05	; 5
   15a32:	c2 0e       	add	r12, r18
   15a34:	d1 1c       	adc	r13, r1
   15a36:	f2 cf       	rjmp	.-28     	; 0x15a1c <_ZN12StringBuffer16appendJsonStringEPKcjb+0x150>
      }

      if (!blockReserve(needed))
   15a38:	b6 01       	movw	r22, r12
   15a3a:	8a 81       	ldd	r24, Y+2	; 0x02
   15a3c:	9b 81       	ldd	r25, Y+3	; 0x03
   15a3e:	55 de       	rcall	.-854    	; 0x156ea <_ZN12StringBuffer12blockReserveEj>
   15a40:	88 23       	and	r24, r24
   15a42:	09 f4       	brne	.+2      	; 0x15a46 <_ZN12StringBuffer16appendJsonStringEPKcjb+0x17a>
   15a44:	6f cf       	rjmp	.-290    	; 0x15924 <_ZN12StringBuffer16appendJsonStringEPKcjb+0x58>
   15a46:	31 e0       	ldi	r19, 0x01	; 1
   15a48:	87 cf       	rjmp	.-242    	; 0x15958 <_ZN12StringBuffer16appendJsonStringEPKcjb+0x8c>
  }

  // 2 tries should normally always work, but keep a count to guarantee
  // we can't get into an infinite loop
  uint8_t tries = 2;
  while(tries--) {
   15a4a:	31 11       	cpse	r19, r1
   15a4c:	85 cf       	rjmp	.-246    	; 0x15958 <_ZN12StringBuffer16appendJsonStringEPKcjb+0x8c>
      if (!blockReserve(needed))
        return 0;
    }
  }

  if (add_quotes) {
   15a4e:	33 20       	and	r3, r3
   15a50:	89 f0       	breq	.+34     	; 0x15a74 <_ZN12StringBuffer16appendJsonStringEPKcjb+0x1a8>
    this->buffer[this->len + written] = '"';
   15a52:	aa 81       	ldd	r26, Y+2	; 0x02
   15a54:	bb 81       	ldd	r27, Y+3	; 0x03
   15a56:	ed 91       	ld	r30, X+
   15a58:	fc 91       	ld	r31, X
   15a5a:	11 97       	sbiw	r26, 0x01	; 1
   15a5c:	e0 0f       	add	r30, r16
   15a5e:	f1 1f       	adc	r31, r17
   15a60:	14 96       	adiw	r26, 0x04	; 4
   15a62:	8d 91       	ld	r24, X+
   15a64:	9c 91       	ld	r25, X
   15a66:	15 97       	sbiw	r26, 0x05	; 5
   15a68:	e8 0f       	add	r30, r24
   15a6a:	f9 1f       	adc	r31, r25
   15a6c:	82 e2       	ldi	r24, 0x22	; 34
   15a6e:	80 83       	st	Z, r24
    ++written;
   15a70:	0f 5f       	subi	r16, 0xFF	; 255
   15a72:	1f 4f       	sbci	r17, 0xFF	; 255
  }

  this->len += written;
   15a74:	ea 81       	ldd	r30, Y+2	; 0x02
   15a76:	fb 81       	ldd	r31, Y+3	; 0x03
   15a78:	84 81       	ldd	r24, Z+4	; 0x04
   15a7a:	95 81       	ldd	r25, Z+5	; 0x05
   15a7c:	80 0f       	add	r24, r16
   15a7e:	91 1f       	adc	r25, r17
   15a80:	95 83       	std	Z+5, r25	; 0x05
   15a82:	84 83       	std	Z+4, r24	; 0x04
  this->buffer[this->len] = 0;
   15a84:	01 90       	ld	r0, Z+
   15a86:	f0 81       	ld	r31, Z
   15a88:	e0 2d       	mov	r30, r0
   15a8a:	e8 0f       	add	r30, r24
   15a8c:	f9 1f       	adc	r31, r25
   15a8e:	10 82       	st	Z, r1
  return written;
   15a90:	c8 01       	movw	r24, r16
}
   15a92:	0f 90       	pop	r0
   15a94:	0f 90       	pop	r0
   15a96:	0f 90       	pop	r0
   15a98:	df 91       	pop	r29
   15a9a:	cf 91       	pop	r28
   15a9c:	1f 91       	pop	r17
   15a9e:	0f 91       	pop	r16
   15aa0:	ff 90       	pop	r15
   15aa2:	ef 90       	pop	r14
   15aa4:	df 90       	pop	r13
   15aa6:	cf 90       	pop	r12
   15aa8:	bf 90       	pop	r11
   15aaa:	af 90       	pop	r10
   15aac:	9f 90       	pop	r9
   15aae:	8f 90       	pop	r8
   15ab0:	7f 90       	pop	r7
   15ab2:	6f 90       	pop	r6
   15ab4:	5f 90       	pop	r5
   15ab6:	4f 90       	pop	r4
   15ab8:	3f 90       	pop	r3
   15aba:	2f 90       	pop	r2
   15abc:	08 95       	ret

00015abe <_ZN12StringBuffer6concatEPKcj>:

unsigned char StringBuffer::concat(const char *cstr, unsigned int length)
{
   15abe:	cf 92       	push	r12
   15ac0:	df 92       	push	r13
   15ac2:	ef 92       	push	r14
   15ac4:	ff 92       	push	r15
   15ac6:	0f 93       	push	r16
   15ac8:	1f 93       	push	r17
   15aca:	cf 93       	push	r28
   15acc:	df 93       	push	r29
   15ace:	1f 92       	push	r1
   15ad0:	1f 92       	push	r1
   15ad2:	cd b7       	in	r28, 0x3d	; 61
   15ad4:	de b7       	in	r29, 0x3e	; 62
   15ad6:	6c 01       	movw	r12, r24
   15ad8:	7b 01       	movw	r14, r22
        unsigned int newlen = len + length;
   15ada:	fc 01       	movw	r30, r24
   15adc:	04 81       	ldd	r16, Z+4	; 0x04
   15ade:	15 81       	ldd	r17, Z+5	; 0x05
        if (!cstr) return 0;
   15ae0:	61 15       	cp	r22, r1
   15ae2:	71 05       	cpc	r23, r1
   15ae4:	11 f4       	brne	.+4      	; 0x15aea <_ZN12StringBuffer6concatEPKcj+0x2c>
   15ae6:	80 e0       	ldi	r24, 0x00	; 0
   15ae8:	1b c0       	rjmp	.+54     	; 0x15b20 <_ZN12StringBuffer6concatEPKcj+0x62>
        if (length == 0) return 1;
   15aea:	41 15       	cp	r20, r1
   15aec:	51 05       	cpc	r21, r1
   15aee:	b9 f0       	breq	.+46     	; 0x15b1e <_ZN12StringBuffer6concatEPKcj+0x60>
  return written;
}

unsigned char StringBuffer::concat(const char *cstr, unsigned int length)
{
        unsigned int newlen = len + length;
   15af0:	04 0f       	add	r16, r20
   15af2:	15 1f       	adc	r17, r21
        if (!cstr) return 0;
        if (length == 0) return 1;
        if (!reserve(newlen)) return 0;
   15af4:	b8 01       	movw	r22, r16
   15af6:	49 83       	std	Y+1, r20	; 0x01
   15af8:	5a 83       	std	Y+2, r21	; 0x02
   15afa:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <_ZN6String7reserveEj>
   15afe:	49 81       	ldd	r20, Y+1	; 0x01
   15b00:	5a 81       	ldd	r21, Y+2	; 0x02
   15b02:	88 23       	and	r24, r24
   15b04:	81 f3       	breq	.-32     	; 0x15ae6 <_ZN12StringBuffer6concatEPKcj+0x28>
        memcpy(buffer + len, cstr, length);
   15b06:	f6 01       	movw	r30, r12
   15b08:	20 81       	ld	r18, Z
   15b0a:	31 81       	ldd	r19, Z+1	; 0x01
   15b0c:	84 81       	ldd	r24, Z+4	; 0x04
   15b0e:	95 81       	ldd	r25, Z+5	; 0x05
   15b10:	b7 01       	movw	r22, r14
   15b12:	82 0f       	add	r24, r18
   15b14:	93 1f       	adc	r25, r19
   15b16:	b6 d7       	rcall	.+3948   	; 0x16a84 <memcpy>
        len = newlen;
   15b18:	f6 01       	movw	r30, r12
   15b1a:	15 83       	std	Z+5, r17	; 0x05
   15b1c:	04 83       	std	Z+4, r16	; 0x04

unsigned char StringBuffer::concat(const char *cstr, unsigned int length)
{
        unsigned int newlen = len + length;
        if (!cstr) return 0;
        if (length == 0) return 1;
   15b1e:	81 e0       	ldi	r24, 0x01	; 1
        if (!reserve(newlen)) return 0;
        memcpy(buffer + len, cstr, length);
        len = newlen;
        return 1;
}
   15b20:	0f 90       	pop	r0
   15b22:	0f 90       	pop	r0
   15b24:	df 91       	pop	r29
   15b26:	cf 91       	pop	r28
   15b28:	1f 91       	pop	r17
   15b2a:	0f 91       	pop	r16
   15b2c:	ff 90       	pop	r15
   15b2e:	ef 90       	pop	r14
   15b30:	df 90       	pop	r13
   15b32:	cf 90       	pop	r12
   15b34:	08 95       	ret

00015b36 <_GLOBAL__sub_I__ZN12StringBufferC2Ejj>:
   15b36:	0f 93       	push	r16
   15b38:	00 e0       	ldi	r16, 0x00	; 0
   15b3a:	20 e0       	ldi	r18, 0x00	; 0
   15b3c:	40 e0       	ldi	r20, 0x00	; 0
   15b3e:	60 e0       	ldi	r22, 0x00	; 0
   15b40:	87 ef       	ldi	r24, 0xF7	; 247
   15b42:	99 e3       	ldi	r25, 0x39	; 57
   15b44:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <_ZN9IPAddressC1Ehhhh>
   15b48:	0f 91       	pop	r16
   15b4a:	08 95       	ret

00015b4c <_Z9pwmEnablev>:
}

void pwmEnable(void) {
	//pinSetMode("d3", OUTPUT);

	DDRE |= (1<<DDRE3);
   15b4c:	6b 9a       	sbi	0x0d, 3	; 13

	TCCR3A = 0;
   15b4e:	e0 e9       	ldi	r30, 0x90	; 144
   15b50:	f0 e0       	ldi	r31, 0x00	; 0
   15b52:	10 82       	st	Z, r1
	
	TCCR3A = (1<<WGM31) | (1<<COM3A1); //fastpwm, Clear OCn1 on compare match, set OC1A at TOP
   15b54:	82 e8       	ldi	r24, 0x82	; 130
   15b56:	80 83       	st	Z, r24
	TCCR3B = (1 << WGM33) | (1<<WGM32) | (1 << CS31); //prescaler 8
   15b58:	8a e1       	ldi	r24, 0x1A	; 26
   15b5a:	80 93 91 00 	sts	0x0091, r24
	
	ICR3=39999;  //50Hz, 20ms
   15b5e:	8f e3       	ldi	r24, 0x3F	; 63
   15b60:	9c e9       	ldi	r25, 0x9C	; 156
   15b62:	90 93 97 00 	sts	0x0097, r25
   15b66:	80 93 96 00 	sts	0x0096, r24
	
	OCR3A = 600;
   15b6a:	88 e5       	ldi	r24, 0x58	; 88
   15b6c:	92 e0       	ldi	r25, 0x02	; 2
   15b6e:	90 93 99 00 	sts	0x0099, r25
   15b72:	80 93 98 00 	sts	0x0098, r24
   15b76:	08 95       	ret

00015b78 <_Z12timerDisablev>:
void timerICR(void){
  ICR3 = getarg(1);
}

void timerDisable(void) {
  TCCR3B &= ~((1<<CS32)|(1<<CS31)|(1<<CS30));
   15b78:	e1 e9       	ldi	r30, 0x91	; 145
   15b7a:	f0 e0       	ldi	r31, 0x00	; 0
   15b7c:	80 81       	ld	r24, Z
   15b7e:	88 7f       	andi	r24, 0xF8	; 248
   15b80:	80 83       	st	Z, r24
   15b82:	08 95       	ret

00015b84 <_Z8timerOCRv>:
	
	OCR3A = 600;
}

void timerOCR(void){
  OCR3A = getarg(1);
   15b84:	61 e0       	ldi	r22, 0x01	; 1
   15b86:	70 e0       	ldi	r23, 0x00	; 0
   15b88:	80 e0       	ldi	r24, 0x00	; 0
   15b8a:	90 e0       	ldi	r25, 0x00	; 0
   15b8c:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   15b90:	70 93 99 00 	sts	0x0099, r23
   15b94:	60 93 98 00 	sts	0x0098, r22
   15b98:	08 95       	ret

00015b9a <_Z8timerICRv>:
}

void timerICR(void){
  ICR3 = getarg(1);
   15b9a:	61 e0       	ldi	r22, 0x01	; 1
   15b9c:	70 e0       	ldi	r23, 0x00	; 0
   15b9e:	80 e0       	ldi	r24, 0x00	; 0
   15ba0:	90 e0       	ldi	r25, 0x00	; 0
   15ba2:	0e 94 3c 24 	call	0x4878	; 0x4878 <_Z6getargl>
   15ba6:	70 93 97 00 	sts	0x0097, r23
   15baa:	60 93 96 00 	sts	0x0096, r22
   15bae:	08 95       	ret

00015bb0 <setup>:
void pwmEnable(void);
void timerICR(void);
void timerOCR(void);
void timerDisable(void);

void setup() {
   15bb0:	0f 93       	push	r16
   15bb2:	1f 93       	push	r17
	addBitlashFunction("pwm.enable", (bitlash_function)pwmEnable);
   15bb4:	66 ea       	ldi	r22, 0xA6	; 166
   15bb6:	7d ea       	ldi	r23, 0xAD	; 173
   15bb8:	88 ec       	ldi	r24, 0xC8	; 200
   15bba:	93 e2       	ldi	r25, 0x23	; 35
   15bbc:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
    addBitlashFunction("timer.icr", (bitlash_function)timerICR);
   15bc0:	6d ec       	ldi	r22, 0xCD	; 205
   15bc2:	7d ea       	ldi	r23, 0xAD	; 173
   15bc4:	83 ed       	ldi	r24, 0xD3	; 211
   15bc6:	93 e2       	ldi	r25, 0x23	; 35
   15bc8:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
    addBitlashFunction("timer.ocr", (bitlash_function)timerOCR);
   15bcc:	62 ec       	ldi	r22, 0xC2	; 194
   15bce:	7d ea       	ldi	r23, 0xAD	; 173
   15bd0:	8d ed       	ldi	r24, 0xDD	; 221
   15bd2:	93 e2       	ldi	r25, 0x23	; 35
   15bd4:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>
    addBitlashFunction("timer.disable", (bitlash_function)timerDisable);
   15bd8:	6c eb       	ldi	r22, 0xBC	; 188
   15bda:	7d ea       	ldi	r23, 0xAD	; 173
   15bdc:	87 ee       	ldi	r24, 0xE7	; 231
   15bde:	93 e2       	ldi	r25, 0x23	; 35
   15be0:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z18addBitlashFunctionPKcPFlvE>

	Scout.setup(SKETCH_NAME, SKETCH_REVISION, SKETCH_BUILD);
   15be4:	0f ef       	ldi	r16, 0xFF	; 255
   15be6:	1f ef       	ldi	r17, 0xFF	; 255
   15be8:	98 01       	movw	r18, r16
   15bea:	45 ef       	ldi	r20, 0xF5	; 245
   15bec:	53 e2       	ldi	r21, 0x23	; 35
   15bee:	6d ef       	ldi	r22, 0xFD	; 253
   15bf0:	73 e2       	ldi	r23, 0x23	; 35
   15bf2:	80 ea       	ldi	r24, 0xA0	; 160
   15bf4:	95 e3       	ldi	r25, 0x35	; 53
   15bf6:	0e 94 9f 74 	call	0xe93e	; 0xe93e <_ZN13PinoccioScout5setupEPKcS1_l>
	// Add custom setup code here
}
   15bfa:	1f 91       	pop	r17
   15bfc:	0f 91       	pop	r16
   15bfe:	08 95       	ret

00015c00 <loop>:

void loop() {
	Scout.loop();
   15c00:	80 ea       	ldi	r24, 0xA0	; 160
   15c02:	95 e3       	ldi	r25, 0x35	; 53
   15c04:	0c 94 71 70 	jmp	0xe0e2	; 0xe0e2 <_ZN13PinoccioScout4loopEv>

00015c08 <_GLOBAL__sub_I_setup>:
  ICR3 = getarg(1);
}

void timerDisable(void) {
  TCCR3B &= ~((1<<CS32)|(1<<CS31)|(1<<CS30));
}
   15c08:	0f 93       	push	r16
   15c0a:	00 e0       	ldi	r16, 0x00	; 0
   15c0c:	20 e0       	ldi	r18, 0x00	; 0
   15c0e:	40 e0       	ldi	r20, 0x00	; 0
   15c10:	60 e0       	ldi	r22, 0x00	; 0
   15c12:	8d ef       	ldi	r24, 0xFD	; 253
   15c14:	99 e3       	ldi	r25, 0x39	; 57
   15c16:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <_ZN9IPAddressC1Ehhhh>
   15c1a:	0f 91       	pop	r16
   15c1c:	08 95       	ret

00015c1e <__subsf3>:
   15c1e:	50 58       	subi	r21, 0x80	; 128

00015c20 <__addsf3>:
   15c20:	bb 27       	eor	r27, r27
   15c22:	aa 27       	eor	r26, r26
   15c24:	0e d0       	rcall	.+28     	; 0x15c42 <__addsf3x>
   15c26:	75 c1       	rjmp	.+746    	; 0x15f12 <__fp_round>
   15c28:	66 d1       	rcall	.+716    	; 0x15ef6 <__fp_pscA>
   15c2a:	30 f0       	brcs	.+12     	; 0x15c38 <__addsf3+0x18>
   15c2c:	6b d1       	rcall	.+726    	; 0x15f04 <__fp_pscB>
   15c2e:	20 f0       	brcs	.+8      	; 0x15c38 <__addsf3+0x18>
   15c30:	31 f4       	brne	.+12     	; 0x15c3e <__addsf3+0x1e>
   15c32:	9f 3f       	cpi	r25, 0xFF	; 255
   15c34:	11 f4       	brne	.+4      	; 0x15c3a <__addsf3+0x1a>
   15c36:	1e f4       	brtc	.+6      	; 0x15c3e <__addsf3+0x1e>
   15c38:	5b c1       	rjmp	.+694    	; 0x15ef0 <__fp_nan>
   15c3a:	0e f4       	brtc	.+2      	; 0x15c3e <__addsf3+0x1e>
   15c3c:	e0 95       	com	r30
   15c3e:	e7 fb       	bst	r30, 7
   15c40:	51 c1       	rjmp	.+674    	; 0x15ee4 <__fp_inf>

00015c42 <__addsf3x>:
   15c42:	e9 2f       	mov	r30, r25
   15c44:	77 d1       	rcall	.+750    	; 0x15f34 <__fp_split3>
   15c46:	80 f3       	brcs	.-32     	; 0x15c28 <__addsf3+0x8>
   15c48:	ba 17       	cp	r27, r26
   15c4a:	62 07       	cpc	r22, r18
   15c4c:	73 07       	cpc	r23, r19
   15c4e:	84 07       	cpc	r24, r20
   15c50:	95 07       	cpc	r25, r21
   15c52:	18 f0       	brcs	.+6      	; 0x15c5a <__addsf3x+0x18>
   15c54:	71 f4       	brne	.+28     	; 0x15c72 <__addsf3x+0x30>
   15c56:	9e f5       	brtc	.+102    	; 0x15cbe <__addsf3x+0x7c>
   15c58:	8f c1       	rjmp	.+798    	; 0x15f78 <__fp_zero>
   15c5a:	0e f4       	brtc	.+2      	; 0x15c5e <__addsf3x+0x1c>
   15c5c:	e0 95       	com	r30
   15c5e:	0b 2e       	mov	r0, r27
   15c60:	ba 2f       	mov	r27, r26
   15c62:	a0 2d       	mov	r26, r0
   15c64:	0b 01       	movw	r0, r22
   15c66:	b9 01       	movw	r22, r18
   15c68:	90 01       	movw	r18, r0
   15c6a:	0c 01       	movw	r0, r24
   15c6c:	ca 01       	movw	r24, r20
   15c6e:	a0 01       	movw	r20, r0
   15c70:	11 24       	eor	r1, r1
   15c72:	ff 27       	eor	r31, r31
   15c74:	59 1b       	sub	r21, r25
   15c76:	99 f0       	breq	.+38     	; 0x15c9e <__addsf3x+0x5c>
   15c78:	59 3f       	cpi	r21, 0xF9	; 249
   15c7a:	50 f4       	brcc	.+20     	; 0x15c90 <__addsf3x+0x4e>
   15c7c:	50 3e       	cpi	r21, 0xE0	; 224
   15c7e:	68 f1       	brcs	.+90     	; 0x15cda <__addsf3x+0x98>
   15c80:	1a 16       	cp	r1, r26
   15c82:	f0 40       	sbci	r31, 0x00	; 0
   15c84:	a2 2f       	mov	r26, r18
   15c86:	23 2f       	mov	r18, r19
   15c88:	34 2f       	mov	r19, r20
   15c8a:	44 27       	eor	r20, r20
   15c8c:	58 5f       	subi	r21, 0xF8	; 248
   15c8e:	f3 cf       	rjmp	.-26     	; 0x15c76 <__addsf3x+0x34>
   15c90:	46 95       	lsr	r20
   15c92:	37 95       	ror	r19
   15c94:	27 95       	ror	r18
   15c96:	a7 95       	ror	r26
   15c98:	f0 40       	sbci	r31, 0x00	; 0
   15c9a:	53 95       	inc	r21
   15c9c:	c9 f7       	brne	.-14     	; 0x15c90 <__addsf3x+0x4e>
   15c9e:	7e f4       	brtc	.+30     	; 0x15cbe <__addsf3x+0x7c>
   15ca0:	1f 16       	cp	r1, r31
   15ca2:	ba 0b       	sbc	r27, r26
   15ca4:	62 0b       	sbc	r22, r18
   15ca6:	73 0b       	sbc	r23, r19
   15ca8:	84 0b       	sbc	r24, r20
   15caa:	ba f0       	brmi	.+46     	; 0x15cda <__addsf3x+0x98>
   15cac:	91 50       	subi	r25, 0x01	; 1
   15cae:	a1 f0       	breq	.+40     	; 0x15cd8 <__addsf3x+0x96>
   15cb0:	ff 0f       	add	r31, r31
   15cb2:	bb 1f       	adc	r27, r27
   15cb4:	66 1f       	adc	r22, r22
   15cb6:	77 1f       	adc	r23, r23
   15cb8:	88 1f       	adc	r24, r24
   15cba:	c2 f7       	brpl	.-16     	; 0x15cac <__addsf3x+0x6a>
   15cbc:	0e c0       	rjmp	.+28     	; 0x15cda <__addsf3x+0x98>
   15cbe:	ba 0f       	add	r27, r26
   15cc0:	62 1f       	adc	r22, r18
   15cc2:	73 1f       	adc	r23, r19
   15cc4:	84 1f       	adc	r24, r20
   15cc6:	48 f4       	brcc	.+18     	; 0x15cda <__addsf3x+0x98>
   15cc8:	87 95       	ror	r24
   15cca:	77 95       	ror	r23
   15ccc:	67 95       	ror	r22
   15cce:	b7 95       	ror	r27
   15cd0:	f7 95       	ror	r31
   15cd2:	9e 3f       	cpi	r25, 0xFE	; 254
   15cd4:	08 f0       	brcs	.+2      	; 0x15cd8 <__addsf3x+0x96>
   15cd6:	b3 cf       	rjmp	.-154    	; 0x15c3e <__addsf3+0x1e>
   15cd8:	93 95       	inc	r25
   15cda:	88 0f       	add	r24, r24
   15cdc:	08 f0       	brcs	.+2      	; 0x15ce0 <__addsf3x+0x9e>
   15cde:	99 27       	eor	r25, r25
   15ce0:	ee 0f       	add	r30, r30
   15ce2:	97 95       	ror	r25
   15ce4:	87 95       	ror	r24
   15ce6:	08 95       	ret

00015ce8 <__cmpsf2>:
   15ce8:	d9 d0       	rcall	.+434    	; 0x15e9c <__fp_cmp>
   15cea:	08 f4       	brcc	.+2      	; 0x15cee <__cmpsf2+0x6>
   15cec:	81 e0       	ldi	r24, 0x01	; 1
   15cee:	08 95       	ret

00015cf0 <__divsf3>:
   15cf0:	0c d0       	rcall	.+24     	; 0x15d0a <__divsf3x>
   15cf2:	0f c1       	rjmp	.+542    	; 0x15f12 <__fp_round>
   15cf4:	07 d1       	rcall	.+526    	; 0x15f04 <__fp_pscB>
   15cf6:	40 f0       	brcs	.+16     	; 0x15d08 <__divsf3+0x18>
   15cf8:	fe d0       	rcall	.+508    	; 0x15ef6 <__fp_pscA>
   15cfa:	30 f0       	brcs	.+12     	; 0x15d08 <__divsf3+0x18>
   15cfc:	21 f4       	brne	.+8      	; 0x15d06 <__divsf3+0x16>
   15cfe:	5f 3f       	cpi	r21, 0xFF	; 255
   15d00:	19 f0       	breq	.+6      	; 0x15d08 <__divsf3+0x18>
   15d02:	f0 c0       	rjmp	.+480    	; 0x15ee4 <__fp_inf>
   15d04:	51 11       	cpse	r21, r1
   15d06:	39 c1       	rjmp	.+626    	; 0x15f7a <__fp_szero>
   15d08:	f3 c0       	rjmp	.+486    	; 0x15ef0 <__fp_nan>

00015d0a <__divsf3x>:
   15d0a:	14 d1       	rcall	.+552    	; 0x15f34 <__fp_split3>
   15d0c:	98 f3       	brcs	.-26     	; 0x15cf4 <__divsf3+0x4>

00015d0e <__divsf3_pse>:
   15d0e:	99 23       	and	r25, r25
   15d10:	c9 f3       	breq	.-14     	; 0x15d04 <__divsf3+0x14>
   15d12:	55 23       	and	r21, r21
   15d14:	b1 f3       	breq	.-20     	; 0x15d02 <__divsf3+0x12>
   15d16:	95 1b       	sub	r25, r21
   15d18:	55 0b       	sbc	r21, r21
   15d1a:	bb 27       	eor	r27, r27
   15d1c:	aa 27       	eor	r26, r26
   15d1e:	62 17       	cp	r22, r18
   15d20:	73 07       	cpc	r23, r19
   15d22:	84 07       	cpc	r24, r20
   15d24:	38 f0       	brcs	.+14     	; 0x15d34 <__divsf3_pse+0x26>
   15d26:	9f 5f       	subi	r25, 0xFF	; 255
   15d28:	5f 4f       	sbci	r21, 0xFF	; 255
   15d2a:	22 0f       	add	r18, r18
   15d2c:	33 1f       	adc	r19, r19
   15d2e:	44 1f       	adc	r20, r20
   15d30:	aa 1f       	adc	r26, r26
   15d32:	a9 f3       	breq	.-22     	; 0x15d1e <__divsf3_pse+0x10>
   15d34:	33 d0       	rcall	.+102    	; 0x15d9c <__divsf3_pse+0x8e>
   15d36:	0e 2e       	mov	r0, r30
   15d38:	3a f0       	brmi	.+14     	; 0x15d48 <__divsf3_pse+0x3a>
   15d3a:	e0 e8       	ldi	r30, 0x80	; 128
   15d3c:	30 d0       	rcall	.+96     	; 0x15d9e <__divsf3_pse+0x90>
   15d3e:	91 50       	subi	r25, 0x01	; 1
   15d40:	50 40       	sbci	r21, 0x00	; 0
   15d42:	e6 95       	lsr	r30
   15d44:	00 1c       	adc	r0, r0
   15d46:	ca f7       	brpl	.-14     	; 0x15d3a <__divsf3_pse+0x2c>
   15d48:	29 d0       	rcall	.+82     	; 0x15d9c <__divsf3_pse+0x8e>
   15d4a:	fe 2f       	mov	r31, r30
   15d4c:	27 d0       	rcall	.+78     	; 0x15d9c <__divsf3_pse+0x8e>
   15d4e:	66 0f       	add	r22, r22
   15d50:	77 1f       	adc	r23, r23
   15d52:	88 1f       	adc	r24, r24
   15d54:	bb 1f       	adc	r27, r27
   15d56:	26 17       	cp	r18, r22
   15d58:	37 07       	cpc	r19, r23
   15d5a:	48 07       	cpc	r20, r24
   15d5c:	ab 07       	cpc	r26, r27
   15d5e:	b0 e8       	ldi	r27, 0x80	; 128
   15d60:	09 f0       	breq	.+2      	; 0x15d64 <__divsf3_pse+0x56>
   15d62:	bb 0b       	sbc	r27, r27
   15d64:	80 2d       	mov	r24, r0
   15d66:	bf 01       	movw	r22, r30
   15d68:	ff 27       	eor	r31, r31
   15d6a:	93 58       	subi	r25, 0x83	; 131
   15d6c:	5f 4f       	sbci	r21, 0xFF	; 255
   15d6e:	2a f0       	brmi	.+10     	; 0x15d7a <__divsf3_pse+0x6c>
   15d70:	9e 3f       	cpi	r25, 0xFE	; 254
   15d72:	51 05       	cpc	r21, r1
   15d74:	68 f0       	brcs	.+26     	; 0x15d90 <__divsf3_pse+0x82>
   15d76:	b6 c0       	rjmp	.+364    	; 0x15ee4 <__fp_inf>
   15d78:	00 c1       	rjmp	.+512    	; 0x15f7a <__fp_szero>
   15d7a:	5f 3f       	cpi	r21, 0xFF	; 255
   15d7c:	ec f3       	brlt	.-6      	; 0x15d78 <__divsf3_pse+0x6a>
   15d7e:	98 3e       	cpi	r25, 0xE8	; 232
   15d80:	dc f3       	brlt	.-10     	; 0x15d78 <__divsf3_pse+0x6a>
   15d82:	86 95       	lsr	r24
   15d84:	77 95       	ror	r23
   15d86:	67 95       	ror	r22
   15d88:	b7 95       	ror	r27
   15d8a:	f7 95       	ror	r31
   15d8c:	9f 5f       	subi	r25, 0xFF	; 255
   15d8e:	c9 f7       	brne	.-14     	; 0x15d82 <__divsf3_pse+0x74>
   15d90:	88 0f       	add	r24, r24
   15d92:	91 1d       	adc	r25, r1
   15d94:	96 95       	lsr	r25
   15d96:	87 95       	ror	r24
   15d98:	97 f9       	bld	r25, 7
   15d9a:	08 95       	ret
   15d9c:	e1 e0       	ldi	r30, 0x01	; 1
   15d9e:	66 0f       	add	r22, r22
   15da0:	77 1f       	adc	r23, r23
   15da2:	88 1f       	adc	r24, r24
   15da4:	bb 1f       	adc	r27, r27
   15da6:	62 17       	cp	r22, r18
   15da8:	73 07       	cpc	r23, r19
   15daa:	84 07       	cpc	r24, r20
   15dac:	ba 07       	cpc	r27, r26
   15dae:	20 f0       	brcs	.+8      	; 0x15db8 <__divsf3_pse+0xaa>
   15db0:	62 1b       	sub	r22, r18
   15db2:	73 0b       	sbc	r23, r19
   15db4:	84 0b       	sbc	r24, r20
   15db6:	ba 0b       	sbc	r27, r26
   15db8:	ee 1f       	adc	r30, r30
   15dba:	88 f7       	brcc	.-30     	; 0x15d9e <__divsf3_pse+0x90>
   15dbc:	e0 95       	com	r30
   15dbe:	08 95       	ret

00015dc0 <__fixsfsi>:
   15dc0:	04 d0       	rcall	.+8      	; 0x15dca <__fixunssfsi>
   15dc2:	68 94       	set
   15dc4:	b1 11       	cpse	r27, r1
   15dc6:	d9 c0       	rjmp	.+434    	; 0x15f7a <__fp_szero>
   15dc8:	08 95       	ret

00015dca <__fixunssfsi>:
   15dca:	bc d0       	rcall	.+376    	; 0x15f44 <__fp_splitA>
   15dcc:	88 f0       	brcs	.+34     	; 0x15df0 <__fixunssfsi+0x26>
   15dce:	9f 57       	subi	r25, 0x7F	; 127
   15dd0:	90 f0       	brcs	.+36     	; 0x15df6 <__fixunssfsi+0x2c>
   15dd2:	b9 2f       	mov	r27, r25
   15dd4:	99 27       	eor	r25, r25
   15dd6:	b7 51       	subi	r27, 0x17	; 23
   15dd8:	a0 f0       	brcs	.+40     	; 0x15e02 <__fixunssfsi+0x38>
   15dda:	d1 f0       	breq	.+52     	; 0x15e10 <__fixunssfsi+0x46>
   15ddc:	66 0f       	add	r22, r22
   15dde:	77 1f       	adc	r23, r23
   15de0:	88 1f       	adc	r24, r24
   15de2:	99 1f       	adc	r25, r25
   15de4:	1a f0       	brmi	.+6      	; 0x15dec <__fixunssfsi+0x22>
   15de6:	ba 95       	dec	r27
   15de8:	c9 f7       	brne	.-14     	; 0x15ddc <__fixunssfsi+0x12>
   15dea:	12 c0       	rjmp	.+36     	; 0x15e10 <__fixunssfsi+0x46>
   15dec:	b1 30       	cpi	r27, 0x01	; 1
   15dee:	81 f0       	breq	.+32     	; 0x15e10 <__fixunssfsi+0x46>
   15df0:	c3 d0       	rcall	.+390    	; 0x15f78 <__fp_zero>
   15df2:	b1 e0       	ldi	r27, 0x01	; 1
   15df4:	08 95       	ret
   15df6:	c0 c0       	rjmp	.+384    	; 0x15f78 <__fp_zero>
   15df8:	67 2f       	mov	r22, r23
   15dfa:	78 2f       	mov	r23, r24
   15dfc:	88 27       	eor	r24, r24
   15dfe:	b8 5f       	subi	r27, 0xF8	; 248
   15e00:	39 f0       	breq	.+14     	; 0x15e10 <__fixunssfsi+0x46>
   15e02:	b9 3f       	cpi	r27, 0xF9	; 249
   15e04:	cc f3       	brlt	.-14     	; 0x15df8 <__fixunssfsi+0x2e>
   15e06:	86 95       	lsr	r24
   15e08:	77 95       	ror	r23
   15e0a:	67 95       	ror	r22
   15e0c:	b3 95       	inc	r27
   15e0e:	d9 f7       	brne	.-10     	; 0x15e06 <__fixunssfsi+0x3c>
   15e10:	3e f4       	brtc	.+14     	; 0x15e20 <__fixunssfsi+0x56>
   15e12:	90 95       	com	r25
   15e14:	80 95       	com	r24
   15e16:	70 95       	com	r23
   15e18:	61 95       	neg	r22
   15e1a:	7f 4f       	sbci	r23, 0xFF	; 255
   15e1c:	8f 4f       	sbci	r24, 0xFF	; 255
   15e1e:	9f 4f       	sbci	r25, 0xFF	; 255
   15e20:	08 95       	ret

00015e22 <__floatunsisf>:
   15e22:	e8 94       	clt
   15e24:	09 c0       	rjmp	.+18     	; 0x15e38 <__floatsisf+0x12>

00015e26 <__floatsisf>:
   15e26:	97 fb       	bst	r25, 7
   15e28:	3e f4       	brtc	.+14     	; 0x15e38 <__floatsisf+0x12>
   15e2a:	90 95       	com	r25
   15e2c:	80 95       	com	r24
   15e2e:	70 95       	com	r23
   15e30:	61 95       	neg	r22
   15e32:	7f 4f       	sbci	r23, 0xFF	; 255
   15e34:	8f 4f       	sbci	r24, 0xFF	; 255
   15e36:	9f 4f       	sbci	r25, 0xFF	; 255
   15e38:	99 23       	and	r25, r25
   15e3a:	a9 f0       	breq	.+42     	; 0x15e66 <__floatsisf+0x40>
   15e3c:	f9 2f       	mov	r31, r25
   15e3e:	96 e9       	ldi	r25, 0x96	; 150
   15e40:	bb 27       	eor	r27, r27
   15e42:	93 95       	inc	r25
   15e44:	f6 95       	lsr	r31
   15e46:	87 95       	ror	r24
   15e48:	77 95       	ror	r23
   15e4a:	67 95       	ror	r22
   15e4c:	b7 95       	ror	r27
   15e4e:	f1 11       	cpse	r31, r1
   15e50:	f8 cf       	rjmp	.-16     	; 0x15e42 <__floatsisf+0x1c>
   15e52:	fa f4       	brpl	.+62     	; 0x15e92 <__floatsisf+0x6c>
   15e54:	bb 0f       	add	r27, r27
   15e56:	11 f4       	brne	.+4      	; 0x15e5c <__floatsisf+0x36>
   15e58:	60 ff       	sbrs	r22, 0
   15e5a:	1b c0       	rjmp	.+54     	; 0x15e92 <__floatsisf+0x6c>
   15e5c:	6f 5f       	subi	r22, 0xFF	; 255
   15e5e:	7f 4f       	sbci	r23, 0xFF	; 255
   15e60:	8f 4f       	sbci	r24, 0xFF	; 255
   15e62:	9f 4f       	sbci	r25, 0xFF	; 255
   15e64:	16 c0       	rjmp	.+44     	; 0x15e92 <__floatsisf+0x6c>
   15e66:	88 23       	and	r24, r24
   15e68:	11 f0       	breq	.+4      	; 0x15e6e <__floatsisf+0x48>
   15e6a:	96 e9       	ldi	r25, 0x96	; 150
   15e6c:	11 c0       	rjmp	.+34     	; 0x15e90 <__floatsisf+0x6a>
   15e6e:	77 23       	and	r23, r23
   15e70:	21 f0       	breq	.+8      	; 0x15e7a <__floatsisf+0x54>
   15e72:	9e e8       	ldi	r25, 0x8E	; 142
   15e74:	87 2f       	mov	r24, r23
   15e76:	76 2f       	mov	r23, r22
   15e78:	05 c0       	rjmp	.+10     	; 0x15e84 <__floatsisf+0x5e>
   15e7a:	66 23       	and	r22, r22
   15e7c:	71 f0       	breq	.+28     	; 0x15e9a <__floatsisf+0x74>
   15e7e:	96 e8       	ldi	r25, 0x86	; 134
   15e80:	86 2f       	mov	r24, r22
   15e82:	70 e0       	ldi	r23, 0x00	; 0
   15e84:	60 e0       	ldi	r22, 0x00	; 0
   15e86:	2a f0       	brmi	.+10     	; 0x15e92 <__floatsisf+0x6c>
   15e88:	9a 95       	dec	r25
   15e8a:	66 0f       	add	r22, r22
   15e8c:	77 1f       	adc	r23, r23
   15e8e:	88 1f       	adc	r24, r24
   15e90:	da f7       	brpl	.-10     	; 0x15e88 <__floatsisf+0x62>
   15e92:	88 0f       	add	r24, r24
   15e94:	96 95       	lsr	r25
   15e96:	87 95       	ror	r24
   15e98:	97 f9       	bld	r25, 7
   15e9a:	08 95       	ret

00015e9c <__fp_cmp>:
   15e9c:	99 0f       	add	r25, r25
   15e9e:	00 08       	sbc	r0, r0
   15ea0:	55 0f       	add	r21, r21
   15ea2:	aa 0b       	sbc	r26, r26
   15ea4:	e0 e8       	ldi	r30, 0x80	; 128
   15ea6:	fe ef       	ldi	r31, 0xFE	; 254
   15ea8:	16 16       	cp	r1, r22
   15eaa:	17 06       	cpc	r1, r23
   15eac:	e8 07       	cpc	r30, r24
   15eae:	f9 07       	cpc	r31, r25
   15eb0:	c0 f0       	brcs	.+48     	; 0x15ee2 <__fp_cmp+0x46>
   15eb2:	12 16       	cp	r1, r18
   15eb4:	13 06       	cpc	r1, r19
   15eb6:	e4 07       	cpc	r30, r20
   15eb8:	f5 07       	cpc	r31, r21
   15eba:	98 f0       	brcs	.+38     	; 0x15ee2 <__fp_cmp+0x46>
   15ebc:	62 1b       	sub	r22, r18
   15ebe:	73 0b       	sbc	r23, r19
   15ec0:	84 0b       	sbc	r24, r20
   15ec2:	95 0b       	sbc	r25, r21
   15ec4:	39 f4       	brne	.+14     	; 0x15ed4 <__fp_cmp+0x38>
   15ec6:	0a 26       	eor	r0, r26
   15ec8:	61 f0       	breq	.+24     	; 0x15ee2 <__fp_cmp+0x46>
   15eca:	23 2b       	or	r18, r19
   15ecc:	24 2b       	or	r18, r20
   15ece:	25 2b       	or	r18, r21
   15ed0:	21 f4       	brne	.+8      	; 0x15eda <__fp_cmp+0x3e>
   15ed2:	08 95       	ret
   15ed4:	0a 26       	eor	r0, r26
   15ed6:	09 f4       	brne	.+2      	; 0x15eda <__fp_cmp+0x3e>
   15ed8:	a1 40       	sbci	r26, 0x01	; 1
   15eda:	a6 95       	lsr	r26
   15edc:	8f ef       	ldi	r24, 0xFF	; 255
   15ede:	81 1d       	adc	r24, r1
   15ee0:	81 1d       	adc	r24, r1
   15ee2:	08 95       	ret

00015ee4 <__fp_inf>:
   15ee4:	97 f9       	bld	r25, 7
   15ee6:	9f 67       	ori	r25, 0x7F	; 127
   15ee8:	80 e8       	ldi	r24, 0x80	; 128
   15eea:	70 e0       	ldi	r23, 0x00	; 0
   15eec:	60 e0       	ldi	r22, 0x00	; 0
   15eee:	08 95       	ret

00015ef0 <__fp_nan>:
   15ef0:	9f ef       	ldi	r25, 0xFF	; 255
   15ef2:	80 ec       	ldi	r24, 0xC0	; 192
   15ef4:	08 95       	ret

00015ef6 <__fp_pscA>:
   15ef6:	00 24       	eor	r0, r0
   15ef8:	0a 94       	dec	r0
   15efa:	16 16       	cp	r1, r22
   15efc:	17 06       	cpc	r1, r23
   15efe:	18 06       	cpc	r1, r24
   15f00:	09 06       	cpc	r0, r25
   15f02:	08 95       	ret

00015f04 <__fp_pscB>:
   15f04:	00 24       	eor	r0, r0
   15f06:	0a 94       	dec	r0
   15f08:	12 16       	cp	r1, r18
   15f0a:	13 06       	cpc	r1, r19
   15f0c:	14 06       	cpc	r1, r20
   15f0e:	05 06       	cpc	r0, r21
   15f10:	08 95       	ret

00015f12 <__fp_round>:
   15f12:	09 2e       	mov	r0, r25
   15f14:	03 94       	inc	r0
   15f16:	00 0c       	add	r0, r0
   15f18:	11 f4       	brne	.+4      	; 0x15f1e <__fp_round+0xc>
   15f1a:	88 23       	and	r24, r24
   15f1c:	52 f0       	brmi	.+20     	; 0x15f32 <__fp_round+0x20>
   15f1e:	bb 0f       	add	r27, r27
   15f20:	40 f4       	brcc	.+16     	; 0x15f32 <__fp_round+0x20>
   15f22:	bf 2b       	or	r27, r31
   15f24:	11 f4       	brne	.+4      	; 0x15f2a <__fp_round+0x18>
   15f26:	60 ff       	sbrs	r22, 0
   15f28:	04 c0       	rjmp	.+8      	; 0x15f32 <__fp_round+0x20>
   15f2a:	6f 5f       	subi	r22, 0xFF	; 255
   15f2c:	7f 4f       	sbci	r23, 0xFF	; 255
   15f2e:	8f 4f       	sbci	r24, 0xFF	; 255
   15f30:	9f 4f       	sbci	r25, 0xFF	; 255
   15f32:	08 95       	ret

00015f34 <__fp_split3>:
   15f34:	57 fd       	sbrc	r21, 7
   15f36:	90 58       	subi	r25, 0x80	; 128
   15f38:	44 0f       	add	r20, r20
   15f3a:	55 1f       	adc	r21, r21
   15f3c:	59 f0       	breq	.+22     	; 0x15f54 <__fp_splitA+0x10>
   15f3e:	5f 3f       	cpi	r21, 0xFF	; 255
   15f40:	71 f0       	breq	.+28     	; 0x15f5e <__fp_splitA+0x1a>
   15f42:	47 95       	ror	r20

00015f44 <__fp_splitA>:
   15f44:	88 0f       	add	r24, r24
   15f46:	97 fb       	bst	r25, 7
   15f48:	99 1f       	adc	r25, r25
   15f4a:	61 f0       	breq	.+24     	; 0x15f64 <__fp_splitA+0x20>
   15f4c:	9f 3f       	cpi	r25, 0xFF	; 255
   15f4e:	79 f0       	breq	.+30     	; 0x15f6e <__fp_splitA+0x2a>
   15f50:	87 95       	ror	r24
   15f52:	08 95       	ret
   15f54:	12 16       	cp	r1, r18
   15f56:	13 06       	cpc	r1, r19
   15f58:	14 06       	cpc	r1, r20
   15f5a:	55 1f       	adc	r21, r21
   15f5c:	f2 cf       	rjmp	.-28     	; 0x15f42 <__fp_split3+0xe>
   15f5e:	46 95       	lsr	r20
   15f60:	f1 df       	rcall	.-30     	; 0x15f44 <__fp_splitA>
   15f62:	08 c0       	rjmp	.+16     	; 0x15f74 <__fp_splitA+0x30>
   15f64:	16 16       	cp	r1, r22
   15f66:	17 06       	cpc	r1, r23
   15f68:	18 06       	cpc	r1, r24
   15f6a:	99 1f       	adc	r25, r25
   15f6c:	f1 cf       	rjmp	.-30     	; 0x15f50 <__fp_splitA+0xc>
   15f6e:	86 95       	lsr	r24
   15f70:	71 05       	cpc	r23, r1
   15f72:	61 05       	cpc	r22, r1
   15f74:	08 94       	sec
   15f76:	08 95       	ret

00015f78 <__fp_zero>:
   15f78:	e8 94       	clt

00015f7a <__fp_szero>:
   15f7a:	bb 27       	eor	r27, r27
   15f7c:	66 27       	eor	r22, r22
   15f7e:	77 27       	eor	r23, r23
   15f80:	cb 01       	movw	r24, r22
   15f82:	97 f9       	bld	r25, 7
   15f84:	08 95       	ret

00015f86 <__gesf2>:
   15f86:	8a df       	rcall	.-236    	; 0x15e9c <__fp_cmp>
   15f88:	08 f4       	brcc	.+2      	; 0x15f8c <__gesf2+0x6>
   15f8a:	8f ef       	ldi	r24, 0xFF	; 255
   15f8c:	08 95       	ret

00015f8e <__mulsf3>:
   15f8e:	0b d0       	rcall	.+22     	; 0x15fa6 <__mulsf3x>
   15f90:	c0 cf       	rjmp	.-128    	; 0x15f12 <__fp_round>
   15f92:	b1 df       	rcall	.-158    	; 0x15ef6 <__fp_pscA>
   15f94:	28 f0       	brcs	.+10     	; 0x15fa0 <__mulsf3+0x12>
   15f96:	b6 df       	rcall	.-148    	; 0x15f04 <__fp_pscB>
   15f98:	18 f0       	brcs	.+6      	; 0x15fa0 <__mulsf3+0x12>
   15f9a:	95 23       	and	r25, r21
   15f9c:	09 f0       	breq	.+2      	; 0x15fa0 <__mulsf3+0x12>
   15f9e:	a2 cf       	rjmp	.-188    	; 0x15ee4 <__fp_inf>
   15fa0:	a7 cf       	rjmp	.-178    	; 0x15ef0 <__fp_nan>
   15fa2:	11 24       	eor	r1, r1
   15fa4:	ea cf       	rjmp	.-44     	; 0x15f7a <__fp_szero>

00015fa6 <__mulsf3x>:
   15fa6:	c6 df       	rcall	.-116    	; 0x15f34 <__fp_split3>
   15fa8:	a0 f3       	brcs	.-24     	; 0x15f92 <__mulsf3+0x4>

00015faa <__mulsf3_pse>:
   15faa:	95 9f       	mul	r25, r21
   15fac:	d1 f3       	breq	.-12     	; 0x15fa2 <__mulsf3+0x14>
   15fae:	95 0f       	add	r25, r21
   15fb0:	50 e0       	ldi	r21, 0x00	; 0
   15fb2:	55 1f       	adc	r21, r21
   15fb4:	62 9f       	mul	r22, r18
   15fb6:	f0 01       	movw	r30, r0
   15fb8:	72 9f       	mul	r23, r18
   15fba:	bb 27       	eor	r27, r27
   15fbc:	f0 0d       	add	r31, r0
   15fbe:	b1 1d       	adc	r27, r1
   15fc0:	63 9f       	mul	r22, r19
   15fc2:	aa 27       	eor	r26, r26
   15fc4:	f0 0d       	add	r31, r0
   15fc6:	b1 1d       	adc	r27, r1
   15fc8:	aa 1f       	adc	r26, r26
   15fca:	64 9f       	mul	r22, r20
   15fcc:	66 27       	eor	r22, r22
   15fce:	b0 0d       	add	r27, r0
   15fd0:	a1 1d       	adc	r26, r1
   15fd2:	66 1f       	adc	r22, r22
   15fd4:	82 9f       	mul	r24, r18
   15fd6:	22 27       	eor	r18, r18
   15fd8:	b0 0d       	add	r27, r0
   15fda:	a1 1d       	adc	r26, r1
   15fdc:	62 1f       	adc	r22, r18
   15fde:	73 9f       	mul	r23, r19
   15fe0:	b0 0d       	add	r27, r0
   15fe2:	a1 1d       	adc	r26, r1
   15fe4:	62 1f       	adc	r22, r18
   15fe6:	83 9f       	mul	r24, r19
   15fe8:	a0 0d       	add	r26, r0
   15fea:	61 1d       	adc	r22, r1
   15fec:	22 1f       	adc	r18, r18
   15fee:	74 9f       	mul	r23, r20
   15ff0:	33 27       	eor	r19, r19
   15ff2:	a0 0d       	add	r26, r0
   15ff4:	61 1d       	adc	r22, r1
   15ff6:	23 1f       	adc	r18, r19
   15ff8:	84 9f       	mul	r24, r20
   15ffa:	60 0d       	add	r22, r0
   15ffc:	21 1d       	adc	r18, r1
   15ffe:	82 2f       	mov	r24, r18
   16000:	76 2f       	mov	r23, r22
   16002:	6a 2f       	mov	r22, r26
   16004:	11 24       	eor	r1, r1
   16006:	9f 57       	subi	r25, 0x7F	; 127
   16008:	50 40       	sbci	r21, 0x00	; 0
   1600a:	8a f0       	brmi	.+34     	; 0x1602e <__mulsf3_pse+0x84>
   1600c:	e1 f0       	breq	.+56     	; 0x16046 <__mulsf3_pse+0x9c>
   1600e:	88 23       	and	r24, r24
   16010:	4a f0       	brmi	.+18     	; 0x16024 <__mulsf3_pse+0x7a>
   16012:	ee 0f       	add	r30, r30
   16014:	ff 1f       	adc	r31, r31
   16016:	bb 1f       	adc	r27, r27
   16018:	66 1f       	adc	r22, r22
   1601a:	77 1f       	adc	r23, r23
   1601c:	88 1f       	adc	r24, r24
   1601e:	91 50       	subi	r25, 0x01	; 1
   16020:	50 40       	sbci	r21, 0x00	; 0
   16022:	a9 f7       	brne	.-22     	; 0x1600e <__mulsf3_pse+0x64>
   16024:	9e 3f       	cpi	r25, 0xFE	; 254
   16026:	51 05       	cpc	r21, r1
   16028:	70 f0       	brcs	.+28     	; 0x16046 <__mulsf3_pse+0x9c>
   1602a:	5c cf       	rjmp	.-328    	; 0x15ee4 <__fp_inf>
   1602c:	a6 cf       	rjmp	.-180    	; 0x15f7a <__fp_szero>
   1602e:	5f 3f       	cpi	r21, 0xFF	; 255
   16030:	ec f3       	brlt	.-6      	; 0x1602c <__mulsf3_pse+0x82>
   16032:	98 3e       	cpi	r25, 0xE8	; 232
   16034:	dc f3       	brlt	.-10     	; 0x1602c <__mulsf3_pse+0x82>
   16036:	86 95       	lsr	r24
   16038:	77 95       	ror	r23
   1603a:	67 95       	ror	r22
   1603c:	b7 95       	ror	r27
   1603e:	f7 95       	ror	r31
   16040:	e7 95       	ror	r30
   16042:	9f 5f       	subi	r25, 0xFF	; 255
   16044:	c1 f7       	brne	.-16     	; 0x16036 <__mulsf3_pse+0x8c>
   16046:	fe 2b       	or	r31, r30
   16048:	88 0f       	add	r24, r24
   1604a:	91 1d       	adc	r25, r1
   1604c:	96 95       	lsr	r25
   1604e:	87 95       	ror	r24
   16050:	97 f9       	bld	r25, 7
   16052:	08 95       	ret

00016054 <__unordsf2>:
   16054:	23 df       	rcall	.-442    	; 0x15e9c <__fp_cmp>
   16056:	88 0b       	sbc	r24, r24
   16058:	99 0b       	sbc	r25, r25
   1605a:	08 95       	ret

0001605c <malloc>:
   1605c:	cf 93       	push	r28
   1605e:	df 93       	push	r29
   16060:	82 30       	cpi	r24, 0x02	; 2
   16062:	91 05       	cpc	r25, r1
   16064:	10 f4       	brcc	.+4      	; 0x1606a <malloc+0xe>
   16066:	82 e0       	ldi	r24, 0x02	; 2
   16068:	90 e0       	ldi	r25, 0x00	; 0
   1606a:	e0 91 fd 3a 	lds	r30, 0x3AFD
   1606e:	f0 91 fe 3a 	lds	r31, 0x3AFE
   16072:	20 e0       	ldi	r18, 0x00	; 0
   16074:	30 e0       	ldi	r19, 0x00	; 0
   16076:	a0 e0       	ldi	r26, 0x00	; 0
   16078:	b0 e0       	ldi	r27, 0x00	; 0
   1607a:	30 97       	sbiw	r30, 0x00	; 0
   1607c:	39 f1       	breq	.+78     	; 0x160cc <malloc+0x70>
   1607e:	40 81       	ld	r20, Z
   16080:	51 81       	ldd	r21, Z+1	; 0x01
   16082:	48 17       	cp	r20, r24
   16084:	59 07       	cpc	r21, r25
   16086:	b8 f0       	brcs	.+46     	; 0x160b6 <malloc+0x5a>
   16088:	48 17       	cp	r20, r24
   1608a:	59 07       	cpc	r21, r25
   1608c:	71 f4       	brne	.+28     	; 0x160aa <malloc+0x4e>
   1608e:	82 81       	ldd	r24, Z+2	; 0x02
   16090:	93 81       	ldd	r25, Z+3	; 0x03
   16092:	10 97       	sbiw	r26, 0x00	; 0
   16094:	29 f0       	breq	.+10     	; 0x160a0 <malloc+0x44>
   16096:	13 96       	adiw	r26, 0x03	; 3
   16098:	9c 93       	st	X, r25
   1609a:	8e 93       	st	-X, r24
   1609c:	12 97       	sbiw	r26, 0x02	; 2
   1609e:	2c c0       	rjmp	.+88     	; 0x160f8 <malloc+0x9c>
   160a0:	90 93 fe 3a 	sts	0x3AFE, r25
   160a4:	80 93 fd 3a 	sts	0x3AFD, r24
   160a8:	27 c0       	rjmp	.+78     	; 0x160f8 <malloc+0x9c>
   160aa:	21 15       	cp	r18, r1
   160ac:	31 05       	cpc	r19, r1
   160ae:	31 f0       	breq	.+12     	; 0x160bc <malloc+0x60>
   160b0:	42 17       	cp	r20, r18
   160b2:	53 07       	cpc	r21, r19
   160b4:	18 f0       	brcs	.+6      	; 0x160bc <malloc+0x60>
   160b6:	a9 01       	movw	r20, r18
   160b8:	db 01       	movw	r26, r22
   160ba:	01 c0       	rjmp	.+2      	; 0x160be <malloc+0x62>
   160bc:	ef 01       	movw	r28, r30
   160be:	9a 01       	movw	r18, r20
   160c0:	bd 01       	movw	r22, r26
   160c2:	df 01       	movw	r26, r30
   160c4:	02 80       	ldd	r0, Z+2	; 0x02
   160c6:	f3 81       	ldd	r31, Z+3	; 0x03
   160c8:	e0 2d       	mov	r30, r0
   160ca:	d7 cf       	rjmp	.-82     	; 0x1607a <malloc+0x1e>
   160cc:	21 15       	cp	r18, r1
   160ce:	31 05       	cpc	r19, r1
   160d0:	f9 f0       	breq	.+62     	; 0x16110 <malloc+0xb4>
   160d2:	28 1b       	sub	r18, r24
   160d4:	39 0b       	sbc	r19, r25
   160d6:	24 30       	cpi	r18, 0x04	; 4
   160d8:	31 05       	cpc	r19, r1
   160da:	80 f4       	brcc	.+32     	; 0x160fc <malloc+0xa0>
   160dc:	8a 81       	ldd	r24, Y+2	; 0x02
   160de:	9b 81       	ldd	r25, Y+3	; 0x03
   160e0:	61 15       	cp	r22, r1
   160e2:	71 05       	cpc	r23, r1
   160e4:	21 f0       	breq	.+8      	; 0x160ee <malloc+0x92>
   160e6:	fb 01       	movw	r30, r22
   160e8:	93 83       	std	Z+3, r25	; 0x03
   160ea:	82 83       	std	Z+2, r24	; 0x02
   160ec:	04 c0       	rjmp	.+8      	; 0x160f6 <malloc+0x9a>
   160ee:	90 93 fe 3a 	sts	0x3AFE, r25
   160f2:	80 93 fd 3a 	sts	0x3AFD, r24
   160f6:	fe 01       	movw	r30, r28
   160f8:	32 96       	adiw	r30, 0x02	; 2
   160fa:	44 c0       	rjmp	.+136    	; 0x16184 <malloc+0x128>
   160fc:	fe 01       	movw	r30, r28
   160fe:	e2 0f       	add	r30, r18
   16100:	f3 1f       	adc	r31, r19
   16102:	81 93       	st	Z+, r24
   16104:	91 93       	st	Z+, r25
   16106:	22 50       	subi	r18, 0x02	; 2
   16108:	31 09       	sbc	r19, r1
   1610a:	39 83       	std	Y+1, r19	; 0x01
   1610c:	28 83       	st	Y, r18
   1610e:	3a c0       	rjmp	.+116    	; 0x16184 <malloc+0x128>
   16110:	20 91 fb 3a 	lds	r18, 0x3AFB
   16114:	30 91 fc 3a 	lds	r19, 0x3AFC
   16118:	23 2b       	or	r18, r19
   1611a:	41 f4       	brne	.+16     	; 0x1612c <malloc+0xd0>
   1611c:	20 91 3c 0c 	lds	r18, 0x0C3C
   16120:	30 91 3d 0c 	lds	r19, 0x0C3D
   16124:	30 93 fc 3a 	sts	0x3AFC, r19
   16128:	20 93 fb 3a 	sts	0x3AFB, r18
   1612c:	20 91 3a 0c 	lds	r18, 0x0C3A
   16130:	30 91 3b 0c 	lds	r19, 0x0C3B
   16134:	21 15       	cp	r18, r1
   16136:	31 05       	cpc	r19, r1
   16138:	41 f4       	brne	.+16     	; 0x1614a <malloc+0xee>
   1613a:	2d b7       	in	r18, 0x3d	; 61
   1613c:	3e b7       	in	r19, 0x3e	; 62
   1613e:	40 91 3e 0c 	lds	r20, 0x0C3E
   16142:	50 91 3f 0c 	lds	r21, 0x0C3F
   16146:	24 1b       	sub	r18, r20
   16148:	35 0b       	sbc	r19, r21
   1614a:	e0 91 fb 3a 	lds	r30, 0x3AFB
   1614e:	f0 91 fc 3a 	lds	r31, 0x3AFC
   16152:	e2 17       	cp	r30, r18
   16154:	f3 07       	cpc	r31, r19
   16156:	a0 f4       	brcc	.+40     	; 0x16180 <malloc+0x124>
   16158:	2e 1b       	sub	r18, r30
   1615a:	3f 0b       	sbc	r19, r31
   1615c:	28 17       	cp	r18, r24
   1615e:	39 07       	cpc	r19, r25
   16160:	78 f0       	brcs	.+30     	; 0x16180 <malloc+0x124>
   16162:	ac 01       	movw	r20, r24
   16164:	4e 5f       	subi	r20, 0xFE	; 254
   16166:	5f 4f       	sbci	r21, 0xFF	; 255
   16168:	24 17       	cp	r18, r20
   1616a:	35 07       	cpc	r19, r21
   1616c:	48 f0       	brcs	.+18     	; 0x16180 <malloc+0x124>
   1616e:	4e 0f       	add	r20, r30
   16170:	5f 1f       	adc	r21, r31
   16172:	50 93 fc 3a 	sts	0x3AFC, r21
   16176:	40 93 fb 3a 	sts	0x3AFB, r20
   1617a:	81 93       	st	Z+, r24
   1617c:	91 93       	st	Z+, r25
   1617e:	02 c0       	rjmp	.+4      	; 0x16184 <malloc+0x128>
   16180:	e0 e0       	ldi	r30, 0x00	; 0
   16182:	f0 e0       	ldi	r31, 0x00	; 0
   16184:	cf 01       	movw	r24, r30
   16186:	df 91       	pop	r29
   16188:	cf 91       	pop	r28
   1618a:	08 95       	ret

0001618c <free>:
   1618c:	cf 93       	push	r28
   1618e:	df 93       	push	r29
   16190:	00 97       	sbiw	r24, 0x00	; 0
   16192:	09 f4       	brne	.+2      	; 0x16196 <free+0xa>
   16194:	87 c0       	rjmp	.+270    	; 0x162a4 <free+0x118>
   16196:	fc 01       	movw	r30, r24
   16198:	32 97       	sbiw	r30, 0x02	; 2
   1619a:	13 82       	std	Z+3, r1	; 0x03
   1619c:	12 82       	std	Z+2, r1	; 0x02
   1619e:	c0 91 fd 3a 	lds	r28, 0x3AFD
   161a2:	d0 91 fe 3a 	lds	r29, 0x3AFE
   161a6:	20 97       	sbiw	r28, 0x00	; 0
   161a8:	81 f4       	brne	.+32     	; 0x161ca <free+0x3e>
   161aa:	20 81       	ld	r18, Z
   161ac:	31 81       	ldd	r19, Z+1	; 0x01
   161ae:	28 0f       	add	r18, r24
   161b0:	39 1f       	adc	r19, r25
   161b2:	80 91 fb 3a 	lds	r24, 0x3AFB
   161b6:	90 91 fc 3a 	lds	r25, 0x3AFC
   161ba:	82 17       	cp	r24, r18
   161bc:	93 07       	cpc	r25, r19
   161be:	79 f5       	brne	.+94     	; 0x1621e <free+0x92>
   161c0:	f0 93 fc 3a 	sts	0x3AFC, r31
   161c4:	e0 93 fb 3a 	sts	0x3AFB, r30
   161c8:	6d c0       	rjmp	.+218    	; 0x162a4 <free+0x118>
   161ca:	de 01       	movw	r26, r28
   161cc:	20 e0       	ldi	r18, 0x00	; 0
   161ce:	30 e0       	ldi	r19, 0x00	; 0
   161d0:	ae 17       	cp	r26, r30
   161d2:	bf 07       	cpc	r27, r31
   161d4:	50 f4       	brcc	.+20     	; 0x161ea <free+0x5e>
   161d6:	12 96       	adiw	r26, 0x02	; 2
   161d8:	4d 91       	ld	r20, X+
   161da:	5c 91       	ld	r21, X
   161dc:	13 97       	sbiw	r26, 0x03	; 3
   161de:	9d 01       	movw	r18, r26
   161e0:	41 15       	cp	r20, r1
   161e2:	51 05       	cpc	r21, r1
   161e4:	09 f1       	breq	.+66     	; 0x16228 <free+0x9c>
   161e6:	da 01       	movw	r26, r20
   161e8:	f3 cf       	rjmp	.-26     	; 0x161d0 <free+0x44>
   161ea:	b3 83       	std	Z+3, r27	; 0x03
   161ec:	a2 83       	std	Z+2, r26	; 0x02
   161ee:	40 81       	ld	r20, Z
   161f0:	51 81       	ldd	r21, Z+1	; 0x01
   161f2:	84 0f       	add	r24, r20
   161f4:	95 1f       	adc	r25, r21
   161f6:	8a 17       	cp	r24, r26
   161f8:	9b 07       	cpc	r25, r27
   161fa:	71 f4       	brne	.+28     	; 0x16218 <free+0x8c>
   161fc:	8d 91       	ld	r24, X+
   161fe:	9c 91       	ld	r25, X
   16200:	11 97       	sbiw	r26, 0x01	; 1
   16202:	84 0f       	add	r24, r20
   16204:	95 1f       	adc	r25, r21
   16206:	02 96       	adiw	r24, 0x02	; 2
   16208:	91 83       	std	Z+1, r25	; 0x01
   1620a:	80 83       	st	Z, r24
   1620c:	12 96       	adiw	r26, 0x02	; 2
   1620e:	8d 91       	ld	r24, X+
   16210:	9c 91       	ld	r25, X
   16212:	13 97       	sbiw	r26, 0x03	; 3
   16214:	93 83       	std	Z+3, r25	; 0x03
   16216:	82 83       	std	Z+2, r24	; 0x02
   16218:	21 15       	cp	r18, r1
   1621a:	31 05       	cpc	r19, r1
   1621c:	29 f4       	brne	.+10     	; 0x16228 <free+0x9c>
   1621e:	f0 93 fe 3a 	sts	0x3AFE, r31
   16222:	e0 93 fd 3a 	sts	0x3AFD, r30
   16226:	3e c0       	rjmp	.+124    	; 0x162a4 <free+0x118>
   16228:	d9 01       	movw	r26, r18
   1622a:	13 96       	adiw	r26, 0x03	; 3
   1622c:	fc 93       	st	X, r31
   1622e:	ee 93       	st	-X, r30
   16230:	12 97       	sbiw	r26, 0x02	; 2
   16232:	4d 91       	ld	r20, X+
   16234:	5d 91       	ld	r21, X+
   16236:	a4 0f       	add	r26, r20
   16238:	b5 1f       	adc	r27, r21
   1623a:	ea 17       	cp	r30, r26
   1623c:	fb 07       	cpc	r31, r27
   1623e:	79 f4       	brne	.+30     	; 0x1625e <free+0xd2>
   16240:	80 81       	ld	r24, Z
   16242:	91 81       	ldd	r25, Z+1	; 0x01
   16244:	84 0f       	add	r24, r20
   16246:	95 1f       	adc	r25, r21
   16248:	02 96       	adiw	r24, 0x02	; 2
   1624a:	d9 01       	movw	r26, r18
   1624c:	11 96       	adiw	r26, 0x01	; 1
   1624e:	9c 93       	st	X, r25
   16250:	8e 93       	st	-X, r24
   16252:	82 81       	ldd	r24, Z+2	; 0x02
   16254:	93 81       	ldd	r25, Z+3	; 0x03
   16256:	13 96       	adiw	r26, 0x03	; 3
   16258:	9c 93       	st	X, r25
   1625a:	8e 93       	st	-X, r24
   1625c:	12 97       	sbiw	r26, 0x02	; 2
   1625e:	e0 e0       	ldi	r30, 0x00	; 0
   16260:	f0 e0       	ldi	r31, 0x00	; 0
   16262:	8a 81       	ldd	r24, Y+2	; 0x02
   16264:	9b 81       	ldd	r25, Y+3	; 0x03
   16266:	00 97       	sbiw	r24, 0x00	; 0
   16268:	19 f0       	breq	.+6      	; 0x16270 <free+0xe4>
   1626a:	fe 01       	movw	r30, r28
   1626c:	ec 01       	movw	r28, r24
   1626e:	f9 cf       	rjmp	.-14     	; 0x16262 <free+0xd6>
   16270:	ce 01       	movw	r24, r28
   16272:	02 96       	adiw	r24, 0x02	; 2
   16274:	28 81       	ld	r18, Y
   16276:	39 81       	ldd	r19, Y+1	; 0x01
   16278:	82 0f       	add	r24, r18
   1627a:	93 1f       	adc	r25, r19
   1627c:	20 91 fb 3a 	lds	r18, 0x3AFB
   16280:	30 91 fc 3a 	lds	r19, 0x3AFC
   16284:	28 17       	cp	r18, r24
   16286:	39 07       	cpc	r19, r25
   16288:	69 f4       	brne	.+26     	; 0x162a4 <free+0x118>
   1628a:	30 97       	sbiw	r30, 0x00	; 0
   1628c:	29 f4       	brne	.+10     	; 0x16298 <free+0x10c>
   1628e:	10 92 fe 3a 	sts	0x3AFE, r1
   16292:	10 92 fd 3a 	sts	0x3AFD, r1
   16296:	02 c0       	rjmp	.+4      	; 0x1629c <free+0x110>
   16298:	13 82       	std	Z+3, r1	; 0x03
   1629a:	12 82       	std	Z+2, r1	; 0x02
   1629c:	d0 93 fc 3a 	sts	0x3AFC, r29
   162a0:	c0 93 fb 3a 	sts	0x3AFB, r28
   162a4:	df 91       	pop	r29
   162a6:	cf 91       	pop	r28
   162a8:	08 95       	ret

000162aa <realloc>:
   162aa:	6f 92       	push	r6
   162ac:	7f 92       	push	r7
   162ae:	8f 92       	push	r8
   162b0:	9f 92       	push	r9
   162b2:	af 92       	push	r10
   162b4:	bf 92       	push	r11
   162b6:	cf 92       	push	r12
   162b8:	df 92       	push	r13
   162ba:	ef 92       	push	r14
   162bc:	ff 92       	push	r15
   162be:	0f 93       	push	r16
   162c0:	1f 93       	push	r17
   162c2:	cf 93       	push	r28
   162c4:	df 93       	push	r29
   162c6:	ec 01       	movw	r28, r24
   162c8:	cb 01       	movw	r24, r22
   162ca:	20 97       	sbiw	r28, 0x00	; 0
   162cc:	79 f4       	brne	.+30     	; 0x162ec <realloc+0x42>
   162ce:	df 91       	pop	r29
   162d0:	cf 91       	pop	r28
   162d2:	1f 91       	pop	r17
   162d4:	0f 91       	pop	r16
   162d6:	ff 90       	pop	r15
   162d8:	ef 90       	pop	r14
   162da:	df 90       	pop	r13
   162dc:	cf 90       	pop	r12
   162de:	bf 90       	pop	r11
   162e0:	af 90       	pop	r10
   162e2:	9f 90       	pop	r9
   162e4:	8f 90       	pop	r8
   162e6:	7f 90       	pop	r7
   162e8:	6f 90       	pop	r6
   162ea:	b8 ce       	rjmp	.-656    	; 0x1605c <malloc>
   162ec:	fe 01       	movw	r30, r28
   162ee:	e6 0f       	add	r30, r22
   162f0:	f7 1f       	adc	r31, r23
   162f2:	9e 01       	movw	r18, r28
   162f4:	22 50       	subi	r18, 0x02	; 2
   162f6:	31 09       	sbc	r19, r1
   162f8:	e2 17       	cp	r30, r18
   162fa:	f3 07       	cpc	r31, r19
   162fc:	08 f4       	brcc	.+2      	; 0x16300 <realloc+0x56>
   162fe:	a8 c0       	rjmp	.+336    	; 0x16450 <realloc+0x1a6>
   16300:	d9 01       	movw	r26, r18
   16302:	0d 91       	ld	r16, X+
   16304:	1c 91       	ld	r17, X
   16306:	11 97       	sbiw	r26, 0x01	; 1
   16308:	06 17       	cp	r16, r22
   1630a:	17 07       	cpc	r17, r23
   1630c:	b0 f0       	brcs	.+44     	; 0x1633a <realloc+0x90>
   1630e:	05 30       	cpi	r16, 0x05	; 5
   16310:	11 05       	cpc	r17, r1
   16312:	08 f4       	brcc	.+2      	; 0x16316 <realloc+0x6c>
   16314:	9b c0       	rjmp	.+310    	; 0x1644c <realloc+0x1a2>
   16316:	a8 01       	movw	r20, r16
   16318:	44 50       	subi	r20, 0x04	; 4
   1631a:	51 09       	sbc	r21, r1
   1631c:	46 17       	cp	r20, r22
   1631e:	57 07       	cpc	r21, r23
   16320:	08 f4       	brcc	.+2      	; 0x16324 <realloc+0x7a>
   16322:	94 c0       	rjmp	.+296    	; 0x1644c <realloc+0x1a2>
   16324:	02 50       	subi	r16, 0x02	; 2
   16326:	11 09       	sbc	r17, r1
   16328:	06 1b       	sub	r16, r22
   1632a:	17 0b       	sbc	r17, r23
   1632c:	01 93       	st	Z+, r16
   1632e:	11 93       	st	Z+, r17
   16330:	6d 93       	st	X+, r22
   16332:	7c 93       	st	X, r23
   16334:	cf 01       	movw	r24, r30
   16336:	2a df       	rcall	.-428    	; 0x1618c <free>
   16338:	89 c0       	rjmp	.+274    	; 0x1644c <realloc+0x1a2>
   1633a:	5b 01       	movw	r10, r22
   1633c:	a0 1a       	sub	r10, r16
   1633e:	b1 0a       	sbc	r11, r17
   16340:	4e 01       	movw	r8, r28
   16342:	80 0e       	add	r8, r16
   16344:	91 1e       	adc	r9, r17
   16346:	a0 91 fd 3a 	lds	r26, 0x3AFD
   1634a:	b0 91 fe 3a 	lds	r27, 0x3AFE
   1634e:	61 2c       	mov	r6, r1
   16350:	71 2c       	mov	r7, r1
   16352:	60 e0       	ldi	r22, 0x00	; 0
   16354:	70 e0       	ldi	r23, 0x00	; 0
   16356:	10 97       	sbiw	r26, 0x00	; 0
   16358:	09 f4       	brne	.+2      	; 0x1635c <realloc+0xb2>
   1635a:	49 c0       	rjmp	.+146    	; 0x163ee <realloc+0x144>
   1635c:	a8 15       	cp	r26, r8
   1635e:	b9 05       	cpc	r27, r9
   16360:	c9 f5       	brne	.+114    	; 0x163d4 <realloc+0x12a>
   16362:	ed 90       	ld	r14, X+
   16364:	fc 90       	ld	r15, X
   16366:	11 97       	sbiw	r26, 0x01	; 1
   16368:	67 01       	movw	r12, r14
   1636a:	42 e0       	ldi	r20, 0x02	; 2
   1636c:	c4 0e       	add	r12, r20
   1636e:	d1 1c       	adc	r13, r1
   16370:	ca 14       	cp	r12, r10
   16372:	db 04       	cpc	r13, r11
   16374:	78 f1       	brcs	.+94     	; 0x163d4 <realloc+0x12a>
   16376:	47 01       	movw	r8, r14
   16378:	8a 18       	sub	r8, r10
   1637a:	9b 08       	sbc	r9, r11
   1637c:	64 01       	movw	r12, r8
   1637e:	42 e0       	ldi	r20, 0x02	; 2
   16380:	c4 0e       	add	r12, r20
   16382:	d1 1c       	adc	r13, r1
   16384:	12 96       	adiw	r26, 0x02	; 2
   16386:	bc 90       	ld	r11, X
   16388:	12 97       	sbiw	r26, 0x02	; 2
   1638a:	13 96       	adiw	r26, 0x03	; 3
   1638c:	ac 91       	ld	r26, X
   1638e:	b5 e0       	ldi	r27, 0x05	; 5
   16390:	cb 16       	cp	r12, r27
   16392:	d1 04       	cpc	r13, r1
   16394:	40 f0       	brcs	.+16     	; 0x163a6 <realloc+0xfc>
   16396:	b2 82       	std	Z+2, r11	; 0x02
   16398:	a3 83       	std	Z+3, r26	; 0x03
   1639a:	91 82       	std	Z+1, r9	; 0x01
   1639c:	80 82       	st	Z, r8
   1639e:	d9 01       	movw	r26, r18
   163a0:	8d 93       	st	X+, r24
   163a2:	9c 93       	st	X, r25
   163a4:	09 c0       	rjmp	.+18     	; 0x163b8 <realloc+0x10e>
   163a6:	0e 5f       	subi	r16, 0xFE	; 254
   163a8:	1f 4f       	sbci	r17, 0xFF	; 255
   163aa:	0e 0d       	add	r16, r14
   163ac:	1f 1d       	adc	r17, r15
   163ae:	f9 01       	movw	r30, r18
   163b0:	11 83       	std	Z+1, r17	; 0x01
   163b2:	00 83       	st	Z, r16
   163b4:	eb 2d       	mov	r30, r11
   163b6:	fa 2f       	mov	r31, r26
   163b8:	61 15       	cp	r22, r1
   163ba:	71 05       	cpc	r23, r1
   163bc:	31 f0       	breq	.+12     	; 0x163ca <realloc+0x120>
   163be:	db 01       	movw	r26, r22
   163c0:	13 96       	adiw	r26, 0x03	; 3
   163c2:	fc 93       	st	X, r31
   163c4:	ee 93       	st	-X, r30
   163c6:	12 97       	sbiw	r26, 0x02	; 2
   163c8:	41 c0       	rjmp	.+130    	; 0x1644c <realloc+0x1a2>
   163ca:	f0 93 fe 3a 	sts	0x3AFE, r31
   163ce:	e0 93 fd 3a 	sts	0x3AFD, r30
   163d2:	3c c0       	rjmp	.+120    	; 0x1644c <realloc+0x1a2>
   163d4:	6d 91       	ld	r22, X+
   163d6:	7c 91       	ld	r23, X
   163d8:	11 97       	sbiw	r26, 0x01	; 1
   163da:	66 16       	cp	r6, r22
   163dc:	77 06       	cpc	r7, r23
   163de:	08 f4       	brcc	.+2      	; 0x163e2 <realloc+0x138>
   163e0:	3b 01       	movw	r6, r22
   163e2:	bd 01       	movw	r22, r26
   163e4:	12 96       	adiw	r26, 0x02	; 2
   163e6:	0d 90       	ld	r0, X+
   163e8:	bc 91       	ld	r27, X
   163ea:	a0 2d       	mov	r26, r0
   163ec:	b4 cf       	rjmp	.-152    	; 0x16356 <realloc+0xac>
   163ee:	60 91 fb 3a 	lds	r22, 0x3AFB
   163f2:	70 91 fc 3a 	lds	r23, 0x3AFC
   163f6:	68 15       	cp	r22, r8
   163f8:	79 05       	cpc	r23, r9
   163fa:	e9 f4       	brne	.+58     	; 0x16436 <realloc+0x18c>
   163fc:	68 16       	cp	r6, r24
   163fe:	79 06       	cpc	r7, r25
   16400:	d0 f4       	brcc	.+52     	; 0x16436 <realloc+0x18c>
   16402:	40 91 3a 0c 	lds	r20, 0x0C3A
   16406:	50 91 3b 0c 	lds	r21, 0x0C3B
   1640a:	41 15       	cp	r20, r1
   1640c:	51 05       	cpc	r21, r1
   1640e:	41 f4       	brne	.+16     	; 0x16420 <realloc+0x176>
   16410:	4d b7       	in	r20, 0x3d	; 61
   16412:	5e b7       	in	r21, 0x3e	; 62
   16414:	60 91 3e 0c 	lds	r22, 0x0C3E
   16418:	70 91 3f 0c 	lds	r23, 0x0C3F
   1641c:	46 1b       	sub	r20, r22
   1641e:	57 0b       	sbc	r21, r23
   16420:	e4 17       	cp	r30, r20
   16422:	f5 07       	cpc	r31, r21
   16424:	a8 f4       	brcc	.+42     	; 0x16450 <realloc+0x1a6>
   16426:	f0 93 fc 3a 	sts	0x3AFC, r31
   1642a:	e0 93 fb 3a 	sts	0x3AFB, r30
   1642e:	f9 01       	movw	r30, r18
   16430:	91 83       	std	Z+1, r25	; 0x01
   16432:	80 83       	st	Z, r24
   16434:	0b c0       	rjmp	.+22     	; 0x1644c <realloc+0x1a2>
   16436:	12 de       	rcall	.-988    	; 0x1605c <malloc>
   16438:	7c 01       	movw	r14, r24
   1643a:	00 97       	sbiw	r24, 0x00	; 0
   1643c:	49 f0       	breq	.+18     	; 0x16450 <realloc+0x1a6>
   1643e:	a8 01       	movw	r20, r16
   16440:	be 01       	movw	r22, r28
   16442:	20 d3       	rcall	.+1600   	; 0x16a84 <memcpy>
   16444:	ce 01       	movw	r24, r28
   16446:	a2 de       	rcall	.-700    	; 0x1618c <free>
   16448:	c7 01       	movw	r24, r14
   1644a:	04 c0       	rjmp	.+8      	; 0x16454 <realloc+0x1aa>
   1644c:	ce 01       	movw	r24, r28
   1644e:	02 c0       	rjmp	.+4      	; 0x16454 <realloc+0x1aa>
   16450:	80 e0       	ldi	r24, 0x00	; 0
   16452:	90 e0       	ldi	r25, 0x00	; 0
   16454:	df 91       	pop	r29
   16456:	cf 91       	pop	r28
   16458:	1f 91       	pop	r17
   1645a:	0f 91       	pop	r16
   1645c:	ff 90       	pop	r15
   1645e:	ef 90       	pop	r14
   16460:	df 90       	pop	r13
   16462:	cf 90       	pop	r12
   16464:	bf 90       	pop	r11
   16466:	af 90       	pop	r10
   16468:	9f 90       	pop	r9
   1646a:	8f 90       	pop	r8
   1646c:	7f 90       	pop	r7
   1646e:	6f 90       	pop	r6
   16470:	08 95       	ret

00016472 <__mulsi3>:
   16472:	db 01       	movw	r26, r22
   16474:	8f 93       	push	r24
   16476:	9f 93       	push	r25
   16478:	4f d0       	rcall	.+158    	; 0x16518 <__muluhisi3>
   1647a:	bf 91       	pop	r27
   1647c:	af 91       	pop	r26
   1647e:	a2 9f       	mul	r26, r18
   16480:	80 0d       	add	r24, r0
   16482:	91 1d       	adc	r25, r1
   16484:	a3 9f       	mul	r26, r19
   16486:	90 0d       	add	r25, r0
   16488:	b2 9f       	mul	r27, r18
   1648a:	90 0d       	add	r25, r0
   1648c:	11 24       	eor	r1, r1
   1648e:	08 95       	ret

00016490 <__udivmodsi4>:
   16490:	a1 e2       	ldi	r26, 0x21	; 33
   16492:	1a 2e       	mov	r1, r26
   16494:	aa 1b       	sub	r26, r26
   16496:	bb 1b       	sub	r27, r27
   16498:	fd 01       	movw	r30, r26
   1649a:	0d c0       	rjmp	.+26     	; 0x164b6 <__udivmodsi4_ep>

0001649c <__udivmodsi4_loop>:
   1649c:	aa 1f       	adc	r26, r26
   1649e:	bb 1f       	adc	r27, r27
   164a0:	ee 1f       	adc	r30, r30
   164a2:	ff 1f       	adc	r31, r31
   164a4:	a2 17       	cp	r26, r18
   164a6:	b3 07       	cpc	r27, r19
   164a8:	e4 07       	cpc	r30, r20
   164aa:	f5 07       	cpc	r31, r21
   164ac:	20 f0       	brcs	.+8      	; 0x164b6 <__udivmodsi4_ep>
   164ae:	a2 1b       	sub	r26, r18
   164b0:	b3 0b       	sbc	r27, r19
   164b2:	e4 0b       	sbc	r30, r20
   164b4:	f5 0b       	sbc	r31, r21

000164b6 <__udivmodsi4_ep>:
   164b6:	66 1f       	adc	r22, r22
   164b8:	77 1f       	adc	r23, r23
   164ba:	88 1f       	adc	r24, r24
   164bc:	99 1f       	adc	r25, r25
   164be:	1a 94       	dec	r1
   164c0:	69 f7       	brne	.-38     	; 0x1649c <__udivmodsi4_loop>
   164c2:	60 95       	com	r22
   164c4:	70 95       	com	r23
   164c6:	80 95       	com	r24
   164c8:	90 95       	com	r25
   164ca:	9b 01       	movw	r18, r22
   164cc:	ac 01       	movw	r20, r24
   164ce:	bd 01       	movw	r22, r26
   164d0:	cf 01       	movw	r24, r30
   164d2:	08 95       	ret

000164d4 <__divmodsi4>:
   164d4:	05 2e       	mov	r0, r21
   164d6:	97 fb       	bst	r25, 7
   164d8:	16 f4       	brtc	.+4      	; 0x164de <__divmodsi4+0xa>
   164da:	00 94       	com	r0
   164dc:	0f d0       	rcall	.+30     	; 0x164fc <__negsi2>
   164de:	57 fd       	sbrc	r21, 7
   164e0:	05 d0       	rcall	.+10     	; 0x164ec <__divmodsi4_neg2>
   164e2:	d6 df       	rcall	.-84     	; 0x16490 <__udivmodsi4>
   164e4:	07 fc       	sbrc	r0, 7
   164e6:	02 d0       	rcall	.+4      	; 0x164ec <__divmodsi4_neg2>
   164e8:	46 f4       	brtc	.+16     	; 0x164fa <__divmodsi4_exit>
   164ea:	08 c0       	rjmp	.+16     	; 0x164fc <__negsi2>

000164ec <__divmodsi4_neg2>:
   164ec:	50 95       	com	r21
   164ee:	40 95       	com	r20
   164f0:	30 95       	com	r19
   164f2:	21 95       	neg	r18
   164f4:	3f 4f       	sbci	r19, 0xFF	; 255
   164f6:	4f 4f       	sbci	r20, 0xFF	; 255
   164f8:	5f 4f       	sbci	r21, 0xFF	; 255

000164fa <__divmodsi4_exit>:
   164fa:	08 95       	ret

000164fc <__negsi2>:
   164fc:	90 95       	com	r25
   164fe:	80 95       	com	r24
   16500:	70 95       	com	r23
   16502:	61 95       	neg	r22
   16504:	7f 4f       	sbci	r23, 0xFF	; 255
   16506:	8f 4f       	sbci	r24, 0xFF	; 255
   16508:	9f 4f       	sbci	r25, 0xFF	; 255
   1650a:	08 95       	ret

0001650c <__tablejump2__>:
   1650c:	ee 0f       	add	r30, r30
   1650e:	ff 1f       	adc	r31, r31

00016510 <__tablejump__>:
   16510:	05 90       	lpm	r0, Z+
   16512:	f4 91       	lpm	r31, Z
   16514:	e0 2d       	mov	r30, r0
   16516:	19 94       	eijmp

00016518 <__muluhisi3>:
   16518:	0d d0       	rcall	.+26     	; 0x16534 <__umulhisi3>
   1651a:	a5 9f       	mul	r26, r21
   1651c:	90 0d       	add	r25, r0
   1651e:	b4 9f       	mul	r27, r20
   16520:	90 0d       	add	r25, r0
   16522:	a4 9f       	mul	r26, r20
   16524:	80 0d       	add	r24, r0
   16526:	91 1d       	adc	r25, r1
   16528:	11 24       	eor	r1, r1
   1652a:	08 95       	ret

0001652c <__tablejump_elpm__>:
   1652c:	07 90       	elpm	r0, Z+
   1652e:	f6 91       	elpm	r31, Z
   16530:	e0 2d       	mov	r30, r0
   16532:	19 94       	eijmp

00016534 <__umulhisi3>:
   16534:	a2 9f       	mul	r26, r18
   16536:	b0 01       	movw	r22, r0
   16538:	b3 9f       	mul	r27, r19
   1653a:	c0 01       	movw	r24, r0
   1653c:	a3 9f       	mul	r26, r19
   1653e:	70 0d       	add	r23, r0
   16540:	81 1d       	adc	r24, r1
   16542:	11 24       	eor	r1, r1
   16544:	91 1d       	adc	r25, r1
   16546:	b2 9f       	mul	r27, r18
   16548:	70 0d       	add	r23, r0
   1654a:	81 1d       	adc	r24, r1
   1654c:	11 24       	eor	r1, r1
   1654e:	91 1d       	adc	r25, r1
   16550:	08 95       	ret

00016552 <do_rand>:
   16552:	8f 92       	push	r8
   16554:	9f 92       	push	r9
   16556:	af 92       	push	r10
   16558:	bf 92       	push	r11
   1655a:	cf 92       	push	r12
   1655c:	df 92       	push	r13
   1655e:	ef 92       	push	r14
   16560:	ff 92       	push	r15
   16562:	cf 93       	push	r28
   16564:	df 93       	push	r29
   16566:	ec 01       	movw	r28, r24
   16568:	68 81       	ld	r22, Y
   1656a:	79 81       	ldd	r23, Y+1	; 0x01
   1656c:	8a 81       	ldd	r24, Y+2	; 0x02
   1656e:	9b 81       	ldd	r25, Y+3	; 0x03
   16570:	61 15       	cp	r22, r1
   16572:	71 05       	cpc	r23, r1
   16574:	81 05       	cpc	r24, r1
   16576:	91 05       	cpc	r25, r1
   16578:	21 f4       	brne	.+8      	; 0x16582 <do_rand+0x30>
   1657a:	64 e2       	ldi	r22, 0x24	; 36
   1657c:	79 ed       	ldi	r23, 0xD9	; 217
   1657e:	8b e5       	ldi	r24, 0x5B	; 91
   16580:	97 e0       	ldi	r25, 0x07	; 7
   16582:	2d e1       	ldi	r18, 0x1D	; 29
   16584:	33 ef       	ldi	r19, 0xF3	; 243
   16586:	41 e0       	ldi	r20, 0x01	; 1
   16588:	50 e0       	ldi	r21, 0x00	; 0
   1658a:	a4 df       	rcall	.-184    	; 0x164d4 <__divmodsi4>
   1658c:	49 01       	movw	r8, r18
   1658e:	5a 01       	movw	r10, r20
   16590:	9b 01       	movw	r18, r22
   16592:	ac 01       	movw	r20, r24
   16594:	a7 ea       	ldi	r26, 0xA7	; 167
   16596:	b1 e4       	ldi	r27, 0x41	; 65
   16598:	bf df       	rcall	.-130    	; 0x16518 <__muluhisi3>
   1659a:	6b 01       	movw	r12, r22
   1659c:	7c 01       	movw	r14, r24
   1659e:	ac ee       	ldi	r26, 0xEC	; 236
   165a0:	b4 ef       	ldi	r27, 0xF4	; 244
   165a2:	a5 01       	movw	r20, r10
   165a4:	94 01       	movw	r18, r8
   165a6:	d7 d6       	rcall	.+3502   	; 0x17356 <__mulohisi3>
   165a8:	c6 0e       	add	r12, r22
   165aa:	d7 1e       	adc	r13, r23
   165ac:	e8 1e       	adc	r14, r24
   165ae:	f9 1e       	adc	r15, r25
   165b0:	f7 fe       	sbrs	r15, 7
   165b2:	06 c0       	rjmp	.+12     	; 0x165c0 <do_rand+0x6e>
   165b4:	81 e0       	ldi	r24, 0x01	; 1
   165b6:	c8 1a       	sub	r12, r24
   165b8:	d1 08       	sbc	r13, r1
   165ba:	e1 08       	sbc	r14, r1
   165bc:	80 e8       	ldi	r24, 0x80	; 128
   165be:	f8 0a       	sbc	r15, r24
   165c0:	c8 82       	st	Y, r12
   165c2:	d9 82       	std	Y+1, r13	; 0x01
   165c4:	ea 82       	std	Y+2, r14	; 0x02
   165c6:	fb 82       	std	Y+3, r15	; 0x03
   165c8:	c6 01       	movw	r24, r12
   165ca:	9f 77       	andi	r25, 0x7F	; 127
   165cc:	df 91       	pop	r29
   165ce:	cf 91       	pop	r28
   165d0:	ff 90       	pop	r15
   165d2:	ef 90       	pop	r14
   165d4:	df 90       	pop	r13
   165d6:	cf 90       	pop	r12
   165d8:	bf 90       	pop	r11
   165da:	af 90       	pop	r10
   165dc:	9f 90       	pop	r9
   165de:	8f 90       	pop	r8
   165e0:	08 95       	ret

000165e2 <rand_r>:
   165e2:	b7 cf       	rjmp	.-146    	; 0x16552 <do_rand>

000165e4 <rand>:
   165e4:	80 e0       	ldi	r24, 0x00	; 0
   165e6:	92 e0       	ldi	r25, 0x02	; 2
   165e8:	b4 cf       	rjmp	.-152    	; 0x16552 <do_rand>

000165ea <srand>:
   165ea:	a0 e0       	ldi	r26, 0x00	; 0
   165ec:	b0 e0       	ldi	r27, 0x00	; 0
   165ee:	80 93 00 02 	sts	0x0200, r24
   165f2:	90 93 01 02 	sts	0x0201, r25
   165f6:	a0 93 02 02 	sts	0x0202, r26
   165fa:	b0 93 03 02 	sts	0x0203, r27
   165fe:	08 95       	ret

00016600 <do_random>:
   16600:	8f 92       	push	r8
   16602:	9f 92       	push	r9
   16604:	af 92       	push	r10
   16606:	bf 92       	push	r11
   16608:	cf 92       	push	r12
   1660a:	df 92       	push	r13
   1660c:	ef 92       	push	r14
   1660e:	ff 92       	push	r15
   16610:	cf 93       	push	r28
   16612:	df 93       	push	r29
   16614:	ec 01       	movw	r28, r24
   16616:	68 81       	ld	r22, Y
   16618:	79 81       	ldd	r23, Y+1	; 0x01
   1661a:	8a 81       	ldd	r24, Y+2	; 0x02
   1661c:	9b 81       	ldd	r25, Y+3	; 0x03
   1661e:	61 15       	cp	r22, r1
   16620:	71 05       	cpc	r23, r1
   16622:	81 05       	cpc	r24, r1
   16624:	91 05       	cpc	r25, r1
   16626:	21 f4       	brne	.+8      	; 0x16630 <do_random+0x30>
   16628:	64 e2       	ldi	r22, 0x24	; 36
   1662a:	79 ed       	ldi	r23, 0xD9	; 217
   1662c:	8b e5       	ldi	r24, 0x5B	; 91
   1662e:	97 e0       	ldi	r25, 0x07	; 7
   16630:	2d e1       	ldi	r18, 0x1D	; 29
   16632:	33 ef       	ldi	r19, 0xF3	; 243
   16634:	41 e0       	ldi	r20, 0x01	; 1
   16636:	50 e0       	ldi	r21, 0x00	; 0
   16638:	4d df       	rcall	.-358    	; 0x164d4 <__divmodsi4>
   1663a:	49 01       	movw	r8, r18
   1663c:	5a 01       	movw	r10, r20
   1663e:	9b 01       	movw	r18, r22
   16640:	ac 01       	movw	r20, r24
   16642:	a7 ea       	ldi	r26, 0xA7	; 167
   16644:	b1 e4       	ldi	r27, 0x41	; 65
   16646:	68 df       	rcall	.-304    	; 0x16518 <__muluhisi3>
   16648:	6b 01       	movw	r12, r22
   1664a:	7c 01       	movw	r14, r24
   1664c:	ac ee       	ldi	r26, 0xEC	; 236
   1664e:	b4 ef       	ldi	r27, 0xF4	; 244
   16650:	a5 01       	movw	r20, r10
   16652:	94 01       	movw	r18, r8
   16654:	80 d6       	rcall	.+3328   	; 0x17356 <__mulohisi3>
   16656:	c6 0e       	add	r12, r22
   16658:	d7 1e       	adc	r13, r23
   1665a:	e8 1e       	adc	r14, r24
   1665c:	f9 1e       	adc	r15, r25
   1665e:	f7 fe       	sbrs	r15, 7
   16660:	06 c0       	rjmp	.+12     	; 0x1666e <do_random+0x6e>
   16662:	81 e0       	ldi	r24, 0x01	; 1
   16664:	c8 1a       	sub	r12, r24
   16666:	d1 08       	sbc	r13, r1
   16668:	e1 08       	sbc	r14, r1
   1666a:	80 e8       	ldi	r24, 0x80	; 128
   1666c:	f8 0a       	sbc	r15, r24
   1666e:	c8 82       	st	Y, r12
   16670:	d9 82       	std	Y+1, r13	; 0x01
   16672:	ea 82       	std	Y+2, r14	; 0x02
   16674:	fb 82       	std	Y+3, r15	; 0x03
   16676:	c7 01       	movw	r24, r14
   16678:	b6 01       	movw	r22, r12
   1667a:	9f 77       	andi	r25, 0x7F	; 127
   1667c:	df 91       	pop	r29
   1667e:	cf 91       	pop	r28
   16680:	ff 90       	pop	r15
   16682:	ef 90       	pop	r14
   16684:	df 90       	pop	r13
   16686:	cf 90       	pop	r12
   16688:	bf 90       	pop	r11
   1668a:	af 90       	pop	r10
   1668c:	9f 90       	pop	r9
   1668e:	8f 90       	pop	r8
   16690:	08 95       	ret

00016692 <random_r>:
   16692:	b6 cf       	rjmp	.-148    	; 0x16600 <do_random>

00016694 <random>:
   16694:	84 e0       	ldi	r24, 0x04	; 4
   16696:	92 e0       	ldi	r25, 0x02	; 2
   16698:	b3 cf       	rjmp	.-154    	; 0x16600 <do_random>

0001669a <srandom>:
   1669a:	60 93 04 02 	sts	0x0204, r22
   1669e:	70 93 05 02 	sts	0x0205, r23
   166a2:	80 93 06 02 	sts	0x0206, r24
   166a6:	90 93 07 02 	sts	0x0207, r25
   166aa:	08 95       	ret

000166ac <strtoul>:
   166ac:	2f 92       	push	r2
   166ae:	3f 92       	push	r3
   166b0:	5f 92       	push	r5
   166b2:	6f 92       	push	r6
   166b4:	7f 92       	push	r7
   166b6:	8f 92       	push	r8
   166b8:	9f 92       	push	r9
   166ba:	af 92       	push	r10
   166bc:	bf 92       	push	r11
   166be:	cf 92       	push	r12
   166c0:	df 92       	push	r13
   166c2:	ef 92       	push	r14
   166c4:	ff 92       	push	r15
   166c6:	0f 93       	push	r16
   166c8:	1f 93       	push	r17
   166ca:	cf 93       	push	r28
   166cc:	df 93       	push	r29
   166ce:	8b 01       	movw	r16, r22
   166d0:	ea 01       	movw	r28, r20
   166d2:	61 15       	cp	r22, r1
   166d4:	71 05       	cpc	r23, r1
   166d6:	21 f0       	breq	.+8      	; 0x166e0 <strtoul+0x34>
   166d8:	db 01       	movw	r26, r22
   166da:	8c 93       	st	X, r24
   166dc:	11 96       	adiw	r26, 0x01	; 1
   166de:	9c 93       	st	X, r25
   166e0:	20 97       	sbiw	r28, 0x00	; 0
   166e2:	39 f0       	breq	.+14     	; 0x166f2 <strtoul+0x46>
   166e4:	9e 01       	movw	r18, r28
   166e6:	22 50       	subi	r18, 0x02	; 2
   166e8:	31 09       	sbc	r19, r1
   166ea:	23 32       	cpi	r18, 0x23	; 35
   166ec:	31 05       	cpc	r19, r1
   166ee:	08 f0       	brcs	.+2      	; 0x166f2 <strtoul+0x46>
   166f0:	d5 c0       	rjmp	.+426    	; 0x1689c <strtoul+0x1f0>
   166f2:	7c 01       	movw	r14, r24
   166f4:	67 01       	movw	r12, r14
   166f6:	bf ef       	ldi	r27, 0xFF	; 255
   166f8:	cb 1a       	sub	r12, r27
   166fa:	db 0a       	sbc	r13, r27
   166fc:	56 01       	movw	r10, r12
   166fe:	f7 01       	movw	r30, r14
   16700:	60 80       	ld	r6, Z
   16702:	86 2d       	mov	r24, r6
   16704:	90 e0       	ldi	r25, 0x00	; 0
   16706:	6e d1       	rcall	.+732    	; 0x169e4 <isspace>
   16708:	89 2b       	or	r24, r25
   1670a:	11 f0       	breq	.+4      	; 0x16710 <strtoul+0x64>
   1670c:	76 01       	movw	r14, r12
   1670e:	f2 cf       	rjmp	.-28     	; 0x166f4 <strtoul+0x48>
   16710:	fd e2       	ldi	r31, 0x2D	; 45
   16712:	6f 12       	cpse	r6, r31
   16714:	0a c0       	rjmp	.+20     	; 0x1672a <strtoul+0x7e>
   16716:	57 01       	movw	r10, r14
   16718:	82 e0       	ldi	r24, 0x02	; 2
   1671a:	a8 0e       	add	r10, r24
   1671c:	b1 1c       	adc	r11, r1
   1671e:	d7 01       	movw	r26, r14
   16720:	11 96       	adiw	r26, 0x01	; 1
   16722:	6c 90       	ld	r6, X
   16724:	77 24       	eor	r7, r7
   16726:	73 94       	inc	r7
   16728:	0b c0       	rjmp	.+22     	; 0x16740 <strtoul+0x94>
   1672a:	bb e2       	ldi	r27, 0x2B	; 43
   1672c:	6b 12       	cpse	r6, r27
   1672e:	07 c0       	rjmp	.+14     	; 0x1673e <strtoul+0x92>
   16730:	57 01       	movw	r10, r14
   16732:	e2 e0       	ldi	r30, 0x02	; 2
   16734:	ae 0e       	add	r10, r30
   16736:	b1 1c       	adc	r11, r1
   16738:	d7 01       	movw	r26, r14
   1673a:	11 96       	adiw	r26, 0x01	; 1
   1673c:	6c 90       	ld	r6, X
   1673e:	71 2c       	mov	r7, r1
   16740:	ce 01       	movw	r24, r28
   16742:	8f 7e       	andi	r24, 0xEF	; 239
   16744:	89 2b       	or	r24, r25
   16746:	89 f4       	brne	.+34     	; 0x1676a <strtoul+0xbe>
   16748:	b0 e3       	ldi	r27, 0x30	; 48
   1674a:	6b 12       	cpse	r6, r27
   1674c:	36 c0       	rjmp	.+108    	; 0x167ba <strtoul+0x10e>
   1674e:	f5 01       	movw	r30, r10
   16750:	80 81       	ld	r24, Z
   16752:	8f 7d       	andi	r24, 0xDF	; 223
   16754:	88 35       	cpi	r24, 0x58	; 88
   16756:	d1 f4       	brne	.+52     	; 0x1678c <strtoul+0xe0>
   16758:	61 80       	ldd	r6, Z+1	; 0x01
   1675a:	f2 e0       	ldi	r31, 0x02	; 2
   1675c:	af 0e       	add	r10, r31
   1675e:	b1 1c       	adc	r11, r1
   16760:	87 2d       	mov	r24, r7
   16762:	82 60       	ori	r24, 0x02	; 2
   16764:	78 2e       	mov	r7, r24
   16766:	c0 e1       	ldi	r28, 0x10	; 16
   16768:	d0 e0       	ldi	r29, 0x00	; 0
   1676a:	ca 30       	cpi	r28, 0x0A	; 10
   1676c:	d1 05       	cpc	r29, r1
   1676e:	49 f1       	breq	.+82     	; 0x167c2 <strtoul+0x116>
   16770:	c0 31       	cpi	r28, 0x10	; 16
   16772:	d1 05       	cpc	r29, r1
   16774:	21 f0       	breq	.+8      	; 0x1677e <strtoul+0xd2>
   16776:	c8 30       	cpi	r28, 0x08	; 8
   16778:	d1 05       	cpc	r29, r1
   1677a:	99 f4       	brne	.+38     	; 0x167a2 <strtoul+0xf6>
   1677c:	09 c0       	rjmp	.+18     	; 0x16790 <strtoul+0xe4>
   1677e:	cc 24       	eor	r12, r12
   16780:	ca 94       	dec	r12
   16782:	dc 2c       	mov	r13, r12
   16784:	ec 2c       	mov	r14, r12
   16786:	af e0       	ldi	r26, 0x0F	; 15
   16788:	fa 2e       	mov	r15, r26
   1678a:	21 c0       	rjmp	.+66     	; 0x167ce <strtoul+0x122>
   1678c:	20 97       	sbiw	r28, 0x00	; 0
   1678e:	69 f7       	brne	.-38     	; 0x1676a <strtoul+0xbe>
   16790:	c8 e0       	ldi	r28, 0x08	; 8
   16792:	d0 e0       	ldi	r29, 0x00	; 0
   16794:	cc 24       	eor	r12, r12
   16796:	ca 94       	dec	r12
   16798:	dc 2c       	mov	r13, r12
   1679a:	ec 2c       	mov	r14, r12
   1679c:	ff e1       	ldi	r31, 0x1F	; 31
   1679e:	ff 2e       	mov	r15, r31
   167a0:	16 c0       	rjmp	.+44     	; 0x167ce <strtoul+0x122>
   167a2:	6f ef       	ldi	r22, 0xFF	; 255
   167a4:	7f ef       	ldi	r23, 0xFF	; 255
   167a6:	cb 01       	movw	r24, r22
   167a8:	9e 01       	movw	r18, r28
   167aa:	44 27       	eor	r20, r20
   167ac:	37 fd       	sbrc	r19, 7
   167ae:	40 95       	com	r20
   167b0:	54 2f       	mov	r21, r20
   167b2:	6e de       	rcall	.-804    	; 0x16490 <__udivmodsi4>
   167b4:	69 01       	movw	r12, r18
   167b6:	7a 01       	movw	r14, r20
   167b8:	0a c0       	rjmp	.+20     	; 0x167ce <strtoul+0x122>
   167ba:	20 97       	sbiw	r28, 0x00	; 0
   167bc:	b1 f6       	brne	.-84     	; 0x1676a <strtoul+0xbe>
   167be:	ca e0       	ldi	r28, 0x0A	; 10
   167c0:	d0 e0       	ldi	r29, 0x00	; 0
   167c2:	e9 e9       	ldi	r30, 0x99	; 153
   167c4:	ce 2e       	mov	r12, r30
   167c6:	dc 2c       	mov	r13, r12
   167c8:	ec 2c       	mov	r14, r12
   167ca:	e9 e1       	ldi	r30, 0x19	; 25
   167cc:	fe 2e       	mov	r15, r30
   167ce:	f5 01       	movw	r30, r10
   167d0:	60 e0       	ldi	r22, 0x00	; 0
   167d2:	20 e0       	ldi	r18, 0x00	; 0
   167d4:	30 e0       	ldi	r19, 0x00	; 0
   167d6:	a9 01       	movw	r20, r18
   167d8:	4e 01       	movw	r8, r28
   167da:	aa 24       	eor	r10, r10
   167dc:	97 fc       	sbrc	r9, 7
   167de:	a0 94       	com	r10
   167e0:	ba 2c       	mov	r11, r10
   167e2:	1f 01       	movw	r2, r30
   167e4:	70 ed       	ldi	r23, 0xD0	; 208
   167e6:	57 2e       	mov	r5, r23
   167e8:	56 0c       	add	r5, r6
   167ea:	a9 e0       	ldi	r26, 0x09	; 9
   167ec:	a5 15       	cp	r26, r5
   167ee:	70 f4       	brcc	.+28     	; 0x1680c <strtoul+0x160>
   167f0:	8f eb       	ldi	r24, 0xBF	; 191
   167f2:	86 0d       	add	r24, r6
   167f4:	8a 31       	cpi	r24, 0x1A	; 26
   167f6:	18 f4       	brcc	.+6      	; 0x167fe <strtoul+0x152>
   167f8:	99 ec       	ldi	r25, 0xC9	; 201
   167fa:	59 2e       	mov	r5, r25
   167fc:	06 c0       	rjmp	.+12     	; 0x1680a <strtoul+0x15e>
   167fe:	8f e9       	ldi	r24, 0x9F	; 159
   16800:	86 0d       	add	r24, r6
   16802:	8a 31       	cpi	r24, 0x1A	; 26
   16804:	40 f5       	brcc	.+80     	; 0x16856 <strtoul+0x1aa>
   16806:	89 ea       	ldi	r24, 0xA9	; 169
   16808:	58 2e       	mov	r5, r24
   1680a:	56 0c       	add	r5, r6
   1680c:	85 2d       	mov	r24, r5
   1680e:	90 e0       	ldi	r25, 0x00	; 0
   16810:	8c 17       	cp	r24, r28
   16812:	9d 07       	cpc	r25, r29
   16814:	04 f5       	brge	.+64     	; 0x16856 <strtoul+0x1aa>
   16816:	6f 3f       	cpi	r22, 0xFF	; 255
   16818:	d1 f0       	breq	.+52     	; 0x1684e <strtoul+0x1a2>
   1681a:	c2 16       	cp	r12, r18
   1681c:	d3 06       	cpc	r13, r19
   1681e:	e4 06       	cpc	r14, r20
   16820:	f5 06       	cpc	r15, r21
   16822:	90 f0       	brcs	.+36     	; 0x16848 <strtoul+0x19c>
   16824:	c5 01       	movw	r24, r10
   16826:	b4 01       	movw	r22, r8
   16828:	24 de       	rcall	.-952    	; 0x16472 <__mulsi3>
   1682a:	9b 01       	movw	r18, r22
   1682c:	ac 01       	movw	r20, r24
   1682e:	85 2d       	mov	r24, r5
   16830:	90 e0       	ldi	r25, 0x00	; 0
   16832:	a0 e0       	ldi	r26, 0x00	; 0
   16834:	b0 e0       	ldi	r27, 0x00	; 0
   16836:	28 0f       	add	r18, r24
   16838:	39 1f       	adc	r19, r25
   1683a:	4a 1f       	adc	r20, r26
   1683c:	5b 1f       	adc	r21, r27
   1683e:	28 17       	cp	r18, r24
   16840:	39 07       	cpc	r19, r25
   16842:	4a 07       	cpc	r20, r26
   16844:	5b 07       	cpc	r21, r27
   16846:	10 f4       	brcc	.+4      	; 0x1684c <strtoul+0x1a0>
   16848:	6f ef       	ldi	r22, 0xFF	; 255
   1684a:	01 c0       	rjmp	.+2      	; 0x1684e <strtoul+0x1a2>
   1684c:	61 e0       	ldi	r22, 0x01	; 1
   1684e:	31 96       	adiw	r30, 0x01	; 1
   16850:	d1 01       	movw	r26, r2
   16852:	6c 90       	ld	r6, X
   16854:	c6 cf       	rjmp	.-116    	; 0x167e2 <strtoul+0x136>
   16856:	01 15       	cp	r16, r1
   16858:	11 05       	cpc	r17, r1
   1685a:	51 f0       	breq	.+20     	; 0x16870 <strtoul+0x1c4>
   1685c:	66 23       	and	r22, r22
   1685e:	11 f0       	breq	.+4      	; 0x16864 <strtoul+0x1b8>
   16860:	31 97       	sbiw	r30, 0x01	; 1
   16862:	03 c0       	rjmp	.+6      	; 0x1686a <strtoul+0x1be>
   16864:	71 fe       	sbrs	r7, 1
   16866:	04 c0       	rjmp	.+8      	; 0x16870 <strtoul+0x1c4>
   16868:	32 97       	sbiw	r30, 0x02	; 2
   1686a:	d8 01       	movw	r26, r16
   1686c:	ed 93       	st	X+, r30
   1686e:	fc 93       	st	X, r31
   16870:	70 fe       	sbrs	r7, 0
   16872:	07 c0       	rjmp	.+14     	; 0x16882 <strtoul+0x1d6>
   16874:	50 95       	com	r21
   16876:	40 95       	com	r20
   16878:	30 95       	com	r19
   1687a:	21 95       	neg	r18
   1687c:	3f 4f       	sbci	r19, 0xFF	; 255
   1687e:	4f 4f       	sbci	r20, 0xFF	; 255
   16880:	5f 4f       	sbci	r21, 0xFF	; 255
   16882:	67 ff       	sbrs	r22, 7
   16884:	10 c0       	rjmp	.+32     	; 0x168a6 <strtoul+0x1fa>
   16886:	82 e2       	ldi	r24, 0x22	; 34
   16888:	90 e0       	ldi	r25, 0x00	; 0
   1688a:	90 93 00 3b 	sts	0x3B00, r25
   1688e:	80 93 ff 3a 	sts	0x3AFF, r24
   16892:	6f ef       	ldi	r22, 0xFF	; 255
   16894:	7f ef       	ldi	r23, 0xFF	; 255
   16896:	8f ef       	ldi	r24, 0xFF	; 255
   16898:	9f ef       	ldi	r25, 0xFF	; 255
   1689a:	07 c0       	rjmp	.+14     	; 0x168aa <strtoul+0x1fe>
   1689c:	60 e0       	ldi	r22, 0x00	; 0
   1689e:	70 e0       	ldi	r23, 0x00	; 0
   168a0:	80 e0       	ldi	r24, 0x00	; 0
   168a2:	90 e0       	ldi	r25, 0x00	; 0
   168a4:	02 c0       	rjmp	.+4      	; 0x168aa <strtoul+0x1fe>
   168a6:	b9 01       	movw	r22, r18
   168a8:	ca 01       	movw	r24, r20
   168aa:	df 91       	pop	r29
   168ac:	cf 91       	pop	r28
   168ae:	1f 91       	pop	r17
   168b0:	0f 91       	pop	r16
   168b2:	ff 90       	pop	r15
   168b4:	ef 90       	pop	r14
   168b6:	df 90       	pop	r13
   168b8:	cf 90       	pop	r12
   168ba:	bf 90       	pop	r11
   168bc:	af 90       	pop	r10
   168be:	9f 90       	pop	r9
   168c0:	8f 90       	pop	r8
   168c2:	7f 90       	pop	r7
   168c4:	6f 90       	pop	r6
   168c6:	5f 90       	pop	r5
   168c8:	3f 90       	pop	r3
   168ca:	2f 90       	pop	r2
   168cc:	08 95       	ret

000168ce <atoi>:
   168ce:	fc 01       	movw	r30, r24
   168d0:	88 27       	eor	r24, r24
   168d2:	99 27       	eor	r25, r25
   168d4:	e8 94       	clt
   168d6:	21 91       	ld	r18, Z+
   168d8:	20 32       	cpi	r18, 0x20	; 32
   168da:	e9 f3       	breq	.-6      	; 0x168d6 <atoi+0x8>
   168dc:	29 30       	cpi	r18, 0x09	; 9
   168de:	10 f0       	brcs	.+4      	; 0x168e4 <atoi+0x16>
   168e0:	2e 30       	cpi	r18, 0x0E	; 14
   168e2:	c8 f3       	brcs	.-14     	; 0x168d6 <atoi+0x8>
   168e4:	2b 32       	cpi	r18, 0x2B	; 43
   168e6:	39 f0       	breq	.+14     	; 0x168f6 <atoi+0x28>
   168e8:	2d 32       	cpi	r18, 0x2D	; 45
   168ea:	31 f4       	brne	.+12     	; 0x168f8 <atoi+0x2a>
   168ec:	68 94       	set
   168ee:	03 c0       	rjmp	.+6      	; 0x168f6 <atoi+0x28>
   168f0:	4e d1       	rcall	.+668    	; 0x16b8e <__mulhi_const_10>
   168f2:	82 0f       	add	r24, r18
   168f4:	91 1d       	adc	r25, r1
   168f6:	21 91       	ld	r18, Z+
   168f8:	20 53       	subi	r18, 0x30	; 48
   168fa:	2a 30       	cpi	r18, 0x0A	; 10
   168fc:	c8 f3       	brcs	.-14     	; 0x168f0 <atoi+0x22>
   168fe:	1e f4       	brtc	.+6      	; 0x16906 <atoi+0x38>
   16900:	90 95       	com	r25
   16902:	81 95       	neg	r24
   16904:	9f 4f       	sbci	r25, 0xFF	; 255
   16906:	08 95       	ret

00016908 <setjmp>:
   16908:	dc 01       	movw	r26, r24
   1690a:	2d 92       	st	X+, r2
   1690c:	3d 92       	st	X+, r3
   1690e:	4d 92       	st	X+, r4
   16910:	5d 92       	st	X+, r5
   16912:	6d 92       	st	X+, r6
   16914:	7d 92       	st	X+, r7
   16916:	8d 92       	st	X+, r8
   16918:	9d 92       	st	X+, r9
   1691a:	ad 92       	st	X+, r10
   1691c:	bd 92       	st	X+, r11
   1691e:	cd 92       	st	X+, r12
   16920:	dd 92       	st	X+, r13
   16922:	ed 92       	st	X+, r14
   16924:	fd 92       	st	X+, r15
   16926:	0d 93       	st	X+, r16
   16928:	1d 93       	st	X+, r17
   1692a:	cd 93       	st	X+, r28
   1692c:	dd 93       	st	X+, r29
   1692e:	0f 90       	pop	r0
   16930:	ff 91       	pop	r31
   16932:	ef 91       	pop	r30
   16934:	8d b7       	in	r24, 0x3d	; 61
   16936:	8d 93       	st	X+, r24
   16938:	8e b7       	in	r24, 0x3e	; 62
   1693a:	8d 93       	st	X+, r24
   1693c:	8f b7       	in	r24, 0x3f	; 63
   1693e:	8d 93       	st	X+, r24
   16940:	ed 93       	st	X+, r30
   16942:	fd 93       	st	X+, r31
   16944:	88 27       	eor	r24, r24
   16946:	99 27       	eor	r25, r25
   16948:	0d 92       	st	X+, r0
   1694a:	21 c0       	rjmp	.+66     	; 0x1698e <longjmp+0x42>

0001694c <longjmp>:
   1694c:	dc 01       	movw	r26, r24
   1694e:	cb 01       	movw	r24, r22
   16950:	81 30       	cpi	r24, 0x01	; 1
   16952:	91 05       	cpc	r25, r1
   16954:	81 1d       	adc	r24, r1
   16956:	2d 90       	ld	r2, X+
   16958:	3d 90       	ld	r3, X+
   1695a:	4d 90       	ld	r4, X+
   1695c:	5d 90       	ld	r5, X+
   1695e:	6d 90       	ld	r6, X+
   16960:	7d 90       	ld	r7, X+
   16962:	8d 90       	ld	r8, X+
   16964:	9d 90       	ld	r9, X+
   16966:	ad 90       	ld	r10, X+
   16968:	bd 90       	ld	r11, X+
   1696a:	cd 90       	ld	r12, X+
   1696c:	dd 90       	ld	r13, X+
   1696e:	ed 90       	ld	r14, X+
   16970:	fd 90       	ld	r15, X+
   16972:	0d 91       	ld	r16, X+
   16974:	1d 91       	ld	r17, X+
   16976:	cd 91       	ld	r28, X+
   16978:	dd 91       	ld	r29, X+
   1697a:	ed 91       	ld	r30, X+
   1697c:	fd 91       	ld	r31, X+
   1697e:	0d 90       	ld	r0, X+
   16980:	f8 94       	cli
   16982:	fe bf       	out	0x3e, r31	; 62
   16984:	0f be       	out	0x3f, r0	; 63
   16986:	ed bf       	out	0x3d, r30	; 61
   16988:	ed 91       	ld	r30, X+
   1698a:	fd 91       	ld	r31, X+
   1698c:	0d 90       	ld	r0, X+
   1698e:	ef 93       	push	r30
   16990:	ff 93       	push	r31
   16992:	0f 92       	push	r0
   16994:	08 95       	ret

00016996 <isalnum>:
   16996:	91 11       	cpse	r25, r1
   16998:	06 c0       	rjmp	.+12     	; 0x169a6 <__ctype_isfalse>
   1699a:	80 53       	subi	r24, 0x30	; 48
   1699c:	8a 50       	subi	r24, 0x0A	; 10
   1699e:	10 f0       	brcs	.+4      	; 0x169a4 <isalnum+0xe>
   169a0:	86 5c       	subi	r24, 0xC6	; 198
   169a2:	06 c0       	rjmp	.+12     	; 0x169b0 <isalpha>
   169a4:	08 95       	ret

000169a6 <__ctype_isfalse>:
   169a6:	99 27       	eor	r25, r25
   169a8:	88 27       	eor	r24, r24

000169aa <__ctype_istrue>:
   169aa:	08 95       	ret

000169ac <isupper>:
   169ac:	85 fd       	sbrc	r24, 5
   169ae:	fb cf       	rjmp	.-10     	; 0x169a6 <__ctype_isfalse>

000169b0 <isalpha>:
   169b0:	80 62       	ori	r24, 0x20	; 32

000169b2 <islower>:
   169b2:	91 11       	cpse	r25, r1
   169b4:	f8 cf       	rjmp	.-16     	; 0x169a6 <__ctype_isfalse>
   169b6:	81 56       	subi	r24, 0x61	; 97
   169b8:	8a 51       	subi	r24, 0x1A	; 26
   169ba:	e0 f7       	brcc	.-8      	; 0x169b4 <islower+0x2>
   169bc:	08 95       	ret

000169be <isxdigit>:
   169be:	91 11       	cpse	r25, r1
   169c0:	f2 cf       	rjmp	.-28     	; 0x169a6 <__ctype_isfalse>
   169c2:	80 53       	subi	r24, 0x30	; 48
   169c4:	8a 50       	subi	r24, 0x0A	; 10
   169c6:	28 f0       	brcs	.+10     	; 0x169d2 <isxdigit+0x14>
   169c8:	86 5c       	subi	r24, 0xC6	; 198
   169ca:	80 62       	ori	r24, 0x20	; 32
   169cc:	81 56       	subi	r24, 0x61	; 97
   169ce:	86 50       	subi	r24, 0x06	; 6
   169d0:	b8 f7       	brcc	.-18     	; 0x169c0 <isxdigit+0x2>
   169d2:	08 95       	ret

000169d4 <isgraph>:
   169d4:	80 32       	cpi	r24, 0x20	; 32
   169d6:	09 f0       	breq	.+2      	; 0x169da <isprint+0x2>

000169d8 <isprint>:
   169d8:	91 11       	cpse	r25, r1
   169da:	e5 cf       	rjmp	.-54     	; 0x169a6 <__ctype_isfalse>
   169dc:	80 52       	subi	r24, 0x20	; 32
   169de:	8f 55       	subi	r24, 0x5F	; 95
   169e0:	e0 f7       	brcc	.-8      	; 0x169da <isprint+0x2>
   169e2:	08 95       	ret

000169e4 <isspace>:
   169e4:	91 11       	cpse	r25, r1
   169e6:	df cf       	rjmp	.-66     	; 0x169a6 <__ctype_isfalse>
   169e8:	80 32       	cpi	r24, 0x20	; 32
   169ea:	19 f0       	breq	.+6      	; 0x169f2 <isspace+0xe>
   169ec:	89 50       	subi	r24, 0x09	; 9
   169ee:	85 50       	subi	r24, 0x05	; 5
   169f0:	d0 f7       	brcc	.-12     	; 0x169e6 <isspace+0x2>
   169f2:	08 95       	ret

000169f4 <tolower>:
   169f4:	91 11       	cpse	r25, r1
   169f6:	08 95       	ret
   169f8:	81 54       	subi	r24, 0x41	; 65
   169fa:	8a 51       	subi	r24, 0x1A	; 26
   169fc:	08 f4       	brcc	.+2      	; 0x16a00 <tolower+0xc>
   169fe:	80 5e       	subi	r24, 0xE0	; 224
   16a00:	85 5a       	subi	r24, 0xA5	; 165
   16a02:	08 95       	ret

00016a04 <strcmp_P>:
   16a04:	fb 01       	movw	r30, r22
   16a06:	dc 01       	movw	r26, r24
   16a08:	8d 91       	ld	r24, X+
   16a0a:	05 90       	lpm	r0, Z+
   16a0c:	80 19       	sub	r24, r0
   16a0e:	01 10       	cpse	r0, r1
   16a10:	d9 f3       	breq	.-10     	; 0x16a08 <strcmp_P+0x4>
   16a12:	99 0b       	sbc	r25, r25
   16a14:	08 95       	ret

00016a16 <strcpy_P>:
   16a16:	fb 01       	movw	r30, r22
   16a18:	dc 01       	movw	r26, r24
   16a1a:	05 90       	lpm	r0, Z+
   16a1c:	0d 92       	st	X+, r0
   16a1e:	00 20       	and	r0, r0
   16a20:	e1 f7       	brne	.-8      	; 0x16a1a <strcpy_P+0x4>
   16a22:	08 95       	ret

00016a24 <__strlen_P>:
   16a24:	fc 01       	movw	r30, r24
   16a26:	05 90       	lpm	r0, Z+
   16a28:	00 20       	and	r0, r0
   16a2a:	e9 f7       	brne	.-6      	; 0x16a26 <__strlen_P+0x2>
   16a2c:	80 95       	com	r24
   16a2e:	90 95       	com	r25
   16a30:	8e 0f       	add	r24, r30
   16a32:	9f 1f       	adc	r25, r31
   16a34:	08 95       	ret

00016a36 <strncpy_P>:
   16a36:	fb 01       	movw	r30, r22
   16a38:	dc 01       	movw	r26, r24
   16a3a:	41 50       	subi	r20, 0x01	; 1
   16a3c:	50 40       	sbci	r21, 0x00	; 0
   16a3e:	48 f0       	brcs	.+18     	; 0x16a52 <strncpy_P+0x1c>
   16a40:	05 90       	lpm	r0, Z+
   16a42:	0d 92       	st	X+, r0
   16a44:	00 20       	and	r0, r0
   16a46:	c9 f7       	brne	.-14     	; 0x16a3a <strncpy_P+0x4>
   16a48:	01 c0       	rjmp	.+2      	; 0x16a4c <strncpy_P+0x16>
   16a4a:	1d 92       	st	X+, r1
   16a4c:	41 50       	subi	r20, 0x01	; 1
   16a4e:	50 40       	sbci	r21, 0x00	; 0
   16a50:	e0 f7       	brcc	.-8      	; 0x16a4a <strncpy_P+0x14>
   16a52:	08 95       	ret

00016a54 <strdup>:
   16a54:	0f 93       	push	r16
   16a56:	1f 93       	push	r17
   16a58:	cf 93       	push	r28
   16a5a:	df 93       	push	r29
   16a5c:	8c 01       	movw	r16, r24
   16a5e:	fc 01       	movw	r30, r24
   16a60:	01 90       	ld	r0, Z+
   16a62:	00 20       	and	r0, r0
   16a64:	e9 f7       	brne	.-6      	; 0x16a60 <strdup+0xc>
   16a66:	cf 01       	movw	r24, r30
   16a68:	80 1b       	sub	r24, r16
   16a6a:	91 0b       	sbc	r25, r17
   16a6c:	f7 da       	rcall	.-2578   	; 0x1605c <malloc>
   16a6e:	ec 01       	movw	r28, r24
   16a70:	00 97       	sbiw	r24, 0x00	; 0
   16a72:	11 f0       	breq	.+4      	; 0x16a78 <strdup+0x24>
   16a74:	b8 01       	movw	r22, r16
   16a76:	3b d0       	rcall	.+118    	; 0x16aee <strcpy>
   16a78:	ce 01       	movw	r24, r28
   16a7a:	df 91       	pop	r29
   16a7c:	cf 91       	pop	r28
   16a7e:	1f 91       	pop	r17
   16a80:	0f 91       	pop	r16
   16a82:	08 95       	ret

00016a84 <memcpy>:
   16a84:	fb 01       	movw	r30, r22
   16a86:	dc 01       	movw	r26, r24
   16a88:	02 c0       	rjmp	.+4      	; 0x16a8e <memcpy+0xa>
   16a8a:	01 90       	ld	r0, Z+
   16a8c:	0d 92       	st	X+, r0
   16a8e:	41 50       	subi	r20, 0x01	; 1
   16a90:	50 40       	sbci	r21, 0x00	; 0
   16a92:	d8 f7       	brcc	.-10     	; 0x16a8a <memcpy+0x6>
   16a94:	08 95       	ret

00016a96 <memmove>:
   16a96:	68 17       	cp	r22, r24
   16a98:	79 07       	cpc	r23, r25
   16a9a:	68 f4       	brcc	.+26     	; 0x16ab6 <memmove+0x20>
   16a9c:	fb 01       	movw	r30, r22
   16a9e:	dc 01       	movw	r26, r24
   16aa0:	e4 0f       	add	r30, r20
   16aa2:	f5 1f       	adc	r31, r21
   16aa4:	a4 0f       	add	r26, r20
   16aa6:	b5 1f       	adc	r27, r21
   16aa8:	02 c0       	rjmp	.+4      	; 0x16aae <memmove+0x18>
   16aaa:	02 90       	ld	r0, -Z
   16aac:	0e 92       	st	-X, r0
   16aae:	41 50       	subi	r20, 0x01	; 1
   16ab0:	50 40       	sbci	r21, 0x00	; 0
   16ab2:	d8 f7       	brcc	.-10     	; 0x16aaa <memmove+0x14>
   16ab4:	08 95       	ret
   16ab6:	e6 cf       	rjmp	.-52     	; 0x16a84 <memcpy>

00016ab8 <memset>:
   16ab8:	dc 01       	movw	r26, r24
   16aba:	01 c0       	rjmp	.+2      	; 0x16abe <memset+0x6>
   16abc:	6d 93       	st	X+, r22
   16abe:	41 50       	subi	r20, 0x01	; 1
   16ac0:	50 40       	sbci	r21, 0x00	; 0
   16ac2:	e0 f7       	brcc	.-8      	; 0x16abc <memset+0x4>
   16ac4:	08 95       	ret

00016ac6 <strchr>:
   16ac6:	fc 01       	movw	r30, r24
   16ac8:	81 91       	ld	r24, Z+
   16aca:	86 17       	cp	r24, r22
   16acc:	21 f0       	breq	.+8      	; 0x16ad6 <strchr+0x10>
   16ace:	88 23       	and	r24, r24
   16ad0:	d9 f7       	brne	.-10     	; 0x16ac8 <strchr+0x2>
   16ad2:	99 27       	eor	r25, r25
   16ad4:	08 95       	ret
   16ad6:	31 97       	sbiw	r30, 0x01	; 1
   16ad8:	cf 01       	movw	r24, r30
   16ada:	08 95       	ret

00016adc <strcmp>:
   16adc:	fb 01       	movw	r30, r22
   16ade:	dc 01       	movw	r26, r24
   16ae0:	8d 91       	ld	r24, X+
   16ae2:	01 90       	ld	r0, Z+
   16ae4:	80 19       	sub	r24, r0
   16ae6:	01 10       	cpse	r0, r1
   16ae8:	d9 f3       	breq	.-10     	; 0x16ae0 <strcmp+0x4>
   16aea:	99 0b       	sbc	r25, r25
   16aec:	08 95       	ret

00016aee <strcpy>:
   16aee:	fb 01       	movw	r30, r22
   16af0:	dc 01       	movw	r26, r24
   16af2:	01 90       	ld	r0, Z+
   16af4:	0d 92       	st	X+, r0
   16af6:	00 20       	and	r0, r0
   16af8:	e1 f7       	brne	.-8      	; 0x16af2 <strcpy+0x4>
   16afa:	08 95       	ret

00016afc <strncmp>:
   16afc:	fb 01       	movw	r30, r22
   16afe:	dc 01       	movw	r26, r24
   16b00:	41 50       	subi	r20, 0x01	; 1
   16b02:	50 40       	sbci	r21, 0x00	; 0
   16b04:	30 f0       	brcs	.+12     	; 0x16b12 <strncmp+0x16>
   16b06:	8d 91       	ld	r24, X+
   16b08:	01 90       	ld	r0, Z+
   16b0a:	80 19       	sub	r24, r0
   16b0c:	19 f4       	brne	.+6      	; 0x16b14 <strncmp+0x18>
   16b0e:	00 20       	and	r0, r0
   16b10:	b9 f7       	brne	.-18     	; 0x16b00 <strncmp+0x4>
   16b12:	88 1b       	sub	r24, r24
   16b14:	99 0b       	sbc	r25, r25
   16b16:	08 95       	ret

00016b18 <strncpy>:
   16b18:	fb 01       	movw	r30, r22
   16b1a:	dc 01       	movw	r26, r24
   16b1c:	41 50       	subi	r20, 0x01	; 1
   16b1e:	50 40       	sbci	r21, 0x00	; 0
   16b20:	48 f0       	brcs	.+18     	; 0x16b34 <strncpy+0x1c>
   16b22:	01 90       	ld	r0, Z+
   16b24:	0d 92       	st	X+, r0
   16b26:	00 20       	and	r0, r0
   16b28:	c9 f7       	brne	.-14     	; 0x16b1c <strncpy+0x4>
   16b2a:	01 c0       	rjmp	.+2      	; 0x16b2e <strncpy+0x16>
   16b2c:	1d 92       	st	X+, r1
   16b2e:	41 50       	subi	r20, 0x01	; 1
   16b30:	50 40       	sbci	r21, 0x00	; 0
   16b32:	e0 f7       	brcc	.-8      	; 0x16b2c <strncpy+0x14>
   16b34:	08 95       	ret

00016b36 <itoa>:
   16b36:	45 32       	cpi	r20, 0x25	; 37
   16b38:	51 05       	cpc	r21, r1
   16b3a:	18 f4       	brcc	.+6      	; 0x16b42 <itoa+0xc>
   16b3c:	42 30       	cpi	r20, 0x02	; 2
   16b3e:	08 f0       	brcs	.+2      	; 0x16b42 <itoa+0xc>
   16b40:	04 c0       	rjmp	.+8      	; 0x16b4a <__itoa_ncheck>
   16b42:	fb 01       	movw	r30, r22
   16b44:	10 82       	st	Z, r1
   16b46:	cb 01       	movw	r24, r22
   16b48:	08 95       	ret

00016b4a <__itoa_ncheck>:
   16b4a:	bb 27       	eor	r27, r27
   16b4c:	4a 30       	cpi	r20, 0x0A	; 10
   16b4e:	31 f4       	brne	.+12     	; 0x16b5c <__itoa_ncheck+0x12>
   16b50:	99 23       	and	r25, r25
   16b52:	22 f4       	brpl	.+8      	; 0x16b5c <__itoa_ncheck+0x12>
   16b54:	bd e2       	ldi	r27, 0x2D	; 45
   16b56:	90 95       	com	r25
   16b58:	81 95       	neg	r24
   16b5a:	9f 4f       	sbci	r25, 0xFF	; 255
   16b5c:	56 c0       	rjmp	.+172    	; 0x16c0a <__utoa_common>

00016b5e <ltoa>:
   16b5e:	25 32       	cpi	r18, 0x25	; 37
   16b60:	31 05       	cpc	r19, r1
   16b62:	18 f4       	brcc	.+6      	; 0x16b6a <ltoa+0xc>
   16b64:	22 30       	cpi	r18, 0x02	; 2
   16b66:	08 f0       	brcs	.+2      	; 0x16b6a <ltoa+0xc>
   16b68:	04 c0       	rjmp	.+8      	; 0x16b72 <__ltoa_ncheck>
   16b6a:	fa 01       	movw	r30, r20
   16b6c:	10 82       	st	Z, r1
   16b6e:	ca 01       	movw	r24, r20
   16b70:	08 95       	ret

00016b72 <__ltoa_ncheck>:
   16b72:	bb 27       	eor	r27, r27
   16b74:	2a 30       	cpi	r18, 0x0A	; 10
   16b76:	51 f4       	brne	.+20     	; 0x16b8c <__ltoa_ncheck+0x1a>
   16b78:	99 23       	and	r25, r25
   16b7a:	42 f4       	brpl	.+16     	; 0x16b8c <__ltoa_ncheck+0x1a>
   16b7c:	bd e2       	ldi	r27, 0x2D	; 45
   16b7e:	90 95       	com	r25
   16b80:	80 95       	com	r24
   16b82:	70 95       	com	r23
   16b84:	61 95       	neg	r22
   16b86:	7f 4f       	sbci	r23, 0xFF	; 255
   16b88:	8f 4f       	sbci	r24, 0xFF	; 255
   16b8a:	9f 4f       	sbci	r25, 0xFF	; 255
   16b8c:	13 c0       	rjmp	.+38     	; 0x16bb4 <__ultoa_common>

00016b8e <__mulhi_const_10>:
   16b8e:	7a e0       	ldi	r23, 0x0A	; 10
   16b90:	97 9f       	mul	r25, r23
   16b92:	90 2d       	mov	r25, r0
   16b94:	87 9f       	mul	r24, r23
   16b96:	80 2d       	mov	r24, r0
   16b98:	91 0d       	add	r25, r1
   16b9a:	11 24       	eor	r1, r1
   16b9c:	08 95       	ret

00016b9e <ultoa>:
   16b9e:	25 32       	cpi	r18, 0x25	; 37
   16ba0:	31 05       	cpc	r19, r1
   16ba2:	18 f4       	brcc	.+6      	; 0x16baa <ultoa+0xc>
   16ba4:	22 30       	cpi	r18, 0x02	; 2
   16ba6:	08 f0       	brcs	.+2      	; 0x16baa <ultoa+0xc>
   16ba8:	04 c0       	rjmp	.+8      	; 0x16bb2 <__ultoa_ncheck>
   16baa:	fa 01       	movw	r30, r20
   16bac:	10 82       	st	Z, r1
   16bae:	ca 01       	movw	r24, r20
   16bb0:	08 95       	ret

00016bb2 <__ultoa_ncheck>:
   16bb2:	bb 27       	eor	r27, r27

00016bb4 <__ultoa_common>:
   16bb4:	fa 01       	movw	r30, r20
   16bb6:	a6 2f       	mov	r26, r22
   16bb8:	62 17       	cp	r22, r18
   16bba:	71 05       	cpc	r23, r1
   16bbc:	81 05       	cpc	r24, r1
   16bbe:	91 05       	cpc	r25, r1
   16bc0:	33 0b       	sbc	r19, r19
   16bc2:	30 fb       	bst	r19, 0
   16bc4:	66 f0       	brts	.+24     	; 0x16bde <__ultoa_common+0x2a>
   16bc6:	aa 27       	eor	r26, r26
   16bc8:	66 0f       	add	r22, r22
   16bca:	77 1f       	adc	r23, r23
   16bcc:	88 1f       	adc	r24, r24
   16bce:	99 1f       	adc	r25, r25
   16bd0:	aa 1f       	adc	r26, r26
   16bd2:	a2 17       	cp	r26, r18
   16bd4:	10 f0       	brcs	.+4      	; 0x16bda <__ultoa_common+0x26>
   16bd6:	a2 1b       	sub	r26, r18
   16bd8:	63 95       	inc	r22
   16bda:	38 50       	subi	r19, 0x08	; 8
   16bdc:	a9 f7       	brne	.-22     	; 0x16bc8 <__ultoa_common+0x14>
   16bde:	a0 5d       	subi	r26, 0xD0	; 208
   16be0:	aa 33       	cpi	r26, 0x3A	; 58
   16be2:	08 f0       	brcs	.+2      	; 0x16be6 <__ultoa_common+0x32>
   16be4:	a9 5d       	subi	r26, 0xD9	; 217
   16be6:	a1 93       	st	Z+, r26
   16be8:	36 f7       	brtc	.-52     	; 0x16bb6 <__ultoa_common+0x2>
   16bea:	b1 11       	cpse	r27, r1
   16bec:	b1 93       	st	Z+, r27
   16bee:	10 82       	st	Z, r1
   16bf0:	ca 01       	movw	r24, r20
   16bf2:	ff c2       	rjmp	.+1534   	; 0x171f2 <strrev>

00016bf4 <utoa>:
   16bf4:	45 32       	cpi	r20, 0x25	; 37
   16bf6:	51 05       	cpc	r21, r1
   16bf8:	18 f4       	brcc	.+6      	; 0x16c00 <utoa+0xc>
   16bfa:	42 30       	cpi	r20, 0x02	; 2
   16bfc:	08 f0       	brcs	.+2      	; 0x16c00 <utoa+0xc>
   16bfe:	04 c0       	rjmp	.+8      	; 0x16c08 <__utoa_ncheck>
   16c00:	fb 01       	movw	r30, r22
   16c02:	10 82       	st	Z, r1
   16c04:	cb 01       	movw	r24, r22
   16c06:	08 95       	ret

00016c08 <__utoa_ncheck>:
   16c08:	bb 27       	eor	r27, r27

00016c0a <__utoa_common>:
   16c0a:	fb 01       	movw	r30, r22
   16c0c:	55 27       	eor	r21, r21
   16c0e:	aa 27       	eor	r26, r26
   16c10:	88 0f       	add	r24, r24
   16c12:	99 1f       	adc	r25, r25
   16c14:	aa 1f       	adc	r26, r26
   16c16:	a4 17       	cp	r26, r20
   16c18:	10 f0       	brcs	.+4      	; 0x16c1e <__utoa_common+0x14>
   16c1a:	a4 1b       	sub	r26, r20
   16c1c:	83 95       	inc	r24
   16c1e:	50 51       	subi	r21, 0x10	; 16
   16c20:	b9 f7       	brne	.-18     	; 0x16c10 <__utoa_common+0x6>
   16c22:	a0 5d       	subi	r26, 0xD0	; 208
   16c24:	aa 33       	cpi	r26, 0x3A	; 58
   16c26:	08 f0       	brcs	.+2      	; 0x16c2a <__utoa_common+0x20>
   16c28:	a9 5d       	subi	r26, 0xD9	; 217
   16c2a:	a1 93       	st	Z+, r26
   16c2c:	00 97       	sbiw	r24, 0x00	; 0
   16c2e:	79 f7       	brne	.-34     	; 0x16c0e <__utoa_common+0x4>
   16c30:	b1 11       	cpse	r27, r1
   16c32:	b1 93       	st	Z+, r27
   16c34:	11 92       	st	Z+, r1
   16c36:	cb 01       	movw	r24, r22
   16c38:	dc c2       	rjmp	.+1464   	; 0x171f2 <strrev>

00016c3a <snprintf>:
   16c3a:	0f 93       	push	r16
   16c3c:	1f 93       	push	r17
   16c3e:	cf 93       	push	r28
   16c40:	df 93       	push	r29
   16c42:	cd b7       	in	r28, 0x3d	; 61
   16c44:	de b7       	in	r29, 0x3e	; 62
   16c46:	2e 97       	sbiw	r28, 0x0e	; 14
   16c48:	0f b6       	in	r0, 0x3f	; 63
   16c4a:	f8 94       	cli
   16c4c:	de bf       	out	0x3e, r29	; 62
   16c4e:	0f be       	out	0x3f, r0	; 63
   16c50:	cd bf       	out	0x3d, r28	; 61
   16c52:	0e 89       	ldd	r16, Y+22	; 0x16
   16c54:	1f 89       	ldd	r17, Y+23	; 0x17
   16c56:	88 8d       	ldd	r24, Y+24	; 0x18
   16c58:	99 8d       	ldd	r25, Y+25	; 0x19
   16c5a:	26 e0       	ldi	r18, 0x06	; 6
   16c5c:	2c 83       	std	Y+4, r18	; 0x04
   16c5e:	1a 83       	std	Y+2, r17	; 0x02
   16c60:	09 83       	std	Y+1, r16	; 0x01
   16c62:	97 ff       	sbrs	r25, 7
   16c64:	02 c0       	rjmp	.+4      	; 0x16c6a <snprintf+0x30>
   16c66:	80 e0       	ldi	r24, 0x00	; 0
   16c68:	90 e8       	ldi	r25, 0x80	; 128
   16c6a:	01 97       	sbiw	r24, 0x01	; 1
   16c6c:	9e 83       	std	Y+6, r25	; 0x06
   16c6e:	8d 83       	std	Y+5, r24	; 0x05
   16c70:	ae 01       	movw	r20, r28
   16c72:	44 5e       	subi	r20, 0xE4	; 228
   16c74:	5f 4f       	sbci	r21, 0xFF	; 255
   16c76:	6a 8d       	ldd	r22, Y+26	; 0x1a
   16c78:	7b 8d       	ldd	r23, Y+27	; 0x1b
   16c7a:	ce 01       	movw	r24, r28
   16c7c:	01 96       	adiw	r24, 0x01	; 1
   16c7e:	7f d0       	rcall	.+254    	; 0x16d7e <vfprintf>
   16c80:	4d 81       	ldd	r20, Y+5	; 0x05
   16c82:	5e 81       	ldd	r21, Y+6	; 0x06
   16c84:	57 fd       	sbrc	r21, 7
   16c86:	0a c0       	rjmp	.+20     	; 0x16c9c <snprintf+0x62>
   16c88:	2f 81       	ldd	r18, Y+7	; 0x07
   16c8a:	38 85       	ldd	r19, Y+8	; 0x08
   16c8c:	42 17       	cp	r20, r18
   16c8e:	53 07       	cpc	r21, r19
   16c90:	0c f4       	brge	.+2      	; 0x16c94 <snprintf+0x5a>
   16c92:	9a 01       	movw	r18, r20
   16c94:	f8 01       	movw	r30, r16
   16c96:	e2 0f       	add	r30, r18
   16c98:	f3 1f       	adc	r31, r19
   16c9a:	10 82       	st	Z, r1
   16c9c:	2e 96       	adiw	r28, 0x0e	; 14
   16c9e:	0f b6       	in	r0, 0x3f	; 63
   16ca0:	f8 94       	cli
   16ca2:	de bf       	out	0x3e, r29	; 62
   16ca4:	0f be       	out	0x3f, r0	; 63
   16ca6:	cd bf       	out	0x3d, r28	; 61
   16ca8:	df 91       	pop	r29
   16caa:	cf 91       	pop	r28
   16cac:	1f 91       	pop	r17
   16cae:	0f 91       	pop	r16
   16cb0:	08 95       	ret

00016cb2 <sprintf>:
   16cb2:	0f 93       	push	r16
   16cb4:	1f 93       	push	r17
   16cb6:	cf 93       	push	r28
   16cb8:	df 93       	push	r29
   16cba:	cd b7       	in	r28, 0x3d	; 61
   16cbc:	de b7       	in	r29, 0x3e	; 62
   16cbe:	2e 97       	sbiw	r28, 0x0e	; 14
   16cc0:	0f b6       	in	r0, 0x3f	; 63
   16cc2:	f8 94       	cli
   16cc4:	de bf       	out	0x3e, r29	; 62
   16cc6:	0f be       	out	0x3f, r0	; 63
   16cc8:	cd bf       	out	0x3d, r28	; 61
   16cca:	0e 89       	ldd	r16, Y+22	; 0x16
   16ccc:	1f 89       	ldd	r17, Y+23	; 0x17
   16cce:	86 e0       	ldi	r24, 0x06	; 6
   16cd0:	8c 83       	std	Y+4, r24	; 0x04
   16cd2:	1a 83       	std	Y+2, r17	; 0x02
   16cd4:	09 83       	std	Y+1, r16	; 0x01
   16cd6:	8f ef       	ldi	r24, 0xFF	; 255
   16cd8:	9f e7       	ldi	r25, 0x7F	; 127
   16cda:	9e 83       	std	Y+6, r25	; 0x06
   16cdc:	8d 83       	std	Y+5, r24	; 0x05
   16cde:	ae 01       	movw	r20, r28
   16ce0:	46 5e       	subi	r20, 0xE6	; 230
   16ce2:	5f 4f       	sbci	r21, 0xFF	; 255
   16ce4:	68 8d       	ldd	r22, Y+24	; 0x18
   16ce6:	79 8d       	ldd	r23, Y+25	; 0x19
   16ce8:	ce 01       	movw	r24, r28
   16cea:	01 96       	adiw	r24, 0x01	; 1
   16cec:	48 d0       	rcall	.+144    	; 0x16d7e <vfprintf>
   16cee:	ef 81       	ldd	r30, Y+7	; 0x07
   16cf0:	f8 85       	ldd	r31, Y+8	; 0x08
   16cf2:	e0 0f       	add	r30, r16
   16cf4:	f1 1f       	adc	r31, r17
   16cf6:	10 82       	st	Z, r1
   16cf8:	2e 96       	adiw	r28, 0x0e	; 14
   16cfa:	0f b6       	in	r0, 0x3f	; 63
   16cfc:	f8 94       	cli
   16cfe:	de bf       	out	0x3e, r29	; 62
   16d00:	0f be       	out	0x3f, r0	; 63
   16d02:	cd bf       	out	0x3d, r28	; 61
   16d04:	df 91       	pop	r29
   16d06:	cf 91       	pop	r28
   16d08:	1f 91       	pop	r17
   16d0a:	0f 91       	pop	r16
   16d0c:	08 95       	ret

00016d0e <vsnprintf>:
   16d0e:	0f 93       	push	r16
   16d10:	1f 93       	push	r17
   16d12:	cf 93       	push	r28
   16d14:	df 93       	push	r29
   16d16:	cd b7       	in	r28, 0x3d	; 61
   16d18:	de b7       	in	r29, 0x3e	; 62
   16d1a:	2e 97       	sbiw	r28, 0x0e	; 14
   16d1c:	0f b6       	in	r0, 0x3f	; 63
   16d1e:	f8 94       	cli
   16d20:	de bf       	out	0x3e, r29	; 62
   16d22:	0f be       	out	0x3f, r0	; 63
   16d24:	cd bf       	out	0x3d, r28	; 61
   16d26:	8c 01       	movw	r16, r24
   16d28:	ca 01       	movw	r24, r20
   16d2a:	46 e0       	ldi	r20, 0x06	; 6
   16d2c:	4c 83       	std	Y+4, r20	; 0x04
   16d2e:	1a 83       	std	Y+2, r17	; 0x02
   16d30:	09 83       	std	Y+1, r16	; 0x01
   16d32:	77 ff       	sbrs	r23, 7
   16d34:	02 c0       	rjmp	.+4      	; 0x16d3a <vsnprintf+0x2c>
   16d36:	60 e0       	ldi	r22, 0x00	; 0
   16d38:	70 e8       	ldi	r23, 0x80	; 128
   16d3a:	61 50       	subi	r22, 0x01	; 1
   16d3c:	71 09       	sbc	r23, r1
   16d3e:	7e 83       	std	Y+6, r23	; 0x06
   16d40:	6d 83       	std	Y+5, r22	; 0x05
   16d42:	a9 01       	movw	r20, r18
   16d44:	bc 01       	movw	r22, r24
   16d46:	ce 01       	movw	r24, r28
   16d48:	01 96       	adiw	r24, 0x01	; 1
   16d4a:	19 d0       	rcall	.+50     	; 0x16d7e <vfprintf>
   16d4c:	4d 81       	ldd	r20, Y+5	; 0x05
   16d4e:	5e 81       	ldd	r21, Y+6	; 0x06
   16d50:	57 fd       	sbrc	r21, 7
   16d52:	0a c0       	rjmp	.+20     	; 0x16d68 <vsnprintf+0x5a>
   16d54:	2f 81       	ldd	r18, Y+7	; 0x07
   16d56:	38 85       	ldd	r19, Y+8	; 0x08
   16d58:	42 17       	cp	r20, r18
   16d5a:	53 07       	cpc	r21, r19
   16d5c:	0c f4       	brge	.+2      	; 0x16d60 <vsnprintf+0x52>
   16d5e:	9a 01       	movw	r18, r20
   16d60:	f8 01       	movw	r30, r16
   16d62:	e2 0f       	add	r30, r18
   16d64:	f3 1f       	adc	r31, r19
   16d66:	10 82       	st	Z, r1
   16d68:	2e 96       	adiw	r28, 0x0e	; 14
   16d6a:	0f b6       	in	r0, 0x3f	; 63
   16d6c:	f8 94       	cli
   16d6e:	de bf       	out	0x3e, r29	; 62
   16d70:	0f be       	out	0x3f, r0	; 63
   16d72:	cd bf       	out	0x3d, r28	; 61
   16d74:	df 91       	pop	r29
   16d76:	cf 91       	pop	r28
   16d78:	1f 91       	pop	r17
   16d7a:	0f 91       	pop	r16
   16d7c:	08 95       	ret

00016d7e <vfprintf>:
   16d7e:	2f 92       	push	r2
   16d80:	3f 92       	push	r3
   16d82:	4f 92       	push	r4
   16d84:	5f 92       	push	r5
   16d86:	6f 92       	push	r6
   16d88:	7f 92       	push	r7
   16d8a:	8f 92       	push	r8
   16d8c:	9f 92       	push	r9
   16d8e:	af 92       	push	r10
   16d90:	bf 92       	push	r11
   16d92:	cf 92       	push	r12
   16d94:	df 92       	push	r13
   16d96:	ef 92       	push	r14
   16d98:	ff 92       	push	r15
   16d9a:	0f 93       	push	r16
   16d9c:	1f 93       	push	r17
   16d9e:	cf 93       	push	r28
   16da0:	df 93       	push	r29
   16da2:	cd b7       	in	r28, 0x3d	; 61
   16da4:	de b7       	in	r29, 0x3e	; 62
   16da6:	2c 97       	sbiw	r28, 0x0c	; 12
   16da8:	0f b6       	in	r0, 0x3f	; 63
   16daa:	f8 94       	cli
   16dac:	de bf       	out	0x3e, r29	; 62
   16dae:	0f be       	out	0x3f, r0	; 63
   16db0:	cd bf       	out	0x3d, r28	; 61
   16db2:	7c 01       	movw	r14, r24
   16db4:	6b 01       	movw	r12, r22
   16db6:	8a 01       	movw	r16, r20
   16db8:	fc 01       	movw	r30, r24
   16dba:	17 82       	std	Z+7, r1	; 0x07
   16dbc:	16 82       	std	Z+6, r1	; 0x06
   16dbe:	83 81       	ldd	r24, Z+3	; 0x03
   16dc0:	81 ff       	sbrs	r24, 1
   16dc2:	b0 c1       	rjmp	.+864    	; 0x17124 <vfprintf+0x3a6>
   16dc4:	ce 01       	movw	r24, r28
   16dc6:	01 96       	adiw	r24, 0x01	; 1
   16dc8:	4c 01       	movw	r8, r24
   16dca:	f7 01       	movw	r30, r14
   16dcc:	93 81       	ldd	r25, Z+3	; 0x03
   16dce:	f6 01       	movw	r30, r12
   16dd0:	93 fd       	sbrc	r25, 3
   16dd2:	85 91       	lpm	r24, Z+
   16dd4:	93 ff       	sbrs	r25, 3
   16dd6:	81 91       	ld	r24, Z+
   16dd8:	6f 01       	movw	r12, r30
   16dda:	88 23       	and	r24, r24
   16ddc:	09 f4       	brne	.+2      	; 0x16de0 <vfprintf+0x62>
   16dde:	9e c1       	rjmp	.+828    	; 0x1711c <vfprintf+0x39e>
   16de0:	85 32       	cpi	r24, 0x25	; 37
   16de2:	39 f4       	brne	.+14     	; 0x16df2 <vfprintf+0x74>
   16de4:	93 fd       	sbrc	r25, 3
   16de6:	85 91       	lpm	r24, Z+
   16de8:	93 ff       	sbrs	r25, 3
   16dea:	81 91       	ld	r24, Z+
   16dec:	6f 01       	movw	r12, r30
   16dee:	85 32       	cpi	r24, 0x25	; 37
   16df0:	21 f4       	brne	.+8      	; 0x16dfa <vfprintf+0x7c>
   16df2:	b7 01       	movw	r22, r14
   16df4:	90 e0       	ldi	r25, 0x00	; 0
   16df6:	0d d2       	rcall	.+1050   	; 0x17212 <fputc>
   16df8:	e8 cf       	rjmp	.-48     	; 0x16dca <vfprintf+0x4c>
   16dfa:	51 2c       	mov	r5, r1
   16dfc:	31 2c       	mov	r3, r1
   16dfe:	20 e0       	ldi	r18, 0x00	; 0
   16e00:	20 32       	cpi	r18, 0x20	; 32
   16e02:	a0 f4       	brcc	.+40     	; 0x16e2c <vfprintf+0xae>
   16e04:	8b 32       	cpi	r24, 0x2B	; 43
   16e06:	69 f0       	breq	.+26     	; 0x16e22 <vfprintf+0xa4>
   16e08:	30 f4       	brcc	.+12     	; 0x16e16 <vfprintf+0x98>
   16e0a:	80 32       	cpi	r24, 0x20	; 32
   16e0c:	59 f0       	breq	.+22     	; 0x16e24 <vfprintf+0xa6>
   16e0e:	83 32       	cpi	r24, 0x23	; 35
   16e10:	69 f4       	brne	.+26     	; 0x16e2c <vfprintf+0xae>
   16e12:	20 61       	ori	r18, 0x10	; 16
   16e14:	2c c0       	rjmp	.+88     	; 0x16e6e <vfprintf+0xf0>
   16e16:	8d 32       	cpi	r24, 0x2D	; 45
   16e18:	39 f0       	breq	.+14     	; 0x16e28 <vfprintf+0xaa>
   16e1a:	80 33       	cpi	r24, 0x30	; 48
   16e1c:	39 f4       	brne	.+14     	; 0x16e2c <vfprintf+0xae>
   16e1e:	21 60       	ori	r18, 0x01	; 1
   16e20:	26 c0       	rjmp	.+76     	; 0x16e6e <vfprintf+0xf0>
   16e22:	22 60       	ori	r18, 0x02	; 2
   16e24:	24 60       	ori	r18, 0x04	; 4
   16e26:	23 c0       	rjmp	.+70     	; 0x16e6e <vfprintf+0xf0>
   16e28:	28 60       	ori	r18, 0x08	; 8
   16e2a:	21 c0       	rjmp	.+66     	; 0x16e6e <vfprintf+0xf0>
   16e2c:	27 fd       	sbrc	r18, 7
   16e2e:	27 c0       	rjmp	.+78     	; 0x16e7e <vfprintf+0x100>
   16e30:	30 ed       	ldi	r19, 0xD0	; 208
   16e32:	38 0f       	add	r19, r24
   16e34:	3a 30       	cpi	r19, 0x0A	; 10
   16e36:	78 f4       	brcc	.+30     	; 0x16e56 <vfprintf+0xd8>
   16e38:	26 ff       	sbrs	r18, 6
   16e3a:	06 c0       	rjmp	.+12     	; 0x16e48 <vfprintf+0xca>
   16e3c:	fa e0       	ldi	r31, 0x0A	; 10
   16e3e:	5f 9e       	mul	r5, r31
   16e40:	30 0d       	add	r19, r0
   16e42:	11 24       	eor	r1, r1
   16e44:	53 2e       	mov	r5, r19
   16e46:	13 c0       	rjmp	.+38     	; 0x16e6e <vfprintf+0xf0>
   16e48:	8a e0       	ldi	r24, 0x0A	; 10
   16e4a:	38 9e       	mul	r3, r24
   16e4c:	30 0d       	add	r19, r0
   16e4e:	11 24       	eor	r1, r1
   16e50:	33 2e       	mov	r3, r19
   16e52:	20 62       	ori	r18, 0x20	; 32
   16e54:	0c c0       	rjmp	.+24     	; 0x16e6e <vfprintf+0xf0>
   16e56:	8e 32       	cpi	r24, 0x2E	; 46
   16e58:	21 f4       	brne	.+8      	; 0x16e62 <vfprintf+0xe4>
   16e5a:	26 fd       	sbrc	r18, 6
   16e5c:	5f c1       	rjmp	.+702    	; 0x1711c <vfprintf+0x39e>
   16e5e:	20 64       	ori	r18, 0x40	; 64
   16e60:	06 c0       	rjmp	.+12     	; 0x16e6e <vfprintf+0xf0>
   16e62:	8c 36       	cpi	r24, 0x6C	; 108
   16e64:	11 f4       	brne	.+4      	; 0x16e6a <vfprintf+0xec>
   16e66:	20 68       	ori	r18, 0x80	; 128
   16e68:	02 c0       	rjmp	.+4      	; 0x16e6e <vfprintf+0xf0>
   16e6a:	88 36       	cpi	r24, 0x68	; 104
   16e6c:	41 f4       	brne	.+16     	; 0x16e7e <vfprintf+0x100>
   16e6e:	f6 01       	movw	r30, r12
   16e70:	93 fd       	sbrc	r25, 3
   16e72:	85 91       	lpm	r24, Z+
   16e74:	93 ff       	sbrs	r25, 3
   16e76:	81 91       	ld	r24, Z+
   16e78:	6f 01       	movw	r12, r30
   16e7a:	81 11       	cpse	r24, r1
   16e7c:	c1 cf       	rjmp	.-126    	; 0x16e00 <vfprintf+0x82>
   16e7e:	98 2f       	mov	r25, r24
   16e80:	9f 7d       	andi	r25, 0xDF	; 223
   16e82:	95 54       	subi	r25, 0x45	; 69
   16e84:	93 30       	cpi	r25, 0x03	; 3
   16e86:	28 f4       	brcc	.+10     	; 0x16e92 <vfprintf+0x114>
   16e88:	0c 5f       	subi	r16, 0xFC	; 252
   16e8a:	1f 4f       	sbci	r17, 0xFF	; 255
   16e8c:	ff e3       	ldi	r31, 0x3F	; 63
   16e8e:	f9 83       	std	Y+1, r31	; 0x01
   16e90:	0d c0       	rjmp	.+26     	; 0x16eac <vfprintf+0x12e>
   16e92:	83 36       	cpi	r24, 0x63	; 99
   16e94:	31 f0       	breq	.+12     	; 0x16ea2 <vfprintf+0x124>
   16e96:	83 37       	cpi	r24, 0x73	; 115
   16e98:	71 f0       	breq	.+28     	; 0x16eb6 <vfprintf+0x138>
   16e9a:	83 35       	cpi	r24, 0x53	; 83
   16e9c:	09 f0       	breq	.+2      	; 0x16ea0 <vfprintf+0x122>
   16e9e:	57 c0       	rjmp	.+174    	; 0x16f4e <vfprintf+0x1d0>
   16ea0:	21 c0       	rjmp	.+66     	; 0x16ee4 <vfprintf+0x166>
   16ea2:	f8 01       	movw	r30, r16
   16ea4:	80 81       	ld	r24, Z
   16ea6:	89 83       	std	Y+1, r24	; 0x01
   16ea8:	0e 5f       	subi	r16, 0xFE	; 254
   16eaa:	1f 4f       	sbci	r17, 0xFF	; 255
   16eac:	44 24       	eor	r4, r4
   16eae:	43 94       	inc	r4
   16eb0:	51 2c       	mov	r5, r1
   16eb2:	54 01       	movw	r10, r8
   16eb4:	14 c0       	rjmp	.+40     	; 0x16ede <vfprintf+0x160>
   16eb6:	38 01       	movw	r6, r16
   16eb8:	f2 e0       	ldi	r31, 0x02	; 2
   16eba:	6f 0e       	add	r6, r31
   16ebc:	71 1c       	adc	r7, r1
   16ebe:	f8 01       	movw	r30, r16
   16ec0:	a0 80       	ld	r10, Z
   16ec2:	b1 80       	ldd	r11, Z+1	; 0x01
   16ec4:	26 ff       	sbrs	r18, 6
   16ec6:	03 c0       	rjmp	.+6      	; 0x16ece <vfprintf+0x150>
   16ec8:	65 2d       	mov	r22, r5
   16eca:	70 e0       	ldi	r23, 0x00	; 0
   16ecc:	02 c0       	rjmp	.+4      	; 0x16ed2 <vfprintf+0x154>
   16ece:	6f ef       	ldi	r22, 0xFF	; 255
   16ed0:	7f ef       	ldi	r23, 0xFF	; 255
   16ed2:	c5 01       	movw	r24, r10
   16ed4:	2c 87       	std	Y+12, r18	; 0x0c
   16ed6:	82 d1       	rcall	.+772    	; 0x171dc <strnlen>
   16ed8:	2c 01       	movw	r4, r24
   16eda:	83 01       	movw	r16, r6
   16edc:	2c 85       	ldd	r18, Y+12	; 0x0c
   16ede:	2f 77       	andi	r18, 0x7F	; 127
   16ee0:	22 2e       	mov	r2, r18
   16ee2:	16 c0       	rjmp	.+44     	; 0x16f10 <vfprintf+0x192>
   16ee4:	38 01       	movw	r6, r16
   16ee6:	f2 e0       	ldi	r31, 0x02	; 2
   16ee8:	6f 0e       	add	r6, r31
   16eea:	71 1c       	adc	r7, r1
   16eec:	f8 01       	movw	r30, r16
   16eee:	a0 80       	ld	r10, Z
   16ef0:	b1 80       	ldd	r11, Z+1	; 0x01
   16ef2:	26 ff       	sbrs	r18, 6
   16ef4:	03 c0       	rjmp	.+6      	; 0x16efc <vfprintf+0x17e>
   16ef6:	65 2d       	mov	r22, r5
   16ef8:	70 e0       	ldi	r23, 0x00	; 0
   16efa:	02 c0       	rjmp	.+4      	; 0x16f00 <vfprintf+0x182>
   16efc:	6f ef       	ldi	r22, 0xFF	; 255
   16efe:	7f ef       	ldi	r23, 0xFF	; 255
   16f00:	c5 01       	movw	r24, r10
   16f02:	2c 87       	std	Y+12, r18	; 0x0c
   16f04:	60 d1       	rcall	.+704    	; 0x171c6 <strnlen_P>
   16f06:	2c 01       	movw	r4, r24
   16f08:	2c 85       	ldd	r18, Y+12	; 0x0c
   16f0a:	20 68       	ori	r18, 0x80	; 128
   16f0c:	22 2e       	mov	r2, r18
   16f0e:	83 01       	movw	r16, r6
   16f10:	23 fc       	sbrc	r2, 3
   16f12:	19 c0       	rjmp	.+50     	; 0x16f46 <vfprintf+0x1c8>
   16f14:	83 2d       	mov	r24, r3
   16f16:	90 e0       	ldi	r25, 0x00	; 0
   16f18:	48 16       	cp	r4, r24
   16f1a:	59 06       	cpc	r5, r25
   16f1c:	a0 f4       	brcc	.+40     	; 0x16f46 <vfprintf+0x1c8>
   16f1e:	b7 01       	movw	r22, r14
   16f20:	80 e2       	ldi	r24, 0x20	; 32
   16f22:	90 e0       	ldi	r25, 0x00	; 0
   16f24:	76 d1       	rcall	.+748    	; 0x17212 <fputc>
   16f26:	3a 94       	dec	r3
   16f28:	f5 cf       	rjmp	.-22     	; 0x16f14 <vfprintf+0x196>
   16f2a:	f5 01       	movw	r30, r10
   16f2c:	27 fc       	sbrc	r2, 7
   16f2e:	85 91       	lpm	r24, Z+
   16f30:	27 fe       	sbrs	r2, 7
   16f32:	81 91       	ld	r24, Z+
   16f34:	5f 01       	movw	r10, r30
   16f36:	b7 01       	movw	r22, r14
   16f38:	90 e0       	ldi	r25, 0x00	; 0
   16f3a:	6b d1       	rcall	.+726    	; 0x17212 <fputc>
   16f3c:	31 10       	cpse	r3, r1
   16f3e:	3a 94       	dec	r3
   16f40:	f1 e0       	ldi	r31, 0x01	; 1
   16f42:	4f 1a       	sub	r4, r31
   16f44:	51 08       	sbc	r5, r1
   16f46:	41 14       	cp	r4, r1
   16f48:	51 04       	cpc	r5, r1
   16f4a:	79 f7       	brne	.-34     	; 0x16f2a <vfprintf+0x1ac>
   16f4c:	de c0       	rjmp	.+444    	; 0x1710a <vfprintf+0x38c>
   16f4e:	84 36       	cpi	r24, 0x64	; 100
   16f50:	11 f0       	breq	.+4      	; 0x16f56 <vfprintf+0x1d8>
   16f52:	89 36       	cpi	r24, 0x69	; 105
   16f54:	31 f5       	brne	.+76     	; 0x16fa2 <vfprintf+0x224>
   16f56:	f8 01       	movw	r30, r16
   16f58:	27 ff       	sbrs	r18, 7
   16f5a:	07 c0       	rjmp	.+14     	; 0x16f6a <vfprintf+0x1ec>
   16f5c:	60 81       	ld	r22, Z
   16f5e:	71 81       	ldd	r23, Z+1	; 0x01
   16f60:	82 81       	ldd	r24, Z+2	; 0x02
   16f62:	93 81       	ldd	r25, Z+3	; 0x03
   16f64:	0c 5f       	subi	r16, 0xFC	; 252
   16f66:	1f 4f       	sbci	r17, 0xFF	; 255
   16f68:	08 c0       	rjmp	.+16     	; 0x16f7a <vfprintf+0x1fc>
   16f6a:	60 81       	ld	r22, Z
   16f6c:	71 81       	ldd	r23, Z+1	; 0x01
   16f6e:	88 27       	eor	r24, r24
   16f70:	77 fd       	sbrc	r23, 7
   16f72:	80 95       	com	r24
   16f74:	98 2f       	mov	r25, r24
   16f76:	0e 5f       	subi	r16, 0xFE	; 254
   16f78:	1f 4f       	sbci	r17, 0xFF	; 255
   16f7a:	2f 76       	andi	r18, 0x6F	; 111
   16f7c:	b2 2e       	mov	r11, r18
   16f7e:	97 ff       	sbrs	r25, 7
   16f80:	09 c0       	rjmp	.+18     	; 0x16f94 <vfprintf+0x216>
   16f82:	90 95       	com	r25
   16f84:	80 95       	com	r24
   16f86:	70 95       	com	r23
   16f88:	61 95       	neg	r22
   16f8a:	7f 4f       	sbci	r23, 0xFF	; 255
   16f8c:	8f 4f       	sbci	r24, 0xFF	; 255
   16f8e:	9f 4f       	sbci	r25, 0xFF	; 255
   16f90:	20 68       	ori	r18, 0x80	; 128
   16f92:	b2 2e       	mov	r11, r18
   16f94:	2a e0       	ldi	r18, 0x0A	; 10
   16f96:	30 e0       	ldi	r19, 0x00	; 0
   16f98:	a4 01       	movw	r20, r8
   16f9a:	6d d1       	rcall	.+730    	; 0x17276 <__ultoa_invert>
   16f9c:	a8 2e       	mov	r10, r24
   16f9e:	a8 18       	sub	r10, r8
   16fa0:	43 c0       	rjmp	.+134    	; 0x17028 <vfprintf+0x2aa>
   16fa2:	85 37       	cpi	r24, 0x75	; 117
   16fa4:	29 f4       	brne	.+10     	; 0x16fb0 <vfprintf+0x232>
   16fa6:	2f 7e       	andi	r18, 0xEF	; 239
   16fa8:	b2 2e       	mov	r11, r18
   16faa:	2a e0       	ldi	r18, 0x0A	; 10
   16fac:	30 e0       	ldi	r19, 0x00	; 0
   16fae:	25 c0       	rjmp	.+74     	; 0x16ffa <vfprintf+0x27c>
   16fb0:	f2 2f       	mov	r31, r18
   16fb2:	f9 7f       	andi	r31, 0xF9	; 249
   16fb4:	bf 2e       	mov	r11, r31
   16fb6:	8f 36       	cpi	r24, 0x6F	; 111
   16fb8:	c1 f0       	breq	.+48     	; 0x16fea <vfprintf+0x26c>
   16fba:	18 f4       	brcc	.+6      	; 0x16fc2 <vfprintf+0x244>
   16fbc:	88 35       	cpi	r24, 0x58	; 88
   16fbe:	79 f0       	breq	.+30     	; 0x16fde <vfprintf+0x260>
   16fc0:	ad c0       	rjmp	.+346    	; 0x1711c <vfprintf+0x39e>
   16fc2:	80 37       	cpi	r24, 0x70	; 112
   16fc4:	19 f0       	breq	.+6      	; 0x16fcc <vfprintf+0x24e>
   16fc6:	88 37       	cpi	r24, 0x78	; 120
   16fc8:	21 f0       	breq	.+8      	; 0x16fd2 <vfprintf+0x254>
   16fca:	a8 c0       	rjmp	.+336    	; 0x1711c <vfprintf+0x39e>
   16fcc:	2f 2f       	mov	r18, r31
   16fce:	20 61       	ori	r18, 0x10	; 16
   16fd0:	b2 2e       	mov	r11, r18
   16fd2:	b4 fe       	sbrs	r11, 4
   16fd4:	0d c0       	rjmp	.+26     	; 0x16ff0 <vfprintf+0x272>
   16fd6:	8b 2d       	mov	r24, r11
   16fd8:	84 60       	ori	r24, 0x04	; 4
   16fda:	b8 2e       	mov	r11, r24
   16fdc:	09 c0       	rjmp	.+18     	; 0x16ff0 <vfprintf+0x272>
   16fde:	24 ff       	sbrs	r18, 4
   16fe0:	0a c0       	rjmp	.+20     	; 0x16ff6 <vfprintf+0x278>
   16fe2:	9f 2f       	mov	r25, r31
   16fe4:	96 60       	ori	r25, 0x06	; 6
   16fe6:	b9 2e       	mov	r11, r25
   16fe8:	06 c0       	rjmp	.+12     	; 0x16ff6 <vfprintf+0x278>
   16fea:	28 e0       	ldi	r18, 0x08	; 8
   16fec:	30 e0       	ldi	r19, 0x00	; 0
   16fee:	05 c0       	rjmp	.+10     	; 0x16ffa <vfprintf+0x27c>
   16ff0:	20 e1       	ldi	r18, 0x10	; 16
   16ff2:	30 e0       	ldi	r19, 0x00	; 0
   16ff4:	02 c0       	rjmp	.+4      	; 0x16ffa <vfprintf+0x27c>
   16ff6:	20 e1       	ldi	r18, 0x10	; 16
   16ff8:	32 e0       	ldi	r19, 0x02	; 2
   16ffa:	f8 01       	movw	r30, r16
   16ffc:	b7 fe       	sbrs	r11, 7
   16ffe:	07 c0       	rjmp	.+14     	; 0x1700e <vfprintf+0x290>
   17000:	60 81       	ld	r22, Z
   17002:	71 81       	ldd	r23, Z+1	; 0x01
   17004:	82 81       	ldd	r24, Z+2	; 0x02
   17006:	93 81       	ldd	r25, Z+3	; 0x03
   17008:	0c 5f       	subi	r16, 0xFC	; 252
   1700a:	1f 4f       	sbci	r17, 0xFF	; 255
   1700c:	06 c0       	rjmp	.+12     	; 0x1701a <vfprintf+0x29c>
   1700e:	60 81       	ld	r22, Z
   17010:	71 81       	ldd	r23, Z+1	; 0x01
   17012:	80 e0       	ldi	r24, 0x00	; 0
   17014:	90 e0       	ldi	r25, 0x00	; 0
   17016:	0e 5f       	subi	r16, 0xFE	; 254
   17018:	1f 4f       	sbci	r17, 0xFF	; 255
   1701a:	a4 01       	movw	r20, r8
   1701c:	2c d1       	rcall	.+600    	; 0x17276 <__ultoa_invert>
   1701e:	a8 2e       	mov	r10, r24
   17020:	a8 18       	sub	r10, r8
   17022:	fb 2d       	mov	r31, r11
   17024:	ff 77       	andi	r31, 0x7F	; 127
   17026:	bf 2e       	mov	r11, r31
   17028:	b6 fe       	sbrs	r11, 6
   1702a:	0b c0       	rjmp	.+22     	; 0x17042 <vfprintf+0x2c4>
   1702c:	2b 2d       	mov	r18, r11
   1702e:	2e 7f       	andi	r18, 0xFE	; 254
   17030:	a5 14       	cp	r10, r5
   17032:	50 f4       	brcc	.+20     	; 0x17048 <vfprintf+0x2ca>
   17034:	b4 fe       	sbrs	r11, 4
   17036:	0a c0       	rjmp	.+20     	; 0x1704c <vfprintf+0x2ce>
   17038:	b2 fc       	sbrc	r11, 2
   1703a:	08 c0       	rjmp	.+16     	; 0x1704c <vfprintf+0x2ce>
   1703c:	2b 2d       	mov	r18, r11
   1703e:	2e 7e       	andi	r18, 0xEE	; 238
   17040:	05 c0       	rjmp	.+10     	; 0x1704c <vfprintf+0x2ce>
   17042:	7a 2c       	mov	r7, r10
   17044:	2b 2d       	mov	r18, r11
   17046:	03 c0       	rjmp	.+6      	; 0x1704e <vfprintf+0x2d0>
   17048:	7a 2c       	mov	r7, r10
   1704a:	01 c0       	rjmp	.+2      	; 0x1704e <vfprintf+0x2d0>
   1704c:	75 2c       	mov	r7, r5
   1704e:	24 ff       	sbrs	r18, 4
   17050:	0d c0       	rjmp	.+26     	; 0x1706c <vfprintf+0x2ee>
   17052:	fe 01       	movw	r30, r28
   17054:	ea 0d       	add	r30, r10
   17056:	f1 1d       	adc	r31, r1
   17058:	80 81       	ld	r24, Z
   1705a:	80 33       	cpi	r24, 0x30	; 48
   1705c:	11 f4       	brne	.+4      	; 0x17062 <vfprintf+0x2e4>
   1705e:	29 7e       	andi	r18, 0xE9	; 233
   17060:	09 c0       	rjmp	.+18     	; 0x17074 <vfprintf+0x2f6>
   17062:	22 ff       	sbrs	r18, 2
   17064:	06 c0       	rjmp	.+12     	; 0x17072 <vfprintf+0x2f4>
   17066:	73 94       	inc	r7
   17068:	73 94       	inc	r7
   1706a:	04 c0       	rjmp	.+8      	; 0x17074 <vfprintf+0x2f6>
   1706c:	82 2f       	mov	r24, r18
   1706e:	86 78       	andi	r24, 0x86	; 134
   17070:	09 f0       	breq	.+2      	; 0x17074 <vfprintf+0x2f6>
   17072:	73 94       	inc	r7
   17074:	23 fd       	sbrc	r18, 3
   17076:	12 c0       	rjmp	.+36     	; 0x1709c <vfprintf+0x31e>
   17078:	20 ff       	sbrs	r18, 0
   1707a:	06 c0       	rjmp	.+12     	; 0x17088 <vfprintf+0x30a>
   1707c:	5a 2c       	mov	r5, r10
   1707e:	73 14       	cp	r7, r3
   17080:	18 f4       	brcc	.+6      	; 0x17088 <vfprintf+0x30a>
   17082:	53 0c       	add	r5, r3
   17084:	57 18       	sub	r5, r7
   17086:	73 2c       	mov	r7, r3
   17088:	73 14       	cp	r7, r3
   1708a:	60 f4       	brcc	.+24     	; 0x170a4 <vfprintf+0x326>
   1708c:	b7 01       	movw	r22, r14
   1708e:	80 e2       	ldi	r24, 0x20	; 32
   17090:	90 e0       	ldi	r25, 0x00	; 0
   17092:	2c 87       	std	Y+12, r18	; 0x0c
   17094:	be d0       	rcall	.+380    	; 0x17212 <fputc>
   17096:	73 94       	inc	r7
   17098:	2c 85       	ldd	r18, Y+12	; 0x0c
   1709a:	f6 cf       	rjmp	.-20     	; 0x17088 <vfprintf+0x30a>
   1709c:	73 14       	cp	r7, r3
   1709e:	10 f4       	brcc	.+4      	; 0x170a4 <vfprintf+0x326>
   170a0:	37 18       	sub	r3, r7
   170a2:	01 c0       	rjmp	.+2      	; 0x170a6 <vfprintf+0x328>
   170a4:	31 2c       	mov	r3, r1
   170a6:	24 ff       	sbrs	r18, 4
   170a8:	11 c0       	rjmp	.+34     	; 0x170cc <vfprintf+0x34e>
   170aa:	b7 01       	movw	r22, r14
   170ac:	80 e3       	ldi	r24, 0x30	; 48
   170ae:	90 e0       	ldi	r25, 0x00	; 0
   170b0:	2c 87       	std	Y+12, r18	; 0x0c
   170b2:	af d0       	rcall	.+350    	; 0x17212 <fputc>
   170b4:	2c 85       	ldd	r18, Y+12	; 0x0c
   170b6:	22 ff       	sbrs	r18, 2
   170b8:	16 c0       	rjmp	.+44     	; 0x170e6 <vfprintf+0x368>
   170ba:	21 ff       	sbrs	r18, 1
   170bc:	03 c0       	rjmp	.+6      	; 0x170c4 <vfprintf+0x346>
   170be:	88 e5       	ldi	r24, 0x58	; 88
   170c0:	90 e0       	ldi	r25, 0x00	; 0
   170c2:	02 c0       	rjmp	.+4      	; 0x170c8 <vfprintf+0x34a>
   170c4:	88 e7       	ldi	r24, 0x78	; 120
   170c6:	90 e0       	ldi	r25, 0x00	; 0
   170c8:	b7 01       	movw	r22, r14
   170ca:	0c c0       	rjmp	.+24     	; 0x170e4 <vfprintf+0x366>
   170cc:	82 2f       	mov	r24, r18
   170ce:	86 78       	andi	r24, 0x86	; 134
   170d0:	51 f0       	breq	.+20     	; 0x170e6 <vfprintf+0x368>
   170d2:	21 fd       	sbrc	r18, 1
   170d4:	02 c0       	rjmp	.+4      	; 0x170da <vfprintf+0x35c>
   170d6:	80 e2       	ldi	r24, 0x20	; 32
   170d8:	01 c0       	rjmp	.+2      	; 0x170dc <vfprintf+0x35e>
   170da:	8b e2       	ldi	r24, 0x2B	; 43
   170dc:	27 fd       	sbrc	r18, 7
   170de:	8d e2       	ldi	r24, 0x2D	; 45
   170e0:	b7 01       	movw	r22, r14
   170e2:	90 e0       	ldi	r25, 0x00	; 0
   170e4:	96 d0       	rcall	.+300    	; 0x17212 <fputc>
   170e6:	a5 14       	cp	r10, r5
   170e8:	30 f4       	brcc	.+12     	; 0x170f6 <vfprintf+0x378>
   170ea:	b7 01       	movw	r22, r14
   170ec:	80 e3       	ldi	r24, 0x30	; 48
   170ee:	90 e0       	ldi	r25, 0x00	; 0
   170f0:	90 d0       	rcall	.+288    	; 0x17212 <fputc>
   170f2:	5a 94       	dec	r5
   170f4:	f8 cf       	rjmp	.-16     	; 0x170e6 <vfprintf+0x368>
   170f6:	aa 94       	dec	r10
   170f8:	f4 01       	movw	r30, r8
   170fa:	ea 0d       	add	r30, r10
   170fc:	f1 1d       	adc	r31, r1
   170fe:	80 81       	ld	r24, Z
   17100:	b7 01       	movw	r22, r14
   17102:	90 e0       	ldi	r25, 0x00	; 0
   17104:	86 d0       	rcall	.+268    	; 0x17212 <fputc>
   17106:	a1 10       	cpse	r10, r1
   17108:	f6 cf       	rjmp	.-20     	; 0x170f6 <vfprintf+0x378>
   1710a:	33 20       	and	r3, r3
   1710c:	09 f4       	brne	.+2      	; 0x17110 <vfprintf+0x392>
   1710e:	5d ce       	rjmp	.-838    	; 0x16dca <vfprintf+0x4c>
   17110:	b7 01       	movw	r22, r14
   17112:	80 e2       	ldi	r24, 0x20	; 32
   17114:	90 e0       	ldi	r25, 0x00	; 0
   17116:	7d d0       	rcall	.+250    	; 0x17212 <fputc>
   17118:	3a 94       	dec	r3
   1711a:	f7 cf       	rjmp	.-18     	; 0x1710a <vfprintf+0x38c>
   1711c:	f7 01       	movw	r30, r14
   1711e:	86 81       	ldd	r24, Z+6	; 0x06
   17120:	97 81       	ldd	r25, Z+7	; 0x07
   17122:	02 c0       	rjmp	.+4      	; 0x17128 <vfprintf+0x3aa>
   17124:	8f ef       	ldi	r24, 0xFF	; 255
   17126:	9f ef       	ldi	r25, 0xFF	; 255
   17128:	2c 96       	adiw	r28, 0x0c	; 12
   1712a:	0f b6       	in	r0, 0x3f	; 63
   1712c:	f8 94       	cli
   1712e:	de bf       	out	0x3e, r29	; 62
   17130:	0f be       	out	0x3f, r0	; 63
   17132:	cd bf       	out	0x3d, r28	; 61
   17134:	df 91       	pop	r29
   17136:	cf 91       	pop	r28
   17138:	1f 91       	pop	r17
   1713a:	0f 91       	pop	r16
   1713c:	ff 90       	pop	r15
   1713e:	ef 90       	pop	r14
   17140:	df 90       	pop	r13
   17142:	cf 90       	pop	r12
   17144:	bf 90       	pop	r11
   17146:	af 90       	pop	r10
   17148:	9f 90       	pop	r9
   1714a:	8f 90       	pop	r8
   1714c:	7f 90       	pop	r7
   1714e:	6f 90       	pop	r6
   17150:	5f 90       	pop	r5
   17152:	4f 90       	pop	r4
   17154:	3f 90       	pop	r3
   17156:	2f 90       	pop	r2
   17158:	08 95       	ret

0001715a <__eerd_byte_EEPROM_SUFFIX>:
   1715a:	f9 99       	sbic	0x1f, 1	; 31
   1715c:	fe cf       	rjmp	.-4      	; 0x1715a <__eerd_byte_EEPROM_SUFFIX>
   1715e:	92 bd       	out	0x22, r25	; 34
   17160:	81 bd       	out	0x21, r24	; 33
   17162:	f8 9a       	sbi	0x1f, 0	; 31
   17164:	99 27       	eor	r25, r25
   17166:	80 b5       	in	r24, 0x20	; 32
   17168:	08 95       	ret

0001716a <__eerd_dword_EEPROM_SUFFIX>:
   1716a:	a6 e1       	ldi	r26, 0x16	; 22
   1716c:	b0 e0       	ldi	r27, 0x00	; 0
   1716e:	44 e0       	ldi	r20, 0x04	; 4
   17170:	50 e0       	ldi	r21, 0x00	; 0
   17172:	e1 c0       	rjmp	.+450    	; 0x17336 <__eerd_blraw_EEPROM_SUFFIX>

00017174 <__eerd_word_EEPROM_SUFFIX>:
   17174:	a8 e1       	ldi	r26, 0x18	; 24
   17176:	b0 e0       	ldi	r27, 0x00	; 0
   17178:	42 e0       	ldi	r20, 0x02	; 2
   1717a:	50 e0       	ldi	r21, 0x00	; 0
   1717c:	dc c0       	rjmp	.+440    	; 0x17336 <__eerd_blraw_EEPROM_SUFFIX>

0001717e <__eeupd_byte_EEPROM_SUFFIX>:
   1717e:	26 2f       	mov	r18, r22

00017180 <__eeupd_r18_EEPROM_SUFFIX>:
   17180:	f9 99       	sbic	0x1f, 1	; 31
   17182:	fe cf       	rjmp	.-4      	; 0x17180 <__eeupd_r18_EEPROM_SUFFIX>
   17184:	92 bd       	out	0x22, r25	; 34
   17186:	81 bd       	out	0x21, r24	; 33
   17188:	f8 9a       	sbi	0x1f, 0	; 31
   1718a:	01 97       	sbiw	r24, 0x01	; 1
   1718c:	00 b4       	in	r0, 0x20	; 32
   1718e:	02 16       	cp	r0, r18
   17190:	39 f0       	breq	.+14     	; 0x171a0 <__eeupd_r18_EEPROM_SUFFIX+0x20>
   17192:	1f ba       	out	0x1f, r1	; 31
   17194:	20 bd       	out	0x20, r18	; 32
   17196:	0f b6       	in	r0, 0x3f	; 63
   17198:	f8 94       	cli
   1719a:	fa 9a       	sbi	0x1f, 2	; 31
   1719c:	f9 9a       	sbi	0x1f, 1	; 31
   1719e:	0f be       	out	0x3f, r0	; 63
   171a0:	08 95       	ret

000171a2 <__eeupd_word_EEPROM_SUFFIX>:
   171a2:	01 96       	adiw	r24, 0x01	; 1
   171a4:	27 2f       	mov	r18, r23
   171a6:	ec df       	rcall	.-40     	; 0x17180 <__eeupd_r18_EEPROM_SUFFIX>
   171a8:	ea cf       	rjmp	.-44     	; 0x1717e <__eeupd_byte_EEPROM_SUFFIX>

000171aa <__eewr_byte_EEPROM_SUFFIX>:
   171aa:	26 2f       	mov	r18, r22

000171ac <__eewr_r18_EEPROM_SUFFIX>:
   171ac:	f9 99       	sbic	0x1f, 1	; 31
   171ae:	fe cf       	rjmp	.-4      	; 0x171ac <__eewr_r18_EEPROM_SUFFIX>
   171b0:	1f ba       	out	0x1f, r1	; 31
   171b2:	92 bd       	out	0x22, r25	; 34
   171b4:	81 bd       	out	0x21, r24	; 33
   171b6:	20 bd       	out	0x20, r18	; 32
   171b8:	0f b6       	in	r0, 0x3f	; 63
   171ba:	f8 94       	cli
   171bc:	fa 9a       	sbi	0x1f, 2	; 31
   171be:	f9 9a       	sbi	0x1f, 1	; 31
   171c0:	0f be       	out	0x3f, r0	; 63
   171c2:	01 96       	adiw	r24, 0x01	; 1
   171c4:	08 95       	ret

000171c6 <strnlen_P>:
   171c6:	fc 01       	movw	r30, r24
   171c8:	05 90       	lpm	r0, Z+
   171ca:	61 50       	subi	r22, 0x01	; 1
   171cc:	70 40       	sbci	r23, 0x00	; 0
   171ce:	01 10       	cpse	r0, r1
   171d0:	d8 f7       	brcc	.-10     	; 0x171c8 <strnlen_P+0x2>
   171d2:	80 95       	com	r24
   171d4:	90 95       	com	r25
   171d6:	8e 0f       	add	r24, r30
   171d8:	9f 1f       	adc	r25, r31
   171da:	08 95       	ret

000171dc <strnlen>:
   171dc:	fc 01       	movw	r30, r24
   171de:	61 50       	subi	r22, 0x01	; 1
   171e0:	70 40       	sbci	r23, 0x00	; 0
   171e2:	01 90       	ld	r0, Z+
   171e4:	01 10       	cpse	r0, r1
   171e6:	d8 f7       	brcc	.-10     	; 0x171de <strnlen+0x2>
   171e8:	80 95       	com	r24
   171ea:	90 95       	com	r25
   171ec:	8e 0f       	add	r24, r30
   171ee:	9f 1f       	adc	r25, r31
   171f0:	08 95       	ret

000171f2 <strrev>:
   171f2:	dc 01       	movw	r26, r24
   171f4:	fc 01       	movw	r30, r24
   171f6:	67 2f       	mov	r22, r23
   171f8:	71 91       	ld	r23, Z+
   171fa:	77 23       	and	r23, r23
   171fc:	e1 f7       	brne	.-8      	; 0x171f6 <strrev+0x4>
   171fe:	32 97       	sbiw	r30, 0x02	; 2
   17200:	04 c0       	rjmp	.+8      	; 0x1720a <strrev+0x18>
   17202:	7c 91       	ld	r23, X
   17204:	6d 93       	st	X+, r22
   17206:	70 83       	st	Z, r23
   17208:	62 91       	ld	r22, -Z
   1720a:	ae 17       	cp	r26, r30
   1720c:	bf 07       	cpc	r27, r31
   1720e:	c8 f3       	brcs	.-14     	; 0x17202 <strrev+0x10>
   17210:	08 95       	ret

00017212 <fputc>:
   17212:	0f 93       	push	r16
   17214:	1f 93       	push	r17
   17216:	cf 93       	push	r28
   17218:	df 93       	push	r29
   1721a:	18 2f       	mov	r17, r24
   1721c:	09 2f       	mov	r16, r25
   1721e:	eb 01       	movw	r28, r22
   17220:	8b 81       	ldd	r24, Y+3	; 0x03
   17222:	81 fd       	sbrc	r24, 1
   17224:	03 c0       	rjmp	.+6      	; 0x1722c <fputc+0x1a>
   17226:	8f ef       	ldi	r24, 0xFF	; 255
   17228:	9f ef       	ldi	r25, 0xFF	; 255
   1722a:	20 c0       	rjmp	.+64     	; 0x1726c <fputc+0x5a>
   1722c:	82 ff       	sbrs	r24, 2
   1722e:	10 c0       	rjmp	.+32     	; 0x17250 <fputc+0x3e>
   17230:	4e 81       	ldd	r20, Y+6	; 0x06
   17232:	5f 81       	ldd	r21, Y+7	; 0x07
   17234:	2c 81       	ldd	r18, Y+4	; 0x04
   17236:	3d 81       	ldd	r19, Y+5	; 0x05
   17238:	42 17       	cp	r20, r18
   1723a:	53 07       	cpc	r21, r19
   1723c:	7c f4       	brge	.+30     	; 0x1725c <fputc+0x4a>
   1723e:	e8 81       	ld	r30, Y
   17240:	f9 81       	ldd	r31, Y+1	; 0x01
   17242:	9f 01       	movw	r18, r30
   17244:	2f 5f       	subi	r18, 0xFF	; 255
   17246:	3f 4f       	sbci	r19, 0xFF	; 255
   17248:	39 83       	std	Y+1, r19	; 0x01
   1724a:	28 83       	st	Y, r18
   1724c:	10 83       	st	Z, r17
   1724e:	06 c0       	rjmp	.+12     	; 0x1725c <fputc+0x4a>
   17250:	e8 85       	ldd	r30, Y+8	; 0x08
   17252:	f9 85       	ldd	r31, Y+9	; 0x09
   17254:	81 2f       	mov	r24, r17
   17256:	19 95       	eicall
   17258:	89 2b       	or	r24, r25
   1725a:	29 f7       	brne	.-54     	; 0x17226 <fputc+0x14>
   1725c:	2e 81       	ldd	r18, Y+6	; 0x06
   1725e:	3f 81       	ldd	r19, Y+7	; 0x07
   17260:	2f 5f       	subi	r18, 0xFF	; 255
   17262:	3f 4f       	sbci	r19, 0xFF	; 255
   17264:	3f 83       	std	Y+7, r19	; 0x07
   17266:	2e 83       	std	Y+6, r18	; 0x06
   17268:	81 2f       	mov	r24, r17
   1726a:	90 2f       	mov	r25, r16
   1726c:	df 91       	pop	r29
   1726e:	cf 91       	pop	r28
   17270:	1f 91       	pop	r17
   17272:	0f 91       	pop	r16
   17274:	08 95       	ret

00017276 <__ultoa_invert>:
   17276:	fa 01       	movw	r30, r20
   17278:	aa 27       	eor	r26, r26
   1727a:	28 30       	cpi	r18, 0x08	; 8
   1727c:	51 f1       	breq	.+84     	; 0x172d2 <__ultoa_invert+0x5c>
   1727e:	20 31       	cpi	r18, 0x10	; 16
   17280:	81 f1       	breq	.+96     	; 0x172e2 <__ultoa_invert+0x6c>
   17282:	e8 94       	clt
   17284:	6f 93       	push	r22
   17286:	6e 7f       	andi	r22, 0xFE	; 254
   17288:	6e 5f       	subi	r22, 0xFE	; 254
   1728a:	7f 4f       	sbci	r23, 0xFF	; 255
   1728c:	8f 4f       	sbci	r24, 0xFF	; 255
   1728e:	9f 4f       	sbci	r25, 0xFF	; 255
   17290:	af 4f       	sbci	r26, 0xFF	; 255
   17292:	b1 e0       	ldi	r27, 0x01	; 1
   17294:	3e d0       	rcall	.+124    	; 0x17312 <__ultoa_invert+0x9c>
   17296:	b4 e0       	ldi	r27, 0x04	; 4
   17298:	3c d0       	rcall	.+120    	; 0x17312 <__ultoa_invert+0x9c>
   1729a:	67 0f       	add	r22, r23
   1729c:	78 1f       	adc	r23, r24
   1729e:	89 1f       	adc	r24, r25
   172a0:	9a 1f       	adc	r25, r26
   172a2:	a1 1d       	adc	r26, r1
   172a4:	68 0f       	add	r22, r24
   172a6:	79 1f       	adc	r23, r25
   172a8:	8a 1f       	adc	r24, r26
   172aa:	91 1d       	adc	r25, r1
   172ac:	a1 1d       	adc	r26, r1
   172ae:	6a 0f       	add	r22, r26
   172b0:	71 1d       	adc	r23, r1
   172b2:	81 1d       	adc	r24, r1
   172b4:	91 1d       	adc	r25, r1
   172b6:	a1 1d       	adc	r26, r1
   172b8:	20 d0       	rcall	.+64     	; 0x172fa <__ultoa_invert+0x84>
   172ba:	09 f4       	brne	.+2      	; 0x172be <__ultoa_invert+0x48>
   172bc:	68 94       	set
   172be:	3f 91       	pop	r19
   172c0:	2a e0       	ldi	r18, 0x0A	; 10
   172c2:	26 9f       	mul	r18, r22
   172c4:	11 24       	eor	r1, r1
   172c6:	30 19       	sub	r19, r0
   172c8:	30 5d       	subi	r19, 0xD0	; 208
   172ca:	31 93       	st	Z+, r19
   172cc:	de f6       	brtc	.-74     	; 0x17284 <__ultoa_invert+0xe>
   172ce:	cf 01       	movw	r24, r30
   172d0:	08 95       	ret
   172d2:	46 2f       	mov	r20, r22
   172d4:	47 70       	andi	r20, 0x07	; 7
   172d6:	40 5d       	subi	r20, 0xD0	; 208
   172d8:	41 93       	st	Z+, r20
   172da:	b3 e0       	ldi	r27, 0x03	; 3
   172dc:	0f d0       	rcall	.+30     	; 0x172fc <__ultoa_invert+0x86>
   172de:	c9 f7       	brne	.-14     	; 0x172d2 <__ultoa_invert+0x5c>
   172e0:	f6 cf       	rjmp	.-20     	; 0x172ce <__ultoa_invert+0x58>
   172e2:	46 2f       	mov	r20, r22
   172e4:	4f 70       	andi	r20, 0x0F	; 15
   172e6:	40 5d       	subi	r20, 0xD0	; 208
   172e8:	4a 33       	cpi	r20, 0x3A	; 58
   172ea:	18 f0       	brcs	.+6      	; 0x172f2 <__ultoa_invert+0x7c>
   172ec:	49 5d       	subi	r20, 0xD9	; 217
   172ee:	31 fd       	sbrc	r19, 1
   172f0:	40 52       	subi	r20, 0x20	; 32
   172f2:	41 93       	st	Z+, r20
   172f4:	02 d0       	rcall	.+4      	; 0x172fa <__ultoa_invert+0x84>
   172f6:	a9 f7       	brne	.-22     	; 0x172e2 <__ultoa_invert+0x6c>
   172f8:	ea cf       	rjmp	.-44     	; 0x172ce <__ultoa_invert+0x58>
   172fa:	b4 e0       	ldi	r27, 0x04	; 4
   172fc:	a6 95       	lsr	r26
   172fe:	97 95       	ror	r25
   17300:	87 95       	ror	r24
   17302:	77 95       	ror	r23
   17304:	67 95       	ror	r22
   17306:	ba 95       	dec	r27
   17308:	c9 f7       	brne	.-14     	; 0x172fc <__ultoa_invert+0x86>
   1730a:	00 97       	sbiw	r24, 0x00	; 0
   1730c:	61 05       	cpc	r22, r1
   1730e:	71 05       	cpc	r23, r1
   17310:	08 95       	ret
   17312:	9b 01       	movw	r18, r22
   17314:	ac 01       	movw	r20, r24
   17316:	0a 2e       	mov	r0, r26
   17318:	06 94       	lsr	r0
   1731a:	57 95       	ror	r21
   1731c:	47 95       	ror	r20
   1731e:	37 95       	ror	r19
   17320:	27 95       	ror	r18
   17322:	ba 95       	dec	r27
   17324:	c9 f7       	brne	.-14     	; 0x17318 <__ultoa_invert+0xa2>
   17326:	62 0f       	add	r22, r18
   17328:	73 1f       	adc	r23, r19
   1732a:	84 1f       	adc	r24, r20
   1732c:	95 1f       	adc	r25, r21
   1732e:	a0 1d       	adc	r26, r0
   17330:	08 95       	ret

00017332 <__eerd_block_EEPROM_SUFFIX>:
   17332:	dc 01       	movw	r26, r24
   17334:	cb 01       	movw	r24, r22

00017336 <__eerd_blraw_EEPROM_SUFFIX>:
   17336:	fc 01       	movw	r30, r24
   17338:	f9 99       	sbic	0x1f, 1	; 31
   1733a:	fe cf       	rjmp	.-4      	; 0x17338 <__eerd_blraw_EEPROM_SUFFIX+0x2>
   1733c:	06 c0       	rjmp	.+12     	; 0x1734a <__eerd_blraw_EEPROM_SUFFIX+0x14>
   1733e:	f2 bd       	out	0x22, r31	; 34
   17340:	e1 bd       	out	0x21, r30	; 33
   17342:	f8 9a       	sbi	0x1f, 0	; 31
   17344:	31 96       	adiw	r30, 0x01	; 1
   17346:	00 b4       	in	r0, 0x20	; 32
   17348:	0d 92       	st	X+, r0
   1734a:	41 50       	subi	r20, 0x01	; 1
   1734c:	50 40       	sbci	r21, 0x00	; 0
   1734e:	b8 f7       	brcc	.-18     	; 0x1733e <__eerd_blraw_EEPROM_SUFFIX+0x8>
   17350:	08 95       	ret

00017352 <__mulshisi3>:
   17352:	b7 ff       	sbrs	r27, 7
   17354:	e1 c8       	rjmp	.-3646   	; 0x16518 <__muluhisi3>

00017356 <__mulohisi3>:
   17356:	e0 d8       	rcall	.-3648   	; 0x16518 <__muluhisi3>
   17358:	82 1b       	sub	r24, r18
   1735a:	93 0b       	sbc	r25, r19
   1735c:	08 95       	ret

0001735e <__do_global_dtors>:
   1735e:	17 e1       	ldi	r17, 0x17	; 23
   17360:	c2 e5       	ldi	r28, 0x52	; 82
   17362:	d7 e1       	ldi	r29, 0x17	; 23
   17364:	00 e0       	ldi	r16, 0x00	; 0
   17366:	05 c0       	rjmp	.+10     	; 0x17372 <__do_global_dtors+0x14>
   17368:	22 97       	sbiw	r28, 0x02	; 2
   1736a:	01 09       	sbc	r16, r1
   1736c:	fe 01       	movw	r30, r28
   1736e:	0b bf       	out	0x3b, r16	; 59
   17370:	dd d8       	rcall	.-3654   	; 0x1652c <__tablejump_elpm__>
   17372:	c6 35       	cpi	r28, 0x56	; 86
   17374:	d1 07       	cpc	r29, r17
   17376:	80 e0       	ldi	r24, 0x00	; 0
   17378:	08 07       	cpc	r16, r24
   1737a:	b1 f7       	brne	.-20     	; 0x17368 <__do_global_dtors+0xa>
   1737c:	f8 94       	cli

0001737e <__stop_program>:
   1737e:	ff cf       	rjmp	.-2      	; 0x1737e <__stop_program>
